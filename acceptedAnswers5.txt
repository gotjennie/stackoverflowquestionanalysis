(dp0
Vhas_more
p1
I01
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p><code>re.match</code> is anchored at the beginning of the string. That has nothing to do with newlines, so it is not the same as using <code>^</code> in the pattern.</p>\u000a\u000a<p>As the <a href="http://docs.python.org/2/library/re.html#re.match" rel="nofollow noreferrer">re.match documentation</a> says:</p>\u000a\u000a<blockquote>\u000a  <p>If zero or more characters at the\u000a  <strong>beginning of string</strong> match the regular expression pattern, return a\u000a  corresponding <code>MatchObject</code> instance.\u000a  Return <code>None</code> if the string does not\u000a  match the pattern; note that this is\u000a  different from a zero-length match.</p>\u000a  \u000a  <p>Note: If you want to locate a match\u000a  anywhere in string, use <code>search()</code>\u000a  instead.</p>\u000a</blockquote>\u000a\u000a<p><code>re.search</code> searches the entire string, as <a href="http://docs.python.org/2/library/re.html#re.search" rel="nofollow noreferrer">the documentation says</a>:</p>\u000a\u000a<blockquote>\u000a  <p><strong>Scan through string</strong> looking for a\u000a  location where the regular expression\u000a  pattern produces a match, and return a\u000a  corresponding <code>MatchObject</code> instance.\u000a  Return <code>None</code> if no position in the\u000a  string matches the pattern; note that\u000a  this is different from finding a\u000a  zero-length match at some point in the\u000a  string.</p>\u000a</blockquote>\u000a\u000a<p>So if you need to match at the beginning of the string, or to match the entire string use <code>match</code>. It is faster. Otherwise use <code>search</code>.</p>\u000a\u000a<p>The documentation has a <a href="http://docs.python.org/2/library/re.html#search-vs-match" rel="nofollow noreferrer">specific section for <code>match</code> vs. <code>search</code></a> that also covers multiline strings:</p>\u000a\u000a<blockquote>\u000a  <p>Python offers two different primitive\u000a  operations based on regular\u000a  expressions: <code>match</code> checks for a match\u000a  <strong>only at the beginning</strong> of the string,\u000a  while <code>search</code> checks for a match\u000a  <strong>anywhere</strong> in the string (this is what\u000a  Perl does by default).</p>\u000a  \u000a  <p>Note that <code>match</code> may differ from <code>search</code>\u000a  even when using a regular expression\u000a  beginning with <code>'^'</code>: <code>'^'</code> matches only\u000a  at the start of the string, or in\u000a  <code>MULTILINE</code> mode also immediately\u000a  following a newline. The \u201c<code>match</code>\u201d\u000a  operation succeeds <em>only if the pattern\u000a  matches at the <strong>start</strong> of the string</em>\u000a  regardless of mode, or at the starting\u000a  position given by the optional <code>pos</code>\u000a  argument regardless of whether a\u000a  newline precedes it.</p>\u000a</blockquote>\u000a\u000a<p>Now, enough talk. Time to see some example code:</p>\u000a\u000a<pre><code># example code:\u000astring_with_newlines = """something\u000asomeotherthing"""\u000a\u000aimport re\u000a\u000aprint re.match('some', string_with_newlines) # matches\u000aprint re.match('someother', \u000a               string_with_newlines) # won't match\u000aprint re.match('^someother', string_with_newlines, \u000a               re.MULTILINE) # also won't match\u000aprint re.search('someother', \u000a                string_with_newlines) # finds something\u000aprint re.search('^someother', string_with_newlines, \u000a                re.MULTILINE) # also finds something\u000a\u000am = re.compile('thing$', re.MULTILINE)\u000a\u000aprint m.match(string_with_newlines) # no match\u000aprint m.match(string_with_newlines, pos=4) # matches\u000aprint m.search(string_with_newlines, \u000a               re.MULTILINE) # also matches\u000a</code></pre>\u000a
p6
sVquestion_id
p7
I180986
sVlast_activity_date
p8
I1494952234
sVcreation_date
p9
I1223427192
sVscore
p10
I253
sVowner
p11
(dp12
Vuser_id
p13
I17160
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I118019
sVlink
p19
Vhttp://stackoverflow.com/users/17160/nosklo
p20
sVaccept_rate
p21
I78
sVdisplay_name
p22
Vnosklo
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1494952234
sVanswer_id
p26
I180993
sa(dp27
Vbody
p28
V<p>You misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:</p>\u000a\u000a<pre><code>if x == 1 or y == 1 or z == 1:\u000a</code></pre>\u000a\u000a<p><code>x</code> and <code>y</code> are otherwise evaluated on their own (<code>False</code> if <code>0</code>, <code>True</code> otherwise).</p>\u000a\u000a<p>You can shorten that to:</p>\u000a\u000a<pre><code>if 1 in (x, y, z):\u000a</code></pre>\u000a\u000a<p>or better still:</p>\u000a\u000a<pre><code>if 1 in {x, y, z}:\u000a</code></pre>\u000a\u000a<p>using a <code>set</code> to take advantage of the constant-cost membership test (<code>in</code> takes a fixed amount of time whatever the left-hand operand is).</p>\u000a\u000a<p>When you use <code>or</code>, python sees each side of the operator as <em>separate</em> expressions. The expression <code>x or y == 1</code> is treated as first a boolean test for <code>x</code>, then if that is False, the expression <code>y == 1</code> is tested.</p>\u000a\u000a<p>This is due to <a href="http://docs.python.org/2/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">operator precedence</a>. The <code>or</code> operator has a lower precedence than the <code>==</code> test, so the latter is evaluated <em>first</em>.</p>\u000a\u000a<p>However, even if this were <em>not</em> the case, and the expression <code>x or y or z == 1</code> was actually interpreted as <code>(x or y or z) == 1</code> instead, this would still not do what you expect it to do. </p>\u000a\u000a<p><code>x or y or z</code> would evaluate to the first argument that is 'truthy', e.g. not <code>False</code>, numeric 0 or empty (see <a href="http://docs.python.org/2/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">boolean expressions</a> for details on what Python considers false in a boolean context).</p>\u000a\u000a<p>So for the values <code>x = 2; y = 1; z = 0</code>, <code>x or y or z</code> would resolve to <code>2</code>, because that is the first true-like value in the arguments. Then <code>2 == 1</code> would be <code>False</code>, even though <code>y == 1</code> would be <code>True</code>.</p>\u000a\u000a<p>The same would apply to the inverse; testing multiple values against a single variable; <code>x == 1 or 2 or 3</code> would fail for the same reasons. Use <code>x == 1 or x == 2 or x == 3</code> or <code>x in {1, 2, 3}</code>.</p>\u000a
p29
sVquestion_id
p30
I15112125
sVlast_activity_date
p31
I1493713820
sVcreation_date
p32
I1361968060
sVscore
p33
I333
sVowner
p34
(dp35
Vuser_id
p36
I100297
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vmoderator
p40
sVreputation
p41
I554452
sVlink
p42
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p43
sVdisplay_name
p44
VMartijn Pieters
p45
ssVis_accepted
p46
I01
sVlast_edit_date
p47
I1493713820
sVanswer_id
p48
I15112149
sa(dp49
Vbody
p50
V<pre><code>text_file = open("Output.txt", "w")\u000atext_file.write("Purchase Amount: %s" % TotalAmount)\u000atext_file.close()\u000a</code></pre>\u000a\u000a<p>If you use a context manager, the file is closed automatically for you</p>\u000a\u000a<pre><code>with open("Output.txt", "w") as text_file:\u000a    text_file.write("Purchase Amount: %s" % TotalAmount)\u000a</code></pre>\u000a\u000a<p>If you're using Python2.6 or higher, it's preferred to use <code>str.format()</code></p>\u000a\u000a<pre><code>with open("Output.txt", "w") as text_file:\u000a    text_file.write("Purchase Amount: {0}".format(TotalAmount))\u000a</code></pre>\u000a\u000a<p>For python2.7 and higher you can use <code>{}</code> instead of <code>{0}</code></p>\u000a\u000a<p>In Python3, there is an optional <code>file</code> parameter to the <code>print</code> function</p>\u000a\u000a<pre><code>with open("Output.txt", "w") as text_file:\u000a    print("Purchase Amount: {}".format(TotalAmount), file=text_file)\u000a</code></pre>\u000a\u000a<p>Python3.6 introduced <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="noreferrer">f-strings</a> for another alternative</p>\u000a\u000a<pre><code>with open("Output.txt", "w") as text_file:\u000a    print(f"Purchase Amount: {TotalAmount}", file=text_file)\u000a</code></pre>\u000a
p51
sVquestion_id
p52
I5214578
sVlast_activity_date
p53
I1493697460
sVcreation_date
p54
I1299458078
sVscore
p55
I515
sVowner
p56
(dp57
Vuser_id
p58
I174728
sVprofile_image
p59
Vhttps://i.stack.imgur.com/eRO75.jpg?s=128&g=1
p60
sVuser_type
p61
Vregistered
p62
sVreputation
p63
I166935
sVlink
p64
Vhttp://stackoverflow.com/users/174728/john-la-rooy
p65
sVaccept_rate
p66
I100
sVdisplay_name
p67
VJohn La Rooy
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1493697460
sVanswer_id
p71
I5214587
sa(dp72
Vbody
p73
V<p>Well, I decided to workout myself on my question to solve above problem. What I wanted is to implement a simpl OCR using KNearest or SVM features in OpenCV. And below is what I did and how. ( it is just for learning how to use KNearest for simple OCR purposes).</p>\u000a\u000a<p><strong>1)</strong> My first question was about letter_recognition.data file that comes with OpenCV samples. I wanted to know what is inside that file.</p>\u000a\u000a<p>It contains a letter, along with 16 features of that letter.</p>\u000a\u000a<p>And <a href="http://stackoverflow.com/questions/1270798/how-to-create-data-fom-image-like-letter-image-recognition-dataset-from-uci"><code>this SOF</code></a> helped me to find it. These 16 features are explained in the paper<a href="http://cns-classes.bu.edu/cn550/Readings/frey-slate-91.pdf" rel="noreferrer"><strong><code>Letter Recognition Using Holland-Style Adaptive Classifiers</code></strong></a>.\u000a( Although I didn't understand some of the features at end)</p>\u000a\u000a<p><strong>2)</strong> Since I knew, without understanding all those features, it is difficult to do that method. I tried some other papers, but all were a little difficult for a beginner.</p>\u000a\u000a<p><code>So I just decided to take all the pixel values as my features.</code> (I was not worried about accuracy or performance, I just wanted it to work, at least with the least accuracy)</p>\u000a\u000a<p>I took below image for my training data:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/IwQY6.png" alt="enter image description here"></p>\u000a\u000a<p>( I know the amount of training data is less. But, since all letters are of same font and size, I decided to try on this).</p>\u000a\u000a<p><strong>To prepare the data for training, I made a small code in OpenCV. It does following things:</strong></p>\u000a\u000a<p>A) It loads the image.</p>\u000a\u000a<p>B) Selects the digits ( obviously by contour finding and applying constraints on area and height of letters to avoid false detections).</p>\u000a\u000a<p>C) Draws the bounding rectangle around one letter and wait for <code>key press manually</code>. This time we <strong>press the digit key ourselves</strong> corresponding to the letter in box.</p>\u000a\u000a<p>D) Once corresponding digit key is pressed, it resizes this box to 10x10 and saves 100 pixel values in an array (here, samples) and corresponding manually entered digit in another array(here, responses).</p>\u000a\u000a<p>E) Then save both the arrays in separate txt files.</p>\u000a\u000a<p>At the end of manual classification of digits, all the digits in the train data( train.png) are labeled manually by ourselves, image will look like below:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/jyAhT.png" alt="enter image description here"></p>\u000a\u000a<p>Below is the code I used for above purpose ( of course, not so clean):</p>\u000a\u000a<pre><code>import sys\u000a\u000aimport numpy as np\u000aimport cv2\u000a\u000aim = cv2.imread('pitrain.png')\u000aim3 = im.copy()\u000a\u000agray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\u000ablur = cv2.GaussianBlur(gray,(5,5),0)\u000athresh = cv2.adaptiveThreshold(blur,255,1,1,11,2)\u000a\u000a#################      Now finding Contours         ###################\u000a\u000acontours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\u000a\u000asamples =  np.empty((0,100))\u000aresponses = []\u000akeys = [i for i in range(48,58)]\u000a\u000afor cnt in contours:\u000a    if cv2.contourArea(cnt)&gt;50:\u000a        [x,y,w,h] = cv2.boundingRect(cnt)\u000a\u000a        if  h&gt;28:\u000a            cv2.rectangle(im,(x,y),(x+w,y+h),(0,0,255),2)\u000a            roi = thresh[y:y+h,x:x+w]\u000a            roismall = cv2.resize(roi,(10,10))\u000a            cv2.imshow('norm',im)\u000a            key = cv2.waitKey(0)\u000a\u000a            if key == 27:  # (escape to quit)\u000a                sys.exit()\u000a            elif key in keys:\u000a                responses.append(int(chr(key)))\u000a                sample = roismall.reshape((1,100))\u000a                samples = np.append(samples,sample,0)\u000a\u000aresponses = np.array(responses,np.float32)\u000aresponses = responses.reshape((responses.size,1))\u000aprint "training complete"\u000a\u000anp.savetxt('generalsamples.data',samples)\u000anp.savetxt('generalresponses.data',responses)\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>Now we enter in to training and testing part.</strong></p>\u000a\u000a<p>For testing part I used below image, which has same type of letters I used to train.</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/dPaE8.png" alt="enter image description here"></p>\u000a\u000a<p><strong>For training we do as follows</strong>:</p>\u000a\u000a<p>A) Load the txt files we already saved earlier</p>\u000a\u000a<p>B) create a instance of classifier we are using ( here, it is KNearest)</p>\u000a\u000a<p>C) Then we use KNearest.train function to train the data</p>\u000a\u000a<p><strong>For testing purposes, we do as follows:</strong></p>\u000a\u000a<p>A) We load the image used for testing</p>\u000a\u000a<p>B) process the image as earlier and extract each digit using contour methods</p>\u000a\u000a<p>C) Draw bounding box for it, then resize to 10x10, and store its pixel values in an array as done earlier. </p>\u000a\u000a<p>D) Then we use KNearest.find_nearest() function to find the nearest item to the one we gave. ( If lucky, it recognises the correct digit.)</p>\u000a\u000a<p>I included last two steps ( training and testing) in single code below:</p>\u000a\u000a<pre><code>import cv2\u000aimport numpy as np\u000a\u000a#######   training part    ############### \u000asamples = np.loadtxt('generalsamples.data',np.float32)\u000aresponses = np.loadtxt('generalresponses.data',np.float32)\u000aresponses = responses.reshape((responses.size,1))\u000a\u000amodel = cv2.KNearest()\u000amodel.train(samples,responses)\u000a\u000a############################# testing part  #########################\u000a\u000aim = cv2.imread('pi.png')\u000aout = np.zeros(im.shape,np.uint8)\u000agray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\u000athresh = cv2.adaptiveThreshold(gray,255,1,1,11,2)\u000a\u000acontours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\u000a\u000afor cnt in contours:\u000a    if cv2.contourArea(cnt)&gt;50:\u000a        [x,y,w,h] = cv2.boundingRect(cnt)\u000a        if  h&gt;28:\u000a            cv2.rectangle(im,(x,y),(x+w,y+h),(0,255,0),2)\u000a            roi = thresh[y:y+h,x:x+w]\u000a            roismall = cv2.resize(roi,(10,10))\u000a            roismall = roismall.reshape((1,100))\u000a            roismall = np.float32(roismall)\u000a            retval, results, neigh_resp, dists = model.find_nearest(roismall, k = 1)\u000a            string = str(int((results[0][0])))\u000a            cv2.putText(out,string,(x,y+h),0,1,(0,255,0))\u000a\u000acv2.imshow('im',im)\u000acv2.imshow('out',out)\u000acv2.waitKey(0)\u000a</code></pre>\u000a\u000a<p>And it worked, below is the result I got:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/xS3gF.png" alt="enter image description here"></p>\u000a\u000a<hr>\u000a\u000a<p>Here it worked with 100% accuracy. I assume this is because all the digits are of same kind and same size.</p>\u000a\u000a<p>But any way, this is a good start to go for beginners ( I hope so).</p>\u000a
p74
sVquestion_id
p75
I9413216
sVlast_activity_date
p76
I1492877767
sVcreation_date
p77
I1331220949
sVscore
p78
I374
sVowner
p79
(dp80
Vuser_id
p81
I1134940
sVprofile_image
p82
Vhttps://www.gravatar.com/avatar/a96e438acc27c0e4961ec84a019e78c6?s=128&d=identicon&r=PG
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I30024
sVlink
p87
Vhttp://stackoverflow.com/users/1134940/abid-rahman-k
p88
sVaccept_rate
p89
I77
sVdisplay_name
p90
VAbid Rahman K
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1492877767
sVanswer_id
p94
I9620295
sa(dp95
Vbody
p96
V<p>In python the <code>with</code> keyword is used when working with unmanaged resources (like file streams). It is similar to the <code>using</code> statement in VB.NET and C#. It allows you to ensure that a resource is "cleaned up" when the code that uses it finishes running, even if exceptions are thrown. It provides 'syntactic sugar' for <code>try/finally</code> blocks. </p>\u000a\u000a<p>From <a href="http://docs.python.org/whatsnew/2.6.html#pep-343-the-with-statement" rel="noreferrer">Python Docs</a>: </p>\u000a\u000a<blockquote>\u000a  <p>The <code>with</code> statement clarifies code that previously would use <code>try...finally</code> blocks to ensure that clean-up code is executed. In this section, I\u2019ll discuss the statement as it will commonly be used. In the next section, I\u2019ll examine the implementation details and show how to write objects for use with this statement.</p>\u000a  \u000a  <p>The <code>with</code> statement is a control-flow structure whose basic structure is:</p>\u000a\u000a<pre><code>with expression [as variable]:\u000a    with-block\u000a</code></pre>\u000a  \u000a  <p>The expression is evaluated, and it should result in an object that supports the context management protocol (that is, has <code>__enter__()</code> and <code>__exit__()</code> methods).</p>\u000a</blockquote>\u000a\u000a<p><em>Update</em> fixed VB callout per Scott Wisniewski's comment. I was indeed confusing <code>with</code> with <code>using</code>.</p>\u000a
p97
sVquestion_id
p98
I1369526
sVlast_activity_date
p99
I1491425549
sVcreation_date
p100
I1251918311
sVscore
p101
I182
sVowner
p102
(dp103
Vuser_id
p104
I149
sVprofile_image
p105
Vhttps://www.gravatar.com/avatar/bc46fdb623a9c91672c68be6dc3e80d8?s=128&d=identicon&r=PG
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I10128
sVlink
p110
Vhttp://stackoverflow.com/users/149/rob-allen
p111
sVaccept_rate
p112
I81
sVdisplay_name
p113
VRob Allen
p114
ssVis_accepted
p115
I01
sVlast_edit_date
p116
I1491425549
sVanswer_id
p117
I1369553
sa(dp118
Vbody
p119
V<h1>The short answer, or TL;DR</h1>\u000a\u000a<p>Basically, <a href="https://docs.python.org/3/library/functions.html#eval" rel="noreferrer"><code>eval</code></a> is used to <strong>eval</strong>uate a single dynamically generated Python expression, and <a href="https://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec</code></a> is used to <strong>exec</strong>ute dynamically generated Python code only for its side effects.</p>\u000a\u000a<p><code>eval</code> and <code>exec</code> have these two differences:</p>\u000a\u000a<ol>\u000a<li><p><code>eval</code> accepts only a <strong>single expression</strong>, <code>exec</code> can take a code block that has Python statements: loops, <code>try: except:</code>, <code>class</code> and function/method <code>def</code>initions and so on. </p>\u000a\u000a<p>An expression in Python is whatever you can have as the value in a variable assignment:</p>\u000a\u000a<pre><code>a_variable = (anything that you can put into these parentheses is an expression)\u000a</code></pre></li>\u000a<li><p><code>eval</code> <strong>returns the value</strong> of the given expression, whereas <code>exec</code> ignores the return value from its code, and always returns <code>None</code> (in Python 2 it is a statement and cannot be used as an expression, so it really does not return anything).</p></li>\u000a</ol>\u000a\u000a<p>In versions 1.0 - 2.7, <code>exec</code> was a statement, because CPython needed to produce a different kind of code object for functions that used <code>exec</code> for its side effects inside the function. </p>\u000a\u000a<p>In Python 3, <code>exec</code> is a function; it always produces the same kind of code object regardless of whether it is being called inside a functions or in the module scope.</p>\u000a\u000a<hr>\u000a\u000a<p>Thus basically:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = 5\u000a&gt;&gt;&gt; eval('37 + a')   # it is an expression\u000a42\u000a&gt;&gt;&gt; exec('37 + a')   # it is an expression statement; value is ignored (None is returned)\u000a&gt;&gt;&gt; exec('a = 47')   # modify a global variable as a side effect\u000a&gt;&gt;&gt; a\u000a47\u000a&gt;&gt;&gt; eval('a = 47')  # you cannot evaluate a statement\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "&lt;string&gt;", line 1\u000a    a = 47\u000a      ^\u000aSyntaxError: invalid syntax\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>The <code>compile</code> in <code>'exec'</code> mode compiles any number of statements into a bytecode that implicitly always returns <code>None</code>, whereas in <code>'eval'</code> mode it compiles a <em>single</em> expression into a bytecode that <em>returns</em> the value of that expression. </p>\u000a\u000a<pre><code>&gt;&gt;&gt; eval(compile('42', '&lt;string&gt;', 'exec'))  # code return None\u000a&gt;&gt;&gt; eval(compile('42', '&lt;string&gt;', 'eval'))  # code returns 42\u000a42\u000a&gt;&gt;&gt; exec(compile('42', '&lt;string&gt;', 'eval'))  # code returns 42,\u000a&gt;&gt;&gt;                                          # but ignored by exec\u000a</code></pre>\u000a\u000a<p>In the <code>'eval'</code> mode (and thus with the <code>eval</code> function if a string is passed in), the <code>compile</code> raises an exception if the source code contains statements or anything else beyond a single expression:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; compile('for i in range(3): print(i)', '&lt;string&gt;'. 'eval')\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "&lt;string&gt;", line 1\u000a    for i in range(3): print(i)\u000a      ^\u000aSyntaxError: invalid syntax\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Actually the statement <em>"eval accepts only a single expression"</em> applies only when a string (which contains Python <em>source code</em>) is passed to <code>eval</code>. Then it is internally compiled to bytecode using <a href="https://docs.python.org/3/library/functions.html#compile" rel="noreferrer"><code>compile(source, '&lt;string&gt;', 'eval')</code></a> This is where the difference really comes from.</p>\u000a\u000a<p>If a <code>code</code> object (which contains Python <em>bytecode</em>) is passed to <code>exec</code> or <code>eval</code>, <em>they behave identically</em>, excepting for the fact that <code>exec</code> ignores the return value, still returning <code>None</code> always. So it is possible use <code>eval</code> to execute something that has statements, if you just <code>compile</code>d it into bytecode before instead of passing it as a string:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; eval(compile('if 1: print("Hello")', '&lt;string&gt;', 'exec'))\u000aHello\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a\u000a<p>works without problems, even though the compiled code contains statements. It still returns <code>None</code>, because that is the return value of the code object returned from <code>compile</code>.</p>\u000a\u000a<p>In the <code>'eval'</code> mode (and thus with the <code>eval</code> function if a string is passed in), the <code>compile</code> raises an exception if the source code contains statements or anything else beyond a single expression:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; compile('for i in range(3): print(i)', '&lt;string&gt;'. 'eval')\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "&lt;string&gt;", line 1\u000a    for i in range(3): print(i)\u000a      ^\u000aSyntaxError: invalid syntax\u000a</code></pre>\u000a\u000a<h1>The longer answer, a.k.a the gory details</h1>\u000a\u000a<h2><code>exec</code> and <code>eval</code></h2>\u000a\u000a<p>The <a href="https://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec</code></a> function (which was <a href="https://docs.python.org/2/reference/simple_stmts.html#exec" rel="noreferrer">a statement in Python 2</a>) is used for executing a dynamically created statement or program:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; program = 'for i in range(3):\u005cn    print("Python is cool")'\u000a&gt;&gt;&gt; exec(program)\u000aPython is cool\u000aPython is cool\u000aPython is cool\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a\u000a<p>The <a href="https://docs.python.org/3/library/functions.html#eval" rel="noreferrer"><code>eval</code></a> function does the same for a <a href="https://docs.python.org/3/reference/expressions.html" rel="noreferrer">single expression</a>, <em>and</em> returns the value of the expression:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = 2\u000a&gt;&gt;&gt; my_calculation = '42 * a'\u000a&gt;&gt;&gt; result = eval(my_calculation)\u000a&gt;&gt;&gt; result\u000a84\u000a</code></pre>\u000a\u000a<p><code>exec</code> and <code>eval</code> both accept the program/expression to be run either as a <code>str</code>, <code>unicode</code> or <code>bytes</code> object containing source code, or as a <em><code>code</code> object</em> which contains Python bytecode. </p>\u000a\u000a<p>If a <code>str</code>/<code>unicode</code>/<code>bytes</code> containing source code was passed to <code>exec</code>, it behaves equivalently to:</p>\u000a\u000a<pre><code>exec(compile(source, '&lt;string&gt;', 'exec'))\u000a</code></pre>\u000a\u000a<p>and <code>eval</code> similarly behaves equivalent to:</p>\u000a\u000a<pre><code>eval(compile(source, '&lt;string&gt;', 'eval'))\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Since all expressions can be used as statements in Python (these are called the <code>Expr</code> nodes in the Python <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="noreferrer">abstract grammar</a>; the opposite is not true), you can always use <code>exec</code> if you do not need the return value. That is to say, you can use either <code>eval('my_func(42)')</code> or <code>exec('my_func(42)')</code>, the difference being that <code>eval</code> returns the value returned by <code>my_func</code>, and <code>exec</code> discards it:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def my_func(arg):\u000a...     print("Called with %d" % arg)\u000a...     return arg * 2\u000a... \u000a&gt;&gt;&gt; exec('my_func(42)')\u000aCalled with 42\u000a&gt;&gt;&gt; eval('my_func(42)')\u000aCalled with 42\u000a84\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a\u000a<p>Of the 2, only <code>exec</code> accepts source code that contains statements, like <code>def</code>, <code>for</code>, <code>while</code>, <code>import</code>, or <code>class</code>, the assignment statement (a.k.a <code>a = 42</code>), or entire programs:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; exec('for i in range(3): print(i)')\u000a0\u000a1\u000a2\u000a&gt;&gt;&gt; eval('for i in range(3): print(i)')\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "&lt;string&gt;", line 1\u000a    for i in range(3): print(i)\u000a      ^\u000aSyntaxError: invalid syntax\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Both <code>exec</code> and <code>eval</code> accept 2 additional positional arguments - <code>globals</code> and <code>locals</code> - which are the global and local variable scopes that the code sees. These default to the <code>globals()</code> and <code>locals()</code> within the scope that called <code>exec</code> or <code>eval</code>, but any dictionary can be used for <code>globals</code> and any <code>mapping</code> for <code>locals</code> (including <code>dict</code> of course). These can be used not only to restrict/modify the variables that the code sees, but are often also used for capturing the variables that the <code>exec</code>ed code creates:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; g = {}\u000a&gt;&gt;&gt; l = {}\u000a&gt;&gt;&gt; exec('global a; a, b = 123, 42', g, l)\u000a&gt;&gt;&gt; g['a']\u000a123\u000a&gt;&gt;&gt; l\u000a{'b': 42}\u000a</code></pre>\u000a\u000a<p>(If you display the value of entire <code>g</code>, it would be much longer, because <code>exec</code> and <code>eval</code> add the built-ins module as <code>__builtins__</code> to the globals automatically if it is missing).</p>\u000a\u000a<p>In Python 2, the official syntax for the <code>exec</code> statement is actually <code>exec code in globals, locals</code>, as in</p>\u000a\u000a<pre><code>&gt;&gt;&gt; exec 'global a; a, b = 123, 42' in g, l\u000a</code></pre>\u000a\u000a<p>However the alternate syntax <code>exec(code, globals, locals)</code> has always been accepted too (see below).</p>\u000a\u000a<h2><code>compile</code></h2>\u000a\u000a<p>The <a href="https://docs.python.org/3/library/functions.html#compile" rel="noreferrer"><code>compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)</code></a> built-in can be used to speed up repeated invocations of the same code with <code>exec</code> or <code>eval</code> by compiling the source into a <code>code</code> object beforehand. The <code>mode</code> parameter controls the kind of code fragment the <code>compile</code> function accepts and the kind of bytecode it produces. The choices are <code>'eval'</code>, <code>'exec'</code> and <code>'single'</code>:</p>\u000a\u000a<ul>\u000a<li><p><code>'eval'</code> mode expects a single expression, and will produce bytecode that when run will return the value of <strong>that expression</strong>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dis.dis(compile('a + b', '&lt;string&gt;', 'eval'))\u000a  1           0 LOAD_NAME                0 (a)\u000a              3 LOAD_NAME                1 (b)\u000a              6 BINARY_ADD\u000a              7 RETURN_VALUE\u000a</code></pre></li>\u000a<li><p><code>'exec'</code> accepts any kinds of python constructs from single expressions to whole modules of code, and executes them as if they were module top-level statements. The code object returns <code>None</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dis.dis(compile('a + b', '&lt;string&gt;', 'exec'))\u000a  1           0 LOAD_NAME                0 (a)\u000a              3 LOAD_NAME                1 (b)\u000a              6 BINARY_ADD\u000a              7 POP_TOP                             &lt;- discard result\u000a              8 LOAD_CONST               0 (None)   &lt;- load None on stack\u000a             11 RETURN_VALUE                        &lt;- return top of stack\u000a</code></pre></li>\u000a<li><p><code>'single'</code> is a limited form of <code>'exec'</code> which accepts a source code containing a <strong>single</strong> statement (or multiple statements separated by <code>;</code>) if the last statement is an expression statement, the resulting bytecode also <em>prints the <code>repr</code> of the value of that expression to the standard output(!)</em>.</p>\u000a\u000a<p>An <code>if</code>-<code>elif</code>-<code>else</code> chain, a loop with <code>else</code>, and <code>try</code> with its <code>except</code>, <code>else</code> and <code>finally</code> blocks is considered a single statement.</p>\u000a\u000a<p>A source fragment containing 2 top-level statements is an error for the <code>'single'</code>, except in Python 2 there is <em>a bug</em> that sometimes allows multiple toplevel statements in the code; only the first is compiled; the rest are ignored:</p>\u000a\u000a<p>In Python 2.7.8:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; exec(compile('a = 5\u005cna = 6', '&lt;string&gt;', 'single'))\u000a&gt;&gt;&gt; a\u000a5\u000a</code></pre>\u000a\u000a<p>And in Python 3.4.2:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; exec(compile('a = 5\u005cna = 6', '&lt;string&gt;', 'single'))\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "&lt;string&gt;", line 1\u000a    a = 5\u000a        ^\u000aSyntaxError: multiple statements found while compiling a single statement\u000a</code></pre>\u000a\u000a<p>This is very useful for making interactive Python shells. However, the value of the expression is <em>not returned</em>, even if you <code>eval</code> the resulting code.</p></li>\u000a</ul>\u000a\u000a<p>Thus greatest distinction of <code>exec</code> and <code>eval</code> actually comes from the <code>compile</code> function and its modes.</p>\u000a\u000a<hr>\u000a\u000a<p>In addition to compiling source code to bytecode, <code>compile</code> supports compiling <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="noreferrer"><em>abstract syntax trees</em></a> (parse trees of Python code) into <code>code</code> objects; and source code into abstract syntax trees (the <code>ast.parse</code> is written in Python and just calls <code>compile(source, filename, mode, PyCF_ONLY_AST)</code>); these are used for example for modifying source code on the fly, and also for dynamic code creation, as it is often easier to handle the code as a tree of nodes instead of lines of text in complex cases.</p>\u000a\u000a<hr>\u000a\u000a<p>While <code>eval</code> only allows you to evaluate a string that contains a single expression, you can <code>eval</code> a whole statement, or even a whole module that has been <code>compile</code>d into bytecode; that is, with Python 2, <code>print</code> is a statement, and cannot be <code>eval</code>led directly:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; eval('for i in range(3): print("Python is cool")')\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "&lt;string&gt;", line 1\u000a    for i in range(3): print("Python is cool")\u000a      ^\u000aSyntaxError: invalid syntax\u000a</code></pre>\u000a\u000a<p><code>compile</code> it with <code>'exec'</code> mode into a <code>code</code> object and you can <strong><code>eval</code>  it</strong>; the <code>eval</code> function will return <code>None</code>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; code = compile('for i in range(3): print("Python is cool")',\u000a                   'foo.py', 'exec')\u000a&gt;&gt;&gt; eval(code)\u000aPython is cool\u000aPython is cool\u000aPython is cool\u000a</code></pre>\u000a\u000a<p>If one looks into <a href="https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l805" rel="noreferrer"><code>eval</code></a> and <a href="https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l882" rel="noreferrer"><code>exec</code></a> source code in CPython 3, this is very evident; they both call <code>PyEval_EvalCode</code> with same arguments, the only difference being that <a href="https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l903" rel="noreferrer"><code>exec</code> explicitly returns <code>None</code></a>.</p>\u000a\u000a<h2>Syntax differences of <code>exec</code> between Python 2 and Python 3</h2>\u000a\u000a<p>One of the major differences in Python <strong>2</strong> is that <code>exec</code> is a statement and <code>eval</code> is a built-in function (both are built-in functions in Python 3).\u000aIt is a well-known fact that the official syntax of <code>exec</code> in Python 2 is <code>exec code [in globals[, locals]]</code>.</p>\u000a\u000a<p>Unlike majority of the Python 2-to-3 <a href="http://python3porting.com/differences.html#exec" rel="noreferrer">porting</a> <a href="http://python-future.org/reference.html?highlight=exec#future.utils.exec_" rel="noreferrer">guides</a> <a href="http://docs.pythonsprints.com/python3_porting/py-porting.html#exec-statement" rel="noreferrer">seem</a> <a href="http://nedbatchelder.com/blog/200910/running_the_same_code_on_python_2x_and_3x.html" rel="noreferrer">to suggest</a>, the <code>exec</code> statement in CPython 2 can be also used with syntax that <em>looks</em> <strong>exactly</strong> like the <code>exec</code> function invocation in Python 3. The reason is that Python 0.9.9 had the <code>exec(code, globals, locals)</code> built-in function! And that built-in function was replaced with <code>exec</code> statement <a href="https://hg.python.org/cpython/file/fccd415e2eb8/Python/ceval.c" rel="noreferrer">somewhere before Python 1.0 release</a>.</p>\u000a\u000a<p>Since it was desirable to not break backwards compatibility with Python 0.9.9, <a href="https://hg.python.org/cpython/file/fccd415e2eb8/Python/ceval.c#l2521" rel="noreferrer">Guido van Rossum added a compatibility hack in 1993</a>: if the <code>code</code> was a tuple of length 2 or 3, and <code>globals</code> and <code>locals</code> were not passed into the <code>exec</code> statement otherwise, the <code>code</code> would be interpreted as if the 2nd and 3rd element of the tuple were the <code>globals</code> and <code>locals</code> respectively. The compatibility hack was not mentioned even in <a href="https://docs.python.org/release/1.4/ref/ref6.html#HDR10" rel="noreferrer">Python 1.4 documentation (the earliest available version online)</a>; and thus was not known to many writers of the porting guides and tools, until it was <a href="https://docs.python.org/2/reference/simple_stmts.html#the-exec-statement" rel="noreferrer">documented</a> again <a href="https://mail.python.org/pipermail/python-dev/2012-November/122651.html" rel="noreferrer">in November 2012</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The first expression may also be a tuple of length 2 or 3. In this case, the optional parts must be omitted. The form <code>exec(expr, globals)</code> is equivalent to <code>exec expr in globals</code>, while the form <code>exec(expr, globals, locals)</code> is equivalent to <code>exec expr in globals, locals</code>. The tuple form of <code>exec</code> provides compatibility with Python 3, where <code>exec</code> is a function rather than a statement.</p>\u000a</blockquote>\u000a\u000a<p>Yes, in CPython 2.7 that it is handily referred to as being a forward-compatibility option (why confuse people over that there is a backward compatibility option at all), \u000awhen it actually had been there for <em>backward-compatibility for two decades</em>.</p>\u000a\u000a<p>Thus while <code>exec</code> is a statement in Python 1 and Python 2, and a built-in function in Python 3 and Python 0.9.9,</p>\u000a\u000a<pre><code>&gt;&gt;&gt; exec("print(a)", globals(), {'a': 42})\u000a42\u000a</code></pre>\u000a\u000a<p>has had identical behaviour in possibly every widely released Python version ever; and works in Jython 2.5.2, PyPy 2.3.1 (Python 2.7.6) and IronPython 2.6.1 too (kudos to them following the undocumented behaviour of CPython closely).</p>\u000a\u000a<p>What you cannot do in Pythons 1.0 - 2.7 with its compatibility hack, is to store the return value of <code>exec</code> into a variable:</p>\u000a\u000a<pre><code>Python 2.7.11+ (default, Apr 17 2016, 14:00:29) \u000a[GCC 5.3.1 20160413] on linux2\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; a = exec('print(42)')\u000a  File "&lt;stdin&gt;", line 1\u000a    a = exec('print(42)')\u000a           ^\u000aSyntaxError: invalid syntax\u000a</code></pre>\u000a\u000a<p>(which wouldn't be useful in Python 3 either, as <code>exec</code> always returns <code>None</code>), or pass a reference to <code>exec</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; call_later(exec, 'print(42)', delay=1000)\u000a  File "&lt;stdin&gt;", line 1\u000a    call_later(exec, 'print(42)', delay=1000)\u000a                  ^\u000aSyntaxError: invalid syntax\u000a</code></pre>\u000a\u000a<p>Which a pattern that someone might actually have used, though unlikely; </p>\u000a\u000a<p>Or use it in a list comprehension:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [exec(i) for i in ['print(42)', 'print(foo)']\u000a  File "&lt;stdin&gt;", line 1\u000a    [exec(i) for i in ['print(42)', 'print(foo)']\u000a        ^\u000aSyntaxError: invalid syntax\u000a</code></pre>\u000a\u000a<p>which is abuse of list comprehensions (use a <code>for</code> loop instead!).</p>\u000a
p120
sVquestion_id
p121
I2220699
sVlast_activity_date
p122
I1491119760
sVcreation_date
p123
I1428230684
sVscore
p124
I216
sVowner
p125
(dp126
Vuser_id
p127
I918959
sVprofile_image
p128
Vhttps://www.gravatar.com/avatar/b9051b2917c3d55d55b3d7042fa49f6c?s=128&d=identicon&r=PG
p129
sVuser_type
p130
Vregistered
p131
sVreputation
p132
I52380
sVlink
p133
Vhttp://stackoverflow.com/users/918959/antti-haapala
p134
sVaccept_rate
p135
I88
sVdisplay_name
p136
VAntti Haapala
p137
ssVis_accepted
p138
I01
sVlast_edit_date
p139
I1491119760
sVanswer_id
p140
I29456463
sa(dp141
Vbody
p142
V<p>By "shallow copying" it means the <em>content</em> of the dictionary is not copied by value, but just creating a new reference.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = {1: [1,2,3]}\u000a&gt;&gt;&gt; b = a.copy()\u000a&gt;&gt;&gt; a, b\u000a({1: [1, 2, 3]}, {1: [1, 2, 3]})\u000a&gt;&gt;&gt; a[1].append(4)\u000a&gt;&gt;&gt; a, b\u000a({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})\u000a</code></pre>\u000a\u000a<p>In contrast, a deep copy will copy all contents by value.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import copy\u000a&gt;&gt;&gt; c = copy.deepcopy(a)\u000a&gt;&gt;&gt; a, c\u000a({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})\u000a&gt;&gt;&gt; a[1].append(5)\u000a&gt;&gt;&gt; a, c\u000a({1: [1, 2, 3, 4, 5]}, {1: [1, 2, 3, 4]})\u000a</code></pre>\u000a\u000a<p>So:</p>\u000a\u000a<ol>\u000a<li><p><code>b = a</code>: Reference assignment, Make <code>a</code> and <code>b</code> points to the same object.</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/4AQC6.png" alt="Illustration of &#39;a = b&#39;: &#39;a&#39; and &#39;b&#39; both point to &#39;{1: L}&#39;, &#39;L&#39; points to &#39;[1, 2, 3]&#39;."></p></li>\u000a<li><p><code>b = a.copy()</code>: Shallow copying, <code>a</code> and <code>b</code> will become two isolated objects, but their contents still share the same reference</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/Vtk4m.png" alt="Illustration of &#39;b = a.copy()&#39;: &#39;a&#39; points to &#39;{1: L}&#39;, &#39;b&#39; points to &#39;{1: M}&#39;, &#39;L&#39; and &#39;M&#39; both point to &#39;[1, 2, 3]&#39;."></p></li>\u000a<li><p><code>b = copy.deepcopy(a)</code>: Deep copying, <code>a</code> and <code>b</code>'s structure and content become completely isolated.</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/BO4qO.png" alt="Illustration of &#39;b = copy.deepcopy(a)&#39;: &#39;a&#39; points to &#39;{1: L}&#39;, &#39;L&#39; points to &#39;[1, 2, 3]&#39;; &#39;b&#39; points to &#39;{1: M}&#39;, &#39;M&#39; points to a different instance of &#39;[1, 2, 3]&#39;."></p></li>\u000a</ol>\u000a
p143
sVquestion_id
p144
I3975376
sVlast_activity_date
p145
I1489513923
sVcreation_date
p146
I1287557678
sVscore
p147
I583
sVowner
p148
(dp149
Vuser_id
p150
I224671
sVprofile_image
p151
Vhttps://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG
p152
sVuser_type
p153
Vregistered
p154
sVreputation
p155
I346043
sVlink
p156
Vhttp://stackoverflow.com/users/224671/kennytm
p157
sVaccept_rate
p158
I67
sVdisplay_name
p159
Vkennytm
p160
ssVis_accepted
p161
I01
sVlast_edit_date
p162
I1489513923
sVanswer_id
p163
I3975388
sa(dp164
Vcommunity_owned_date
p165
I1286816609
sVbody
p166
V<p>I prefer using the <a href="https://pypi.python.org/pypi/python-dateutil/2.6.0" rel="noreferrer">dateutil</a> library for timezone handling and generally solid date parsing. If you were to get an ISO 8601 string like: 2010-05-08T23:41:54.000Z you'd have a fun time parsing that with strptime, especially if you didn't know up front whether or not the timezone was included. pyiso8601 has a couple of issues (check their tracker) that I ran into during my usage and it hasn't been updated in a few years. dateutil, by contrast, has been active and worked for me: </p>\u000a\u000a<pre><code>import dateutil.parser\u000ayourdate = dateutil.parser.parse(datestring)\u000a</code></pre>\u000a
p167
sVquestion_id
p168
I969285
sVlast_activity_date
p169
I1486042618
sVcreation_date
p170
I1286816609
sVscore
p171
I408
sVowner
p172
(dp173
Vuser_id
p174
I386925
sVprofile_image
p175
Vhttps://www.gravatar.com/avatar/23de2d62fa46d3785970220b5b135b7c?s=128&d=identicon&r=PG
p176
sVuser_type
p177
Vregistered
p178
sVreputation
p179
I910
sVlink
p180
Vhttp://stackoverflow.com/users/386925/wes-winham
p181
sVdisplay_name
p182
VWes Winham
p183
ssVis_accepted
p184
I01
sVlast_edit_date
p185
I1486042618
sVanswer_id
p186
I3908349
sa(dp187
Vcommunity_owned_date
p188
I1407396282
sVbody
p189
V<p>Sorry, but non of the answers fully "work".\u000aConsider the simple problem:</p>\u000a\u000a<pre><code>class Number:\u000a    """Very basic"""\u000a    def __init__(self, some_number):\u000a        self.some_number = some_number\u000a\u000an1 = Number(1)\u000an2 = Number(1)\u000a\u000aprint n1 == n2 # False -- oops\u000a</code></pre>\u000a\u000a<p>So, Python by default uses the id of objects for comparison.</p>\u000a\u000a<pre><code>print id(n1) # 140400634555856\u000aprint id(n2) # 140400634555920\u000a</code></pre>\u000a\u000a<p>Overriding the <code>__eq__</code> function seems to solve the problem:</p>\u000a\u000a<pre><code>def __eq__(self, other):\u000a    """Override the default Equals behavior"""\u000a    if isinstance(other, self.__class__):\u000a        return self.__dict__ == other.__dict__\u000a    return False\u000a\u000aprint n1 == n2 # True\u000aprint n1 != n2 # True -- oops\u000a</code></pre>\u000a\u000a<p>Always remember to add the <code>__ne__</code> function override:</p>\u000a\u000a<pre><code>def __ne__(self, other):\u000a    """Define a non-equality test"""\u000a    return not self.__eq__(other)\u000a\u000aprint n1 == n2 # True\u000aprint n1 != n2 # False\u000a</code></pre>\u000a\u000a<p>But that doesn't solve all our problems.\u000aLet's add a subclass:</p>\u000a\u000a<pre><code>class NumberPlus(Number):\u000a    pass\u000a\u000an3 = NumberPlus(1)\u000a\u000aprint n1 == n3 # True\u000aprint n3 == n1 # False -- oops\u000a</code></pre>\u000a\u000a<p>Note - new style classes behave <a href="http://stackoverflow.com/a/12984987/78234">a bit differently</a> yet I will provide a generic solution.  </p>\u000a\u000a<p>To fix we need to return the singleton <code>NotImplemented</code> when the object types do not match, delegating the result to <code>superclass.__eq__(subclass)</code>.  </p>\u000a\u000a<p>The result looks like this:</p>\u000a\u000a<pre><code>    def __eq__(self, other):\u000a        """Override the default Equals behavior"""\u000a        if isinstance(other, self.__class__):\u000a            return self.__dict__ == other.__dict__\u000a        return NotImplemented\u000a\u000a    def __ne__(self, other):\u000a        """Define a non-equality test"""\u000a        if isinstance(other, self.__class__):\u000a            return not self.__eq__(other)\u000a        return NotImplemented\u000a</code></pre>\u000a\u000a<p>Are we there yet? Not quite.\u000aHow many unique numbers do we have?</p>\u000a\u000a<pre><code>print len(set([n1, n2, n3])) # 3 -- oops\u000a</code></pre>\u000a\u000a<p>Hmmm. Sets use the hashes of objects, and by default Python returns the id() of the object as a hash. Let's try to override:</p>\u000a\u000a<pre><code>def __hash__(self):\u000a    """Override the default hash behavior (that returns the id or the object)"""\u000a    return hash(tuple(sorted(self.__dict__.items())))\u000a\u000aprint len(set([n1, n2, n3])) # 1\u000a</code></pre>\u000a\u000a<p>The end result looks like this (I added some assertions at the end for validation):</p>\u000a\u000a<pre><code>class Number(object):\u000a    """Very basic"""\u000a    def __init__(self, some_number):\u000a        self.some_number = some_number\u000a\u000a    def __eq__(self, other):\u000a        """Override the default Equals behavior"""\u000a        if isinstance(other, self.__class__):\u000a            return self.__dict__ == other.__dict__\u000a        return NotImplemented\u000a\u000a    def __ne__(self, other):\u000a        """Define a non-equality test"""\u000a        if isinstance(other, self.__class__):\u000a            return not self.__eq__(other)\u000a        return NotImplemented\u000a\u000a    def __hash__(self):\u000a        """Override the default hash behavior (that returns the id or the object)"""\u000a        return hash(tuple(sorted(self.__dict__.items())))\u000a\u000a\u000an1 = Number(1)\u000an2 = Number(1)\u000a\u000aclass NumberPlus(Number):\u000a    pass\u000a\u000an3 = NumberPlus(1)\u000an4 = NumberPlus(4)\u000a\u000aassert n1 == n2\u000aassert n2 == n1\u000aassert not n1 != n2\u000aassert not n2 != n1\u000a\u000aassert n1 == n3\u000aassert n3 == n1\u000aassert not n1 != n3\u000aassert not n3 != n1\u000a\u000aassert not n1 == n4\u000aassert not n4 == n1\u000aassert n1 != n4\u000aassert n4 != n1\u000a\u000aassert len(set([n1, n2, n3, ])) == 1\u000aassert len(set([n1, n2, n3, n4])) == 2\u000a</code></pre>\u000a
p190
sVquestion_id
p191
I390250
sVlast_activity_date
p192
I1485954904
sVcreation_date
p193
I1407396282
sVscore
p194
I118
sVowner
p195
(dp196
Vuser_id
p197
I78234
sVprofile_image
p198
Vhttps://www.gravatar.com/avatar/c6c296d3e13e53deadcb9394b008c904?s=128&d=identicon&r=PG
p199
sVuser_type
p200
Vregistered
p201
sVreputation
p202
I4935
sVlink
p203
Vhttp://stackoverflow.com/users/78234/tal-weiss
p204
sVaccept_rate
p205
I77
sVdisplay_name
p206
VTal Weiss
p207
ssVis_accepted
p208
I01
sVlast_edit_date
p209
I1485954904
sVanswer_id
p210
I25176504
sa(dp211
Vbody
p212
V<p>Prepend the url prefix <code>git+</code> (See <a href="https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support">VCS Support</a>):</p>\u000a\u000a<pre><code>pip install git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6\u000a</code></pre>\u000a\u000a<p>And specify the branch name without the leading <code>/</code>.</p>\u000a
p213
sVquestion_id
p214
I20101834
sVlast_activity_date
p215
I1484924962
sVcreation_date
p216
I1384966292
sVscore
p217
I396
sVowner
p218
(dp219
Vuser_id
p220
I2225682
sVprofile_image
p221
Vhttps://www.gravatar.com/avatar/4958f4712d94ab82fe55fa471308e4b5?s=128&d=identicon&r=PG
p222
sVuser_type
p223
Vregistered
p224
sVreputation
p225
I195409
sVlink
p226
Vhttp://stackoverflow.com/users/2225682/falsetru
p227
sVdisplay_name
p228
Vfalsetru
p229
ssVis_accepted
p230
I01
sVlast_edit_date
p231
I1484924962
sVanswer_id
p232
I20101940
sa(dp233
Vbody
p234
V<p>It seems that the problem is not related to the module being in a parent directory or anything like that.</p>\u000a\u000a<p>You need to add the directory that contains <code>ptdraft</code> to PYTHONPATH</p>\u000a\u000a<p>You said that <code>import nib</code> worked with you, that probably means that you added <code>ptdraft</code> itself (not its parent) to PYTHONPATH.</p>\u000a
p235
sVquestion_id
p236
I714063
sVlast_activity_date
p237
I1484245807
sVcreation_date
p238
I1238767763
sVscore
p239
I51
sVowner
p240
(dp241
Vuser_id
p242
I35364
sVprofile_image
p243
Vhttps://www.gravatar.com/avatar/f11512869fe2f8d87a2f2b687b76686c?s=128&d=identicon&r=PG
p244
sVuser_type
p245
Vregistered
p246
sVreputation
p247
I66403
sVlink
p248
Vhttp://stackoverflow.com/users/35364/hasen
p249
sVaccept_rate
p250
I70
sVdisplay_name
p251
Vhasen
p252
ssVis_accepted
p253
I01
sVlast_edit_date
p254
I1484245807
sVanswer_id
p255
I714070
sa(dp256
Vbody
p257
V<p>You can get the values as a list by doing:</p>\u000a\u000a<pre><code>list(my_dataframe.columns.values)\u000a</code></pre>\u000a\u000a<p>Also you can simply use:</p>\u000a\u000a<pre><code>list(my_dataframe)\u000a</code></pre>\u000a
p258
sVquestion_id
p259
I19482970
sVlast_activity_date
p260
I1483677486
sVcreation_date
p261
I1382304187
sVscore
p262
I472
sVowner
p263
(dp264
Vuser_id
p265
I1267329
sVprofile_image
p266
Vhttps://www.gravatar.com/avatar/f943c14b945cadc0ee0afa6ef70d2103?s=128&d=identicon&r=PG
p267
sVuser_type
p268
Vregistered
p269
sVreputation
p270
I59051
sVlink
p271
Vhttp://stackoverflow.com/users/1267329/simeon-visser
p272
sVdisplay_name
p273
VSimeon Visser
p274
ssVis_accepted
p275
I01
sVlast_edit_date
p276
I1483677486
sVanswer_id
p277
I19483025
sa(dp278
Vcommunity_owned_date
p279
I1398432707
sVbody
p280
V<p>The simplest way to accomplish this would be to put the <code>input</code> method in a while loop. Use <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops"><code>continue</code></a> when you get bad input, and <code>break</code> out of the loop when you're satisfied.</p>\u000a\u000a<h2>When Your Input Might Raise an Exception</h2>\u000a\u000a<p>Use <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions">try and catch</a> to detect when the user enters data that can't be parsed.</p>\u000a\u000a<pre><code>while True:\u000a    try:\u000a        # Note: Python 2.x users should use raw_input, the equivalent of 3.x's input\u000a        age = int(input("Please enter your age: "))\u000a    except ValueError:\u000a        print("Sorry, I didn't understand that.")\u000a        #better try again... Return to the start of the loop\u000a        continue\u000a    else:\u000a        #age was successfully parsed!\u000a        #we're ready to exit the loop.\u000a        break\u000aif age &gt;= 18: \u000a    print("You are able to vote in the United States!")\u000aelse:\u000a    print("You are not able to vote in the United States.")\u000a</code></pre>\u000a\u000a<h2>Implementing Your Own Validation Rules</h2>\u000a\u000a<p>If you want to reject values that Python can successfully parse, you can add your own validation logic.</p>\u000a\u000a<pre><code>while True:\u000a    data = input("Please enter a loud message (must be all caps): ")\u000a    if not data.isupper():\u000a        print("Sorry, your response was not loud enough.")\u000a        continue\u000a    else:\u000a        #we're happy with the value given.\u000a        #we're ready to exit the loop.\u000a        break\u000a\u000awhile True:\u000a    data = input("Pick an answer from A to D:")\u000a    if data.lower() not in ('a', 'b', 'c', 'd'):\u000a        print("Not an appropriate choice.")\u000a    else:\u000a        break\u000a</code></pre>\u000a\u000a<h2>Combining Exception Handling and Custom Validation</h2>\u000a\u000a<p>Both of the above techniques can be combined into one loop.</p>\u000a\u000a<pre><code>while True:\u000a    try:\u000a        age = int(input("Please enter your age: "))\u000a    except ValueError:\u000a        print("Sorry, I didn't understand that.")\u000a        continue\u000a\u000a    if age &lt; 0:\u000a        print("Sorry, your response must not be negative.")\u000a        continue\u000a    else:\u000a        #age was successfully parsed, and we're happy with its value.\u000a        #we're ready to exit the loop.\u000a        break\u000aif age &gt;= 18: \u000a    print("You are able to vote in the United States!")\u000aelse:\u000a    print("You are not able to vote in the United States.")\u000a</code></pre>\u000a\u000a<h2>Encapsulating it All in a Function</h2>\u000a\u000a<p>If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.</p>\u000a\u000a<pre><code>def get_non_negative_int(prompt):\u000a    while True:\u000a        try:\u000a            value = int(input(prompt))\u000a        except ValueError:\u000a            print("Sorry, I didn't understand that.")\u000a            continue\u000a\u000a        if value &lt; 0:\u000a            print("Sorry, your response must not be negative.")\u000a            continue\u000a        else:\u000a            break\u000a    return value\u000a\u000aage = get_non_negative_int("Please enter your age: ")\u000akids = get_non_negative_int("Please enter the number of children you have: ")\u000asalary = get_non_negative_int("Please enter your yearly earnings, in dollars: ")\u000a</code></pre>\u000a\u000a<h3>Putting it all together</h3>\u000a\u000a<p>You can extend this idea to make a very generic input function:</p>\u000a\u000a<pre><code>def sanitised_input(prompt, type_=None, min_=None, max_=None, range_=None):\u000a    if min_ is not None and max_ is not None and max_ &lt; min_:\u000a        raise ValueError("min_ must be less than or equal to max_.")\u000a    while True:\u000a        ui = input(prompt)\u000a        if type_ is not None:\u000a            try:\u000a                ui = type_(ui)\u000a            except ValueError:\u000a                print("Input type must be {0}.".format(type_.__name__))\u000a                continue\u000a        if max_ is not None and ui &gt; max_:\u000a            print("Input must be less than or equal to {0}.".format(max_))\u000a        elif min_ is not None and ui &lt; min_:\u000a            print("Input must be greater than or equal to {0}.".format(min_))\u000a        elif range_ is not None and ui not in range_:\u000a            if isinstance(range_, range):\u000a                template = "Input must be between {0.start} and {0.stop}."\u000a                print(template.format(range_))\u000a            else:\u000a                template = "Input must be {0}."\u000a                if len(range_) == 1:\u000a                    print(template.format(*range_))\u000a                else:\u000a                    print(template.format(" or ".join((", ".join(map(str,\u000a                                                                     range_[:-1])),\u000a                                                       str(range_[-1])))))\u000a        else:\u000a            return ui\u000a</code></pre>\u000a\u000a<p>With usage such as:</p>\u000a\u000a<pre><code>age = sanitised_input("Enter your age: ", int, 1, 101)\u000aanswer = sanitised_input("Enter your answer", str.lower, range_=('a', 'b', 'c', 'd'))\u000a</code></pre>\u000a\u000a<h2>Common Pitfalls, and Why you Should Avoid Them</h2>\u000a\u000a<h3>The Redundant Use of Redundant <code>input</code> Statements</h3>\u000a\u000a<p>This method works but is generally considered poor style:</p>\u000a\u000a<pre><code>data = input("Please enter a loud message (must be all caps): ")\u000awhile not data.isupper():\u000a    print("Sorry, your response was not loud enough.")\u000a    data = input("Please enter a loud message (must be all caps): ")\u000a</code></pre>\u000a\u000a<p>It might look attractive initially because it's shorter than the <code>while True</code> method, but it violates the <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don't Repeat Yourself</a> principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing <code>input</code> to <code>raw_input</code>, but accidentally change only the first <code>input</code> above? It's a <code>SyntaxError</code> just waiting to happen.</p>\u000a\u000a<h3>Recursion Will Blow Your Stack</h3>\u000a\u000a<p>If you've just learned about recursion, you might be tempted to use it in <code>get_non_negative_int</code> so you can dispose of the while loop.</p>\u000a\u000a<pre><code>def get_non_negative_int(prompt):\u000a    try:\u000a        value = int(input(prompt))\u000a    except ValueError:\u000a        print("Sorry, I didn't understand that.")\u000a        return get_non_negative_int(prompt)\u000a\u000a    if value &lt; 0:\u000a        print("Sorry, your response must not be negative.")\u000a        return get_non_negative_int(prompt)\u000a    else:\u000a        return value\u000a</code></pre>\u000a\u000a<p>This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a <code>RuntimeError: maximum recursion depth exceeded</code>. You may think "no fool would make 1000 mistakes in a row", but you're underestimating the ingenuity of fools!</p>\u000a
p281
sVquestion_id
p282
I23294658
sVlast_activity_date
p283
I1480659284
sVcreation_date
p284
I1398432707
sVscore
p285
I324
sVowner
p286
(dp287
Vuser_id
p288
I953482
sVprofile_image
p289
Vhttps://i.stack.imgur.com/T3HH6.png?s=128&g=1
p290
sVuser_type
p291
Vregistered
p292
sVreputation
p293
I47304
sVlink
p294
Vhttp://stackoverflow.com/users/953482/kevin
p295
sVaccept_rate
p296
I92
sVdisplay_name
p297
VKevin
p298
ssVis_accepted
p299
I01
sVlast_edit_date
p300
I1480659284
sVanswer_id
p301
I23294659
sa(dp302
Vbody
p303
V<p>From <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8 - Style Guide for Python Code</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The preferred way of wrapping long lines is by using Python's implied line\u000a  continuation inside parentheses, brackets and braces.  If necessary, you\u000a  can add an extra pair of parentheses around an expression, but sometimes\u000a  using a backslash looks better.  Make sure to indent the continued line\u000a  appropriately.  </p>\u000a</blockquote>\u000a\u000a<p>Example of implicit line continuation:</p>\u000a\u000a<pre><code>a = some_function(\u000a    '1' + '2' + '3' - '4')\u000a</code></pre>\u000a\u000a<p>On the topic of line-breaks around a binary operator, it goes on to say:-</p>\u000a\u000a<blockquote>\u000a  <p>For decades the recommended style was to break after binary operators.\u000a  But this can hurt readability in two ways: the operators tend to get scattered across different columns on the screen, and each operator is moved away from its operand and onto the previous line.</p>\u000a  \u000a  <p>In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth's style (line breaks <em>before</em> the operator) is suggested.</p>\u000a</blockquote>\u000a\u000a<p>Example of explicit line continuation:</p>\u000a\u000a<pre><code>a = '1'   \u005c\u000a    + '2' \u005c\u000a    + '3' \u005c\u000a    - '4'\u000a</code></pre>\u000a
p304
sVquestion_id
p305
I4172448
sVlast_activity_date
p306
I1479732053
sVcreation_date
p307
I1289650800
sVscore
p308
I324
sVowner
p309
(dp310
Vuser_id
p311
I29407
sVprofile_image
p312
Vhttps://www.gravatar.com/avatar/e3a181e9cdd4757a8b416d93878770c5?s=128&d=identicon&r=PG
p313
sVuser_type
p314
Vregistered
p315
sVreputation
p316
I733667
sVlink
p317
Vhttp://stackoverflow.com/users/29407/darin-dimitrov
p318
sVaccept_rate
p319
I89
sVdisplay_name
p320
VDarin Dimitrov
p321
ssVis_accepted
p322
I01
sVlast_edit_date
p323
I1479732053
sVanswer_id
p324
I4172465
sa(dp325
Vbody
p326
V<p>You need to call <code>os.path.realpath</code> on <code>__file__</code>, so that when <code>__file__</code> is a filename without the path you still get the dir path:</p>\u000a\u000a<pre><code>import os\u000aprint(os.path.dirname(os.path.realpath(__file__)))\u000a</code></pre>\u000a
p327
sVquestion_id
p328
I4934806
sVlast_activity_date
p329
I1478938074
sVcreation_date
p330
I1329667835
sVscore
p331
I425
sVowner
p332
(dp333
Vuser_id
p334
I623622
sVprofile_image
p335
Vhttps://i.stack.imgur.com/pkmbW.png?s=128&g=1
p336
sVuser_type
p337
Vregistered
p338
sVreputation
p339
I10443
sVlink
p340
Vhttp://stackoverflow.com/users/623622/czarek-tomczak
p341
sVdisplay_name
p342
VCzarek Tomczak
p343
ssVis_accepted
p344
I01
sVlast_edit_date
p345
I1478938074
sVanswer_id
p346
I9350788
sa(dp347
Vbody
p348
V<p><a href="https://ipython.org/" rel="noreferrer">IPython</a> is extremely useful if you like using interactive sessions. For example for your usecase there is the <em>%save</em> magic command, you just input <em>%save my_useful_session 10-20 23</em> to save input lines 10 to 20 and 23 to my_useful_session.py. (to help with this, every line is prefixed by its number)</p>\u000a\u000a<p>Look at the videos on the documentation page to get a quick overview of the features.</p>\u000a
p349
sVquestion_id
p350
I947810
sVlast_activity_date
p351
I1477859763
sVcreation_date
p352
I1244072061
sVscore
p353
I259
sVowner
p354
(dp355
Vuser_id
p356
I107366
sVprofile_image
p357
Vhttps://www.gravatar.com/avatar/a664d7ca2f3788c22a3aafeedd1c9339?s=128&d=identicon&r=PG
p358
sVuser_type
p359
Vregistered
p360
sVreputation
p361
I32850
sVlink
p362
Vhttp://stackoverflow.com/users/107366/ants-aasma
p363
sVdisplay_name
p364
VAnts Aasma
p365
ssVis_accepted
p366
I01
sVlast_edit_date
p367
I1477859763
sVanswer_id
p368
I947846
sa(dp369
Vbody
p370
V<p>Use the map function(in py2):</p>\u000a\u000a<pre><code>results = map(int, results)\u000a</code></pre>\u000a\u000a<p>In py3:</p>\u000a\u000a<pre><code>results = list(map(int, results))\u000a</code></pre>\u000a
p371
sVquestion_id
p372
I7368789
sVlast_activity_date
p373
I1477198807
sVcreation_date
p374
I1315614617
sVscore
p375
I551
sVowner
p376
(dp377
Vuser_id
p378
I215974
sVprofile_image
p379
Vhttps://www.gravatar.com/avatar/d88c18def5baeb7be2b6393d07c8dbc5?s=128&d=identicon&r=PG
p380
sVuser_type
p381
Vregistered
p382
sVreputation
p383
I16653
sVlink
p384
Vhttp://stackoverflow.com/users/215974/cheeken
p385
sVdisplay_name
p386
Vcheeken
p387
ssVis_accepted
p388
I01
sVlast_edit_date
p389
I1477198807
sVanswer_id
p390
I7368801
sa(dp391
Vbody
p392
V<p>As for your first question: that code is perfectly fine and should work if <code>item</code> equals one of the elements inside <code>myList</code>. Maybe you try to find a string that does not <em>exactly</em> match one of the items or maybe you are using a float value which suffers from inaccuracy.</p>\u000a\u000a<p>As for your second question: There's actually several possible ways if "finding" things in lists.</p>\u000a\u000a<h3>Checking if something is inside</h3>\u000a\u000a<p>This is the use case you describe: Checking whether something is inside a list or not. As you know, you can use the <code>in</code> operator for that:</p>\u000a\u000a<pre><code>3 in [1, 2, 3] # =&gt; True\u000a</code></pre>\u000a\u000a<h3>Filtering a collection</h3>\u000a\u000a<p>That is, finding all elements in a sequence that meet a certain condition. You can use list comprehension or generator expressions for that:</p>\u000a\u000a<pre><code>matches = [x for x in lst if fulfills_some_condition(x)]\u000amatches = (x for x in lst if x &gt; 6)\u000a</code></pre>\u000a\u000a<p>The latter will return a <em>generator</em> which you can imagine as a sort of lazy list that will only be built as soon as you iterate through it. By the way, the first one is exactly equivalent to</p>\u000a\u000a<pre><code>matches = filter(fulfills_some_condition, lst)\u000a</code></pre>\u000a\u000a<p>in Python 2. Here you can see higher-order functions at work. In Python 3, <code>filter</code> doesn't return a list, but a generator-like object.</p>\u000a\u000a<h3>Finding the first occurrence</h3>\u000a\u000a<p>If you only want the first thing that matches a condition (but you don't know what it is yet), it's fine to use a for loop (possibly using the <code>else</code> clause as well, which is not really well-known). You can also use</p>\u000a\u000a<pre><code>next(x for x in lst if ...)\u000a</code></pre>\u000a\u000a<p>which will return the first match or raise a <code>StopIteration</code> if none is found. Alternatively, you can use</p>\u000a\u000a<pre><code>next((x for x in lst if ...), [default value])\u000a</code></pre>\u000a\u000a<h3>Finding the location of an item</h3>\u000a\u000a<p>For lists, there's also the <code>index</code> method that can sometimes be useful if you want to know <em>where</em> a certain element is in the list:</p>\u000a\u000a<pre><code>[1,2,3].index(2) # =&gt; 1\u000a[1,2,3].index(4) # =&gt; ValueError\u000a</code></pre>\u000a\u000a<p>However, note that if you have duplicates, <code>.index</code> always returns the lowest index:</p>\u000a\u000a<pre><code>[1,2,3,2].index(2) # =&gt; 1\u000a</code></pre>\u000a\u000a<p>If there are duplicates and you want all the indexes then you can use <code>enumerate()</code> instead:</p>\u000a\u000a<pre><code>[i for i,x in enumerate([1,2,3,2]) if x==2] # =&gt; [1, 3]\u000a</code></pre>\u000a
p393
sVquestion_id
p394
I9542738
sVlast_activity_date
p395
I1474907054
sVcreation_date
p396
I1330740621
sVscore
p397
I594
sVowner
p398
(dp399
Vuser_id
p400
I916657
sVprofile_image
p401
Vhttps://www.gravatar.com/avatar/75bf31b48e75eedfebaa411a76a85155?s=128&d=identicon&r=PG
p402
sVuser_type
p403
Vregistered
p404
sVreputation
p405
I59381
sVlink
p406
Vhttp://stackoverflow.com/users/916657/niklas-b
p407
sVaccept_rate
p408
I95
sVdisplay_name
p409
VNiklas B.
p410
ssVis_accepted
p411
I01
sVlast_edit_date
p412
I1474907054
sVanswer_id
p413
I9542768
sa(dp414
Vbody
p415
V<p>There is an <a href="http://code.activestate.com/recipes/576694/" rel="noreferrer">ordered set</a> recipe for this which is referred to from the <a href="https://docs.python.org/2/library/collections.html" rel="noreferrer">Python 2 Documentation</a>. This runs on Py2.6 or later and 3.0 or later without any modifications. The interface is almost exactly the same as a normal set, except that initialisation should be done with a list.</p>\u000a\u000a<pre><code>OrderedSet([1, 2, 3])\u000a</code></pre>\u000a\u000a<p>This is a MutableSet, so the signature for <code>.union</code> doesn't match that of set, but since it includes <code>__or__</code> something similar can easily be added:</p>\u000a\u000a<pre><code>@staticmethod\u000adef union(*sets):\u000a    union = OrderedSet()\u000a    union.union(*sets)\u000a    return union\u000a\u000adef union(self, *sets):\u000a    for set in sets:\u000a        self |= set\u000a</code></pre>\u000a
p416
sVquestion_id
p417
I1653970
sVlast_activity_date
p418
I1470878037
sVcreation_date
p419
I1256984106
sVscore
p420
I149
sVowner
p421
(dp422
Vuser_id
p423
I165495
sVprofile_image
p424
Vhttps://graph.facebook.com/219001761/picture?type=large
p425
sVuser_type
p426
Vregistered
p427
sVreputation
p428
I39232
sVlink
p429
Vhttp://stackoverflow.com/users/165495/casebash
p430
sVaccept_rate
p431
I91
sVdisplay_name
p432
VCasebash
p433
ssVis_accepted
p434
I01
sVlast_edit_date
p435
I1470878037
sVanswer_id
p436
I1653974
sa(dp437
Vbody
p438
V<p>This actually removes the contents from the list, not replaces the old label with a new empty list</p>\u000a\u000a<pre><code>del lst[:]\u000a</code></pre>\u000a\u000a<p>example:</p>\u000a\u000a<pre><code>lst1 = [1, 2, 3]\u000alst2 = lst1\u000adel lst1[:]\u000aprint(lst2)\u000a</code></pre>\u000a\u000a<p>For the sake of completeness, slice assignment achieves the same effect:</p>\u000a\u000a<pre><code>lst[:] = []\u000a</code></pre>\u000a\u000a<p>and can be used to shrink a part of the list while replacing a part at the same time (but is out of scope of the question).</p>\u000a\u000a<p>Note that doing <code>lst = []</code> does not empty the list, just creates a new object and binds it to the variable <code>lst</code>, but the old list will still have the same elements, and effect will be apparent if it had other variable bindings.</p>\u000a
p439
sVquestion_id
p440
I1400608
sVlast_activity_date
p441
I1470390756
sVcreation_date
p442
I1252512640
sVscore
p443
I423
sVowner
p444
(dp445
Vuser_id
p446
I106979
sVprofile_image
p447
Vhttps://i.stack.imgur.com/XUWge.gif?s=128&g=1
p448
sVuser_type
p449
Vregistered
p450
sVreputation
p451
I42372
sVlink
p452
Vhttp://stackoverflow.com/users/106979/fortran
p453
sVaccept_rate
p454
I83
sVdisplay_name
p455
Vfortran
p456
ssVis_accepted
p457
I01
sVlast_edit_date
p458
I1470390756
sVanswer_id
p459
I1400622
sa(dp460
Vbody
p461
V<p><a href="http://docs.python.org/library/constants.html#exit" rel="noreferrer"><code>exit</code></a> is a helper for the interactive shell - <a href="http://docs.python.org/library/sys.html#sys.exit" rel="noreferrer"><code>sys.exit</code></a> is intended for use in programs.</p>\u000a\u000a<blockquote>\u000a  <p>The site module (which is imported automatically during startup, except if the -S command-line option is given) adds several constants to the built-in namespace <em>(e.g. <code>exit</code>)</em>. <strong>They are useful for the interactive interpreter shell and should not be used in programs</strong>.</p>\u000a</blockquote>\u000a\u000a<hr>\u000a\u000a<p>Technically, they do mostly the same: raising <a href="https://docs.python.org/3/library/exceptions.html#SystemExit" rel="noreferrer"><code>SystemExit</code></a>. <code>sys.exit</code> does so in <a href="https://github.com/python-git/python/blob/715a6e5035bb21ac49382772076ec4c630d6e960/Python/sysmodule.c#L206" rel="noreferrer"><em>sysmodule.c</em></a>:</p>\u000a\u000a<pre class="lang-c prettyprint-override"><code>static PyObject *\u000asys_exit(PyObject *self, PyObject *args)\u000a{\u000a    PyObject *exit_code = 0;\u000a    if (!PyArg_UnpackTuple(args, "exit", 0, 1, &amp;exit_code))\u000a        return NULL;\u000a    /* Raise SystemExit so callers may catch it or clean up. */\u000a    PyErr_SetObject(PyExc_SystemExit, exit_code);\u000a   return NULL;\u000a}\u000a</code></pre>\u000a\u000a<p>While <code>exit</code> is defined in <a href="https://github.com/python-git/python/blob/715a6e5035bb21ac49382772076ec4c630d6e960/Lib/site.py#L322" rel="noreferrer"><em>site.py</em></a>:</p>\u000a\u000a<pre><code>class Quitter(object):\u000a    def __init__(self, name):\u000a        self.name = name\u000a    def __repr__(self):\u000a        return 'Use %s() or %s to exit' % (self.name, eof)\u000a    def __call__(self, code=None):\u000a        # Shells like IDLE catch the SystemExit, but listen when their\u000a        # stdin wrapper is closed.\u000a        try:\u000a            sys.stdin.close()\u000a        except:\u000a            pass\u000a        raise SystemExit(code)\u000a__builtin__.quit = Quitter('quit')\u000a__builtin__.exit = Quitter('exit')\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Note that there is a third exit option, namely <a href="http://docs.python.org/library/os.html#os._exit" rel="noreferrer">os._exit</a>, which exits without calling cleanup handlers, flushing stdio buffers, etc. (and which  should normally only be used in the child process after a <code>fork()</code>).</p>\u000a
p462
sVquestion_id
p463
I6501121
sVlast_activity_date
p464
I1469093930
sVcreation_date
p465
I1309230534
sVscore
p466
I322
sVowner
p467
(dp468
Vuser_id
p469
I89391
sVprofile_image
p470
Vhttps://www.gravatar.com/avatar/bb5230985aa2c9ea7d022d1a16890f16?s=128&d=identicon&r=PG
p471
sVuser_type
p472
Vregistered
p473
sVreputation
p474
I104450
sVlink
p475
Vhttp://stackoverflow.com/users/89391/miku
p476
sVaccept_rate
p477
I78
sVdisplay_name
p478
Vmiku
p479
ssVis_accepted
p480
I01
sVlast_edit_date
p481
I1469093930
sVanswer_id
p482
I6501134
sa(dp483
Vbody
p484
V<p>It should work fine. Don't use <code>tuple</code>, <code>list</code> or other special names as a variable name. It's probably what's causing your problem.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; l = [4,5,6]\u000a&gt;&gt;&gt; tuple(l)\u000a(4, 5, 6)\u000a</code></pre>\u000a
p485
sVquestion_id
p486
I12836128
sVlast_activity_date
p487
I1467657430
sVcreation_date
p488
I1349946917
sVscore
p489
I373
sVowner
p490
(dp491
Vuser_id
p492
I1199589
sVprofile_image
p493
Vhttps://www.gravatar.com/avatar/d3c6a7f974f5d687a394415a2122c6b6?s=128&d=identicon&r=PG
p494
sVuser_type
p495
Vregistered
p496
sVreputation
p497
I25908
sVlink
p498
Vhttp://stackoverflow.com/users/1199589/root
p499
sVaccept_rate
p500
I89
sVdisplay_name
p501
Vroot
p502
ssVis_accepted
p503
I01
sVlast_edit_date
p504
I1467657430
sVanswer_id
p505
I12836173
sa(dp506
Vbody
p507
V<p>Because <a href="http://www.python.org/dev/peps/pep-0008/#tabs-or-spaces" rel="noreferrer">PEP-8</a> tells us to use spaces :)</p>\u000a
p508
sVquestion_id
p509
I119562
sVlast_activity_date
p510
I1467296909
sVcreation_date
p511
I1222154880
sVscore
p512
I204
sVowner
p513
(dp514
Vuser_id
p515
I712
sVprofile_image
p516
Vhttps://www.gravatar.com/avatar/bd319cfb666b090230d12d3d3284d018?s=128&d=identicon&r=PG
p517
sVuser_type
p518
Vregistered
p519
sVreputation
p520
I13016
sVlink
p521
Vhttp://stackoverflow.com/users/712/alexander-kojevnikov
p522
sVdisplay_name
p523
VAlexander Kojevnikov
p524
ssVis_accepted
p525
I01
sVlast_edit_date
p526
I1467296909
sVanswer_id
p527
I119576
sa(dp528
Vbody
p529
V<p>Strings in Python are <em>immutable</em> (can't be changed).  Because of this, the effect of <code>line.replace(...)</code> is just to create a new string, rather than changing the old one.  You need to <em>rebind</em> (assign) it to <code>line</code> in order to have that variable take the new value, with those characters removed.</p>\u000a\u000a<p>Also, the way you are doing it is going to be kind of slow, relatively.  It's also likely to be a bit confusing to experienced pythonators, who will see a doubly-nested structure and think for a moment that something more complicated is going on.</p>\u000a\u000a<p>Starting in Python 2.6 and newer Python 2.x versions *, you can instead use <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate</code></a>, (but read on for Python 3 differences):</p>\u000a\u000a<pre><code>line = line.translate(None, '!@#$')\u000a</code></pre>\u000a\u000a<p>or regular expression replacement with <a href="https://docs.python.org/2/library/re.html#re.sub" rel="noreferrer"><code>re.sub</code></a></p>\u000a\u000a<pre><code>import re\u000aline = re.sub('[!@#$]', '', line)\u000a</code></pre>\u000a\u000a<p>The characters enclosed in brackets constitute a <em>character class</em>.  Any characters in <code>line</code> which are in that class are replaced with the second parameter to <code>sub</code>: an empty string.</p>\u000a\u000a<p>In Python 3, strings are Unicode. You'll have to translate a little differently. kevpie mentions this in a <a href="http://stackoverflow.com/questions/3939361/remove-specific-characters-from-a-string-in-python#comment-4205256">comment</a> on one of the answers, and it's noted in the <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="noreferrer">documentation for <code>str.translate</code></a>.</p>\u000a\u000a<p>When calling the <code>translate</code> method of a Unicode string, you cannot pass the second parameter that we used above. You also can't pass <code>None</code> as the first parameter, or even a translation table from <code>string.maketrans</code>. Instead, you pass a dictionary as the only parameter. This dictionary maps the <em>ordinal values</em> of characters (i.e. the result of calling <a href="https://docs.python.org/2/library/functions.html#ord" rel="noreferrer"><code>ord</code></a> on them) to the ordinal values of the characters which should replace them, or\u2014usefully to us\u2014<code>None</code> to indicate that they should be deleted.</p>\u000a\u000a<p>So to do the above dance with a Unicode string you would call something like</p>\u000a\u000a<pre><code>translation_table = dict.fromkeys(map(ord, '!@#$'), None)\u000aunicode_line = unicode_line.translate(translation_table)\u000a</code></pre>\u000a\u000a<p>Here <a href="https://docs.python.org/2/library/stdtypes.html#dict.fromkeys" rel="noreferrer"><code>dict.fromkeys</code></a> and <a href="https://docs.python.org/2/library/functions.html#map" rel="noreferrer"><code>map</code></a> are used to succinctly generate a dictionary containing</p>\u000a\u000a<pre><code>{ord('!'): None, ord('@'): None, ...}\u000a</code></pre>\u000a\u000a<p>Even simpler, as <a href="http://stackoverflow.com/questions/23175809/typeerror-translate-takes-one-argument-2-given-python">another answer puts it</a>, create the dictionary in place:</p>\u000a\u000a<pre><code>unicode_line = unicode_line.translate({ord(c): None for c in '!@#$'})\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>*   for compatibility with earlier Pythons, you can create a "null" translation table to pass in place of <code>None</code>:</p>\u000a\u000a<pre><code>import string\u000aline = line.translate(string.maketrans('', ''), '!@#$')\u000a</code></pre>\u000a\u000a<p>Here <a href="https://docs.python.org/2/library/string.html#string.maketrans" rel="noreferrer"><code>string.maketrans</code></a> is used to create a <em>translation table</em>, which is just a string containing the characters with ordinal values 0 to 255.</p>\u000a
p530
sVquestion_id
p531
I3939361
sVlast_activity_date
p532
I1465582603
sVcreation_date
p533
I1287114638
sVscore
p534
I363
sVowner
p535
(dp536
Vuser_id
p537
I192812
sVprofile_image
p538
Vhttps://www.gravatar.com/avatar/2052394c0f78e9710c54ab413d593510?s=128&d=identicon&r=PG
p539
sVuser_type
p540
Vregistered
p541
sVreputation
p542
I12414
sVlink
p543
Vhttp://stackoverflow.com/users/192812/intuited
p544
sVaccept_rate
p545
I49
sVdisplay_name
p546
Vintuited
p547
ssVis_accepted
p548
I01
sVlast_edit_date
p549
I1465582603
sVanswer_id
p550
I3939381
sa(dp551
Vbody
p552
V<p><a href="https://pypi.python.org/pypi/Unidecode" rel="noreferrer">Unidecode</a> is the correct answer for this. It transliterates any unicode string into the closest possible representation in ascii text.</p>\u000a
p553
sVquestion_id
p554
I517923
sVlast_activity_date
p555
I1464038713
sVcreation_date
p556
I1271193674
sVscore
p557
I179
sVowner
p558
(dp559
Vuser_id
p560
I3757
sVprofile_image
p561
Vhttps://www.gravatar.com/avatar/886cefc5134a9df362fe871b0ab71d38?s=128&d=identicon&r=PG
p562
sVuser_type
p563
Vregistered
p564
sVreputation
p565
I21636
sVlink
p566
Vhttp://stackoverflow.com/users/3757/christian-oudard
p567
sVaccept_rate
p568
I86
sVdisplay_name
p569
VChristian Oudard
p570
ssVis_accepted
p571
I01
sVlast_edit_date
p572
I1464038713
sVanswer_id
p573
I2633310
sa(dp574
Vbody
p575
V<h1>Python 2</h1>\u000a\u000a<p>Make an empty file called <code>__init__.py</code> in the same directory as the files. That will signify to Python that it's "ok to import from this directory".</p>\u000a\u000a<p>Then just do...</p>\u000a\u000a<pre><code>from user import User\u000afrom dir import Dir\u000a</code></pre>\u000a\u000a<p>The same holds true if the files are in a subdirectory - put an <code>__init__.py</code> in the subdirectory as well, and then use regular import statements, with dot notation. For each level of directory, you need to add to the import path. </p>\u000a\u000a<pre><code>bin/\u000a    main.py\u000a    classes/\u000a        user.py\u000a        dir.py\u000a</code></pre>\u000a\u000a<p>So if the directory was named "classes", then you'd do this:</p>\u000a\u000a<pre><code>from classes.user import User\u000afrom classes.dir import Dir\u000a</code></pre>\u000a\u000a<h1>Python 3</h1>\u000a\u000a<p>Same as previous, but prefix the module name with a <code>.</code> if not using a subdirectory:</p>\u000a\u000a<pre><code>from .user import User\u000afrom .dir import Dir\u000a</code></pre>\u000a
p576
sVquestion_id
p577
I4142151
sVlast_activity_date
p578
I1460914191
sVcreation_date
p579
I1289374570
sVscore
p580
I373
sVowner
p581
(dp582
Vuser_id
p583
I148870
sVprofile_image
p584
Vhttps://www.gravatar.com/avatar/559f9b4a76982a9c3e496e2e7686d4b1?s=128&d=identicon&r=PG
p585
sVuser_type
p586
Vregistered
p587
sVreputation
p588
I273965
sVlink
p589
Vhttp://stackoverflow.com/users/148870/amber
p590
sVdisplay_name
p591
VAmber
p592
ssVis_accepted
p593
I01
sVlast_edit_date
p594
I1460914191
sVanswer_id
p595
I4142178
sa(dp596
Vbody
p597
V<p>Example at @Nasser's answer:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df = DataFrame(columns=('lib', 'qty1', 'qty2'))\u000a&gt;&gt;&gt; for i in range(5):\u000a&gt;&gt;&gt;     df.loc[i] = [randint(-1,1) for n in range(3)]\u000a&gt;&gt;&gt;\u000a&gt;&gt;&gt; print(df)\u000a    lib  qty1  qty2\u000a0    0     0    -1\u000a1   -1    -1     1\u000a2    1    -1     1\u000a3    0     0     0\u000a4    1    -1    -1\u000a\u000a[5 rows x 3 columns]\u000a</code></pre>\u000a
p598
sVquestion_id
p599
I10715965
sVlast_activity_date
p600
I1460359225
sVcreation_date
p601
I1406034625
sVscore
p602
I154
sVowner
p603
(dp604
Vuser_id
p605
I1289107
sVprofile_image
p606
Vhttps://www.gravatar.com/avatar/b8e0c4a0ea801b27e2fb1ed1d06107a0?s=128&d=identicon&r=PG
p607
sVuser_type
p608
Vregistered
p609
sVreputation
p610
I1825
sVlink
p611
Vhttp://stackoverflow.com/users/1289107/fred
p612
sVaccept_rate
p613
I54
sVdisplay_name
p614
Vfred
p615
ssVis_accepted
p616
I01
sVlast_edit_date
p617
I1460359225
sVanswer_id
p618
I24888331
sa(dp619
Vbody
p620
V<p>While <a href="http://stackoverflow.com/a/27341847/2854723">this previous answer</a> might be the reason, this snipped worked for me as a solution (in <code>Ubuntu 14.04</code>):</p>\u000a\u000a<p>First remove the package from the package manager:</p>\u000a\u000a<pre class="lang-none prettyprint-override"><code># apt-get remove python-pip\u000a</code></pre>\u000a\u000a<p>And then install the latest version by side:</p>\u000a\u000a<pre class="lang-none prettyprint-override"><code># easy_install pip\u000a</code></pre>\u000a\u000a<p>(thanks to @Aufziehvogel, @JunchaoGu)</p>\u000a
p621
sVquestion_id
p622
I27341064
sVlast_activity_date
p623
I1460288273
sVcreation_date
p624
I1418308960
sVscore
p625
I370
sVowner
p626
(dp627
Vuser_id
p628
I2854723
sVprofile_image
p629
Vhttps://i.stack.imgur.com/qSfR2.png?s=128&g=1
p630
sVuser_type
p631
Vregistered
p632
sVreputation
p633
I4675
sVlink
p634
Vhttp://stackoverflow.com/users/2854723/thomas-mc-work
p635
sVaccept_rate
p636
I80
sVdisplay_name
p637
Vthomas.mc.work
p638
ssVis_accepted
p639
I01
sVlast_edit_date
p640
I1460288273
sVanswer_id
p641
I27425458
sa(dp642
Vbody
p643
V<p><code>nose</code> isn't really a unit testing framework.  It's a test runner and a great one at that.  It can run tests created using <code>unittest</code>, <code>py.test</code> or <code>doctest</code>.</p>\u000a\u000a<p>My preference for unit testing framework is the standard <code>unittest</code> module (also known as <code>pyUnit</code>).  It's similar to other xUnit frameworks and is easy to relate to for people without python background.   There is also pretty good support for it in Eclipse/PyDev</p>\u000a\u000a<p>On <code>py.test</code>, I find multiple levels of setup/teardowns very confusing. I also find that it leads to highly unstructured and hard to read unit tests.</p>\u000a\u000a<p><code>doctest</code> is OK for simple things, but I find that it's very limiting and doesn't really scale for complex and highly interactive code.</p>\u000a
p644
sVquestion_id
p645
I191673
sVlast_activity_date
p646
I1458829776
sVcreation_date
p647
I1223791781
sVscore
p648
I111
sVowner
p649
(dp650
Vuser_id
p651
I52490
sVprofile_image
p652
Vhttps://www.gravatar.com/avatar/11118ae56897b53161f737a0131d865b?s=128&d=identicon&r=PG
p653
sVuser_type
p654
Vregistered
p655
sVreputation
p656
I8016
sVlink
p657
Vhttp://stackoverflow.com/users/52490/kozyarchuk
p658
sVaccept_rate
p659
I75
sVdisplay_name
p660
VKozyarchuk
p661
ssVis_accepted
p662
I01
sVlast_edit_date
p663
I1458829776
sVanswer_id
p664
I195144
sa(dp665
Vbody
p666
V<p>The easiest and pureist method without relying on C headers is PyYaml:</p>\u000a\u000a<pre><code>#!/usr/bin/env python\u000a\u000aimport yaml\u000a\u000awith open("example.yaml", 'r') as stream:\u000a    try:\u000a        print(yaml.load(stream))\u000a    except yaml.YAMLError as exc:\u000a        print(exc)\u000a</code></pre>\u000a\u000a<p>Err.. that's it... how many lines of code would that take me in Java... any ideas? : ) more info here:</p>\u000a\u000a<p><a href="http://pyyaml.org/wiki/PyYAMLDocumentation" rel="noreferrer">http://pyyaml.org/wiki/PyYAMLDocumentation</a></p>\u000a
p667
sVquestion_id
p668
I1773805
sVlast_activity_date
p669
I1456194063
sVcreation_date
p670
I1258763014
sVscore
p671
I333
sVowner
p672
(dp673
Vuser_id
p674
I82865
sVprofile_image
p675
Vhttps://www.gravatar.com/avatar/053082988d5c2da6fe500a209f8cfdd8?s=128&d=identicon&r=PG
p676
sVuser_type
p677
Vregistered
p678
sVreputation
p679
I37152
sVlink
p680
Vhttp://stackoverflow.com/users/82865/jon
p681
sVaccept_rate
p682
I71
sVdisplay_name
p683
VJon
p684
ssVis_accepted
p685
I01
sVlast_edit_date
p686
I1456194063
sVanswer_id
p687
I1774043
sasVquota_max
p688
I300
sVquota_remaining
p689
I252
s.