(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>The nested function looks up variables from the parent scope when executed, not when defined.</p>\u000a\u000a<p>The function body is compiled, and the 'free' variables (not defined in the function itself by assignment), are verified, then bound as closure cells to the function, with the code using an index to reference each cell. <code>pet_function</code> thus has <em>one</em> free variable (<code>cage</code>) which is then referenced via a closure cell, index 0. The closure itself points to the local variable <code>cage</code> in the <code>get_petters</code> function.</p>\u000a\u000a<p>When you actually call the function, that closure is then used to look at the value of <code>cage</code> in the surrounding scope <em>at the time you call the function</em>. Here lies the problem. By the time you call your functions, the <code>get_petters</code> function is already done computing it's results. The <code>cage</code> local variable at some point during that execution was assigned each of the <code>'cow'</code>, <code>'dog'</code>, and <code>'cat'</code> strings, but at the end of the function, <code>cage</code> contains that last value <code>'cat'</code>. Thus, when you call each of the dynamically returned functions, you get the value <code>'cat'</code> printed.</p>\u000a\u000a<p>The work-around is to not rely on closures. You can use a <em>partial function</em> instead, create a <em>new function scope</em>, or bind the variable as a <em>default value for a keyword parameter</em>.</p>\u000a\u000a<ul>\u000a<li><p>Partial function example, using <a href="http://docs.python.org/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial()</code></a>:</p>\u000a\u000a<pre><code>from functools import partial\u000a\u000adef pet_function(cage=None):\u000a    print "Mary pets the " + cage.animal + "."\u000a\u000ayield (animal, partial(gotimes, partial(pet_function, cage=cage)))\u000a</code></pre></li>\u000a<li><p>Creating a new scope example:</p>\u000a\u000a<pre><code>def scoped_cage(cage=None):\u000a    def pet_function():\u000a        print "Mary pets the " + cage.animal + "."\u000a    return pet_function\u000a\u000ayield (animal, partial(gotimes, scoped_cage(cage)))\u000a</code></pre></li>\u000a<li><p>Binding the variable as a default value for a keyword parameter:</p>\u000a\u000a<pre><code>def pet_function(cage=cage):\u000a    print "Mary pets the " + cage.animal + "."\u000a\u000ayield (animal, partial(gotimes, pet_function))\u000a</code></pre></li>\u000a</ul>\u000a\u000a<p>There is no need to define the <code>scoped_cage</code> function in the loop, compilation only takes place once, not on each iteration of the loop.</p>\u000a
p6
sVquestion_id
p7
I12423614
sVlast_activity_date
p8
I1490794057
sVcreation_date
p9
I1347622659
sVscore
p10
I87
sVowner
p11
(dp12
Vuser_id
p13
I100297
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vmoderator
p17
sVreputation
p18
I554897
sVlink
p19
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p20
sVdisplay_name
p21
VMartijn Pieters
p22
ssVis_accepted
p23
I01
sVlast_edit_date
p24
I1490794057
sVanswer_id
p25
I12423750
sa(dp26
Vbody
p27
V<p>Looks like readline is not enabled. Check if <code>PYTHONSTARTUP</code> variable is defined, for me it points to <code>/etc/pythonstart</code> and that file is executed by the python process before going interactive, which setups readline/history handling.</p>\u000a\u000a<p>Thanks to @chown here is the docs on this: <a href="http://docs.python.org/2/tutorial/interactive.html" rel="nofollow noreferrer">http://docs.python.org/2/tutorial/interactive.html</a></p>\u000a
p28
sVquestion_id
p29
I893053
sVlast_activity_date
p30
I1489123547
sVcreation_date
p31
I1242916042
sVscore
p32
I18
sVowner
p33
(dp34
Vuser_id
p35
I35060
sVprofile_image
p36
Vhttps://www.gravatar.com/avatar/020f31e7b5e91deacae737386ced9842?s=128&d=identicon&r=PG
p37
sVuser_type
p38
Vregistered
p39
sVreputation
p40
I28480
sVlink
p41
Vhttp://stackoverflow.com/users/35060/ismail
p42
sVdisplay_name
p43
Vismail
p44
ssVis_accepted
p45
I01
sVlast_edit_date
p46
I1489123547
sVanswer_id
p47
I893200
sa(dp48
Vbody
p49
V<p>Basically the way the selenium detection works, is that they test for pre-defined javascript variables which appear when running with selenium. The bot detection scripts usually look anything containing word "selenium" / "webdriver" in any of the variables (on window object), and also document variables called <code>$cdc_</code> and <code>$wdc_</code>. Of course, all of this depends on which browser you are on. All the different browsers expose different things.</p>\u000a\u000a<p>For me, I used chrome, so, <strong>all that I had to</strong> do was to ensure that <code>$cdc_</code> didn't exist anymore as document variable, and voila (download chromedriver source code, modify chromedriver and re-compile <code>$cdc_</code> under different name.)</p>\u000a\u000a<p>this is the function I modified in chromedriver:</p>\u000a\u000a<p>call_function.js:</p>\u000a\u000a<pre><code>function getPageCache(opt_doc) {\u000a  var doc = opt_doc || document;\u000a  var key = '$cdc_asdjflasutopfhvcZLmcfl_'; // added long suffix\u000a  if (!(key in doc))\u000a    doc[key] = new Cache();\u000a  return doc[key];\u000a}\u000a</code></pre>\u000a\u000a<p>(note the comment, all I did I turned '$cdc_' to '$cdc_kdosp'.</p>\u000a
p50
sVquestion_id
p51
I33225947
sVlast_activity_date
p52
I1488317788
sVcreation_date
p53
I1482142461
sVscore
p54
I15
sVowner
p55
(dp56
Vuser_id
p57
I1936622
sVprofile_image
p58
Vhttps://i.stack.imgur.com/Q58oT.jpg?s=128&g=1
p59
sVuser_type
p60
Vregistered
p61
sVreputation
p62
I16763
sVlink
p63
Vhttp://stackoverflow.com/users/1936622/erti-chris-eelmaa
p64
sVaccept_rate
p65
I82
sVdisplay_name
p66
VErti-Chris Eelmaa
p67
ssVis_accepted
p68
I01
sVlast_edit_date
p69
I1488317788
sVanswer_id
p70
I41220267
sa(dp71
Vbody
p72
V<p>In Python you can <a href="https://docs.python.org/2/reference/expressions.html#comparisons" rel="noreferrer">"chain" comparison operations</a> which just means they are "and"ed together.  In your case, it'd be like this:</p>\u000a\u000a<pre><code>if start &lt;= x &lt;= end:\u000a</code></pre>\u000a\u000a<p>Reference: <a href="https://docs.python.org/2/reference/expressions.html#not-in" rel="noreferrer">https://docs.python.org/2/reference/expressions.html#not-in</a></p>\u000a
p73
sVquestion_id
p74
I26502775
sVlast_activity_date
p75
I1486332220
sVcreation_date
p76
I1413965227
sVscore
p77
I136
sVowner
p78
(dp79
Vuser_id
p80
I4323
sVprofile_image
p81
Vhttps://i.stack.imgur.com/qqgFU.png?s=128&g=1
p82
sVuser_type
p83
Vregistered
p84
sVreputation
p85
I105663
sVlink
p86
Vhttp://stackoverflow.com/users/4323/john-zwinck
p87
sVaccept_rate
p88
I83
sVdisplay_name
p89
VJohn Zwinck
p90
ssVis_accepted
p91
I01
sVlast_edit_date
p92
I1486332220
sVanswer_id
p93
I26502847
sa(dp94
Vbody
p95
V<pre><code>import os\u000arandom_string = os.urandom(string_length)\u000a</code></pre>\u000a\u000a<p>and if you need url safe string :</p>\u000a\u000a<pre><code>import os\u000arandom_string = os.urandom(string_length).hex() \u000a</code></pre>\u000a\u000a<p>(note random_string length is greatest than string_length in that case)</p>\u000a
p96
sVquestion_id
p97
I785058
sVlast_activity_date
p98
I1481664314
sVcreation_date
p99
I1240564179
sVscore
p100
I132
sVowner
p101
(dp102
Vuser_id
p103
I6475
sVprofile_image
p104
Vhttps://www.gravatar.com/avatar/14d31365b5aa707c17590218afcecc65?s=128&d=identicon&r=PG
p105
sVuser_type
p106
Vregistered
p107
sVreputation
p108
I3870
sVlink
p109
Vhttp://stackoverflow.com/users/6475/seun-osewa
p110
sVaccept_rate
p111
I80
sVdisplay_name
p112
VSeun Osewa
p113
ssVis_accepted
p114
I01
sVlast_edit_date
p115
I1481664314
sVanswer_id
p116
I785086
sa(dp117
Vbody
p118
V<p>These days, the most popular (and very simple) option is the ElementTree API, which has been included in the standard library since Python 2.5.</p>\u000a\u000a<p>The available options for that are:</p>\u000a\u000a<ul>\u000a<li>ElementTree (Basic, pure-Python implementation of ElementTree.  Part of the standard library since 2.5)</li>\u000a<li>cElementTree (Optimized C implementation of ElementTree. Also offered in the standard library since 2.5)</li>\u000a<li>LXML (Based on libxml2. Offers a rich superset of the ElementTree API as well XPath, CSS Selectors, and more)</li>\u000a</ul>\u000a\u000a<p>Here's an example of how to generate your example document using the in-stdlib cElementTree:</p>\u000a\u000a<pre><code>import xml.etree.cElementTree as ET\u000a\u000aroot = ET.Element("root")\u000adoc = ET.SubElement(root, "doc")\u000a\u000aET.SubElement(doc, "field1", name="blah").text = "some value1"\u000aET.SubElement(doc, "field2", name="asdfasd").text = "some vlaue2"\u000a\u000atree = ET.ElementTree(root)\u000atree.write("filename.xml")\u000a</code></pre>\u000a\u000a<p>I've tested it and it works, but I'm assuming whitespace isn't significant. If you need "prettyprint" indentation, let me know and I'll look up how to do that. (It may be an LXML-specific option. I don't use the stdlib implementation much)</p>\u000a\u000a<p>For further reading, here are some useful links:</p>\u000a\u000a<ul>\u000a<li><a href="http://docs.python.org/library/xml.etree.elementtree.html" rel="noreferrer">API docs for the implementation in the Python standard library</a></li>\u000a<li><a href="http://effbot.org/zone/element-index.htm" rel="noreferrer">Introductory Tutorial</a> (From the original author's site)</li>\u000a<li><a href="http://lxml.de/tutorial.html" rel="noreferrer">LXML etree tutorial</a>. (With example code for loading the best available option from all major ElementTree implementations)</li>\u000a</ul>\u000a\u000a<p>As a final note, either cElementTree or LXML should be fast enough for all your needs (both are optimized C code), but in the event you're in a situation where you need to squeeze out every last bit of performance, the benchmarks on the LXML site indicate that:</p>\u000a\u000a<ul>\u000a<li>LXML clearly wins for serializing (generating) XML</li>\u000a<li>As a side-effect of implementing proper parent traversal, LXML is a bit slower than cElementTree for parsing.</li>\u000a</ul>\u000a
p119
sVquestion_id
p120
I3605680
sVlast_activity_date
p121
I1481401140
sVcreation_date
p122
I1283225511
sVscore
p123
I150
sVowner
p124
(dp125
Vuser_id
p126
I435253
sVprofile_image
p127
Vhttps://www.gravatar.com/avatar/80df0d0f2a1945a7bed366ff25f8ea5d?s=128&d=identicon&r=PG
p128
sVuser_type
p129
Vregistered
p130
sVreputation
p131
I9167
sVlink
p132
Vhttp://stackoverflow.com/users/435253/ssokolow
p133
sVdisplay_name
p134
Vssokolow
p135
ssVis_accepted
p136
I01
sVlast_edit_date
p137
I1481401140
sVanswer_id
p138
I3605831
sa(dp139
Vbody
p140
V<p>Yes, you can install an interrupt handler using the <a href="https://docs.python.org/3/library/signal.html" rel="noreferrer">signal module</a>.</p>\u000a\u000a<pre><code>import signal\u000aimport sys\u000aimport time\u000a\u000adef signal_handler(signal, frame):\u000a    print 'You pressed Ctrl+C!'\u000a    sys.exit(0)\u000a\u000asignal.signal(signal.SIGINT, signal_handler)\u000aprint 'Press Ctrl+C'\u000awhile True:\u000a    time.sleep(1)\u000a</code></pre>\u000a
p141
sVquestion_id
p142
I4205317
sVlast_activity_date
p143
I1476954784
sVcreation_date
p144
I1290004236
sVscore
p145
I109
sVowner
p146
(dp147
Vuser_id
p148
I63832
sVprofile_image
p149
Vhttps://www.gravatar.com/avatar/d3f2b39cad33f0c719855fdbfb6ccf66?s=128&d=identicon&r=PG
p150
sVuser_type
p151
Vregistered
p152
sVreputation
p153
I16397
sVlink
p154
Vhttp://stackoverflow.com/users/63832/johan-kotlinski
p155
sVaccept_rate
p156
I82
sVdisplay_name
p157
VJohan Kotlinski
p158
ssVis_accepted
p159
I01
sVlast_edit_date
p160
I1476954784
sVanswer_id
p161
I4205386
sa(dp162
Vbody
p163
V<p>By "camera position," it sounds like you want to adjust the elevation and the azimuth angle that you use to view the 3D plot.  I've used the below script to first create the plot, then I determined a good elevation, or <code>elev</code>, from which to view my plot.  I then adjusted the azimuth angle, or <code>azim</code>, to vary the full 360deg around my plot, saving the figure at each instance (and noting which azimuth angle as I saved the plot).  For a more complicated camera pan, you can adjust both the elevation and angle to achieve the desired effect.</p>\u000a\u000a<pre><code>    from mpl_toolkits.mplot3d import Axes3D\u000a    ax = Axes3D(fig)\u000a    ax.scatter(xx,yy,zz, marker='o', s=20, c="goldenrod", alpha=0.6)\u000a    for ii in xrange(0,360,1):\u000a        ax.view_init(elev=10., azim=ii)\u000a        savefig("movie%d.png" % ii)\u000a</code></pre>\u000a
p164
sVquestion_id
p165
I12904912
sVlast_activity_date
p166
I1475869660
sVcreation_date
p167
I1350343860
sVscore
p168
I89
sVowner
p169
(dp170
Vuser_id
p171
I830973
sVprofile_image
p172
Vhttps://i.stack.imgur.com/GUS3D.jpg?s=128&g=1
p173
sVuser_type
p174
Vregistered
p175
sVreputation
p176
I2636
sVlink
p177
Vhttp://stackoverflow.com/users/830973/cosmosis
p178
sVdisplay_name
p179
Vcosmosis
p180
ssVis_accepted
p181
I01
sVlast_edit_date
p182
I1475869660
sVanswer_id
p183
I12905458
sa(dp184
Vbody
p185
V<pre><code>import matplotlib.pyplot as plt\u000aimport numpy as np\u000a\u000amu, sigma = 100, 15\u000ax = mu + sigma * np.random.randn(10000)\u000ahist, bins = np.histogram(x, bins=50)\u000awidth = 0.7 * (bins[1] - bins[0])\u000acenter = (bins[:-1] + bins[1:]) / 2\u000aplt.bar(center, hist, align='center', width=width)\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/EDxOG.png" alt="enter image description here"></p>\u000a\u000a<p>The object-oriented interface is also straightforward:</p>\u000a\u000a<pre><code>fig, ax = plt.subplots()\u000aax.bar(center, hist, align='center', width=width)\u000afig.savefig("1.png")\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>If you are using custom (non-constant) bins, you can pass compute the widths using <code>np.diff</code>, pass the widths to <code>ax.bar</code> and use <code>ax.set_xticks</code> to label the bin edges:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000aimport numpy as np\u000a\u000amu, sigma = 100, 15\u000ax = mu + sigma * np.random.randn(10000)\u000abins = [0, 40, 60, 75, 90, 110, 125, 140, 160, 200]\u000ahist, bins = np.histogram(x, bins=bins)\u000awidth = np.diff(bins)\u000acenter = (bins[:-1] + bins[1:]) / 2\u000a\u000afig, ax = plt.subplots(figsize=(8,3))\u000aax.bar(center, hist, align='center', width=width)\u000aax.set_xticks(bins)\u000afig.savefig("/tmp/out.png")\u000a\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><a href="https://i.stack.imgur.com/tdVmV.png"><img src="https://i.stack.imgur.com/tdVmV.png" alt="enter image description here"></a></p>\u000a
p186
sVquestion_id
p187
I5328556
sVlast_activity_date
p188
I1473514131
sVcreation_date
p189
I1300293979
sVscore
p190
I177
sVowner
p191
(dp192
Vuser_id
p193
I190597
sVprofile_image
p194
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p195
sVuser_type
p196
Vregistered
p197
sVreputation
p198
I425294
sVlink
p199
Vhttp://stackoverflow.com/users/190597/unutbu
p200
sVaccept_rate
p201
I88
sVdisplay_name
p202
Vunutbu
p203
ssVis_accepted
p204
I01
sVlast_edit_date
p205
I1473514131
sVanswer_id
p206
I5328669
sa(dp207
Vbody
p208
V<p>Just execute this command in the spark directory:</p>\u000a\u000a<pre><code>cp conf/log4j.properties.template conf/log4j.properties\u000a</code></pre>\u000a\u000a<p>Edit log4j.properties:</p>\u000a\u000a<pre><code># Set everything to be logged to the console\u000alog4j.rootCategory=INFO, console\u000alog4j.appender.console=org.apache.log4j.ConsoleAppender\u000alog4j.appender.console.target=System.err\u000alog4j.appender.console.layout=org.apache.log4j.PatternLayout\u000alog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n\u000a\u000a# Settings to quiet third party logs that are too verbose\u000alog4j.logger.org.eclipse.jetty=WARN\u000alog4j.logger.org.eclipse.jetty.util.component.AbstractLifeCycle=ERROR\u000alog4j.logger.org.apache.spark.repl.SparkIMain$exprTyper=INFO\u000alog4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter=INFO\u000a</code></pre>\u000a\u000a<p>Replace at the first line:</p>\u000a\u000a<pre><code>log4j.rootCategory=INFO, console\u000a</code></pre>\u000a\u000a<p>by:</p>\u000a\u000a<pre><code>log4j.rootCategory=WARN, console\u000a</code></pre>\u000a\u000a<p>Save and restart your shell. It works for me for Spark 1.1.0 and Spark 1.5.1 on OS X.</p>\u000a
p209
sVquestion_id
p210
I25193488
sVlast_activity_date
p211
I1473264746
sVcreation_date
p212
I1412087789
sVscore
p213
I96
sVowner
p214
(dp215
Vuser_id
p216
I112976
sVprofile_image
p217
Vhttps://www.gravatar.com/avatar/a953d215fc4985cbc72a27c6f6323b64?s=128&d=identicon&r=PG
p218
sVuser_type
p219
Vregistered
p220
sVreputation
p221
I7508
sVlink
p222
Vhttp://stackoverflow.com/users/112976/poiuytrez
p223
sVaccept_rate
p224
I67
sVdisplay_name
p225
Vpoiuytrez
p226
ssVis_accepted
p227
I01
sVlast_edit_date
p228
I1473264746
sVanswer_id
p229
I26123496
sa(dp230
Vbody
p231
V<p>After opening up an <a href="https://github.com/scipy/scipy/issues/4102">issue</a> with the SciPy team, we found that you need to upgrade pip with:</p>\u000a\u000a<pre><code>pip install --upgrade pip\u000a</code></pre>\u000a\u000a<p>And in <code>Python 3</code> this works:</p>\u000a\u000a<pre><code>python3 -m pip install --upgrade pip\u000a</code></pre>\u000a\u000a<p>for SciPy to install properly. Why? Because:</p>\u000a\u000a<blockquote>\u000a  <p>Older versions of pip have to be told to use wheels, IIRC with --use-wheel. Or you can upgrade pip itself, then it should pick up the wheels.</p>\u000a</blockquote>\u000a\u000a<p>Upgrading pip solves the issue, but you might be able to just use the <code>--use-wheel</code> flag as well.</p>\u000a
p232
sVquestion_id
p233
I26575587
sVlast_activity_date
p234
I1469655243
sVcreation_date
p235
I1416193528
sVscore
p236
I75
sVowner
p237
(dp238
Vuser_id
p239
I2259303
sVprofile_image
p240
Vhttps://www.gravatar.com/avatar/8a74184e56d2bb143abe0cf2d0cf5162?s=128&d=identicon&r=PG
p241
sVuser_type
p242
Vregistered
p243
sVreputation
p244
I9636
sVlink
p245
Vhttp://stackoverflow.com/users/2259303/agconti
p246
sVaccept_rate
p247
I85
sVdisplay_name
p248
Vagconti
p249
ssVis_accepted
p250
I01
sVlast_edit_date
p251
I1469655243
sVanswer_id
p252
I26964891
sa(dp253
Vbody
p254
V<p>The method len() returns the number of elements in the list.</p>\u000a\u000a<p>Syntax:</p>\u000a\u000a<pre><code>len(myArray)\u000a</code></pre>\u000a\u000a<p>Eg:</p>\u000a\u000a<pre><code>myArray = [1, 2, 3]\u000alen(myArray)\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre><code>3\u000a</code></pre>\u000a\u000a<p></p>\u000a
p255
sVquestion_id
p256
I187455
sVlast_activity_date
p257
I1467235110
sVcreation_date
p258
I1223561696
sVscore
p259
I178
sVowner
p260
(dp261
Vuser_id
p262
I9083
sVprofile_image
p263
Vhttps://www.gravatar.com/avatar/ebbe58d38c8315c8c2691dfb307a8617?s=128&d=identicon&r=PG
p264
sVuser_type
p265
Vregistered
p266
sVreputation
p267
I8615
sVlink
p268
Vhttp://stackoverflow.com/users/9083/trent
p269
sVaccept_rate
p270
I100
sVdisplay_name
p271
VTrent
p272
ssVis_accepted
p273
I01
sVlast_edit_date
p274
I1467235110
sVanswer_id
p275
I187463
sa(dp276
Vbody
p277
V<p>Here is my summary of this problem: 5 Ways of Calling Java from Python</p>\u000a\u000a<p><code>http://memect.co/call-java-from-python-so</code> - <em>link appears to now point to malware</em></p>\u000a\u000a<p>Short answer: Jpype works pretty well and is proven in many projects (such as python-boilerpipe), but Pyjnius is faster and simpler than JPype</p>\u000a\u000a<p>I have tried Pyjnius/Jnius, JCC, javabridge, Jpype and Py4j.</p>\u000a\u000a<p>Py4j is a bit hard to use, as you need to start a gateway, adding another layer of fragility.</p>\u000a
p278
sVquestion_id
p279
I3652554
sVlast_activity_date
p280
I1465913703
sVcreation_date
p281
I1403809790
sVscore
p282
I21
sVowner
p283
(dp284
Vuser_id
p285
I804622
sVprofile_image
p286
Vhttps://www.gravatar.com/avatar/fa41e89bfc7495f460e859e53034d3c7?s=128&d=identicon&r=PG
p287
sVuser_type
p288
Vregistered
p289
sVreputation
p290
I356
sVlink
p291
Vhttp://stackoverflow.com/users/804622/jie-bao
p292
sVdisplay_name
p293
VJie Bao
p294
ssVis_accepted
p295
I01
sVlast_edit_date
p296
I1465913703
sVanswer_id
p297
I24438324
sa(dp298
Vbody
p299
V<p>A Pythonic way to access a list pairwise is: <code>zip(L, L[1:])</code>. To connect the last item to the first one:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; L = [1, 2, 3]\u000a&gt;&gt;&gt; zip(L, L[1:] + L[:1])\u000a[(1, 2), (2, 3), (3, 1)]\u000a</code></pre>\u000a
p300
sVquestion_id
p301
I36917042
sVlast_activity_date
p302
I1461882887
sVcreation_date
p303
I1461853478
sVscore
p304
I109
sVowner
p305
(dp306
Vuser_id
p307
I4279
sVprofile_image
p308
Vhttps://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG
p309
sVuser_type
p310
Vregistered
p311
sVreputation
p312
I203089
sVlink
p313
Vhttp://stackoverflow.com/users/4279/j-f-sebastian
p314
sVaccept_rate
p315
I94
sVdisplay_name
p316
VJ.F. Sebastian
p317
ssVis_accepted
p318
I01
sVlast_edit_date
p319
I1461882887
sVanswer_id
p320
I36917579
sa(dp321
Vbody
p322
V<p>First off, interpreted/compiled is not a property of the language but a property of the implementation. For most languages, most if not all implementations fall in one category, so one might save a few words saying the language is interpreted/compiled too, but it's still an important distinction, both because it aids understanding and because there are quite a few languages with usable implementations of both kinds (mostly in the realm of functional languages, see Haskell and ML). In addition, there are C interpreters and projects that attempt to compile a subset of Python to C or C++ code (and subsequently to machine code).</p>\u000a\u000a<p>Second, compilation is not restricted to ahead-of-time compilation to native machine code. A compiler is, more generally, a program that converts a program in one programming language into a program in another programming language (arguably, you can even have a compiler with the same input and output language if significant transformations are applied). And JIT compilers compile to native machine code <em>at runtime</em>, which can give speed very close to or even better than ahead of time compilation (depending on the benchmark and the quality of the implementations compared).</p>\u000a\u000a<p>But to stop nitpicking and answer the question you meant to ask: Practically (read: using a somewhat popular and mature implementation), Python is <strong>compiled</strong>. Not compiled to machine code ahead of time (i.e. "compiled" by the restricted and wrong, but alas common definition), "only" compiled to <a href="http://en.wikipedia.org/wiki/Bytecode" rel="noreferrer">bytecode</a>, but it's still compilation with at least some of the benefits. For example, the statement <code>a = b.c()</code> is compiled to a byte stream which, when "disassembled", looks somewhat like <code>load 0 (b); load_str 'c'; get_attr; call_function 0; store 1 (a)</code>. This is a simplification, it's actually less readable and a bit more low-level -  you can experiment with the standard library <a href="http://docs.python.org/library/dis.html" rel="noreferrer"><code>dis</code> module</a> and see what the real deal looks like. Interpreting this is faster than interpreting from a higher-level representation.</p>\u000a\u000a<p>That bytecode is either interpreted (note that there's a difference, both in theory and in practical performance, between interpreting directly and first compiling to some intermediate representation and interpret that), as with the reference implementation (CPython), or both interpreted and compiled to optimized machine code at runtime, as with <a href="http://pypy.org/" rel="noreferrer">PyPy</a>.</p>\u000a
p323
sVquestion_id
p324
I6889747
sVlast_activity_date
p325
I1461117096
sVcreation_date
p326
I1312119803
sVscore
p327
I109
sVowner
p328
(dp329
Vuser_id
p330
I395760
sVprofile_image
p331
Vhttps://www.gravatar.com/avatar/ce3278f4dfbb7287c89d749c95d6f805?s=128&d=identicon&r=PG
p332
sVuser_type
p333
Vregistered
p334
sVreputation
p335
I75808
sVlink
p336
Vhttp://stackoverflow.com/users/395760/delnan
p337
sVaccept_rate
p338
I75
sVdisplay_name
p339
Vdelnan
p340
ssVis_accepted
p341
I01
sVlast_edit_date
p342
I1461117096
sVanswer_id
p343
I6889798
sa(dp344
Vbody
p345
V<p>It's in the page <a href="https://docs.djangoproject.com/en/1.9/ref/models/querysets/#create" rel="noreferrer">"QuerySet API reference"</a>, linked from the documentation index.</p>\u000a
p346
sVquestion_id
p347
I9940674
sVlast_activity_date
p348
I1457430464
sVcreation_date
p349
I1333101304
sVscore
p350
I32
sVowner
p351
(dp352
Vuser_id
p353
I104349
sVprofile_image
p354
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p355
sVuser_type
p356
Vregistered
p357
sVreputation
p358
I356767
sVlink
p359
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p360
sVaccept_rate
p361
I86
sVdisplay_name
p362
VDaniel Roseman
p363
ssVis_accepted
p364
I01
sVlast_edit_date
p365
I1457430464
sVanswer_id
p366
I9940729
sa(dp367
Vbody
p368
V<p>There are couple quirks with urllib and urlparse modules. Here's working example:</p>\u000a\u000a<pre><code>try:\u000a    import urlparse\u000a    from urllib import urlencode\u000aexcept: # For Python 3\u000a    import urllib.parse as urlparse\u000a    from urllib.parse import urlencode\u000a\u000aurl = "http://stackoverflow.com/search?q=question"\u000aparams = {'lang':'en','tag':'python'}\u000a\u000aurl_parts = list(urlparse.urlparse(url))\u000aquery = dict(urlparse.parse_qsl(url_parts[4]))\u000aquery.update(params)\u000a\u000aurl_parts[4] = urlencode(query)\u000a\u000aprint(urlparse.urlunparse(url_parts))\u000a</code></pre>\u000a
p369
sVquestion_id
p370
I2506379
sVlast_activity_date
p371
I1455280744
sVcreation_date
p372
I1269422595
sVscore
p373
I119
sVowner
p374
(dp375
Vuser_id
p376
I4999
sVprofile_image
p377
Vhttps://www.gravatar.com/avatar/ae995fa03b218e7c27a608b5f14e68ae?s=128&d=identicon&r=PG
p378
sVuser_type
p379
Vregistered
p380
sVreputation
p381
I15812
sVlink
p382
Vhttp://stackoverflow.com/users/4999/%c5%81ukasz
p383
sVdisplay_name
p384
V\u0141ukasz
p385
ssVis_accepted
p386
I01
sVlast_edit_date
p387
I1455280744
sVanswer_id
p388
I2506477
sa(dp389
Vbody
p390
V<p><code>lambda</code> is an anonymous function, it is equivalent to:</p>\u000a\u000a<pre><code>def func(p):\u000a   return p.totalScore     \u000a</code></pre>\u000a\u000a<p>Now <code>max</code> becomes:</p>\u000a\u000a<pre><code>max(players, key=func)\u000a</code></pre>\u000a\u000a<p>But as <code>def</code> statements are compound statements they can't be used where an expression is required, that's why sometimes <code>lambda</code>'s are used. </p>\u000a\u000a<p>Note that lambda is equivalent to what you'd put in a return statement of a <code>def</code>. Thus, you can't use statements inside a <code>lambda</code>, only expressions are allowed.</p>\u000a\u000a<hr>\u000a\u000a<p>What does max do?</p>\u000a\u000a<blockquote>\u000a  <p>max(a, b, c, ...[, key=func]) -> value</p>\u000a  \u000a  <p>With a single iterable argument, return its largest item. With two or\u000a  more arguments, return the largest argument.</p>\u000a</blockquote>\u000a\u000a<p>So, it simply returns the object that is largest.</p>\u000a\u000a<hr>\u000a\u000a<pre><code>How `key` works?\u000a</code></pre>\u000a\u000a<p>By default in Python 2 key compares items based on a <a href="http://docs.python.org/2/reference/expressions.html#not-in" rel="noreferrer">set of rules</a> based on the type of the objects(for example a string is always greater than an integer).</p>\u000a\u000a<p>To modify the object before comparison or to compare based on a particular attribute/index you've to use the <code>key</code> argument. </p>\u000a\u000a<p>Example 1:</p>\u000a\u000a<p>A simple example, suppose you've a list of numbers in string form, but you want to compare those items by their integer value.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; lis = ['1','100','111','2']\u000a</code></pre>\u000a\u000a<p>Here <code>max</code> compares the items using their original values(strings are compared lexicographically so you'd get <code>'2'</code> as output) :</p>\u000a\u000a<pre><code>&gt;&gt;&gt; max(lis)\u000a'2'\u000a</code></pre>\u000a\u000a<p>To compare the items by their integer value use key with a simple <code>lambda</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; max(lis, key=lambda x:int(x))  #compare `int` version of each item\u000a'111'\u000a</code></pre>\u000a\u000a<p>Example 2: Applying <code>max</code> to a list of lists.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; lis = [(1,'a'),(3,'c'), (4,'e'), (-1,'z')]\u000a</code></pre>\u000a\u000a<p>By default max will will compare the items by the first index, if the first index is same then it'd compare the second index. As in my example all items have unique first index so, you'd get this as the answer:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; max(lis)\u000a(4, 'e')\u000a</code></pre>\u000a\u000a<p>But, what if you wanted to compare each item by the value at index 1? Simple, use <code>lambda</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; max(lis, key = lambda x: x[1])\u000a(-1, 'z')\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>Comparing items in an iterable that contains objects of different type</strong>:</p>\u000a\u000a<p>List with mixed items:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; lis = ['1','100','111','2', 2, 2.57]\u000a</code></pre>\u000a\u000a<p><a href="http://docs.python.org/2/reference/expressions.html#not-in" rel="noreferrer">In Python 2 it is possible to compare items of two different types</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; max(lis) # works in Python 2\u000a'2'\u000a&gt;&gt;&gt; max(lis, key=lambda x: int(x)) #compare integer version of each item\u000a'111'\u000a</code></pre>\u000a\u000a<p><a href="http://docs.python.org/3.0/whatsnew/3.0.html#ordering-comparisons" rel="noreferrer">But in Python 3 you can't do that any more</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; lis = ['1','100','111','2', 2, 2.57]\u000a&gt;&gt;&gt; max(lis)\u000aTraceback (most recent call last):\u000a  File "&lt;ipython-input-2-0ce0a02693e4&gt;", line 1, in &lt;module&gt;\u000a    max(lis)\u000aTypeError: unorderable types: int() &gt; str()\u000a</code></pre>\u000a\u000a<p>But this works, as we are comparing integer version of each object:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; max(lis, key=lambda x: int(x)) # or simply `max(lis, key=int)`\u000a'111'\u000a</code></pre>\u000a
p391
sVquestion_id
p392
I18296755
sVlast_activity_date
p393
I1453459765
sVcreation_date
p394
I1376811694
sVscore
p395
I121
sVowner
p396
(dp397
Vuser_id
p398
I846892
sVprofile_image
p399
Vhttps://i.stack.imgur.com/E9dZn.png?s=128&g=1
p400
sVuser_type
p401
Vregistered
p402
sVreputation
p403
I142521
sVlink
p404
Vhttp://stackoverflow.com/users/846892/ashwini-chaudhary
p405
sVaccept_rate
p406
I88
sVdisplay_name
p407
VAshwini Chaudhary
p408
ssVis_accepted
p409
I01
sVlast_edit_date
p410
I1453459765
sVanswer_id
p411
I18296814
sa(dp412
Vbody
p413
V<p>Python cannot know up-front what object you'll end up calling, because being dynamic, you can <em>swap out the function object</em>. At any time. And each of these objects can have a different number of arguments.</p>\u000a\u000a<p>Here is an extreme example:</p>\u000a\u000a<pre><code>import random\u000a\u000adef foo(): pass\u000adef bar(arg1): pass\u000adef baz(arg1, arg2): pass\u000a\u000athe_function = random.choice([foo, bar, baz])\u000aprint(the_function())\u000a</code></pre>\u000a\u000a<p>The above code has a 2 in 3 chance of raising an exception. But Python cannot know a-priori if that'll be the case or not!</p>\u000a\u000a<p>And I haven't even started with dynamic module imports, dynamic function generation, other callable objects (any object with a <code>__call__</code> method can be called), or catch-all arguments (<code>*args</code> and <code>**kwargs</code>).</p>\u000a\u000a<p>But to make this extra clear, you state in your question:</p>\u000a\u000a<blockquote>\u000a  <p>It is not going to change while the program is running.</p>\u000a</blockquote>\u000a\u000a<p>This is not the case, not in Python, once the module is loaded you can delete, add or replace any object in the module namespace, including function objects.</p>\u000a
p414
sVquestion_id
p415
I34567770
sVlast_activity_date
p416
I1451803843
sVcreation_date
p417
I1451750429
sVscore
p418
I143
sVowner
p419
(dp420
Vuser_id
p421
I100297
sVprofile_image
p422
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p423
sVuser_type
p424
Vmoderator
p425
sVreputation
p426
I554897
sVlink
p427
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p428
sVdisplay_name
p429
VMartijn Pieters
p430
ssVis_accepted
p431
I01
sVlast_edit_date
p432
I1451803843
sVanswer_id
p433
I34567789
sa(dp434
Vbody
p435
V<p>You can set the fraction of GPU memory to be allocated when you construct a <a href="https://www.tensorflow.org/versions/master/api_docs/python/client.html#Session" rel="noreferrer"><code>tf.Session</code></a> by passing a <a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/config.proto" rel="noreferrer"><code>tf.GPUOptions</code></a> as part of the optional <code>config</code> argument:</p>\u000a\u000a<pre><code># Assume that you have 12GB of GPU memory and want to allocate ~4GB:\u000agpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.333)\u000a\u000asess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))\u000a</code></pre>\u000a\u000a<p>The <code>per_process_gpu_memory_fraction</code> acts as a hard upper bound on the amount of GPU memory that will be used by the process on each GPU on the same machine. Currently, this fraction is applied uniformly to all of the GPUs on the same machine; there is no way to set this on a per-GPU basis.</p>\u000a
p436
sVquestion_id
p437
I34199233
sVlast_activity_date
p438
I1449798438
sVcreation_date
p439
I1449745219
sVscore
p440
I85
sVowner
p441
(dp442
Vuser_id
p443
I3574081
sVprofile_image
p444
Vhttps://i.stack.imgur.com/LIW6C.jpg?s=128&g=1
p445
sVuser_type
p446
Vregistered
p447
sVreputation
p448
I50768
sVlink
p449
Vhttp://stackoverflow.com/users/3574081/mrry
p450
sVdisplay_name
p451
Vmrry
p452
ssVis_accepted
p453
I01
sVlast_edit_date
p454
I1449798438
sVanswer_id
p455
I34200194
sa(dp456
Vbody
p457
V<p>An easy, correct way to implement <code>__hash__()</code> is to use a key tuple. It won't be as fast as a specialized hash, but if you need that then you should probably implement the type in C.</p>\u000a\u000a<p>Here's an example of using a key for hash and equality:</p>\u000a\u000a<pre><code>class A(object):\u000a    def __key(self):\u000a        return (self.attr_a, self.attr_b, self.attr_c)\u000a\u000a    def __eq__(x, y):\u000a        return x.__key() == y.__key()\u000a\u000a    def __hash__(self):\u000a        return hash(self.__key())\u000a</code></pre>\u000a\u000a<p>Also, the <a href="https://docs.python.org/3.5/reference/datamodel.html#object.__hash__" rel="noreferrer">documentation of <code>__hash__</code></a> has more information, that may be valuable in some particular circumstances.</p>\u000a
p458
sVquestion_id
p459
I2909106
sVlast_activity_date
p460
I1447695504
sVcreation_date
p461
I1274828392
sVscore
p462
I88
sVowner
p463
(dp464
Vuser_id
p465
I3560
sVprofile_image
p466
Vhttps://www.gravatar.com/avatar/4acd21acc7b1f605466f2f48189a7177?s=128&d=identicon&r=PG
p467
sVuser_type
p468
Vregistered
p469
sVreputation
p470
I133151
sVlink
p471
Vhttp://stackoverflow.com/users/3560/john-millikin
p472
sVaccept_rate
p473
I83
sVdisplay_name
p474
VJohn Millikin
p475
ssVis_accepted
p476
I01
sVlast_edit_date
p477
I1447695504
sVanswer_id
p478
I2909119
sa(dp479
Vbody
p480
V<p>Reflection in python is a lot easier and far more flexible than it is in Java.</p>\u000a\u000a<p>I recommend reading this <a href="http://www.diveintopython.net/power_of_introspection/index.html" rel="noreferrer">tutorial</a></p>\u000a\u000a<p>There's no direct function (that I know of) which takes a fully qualified class name and returns the class, however you have all the pieces needed to build that, and you can connect them together.</p>\u000a\u000a<p>One bit of advice though: don't try to program in Java style when you're in python.</p>\u000a\u000a<p>If you can explain what is it that you're trying to do, maybe we can help you find a more pythonic way of doing it.</p>\u000a\u000a<p>Here's a function that does what you want:</p>\u000a\u000a<pre><code>def get_class( kls ):\u000a    parts = kls.split('.')\u000a    module = ".".join(parts[:-1])\u000a    m = __import__( module )\u000a    for comp in parts[1:]:\u000a        m = getattr(m, comp)            \u000a    return m\u000a</code></pre>\u000a\u000a<p>You can use the return value of this function as if it were the class itself.</p>\u000a\u000a<p>Here's a usage example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; D = get_class("datetime.datetime")\u000a&gt;&gt;&gt; D\u000a&lt;type 'datetime.datetime'&gt;\u000a&gt;&gt;&gt; D.now()\u000adatetime.datetime(2009, 1, 17, 2, 15, 58, 883000)\u000a&gt;&gt;&gt; a = D( 2010, 4, 22 )\u000a&gt;&gt;&gt; a\u000adatetime.datetime(2010, 4, 22, 0, 0)\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a\u000a<p><strong>How does that work?</strong></p>\u000a\u000a<p>We're using <code>__import__</code> to import the module that holds the class, which required that we first extract the module name from the fully qualified name. Then we import the module:</p>\u000a\u000a<pre><code>m = __import__( module )\u000a</code></pre>\u000a\u000a<p>In this case, <code>m</code> will only refer to the top level module, </p>\u000a\u000a<p>For example, if your class lives in <code>foo.baz</code> module, then <code>m</code> will be the module <code>foo</code><br>\u000aWe can easily obtain a reference to <code>foo.baz</code> using <code>getattr( m, 'baz' )</code></p>\u000a\u000a<p>To get from the top level module to the class, have to recursively use <code>gettatr</code> on the parts of the class name</p>\u000a\u000a<p>Say for example, if you class name is <code>foo.baz.bar.Model</code> then we do this:</p>\u000a\u000a<pre><code>m = __import__( "foo.baz.bar" ) #m is package foo\u000am = getattr( m, "baz" ) #m is package baz\u000am = getattr( m, "bar" ) #m is module bar\u000am = getattr( m, "Model" ) #m is class Model\u000a</code></pre>\u000a\u000a<p>This is what's happening in this loop:</p>\u000a\u000a<pre><code>for comp in parts[1:]:\u000a    m = getattr(m, comp)    \u000a</code></pre>\u000a\u000a<p>At the end of the loop, <code>m</code> will be a reference to the class. This means that <code>m</code> is actually the class itslef, you can do for instance:</p>\u000a\u000a<pre><code>a = m() #instantiate a new instance of the class    \u000ab = m( arg1, arg2 ) # pass arguments to the constructor\u000a</code></pre>\u000a
p481
sVquestion_id
p482
I452969
sVlast_activity_date
p483
I1446759722
sVcreation_date
p484
I1232180739
sVscore
p485
I137
sVowner
p486
(dp487
Vuser_id
p488
I35364
sVprofile_image
p489
Vhttps://www.gravatar.com/avatar/f11512869fe2f8d87a2f2b687b76686c?s=128&d=identicon&r=PG
p490
sVuser_type
p491
Vregistered
p492
sVreputation
p493
I66453
sVlink
p494
Vhttp://stackoverflow.com/users/35364/hasen
p495
sVaccept_rate
p496
I70
sVdisplay_name
p497
Vhasen
p498
ssVis_accepted
p499
I01
sVlast_edit_date
p500
I1446759722
sVanswer_id
p501
I452981
sa(dp502
Vbody
p503
V<p>Try this:</p>\u000a\u000a<pre><code>df.ix[df.A==0, 'B'] = np.nan\u000a</code></pre>\u000a\u000a<p>the <code>df.A==0</code> expression creates a boolean series that indexes the rows, <code>'B'</code> selects the column. You can also use this to transform a subset of a column, e.g.:</p>\u000a\u000a<pre><code>df.ix[df.A==0, 'B'] = df.ix[df.A==0, 'B'] / 2\u000a</code></pre>\u000a
p504
sVquestion_id
p505
I12307099
sVlast_activity_date
p506
I1445381581
sVcreation_date
p507
I1346960238
sVscore
p508
I135
sVowner
p509
(dp510
Vuser_id
p511
I1427416
sVprofile_image
p512
Vhttps://i.stack.imgur.com/QWHKg.png?s=128&g=1
p513
sVuser_type
p514
Vregistered
p515
sVreputation
p516
I123766
sVlink
p517
Vhttp://stackoverflow.com/users/1427416/brenbarn
p518
sVaccept_rate
p519
I50
sVdisplay_name
p520
VBrenBarn
p521
ssVis_accepted
p522
I01
sVlast_edit_date
p523
I1445381581
sVanswer_id
p524
I12307162
sa(dp525
Vbody
p526
V<p>From <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a>:</p>\u000a\u000a<pre><code>- _single_leading_underscore: weak "internal use" indicator.  E.g. "from M\u000a  import *" does not import objects whose name starts with an underscore.\u000a\u000a- single_trailing_underscore_: used by convention to avoid conflicts with\u000a  Python keyword, e.g.\u000a\u000a  Tkinter.Toplevel(master, class_='ClassName')\u000a\u000a- __double_leading_underscore: when naming a class attribute, invokes name\u000a  mangling (inside class FooBar, __boo becomes _FooBar__boo; see below).\u000a\u000a- __double_leading_and_trailing_underscore__: "magic" objects or\u000a  attributes that live in user-controlled namespaces.  E.g. __init__,\u000a  __import__ or __file__.  Never invent such names; only use them\u000a  as documented.\u000a</code></pre>\u000a\u000a<p>Also, from David Goodger's <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/presentation.html" rel="noreferrer">Code Like a Pythonista</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Attributes: interface, _internal, __private</p>\u000a  \u000a  <p>But try to avoid the __private form. I never use it. Trust me. If you\u000a  use it, you WILL regret it later.</p>\u000a  \u000a  <p>Explanation:</p>\u000a  \u000a  <p>People coming from a C++/Java background are especially prone to\u000a  overusing/misusing this "feature". But <code>__private</code> names don't work the\u000a  same way as in Java or C++. They just trigger a name mangling whose\u000a  purpose is to prevent accidental namespace collisions in subclasses:\u000a  <code>MyClass.__private</code> just becomes <code>MyClass._MyClass__private</code>. (Note that\u000a  even this breaks down for subclasses with the same name as the\u000a  superclass, e.g. subclasses in different modules.) It is possible to\u000a  access <code>__private</code> names from outside their class, just inconvenient and\u000a  fragile (it adds a dependency on the exact name of the superclass).</p>\u000a  \u000a  <p>The problem is that the author of a class may legitimately think "this\u000a  attribute/method name should be private, only accessible from within\u000a  this class definition" and use the <code>__private</code> convention. But later on,\u000a  a user of that class may make a subclass that legitimately needs\u000a  access to that name. So either the superclass has to be modified\u000a  (which may be difficult or impossible), or the subclass code has to\u000a  use manually mangled names (which is ugly and fragile at best).</p>\u000a  \u000a  <p>There's a concept in Python: "we're all consenting adults here". If\u000a  you use the <code>__private</code> form, who are you protecting the attribute from?\u000a  It's the responsibility of subclasses to use attributes from\u000a  superclasses properly, and it's the responsibility of superclasses to\u000a  document their attributes properly.</p>\u000a  \u000a  <p>It's better to use the single-leading-underscore convention,\u000a  <code>_internal</code>. "This isn't name mangled at all; it just indicates to\u000a  others to "be careful with this, it's an internal implementation\u000a  detail; don't touch it if you don't fully understand it". It's only a\u000a  convention though.</p>\u000a</blockquote>\u000a
p527
sVquestion_id
p528
I6930144
sVlast_activity_date
p529
I1442609735
sVcreation_date
p530
I1312390733
sVscore
p531
I150
sVowner
p532
(dp533
Vuser_id
p534
I391531
sVprofile_image
p535
Vhttps://www.gravatar.com/avatar/04bbaf6d73be76d81b13f2e150017691?s=128&d=identicon&r=PG
p536
sVuser_type
p537
Vregistered
p538
sVreputation
p539
I30690
sVlink
p540
Vhttp://stackoverflow.com/users/391531/nmichaels
p541
sVaccept_rate
p542
I92
sVdisplay_name
p543
Vnmichaels
p544
ssVis_accepted
p545
I01
sVlast_edit_date
p546
I1442609735
sVanswer_id
p547
I6930223
sa(dp548
Vbody
p549
V<p><strong>Both 3. and 4. <em>should</em> be syntax errors on all Python versions.</strong> However you've found a bug that affects Python versions 2.5 - 3.4, and which was subsequently <a href="https://bugs.python.org/issue25070">posted to the Python issue tracker</a>. Because of the bug, an unparenthesized generator expression was accepted as an argument to a function if it was accompanied only by <code>*args</code> and/or <code>**kwargs</code>. While Python 2.6+ allowed both cases 3. and 4., Python 2.5 allowed only case 3. - yet both of them were against the <a href="https://docs.python.org/2.5/ref/calls.html">documented grammar</a>:</p>\u000a\u000a<pre><code>call    ::=     primary "(" [argument_list [","]\u000a                            | expression genexpr_for] ")"\u000a</code></pre>\u000a\u000a<p>i.e. the documentation says a function call comprises of <code>primary</code> (the expression that evaluates to a callable), followed by, in parentheses, <em>either</em> an argument list <em>or</em> just an unparenthesized generator expression;\u000aand within the argument list, all generator expressions must be in parentheses.</p>\u000a\u000a<hr>\u000a\u000a<p>This bug (though it seems it had not been known), had been fixed in Python 3.5 prereleases. In Python 3.5 parentheses are always required around a generator expression, unless it is the only argument to the function:</p>\u000a\u000a<pre><code>Python 3.5.0a4+ (default:a3f2b171b765, May 19 2015, 16:14:41) \u000a[GCC 4.9.2] on linux\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; f(1 for i in [42], *a)\u000a  File "&lt;stdin&gt;", line 1\u000aSyntaxError: Generator expression must be parenthesized if not sole argument\u000a</code></pre>\u000a\u000a<p>This is now documented in the <a href="https://docs.python.org/3.6/whatsnew/3.5.html#changes-in-python-behavior">What's New in Python 3.5</a>, thanks to DeTeReR spotting this bug.</p>\u000a\u000a<hr>\u000a\u000a<h2>Analysis of the bug</h2>\u000a\u000a<p>There was a change made to Python 2.6 which <a href="https://docs.python.org/2/whatsnew/2.6.html#other-language-changes">allowed the use of keyword arguments <em>after</em> <code>*args</code></a>:</p>\u000a\u000a<blockquote>\u000a  <p>It\u2019s also become legal to provide keyword arguments after a *args\u000a  argument to a function call.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def f(*args, **kw):\u000a...     print args, kw\u000a...\u000a&gt;&gt;&gt; f(1,2,3, *(4,5,6), keyword=13)\u000a(1, 2, 3, 4, 5, 6) {'keyword': 13}\u000a</code></pre>\u000a  \u000a  <p>Previously this would have been a syntax error. (Contributed by Amaury\u000a  Forgeot d\u2019Arc; issue 3473.)</p>\u000a</blockquote>\u000a\u000a<hr>\u000a\u000a<p>However, the Python 2.6 <a href="https://github.com/python/cpython/blob/2.6/Grammar/Grammar#L133">grammar</a> does not make any distinction between keyword arguments, positional arguments, or bare generator expressions - they are all of type <code>argument</code> to the parser.</p>\u000a\u000a<p>As per Python rules, a generator expression must be parenthesized if it is not the sole argument to the function. This is validated in the <a href="https://github.com/python/cpython/blob/2.6/Python/ast.c#L1906"><code>Python/ast.c</code></a>:</p>\u000a\u000a<pre><code>for (i = 0; i &lt; NCH(n); i++) {\u000a    node *ch = CHILD(n, i);\u000a    if (TYPE(ch) == argument) {\u000a        if (NCH(ch) == 1)\u000a            nargs++;\u000a        else if (TYPE(CHILD(ch, 1)) == gen_for)\u000a            ngens++;\u000a        else\u000a            nkeywords++;\u000a    }\u000a}\u000aif (ngens &gt; 1 || (ngens &amp;&amp; (nargs || nkeywords))) {\u000a    ast_error(n, "Generator expression must be parenthesized "\u000a              "if not sole argument");\u000a    return NULL;\u000a}\u000a</code></pre>\u000a\u000a<p>However this function does <em>not</em> consider the <code>*args</code> at all - it specifically only looks for ordinary positional arguments and keyword arguments.</p>\u000a\u000a<p>Further down in the same function, there is an error message generated for <a href="https://github.com/python/cpython/blob/2.6/Python/ast.c#L1931">non-keyword arg after keyword arg</a>:</p>\u000a\u000a<pre><code>if (TYPE(ch) == argument) {\u000a    expr_ty e;\u000a    if (NCH(ch) == 1) {\u000a        if (nkeywords) {\u000a            ast_error(CHILD(ch, 0),\u000a                      "non-keyword arg after keyword arg");\u000a            return NULL;\u000a        }\u000a        ...\u000a</code></pre>\u000a\u000a<p>But this again applies to arguments that are <em>not</em> unparenthesized generator expressions as <a href="https://github.com/python/cpython/blob/2.6/Python/ast.c#L1945">evidenced by the <code>else if</code> statement</a>:</p>\u000a\u000a<pre><code>else if (TYPE(CHILD(ch, 1)) == gen_for) {\u000a    e = ast_for_genexp(c, ch);\u000a    if (!e)\u000a        return NULL;\u000a    asdl_seq_SET(args, nargs++, e);\u000a}\u000a</code></pre>\u000a\u000a<p>Thus an unparenthesized generator expression was allowed to slip pass.</p>\u000a\u000a<hr>\u000a\u000a<p>Now in Python 3.5 one can use the <code>*args</code> anywhere in a function call, so\u000athe <a href="https://github.com/python/cpython/blob/3.5/Grammar/Grammar#L126">Grammar</a> was changed to accommodate for this:</p>\u000a\u000a<pre><code>arglist: argument (',' argument)*  [',']\u000a</code></pre>\u000a\u000a<p>and </p>\u000a\u000a<pre><code>argument: ( test [comp_for] |\u000a            test '=' test |\u000a            '**' test |\u000a            '*' test )\u000a</code></pre>\u000a\u000a<p>and the <a href="https://github.com/python/cpython/blob/3.5/Python/ast.c#L2628"><code>for</code> loop was changed</a> to</p>\u000a\u000a<pre><code>for (i = 0; i &lt; NCH(n); i++) {\u000a    node *ch = CHILD(n, i);\u000a    if (TYPE(ch) == argument) {\u000a        if (NCH(ch) == 1)\u000a            nargs++;\u000a        else if (TYPE(CHILD(ch, 1)) == comp_for)\u000a            ngens++;\u000a        else if (TYPE(CHILD(ch, 0)) == STAR)\u000a            nargs++;\u000a        else\u000a            /* TYPE(CHILD(ch, 0)) == DOUBLESTAR or keyword argument */\u000a            nkeywords++;\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<p>Thus fixing the bug.</p>\u000a\u000a<p>However the inadvertent change is that the valid looking constructions</p>\u000a\u000a<pre><code>func(i for i in [42], *args)\u000a</code></pre>\u000a\u000a<p>and</p>\u000a\u000a<pre><code>func(i for i in [42], **kwargs)\u000a</code></pre>\u000a\u000a<p>where an unparenthesized generator precedes <code>*args</code> or <code>**kwargs</code> now stopped working.</p>\u000a\u000a<hr>\u000a\u000a<p>To locate this bug, I tried various Python versions. In 2.5 you'd get <code>SyntaxError</code>:</p>\u000a\u000a<pre><code>Python 2.5.5 (r255:77872, Nov 28 2010, 16:43:48) \u000a[GCC 4.4.5] on linux2\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; f(*[1], 2 for x in [2])\u000a  File "&lt;stdin&gt;", line 1\u000a    f(*[1], 2 for x in [2])\u000a</code></pre>\u000a\u000a<p>And this was fixed before some prerelease of Python 3.5:</p>\u000a\u000a<pre><code>Python 3.5.0a4+ (default:a3f2b171b765, May 19 2015, 16:14:41) \u000a[GCC 4.9.2] on linux\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; f(*[1], 2 for x in [2])\u000a  File "&lt;stdin&gt;", line 1\u000aSyntaxError: Generator expression must be parenthesized if not sole argument\u000a</code></pre>\u000a\u000a<p>However, the parenthesized generator expression, it works in Python 3.5, but it does not work not in Python 3.4:</p>\u000a\u000a<pre><code>f(*[1], (2 for x in [2]))\u000a</code></pre>\u000a\u000a<p>And this is the clue. In Python 3.5 the <code>*splatting</code> is generalized; you can use it anywhere in a function call:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print(*range(5), 42)\u000a0 1 2 3 4 42\u000a</code></pre>\u000a\u000a<p>So the actual bug (generator working with <code>*star</code> without parentheses) <em>was</em> indeed fixed in Python 3.5, and the bug could be found in that what changed between Python 3.4 and 3.5</p>\u000a
p550
sVquestion_id
p551
I32521140
sVlast_activity_date
p552
I1442323795
sVcreation_date
p553
I1441968438
sVscore
p554
I67
sVowner
p555
(dp556
Vuser_id
p557
I918959
sVprofile_image
p558
Vhttps://www.gravatar.com/avatar/b9051b2917c3d55d55b3d7042fa49f6c?s=128&d=identicon&r=PG
p559
sVuser_type
p560
Vregistered
p561
sVreputation
p562
I52465
sVlink
p563
Vhttp://stackoverflow.com/users/918959/antti-haapala
p564
sVaccept_rate
p565
I88
sVdisplay_name
p566
VAntti Haapala
p567
ssVis_accepted
p568
I01
sVlast_edit_date
p569
I1442323795
sVanswer_id
p570
I32521643
sa(dp571
Vbody
p572
V<p>You often hear that Python encourages EAFP style ("it's easier to ask for forgiveness than permission") over LBYL style ("look before you leap"). To me, it's a matter of efficiency and readability.</p>\u000a\u000a<p>In your example (say that instead of returning a list or an empty string, the function were to return a list or <code>None</code>), if you expect that 99 % of the time <code>result</code> will actually contain something iterable, I'd use the <code>try/except</code> approach. It will be faster if exceptions really are exceptional. If <code>result</code> is <code>None</code> more than 50 % of the time, then using <code>if</code> is probably better.</p>\u000a\u000a<p>To support this with a few measurements:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import timeit\u000a&gt;&gt;&gt; timeit.timeit(setup="a=1;b=1", stmt="a/b") # no error checking\u000a0.06379691968322732\u000a&gt;&gt;&gt; timeit.timeit(setup="a=1;b=1", stmt="try:\u005cn a/b\u005cnexcept ZeroDivisionError:\u005cn pass")\u000a0.0829463709378615\u000a&gt;&gt;&gt; timeit.timeit(setup="a=1;b=0", stmt="try:\u005cn a/b\u005cnexcept ZeroDivisionError:\u005cn pass")\u000a0.5070195056614466\u000a&gt;&gt;&gt; timeit.timeit(setup="a=1;b=1", stmt="if b!=0:\u005cn a/b")\u000a0.11940114974277094\u000a&gt;&gt;&gt; timeit.timeit(setup="a=1;b=0", stmt="if b!=0:\u005cn a/b")\u000a0.051202772912802175\u000a</code></pre>\u000a\u000a<p>So, whereas an <code>if</code> statement <em>always</em> costs you, it's nearly free to set up a <code>try/except</code> block.  But when an <code>Exception</code> actually occurs, the cost is much higher.</p>\u000a\u000a<p><strong>Moral:</strong></p>\u000a\u000a<ul>\u000a<li>It's perfectly OK (and "pythonic") to use <code>try/except</code> for flow control,</li>\u000a<li>but it makes sense most when <code>Exception</code>s are actually exceptional. </li>\u000a</ul>\u000a\u000a<p>From the Python docs:</p>\u000a\u000a<blockquote>\u000a  <p><strong>EAFP</strong></p>\u000a  \u000a  <p>Easier to ask for forgiveness than\u000a  permission. This common Python coding\u000a  style assumes the existence of valid\u000a  keys or attributes and catches\u000a  exceptions if the assumption proves\u000a  false. This clean and fast style is\u000a  characterized by the presence of many\u000a  <code>try</code> and <code>except</code> statements. The\u000a  technique contrasts with the <a href="http://www.python.org/doc/3.0/glossary.html#term-lbyl" rel="noreferrer">LBYL</a>\u000a  style common to many other languages\u000a  such as C.</p>\u000a</blockquote>\u000a
p573
sVquestion_id
p574
I1835756
sVlast_activity_date
p575
I1440426830
sVcreation_date
p576
I1259788228
sVscore
p577
I125
sVowner
p578
(dp579
Vuser_id
p580
I20670
sVprofile_image
p581
Vhttps://www.gravatar.com/avatar/251f2449ffba9fbcc3491db6564ff4a2?s=128&d=identicon&r=PG
p582
sVuser_type
p583
Vregistered
p584
sVreputation
p585
I209304
sVlink
p586
Vhttp://stackoverflow.com/users/20670/tim-pietzcker
p587
sVaccept_rate
p588
I100
sVdisplay_name
p589
VTim Pietzcker
p590
ssVis_accepted
p591
I01
sVlast_edit_date
p592
I1440426830
sVanswer_id
p593
I1835844
sa(dp594
Vbody
p595
V<p>Use <a href="http://docs.python.org/library/hashlib.html?highlight=hash#module-hashlib" rel="noreferrer">hashlib</a> as <code>hash()</code> <a href="https://docs.python.org/2/library/functions.html#hash" rel="noreferrer">was designed to be used to</a>:</p>\u000a\u000a<blockquote>\u000a  <p>quickly compare dictionary keys during a dictionary lookup</p>\u000a</blockquote>\u000a\u000a<p>and therefore does not guarantee that it will be the same across Python implementations.</p>\u000a
p596
sVquestion_id
p597
I793761
sVlast_activity_date
p598
I1437838638
sVcreation_date
p599
I1240842834
sVscore
p600
I52
sVowner
p601
(dp602
Vuser_id
p603
I12855
sVprofile_image
p604
Vhttps://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG
p605
sVuser_type
p606
Vregistered
p607
sVreputation
p608
I142797
sVlink
p609
Vhttp://stackoverflow.com/users/12855/silentghost
p610
sVaccept_rate
p611
I86
sVdisplay_name
p612
VSilentGhost
p613
ssVis_accepted
p614
I01
sVlast_edit_date
p615
I1437838638
sVanswer_id
p616
I793772
sa(dp617
Vbody
p618
V<ol>\u000a<li><p>Install <a href="http://www.phyast.pitt.edu/~micheles/python/documentation.html#the-solution" rel="noreferrer">decorator</a> module:</p>\u000a\u000a<pre><code>$ pip install decorator\u000a</code></pre></li>\u000a<li><p>Adapt definition of <code>args_as_ints()</code>:</p>\u000a\u000a<pre><code>import decorator\u000a\u000a@decorator.decorator\u000adef args_as_ints(f, *args, **kwargs):\u000a    args = [int(x) for x in args]\u000a    kwargs = dict((k, int(v)) for k, v in kwargs.items())\u000a    return f(*args, **kwargs)\u000a\u000a@args_as_ints\u000adef funny_function(x, y, z=3):\u000a    """Computes x*y + 2*z"""\u000a    return x*y + 2*z\u000a\u000aprint funny_function("3", 4.0, z="5")\u000a# 22\u000ahelp(funny_function)\u000a# Help on function funny_function in module __main__:\u000a# \u000a# funny_function(x, y, z=3)\u000a#     Computes x*y + 2*z\u000a</code></pre></li>\u000a</ol>\u000a\u000a<hr>\u000a\u000a<h3>Python 3.4+</h3>\u000a\u000a<p><a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="noreferrer"><code>functools.wraps()</code> from stdlib</a> preserves signatures since Python 3.4:</p>\u000a\u000a<pre><code>import functools\u000a\u000a\u000adef args_as_ints(func):\u000a    @functools.wraps(func)\u000a    def wrapper(*args, **kwargs):\u000a        args = [int(x) for x in args]\u000a        kwargs = dict((k, int(v)) for k, v in kwargs.items())\u000a        return func(*args, **kwargs)\u000a    return wrapper\u000a\u000a\u000a@args_as_ints\u000adef funny_function(x, y, z=3):\u000a    """Computes x*y + 2*z"""\u000a    return x*y + 2*z\u000a\u000a\u000aprint(funny_function("3", 4.0, z="5"))\u000a# 22\u000ahelp(funny_function)\u000a# Help on function funny_function in module __main__:\u000a#\u000a# funny_function(x, y, z=3)\u000a#     Computes x*y + 2*z\u000a</code></pre>\u000a\u000a<p><code>functools.wraps()</code> is available <a href="https://docs.python.org/2.5/lib/module-functools.html" rel="noreferrer">at least since Python 2.5</a> but it does not preserve the signature there:</p>\u000a\u000a<pre><code>help(funny_function)\u000a# Help on function funny_function in module __main__:\u000a#\u000a# funny_function(*args, **kwargs)\u000a#    Computes x*y + 2*z\u000a</code></pre>\u000a\u000a<p>Notice: <code>*args, **kwargs</code> instead of <code>x, y, z=3</code>.</p>\u000a
p619
sVquestion_id
p620
I147816
sVlast_activity_date
p621
I1437614572
sVcreation_date
p622
I1222675710
sVscore
p623
I54
sVowner
p624
(dp625
Vuser_id
p626
I4279
sVprofile_image
p627
Vhttps://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG
p628
sVuser_type
p629
Vregistered
p630
sVreputation
p631
I203089
sVlink
p632
Vhttp://stackoverflow.com/users/4279/j-f-sebastian
p633
sVaccept_rate
p634
I94
sVdisplay_name
p635
VJ.F. Sebastian
p636
ssVis_accepted
p637
I01
sVlast_edit_date
p638
I1437614572
sVanswer_id
p639
I147878
sa(dp640
Vbody
p641
V<p>You should <a href="http://www.python.org/dev/peps/pep-0287/" rel="noreferrer">use reStructuredText</a> and check out the <a href="http://sphinx.pocoo.org/markup/index.html" rel="noreferrer">Sphinx markup constructs</a>. All the cool kids are doing it.</p>\u000a\u000a<p>You should <a href="http://www.python.org/dev/peps/pep-0257/" rel="noreferrer">follow docstring conventions</a>. i.e.</p>\u000a\u000a<blockquote>\u000a  <p>It prescribes the function or method's\u000a  effect as a command ("Do this",\u000a  "Return that").</p>\u000a</blockquote>\u000a\u000a<p>You should avoid repeating yourself unnecessarily or explaining the eminently obvious. Example of what not to do:</p>\u000a\u000a<pre><code>def do_things(verbose=False):\u000a    """Do some things.\u000a    :param verbose: Be verbose (give additional messages).\u000a    """\u000a    raise NotImplementedError\u000a</code></pre>\u000a\u000a<p>If you wanted to describe something non-obvious it would be a different story; for example, that verbose causes messages to occur on <code>stdout</code> or a <code>logging</code> stream. This is not specific to Python, but follows from more hand-wavy ideals such as <a href="http://en.wikipedia.org/wiki/Self-documenting" rel="noreferrer">self-documenting code</a> and <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">code/documentation DRY</a>.</p>\u000a\u000a<p>Try to avoid mentioning specific types if possible (abstract or interface-like types are generally okay). Mentioning <em>protocols</em> is typically more helpful from a duck typing perspective (i.e. "iterable" instead of <code>set</code>, or "mutable ordered sequence" instead of <code>list</code>). I've seen some code that is very literal and heavy WRT the <code>:rtype:</code> and the <code>:type param:</code> function-level documentation, which I've found to be at odds with the duck typing mentality.</p>\u000a
p642
sVquestion_id
p643
I405582
sVlast_activity_date
p644
I1434960999
sVcreation_date
p645
I1230854092
sVscore
p646
I49
sVowner
p647
(dp648
Vuser_id
p649
I3594
sVprofile_image
p650
Vhttps://www.gravatar.com/avatar/5928057c2aff65b162eb34d5cc3797fa?s=128&d=identicon&r=PG
p651
sVuser_type
p652
Vregistered
p653
sVreputation
p654
I29354
sVlink
p655
Vhttp://stackoverflow.com/users/3594/cdleary
p656
sVaccept_rate
p657
I95
sVdisplay_name
p658
Vcdleary
p659
ssVis_accepted
p660
I01
sVlast_edit_date
p661
I1434960999
sVanswer_id
p662
I405710
sa(dp663
Vbody
p664
V<p>I believe this is what you want:</p>\u000a\u000a<pre><code>table.groupby('YEARMONTH').CLIENTCODE.nunique()\u000a</code></pre>\u000a\u000a<p>Example:</p>\u000a\u000a<pre><code>In [2]: table\u000aOut[2]: \u000a   CLIENTCODE  YEARMONTH\u000a0           1     201301\u000a1           1     201301\u000a2           2     201301\u000a3           1     201302\u000a4           2     201302\u000a5           2     201302\u000a6           3     201302\u000a\u000aIn [3]: table.groupby('YEARMONTH').CLIENTCODE.nunique()\u000aOut[3]: \u000aYEARMONTH\u000a201301       2\u000a201302       3\u000a</code></pre>\u000a
p665
sVquestion_id
p666
I15411158
sVlast_activity_date
p667
I1433957077
sVcreation_date
p668
I1363270146
sVscore
p669
I127
sVowner
p670
(dp671
Vuser_id
p672
I1221924
sVprofile_image
p673
Vhttps://www.gravatar.com/avatar/f54c6896f32653516c994bfcb12b704a?s=128&d=identicon&r=PG
p674
sVuser_type
p675
Vregistered
p676
sVreputation
p677
I13183
sVlink
p678
Vhttp://stackoverflow.com/users/1221924/dan-allan
p679
sVaccept_rate
p680
I80
sVdisplay_name
p681
VDan Allan
p682
ssVis_accepted
p683
I01
sVlast_edit_date
p684
I1433957077
sVanswer_id
p685
I15411596
sa(dp686
Vbody
p687
V<p>You just need the <code>argmax()</code> (<em>now called <code>idxmax</code></em>) function. It's straightforward:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import pandas\u000a&gt;&gt;&gt; import numpy as np\u000a&gt;&gt;&gt; df = pandas.DataFrame(np.random.randn(5,3),columns=['A','B','C'])\u000a&gt;&gt;&gt; df\u000a          A         B         C\u000a0  1.232853 -1.979459 -0.573626\u000a1  0.140767  0.394940  1.068890\u000a2  0.742023  1.343977 -0.579745\u000a3  2.125299 -0.649328 -0.211692\u000a4 -0.187253  1.908618 -1.862934\u000a&gt;&gt;&gt; df['A'].argmax()\u000a3\u000a&gt;&gt;&gt; df['B'].argmax()\u000a4\u000a&gt;&gt;&gt; df['C'].argmax()\u000a1\u000a</code></pre>\u000a\u000a<p>This function was updated to the name <code>idxmax</code> in the Pandas API, though as of Pandas 0.16, <code>argmax</code> still exists and performs the same function (though appears to run more slowly than <code>idxmax</code>).</p>\u000a\u000a<p>You can also just use <code>numpy.argmax</code>, such as <code>numpy.argmax(df['A'])</code> -- it provides the same thing as either of the two <code>pandas</code> functions, and appears at least as fast as <code>idxmax</code> in cursory observations.</p>\u000a\u000a<p>Previously (as noted in the comments) it appeared that <code>argmax</code> would exist as a separate function which provided the <em>integer position</em> within the index of the row location of the maximum element. For example, if you have string values as your index labels, like rows 'a' through 'e', you might want to know that the max occurs in row 4 (not row 'd'). However, in pandas 0.16, all of the listed methods above only provide the <em>label</em> from the <code>Index</code> for the row in question, and if you want the position integer of that label within the <code>Index</code> you have to get it manually (which can be tricky now that duplicate row labels are allowed).</p>\u000a\u000a<p>In general, I think the move to <code>idxmax</code>-like behavior for all three of the approaches (<code>argmax</code>, which still exists, <code>idxmax</code>, and <code>numpy.argmax</code>) is a bad thing, since it is very common to require the positional integer location of a maximum, perhaps even more common than desiring the <em>label</em> of that positional location within some index, especially in applications where duplicate row labels are common.</p>\u000a\u000a<p>For example, consider this toy <code>DataFrame</code> with a duplicate row label:</p>\u000a\u000a<pre><code>In [19]: dfrm\u000aOut[19]: \u000a          A         B         C\u000aa  0.143693  0.653810  0.586007\u000ab  0.623582  0.312903  0.919076\u000ac  0.165438  0.889809  0.000967\u000ad  0.308245  0.787776  0.571195\u000ae  0.870068  0.935626  0.606911\u000af  0.037602  0.855193  0.728495\u000ag  0.605366  0.338105  0.696460\u000ah  0.000000  0.090814  0.963927\u000ai  0.688343  0.188468  0.352213\u000ai  0.879000  0.105039  0.900260\u000a\u000aIn [20]: dfrm['A'].idxmax()\u000aOut[20]: 'i'\u000a\u000aIn [21]: dfrm.ix[dfrm['A'].idxmax()]\u000aOut[21]: \u000a          A         B         C\u000ai  0.688343  0.188468  0.352213\u000ai  0.879000  0.105039  0.900260\u000a</code></pre>\u000a\u000a<p>So here a naive use of <code>idxmax</code> is not sufficient, whereas the old form of <code>argmax</code> would correctly provide the <em>positional</em> location of the max row (in this case, position 9).</p>\u000a\u000a<p>This is exactly one of those nasty kinds of bug-prone behaviors in dynamically typed languages that makes this sort of thing so unfortunate, and worth beating a dead horse over. If you are writing systems code and your system suddenly gets used on some data sets that are not cleaned properly before being joined, it's very easy to end up with duplicate row labels, especially string labels like a CUSIP or SEDOL identifier for financial assets. You can't easily use the type system to help you out, and you may not be able to enforce uniqueness on the index without running into unexpectedly missing data. </p>\u000a\u000a<p>So you're left with hoping that your unit tests covered everything (they didn't, or more likely no one wrote any tests) -- otherwise (most likely) you're just left waiting to see if you happen to smack into this error at runtime, in which case you probably have to go drop many hours worth of work from the database you were outputting results to, bang your head against the wall in IPython trying to manually reproduce the problem, finally figuring out that it's because <code>idxmax</code> can <em>only</em> report the <em>label</em> of the max row, and then being disappointed that no standard function automatically gets the <em>positions</em> of the max row for you, writing a buggy implementation yourself, editing the code, and praying you don't run into the problem again.</p>\u000a
p688
sVquestion_id
p689
I10202570
sVlast_activity_date
p690
I1431312560
sVcreation_date
p691
I1334723490
sVscore
p692
I87
sVowner
p693
(dp694
Vuser_id
p695
I567620
sVprofile_image
p696
Vhttps://i.stack.imgur.com/g8HIM.jpg?s=128&g=1
p697
sVuser_type
p698
Vregistered
p699
sVreputation
p700
I22654
sVlink
p701
Vhttp://stackoverflow.com/users/567620/ely
p702
sVaccept_rate
p703
I71
sVdisplay_name
p704
Vely
p705
ssVis_accepted
p706
I01
sVlast_edit_date
p707
I1431312560
sVanswer_id
p708
I10202789
sa(dp709
Vbody
p710
V<h1>Multiple Apps</h1>\u000a\u000a<p>The application context (and its purpose) is indeed confusing until you realize that Flask can have multiple apps. Imagine the situation where you want to have a single WSGI Python interpreter run multiple Flask application. We're not talking Blueprints here, we're talking entirely different Flask applications.</p>\u000a\u000a<p>You might set this up similar to the <a href="http://flask.pocoo.org/docs/patterns/appdispatch/" rel="noreferrer">Flask documentation section on "Application Dispatching"</a> example:</p>\u000a\u000a<pre><code>from werkzeug.wsgi import DispatcherMiddleware\u000afrom frontend_app import application as frontend\u000afrom backend_app import application as backend\u000a\u000aapplication = DispatcherMiddleware(frontend, {\u000a    '/backend':     backend\u000a})\u000a</code></pre>\u000a\u000a<p>Notice that there are two completely different Flask applications being created "frontend" and "backend". In other words, the <code>Flask(...)</code> application constructor has been called twice, creating two instances of a Flask application.</p>\u000a\u000a<h1>Contexts</h1>\u000a\u000a<p>When you are working with Flask, you often end up using global variables to access various functionality. For example, you probably have code that reads...</p>\u000a\u000a<pre><code>from flask import request\u000a</code></pre>\u000a\u000a<p>Then, during a view, you might use <code>request</code> to access the information of the current request. Obviously, <code>request</code> is not a normal global variable; in actuality, it is a <a href="http://flask.pocoo.org/docs/reqcontext/#diving-into-context-locals" rel="noreferrer">context local</a> value. In other words, there is some magic behind the scenes that says "when I call <code>request.path</code>, get the <code>path</code> attribute from the <code>request</code> object of the CURRENT request." Two different requests will have a different results for <code>request.path</code>.</p>\u000a\u000a<p>In fact, even if you run Flask with multiple threads, Flask is smart enough to keep the request objects isolated. In doing so, it becomes possible for two threads, each handling a different request, to simultaneously call <code>request.path</code> and get the correct information for their respective requests.</p>\u000a\u000a<h1>Putting it Together</h1>\u000a\u000a<p>So we've already seen that Flask can handle multiple applications in the same interpreter, and also that because of the way that Flask allows you to use "context local" globals there must be some mechanism to determine what the "current" <em>request</em> is (in order to do things such as <code>request.path</code>).</p>\u000a\u000a<p>Putting these ideas together, it should also make sense that Flask must have some way to determine what the "current" application is!</p>\u000a\u000a<p>You probably also have code similar to the following:</p>\u000a\u000a<pre><code>from flask import url_for\u000a</code></pre>\u000a\u000a<p>Like our <code>request</code> example, the <code>url_for</code> function has logic that is dependent on the current environment. In this case, however, it is clear to see that the logic is heavily dependent on which app is considered the "current" app. In the frontend/backend example shown above, both the "frontend" and "backend" apps could have a "/login" route, and so <code>url_for('/login')</code> should return something different depending on if the view is handling the request for the frontend or backend app.</p>\u000a\u000a<h1>To answer your questions...</h1>\u000a\u000a<blockquote>\u000a  <p>What is the purpose of the "stack" when it comes to the request or\u000a  application context?</p>\u000a</blockquote>\u000a\u000a<p>From the Request Context docs:</p>\u000a\u000a<blockquote>\u000a  <p>Because the request context is internally maintained as a stack you\u000a  can push and pop multiple times. This is very handy to implement\u000a  things like internal redirects.</p>\u000a</blockquote>\u000a\u000a<p>In other words, even though you typically will have 0 or 1 items on these stack of "current" requests or "current" applications, it is possible that you could have more.</p>\u000a\u000a<p>The example given is where you would have your request return the results of an "internal redirect". Let's say a user requests A, but you want to return to the user B. In most cases, you issue a redirect to the user, and point the user to resource B, meaning the user will run a second request to fetch B. A slightly different way of handling this would be to do an internal redirect, which means that while processing A, Flask will make a new request to itself for resource B, and use the results of this second request as the results of the user's original request.</p>\u000a\u000a<blockquote>\u000a  <p>Are these two separate stacks, or are they both part of one stack?</p>\u000a</blockquote>\u000a\u000a<p>They are <a href="https://github.com/mitsuhiko/flask/blob/41b5d77e29e6158f7a67e9f9872efb323f1be18f/flask/globals.py#L55-L57" rel="noreferrer">two separate stacks</a>. However, this is an implementation detail. What's more important is not so much that there is a stack, but the fact that at any time you can get the "current" app or request (top of the stack).</p>\u000a\u000a<blockquote>\u000a  <p>Is the request context pushed onto a stack, or is it a stack itself?</p>\u000a</blockquote>\u000a\u000a<p>A "request context" is one item of the "request context stack". Similarly with the "app context" and "app context stack".</p>\u000a\u000a<blockquote>\u000a  <p>Am I able to push/pop multiple contexts on top of eachother? If so,\u000a  why would I want to do that?</p>\u000a</blockquote>\u000a\u000a<p>In a Flask application, you typically would not do this. One example of where you might want to is for an internal redirect (described above). Even in that case, however, you would probably end up having Flask handle a new request, and so Flask would do all of the pushing/popping for you.</p>\u000a\u000a<p>However, there are some cases where you'd want to manipulate the stack yourself.</p>\u000a\u000a<h2>Running code outside of a request</h2>\u000a\u000a<p>One typical problem people have is that they use the Flask-SQLAlchemy extension to set up a SQL database and model definition using code something like what is shown below...</p>\u000a\u000a<pre><code>app = Flask(__name__)\u000adb = SQLAlchemy() # Initialize the Flask-SQLAlchemy extension object\u000adb.init_app(app)\u000a</code></pre>\u000a\u000a<p>Then they use the <code>app</code> and <code>db</code> values in a script that should be run from the shell. For example, a "setup_tables.py" script...</p>\u000a\u000a<pre><code>from myapp import app, db\u000a\u000a# Set up models\u000adb.create_all()\u000a</code></pre>\u000a\u000a<p>In this case, the Flask-SQLAlchemy extension knows about the <code>app</code> application, but during <code>create_all()</code> it will throw an error complaining about there not being an application context. This error is justified; you never told Flask what application it should be dealing with when running the <code>create_all</code> method.</p>\u000a\u000a<p>You might be wondering why you don't end up needing this <code>with app.app_context()</code> call when you run similar functions in your views. The reason is that Flask already handles the management of the application context for you when it is handling actual web requests. The problem really only comes up outside of these view functions (or other such callbacks), such as when using your models in a one-off script.</p>\u000a\u000a<p>The resolution is to push the application context yourself, which can be done by doing...</p>\u000a\u000a<pre><code>from myapp import app, db\u000a\u000a# Set up models\u000awith app.app_context():\u000a    db.create_all()\u000a</code></pre>\u000a\u000a<p>This will push a new application context (using the application of <code>app</code>, remember there could be more than one application).</p>\u000a\u000a<h2>Testing</h2>\u000a\u000a<p>Another case where you would want to manipulate the stack is for testing. You could create a unit test that handles a request and you check the results:</p>\u000a\u000a<pre><code>import unittest\u000afrom flask import request\u000a\u000aclass MyTest(unittest.TestCase):\u000a    def test_thing(self):\u000a        with app.test_request_context('/?next=http://example.com/') as ctx:\u000a            # You can now view attributes on request context stack by using `request`.\u000a\u000a        # Now the request context stack is empty\u000a</code></pre>\u000a
p711
sVquestion_id
p712
I20036520
sVlast_activity_date
p713
I1430777955
sVcreation_date
p714
I1384757516
sVscore
p715
I136
sVowner
p716
(dp717
Vuser_id
p718
I272520
sVprofile_image
p719
Vhttps://i.stack.imgur.com/SZ2YT.jpg?s=128&g=1
p720
sVuser_type
p721
Vregistered
p722
sVreputation
p723
I20810
sVlink
p724
Vhttp://stackoverflow.com/users/272520/mark-hildreth
p725
sVaccept_rate
p726
I86
sVdisplay_name
p727
VMark Hildreth
p728
ssVis_accepted
p729
I01
sVlast_edit_date
p730
I1430777955
sVanswer_id
p731
I20041823
sa(dp732
Vbody
p733
V<p>Formatting in Python is done via the <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting" rel="noreferrer">string formatting (<code>%</code>) operator</a>:</p>\u000a\u000a<pre><code>"%02d:%02d:%02d" % (hours, minutes, seconds)\u000a</code></pre>\u000a\u000a<p>/Edit: There's also <a href="https://docs.python.org/2/library/time.html#time.strftime" rel="noreferrer">strftime</a>.</p>\u000a
p734
sVquestion_id
p735
I22617
sVlast_activity_date
p736
I1430748899
sVcreation_date
p737
I1219417961
sVscore
p738
I109
sVowner
p739
(dp740
Vuser_id
p741
I1968
sVprofile_image
p742
Vhttps://www.gravatar.com/avatar/fdd630f72eef3790bfb4ef38d08c7f85?s=128&d=identicon&r=PG
p743
sVuser_type
p744
Vregistered
p745
sVreputation
p746
I341355
sVlink
p747
Vhttp://stackoverflow.com/users/1968/konrad-rudolph
p748
sVaccept_rate
p749
I84
sVdisplay_name
p750
VKonrad Rudolph
p751
ssVis_accepted
p752
I01
sVlast_edit_date
p753
I1430748899
sVanswer_id
p754
I22624
sa(dp755
Vbody
p756
V<p>I think you are searching for something like <a href="http://docs.python.org/library/argparse.html#mutual-exclusion">mutual exclusion</a> (at least for the second part of your question).\u000aThis way, only foo or bar will be accepted, not both. </p>\u000a\u000a<pre><code>    group = parser.add_mutually_exclusive_group(required=True)\u000a    group.add_argument('--foo',action=.....)\u000a    group.add_argument('--bar',action=.....)\u000a    args = parser.parse_args()\u000a</code></pre>\u000a\u000a<p>And you can indeed solve the first part of the question with Christian Witts's answer.\u000aBy combining both, you should be able to achieve what you want. </p>\u000a\u000a<p>BTW, just found <a href="http://stackoverflow.com/questions/5603364/how-to-code-argparse-combinational-options-in-python">another question</a> referring to the same kind of issue.</p>\u000a\u000a<p>Hope this helps </p>\u000a
p757
sVquestion_id
p758
I11154946
sVlast_activity_date
p759
I1423500065
sVcreation_date
p760
I1340363692
sVscore
p761
I117
sVowner
p762
(dp763
Vuser_id
p764
I282677
sVprofile_image
p765
Vhttps://www.gravatar.com/avatar/ac2b82df3b4cf0697e9df0c0651fc7e7?s=128&d=identicon&r=PG
p766
sVuser_type
p767
Vregistered
p768
sVreputation
p769
I4939
sVlink
p770
Vhttp://stackoverflow.com/users/282677/jlengrand
p771
sVaccept_rate
p772
I88
sVdisplay_name
p773
Vjlengrand
p774
ssVis_accepted
p775
I01
sVlast_edit_date
p776
I1423500065
sVanswer_id
p777
I11155124
sa(dp778
Vbody
p779
V<p>Here's a Python version:</p>\u000a\u000a<pre><code>from math import radians, cos, sin, asin, sqrt\u000a\u000adef haversine(lon1, lat1, lon2, lat2):\u000a    """\u000a    Calculate the great circle distance between two points \u000a    on the earth (specified in decimal degrees)\u000a    """\u000a    # convert decimal degrees to radians \u000a    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\u000a\u000a    # haversine formula \u000a    dlon = lon2 - lon1 \u000a    dlat = lat2 - lat1 \u000a    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\u000a    c = 2 * asin(sqrt(a)) \u000a    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\u000a    return c * r\u000a</code></pre>\u000a
p780
sVquestion_id
p781
I4913349
sVlast_activity_date
p782
I1423488704
sVcreation_date
p783
I1297000028
sVscore
p784
I159
sVowner
p785
(dp786
Vuser_id
p787
I188595
sVprofile_image
p788
Vhttps://i.stack.imgur.com/cAGdr.png?s=128&g=1
p789
sVuser_type
p790
Vregistered
p791
sVreputation
p792
I4552
sVlink
p793
Vhttp://stackoverflow.com/users/188595/michael-dunn
p794
sVaccept_rate
p795
I90
sVdisplay_name
p796
VMichael Dunn
p797
ssVis_accepted
p798
I01
sVlast_edit_date
p799
I1423488704
sVanswer_id
p800
I4913653
sa(dp801
Vbody
p802
V<p>It exists, but it's hard to search for. I think most people call it the "<a href="http://stackoverflow.com/questions/2322355/proper-name-for-python-operator">splat</a>" operator.</p>\u000a\u000a<p>It's in the documentation as "<a href="http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists" rel="noreferrer">Unpacking argument lists</a>".</p>\u000a\u000a<p>You'd use it like this: <code>foo(*values)</code>. There's also one for dictionaries:</p>\u000a\u000a<pre><code>d = {'a': 1, 'b': 2}\u000adef foo(a, b):\u000a    pass\u000afoo(**d)\u000a</code></pre>\u000a
p803
sVquestion_id
p804
I7745952
sVlast_activity_date
p805
I1422727859
sVcreation_date
p806
I1318450390
sVscore
p807
I91
sVowner
p808
(dp809
Vuser_id
p810
I350351
sVprofile_image
p811
Vhttps://www.gravatar.com/avatar/b1a41bbf4677c8961237c4d147e764d6?s=128&d=identicon&r=PG
p812
sVuser_type
p813
Vregistered
p814
sVreputation
p815
I19403
sVlink
p816
Vhttp://stackoverflow.com/users/350351/daenyth
p817
sVaccept_rate
p818
I85
sVdisplay_name
p819
VDaenyth
p820
ssVis_accepted
p821
I01
sVlast_edit_date
p822
I1422727859
sVanswer_id
p823
I7745986
sa(dp824
Vbody
p825
V<p><code>x = getattr(self, source)</code> will work just perfectly if <code>source</code> names ANY attribute of self, include the <code>other_data</code> in your example.</p>\u000a
p826
sVquestion_id
p827
I1167398
sVlast_activity_date
p828
I1421735960
sVcreation_date
p829
I1248288955
sVscore
p830
I132
sVowner
p831
(dp832
Vuser_id
p833
I95810
sVprofile_image
p834
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p835
sVuser_type
p836
Vregistered
p837
sVreputation
p838
I516089
sVlink
p839
Vhttp://stackoverflow.com/users/95810/alex-martelli
p840
sVaccept_rate
p841
I80
sVdisplay_name
p842
VAlex Martelli
p843
ssVis_accepted
p844
I01
sVlast_edit_date
p845
I1421735960
sVanswer_id
p846
I1167419
sa(dp847
Vbody
p848
V<p><code>key</code> is a function that will be called to transform the collection's items before they are compared. The parameter passed to <code>key</code> must be something that is callable. </p>\u000a\u000a<p>The use of <code>lambda</code> creates an anonymous function (which is callable). In the case of <code>sorted</code> the callable only takes one parameters. Python's <code>lambda</code> is pretty simple. It can only do and return one thing really.</p>\u000a\u000a<p>The syntax of <code>lambda</code> is the word <code>lambda</code> followed by the list of parameter names then a single block of code. The parameter list and code block are delineated by colon. This is similar to other constructs in python as well such as <code>while</code>, <code>for</code>, <code>if</code> and so on. They are all statements that typically have a code block. Lambda is just another instance of a statement with a code block.</p>\u000a\u000a<p>We can compare the use of lambda with that of def to create a function.</p>\u000a\u000a<pre><code>adder_lambda = lambda parameter1,parameter2: parameter1+parameter2\u000adef adder_regular(parameter1, parameter2): return parameter1+parameter2\u000a</code></pre>\u000a\u000a<p>lambda just gives us a way of doing this without assigning a name. Which makes it great for using as a parameter to a function. </p>\u000a\u000a<p><code>variable</code> is used twice here because on the left hand of the colon it is the name of a parameter and on the right hand side it is being used in the code block to compute something.</p>\u000a
p849
sVquestion_id
p850
I8966538
sVlast_activity_date
p851
I1414159576
sVcreation_date
p852
I1327285596
sVscore
p853
I86
sVowner
p854
(dp855
Vuser_id
p856
I63804
sVprofile_image
p857
Vhttps://www.gravatar.com/avatar/696bc92ea0e14f9e62c459e230bf0f61?s=128&d=identicon&r=PG
p858
sVuser_type
p859
Vregistered
p860
sVreputation
p861
I4438
sVlink
p862
Vhttp://stackoverflow.com/users/63804/evan
p863
sVdisplay_name
p864
VEvan
p865
ssVis_accepted
p866
I01
sVlast_edit_date
p867
I1414159576
sVanswer_id
p868
I8966627
sa(dp869
Vbody
p870
V<p>numpy already allows the creation of arrays of all ones or all zeros very easily:</p>\u000a\u000a<p>e.g. <code>np.ones((2, 2))</code> or <code>np.zeros((2, 2))</code></p>\u000a\u000a<p>Since <code>True</code> and <code>False</code> are represented in Python as <code>1</code> and <code>0</code>, respectively, we have only to cast this array as boolean using the optional <code>dtype</code> parameter and we are done.</p>\u000a\u000a<p><code>np.ones((2, 2), dtype=bool)</code></p>\u000a\u000a<p>returns:</p>\u000a\u000a<pre><code>array([[ True,  True],\u000a       [ True,  True]], dtype=bool)\u000a</code></pre>\u000a
p871
sVquestion_id
p872
I21174961
sVlast_activity_date
p873
I1412215753
sVcreation_date
p874
I1389914521
sVscore
p875
I91
sVowner
p876
(dp877
Vuser_id
p878
I1832942
sVprofile_image
p879
Vhttps://i.stack.imgur.com/VeMux.jpg?s=128&g=1
p880
sVuser_type
p881
Vregistered
p882
sVreputation
p883
I3662
sVlink
p884
Vhttp://stackoverflow.com/users/1832942/michael-currie
p885
sVaccept_rate
p886
I77
sVdisplay_name
p887
VMichael Currie
p888
ssVis_accepted
p889
I01
sVlast_edit_date
p890
I1412215753
sVanswer_id
p891
I21174962
sa(dp892
Vbody
p893
V<p>Figured it out...</p>\u000a\u000a<p>You set the 'catch all' logger by referencing it with the empty string: <code>''</code>.</p>\u000a\u000a<p>As an example, in the following setup I have the all log events getting saved to <code>logs/mylog.log</code>, with the exception of <code>django.request</code> log events which will be saved to <code>logs/django_request.log</code>. Because <code>'propagate'</code> is set to <code>False</code> for my <code>django.request</code> logger, the log event will never reach the the 'catch all' logger.</p>\u000a\u000a<pre><code>LOGGING = {\u000a    'version': 1,\u000a    'disable_existing_loggers': True,\u000a    'formatters': {\u000a        'standard': {\u000a            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'\u000a        },\u000a    },\u000a    'handlers': {\u000a        'default': {\u000a            'level':'DEBUG',\u000a            'class':'logging.handlers.RotatingFileHandler',\u000a            'filename': 'logs/mylog.log',\u000a            'maxBytes': 1024*1024*5, # 5 MB\u000a            'backupCount': 5,\u000a            'formatter':'standard',\u000a        },  \u000a        'request_handler': {\u000a            'level':'DEBUG',\u000a            'class':'logging.handlers.RotatingFileHandler',\u000a            'filename': 'logs/django_request.log',\u000a            'maxBytes': 1024*1024*5, # 5 MB\u000a            'backupCount': 5,\u000a            'formatter':'standard',\u000a        },\u000a    },\u000a    'loggers': {\u000a        '': {\u000a            'handlers': ['default'],\u000a            'level': 'DEBUG',\u000a            'propagate': True\u000a        },\u000a        'django.request': {\u000a            'handlers': ['request_handler'],\u000a            'level': 'DEBUG',\u000a            'propagate': False\u000a        },\u000a    }\u000a}\u000a</code></pre>\u000a
p894
sVquestion_id
p895
I5438642
sVlast_activity_date
p896
I1411021740
sVcreation_date
p897
I1301099140
sVscore
p898
I121
sVowner
p899
(dp900
Vuser_id
p901
I273637
sVprofile_image
p902
Vhttps://www.gravatar.com/avatar/89b9c456e8b6945d1e5fd87addf4f739?s=128&d=identicon&r=PG
p903
sVuser_type
p904
Vregistered
p905
sVreputation
p906
I13723
sVlink
p907
Vhttp://stackoverflow.com/users/273637/chris-w
p908
sVaccept_rate
p909
I89
sVdisplay_name
p910
VChris W.
p911
ssVis_accepted
p912
I01
sVlast_edit_date
p913
I1411021740
sVanswer_id
p914
I5439502
sa(dp915
Vbody
p916
V<p>You're modifying the list you're iterating over, which is bound to result in some unintuitive behavior. Instead, make a copy of the list so you don't remove elements from what you're iterating through.</p>\u000a\u000a<pre><code>for char in textlist[:]: #shallow copy of the list\u000a    # etc\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>To clarify the behavior you're seeing, check this out. Put <code>print char, textlist</code> at the beginning of your (original) loop. You'd expect, perhaps, that this would print out your string vertically, alongside the list, but what you'll actually get is this:</p>\u000a\u000a<pre><code>H ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\u000ae ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\u000a  ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # !\u000al ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\u000ao ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\u000ak ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # Problem!!\u000a  ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\u000aW ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\u000ao ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] \u000ad ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\u000as ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\u000a! ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\u000aHy lk Words!\u000a</code></pre>\u000a\u000a<p>So what's going on? The nice <code>for x in y</code> loop in Python is really just syntactic sugar: it still accesses list elements by index. So when you remove elements from the list while iterating over it, you start skipping values (as you can see above). As a result, you never see the second <code>o</code> in <code>"look"</code>; you skip over it because the index has advanced "past" it when you deleted the previous element. Then, when you get to the <code>o</code> in <code>"Words"</code>, you go to remove the first occurrence of <code>'o'</code>, which is the one you skipped before.</p>\u000a\u000a<hr>\u000a\u000a<p>As others have mentioned, list comprehensions are probably an even better (cleaner, clearer) way to do this. Make use of the fact that Python strings are iterable:</p>\u000a\u000a<pre><code>def remove_vowels(text): # function names should start with verbs! :)\u000a    return ''.join(ch for ch in text if ch.lower() not in 'aeiou')\u000a</code></pre>\u000a
p917
sVquestion_id
p918
I17299581
sVlast_activity_date
p919
I1408816195
sVcreation_date
p920
I1372169599
sVscore
p921
I150
sVowner
p922
(dp923
Vuser_id
p924
I2069350
sVprofile_image
p925
Vhttps://i.stack.imgur.com/4EnA0.png?s=128&g=1
p926
sVuser_type
p927
Vregistered
p928
sVreputation
p929
I11574
sVlink
p930
Vhttp://stackoverflow.com/users/2069350/henry-keiter
p931
sVaccept_rate
p932
I50
sVdisplay_name
p933
VHenry Keiter
p934
ssVis_accepted
p935
I01
sVlast_edit_date
p936
I1408816195
sVanswer_id
p937
I17299676
sa(dp938
Vbody
p939
V<pre><code>import os\u000adef get_immediate_subdirectories(a_dir):\u000a    return [name for name in os.listdir(a_dir)\u000a            if os.path.isdir(os.path.join(a_dir, name))]\u000a</code></pre>\u000a
p940
sVquestion_id
p941
I800197
sVlast_activity_date
p942
I1408060071
sVcreation_date
p943
I1240959726
sVscore
p944
I134
sVowner
p945
(dp946
Vuser_id
p947
I21886
sVprofile_image
p948
Vhttps://www.gravatar.com/avatar/38750c50c11e6054c2123073b17b18fc?s=128&d=identicon&r=PG
p949
sVuser_type
p950
Vregistered
p951
sVreputation
p952
I160529
sVlink
p953
Vhttp://stackoverflow.com/users/21886/richiehindle
p954
sVaccept_rate
p955
I87
sVdisplay_name
p956
VRichieHindle
p957
ssVis_accepted
p958
I01
sVlast_edit_date
p959
I1408060071
sVanswer_id
p960
I800201
sa(dp961
Vbody
p962
V<p>If you have pip install and you want to see what packages have been installed with your installer tools you can simply call this:</p>\u000a\u000a<pre><code>pip freeze\u000a</code></pre>\u000a\u000a<p>It will also include version numbers for the installed packages.</p>\u000a\u000a<p><strong>Update</strong></p>\u000a\u000a<p>pip has been updated to also produce the same output as <code>pip freeze</code> by calling:</p>\u000a\u000a<pre><code>pip list\u000a</code></pre>\u000a\u000a<p><strong>Note</strong></p>\u000a\u000a<p>The output from <code>pip list</code> is formatted differently, so if you have some shell script that parses the output (maybe to grab the version number) of <code>freeze</code> and want to change your script to call <code>list</code>, you'll need to change your parsing code.</p>\u000a
p963
sVquestion_id
p964
I12939975
sVlast_activity_date
p965
I1404934109
sVcreation_date
p966
I1350495090
sVscore
p967
I118
sVowner
p968
(dp969
Vuser_id
p970
I179386
sVprofile_image
p971
Vhttps://i.stack.imgur.com/Nsg7j.jpg?s=128&g=1
p972
sVuser_type
p973
Vregistered
p974
sVreputation
p975
I7152
sVlink
p976
Vhttp://stackoverflow.com/users/179386/jlafay
p977
sVaccept_rate
p978
I92
sVdisplay_name
p979
Vjlafay
p980
ssVis_accepted
p981
I01
sVlast_edit_date
p982
I1404934109
sVanswer_id
p983
I12940002
sa(dp984
Vbody
p985
V<pre><code>import xlwt\u000a\u000adef output(filename, sheet, list1, list2, x, y, z):\u000a    book = xlwt.Workbook()\u000a    sh = book.add_sheet(sheet)\u000a\u000a    variables = [x, y, z]\u000a    x_desc = 'Display'\u000a    y_desc = 'Dominance'\u000a    z_desc = 'Test'\u000a    desc = [x_desc, y_desc, z_desc]\u000a\u000a    col1_name = 'Stimulus Time'\u000a    col2_name = 'Reaction Time'\u000a\u000a    #You may need to group the variables together\u000a    #for n, (v_desc, v) in enumerate(zip(desc, variables)):\u000a    for n, v_desc, v in enumerate(zip(desc, variables)):\u000a        sh.write(n, 0, v_desc)\u000a        sh.write(n, 1, v)\u000a\u000a    n+=1\u000a\u000a    sh.write(n, 0, col1_name)\u000a    sh.write(n, 1, col2_name)\u000a\u000a    for m, e1 in enumerate(list1, n+1):\u000a        sh.write(m, 0, e1)\u000a\u000a    for m, e2 in enumerate(list2, n+1):\u000a        sh.write(m, 1, e2)\u000a\u000a    book.save(filename)\u000a</code></pre>\u000a\u000a<p>for more explanation:\u000a    <a href="https://github.com/python-excel" rel="noreferrer">https://github.com/python-excel</a></p>\u000a
p986
sVquestion_id
p987
I13437727
sVlast_activity_date
p988
I1403646144
sVcreation_date
p989
I1353216763
sVscore
p990
I55
sVowner
p991
(dp992
Vuser_id
p993
I1684670
sVprofile_image
p994
Vhttps://www.gravatar.com/avatar/0de21f6ec42b67830c9308664e0abf72?s=128&d=identicon&r=PG
p995
sVuser_type
p996
Vregistered
p997
sVreputation
p998
I5496
sVlink
p999
Vhttp://stackoverflow.com/users/1684670/thkang
p1000
sVaccept_rate
p1001
I75
sVdisplay_name
p1002
Vthkang
p1003
ssVis_accepted
p1004
I01
sVlast_edit_date
p1005
I1403646144
sVanswer_id
p1006
I13437772
sa(dp1007
Vbody
p1008
V<p>The problem is that the first argument passed to class methods in python is always a copy of the class instance on which the method is called, typically labelled <code>self</code>. If the class is declared thus:</p>\u000a\u000a<pre><code>class foo(object):\u000a  def foodo(self, thing=None, thong='not underwear'):\u000a    print thing if thing else "nothing" \u000a    print 'a thong is',thong\u000a</code></pre>\u000a\u000a<p>it behaves as expected. </p>\u000a\u000a<p><strong>Explanation:</strong></p>\u000a\u000a<p>Without <code>self</code> as the first parameter, when <code>myfoo.foodo(thing="something")</code> is executed, the <code>foodo</code> method is called with arguments <code>(myfoo, thing="something")</code>. The instance <code>myfoo</code> is then assigned to <code>thing</code> (since <code>thing</code> is the first declared parameter), but python also attempts to assign <code>"something"</code> to <code>thing</code>, hence the Exception.</p>\u000a\u000a<p>To demonstrate, try running this with the original code:</p>\u000a\u000a<pre><code>myfoo.foodo("something")\u000aprint\u000aprint myfoo\u000a</code></pre>\u000a\u000a<p>You'll output like:</p>\u000a\u000a<pre><code>&lt;__main__.foo object at 0x321c290&gt;\u000aa thong is something\u000a\u000a&lt;__main__.foo object at 0x321c290&gt;\u000a</code></pre>\u000a\u000a<p>You can see that 'thing' has been assigned a reference to the instance 'myfoo' of the class 'foo'. <a href="http://docs.python.org/2/tutorial/controlflow.html#keyword-arguments">This section</a> of the docs explains how function arguments work a bit more.</p>\u000a
p1009
sVquestion_id
p1010
I18950054
sVlast_activity_date
p1011
I1398821678
sVcreation_date
p1012
I1379894925
sVscore
p1013
I99
sVowner
p1014
(dp1015
Vuser_id
p1016
I420867
sVprofile_image
p1017
Vhttps://i.stack.imgur.com/d3eFg.jpg?s=128&g=1
p1018
sVuser_type
p1019
Vregistered
p1020
sVreputation
p1021
I5525
sVlink
p1022
Vhttp://stackoverflow.com/users/420867/drevicko
p1023
sVaccept_rate
p1024
I67
sVdisplay_name
p1025
Vdrevicko
p1026
ssVis_accepted
p1027
I01
sVlast_edit_date
p1028
I1398821678
sVanswer_id
p1029
I18950055
sa(dp1030
Vbody
p1031
V<p>You can apply dirname repeatedly to climb higher: <code>dirname(dirname(file))</code>. This can only go as far as the root package, however. If this is a problem, use <code>os.path.abspath</code>: <code>dirname(dirname(abspath(file)))</code>.</p>\u000a
p1032
sVquestion_id
p1033
I2817264
sVlast_activity_date
p1034
I1391217060
sVcreation_date
p1035
I1273654996
sVscore
p1036
I98
sVowner
p1037
(dp1038
Vuser_id
p1039
I9990
sVprofile_image
p1040
Vhttps://www.gravatar.com/avatar/2ef86667e42fe07c2bab670357a57fc5?s=128&d=identicon&r=PG
p1041
sVuser_type
p1042
Vregistered
p1043
sVreputation
p1044
I125205
sVlink
p1045
Vhttp://stackoverflow.com/users/9990/marcelo-cantos
p1046
sVaccept_rate
p1047
I81
sVdisplay_name
p1048
VMarcelo Cantos
p1049
ssVis_accepted
p1050
I01
sVlast_edit_date
p1051
I1391217060
sVanswer_id
p1052
I2817302
sa(dp1053
Vbody
p1054
V<p>I think the easiest way to do this would be to set the columns to the top level:</p>\u000a\u000a<pre><code>df.columns = df.columns.get_level_values(0)\u000a</code></pre>\u000a\u000a<p><em>Note: if the to level has a name you can also access it by this, rather than 0.</em></p>\u000a\u000a<p>.</p>\u000a\u000a<p>If you want to combine/<a href="http://docs.python.org/2/library/stdtypes.html#str.join"><code>join</code></a> your MultiIndex into one Index <em>(assuming you have just string entries in your columns)</em> you could:</p>\u000a\u000a<pre><code>df.columns = [' '.join(col).strip() for col in df.columns.values]\u000a</code></pre>\u000a\u000a<p><em>Note: we must <a href="http://docs.python.org/2/library/stdtypes.html#str.strip"><code>strip</code></a> the whitespace for when there is no second index.</em></p>\u000a\u000a<pre><code>In [11]: [' '.join(col).strip() for col in df.columns.values]\u000aOut[11]: \u000a['USAF',\u000a 'WBAN',\u000a 'day',\u000a 'month',\u000a 's_CD sum',\u000a 's_CL sum',\u000a 's_CNT sum',\u000a 's_PC sum',\u000a 'tempf amax',\u000a 'tempf amin',\u000a 'year']\u000a</code></pre>\u000a
p1055
sVquestion_id
p1056
I14507794
sVlast_activity_date
p1057
I1389987377
sVcreation_date
p1058
I1359052630
sVscore
p1059
I119
sVowner
p1060
(dp1061
Vuser_id
p1062
I1240268
sVprofile_image
p1063
Vhttps://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1
p1064
sVuser_type
p1065
Vregistered
p1066
sVreputation
p1067
I108899
sVlink
p1068
Vhttp://stackoverflow.com/users/1240268/andy-hayden
p1069
sVaccept_rate
p1070
I90
sVdisplay_name
p1071
VAndy Hayden
p1072
ssVis_accepted
p1073
I01
sVlast_edit_date
p1074
I1389987377
sVanswer_id
p1075
I14508355
sa(dp1076
Vbody
p1077
V<p>AFAIK, <a href="http://www.ailab.si/orange/" rel="noreferrer">Orange</a> may be the best choice at the moment.<br>\u000a<a href="http://pyml.sourceforge.net/" rel="noreferrer">PyML</a> is good too.<br>\u000a<a href="http://github.com/pymc-devs/pymc" rel="noreferrer">PyMC</a> for Bayesian estimation.<br>\u000aand, there is a Book "Machine Learning: An Algorithmic Perspective", <a href="http://www-ist.massey.ac.nz/smarsland/MLbook.html" rel="noreferrer">There are lots of Python code examples in the book</a>, maybe it is worth reading.<br>\u000aand there is a blog post: <a href="http://amundblog.blogspot.com/2008/05/pragmatic-classification-with-python.html" rel="noreferrer">Pragmatic Classification with Python</a>.<br>\u000aJust my two cents.</p>\u000a
p1078
sVquestion_id
p1079
I1289920
sVlast_activity_date
p1080
I1386975397
sVcreation_date
p1081
I1250550267
sVscore
p1082
I43
sVowner
p1083
(dp1084
Vuser_id
p1085
I122851
sVprofile_image
p1086
Vhttps://www.gravatar.com/avatar/f78d901dc19d54f6d05abf17e3e2c462?s=128&d=identicon&r=PG
p1087
sVuser_type
p1088
Vregistered
p1089
sVreputation
p1090
I5455
sVlink
p1091
Vhttp://stackoverflow.com/users/122851/sunqiang
p1092
sVdisplay_name
p1093
Vsunqiang
p1094
ssVis_accepted
p1095
I01
sVlast_edit_date
p1096
I1386975397
sVanswer_id
p1097
I1290968
sa(dp1098
Vbody
p1099
V<p>You can use the <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.DateField.auto_now" rel="noreferrer"><code>auto_now</code></a> and <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.DateField.auto_now_add" rel="noreferrer"><code>auto_now_add</code></a> options for <code>updated_at</code> and <code>created_at</code> respectively.</p>\u000a\u000a<pre><code>class MyModel(models.Model):\u000a    created_at = models.DateTimeField(auto_now_add=True)\u000a    updated_at = models.DateTimeField(auto_now=True)\u000a</code></pre>\u000a
p1100
sVquestion_id
p1101
I3429878
sVlast_activity_date
p1102
I1384114202
sVcreation_date
p1103
I1281173629
sVscore
p1104
I155
sVowner
p1105
(dp1106
Vuser_id
p1107
I140185
sVprofile_image
p1108
Vhttps://www.gravatar.com/avatar/3d8fead2a83893fb2f03eec42ece2de3?s=128&d=identicon&r=PG
p1109
sVuser_type
p1110
Vregistered
p1111
sVreputation
p1112
I38497
sVlink
p1113
Vhttp://stackoverflow.com/users/140185/manoj-govindan
p1114
sVaccept_rate
p1115
I93
sVdisplay_name
p1116
VManoj Govindan
p1117
ssVis_accepted
p1118
I01
sVlast_edit_date
p1119
I1384114202
sVanswer_id
p1120
I3429915
sa(dp1121
Vbody
p1122
V<p>If you have a custom template and view you may  exclude the field and use <code>{{ modelform.instance.field }}</code> to get the value.</p>\u000a\u000a<p>also you may prefer to use in the view:</p>\u000a\u000a<pre><code>form.fields['field_name'].widget = forms.HiddenInput()\u000a</code></pre>\u000a\u000a<p>but I'm not sure it will protect save method on post.</p>\u000a\u000a<p>Hope it helps.</p>\u000a
p1123
sVquestion_id
p1124
I6862250
sVlast_activity_date
p1125
I1381422570
sVcreation_date
p1126
I1311870798
sVscore
p1127
I101
sVowner
p1128
(dp1129
Vuser_id
p1130
I267364
sVprofile_image
p1131
Vhttps://www.gravatar.com/avatar/be71a93256497bd3b3f043e89b7aac13?s=128&d=identicon&r=PG
p1132
sVuser_type
p1133
Vregistered
p1134
sVreputation
p1135
I3092
sVlink
p1136
Vhttp://stackoverflow.com/users/267364/christophe31
p1137
sVaccept_rate
p1138
I100
sVdisplay_name
p1139
Vchristophe31
p1140
ssVis_accepted
p1141
I01
sVlast_edit_date
p1142
I1381422570
sVanswer_id
p1143
I6862413
sa(dp1144
Vbody
p1145
V<p>Decode it.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; b'a string'.decode('ascii')\u000a'a string'\u000a</code></pre>\u000a\u000a<p>To get bytes from string, encode it.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 'a string'.encode('ascii')\u000ab'a string'\u000a</code></pre>\u000a
p1146
sVquestion_id
p1147
I17615414
sVlast_activity_date
p1148
I1373633743
sVcreation_date
p1149
I1373633743
sVscore
p1150
I102
sVowner
p1151
(dp1152
Vuser_id
p1153
I2225682
sVprofile_image
p1154
Vhttps://www.gravatar.com/avatar/4958f4712d94ab82fe55fa471308e4b5?s=128&d=identicon&r=PG
p1155
sVuser_type
p1156
Vregistered
p1157
sVreputation
p1158
I195484
sVlink
p1159
Vhttp://stackoverflow.com/users/2225682/falsetru
p1160
sVdisplay_name
p1161
Vfalsetru
p1162
ssVis_accepted
p1163
I01
sVanswer_id
p1164
I17615424
sa(dp1165
Vbody
p1166
V<p>Check <a href="https://docs.djangoproject.com/en/dev/topics/i18n/timezones/" rel="noreferrer">the thorough document</a> for detail info.</p>\u000a\u000a<p>Normally, use <code>django.utils.timezone.now</code> to make an offset-aware current datetime</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from django.utils import timezone\u000a&gt;&gt;&gt; timezone.now()\u000adatetime.datetime(2012, 5, 18, 13, 0, 49, 803031, tzinfo=&lt;UTC&gt;)\u000a</code></pre>\u000a\u000a<p>And <code>django.utils.timezone.make_aware</code> to make an offset-aware datetime</p>\u000a\u000a<pre><code>&gt;&gt;&gt; timezone.make_aware(datetime.datetime.now(), timezone.get_default_timezone())\u000adatetime.datetime(2012, 5, 18, 21, 5, 53, 266396, tzinfo=&lt;DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD&gt;)\u000a</code></pre>\u000a\u000a<p>You could then compare both offset-aware datetimes w/o trouble. </p>\u000a\u000a<p>Furthermore, you could convert offset-awared datetime to offset-naive datetime by stripping off timezone info, then it could be compared w/ normal <code>datetime.datetime.now()</code>, under utc.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; t = timezone.now() # offset-awared datetime\u000a&gt;&gt;&gt; t.astimezone(timezone.utc).replace(tzinfo=None)\u000adatetime.datetime(2012, 5, 18, 13, 11, 30, 705324)\u000a</code></pre>\u000a\u000a<p><code>USE_TZ</code> is <code>True</code> 'by default' (actually it's <code>False</code> by default, but the <code>settings.py</code> file generated by <code>django-admin.py startproject</code> set it to <code>True</code>), then if your DB supports timezone-aware times, values of time-related model fields would be timezone-aware. you could disable it by setting <code>USE_TZ=False</code>(or simply remove <code>USE_TZ=True</code>) in settings. </p>\u000a
p1167
sVquestion_id
p1168
I10652819
sVlast_activity_date
p1169
I1372050398
sVcreation_date
p1170
I1337346069
sVscore
p1171
I152
sVowner
p1172
(dp1173
Vuser_id
p1174
I165603
sVprofile_image
p1175
Vhttps://www.gravatar.com/avatar/dd2c3c5b43f486e0c2d03e06c113aa71?s=128&d=identicon&r=PG
p1176
sVuser_type
p1177
Vregistered
p1178
sVreputation
p1179
I17749
sVlink
p1180
Vhttp://stackoverflow.com/users/165603/okm
p1181
sVdisplay_name
p1182
Vokm
p1183
ssVis_accepted
p1184
I01
sVlast_edit_date
p1185
I1372050398
sVanswer_id
p1186
I10653144
sa(dp1187
Vbody
p1188
V<p>if you want to compute differences between two known dates, use <code>total_seconds</code> like this:</p>\u000a\u000a<pre><code>import datetime as dt\u000a\u000aa = dt.datetime(2013,12,30,23,59,59)\u000ab = dt.datetime(2013,12,31,23,59,59)\u000a\u000a(b-a).total_seconds()\u000a</code></pre>\u000a\u000a<p>86400.0</p>\u000a\u000a<pre><code>#note that seconds doesn't give you what you want:\u000a(b-a).seconds\u000a</code></pre>\u000a\u000a<p>0</p>\u000a
p1189
sVquestion_id
p1190
I4362491
sVlast_activity_date
p1191
I1371645326
sVcreation_date
p1192
I1371645326
sVscore
p1193
I216
sVowner
p1194
(dp1195
Vuser_id
p1196
I2005869
sVprofile_image
p1197
Vhttps://www.gravatar.com/avatar/1353059e4a8c3d6d0d009edda168a77e?s=128&d=identicon&r=PG
p1198
sVuser_type
p1199
Vregistered
p1200
sVreputation
p1201
I5091
sVlink
p1202
Vhttp://stackoverflow.com/users/2005869/rich-signell
p1203
sVaccept_rate
p1204
I89
sVdisplay_name
p1205
VRich Signell
p1206
ssVis_accepted
p1207
I01
sVanswer_id
p1208
I17191361
sa(dp1209
Vbody
p1210
V<p>You can access the namespace's dictionary with <a href="http://docs.python.org/2.7/library/functions.html#vars" rel="noreferrer"><em>vars()</em></a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import argparse\u000a&gt;&gt;&gt; args = argparse.Namespace()\u000a&gt;&gt;&gt; args.foo = 1\u000a&gt;&gt;&gt; args.bar = [1,2,3]\u000a&gt;&gt;&gt; d = vars(args)\u000a&gt;&gt;&gt; d\u000a{'foo': 1, 'bar': [1, 2, 3]}\u000a</code></pre>\u000a\u000a<p>You can modify the dictionary directly if you wish:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; d['baz'] = 'store me'\u000a&gt;&gt;&gt; args.baz\u000a'store me'\u000a</code></pre>\u000a\u000a<p>Yes, it is okay to access the __dict__ attribute.  It is a well-defined, tested, and guaranteed behavior.</p>\u000a
p1211
sVquestion_id
p1212
I16878315
sVlast_activity_date
p1213
I1370130632
sVcreation_date
p1214
I1370130129
sVscore
p1215
I110
sVowner
p1216
(dp1217
Vuser_id
p1218
I1001643
sVprofile_image
p1219
Vhttps://www.gravatar.com/avatar/60cac87fb9e2b5689242622999656cb0?s=128&d=identicon&r=PG
p1220
sVuser_type
p1221
Vregistered
p1222
sVreputation
p1223
I94640
sVlink
p1224
Vhttp://stackoverflow.com/users/1001643/raymond-hettinger
p1225
sVaccept_rate
p1226
I75
sVdisplay_name
p1227
VRaymond Hettinger
p1228
ssVis_accepted
p1229
I01
sVlast_edit_date
p1230
I1370130632
sVanswer_id
p1231
I16878364
sa(dp1232
Vbody
p1233
V<p>Let's say you're opening the file with a <code>with</code> statement like you should be. Then you'd do something like this to read from your file:</p>\u000a\u000a<pre><code>with open('somefile.txt', 'w+') as f:\u000a    # Note that f has now been truncated to 0 bytes, so you'll only\u000a    # be able to read data that you wrote earlier...\u000a    f.write('somedata\u005cn')\u000a    f.seek(0)  # Important: return to the top of the file before reading, otherwise you'll just read an empty string\u000a    data = f.read() # Returns 'somedata\u005cn'\u000a</code></pre>\u000a\u000a<p>Note the <code>f.seek(0)</code> -- if you forget this, the <code>f.read()</code> call will try to read from the end of the file, and will return an empty string.</p>\u000a
p1234
sVquestion_id
p1235
I16208206
sVlast_activity_date
p1236
I1366873047
sVcreation_date
p1237
I1366873047
sVscore
p1238
I49
sVowner
p1239
(dp1240
Vuser_id
p1241
I2314532
sVprofile_image
p1242
Vhttps://www.gravatar.com/avatar/90ade367b50c6f2a4796a03c82b1a4a1?s=128&d=identicon&r=PG
p1243
sVuser_type
p1244
Vregistered
p1245
sVreputation
p1246
I11490
sVlink
p1247
Vhttp://stackoverflow.com/users/2314532/rmunn
p1248
sVaccept_rate
p1249
I84
sVdisplay_name
p1250
Vrmunn
p1251
ssVis_accepted
p1252
I01
sVanswer_id
p1253
I16208298
sa(dp1254
Vbody
p1255
V<p>Because of octal arithmetic, 013 is actually the integer 11.  </p>\u000a\u000a<pre><code>&gt;&gt;&gt; 013\u000a11\u000a</code></pre>\u000a\u000a<p>With a leading zero, <code>013</code> is interpreted as a base-8 number and 1*8<sup>1</sup> + 3*8<sup>0</sup> = 11.  </p>\u000a\u000a<p>Note: this behaviour was <a href="http://docs.python.org/release/3.0.1/whatsnew/2.6.html#pep-3127-integer-literal-support-and-syntax" rel="noreferrer">changed in python 3</a>.  Here is a particularly appropriate quote from <a href="http://www.python.org/dev/peps/pep-3127/" rel="noreferrer">PEP 3127</a></p>\u000a\u000a<blockquote>\u000a  <p>The default octal representation of integers is silently confusing to\u000a  people unfamiliar with C-like languages. It is extremely easy to\u000a  inadvertently create an integer object with the wrong value, because\u000a  '013' means 'decimal 11', not 'decimal 13', to the Python language\u000a  itself, which is not the meaning that most humans would assign to this\u000a  literal.</p>\u000a</blockquote>\u000a
p1256
sVquestion_id
p1257
I15894182
sVlast_activity_date
p1258
I1365652420
sVcreation_date
p1259
I1365486461
sVscore
p1260
I137
sVowner
p1261
(dp1262
Vuser_id
p1263
I674039
sVprofile_image
p1264
Vhttps://i.stack.imgur.com/leoFi.gif?s=128&g=1
p1265
sVuser_type
p1266
Vregistered
p1267
sVreputation
p1268
I97604
sVlink
p1269
Vhttp://stackoverflow.com/users/674039/wim
p1270
sVaccept_rate
p1271
I95
sVdisplay_name
p1272
Vwim
p1273
ssVis_accepted
p1274
I01
sVlast_edit_date
p1275
I1365652420
sVanswer_id
p1276
I15894199
sa(dp1277
Vbody
p1278
V<p>You should learn a bit of the OO interface to matplotlib, not just the state machine interface.  Almost all of the <code>plt.*</code> function are thin wrappers that basically do <code>gca().*</code>.</p>\u000a\u000a<p><code>plt.subplot</code> (<a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot">doc</a>) return an <code>axes</code> (<a href="http://matplotlib.org/api/axes_api.html">doc</a>) object.  Once you have a referance to the axes object you can plot directly to it, change it's limits, etc.</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000a\u000aax1 = plt.subplot(131)\u000aax1.scatter([1, 2], [3, 4])\u000aax1.set_xlim([0, 5])\u000aax1.set_ylim([0, 5])\u000a\u000a\u000aax2 = plt.subplot(132)\u000aax2.scatter([1, 2],[3, 4])\u000aax2.set_xlim([0, 5])\u000aax2.set_ylim([0, 5])\u000a</code></pre>\u000a\u000a<p>and so on for as many axes as you want.</p>\u000a\u000a<p>or better, wrap it all up in a loop:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000a\u000aDATA_x = ([1, 2],\u000a          [2, 3],\u000a          [3, 4])\u000a\u000aDATA_y = DATA_x[::-1]\u000a\u000aXLIMS = [[0, 10]] * 3\u000aYLIMS = [[0, 10]] * 3\u000a\u000afor j, (x, y, xlim, ylim) in enumerate(zip(DATA_x, DATA_y, XLIMS, YLIMS)):\u000a    ax = plt.subplot(1, 3, j + 1)\u000a    ax.scatter(x, y)\u000a    ax.set_xlim(xlim)\u000a    ax.set_ylim(ylim)\u000a</code></pre>\u000a
p1279
sVquestion_id
p1280
I15858192
sVlast_activity_date
p1281
I1365309149
sVcreation_date
p1282
I1365302017
sVscore
p1283
I111
sVowner
p1284
(dp1285
Vuser_id
p1286
I380231
sVprofile_image
p1287
Vhttps://www.gravatar.com/avatar/8744048060e5931c500d3c9d1ecb997e?s=128&d=identicon&r=PG
p1288
sVuser_type
p1289
Vregistered
p1290
sVreputation
p1291
I41379
sVlink
p1292
Vhttp://stackoverflow.com/users/380231/tacaswell
p1293
sVaccept_rate
p1294
I100
sVdisplay_name
p1295
Vtacaswell
p1296
ssVis_accepted
p1297
I01
sVlast_edit_date
p1298
I1365309149
sVanswer_id
p1299
I15858264
sa(dp1300
Vbody
p1301
V<p>Note that the <code>%</code> syntax for formatting strings is becoming outdated. If your version of Python supports it, you should write:</p>\u000a\u000a<pre><code>instr = "'{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}'".format(softname, procversion, int(percent), exe, description, company, procurl)\u000a</code></pre>\u000a\u000a<p>This also fixes the error that you happened to have.</p>\u000a
p1302
sVquestion_id
p1303
I11146190
sVlast_activity_date
p1304
I1340351345
sVcreation_date
p1305
I1340310978
sVscore
p1306
I91
sVowner
p1307
(dp1308
Vuser_id
p1309
I1267329
sVprofile_image
p1310
Vhttps://www.gravatar.com/avatar/f943c14b945cadc0ee0afa6ef70d2103?s=128&d=identicon&r=PG
p1311
sVuser_type
p1312
Vregistered
p1313
sVreputation
p1314
I59061
sVlink
p1315
Vhttp://stackoverflow.com/users/1267329/simeon-visser
p1316
sVdisplay_name
p1317
VSimeon Visser
p1318
ssVis_accepted
p1319
I01
sVlast_edit_date
p1320
I1340351345
sVanswer_id
p1321
I11146329
sa(dp1322
Vbody
p1323
V<p>Classifiers are just objects that can be pickled and dumped like any other. To continue your example:</p>\u000a\u000a<pre><code>import cPickle\u000a# save the classifier\u000awith open('my_dumped_classifier.pkl', 'wb') as fid:\u000a    cPickle.dump(gnb, fid)    \u000a\u000a# load it again\u000awith open('my_dumped_classifier.pkl', 'rb') as fid:\u000a    gnb_loaded = cPickle.load(fid)\u000a</code></pre>\u000a
p1324
sVquestion_id
p1325
I10592605
sVlast_activity_date
p1326
I1337046110
sVcreation_date
p1327
I1337046110
sVscore
p1328
I86
sVowner
p1329
(dp1330
Vuser_id
p1331
I1365759
sVprofile_image
p1332
Vhttps://www.gravatar.com/avatar/70f83f282088b08f6a84c522e3bec71c?s=128&d=identicon&r=PG
p1333
sVuser_type
p1334
Vregistered
p1335
sVreputation
p1336
I2001
sVlink
p1337
Vhttp://stackoverflow.com/users/1365759/mwv
p1338
sVdisplay_name
p1339
Vmwv
p1340
ssVis_accepted
p1341
I01
sVanswer_id
p1342
I10593176
sa(dp1343
Vbody
p1344
V<p>It is a unary operator (taking a single argument) that is borrowed from C, where all data types are just different ways of interpreting bytes.  It is the "invert" or "complement" operation, in which all the bits of the input data are reversed.</p>\u000a\u000a<p>In Python, for integers, the bits of the <a href="http://en.wikipedia.org/wiki/Two%27s_complement" rel="noreferrer">twos-complement representation</a> of the integer are reversed (as in <code>b &lt;- b XOR 1</code> for each individual bit), and the result interpreted again as a twos-complement integer.  So for integers, <code>~x</code> is equivalent to <code>(-x) - 1</code>.</p>\u000a\u000a<p>The reified form of the <code>~</code> operator is provided as <code>operator.invert</code>.  To support this operator in your own class, give it an <code>__invert__(self)</code> method.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import operator\u000a&gt;&gt;&gt; class Foo:\u000a...   def __invert__(self):\u000a...     print 'invert'\u000a...\u000a&gt;&gt;&gt; x = Foo()\u000a&gt;&gt;&gt; operator.invert(x)\u000ainvert\u000a&gt;&gt;&gt; ~x\u000ainvert\u000a</code></pre>\u000a\u000a<p>Any class in which it is meaningful to have a "complement" or "inverse" of an instance that is also an instance of the same class is a possible candidate for the invert operator.  However, operator overloading can lead to confusion if misused, so be sure that it really makes sense to do so before supplying an <code>__invert__</code> method to your class.  (Note that byte-strings [ex: <code>'\u005cxff'</code>] do not support this operator, even though it is meaningful to invert all the bits of a byte-string.)</p>\u000a
p1345
sVquestion_id
p1346
I8305199
sVlast_activity_date
p1347
I1335221717
sVcreation_date
p1348
I1322535762
sVscore
p1349
I85
sVowner
p1350
(dp1351
Vuser_id
p1352
I729627
sVprofile_image
p1353
Vhttps://www.gravatar.com/avatar/dcec152702fcef48c5550c3276632757?s=128&d=identicon&r=PG
p1354
sVuser_type
p1355
Vregistered
p1356
sVreputation
p1357
I9350
sVlink
p1358
Vhttp://stackoverflow.com/users/729627/wberry
p1359
sVaccept_rate
p1360
I100
sVdisplay_name
p1361
Vwberry
p1362
ssVis_accepted
p1363
I01
sVlast_edit_date
p1364
I1335221717
sVanswer_id
p1365
I8305291
sa(dp1366
Vbody
p1367
V<p>Less than or equal:</p>\u000a\u000a<pre><code>User.objects.filter(userprofile__level__lte=0)\u000a</code></pre>\u000a\u000a<p>Greater than or equal:</p>\u000a\u000a<pre><code>User.objects.filter(userprofile__level__gte=0)\u000a</code></pre>\u000a\u000a<p>Likewise, <code>lt</code> for less than and <code>gt</code> for greater than. You can find them all <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/" rel="noreferrer">in the documentation</a>.</p>\u000a
p1368
sVquestion_id
p1369
I10040143
sVlast_activity_date
p1370
I1333695123
sVcreation_date
p1371
I1333695123
sVscore
p1372
I141
sVowner
p1373
(dp1374
Vuser_id
p1375
I55562
sVprofile_image
p1376
Vhttps://www.gravatar.com/avatar/f91ec1ab77d5686f50037ee176ee1d84?s=128&d=identicon&r=PG
p1377
sVuser_type
p1378
Vregistered
p1379
sVreputation
p1380
I36576
sVlink
p1381
Vhttp://stackoverflow.com/users/55562/lakshman-prasad
p1382
sVaccept_rate
p1383
I88
sVdisplay_name
p1384
VLakshman Prasad
p1385
ssVis_accepted
p1386
I01
sVanswer_id
p1387
I10040165
sa(dp1388
Vbody
p1389
V<pre><code>"\u4f60\u597d".encode('utf-8')\u000a</code></pre>\u000a\u000a<p><code>encode</code> converts a unicode object to a <code>string</code> object. But here you have invoked it on a <code>string</code> object (because you don't have the u). So python has to convert the <code>string</code> to a <code>unicode</code> object first. So it does the equivalent of</p>\u000a\u000a<pre><code>"\u4f60\u597d".decode().encode('utf-8')\u000a</code></pre>\u000a\u000a<p>But the decode fails because the string isn't valid ascii. That's why you get a complaint about not being able to decode.</p>\u000a
p1390
sVquestion_id
p1391
I9644099
sVlast_activity_date
p1392
I1331357691
sVcreation_date
p1393
I1331357691
sVscore
p1394
I122
sVowner
p1395
(dp1396
Vuser_id
p1397
I322806
sVprofile_image
p1398
Vhttps://i.stack.imgur.com/TDQGm.jpg?s=128&g=1
p1399
sVuser_type
p1400
Vregistered
p1401
sVreputation
p1402
I27964
sVlink
p1403
Vhttp://stackoverflow.com/users/322806/winston-ewert
p1404
sVaccept_rate
p1405
I43
sVdisplay_name
p1406
VWinston Ewert
p1407
ssVis_accepted
p1408
I01
sVanswer_id
p1409
I9644206
sa(dp1410
Vbody
p1411
V<pre><code>z = (set(("a", "b", "c")) - set((x, y))).pop()\u000a</code></pre>\u000a\u000a<p>I am assuming that one of the three cases in your code holds.  If this is the case, the set <code>set(("a", "b", "c")) - set((x, y))</code> will consist of a single element, which is returned by <code>pop()</code>.</p>\u000a\u000a<p><strong>Edit:</strong> As suggested by Raymond Hettinger in the comments, you could also use tuple unpacking to extract the single element from the set:</p>\u000a\u000a<pre><code>z, = set(("a", "b", "c")) - set((x, y))\u000a</code></pre>\u000a
p1412
sVquestion_id
p1413
I8792440
sVlast_activity_date
p1414
I1326141408
sVcreation_date
p1415
I1326129819
sVscore
p1416
I62
sVowner
p1417
(dp1418
Vuser_id
p1419
I279627
sVprofile_image
p1420
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1421
sVuser_type
p1422
Vregistered
p1423
sVreputation
p1424
I252330
sVlink
p1425
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1426
sVaccept_rate
p1427
I78
sVdisplay_name
p1428
VSven Marnach
p1429
ssVis_accepted
p1430
I01
sVlast_edit_date
p1431
I1326141408
sVanswer_id
p1432
I8792467
sa(dp1433
Vbody
p1434
V<p>Python does not <em>require</em> semi-colons to terminate statements.  Semi colons <em>can</em> be used to delimit statements if you wish to put multiple statements on the same line.</p>\u000a\u000a<p>Now, <em>why</em> is this allowed?  It's a simple design decision.  I don't think Python needs this semi-colon thing, but somebody thought it would be nice to have and added it to the language.</p>\u000a
p1435
sVquestion_id
p1436
I8236380
sVlast_activity_date
p1437
I1322013138
sVcreation_date
p1438
I1322013138
sVscore
p1439
I107
sVowner
p1440
(dp1441
Vuser_id
p1442
I313063
sVprofile_image
p1443
Vhttps://www.gravatar.com/avatar/64afa42ebc0a920509f959e97307d16f?s=128&d=identicon&r=PG
p1444
sVuser_type
p1445
Vregistered
p1446
sVreputation
p1447
I28706
sVlink
p1448
Vhttp://stackoverflow.com/users/313063/andr%c3%a9-caron
p1449
sVaccept_rate
p1450
I84
sVdisplay_name
p1451
VAndr&#233; Caron
p1452
ssVis_accepted
p1453
I01
sVanswer_id
p1454
I8236402
sa(dp1455
Vcommunity_owned_date
p1456
I1321455125
sVbody
p1457
V<p>The (somewhat unexpected) reason for your results is that Python seems to fold constant expressions involving floating-point multiplication and exponentiation, but not division. <code>math.sqrt()</code> is a different beast altogether since there's no bytecode for it and it involves a function call.</p>\u000a\u000a<p>On Python 2.6.5, the following code:</p>\u000a\u000a<pre><code>x1 = 1234567890.0 / 4.0\u000ax2 = 1234567890.0 * 0.25\u000ax3 = 1234567890.0 ** 0.5\u000ax4 = math.sqrt(1234567890.0)\u000a</code></pre>\u000a\u000a<p>compiles to the following bytecodes:</p>\u000a\u000a<pre><code>  # x1 = 1234567890.0 / 4.0\u000a  4           0 LOAD_CONST               1 (1234567890.0)\u000a              3 LOAD_CONST               2 (4.0)\u000a              6 BINARY_DIVIDE       \u000a              7 STORE_FAST               0 (x1)\u000a\u000a  # x2 = 1234567890.0 * 0.25\u000a  5          10 LOAD_CONST               5 (308641972.5)\u000a             13 STORE_FAST               1 (x2)\u000a\u000a  # x3 = 1234567890.0 ** 0.5\u000a  6          16 LOAD_CONST               6 (35136.418286444619)\u000a             19 STORE_FAST               2 (x3)\u000a\u000a  # x4 = math.sqrt(1234567890.0)\u000a  7          22 LOAD_GLOBAL              0 (math)\u000a             25 LOAD_ATTR                1 (sqrt)\u000a             28 LOAD_CONST               1 (1234567890.0)\u000a             31 CALL_FUNCTION            1\u000a             34 STORE_FAST               3 (x4)\u000a</code></pre>\u000a\u000a<p>As you can see, multiplication and exponentiation take no time at all since they're done when the code is compiled. Division takes longer since it happens at runtime. Square root is not only the most computationally expensive operation of the four, it also incurs various  overheads that the others do not (attribute lookup, function call etc).</p>\u000a\u000a<p>If you eliminate the effect of constant folding, there's little to separate multiplication and division:</p>\u000a\u000a<pre><code>In [16]: x = 1234567890.0\u000a\u000aIn [17]: %timeit x / 4.0\u000a10000000 loops, best of 3: 87.8 ns per loop\u000a\u000aIn [18]: %timeit x * 0.25\u000a10000000 loops, best of 3: 91.6 ns per loop\u000a</code></pre>\u000a\u000a<p><code>math.sqrt(x)</code> is actually a little bit faster than <code>x ** 0.5</code>, presumably because it's a special case of the latter and can therefore be done more efficiently, in spite of the overheads:</p>\u000a\u000a<pre><code>In [19]: %timeit x ** 0.5\u000a1000000 loops, best of 3: 211 ns per loop\u000a\u000aIn [20]: %timeit math.sqrt(x)\u000a10000000 loops, best of 3: 181 ns per loop\u000a</code></pre>\u000a\u000a<p><strong>edit 2011-11-16:</strong> Constant expression folding is done by Python's peephole optimizer. The source code (<code>peephole.c</code>) contains the following comment that explains why constant division isn't folded:</p>\u000a\u000a<pre><code>    case BINARY_DIVIDE:\u000a        /* Cannot fold this operation statically since\u000a           the result can depend on the run-time presence\u000a           of the -Qnew flag */\u000a        return 0;\u000a</code></pre>\u000a\u000a<p>The <code>-Qnew</code> flag enables "true division" defined in <a href="http://www.python.org/dev/peps/pep-0238/">PEP 238</a>.</p>\u000a
p1458
sVquestion_id
p1459
I8068019
sVlast_activity_date
p1460
I1321455125
sVcreation_date
p1461
I1320856545
sVscore
p1462
I110
sVowner
p1463
(dp1464
Vuser_id
p1465
I367273
sVprofile_image
p1466
Vhttps://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=128&d=identicon&r=PG
p1467
sVuser_type
p1468
Vregistered
p1469
sVreputation
p1470
I279603
sVlink
p1471
Vhttp://stackoverflow.com/users/367273/npe
p1472
sVaccept_rate
p1473
I96
sVdisplay_name
p1474
VNPE
p1475
ssVis_accepted
p1476
I01
sVlast_edit_date
p1477
I1321455125
sVanswer_id
p1478
I8068248
sa(dp1479
Vbody
p1480
V<blockquote>\u000a  <p><code>__file__</code> is the pathname of the file from which the module was loaded, if it was loaded from a file. The <code>__file__</code> attribute is not present for C modules that are statically linked into the interpreter; for extension modules loaded dynamically from a shared library, it is the pathname of the shared library file.</p>\u000a</blockquote>\u000a\u000a<p>From the <a href="http://mail.python.org/pipermail/python-dev/2010-February/097461.html" rel="noreferrer">mailing list thread</a> linked by @kindall in a comment to the question:</p>\u000a\u000a<blockquote>\u000a  <p>I haven't tried to repro this particular example, but the reason is\u000a  that we don't want to have to call getpwd() on every import nor do we\u000a  want to have some kind of in-process variable to cache the current\u000a  directory. (getpwd() is relatively slow and can sometimes fail\u000a  outright, and trying to cache it has a certain risk of being wrong.)</p>\u000a  \u000a  <p>What we do instead, is code in site.py that walks over the elements of\u000a  sys.path and turns them into absolute paths. However this code runs\u000a  before '' is inserted in the front of sys.path, so that the initial\u000a  value of sys.path is ''.</p>\u000a</blockquote>\u000a\u000a<p>For the rest of this, consider <code>sys.path</code> not to include <code>''</code>.</p>\u000a\u000a<p>So, if you aren't inside the part of <code>sys.path</code> that contains the module, you'll get an <strong>absolute path</strong>. If you are inside the part of <code>sys.path</code> that contains the module, you'll get a <strong>relative path</strong>.</p>\u000a\u000a<p>If you load a module in the current directory, and the current directory <strong>isn't</strong> in <code>sys.path</code>, you'll get an absolute path.</p>\u000a\u000a<p>If you load a module in the current directory, and the current directory <strong>is</strong> in <code>sys.path</code>, you'll get a relative path.</p>\u000a
p1481
sVquestion_id
p1482
I7116889
sVlast_activity_date
p1483
I1313728265
sVcreation_date
p1484
I1313727829
sVscore
p1485
I76
sVowner
p1486
(dp1487
Vuser_id
p1488
I500584
sVprofile_image
p1489
Vhttps://www.gravatar.com/avatar/02cbc0104ac1794c222b2d3e11d325e4?s=128&d=identicon&r=PG
p1490
sVuser_type
p1491
Vregistered
p1492
sVreputation
p1493
I82963
sVlink
p1494
Vhttp://stackoverflow.com/users/500584/agf
p1495
sVdisplay_name
p1496
Vagf
p1497
ssVis_accepted
p1498
I01
sVlast_edit_date
p1499
I1313728265
sVanswer_id
p1500
I7116925
sa(dp1501
Vbody
p1502
V<p>You have to build the regex as a string:</p>\u000a\u000a<pre><code>TEXTO = sys.argv[1]\u000amy_regex = r"\u005cb(?=\u005cw)" + re.escape(TEXTO) + r"\u005cb(?!\u005cw)"\u000a\u000aif re.search(my_regex, subject, re.IGNORECASE):\u000a    etc.\u000a</code></pre>\u000a\u000a<p>Note the use of <code>re.escape</code> so that if your text has special characters, they won't be interpreted as such.</p>\u000a
p1503
sVquestion_id
p1504
I6930982
sVlast_activity_date
p1505
I1312394754
sVcreation_date
p1506
I1312394754
sVscore
p1507
I116
sVowner
p1508
(dp1509
Vuser_id
p1510
I14343
sVprofile_image
p1511
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p1512
sVuser_type
p1513
Vregistered
p1514
sVreputation
p1515
I193903
sVlink
p1516
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p1517
sVaccept_rate
p1518
I80
sVdisplay_name
p1519
VNed Batchelder
p1520
ssVis_accepted
p1521
I01
sVanswer_id
p1522
I6931070
sa(dp1523
Vbody
p1524
V<p>This Python module for Redis has a clear usage example in the readme: <a href="http://github.com/andymccurdy/redis-py" rel="noreferrer">http://github.com/andymccurdy/redis-py</a> </p>\u000a\u000a<p>Redis is designed to be a RAM cache. It supports basic GET and SET of keys plus the storing of collections such as dictionaries. You can cache RDBMS queries by storing their output in Redis. The goal would be to speed up your Django site. Don't start using Redis or any other cache until you need the speed - don't prematurely optimize.</p>\u000a
p1525
sVquestion_id
p1526
I3801379
sVlast_activity_date
p1527
I1310761858
sVcreation_date
p1528
I1285600625
sVscore
p1529
I56
sVowner
p1530
(dp1531
Vuser_id
p1532
I438512
sVprofile_image
p1533
Vhttps://www.gravatar.com/avatar/b8d3c87c33fa6c536344f5780407d136?s=128&d=identicon&r=PG
p1534
sVuser_type
p1535
Vregistered
p1536
sVreputation
p1537
I5491
sVlink
p1538
Vhttp://stackoverflow.com/users/438512/spike-gronim
p1539
sVdisplay_name
p1540
VSpike Gronim
p1541
ssVis_accepted
p1542
I01
sVlast_edit_date
p1543
I1310761858
sVanswer_id
p1544
I3805221
sa(dp1545
Vbody
p1546
V<p>Even though Armin beat me to the punch with an accepted answer I thought I'd show an abbreviated example of how I implemented a regex matcher in Flask just in case anyone wants a working example of how this could be done.</p>\u000a\u000a<pre><code>from flask import Flask\u000afrom werkzeug.routing import BaseConverter\u000a\u000aapp = Flask(__name__)\u000a\u000aclass RegexConverter(BaseConverter):\u000a    def __init__(self, url_map, *items):\u000a        super(RegexConverter, self).__init__(url_map)\u000a        self.regex = items[0]\u000a\u000a\u000aapp.url_map.converters['regex'] = RegexConverter\u000a\u000a@app.route('/&lt;regex("[abcABC0-9]{4,6}"):uid&gt;-&lt;slug&gt;/')\u000adef example(uid, slug):\u000a    return "uid: %s, slug: %s" % (uid, slug)\u000a\u000a\u000aif __name__ == '__main__':\u000a    app.run(debug=True, host='0.0.0.0', port=5000)\u000a</code></pre>\u000a\u000a<p>this URL should return with 200: <a href="http://localhost:5000/abc0-foo/" rel="noreferrer">http://localhost:5000/abc0-foo/</a></p>\u000a\u000a<p>this URL should will return with 404: <a href="http://localhost:5000/abcd-foo/" rel="noreferrer">http://localhost:5000/abcd-foo/</a></p>\u000a
p1547
sVquestion_id
p1548
I5870188
sVlast_activity_date
p1549
I1304441565
sVcreation_date
p1550
I1304441565
sVscore
p1551
I149
sVowner
p1552
(dp1553
Vuser_id
p1554
I332911
sVprofile_image
p1555
Vhttps://www.gravatar.com/avatar/5b6b31e39c3e2e04ea86774a57261d9d?s=128&d=identicon&r=PG
p1556
sVuser_type
p1557
Vregistered
p1558
sVreputation
p1559
I8041
sVlink
p1560
Vhttp://stackoverflow.com/users/332911/philip-southam
p1561
sVdisplay_name
p1562
VPhilip Southam
p1563
ssVis_accepted
p1564
I01
sVanswer_id
p1565
I5872904
sa(dp1566
Vbody
p1567
V<p><code>*</code> is the "splat" operator: It takes a list as input, and expands it into actual positional arguments in the function call.</p>\u000a\u000a<p>So if <code>uniqueCrossTabs</code> was <code>[ [ 1, 2 ], [ 3, 4 ] ]</code>, then <code>itertools.chain(*uniqueCrossTabs)</code> is the same as saying <code>itertools.chain([ 1, 2 ], [ 3, 4 ])</code></p>\u000a\u000a<p>This is obviously different from passing in just <code>uniqueCrossTabs</code>. In your case, you have a list of lists that you wish to flatten; what <code>itertools.chain()</code> does is return an iterator over the concatenation of all the positional arguments you pass to it, where each positional argument is iterable in its own right.</p>\u000a\u000a<p>In other words, you want to pass each list in <code>uniqueCrossTabs</code> as an argument to <code>chain()</code>, which will chain them together, but you don't have the lists in separate variables, so you use the <code>*</code> operator to expand the list of lists into several list arguments.</p>\u000a\u000a<p>As Jochen Ritzel has pointed out in the comments, <a href="http://docs.python.org/library/itertools.html#itertools.chain.from_iterable"><code>chain.from_iterable()</code></a> is better-suited for this operation, as it assumes a single iterable of iterables to begin with. Your code then becomes simply:</p>\u000a\u000a<pre><code>uniqueCrossTabs = list(itertools.chain.from_iterable(uniqueCrossTabs))\u000a</code></pre>\u000a
p1568
sVquestion_id
p1569
I5239856
sVlast_activity_date
p1570
I1299633821
sVcreation_date
p1571
I1299628876
sVscore
p1572
I120
sVowner
p1573
(dp1574
Vuser_id
p1575
I21475
sVprofile_image
p1576
Vhttps://www.gravatar.com/avatar/003174af5095d12b7f9a5efc293eb041?s=128&d=identicon&r=PG
p1577
sVuser_type
p1578
Vregistered
p1579
sVreputation
p1580
I54710
sVlink
p1581
Vhttp://stackoverflow.com/users/21475/cameron
p1582
sVaccept_rate
p1583
I98
sVdisplay_name
p1584
VCameron
p1585
ssVis_accepted
p1586
I01
sVlast_edit_date
p1587
I1299633821
sVanswer_id
p1588
I5239873
sa(dp1589
Vbody
p1590
V<p>There are a few problems.</p>\u000a\u000a<p>First of all, the way you're using <code>mock.patch</code> isn't quite right. When used as a decorator, it replaces the given function/class (in this case, <code>datetime.date.today</code>) with a <code>Mock</code> object <em>only within the decorated function</em>. So, only within your <code>today()</code> will <code>datetime.date.today</code> be a different function, which doesn't appear to be what you want.</p>\u000a\u000a<p>What you really want seems to be more like this:</p>\u000a\u000a<pre><code>@mock.patch('datetime.date.today')\u000adef test():\u000a    datetime.date.today.return_value = date(2010, 1, 1)\u000a    print datetime.date.today()\u000a</code></pre>\u000a\u000a<p>Unfortunately, this won't work:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; test()\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "build/bdist.macosx-10.6-universal/egg/mock.py", line 557, in patched\u000a  File "build/bdist.macosx-10.6-universal/egg/mock.py", line 620, in __enter__\u000aTypeError: can't set attributes of built-in/extension type 'datetime.date'\u000a</code></pre>\u000a\u000a<p>This fails because Python built-in types are immutable - see <a href="http://stackoverflow.com/questions/192649/can-you-monkey-patch-methods-on-core-types-in-python/192857#192857">this answer</a> for more details.</p>\u000a\u000a<p>In this case, I would subclass datetime.date myself and create the right function:</p>\u000a\u000a<pre><code>import datetime\u000aclass NewDate(datetime.date):\u000a    @classmethod\u000a    def today(cls):\u000a        return cls(2010, 1, 1)\u000adatetime.date = NewDate\u000a</code></pre>\u000a\u000a<p>And now you could do:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; datetime.date.today()\u000aNewDate(2010, 1, 1)\u000a</code></pre>\u000a
p1591
sVquestion_id
p1592
I4481954
sVlast_activity_date
p1593
I1292744967
sVcreation_date
p1594
I1292744967
sVscore
p1595
I72
sVowner
p1596
(dp1597
Vuser_id
p1598
I207432
sVprofile_image
p1599
Vhttps://www.gravatar.com/avatar/6813ca950db3b749647569d79b96fbf9?s=128&d=identicon&r=PG
p1600
sVuser_type
p1601
Vregistered
p1602
sVreputation
p1603
I28101
sVlink
p1604
Vhttp://stackoverflow.com/users/207432/daniel-g
p1605
sVdisplay_name
p1606
VDaniel G
p1607
ssVis_accepted
p1608
I01
sVanswer_id
p1609
I4482067
sa(dp1610
Vbody
p1611
V<p>I use the following to enable history on python shell.</p>\u000a\u000a<p>This is my <strong>.pythonstartup</strong> file . PYTHONSTARTUP environment variable is set to this file path.</p>\u000a\u000a<pre><code># python startup file \u000aimport readline \u000aimport rlcompleter \u000aimport atexit \u000aimport os \u000a# tab completion \u000areadline.parse_and_bind('tab: complete') \u000a# history file \u000ahistfile = os.path.join(os.environ['HOME'], '.pythonhistory') \u000atry: \u000a    readline.read_history_file(histfile) \u000aexcept IOError: \u000a    pass \u000aatexit.register(readline.write_history_file, histfile) \u000adel os, histfile, readline, rlcompleter\u000a</code></pre>\u000a\u000a<p>You will need to have the modules readline, rlcompleter to enable this.</p>\u000a\u000a<blockquote>\u000a  <p>Check out the info on this at : <a href="http://docs.python.org/using/cmdline.html#envvar-PYTHONSTARTUP">http://docs.python.org/using/cmdline.html#envvar-PYTHONSTARTUP</a>.</p>\u000a</blockquote>\u000a\u000a<p>Modules required:</p>\u000a\u000a<ol>\u000a<li><a href="http://docs.python.org/library/readline.html">http://docs.python.org/library/readline.html</a></li>\u000a<li><a href="http://docs.python.org/library/rlcompleter.html">http://docs.python.org/library/rlcompleter.html</a></li>\u000a</ol>\u000a
p1612
sVquestion_id
p1613
I4289937
sVlast_activity_date
p1614
I1290829278
sVcreation_date
p1615
I1290827605
sVscore
p1616
I42
sVowner
p1617
(dp1618
Vuser_id
p1619
I432745
sVprofile_image
p1620
Vhttps://www.gravatar.com/avatar/61d5932d030d57eb9948756af74a357f?s=128&d=identicon&r=PG
p1621
sVuser_type
p1622
Vregistered
p1623
sVreputation
p1624
I44346
sVlink
p1625
Vhttp://stackoverflow.com/users/432745/pyfunc
p1626
sVdisplay_name
p1627
Vpyfunc
p1628
ssVis_accepted
p1629
I01
sVlast_edit_date
p1630
I1290829278
sVanswer_id
p1631
I4289945
sa(dp1632
Vbody
p1633
V<p>For .ini files there is the <a href="http://docs.python.org/library/configparser.html" rel="noreferrer">ConfigParser</a> module that provides a format compatible with .ini files.</p>\u000a\u000a<p>Anyway there's nothing available for parsing complete .properties files, when I have to do that I simply use jython (I'm talking about scripting).</p>\u000a
p1634
sVquestion_id
p1635
I3595363
sVlast_activity_date
p1636
I1283096396
sVcreation_date
p1637
I1283096396
sVscore
p1638
I41
sVowner
p1639
(dp1640
Vuser_id
p1641
I166844
sVprofile_image
p1642
Vhttps://www.gravatar.com/avatar/5bfe31fdaae579afcfcf22900dab73f4?s=128&d=identicon&r=PG
p1643
sVuser_type
p1644
Vregistered
p1645
sVreputation
p1646
I5897
sVlink
p1647
Vhttp://stackoverflow.com/users/166844/pygabriel
p1648
sVaccept_rate
p1649
I91
sVdisplay_name
p1650
Vpygabriel
p1651
ssVis_accepted
p1652
I01
sVanswer_id
p1653
I3595383
sa(dp1654
Vbody
p1655
V<p>As <a href="http://docs.python.org/library/urllib.html#urllib.urlencode" rel="noreferrer">the docs</a> for <code>urlencode</code> say,</p>\u000a\u000a<blockquote>\u000a  <p>The urlparse module provides the\u000a  functions parse_qs() and parse_qsl()\u000a  which are used to parse query strings\u000a  into Python data structures.</p>\u000a</blockquote>\u000a\u000a<p>(In older Python releases, they were in the <code>cgi</code> module).  So, for example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import urllib\u000a&gt;&gt;&gt; import urlparse\u000a&gt;&gt;&gt; d = {'a':'b', 'c':'d'}\u000a&gt;&gt;&gt; s = urllib.urlencode(d)\u000a&gt;&gt;&gt; s\u000a'a=b&amp;c=d'\u000a&gt;&gt;&gt; d1 = urlparse.parse_qs(s)\u000a&gt;&gt;&gt; d1\u000a{'a': ['b'], 'c': ['d']}\u000a</code></pre>\u000a\u000a<p>The obvious difference between the original dictionary <code>d</code> and the "round-tripped" one <code>d1</code> is that the latter has (single-item, in this case) <em>lists</em> as values -- that's because there is no uniqueness guarantee in query strings, and it may be important to your app to know about what multiple values have been given for each key (that is, the lists won't always be single-item ones;-).</p>\u000a\u000a<p>As an alternative:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sq = urlparse.parse_qsl(s)\u000a&gt;&gt;&gt; sq  \u000a[('a', 'b'), ('c', 'd')]\u000a&gt;&gt;&gt; dict(sq)\u000a{'a': 'b', 'c': 'd'}\u000a</code></pre>\u000a\u000a<p>you can get a sequence of pairs (urlencode accepts such an argument, too -- in this case it preserves order, while in the dict case there's no order to preserve;-).  If you know there are no duplicate "keys", or don't care if there are, then (as I've shown) you can call <code>dict</code> to get a dictionary with non-list values.  In general, however, you do need to consider what you want to do if duplicates <em>are</em> present (Python doesn't decide that on your behalf;-).</p>\u000a
p1656
sVquestion_id
p1657
I3542881
sVlast_activity_date
p1658
I1282504146
sVcreation_date
p1659
I1282503775
sVscore
p1660
I110
sVowner
p1661
(dp1662
Vuser_id
p1663
I95810
sVprofile_image
p1664
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1665
sVuser_type
p1666
Vregistered
p1667
sVreputation
p1668
I516089
sVlink
p1669
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1670
sVaccept_rate
p1671
I80
sVdisplay_name
p1672
VAlex Martelli
p1673
ssVis_accepted
p1674
I01
sVlast_edit_date
p1675
I1282504146
sVanswer_id
p1676
I3542894
sa(dp1677
Vbody
p1678
V<ul>\u000a<li><p>Because it puts a lot of stuff into your namespace (might shadow some other object from previous import and you won't know about it). </p></li>\u000a<li><p>Because you don't know exactly what is imported and can't find place from what module certain thing was imported easily (readability). </p></li>\u000a<li><p>Because you can't use cool tools like <code>pyflakes</code> to detect statically errors in your code.</p></li>\u000a</ul>\u000a
p1679
sVquestion_id
p1680
I2386714
sVlast_activity_date
p1681
I1267795015
sVcreation_date
p1682
I1267793022
sVscore
p1683
I125
sVowner
p1684
(dp1685
Vuser_id
p1686
I98494
sVprofile_image
p1687
Vhttps://www.gravatar.com/avatar/c09be62155d4c437c7bfafff9b38aaa0?s=128&d=identicon&r=PG
p1688
sVuser_type
p1689
Vregistered
p1690
sVreputation
p1691
I23051
sVlink
p1692
Vhttp://stackoverflow.com/users/98494/gruszczy
p1693
sVaccept_rate
p1694
I90
sVdisplay_name
p1695
Vgruszczy
p1696
ssVis_accepted
p1697
I01
sVlast_edit_date
p1698
I1267795015
sVanswer_id
p1699
I2386740
sa(dp1700
Vbody
p1701
V<p>Django is designed to let you build many small applications instead of one big application.</p>\u000a\u000a<p>Inside every large application are many small applications struggling to be free.</p>\u000a\u000a<p>If your <code>models.py</code> feels big, you're doing too much.  Stop.  Relax.  Decompose.</p>\u000a\u000a<p>Find smaller, potentially reusable small application components, or pieces.  You don't have to <em>actually</em> reuse them.  Just think about them as potentially reusable.</p>\u000a\u000a<p>Consider your upgrade paths and decompose applications that you might want to replace some day.  You don't have to <em>actually</em> replace them, but you can consider them as a stand-alone "module" of programming that might get replaced with something cooler in the future.</p>\u000a\u000a<p>We have about a dozen applications, each <code>model.py</code> is no more than about 400 lines of code.  They're all pretty focused on less than about half-dozen discrete class definitions. (These aren't hard limits, they're observations about our code.)</p>\u000a\u000a<p>We decompose early and often.  </p>\u000a
p1702
sVquestion_id
p1703
I1160579
sVlast_activity_date
p1704
I1264870674
sVcreation_date
p1705
I1248197563
sVscore
p1706
I58
sVowner
p1707
(dp1708
Vuser_id
p1709
I10661
sVprofile_image
p1710
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1711
sVuser_type
p1712
Vregistered
p1713
sVreputation
p1714
I277525
sVlink
p1715
Vhttp://stackoverflow.com/users/10661/s-lott
p1716
sVaccept_rate
p1717
I92
sVdisplay_name
p1718
VS.Lott
p1719
ssVis_accepted
p1720
I01
sVlast_edit_date
p1721
I1264870674
sVanswer_id
p1722
I1160607
sa(dp1723
Vbody
p1724
V<pre><code>for property, value in vars(theObject).iteritems():\u000a    print property, ": ", value\u000a</code></pre>\u000a\u000a<p>Be aware that in some rare cases there's a <code>__slots__</code> property, such classes often have no <code>__dict__</code>.</p>\u000a
p1725
sVquestion_id
p1726
I1251692
sVlast_activity_date
p1727
I1262344239
sVcreation_date
p1728
I1249835829
sVscore
p1729
I84
sVowner
p1730
(dp1731
Vuser_id
p1732
I24587
sVprofile_image
p1733
Vhttps://www.gravatar.com/avatar/859e513beefbf5b330a8842d9d39b00e?s=128&d=identicon&r=PG&f=1
p1734
sVuser_type
p1735
Vregistered
p1736
sVreputation
p1737
I87361
sVlink
p1738
Vhttp://stackoverflow.com/users/24587/georg-sch%c3%b6lly
p1739
sVaccept_rate
p1740
I84
sVdisplay_name
p1741
VGeorg Sch&#246;lly
p1742
ssVis_accepted
p1743
I01
sVlast_edit_date
p1744
I1262344239
sVanswer_id
p1745
I1251702
sa(dp1746
Vbody
p1747
V<p>You rarely need loops for vector operations in numpy.\u000aYou can create an uninitialized array and assign to all entries at once:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = numpy.empty((3,3,))\u000a&gt;&gt;&gt; a[:] = numpy.NAN\u000a&gt;&gt;&gt; a\u000aarray([[ NaN,  NaN,  NaN],\u000a       [ NaN,  NaN,  NaN],\u000a       [ NaN,  NaN,  NaN]])\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>I have timed the alternatives <code>a[:] = numpy.nan</code> here and <code>a.fill(numpy.nan)</code> as posted by Blaenk:</p>\u000a\u000a<pre><code>$ python -mtimeit "import numpy as np; a = np.empty((100,100));" "a.fill(np.nan)"\u000a10000 loops, best of 3: 54.3 usec per loop\u000a$ python -mtimeit "import numpy as np; a = np.empty((100,100));" "a[:] = np.nan" \u000a10000 loops, best of 3: 88.8 usec per loop\u000a</code></pre>\u000a\u000a<p>The timings show a preference for <code>ndarray.fill(..)</code> as the faster alternative. OTOH, I like numpy's convenience implementation where you can assign values to whole slices at the time, the code's intention is very clear.</p>\u000a
p1748
sVquestion_id
p1749
I1704823
sVlast_activity_date
p1750
I1257813391
sVcreation_date
p1751
I1257812269
sVscore
p1752
I111
sVowner
p1753
(dp1754
Vuser_id
p1755
I137317
sVprofile_image
p1756
Vhttps://www.gravatar.com/avatar/3c242983ffb7316821b7242bc3e9fdee?s=128&d=identicon&r=PG
p1757
sVuser_type
p1758
Vregistered
p1759
sVreputation
p1760
I25168
sVlink
p1761
Vhttp://stackoverflow.com/users/137317/u0b34a0f6ae
p1762
sVaccept_rate
p1763
I92
sVdisplay_name
p1764
Vu0b34a0f6ae
p1765
ssVis_accepted
p1766
I01
sVlast_edit_date
p1767
I1257813391
sVanswer_id
p1768
I1704853
sa(dp1769
Vbody
p1770
V<p>You want this:</p>\u000a\u000a<pre><code>class a:\u000a    def __init__(self):\u000a        self.list = []\u000a</code></pre>\u000a\u000a<p>Declaring the variables inside the class declaration makes them "class" members and not instance members. Declaring them inside the <code>__init__</code> method makes sure that a new instance of the members is created alongside every new instance of the object, which is the behavior you're looking for.</p>\u000a
p1771
sVquestion_id
p1772
I1680528
sVlast_activity_date
p1773
I1257427733
sVcreation_date
p1774
I1257427393
sVscore
p1775
I82
sVowner
p1776
(dp1777
Vuser_id
p1778
I573
sVprofile_image
p1779
Vhttps://www.gravatar.com/avatar/07eabe24326e5c3ae83ca52ef05b9cb8?s=128&d=identicon&r=PG
p1780
sVuser_type
p1781
Vregistered
p1782
sVreputation
p1783
I32869
sVlink
p1784
Vhttp://stackoverflow.com/users/573/abyx
p1785
sVaccept_rate
p1786
I65
sVdisplay_name
p1787
Vabyx
p1788
ssVis_accepted
p1789
I01
sVlast_edit_date
p1790
I1257427733
sVanswer_id
p1791
I1680555
sa(dp1792
Vbody
p1793
V<p>In Python, calling the super-class' <code>__init__</code> is optional. If you call it, it is then also optional whether to use the <code>super</code> identifier, or whether to explicitly name the super class:</p>\u000a\u000a<pre><code>object.__init__(self)\u000a</code></pre>\u000a\u000a<p>In case of object, calling the super method is not strictly necessary, since the super method is empty. Same for <code>__del__</code>.</p>\u000a\u000a<p>OTOH, for <code>__new__</code>, you should indeed call the super method, and use its return as the newly-created object - unless you explicitly want to return something different.</p>\u000a
p1794
sVquestion_id
p1795
I1385759
sVlast_activity_date
p1796
I1252246687
sVcreation_date
p1797
I1252246687
sVscore
p1798
I38
sVowner
p1799
(dp1800
Vuser_id
p1801
I33006
sVprofile_image
p1802
Vhttps://www.gravatar.com/avatar/3acb8bae5a2b5a28f6fe522a4ea9b873?s=128&d=identicon&r=PG
p1803
sVuser_type
p1804
Vregistered
p1805
sVreputation
p1806
I84348
sVlink
p1807
Vhttp://stackoverflow.com/users/33006/martin-v-l%c3%b6wis
p1808
sVaccept_rate
p1809
I88
sVdisplay_name
p1810
VMartin v. L&#246;wis
p1811
ssVis_accepted
p1812
I01
sVanswer_id
p1813
I1385778
sa(dp1814
Vbody
p1815
V<p>The answer by Ber - storing it in threadlocals - is a very bad idea. There's absolutely no reason to do it this way.</p>\u000a\u000a<p>A much better way is to override the form's <code>__init__</code> method to take an extra keyword argument, <code>request</code>. This stores the request in the <em>form</em>, where it's required, and from where you can access it in your clean method.</p>\u000a\u000a<pre><code>class MyForm(forms.Form):\u000a\u000a    def __init__(self, *args, **kwargs):\u000a        self.request = kwargs.pop('request', None)\u000a        super(MyForm, self).__init__(*args, **kwargs)\u000a\u000a\u000a    def clean(self):\u000a        ... access the request object via self.request ...\u000a</code></pre>\u000a\u000a<p>and in your view:</p>\u000a\u000a<pre><code>myform = MyForm(request.POST, request=request)\u000a</code></pre>\u000a
p1816
sVquestion_id
p1817
I1057252
sVlast_activity_date
p1818
I1246271815
sVcreation_date
p1819
I1246271815
sVscore
p1820
I134
sVowner
p1821
(dp1822
Vuser_id
p1823
I104349
sVprofile_image
p1824
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p1825
sVuser_type
p1826
Vregistered
p1827
sVreputation
p1828
I356767
sVlink
p1829
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p1830
sVaccept_rate
p1831
I86
sVdisplay_name
p1832
VDaniel Roseman
p1833
ssVis_accepted
p1834
I01
sVanswer_id
p1835
I1057640
sa(dp1836
Vbody
p1837
V<p>I tried this, and for some reason while the code</p>\u000a\u000a<pre><code>for line in p.stdout:\u000a  ...\u000a</code></pre>\u000a\u000a<p>buffers aggressively, the variant</p>\u000a\u000a<pre><code>while True:\u000a  line = p.stdout.readline()\u000a  if not line: break\u000a  ...\u000a</code></pre>\u000a\u000a<p>does not. Apparently this is a known bug: <a href="http://bugs.python.org/issue3907" rel="noreferrer">http://bugs.python.org/issue3907</a></p>\u000a
p1838
sVquestion_id
p1839
I803265
sVlast_activity_date
p1840
I1241026479
sVcreation_date
p1841
I1241026013
sVscore
p1842
I51
sVowner
p1843
(dp1844
Vuser_id
p1845
I27731
sVprofile_image
p1846
Vhttps://www.gravatar.com/avatar/dcfa1c418931de41e55e63b46b1abad8?s=128&d=identicon&r=PG
p1847
sVuser_type
p1848
Vregistered
p1849
sVreputation
p1850
I7453
sVlink
p1851
Vhttp://stackoverflow.com/users/27731/dave
p1852
sVdisplay_name
p1853
VDave
p1854
ssVis_accepted
p1855
I01
sVlast_edit_date
p1856
I1241026479
sVanswer_id
p1857
I803421
sa(dp1858
Vbody
p1859
V<p>Use <code>{{ request.user.get_profile.whatever }}</code>. Django's templating language automatically calls things that are callable - in this case, the <code>.get_profile()</code> method.</p>\u000a
p1860
sVquestion_id
p1861
I422140
sVlast_activity_date
p1862
I1231363449
sVcreation_date
p1863
I1231363449
sVscore
p1864
I125
sVowner
p1865
(dp1866
Vuser_id
p1867
I16361
sVprofile_image
p1868
Vhttps://www.gravatar.com/avatar/e5781164bd15fcc344b9c2a57fa7e02a?s=128&d=identicon&r=PG
p1869
sVuser_type
p1870
Vregistered
p1871
sVreputation
p1872
I8296
sVlink
p1873
Vhttp://stackoverflow.com/users/16361/adamkg
p1874
sVdisplay_name
p1875
VAdamKG
p1876
ssVis_accepted
p1877
I01
sVanswer_id
p1878
I422153
sa(dp1879
Vcommunity_owned_date
p1880
I1228770776
sVbody
p1881
V<p>I went ahead and answered my own question.  Here's the answer for future reference:</p>\u000a\u000a<p>In Django <code>form.py</code> does some dark magic using the <code>__new__</code> method to load your class variables ultimately into <code>self.fields</code> in the order defined in the class.  <code>self.fields</code> is a Django <code>SortedDict</code> instance (defined in <code>datastructures.py</code>).</p>\u000a\u000a<p>So to override this, say in my example you wanted sender to come first but needed to add it in an <strong>init</strong> method, you would do:</p>\u000a\u000a<pre><code>class ContactForm(forms.Form):\u000a    subject = forms.CharField(max_length=100)\u000a    message = forms.CharField()\u000a    def __init__(self,*args,**kwargs):\u000a        forms.Form.__init__(self,*args,**kwargs)\u000a        #first argument, index is the position of the field you want it to come before\u000a        self.fields.insert(0,'sender',forms.EmailField(initial=str(time.time())))\u000a</code></pre>\u000a
p1882
sVquestion_id
p1883
I350799
sVlast_activity_date
p1884
I1228770776
sVcreation_date
p1885
I1228770776
sVscore
p1886
I38
sVowner
p1887
(dp1888
Vuser_id
p1889
I13009
sVprofile_image
p1890
Vhttps://www.gravatar.com/avatar/6cc09155d4a43cc770bf1e77fd87867a?s=128&d=identicon&r=PG
p1891
sVuser_type
p1892
Vregistered
p1893
sVreputation
p1894
I13653
sVlink
p1895
Vhttp://stackoverflow.com/users/13009/greg
p1896
sVaccept_rate
p1897
I79
sVdisplay_name
p1898
VGreg
p1899
ssVis_accepted
p1900
I01
sVanswer_id
p1901
I350913
sa(dp1902
Vbody
p1903
V<p><a href="http://www.speech.kth.se/snack/" rel="noreferrer">The Snack Sound Toolkit</a> can play wav, au and mp3 files.  </p>\u000a\u000a<pre><code>s = Sound() \u000as.read('sound.wav') \u000as.play()\u000a</code></pre>\u000a
p1904
sVquestion_id
p1905
I307305
sVlast_activity_date
p1906
I1227229865
sVcreation_date
p1907
I1227229865
sVscore
p1908
I28
sVowner
p1909
(dp1910
Vuser_id
p1911
I19839
sVprofile_image
p1912
Vhttps://www.gravatar.com/avatar/971cfac6afb23c0f0fd3623284a02a81?s=128&d=identicon&r=PG
p1913
sVuser_type
p1914
Vregistered
p1915
sVreputation
p1916
I11657
sVlink
p1917
Vhttp://stackoverflow.com/users/19839/csexton
p1918
sVaccept_rate
p1919
I81
sVdisplay_name
p1920
Vcsexton
p1921
ssVis_accepted
p1922
I01
sVanswer_id
p1923
I307501
sa(dp1924
Vbody
p1925
V<p>You can fetch the list of tables and schemata by querying the SQLITE_MASTER table:</p>\u000a\u000a<pre><code>sqlite&gt; .tab\u000ajob         snmptarget  t1          t2          t3        \u000asqlite&gt; select name from sqlite_master where type = 'table';\u000ajob\u000at1\u000at2\u000asnmptarget\u000at3\u000a\u000asqlite&gt; .schema job\u000aCREATE TABLE job (\u000a    id INTEGER PRIMARY KEY,\u000a    data VARCHAR\u000a);\u000asqlite&gt; select sql from sqlite_master where type = 'table' and name = 'job';\u000aCREATE TABLE job (\u000a    id INTEGER PRIMARY KEY,\u000a    data VARCHAR\u000a)\u000a</code></pre>\u000a
p1926
sVquestion_id
p1927
I305378
sVlast_activity_date
p1928
I1227194799
sVcreation_date
p1929
I1227194799
sVscore
p1930
I62
sVowner
p1931
(dp1932
Vuser_id
p1933
I28974
sVprofile_image
p1934
Vhttps://www.gravatar.com/avatar/75a98b884ee385cf965fff7529b487c1?s=128&d=identicon&r=PG
p1935
sVuser_type
p1936
Vregistered
p1937
sVreputation
p1938
I4820
sVlink
p1939
Vhttp://stackoverflow.com/users/28974/converter42
p1940
sVdisplay_name
p1941
Vconverter42
p1942
ssVis_accepted
p1943
I01
sVanswer_id
p1944
I305639
sa(dp1945
Vbody
p1946
V<p>Python 2.5 includes an uuid implementation which (in at least one version) needs the mac address.  You can import the mac finding function into your own code easily:</p>\u000a\u000a<pre><code>from uuid import getnode as get_mac\u000amac = get_mac()\u000a</code></pre>\u000a\u000a<p>The return value is the mac address as 48 bit integer.</p>\u000a
p1947
sVquestion_id
p1948
I159137
sVlast_activity_date
p1949
I1222887990
sVcreation_date
p1950
I1222887990
sVscore
p1951
I107
sVowner
p1952
(dp1953
Vuser_id
p1954
I19990
sVprofile_image
p1955
Vhttps://www.gravatar.com/avatar/181de1fb11dffe39774f3e2e23cda3b6?s=128&d=identicon&r=PG
p1956
sVuser_type
p1957
Vregistered
p1958
sVreputation
p1959
I24012
sVlink
p1960
Vhttp://stackoverflow.com/users/19990/armin-ronacher
p1961
sVaccept_rate
p1962
I50
sVdisplay_name
p1963
VArmin Ronacher
p1964
ssVis_accepted
p1965
I01
sVanswer_id
p1966
I159195
sa(dp1967
Vbody
p1968
V<p>The best-known library is <a href="http://effbot.org/zone/pil-index.htm" rel="noreferrer">PIL</a>.  However if you are simply doing basic manipulation, you are probably better off with the Python bindings for <a href="http://wiki.python.org/moin/ImageMagick" rel="noreferrer">ImageMagick</a>, which will be a good deal more efficient than writing the transforms in Python.</p>\u000a
p1969
sVquestion_id
p1970
I94875
sVlast_activity_date
p1971
I1221760486
sVcreation_date
p1972
I1221760486
sVscore
p1973
I50
sVowner
p1974
(dp1975
Vuser_id
p1976
I8427
sVprofile_image
p1977
Vhttps://i.stack.imgur.com/BwTs7.jpg?s=128&g=1
p1978
sVuser_type
p1979
Vregistered
p1980
sVreputation
p1981
I54916
sVlink
p1982
Vhttp://stackoverflow.com/users/8427/jim
p1983
sVdisplay_name
p1984
VJim
p1985
ssVis_accepted
p1986
I01
sVanswer_id
p1987
I94955
sasVquota_max
p1988
I300
sVquota_remaining
p1989
I156
s.