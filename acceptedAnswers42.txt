(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>Here's a maketrans/translate solution</p>\u000a\u000a<pre><code>import string\u000arot13 = string.maketrans( \u000a    "ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz", \u000a    "NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm")\u000astring.translate("Hello World!", rot13)\u000a# 'Uryyb Jbeyq!'\u000a</code></pre>\u000a
p6
sVquestion_id
p7
I3269686
sVlast_activity_date
p8
I1492291209
sVcreation_date
p9
I1279328186
sVscore
p10
I59
sVowner
p11
(dp12
Vuser_id
p13
I351984
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/f3133cf8379692c9b8c52bbcb6438aae?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I19575
sVlink
p19
Vhttp://stackoverflow.com/users/351984/paul-rubel
p20
sVaccept_rate
p21
I83
sVdisplay_name
p22
VPaul Rubel
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1492291209
sVanswer_id
p26
I3269756
sa(dp27
Vbody
p28
V<p>Starting with</p>\u000a\u000a<pre><code>img_data = b'iVBORw0KGgoAAAANSUhEUgAABoIAAAaCCAYAAAABZu+EAAAqOElEQVR42uzBAQEAAACAkP6v7ggK\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA2YMDAQAAAAAg\u005cn/9dGUFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\u005cnVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWkPDgkA\u005cnAAAABP1/7QobAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u005cnAAAAAAAAAAAAAAAAAIcAeHkAAeLqlDIAAAAASUVORK5CYII='\u000a</code></pre>\u000a\u000a<p>Decoded the data using the base64 codec, and then write it to the filesystem. </p>\u000a\u000a<pre><code># In Python 2.7\u000afh = open("imageToSave.png", "wb")\u000afh.write(img_data.decode('base64'))\u000afh.close()\u000a\u000a# or, more concisely using with statement\u000awith open("imageToSave.png", "wb") as fh:\u000a    fh.write(img_data.decode('base64'))\u000a</code></pre>\u000a\u000a<p>Modernizing this example to Python 3, which removed arbitrary codec support from string/bytes <code>.encode()</code> and <code>.decode()</code> functions:</p>\u000a\u000a<pre><code># For both Python 2.7 and Python 3.x\u000aimport base64\u000awith open("imageToSave.png", "wb") as fh:\u000a    fh.write(base64.decodebytes(img_data))\u000a</code></pre>\u000a
p29
sVquestion_id
p30
I2323128
sVlast_activity_date
p31
I1490364543
sVcreation_date
p32
I1266993287
sVscore
p33
I110
sVowner
p34
(dp35
Vuser_id
p36
I162981
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/4679a4be7785dff8ab94962772c8ad4d?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I3279
sVlink
p42
Vhttp://stackoverflow.com/users/162981/shane-holloway
p43
sVaccept_rate
p44
I100
sVdisplay_name
p45
VShane Holloway
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1490364543
sVanswer_id
p49
I2324133
sa(dp50
Vbody
p51
V<p>This is working as documented.  Any paths specified in <code>PYTHONPATH</code> are documented as normally coming after the working directory but before the standard interpreter-supplied paths.  <code>sys.path.append()</code> appends to the existing path.  See <a href="http://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH" rel="noreferrer">here</a> and <a href="http://docs.python.org/2/library/sys.html#sys.path" rel="noreferrer">here</a>.  If you want a particular directory to come first, simply insert it at the head of sys.path:</p>\u000a\u000a<pre><code>import sys\u000asys.path.insert(0,'/path/to/mod_directory')\u000a</code></pre>\u000a\u000a<p>That said, there are usually better ways to manage imports than either using <code>PYTHONPATH</code> or manipulating <code>sys.path</code> directly.  See, for example, the answers to <a href="http://stackoverflow.com/questions/1893598/pythonpath-vs-sys-path">this question</a>.</p>\u000a
p52
sVquestion_id
p53
I16114391
sVlast_activity_date
p54
I1488898771
sVcreation_date
p55
I1366411765
sVscore
p56
I64
sVowner
p57
(dp58
Vuser_id
p59
I145403
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/137b739a75a31399e6d07140302c8efc?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I57104
sVlink
p65
Vhttp://stackoverflow.com/users/145403/ned-deily
p66
sVdisplay_name
p67
VNed Deily
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1488898771
sVanswer_id
p71
I16114586
sa(dp72
Vbody
p73
V<pre><code>dir(obj)\u000a</code></pre>\u000a\u000a<p>gives you all attributes of the object.\u000aYou need to filter out the members from methods etc yourself:</p>\u000a\u000a<pre><code>class Example(object):\u000a    bool143 = True\u000a    bool2 = True\u000a    blah = False\u000a    foo = True\u000a    foobar2000 = False\u000a\u000aexample = Example()\u000amembers = [attr for attr in dir(example) if not callable(getattr(example, attr)) and not attr.startswith("__")]\u000aprint members   \u000a</code></pre>\u000a\u000a<p>Will give you:</p>\u000a\u000a<pre><code>['blah', 'bool143', 'bool2', 'foo', 'foobar2000']\u000a</code></pre>\u000a
p74
sVquestion_id
p75
I1398022
sVlast_activity_date
p76
I1487260441
sVcreation_date
p77
I1252481025
sVscore
p78
I66
sVowner
p79
(dp80
Vuser_id
p81
I39991
sVprofile_image
p82
Vhttps://www.gravatar.com/avatar/7be405689455acbfe7b8aa1470901b6f?s=128&d=identicon&r=PG
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I15219
sVlink
p87
Vhttp://stackoverflow.com/users/39991/truppo
p88
sVaccept_rate
p89
I62
sVdisplay_name
p90
Vtruppo
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1487260441
sVanswer_id
p94
I1398059
sa(dp95
Vbody
p96
V<p>Use the <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.values" rel="noreferrer"><code>.values()</code></a> method: </p>\u000a\u000a<pre><code>&gt;&gt;&gt; Blog.objects.values()\u000a[{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}],\u000a&gt;&gt;&gt; Blog.objects.values('id', 'name')\u000a[{'id': 1, 'name': 'Beatles Blog'}]\u000a</code></pre>\u000a\u000a<p>Note: the result is a <code>QuerySet</code> which mostly behaves like a list, but isn't actually an instance of <code>list</code>. Use <code>list(Blog.objects.values(\u2026))</code> if you really need an instance of <code>list</code>.</p>\u000a
p97
sVquestion_id
p98
I7811556
sVlast_activity_date
p99
I1485476546
sVcreation_date
p100
I1318960524
sVscore
p101
I56
sVowner
p102
(dp103
Vuser_id
p104
I71522
sVprofile_image
p105
Vhttps://www.gravatar.com/avatar/f0e286ba0482e57904e89e753a4b36e6?s=128&d=identicon&r=PG
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I60395
sVlink
p110
Vhttp://stackoverflow.com/users/71522/david-wolever
p111
sVaccept_rate
p112
I62
sVdisplay_name
p113
VDavid Wolever
p114
ssVis_accepted
p115
I01
sVlast_edit_date
p116
I1485476546
sVanswer_id
p117
I7811582
sa(dp118
Vbody
p119
V<pre><code>import io\u000aimport lxml.etree as ET\u000a\u000acontent='''\u005c\u000a&lt;Envelope xmlns="http://www.example.com/zzz/yyy"&gt;\u000a  &lt;Header&gt;\u000a    &lt;Version&gt;1&lt;/Version&gt;\u000a  &lt;/Header&gt;\u000a  &lt;Body&gt;\u000a    some stuff\u000a  &lt;/Body&gt;\u000a&lt;/Envelope&gt;\u000a'''    \u000adom = ET.parse(io.BytesIO(content))\u000a</code></pre>\u000a\u000a<p>You can find namespace-aware nodes using the <code>xpath</code> method:</p>\u000a\u000a<pre><code>body=dom.xpath('//ns:Body',namespaces={'ns':'http://www.example.com/zzz/yyy'})\u000aprint(body)\u000a# [&lt;Element {http://www.example.com/zzz/yyy}Body at 90b2d4c&gt;]\u000a</code></pre>\u000a\u000a<p>If you really want to remove namespaces, you could use an XSL transformation:</p>\u000a\u000a<pre><code># http://wiki.tei-c.org/index.php/Remove-Namespaces.xsl\u000axslt='''&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;\u000a&lt;xsl:output method="xml" indent="no"/&gt;\u000a\u000a&lt;xsl:template match="/|comment()|processing-instruction()"&gt;\u000a    &lt;xsl:copy&gt;\u000a      &lt;xsl:apply-templates/&gt;\u000a    &lt;/xsl:copy&gt;\u000a&lt;/xsl:template&gt;\u000a\u000a&lt;xsl:template match="*"&gt;\u000a    &lt;xsl:element name="{local-name()}"&gt;\u000a      &lt;xsl:apply-templates select="@*|node()"/&gt;\u000a    &lt;/xsl:element&gt;\u000a&lt;/xsl:template&gt;\u000a\u000a&lt;xsl:template match="@*"&gt;\u000a    &lt;xsl:attribute name="{local-name()}"&gt;\u000a      &lt;xsl:value-of select="."/&gt;\u000a    &lt;/xsl:attribute&gt;\u000a&lt;/xsl:template&gt;\u000a&lt;/xsl:stylesheet&gt;\u000a'''\u000a\u000axslt_doc=ET.parse(io.BytesIO(xslt))\u000atransform=ET.XSLT(xslt_doc)\u000adom=transform(dom)\u000a</code></pre>\u000a\u000a<p>Here we see the namespace has been removed:</p>\u000a\u000a<pre><code>print(ET.tostring(dom))\u000a# &lt;Envelope&gt;\u000a#   &lt;Header&gt;\u000a#     &lt;Version&gt;1&lt;/Version&gt;\u000a#   &lt;/Header&gt;\u000a#   &lt;Body&gt;\u000a#     some stuff\u000a#   &lt;/Body&gt;\u000a# &lt;/Envelope&gt;\u000a</code></pre>\u000a\u000a<p>So you can now find the Body node this way:</p>\u000a\u000a<pre><code>print(dom.find("Body"))\u000a# &lt;Element Body at 8506cd4&gt;\u000a</code></pre>\u000a
p120
sVquestion_id
p121
I4255277
sVlast_activity_date
p122
I1472915930
sVcreation_date
p123
I1290516083
sVscore
p124
I46
sVowner
p125
(dp126
Vuser_id
p127
I190597
sVprofile_image
p128
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p129
sVuser_type
p130
Vregistered
p131
sVreputation
p132
I425294
sVlink
p133
Vhttp://stackoverflow.com/users/190597/unutbu
p134
sVaccept_rate
p135
I88
sVdisplay_name
p136
Vunutbu
p137
ssVis_accepted
p138
I01
sVlast_edit_date
p139
I1472915930
sVanswer_id
p140
I4256126
sa(dp141
Vbody
p142
V<p>The <code>DictWriter</code> doesn't work the way you expect.</p>\u000a\u000a<pre><code>with open('dict.csv', 'wb') as csv_file:\u000a    writer = csv.writer(csv_file)\u000a    for key, value in mydict.items():\u000a       writer.writerow([key, value])\u000a</code></pre>\u000a\u000a<p>To read it back:</p>\u000a\u000a<pre><code>with open('dict.csv', 'rb') as csv_file:\u000a    reader = csv.reader(csv_file)\u000a    mydict = dict(reader)\u000a</code></pre>\u000a\u000a<p>which is quite compact, but it assumes you don't need to do any type conversion when reading</p>\u000a
p143
sVquestion_id
p144
I8685809
sVlast_activity_date
p145
I1469012540
sVcreation_date
p146
I1325298121
sVscore
p147
I96
sVowner
p148
(dp149
Vuser_id
p150
I263162
sVprofile_image
p151
Vhttps://www.gravatar.com/avatar/08dc7b6c240ed52a7aadf8603cca0766?s=128&d=identicon&r=PG
p152
sVuser_type
p153
Vregistered
p154
sVreputation
p155
I6316
sVlink
p156
Vhttp://stackoverflow.com/users/263162/ricardo-c%c3%a1rdenes
p157
sVdisplay_name
p158
VRicardo C&#225;rdenes
p159
ssVis_accepted
p160
I01
sVlast_edit_date
p161
I1469012540
sVanswer_id
p162
I8685873
sa(dp163
Vbody
p164
V<p>Unfortunately, <a href="https://docs.python.org/2/library/simplehttpserver.html"><code>SimpleHTTPServer</code></a> is really that simple that it does not allow any customization, especially not of the headers it sends. You can however create a simple HTTP server yourself, using most of <code>SimpleHTTPServerRequestHandler</code>, and just add that desired header.</p>\u000a\u000a<p>Simply create a file <code>simple-cors-http-server.py</code> (or whatever) and put the following inside:</p>\u000a\u000a<pre><code>#!/usr/bin/env python2\u000afrom SimpleHTTPServer import SimpleHTTPRequestHandler\u000aimport BaseHTTPServer\u000a\u000aclass CORSRequestHandler (SimpleHTTPRequestHandler):\u000a    def end_headers (self):\u000a        self.send_header('Access-Control-Allow-Origin', '*')\u000a        SimpleHTTPRequestHandler.end_headers(self)\u000a\u000aif __name__ == '__main__':\u000a    BaseHTTPServer.test(CORSRequestHandler, BaseHTTPServer.HTTPServer)\u000a</code></pre>\u000a\u000a<p>Then you can do <code>python simple-cors-http-server.py</code> and it will launch your modified server which will set the CORS header for every response.</p>\u000a\u000a<p>With the shebang at the top, make the file executable and put it into your PATH, and you can just run it using <code>simple-cors-http-server.py</code> too.</p>\u000a\u000a<hr>\u000a\u000a<p>For a solution that works with Python 3, you could simple change the imports above to import from the <a href="https://docs.python.org/3/library/http.server.html"><code>http.server</code> module</a> (all the types are there).</p>\u000a\u000a<p>Alternatively, you could use this which works on both Python 3 and Python 2. The script first tries to import from the Python 3 locations and falls back to Python 2:</p>\u000a\u000a<pre><code>#!/usr/bin/env python\u000atry:\u000a    # Python 3\u000a    from http.server import HTTPServer, SimpleHTTPRequestHandler, test as test_orig\u000a    import sys\u000a    def test (*args):\u000a        test_orig(*args, port=int(sys.argv[1]) if len(sys.argv) &gt; 1 else 8000)\u000aexcept ImportError: # Python 2\u000a    from BaseHTTPServer import HTTPServer, test\u000a    from SimpleHTTPServer import SimpleHTTPRequestHandler\u000a\u000aclass CORSRequestHandler (SimpleHTTPRequestHandler):\u000a    def end_headers (self):\u000a        self.send_header('Access-Control-Allow-Origin', '*')\u000a        SimpleHTTPRequestHandler.end_headers(self)\u000a\u000aif __name__ == '__main__':\u000a    test(CORSRequestHandler, HTTPServer)\u000a</code></pre>\u000a
p165
sVquestion_id
p166
I21956683
sVlast_activity_date
p167
I1468773030
sVcreation_date
p168
I1393086525
sVscore
p169
I81
sVowner
p170
(dp171
Vuser_id
p172
I216074
sVprofile_image
p173
Vhttps://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG
p174
sVuser_type
p175
Vregistered
p176
sVreputation
p177
I145981
sVlink
p178
Vhttp://stackoverflow.com/users/216074/poke
p179
sVaccept_rate
p180
I91
sVdisplay_name
p181
Vpoke
p182
ssVis_accepted
p183
I01
sVlast_edit_date
p184
I1468773030
sVanswer_id
p185
I21957017
sa(dp186
Vbody
p187
V<p>In Python 3, print is a function, you need to call it like <code>print("hello world")</code>.</p>\u000a
p188
sVquestion_id
p189
I7584489
sVlast_activity_date
p190
I1467664211
sVcreation_date
p191
I1317218595
sVscore
p192
I101
sVowner
p193
(dp194
Vuser_id
p195
I1617926
sVprofile_image
p196
Vhttps://www.gravatar.com/avatar/4305daee9fe9d9b6ca2824a493983a23?s=128&d=identicon&r=PG
p197
sVuser_type
p198
Vregistered
p199
sVreputation
p200
I13942
sVlink
p201
Vhttp://stackoverflow.com/users/1617926/mikerobi
p202
sVdisplay_name
p203
Vmikerobi
p204
ssVis_accepted
p205
I01
sVlast_edit_date
p206
I1467664211
sVanswer_id
p207
I7584510
sa(dp208
Vbody
p209
V<p>Just catch <code>urllib2.HTTPError</code>, handle it, and if it's not Error 404, simply use <code>raise</code> to re-raise the exception. </p>\u000a\u000a<p>See the <a href="http://docs.python.org/tutorial/errors.html#handling-exceptions" rel="noreferrer">Python tutorial</a>.</p>\u000a\u000a<p>So you could do:</p>\u000a\u000a<pre><code>import urllib2\u000atry:\u000a   urllib2.urlopen("some url")\u000aexcept urllib2.HTTPError as err:\u000a   if err.code == 404:\u000a       &lt;whatever&gt;\u000a   else:\u000a       raise\u000a</code></pre>\u000a
p210
sVquestion_id
p211
I3193060
sVlast_activity_date
p212
I1466585662
sVcreation_date
p213
I1278494085
sVscore
p214
I77
sVowner
p215
(dp216
Vuser_id
p217
I20670
sVprofile_image
p218
Vhttps://www.gravatar.com/avatar/251f2449ffba9fbcc3491db6564ff4a2?s=128&d=identicon&r=PG
p219
sVuser_type
p220
Vregistered
p221
sVreputation
p222
I209304
sVlink
p223
Vhttp://stackoverflow.com/users/20670/tim-pietzcker
p224
sVaccept_rate
p225
I100
sVdisplay_name
p226
VTim Pietzcker
p227
ssVis_accepted
p228
I01
sVlast_edit_date
p229
I1466585662
sVanswer_id
p230
I3193387
sa(dp231
Vbody
p232
V<p>I'll give an example to make it clearer:</p>\u000a\u000a<ul>\u000a<li><code>x</code>: input image of shape [2, 3], 1 channel</li>\u000a<li><code>valid_pad</code>: max pool with 2x2 kernel, stride 2 and VALID padding.</li>\u000a<li><code>same_pad</code>: max pool with 2x2 kernel, stride 2 and SAME padding (this is the <strong>classic</strong> way to go)</li>\u000a</ul>\u000a\u000a<p>The output shapes are:</p>\u000a\u000a<ul>\u000a<li><code>valid_pad</code>: here, no padding so the output shape is [1, 1]</li>\u000a<li><code>same_pad</code>: here, we pad the image to the shape [2, 4] (with <code>-inf</code> and then apply max pool), so the output shape is [1, 2]</li>\u000a</ul>\u000a\u000a<hr>\u000a\u000a<pre class="lang-py prettyprint-override"><code>x = tf.constant([[1., 2., 3.],\u000a                 [4., 5., 6.]])\u000a\u000ax = tf.reshape(x, [1, 2, 3, 1])  # give a shape accepted by tf.nn.max_pool\u000a\u000avalid_pad = tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], padding='VALID')\u000asame_pad = tf.nn.max_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')\u000a\u000avalid_pad.get_shape() == [1, 1, 1, 1]  # valid_pad is [5.]\u000asame_pad.get_shape() == [1, 1, 2, 1]   # same_pad is  [5., 6.]\u000a</code></pre>\u000a\u000a<hr>\u000a
p233
sVquestion_id
p234
I37674306
sVlast_activity_date
p235
I1465291350
sVcreation_date
p236
I1465291350
sVscore
p237
I23
sVowner
p238
(dp239
Vuser_id
p240
I5098368
sVprofile_image
p241
Vhttps://www.gravatar.com/avatar/73fd0f3587eec2e8ac9e13726a84e11e?s=128&d=identicon&r=PG&f=1
p242
sVuser_type
p243
Vregistered
p244
sVreputation
p245
I8164
sVlink
p246
Vhttp://stackoverflow.com/users/5098368/olivier-moindrot
p247
sVdisplay_name
p248
VOlivier Moindrot
p249
ssVis_accepted
p250
I01
sVanswer_id
p251
I37675359
sa(dp252
Vbody
p253
V<p>A blank <code>raise</code> raises the last exception.</p>\u000a\u000a<pre><code># need to re-raise err so caller can do its own handling\u000aif err:\u000a    raise\u000a</code></pre>\u000a\u000a<p>If you use <code>raise something</code> Python has no way of knowing if <code>something</code> was an exception just caught before, or a new exception with a new stack trace. That's why there is the blank <code>raise</code> that preserves the stack trace.</p>\u000a\u000a<p><a href="https://docs.python.org/3/reference/simple_stmts.html#raise">Reference here</a></p>\u000a
p254
sVquestion_id
p255
I4825234
sVlast_activity_date
p256
I1452565422
sVcreation_date
p257
I1296193900
sVscore
p258
I83
sVowner
p259
(dp260
Vuser_id
p261
I95612
sVprofile_image
p262
Vhttps://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=128&d=identicon&r=PG
p263
sVuser_type
p264
Vregistered
p265
sVreputation
p266
I63439
sVlink
p267
Vhttp://stackoverflow.com/users/95612/jochen-ritzel
p268
sVaccept_rate
p269
I80
sVdisplay_name
p270
VJochen Ritzel
p271
ssVis_accepted
p272
I01
sVlast_edit_date
p273
I1452565422
sVanswer_id
p274
I4825279
sa(dp275
Vbody
p276
V<p>The <code>read</code> method returns a sequence of bytes as a string. To convert from a string byte-sequence to binary data, use the built-in <code>struct</code> module: <a href="http://docs.python.org/library/struct.html" rel="noreferrer">http://docs.python.org/library/struct.html</a>. </p>\u000a\u000a<pre><code>import struct\u000a\u000aprint(struct.unpack('i', fin.read(4)))\u000a</code></pre>\u000a\u000a<p>Note that <code>unpack</code> always returns a tuple, so <code>struct.unpack('i', fin.read(4))[0]</code> gives the integer value that you are after.</p>\u000a\u000a<p>You should probably use the format string <code>'&lt;i'</code> (&lt; is a modifier that indicates little-endian byte-order and standard size and alignment - the default is to use the platform's byte ordering, size and alignment). According to the BMP format spec, the bytes should be written in Intel/little-endian byte order.</p>\u000a
p277
sVquestion_id
p278
I1163459
sVlast_activity_date
p279
I1451061476
sVcreation_date
p280
I1248245995
sVscore
p281
I76
sVowner
p282
(dp283
Vuser_id
p284
I3571
sVprofile_image
p285
Vhttps://www.gravatar.com/avatar/b1d6ed6863a3b4aab3565f1f9625f156?s=128&d=identicon&r=PG
p286
sVuser_type
p287
Vregistered
p288
sVreputation
p289
I58092
sVlink
p290
Vhttp://stackoverflow.com/users/3571/codeape
p291
sVaccept_rate
p292
I56
sVdisplay_name
p293
Vcodeape
p294
ssVis_accepted
p295
I01
sVlast_edit_date
p296
I1451061476
sVanswer_id
p297
I1163508
sa(dp298
Vbody
p299
V<p>If your float is always expressed in decimal notation something like</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import re\u000a&gt;&gt;&gt; re.findall("\u005cd+\u005c.\u005cd+", "Current Level: 13.4 db.")\u000a['13.4']\u000a</code></pre>\u000a\u000a<p>may suffice.</p>\u000a\u000a<p>A more robust version would be:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; re.findall(r"[-+]?\u005cd*\u005c.\u005cd+|\u005cd+", "Current Level: -13.2 db or 14.2 or 3")\u000a['-13.2', '14.2', '3']\u000a</code></pre>\u000a\u000a<p>If you want to validate user input, you could alternatively also check for a float by stepping to it directly:</p>\u000a\u000a<pre><code>user_input = "Current Level: 1e100 db"\u000afor token in user_input.split():\u000a    try:\u000a        # if this succeeds, you have your (first) float\u000a        print float(token), "is a float"\u000a    except ValueError:\u000a        print token, "is something else"\u000a\u000a# =&gt; Would print ...\u000a#\u000a# Current is something else\u000a# Level: is something else\u000a# 1e+100 is a float\u000a# db is something else\u000a</code></pre>\u000a
p300
sVquestion_id
p301
I4703390
sVlast_activity_date
p302
I1449366707
sVcreation_date
p303
I1295144173
sVscore
p304
I86
sVowner
p305
(dp306
Vuser_id
p307
I89391
sVprofile_image
p308
Vhttps://www.gravatar.com/avatar/bb5230985aa2c9ea7d022d1a16890f16?s=128&d=identicon&r=PG
p309
sVuser_type
p310
Vregistered
p311
sVreputation
p312
I104500
sVlink
p313
Vhttp://stackoverflow.com/users/89391/miku
p314
sVaccept_rate
p315
I78
sVdisplay_name
p316
Vmiku
p317
ssVis_accepted
p318
I01
sVlast_edit_date
p319
I1449366707
sVanswer_id
p320
I4703409
sa(dp321
Vbody
p322
V<h3>So you think you can <strike>&nbsp;dance&nbsp;</strike> floating-point?</h3>\u000a\u000a<p><code>123</code> is just as much of an object as <code>3.14</code>, the "problem" lies within the grammar rules of the language; the parser thinks we are about to define a <em>float</em> &mdash; not an <em>int</em> with a trailing method call.</p>\u000a\u000a<p>We will get the expected behavior if we wrap the number in parenthesis, as in the below.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; <b>(123).__str__()</b>\u000a'123'</code></pre>\u000a\u000a<p>Or if we simply add some whitespace after <em><code>123</code></em>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; <b>123 .__str__()</b>\u000a'123'</code></pre>\u000a\u000a<p><br /></p>\u000a\u000a<p>The reason it does not work for <code>123.__str__()</code> is that the <em>dot</em> following the <em><code>123</code></em> is interpreted as the <em>decimal-point</em> of some partially declared <em>floating-point</em>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; <b>123.__str__()</b>\u000a  File "", line 1\u000a    123.__str__()\u000a              ^\u000aSyntaxError: invalid syntax</code></pre>\u000a\u000a<p>The parser tries to interpret <code>__str__()</code> as a sequence of digits, but obviously fails &mdash; and we get a <em>SyntaxError</em> basically saying that the parser stumbled upon something that it did not expect.</p>\u000a\u000a<p><br /></p>\u000a\u000a<hr>\u000a\u000a<h3>Elaboration</h3>\u000a\u000a<p>When looking at <code>123.__str__()</code> the python parser could use either <em>3</em> characters and interpret these <em>3</em> characters as an <em>integer</em>, <strong>or</strong> it could use <em>4</em> characters and interpret these as the <strong>start</strong> of a <em>floating-point</em>.</p>\u000a\u000a<pre><code>123.__str__()\u000a^^^ - int\u000a</code></pre>\u000a\u000a\u000a\u000a<pre><code>123.__str__()\u000a^^^^- start of floating-point\u000a</code></pre>\u000a\u000a<p>Just as a little child would like as much cake as possible on their plate, the parser is greedy and would like to swallow as much as it can all at once &mdash; even if this isn't always the best of ideas &mdash;as such the latter ("better") alternative is chosen.</p>\u000a\u000a<p>When it later realizes that <code>__str__()</code> can in no way be interpreted as the <em>decimals</em> of a <em>floating-point</em> it is already too late; <em>SyntaxError</em>.</p>\u000a\u000a<blockquote>\u000a  <p><sup><strong>Note</strong></sup></p>\u000a\u000a<pre><code> 123 .__str__() # works fine\u000a</code></pre>\u000a  \u000a  <p>In the above snippet, <code>123&nbsp;</code> (note the space) must be interpreted as an <em>integer</em> since no <em>number</em> can contain spaces. This means that it is semantically equivalent to <code>(123).__str__()</code>.</p>\u000a</blockquote>\u000a\u000a\u000a\u000a<blockquote>\u000a  <p><sup><strong>Note</strong></sup></p>\u000a\u000a<pre><code> 123..__str__() # works fine\u000a</code></pre>\u000a  \u000a  <p>The above also works because a <em>number</em> can contain at most one <em>decimal-point</em>, meaning that it is equivalent to <code>(123.).__str__()</code>.</p>\u000a</blockquote>\u000a\u000a<p><br /></p>\u000a\u000a<hr>\u000a\u000a<h3>For the <em>language-lawyers</em></h3>\u000a\u000a<p>This section contains the lexical definition of the relevant literals.</p>\u000a\u000a<p><sub><strong><a href="https://docs.python.org/3.5/reference/lexical_analysis.html#floating-point-literals">Lexical analysis - 2.4.5 Floating point literals</a></strong></sub>\u000a</p>\u000a\u000a<pre><code>floatnumber   ::=  pointfloat | exponentfloat\u000apointfloat    ::=  [intpart] fraction | intpart "."\u000aexponentfloat ::=  (intpart | pointfloat) exponent\u000aintpart       ::=  digit+\u000afraction      ::=  "." digit+\u000aexponent      ::=  ("e" | "E") ["+" | "-"] digit+\u000a</code></pre>\u000a\u000a<p><sub><strong><a href="https://docs.python.org/3.5/reference/lexical_analysis.html#integer-literals">Lexical analysis - 2.4.4 Integer literals</a></strong></sub>\u000a</p>\u000a\u000a<pre><code>integer        ::=  decimalinteger | octinteger | hexinteger | bininteger\u000adecimalinteger ::=  nonzerodigit digit* | "0"+\u000anonzerodigit   ::=  "1"..."9"\u000adigit          ::=  "0"..."9"\u000aoctinteger     ::=  "0" ("o" | "O") octdigit+\u000ahexinteger     ::=  "0" ("x" | "X") hexdigit+\u000abininteger     ::=  "0" ("b" | "B") bindigit+\u000aoctdigit       ::=  "0"..."7"\u000ahexdigit       ::=  digit | "a"..."f" | "A"..."F"\u000abindigit       ::=  "0" | "1"\u000a</code></pre>\u000a
p323
sVquestion_id
p324
I33054229
sVlast_activity_date
p325
I1444833300
sVcreation_date
p326
I1444481724
sVscore
p327
I45
sVowner
p328
(dp329
Vuser_id
p330
I1090079
sVprofile_image
p331
Vhttps://i.stack.imgur.com/uWGaU.png?s=128&g=1
p332
sVuser_type
p333
Vregistered
p334
sVreputation
p335
I42166
sVlink
p336
Vhttp://stackoverflow.com/users/1090079/filip-ros%c3%a9en-refp
p337
sVaccept_rate
p338
I91
sVdisplay_name
p339
VFilip Ros&#233;en - refp
p340
ssVis_accepted
p341
I01
sVlast_edit_date
p342
I1444833300
sVanswer_id
p343
I33054230
sa(dp344
Vbody
p345
V<p>You'll want to use the Python's standard <code>logging</code> module.</p>\u000a\u000a<pre><code>import logging\u000a\u000alogging.info("hello")\u000alogging.debug("hi") # this won't show up by default\u000a</code></pre>\u000a\u000a<p>To see calls to <code>logging.debug()</code> in the GoogleAppEngineLauncher Logs console, you have to first add the flag <code>--dev_appserver_log_level=debug</code> to your app. However, beware that you're going to see a lot of debug noise from the App Engine SDK itself. The <a href="https://cloud.google.com/appengine/docs/python/refdocs/modules/google/appengine/tools/devappserver2/devappserver2" rel="noreferrer">full set of levels</a> are:</p>\u000a\u000a<ul>\u000a<li><code>debug</code></li>\u000a<li><code>info</code></li>\u000a<li><code>warning</code></li>\u000a<li><code>error</code></li>\u000a<li><code>critical</code></li>\u000a</ul>\u000a\u000a<p>You can add the flag by double clicking the app and then dropping it into the <strong>Extra Flags</strong> field.</p>\u000a\u000a<p><a href="https://i.stack.imgur.com/2LZW5.png" rel="noreferrer"><img src="https://i.stack.imgur.com/2LZW5.png" alt="Adding the --dev_appserver_log_level flag to your app in the GoogleAppEngineLauncher"></a></p>\u000a
p346
sVquestion_id
p347
I727410
sVlast_activity_date
p348
I1443292859
sVcreation_date
p349
I1331511828
sVscore
p350
I59
sVowner
p351
(dp352
Vuser_id
p353
I101869
sVprofile_image
p354
Vhttps://www.gravatar.com/avatar/b7f38eab5b07876513b1abacebada380?s=128&d=identicon&r=PG
p355
sVuser_type
p356
Vregistered
p357
sVreputation
p358
I4024
sVlink
p359
Vhttp://stackoverflow.com/users/101869/chris-calo
p360
sVaccept_rate
p361
I80
sVdisplay_name
p362
VChris Calo
p363
ssVis_accepted
p364
I01
sVlast_edit_date
p365
I1443292859
sVanswer_id
p366
I9660319
sa(dp367
Vbody
p368
V<p>Just make sure the python executable is in your PATH environment variable then add in your script</p>\u000a\u000a<pre><code>python path/to/the/python_script.py\u000a</code></pre>\u000a\u000a<p>Details:</p>\u000a\u000a<ul>\u000a<li>In the file job.sh, put this</li>\u000a</ul>\u000a\u000a<blockquote>\u000a<pre><code>#!/bin/sh\u000apython python_script.py\u000a</code></pre>\u000a</blockquote>\u000a\u000a<ul>\u000a<li>Execute this command to make the script runnable for you : <code>chmod u+x job.sh</code></li>\u000a<li>Run it : <code>./job.sh</code></li>\u000a</ul>\u000a
p369
sVquestion_id
p370
I4377109
sVlast_activity_date
p371
I1436881409
sVcreation_date
p372
I1291728885
sVscore
p373
I64
sVowner
p374
(dp375
Vuser_id
p376
I1714762
sVprofile_image
p377
Vhttps://www.gravatar.com/avatar/5e27901840ca85707727f5ed339ad31f?s=128&d=identicon&r=PG
p378
sVuser_type
p379
Vregistered
p380
sVreputation
p381
I3553
sVlink
p382
Vhttp://stackoverflow.com/users/1714762/jean-bernard-jansen
p383
sVdisplay_name
p384
VJean-Bernard Jansen
p385
ssVis_accepted
p386
I01
sVlast_edit_date
p387
I1436881409
sVanswer_id
p388
I4377147
sa(dp389
Vbody
p390
V<pre><code>a = [51,27,13,56]\u000ab = dict(enumerate(a))\u000aprint(b)\u000a</code></pre>\u000a\u000a<p>will produce</p>\u000a\u000a<pre><code>{0: 51, 1: 27, 2: 13, 3: 56}\u000a</code></pre>\u000a\u000a<blockquote>\u000a  <p><a href="http://docs.python.org/2/library/functions.html#enumerate"><code>enumerate(sequence, start=0)</code></a></p>\u000a  \u000a  <p>Return an enumerate object. <em>sequence</em> must be a sequence, an <em>iterator</em>, or some other object which supports iteration. The <code>next()</code> method of the iterator returned by <code>enumerate()</code> returns a <code>tuple</code> containing a count (from <em>start</em> which defaults to 0) and the values obtained from iterating over <em>sequence</em>:</p>\u000a</blockquote>\u000a
p391
sVquestion_id
p392
I16607704
sVlast_activity_date
p393
I1435082269
sVcreation_date
p394
I1368789798
sVscore
p395
I92
sVowner
p396
(dp397
Vuser_id
p398
I296974
sVprofile_image
p399
Vhttps://www.gravatar.com/avatar/0e26cfe3ac75cd582ca200fbc6fa0421?s=128&d=identicon&r=PG
p400
sVuser_type
p401
Vregistered
p402
sVreputation
p403
I55340
sVlink
p404
Vhttp://stackoverflow.com/users/296974/glglgl
p405
sVaccept_rate
p406
I100
sVdisplay_name
p407
Vglglgl
p408
ssVis_accepted
p409
I01
sVlast_edit_date
p410
I1435082269
sVanswer_id
p411
I16607772
sa(dp412
Vbody
p413
V<p>This bit of code allows you to create new classes with dynamic \u000anames and parameter names. \u000aThe parameter verification  in <code>__init__</code> just does not allow\u000aunknown parameters, if you need other verifications, like\u000atype, or that they are mandatory, just add the logic\u000athere:</p>\u000a\u000a<pre><code>class BaseClass(object):\u000a    def __init__(self, classtype):\u000a        self._type = classtype\u000a\u000adef ClassFactory(name, argnames, BaseClass=BaseClass):\u000a    def __init__(self, **kwargs):\u000a        for key, value in kwargs.items():\u000a            # here, the argnames variable is the one passed to the\u000a            # ClassFactory call\u000a            if key not in argnames:\u000a                raise TypeError("Argument %s not valid for %s" \u000a                    % (key, self.__class__.__name__))\u000a            setattr(self, key, value)\u000a        BaseClass.__init__(self, name[:-len("Class")])\u000a    newclass = type(name, (BaseClass,),{"__init__": __init__})\u000a    return newclass\u000a</code></pre>\u000a\u000a<p>And this works like this, for example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; SpecialClass = ClassFactory("SpecialClass", "a b c".split())\u000a&gt;&gt;&gt; s = SpecialClass(a=2)\u000a&gt;&gt;&gt; s.a\u000a2\u000a&gt;&gt;&gt; s2 = SpecialClass(d=3)\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "&lt;stdin&gt;", line 8, in __init__\u000aTypeError: Argument d not valid for SpecialClass\u000a</code></pre>\u000a\u000a<p>I see you are asking for inserting the dynamic names in the naming scope --\u000anow, <em>that</em> is not considered a good practice in Python - you either have\u000avariable names, known at coding time, or data - and names learned in runtime\u000aare more "data" than "variables" - </p>\u000a\u000a<p>So, you could just add your classes to a dictionary and use them from there:</p>\u000a\u000a<pre><code>name = "SpecialClass"\u000aclasses = {}\u000aclasses[name] = ClassFactory(name, params)\u000ainstance = classes[name](...)\u000a</code></pre>\u000a\u000a<p>And if your design absolutely needs the names to come in scope,\u000ajust do the same, but use the dictionary returned by the <a href="https://docs.python.org/2/library/functions.html#globals" rel="noreferrer"><code>globals()</code></a> \u000acall instead of an arbitrary dictionary:</p>\u000a\u000a<pre><code>name = "SpecialClass"\u000aglobals()[name] = ClassFactory(name, params)\u000ainstance = SpecialClass(...)\u000a</code></pre>\u000a\u000a<p>(It indeed would be possible for the class factory function to insert the name dynamically on the global scope of the caller - but that is even worse practice, and is not compatible across Python implementations. The way to do that would be to get the caller's execution frame, through <a href="https://docs.python.org/2/library/sys.html#sys._getframe" rel="noreferrer">sys._getframe(1)</a> and setting the class name in the frame's global dictionary in its <code>f_globals</code> attribute).</p>\u000a\u000a<p><strong>update, tl;dr:</strong> This answer had become popular, still its very specific to the question body. The general answer on how to \u000a<em>"dynamically create derived classes from a base class"</em>\u000a in Python is a simple call to <code>type</code> passing the new class name, a tuple with the baseclass(es) and the <code>__dict__</code> body for the new class -like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; new_class = type("NewClassName", (BaseClass), {"new_method": lambda self: ...})\u000a</code></pre>\u000a\u000a<p><strong>update</strong><br>\u000aAnyone needing this should also check the <a href="https://pypi.python.org/pypi/dill" rel="noreferrer">dill</a> project - it claims to be able to pickle and unpickle classes just like pickle does to ordinary objects, and had lived to it in some of my tests.</p>\u000a
p414
sVquestion_id
p415
I15247075
sVlast_activity_date
p416
I1433765112
sVcreation_date
p417
I1362574500
sVscore
p418
I70
sVowner
p419
(dp420
Vuser_id
p421
I108205
sVprofile_image
p422
Vhttps://www.gravatar.com/avatar/ef459127edc89cc575d80a73cd8c567a?s=128&d=identicon&r=PG
p423
sVuser_type
p424
Vregistered
p425
sVreputation
p426
I42567
sVlink
p427
Vhttp://stackoverflow.com/users/108205/jsbueno
p428
sVaccept_rate
p429
I86
sVdisplay_name
p430
Vjsbueno
p431
ssVis_accepted
p432
I01
sVlast_edit_date
p433
I1433765112
sVanswer_id
p434
I15247892
sa(dp435
Vbody
p436
V<p><code>return redirect(url_for('www'))</code> would work if you have a function somewhere else like this:</p>\u000a\u000a<pre><code>@app.route('/welcome')\u000adef www():\u000a    return render_template('www.html')\u000a</code></pre>\u000a\u000a<p><code>url_for</code> looks for a function, you pass it the <em>name</em> of the function you are wanting to call.  Think of it like this:</p>\u000a\u000a<pre><code>@app.route('/login')\u000adef sign_in():\u000a    for thing in login_routine:\u000a        do_stuff(thing)\u000a    return render_template('sign_in.html')\u000a\u000a@app.route('/new-member')\u000adef welcome_page():\u000a    flash('welcome to our new members')\u000a    flash('no cussing, no biting, nothing stronger than gin before breakfast')\u000a    return redirect(url_for('sign_in')) # not 'login', not 'sign_in.html'\u000a</code></pre>\u000a\u000a<p>You could also do <code>return redirect('/some-url')</code>, if that is easier to remember.  It is also possible that what you want, given your first line, is just <code>return render_template('www.html')</code>.</p>\u000a\u000a<p>And also, not from shuaiyuancn's comment below, if you are using blueprints, <code>url_for</code> should be invoked as <code>url_for(blueprint_name.func_name)</code>. <a href="http://flask.pocoo.org/docs/0.10/blueprints/#building-urls" rel="noreferrer">See documentation here</a>.</p>\u000a
p437
sVquestion_id
p438
I3683108
sVlast_activity_date
p439
I1423049798
sVcreation_date
p440
I1284111096
sVscore
p441
I105
sVowner
p442
(dp443
Vuser_id
p444
I11596
sVprofile_image
p445
Vhttps://www.gravatar.com/avatar/e78cebfe065dac6f667b1b8259d9299c?s=128&d=identicon&r=PG
p446
sVuser_type
p447
Vregistered
p448
sVreputation
p449
I17669
sVlink
p450
Vhttp://stackoverflow.com/users/11596/unmounted
p451
sVaccept_rate
p452
I94
sVdisplay_name
p453
Vunmounted
p454
ssVis_accepted
p455
I01
sVlast_edit_date
p456
I1423049798
sVanswer_id
p457
I3683531
sa(dp458
Vbody
p459
V<p>The best option appears to be using something like <a href="http://pypi.python.org/pypi/ijson/">ijson</a> - a module that will work with JSON as a stream, rather than as a block file.</p>\u000a\u000a<p>Edit: Also worth a look - <a href="http://stackoverflow.com/questions/10382253/reading-rather-large-json-files-in-python/10382359#comment43555683_10382359">kashif's comment</a> about <a href="https://github.com/kashifrazzaqui/json-streamer"><code>json-streamer</code></a>.</p>\u000a
p460
sVquestion_id
p461
I10382253
sVlast_activity_date
p462
I1419075679
sVcreation_date
p463
I1335782692
sVscore
p464
I46
sVowner
p465
(dp466
Vuser_id
p467
I722121
sVprofile_image
p468
Vhttps://www.gravatar.com/avatar/c494fd4b406a2c066054ad17d30ae73b?s=128&d=identicon&r=PG
p469
sVuser_type
p470
Vregistered
p471
sVreputation
p472
I51344
sVlink
p473
Vhttp://stackoverflow.com/users/722121/gareth-latty
p474
sVaccept_rate
p475
I100
sVdisplay_name
p476
VGareth Latty
p477
ssVis_accepted
p478
I01
sVlast_edit_date
p479
I1419075679
sVanswer_id
p480
I10382359
sa(dp481
Vbody
p482
V<p><strong>Edit: extended the solution to honor default arguments also</strong></p>\u000a\u000a<p>Here is the complete solution:</p>\u000a\u000a<pre><code>from functools import wraps\u000aimport inspect\u000a\u000a\u000adef initializer(func):\u000a    """\u000a    Automatically assigns the parameters.\u000a\u000a    &gt;&gt;&gt; class process:\u000a    ...     @initializer\u000a    ...     def __init__(self, cmd, reachable=False, user='root'):\u000a    ...         pass\u000a    &gt;&gt;&gt; p = process('halt', True)\u000a    &gt;&gt;&gt; p.cmd, p.reachable, p.user\u000a    ('halt', True, 'root')\u000a    """\u000a    names, varargs, keywords, defaults = inspect.getargspec(func)\u000a\u000a    @wraps(func)\u000a    def wrapper(self, *args, **kargs):\u000a        for name, arg in list(zip(names[1:], args)) + list(kargs.items()):\u000a            setattr(self, name, arg)\u000a\u000a        for name, default in zip(reversed(names), reversed(defaults)):\u000a            if not hasattr(self, name):\u000a                setattr(self, name, default)\u000a\u000a        func(self, *args, **kargs)\u000a\u000a    return wrapper\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>Edit: Adam asked me to extend the solution to support keyword arguments</strong></p>\u000a\u000a<pre><code>from functools import wraps\u000aimport inspect\u000a\u000adef initializer(fun):\u000a   names, varargs, keywords, defaults = inspect.getargspec(fun)\u000a   @wraps(fun)\u000a   def wrapper(self, *args, **kargs):\u000a       for name, arg in zip(names[1:], args) + kargs.items():\u000a           setattr(self, name, arg)\u000a       fun(self, *args, **kargs)\u000a   return wrapper\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>You can use a decorator:</p>\u000a\u000a<pre><code>from functools import wraps\u000aimport inspect\u000a\u000adef initializer(fun):\u000a    names, varargs, keywords, defaults = inspect.getargspec(fun)\u000a    @wraps(fun)\u000a    def wrapper(self, *args):\u000a        for name, arg in zip(names[1:], args):\u000a            setattr(self, name, arg)\u000a        fun(self, *args)\u000a    return wrapper\u000a\u000aclass process:\u000a    @initializer\u000a    def __init__(self, PID, PPID, cmd, FDs, reachable, user):\u000a        pass\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; c = process(1, 2, 3, 4, 5, 6)\u000a&gt;&gt;&gt; c.PID\u000a1\u000a&gt;&gt;&gt; dir(c)\u000a['FDs', 'PID', 'PPID', '__doc__', '__init__', '__module__', 'cmd', 'reachable', 'user'\u000a</code></pre>\u000a
p483
sVquestion_id
p484
I1389180
sVlast_activity_date
p485
I1418243289
sVcreation_date
p486
I1252327059
sVscore
p487
I61
sVowner
p488
(dp489
Vuser_id
p490
I97828
sVprofile_image
p491
Vhttps://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG
p492
sVuser_type
p493
Vregistered
p494
sVreputation
p495
I64017
sVlink
p496
Vhttp://stackoverflow.com/users/97828/nadia-alramli
p497
sVdisplay_name
p498
VNadia Alramli
p499
ssVis_accepted
p500
I01
sVlast_edit_date
p501
I1418243289
sVanswer_id
p502
I1389216
sa(dp503
Vbody
p504
V<p>Use the strings <a href="https://docs.python.org/2/library/stdtypes.html#str.join">join-method</a>.</p>\u000a\u000a<pre><code>print ' '.join(['word1', 'word2', 'word3'])\u000a</code></pre>\u000a\u000a<p>You can join any iterable (not only the <code>list</code> used here) and of course you can use any string (not only <code>' '</code>) as the delimiter.</p>\u000a\u000a<p>If you want a random order like you said in your question use <a href="http://docs.python.org/library/random.html#random.shuffle">shuffle</a>.</p>\u000a
p505
sVquestion_id
p506
I12053236
sVlast_activity_date
p507
I1415810351
sVcreation_date
p508
I1345546097
sVscore
p509
I101
sVowner
p510
(dp511
Vuser_id
p512
I1209921
sVprofile_image
p513
Vhttps://www.gravatar.com/avatar/c4d1606f4b1eaa26fe4dc65e57e0951a?s=128&d=identicon&r=PG
p514
sVuser_type
p515
Vregistered
p516
sVreputation
p517
I5446
sVlink
p518
Vhttp://stackoverflow.com/users/1209921/matthias
p519
sVdisplay_name
p520
VMatthias
p521
ssVis_accepted
p522
I01
sVlast_edit_date
p523
I1415810351
sVanswer_id
p524
I12053276
sa(dp525
Vbody
p526
V<p><strong>The easiest way for your use case is to use CSS</strong>. It's a language meant for defining presentation. Look at the code generated by form, take note of the ids for fields that interest you, and change appearance of these fields through CSS.</p>\u000a\u000a<p>Example for <code>long_desc</code> field in your ProductForm (when your form does not have a custom prefix):</p>\u000a\u000a<pre><code>#id_long_desc {\u000a    width: 300px;\u000a    height: 200px;\u000a}\u000a</code></pre>\u000a\u000a<p><strong>Second approach</strong> is to pass the <code>attrs</code> keyword to your widget constructor.</p>\u000a\u000a<pre><code>class ProductForm(ModelForm):\u000a    long_desc = forms.CharField(widget=forms.Textarea(attrs={'cols': 10, 'rows': 20}))\u000a    short_desc = forms.CharField(widget=forms.Textarea)\u000a    class Meta:\u000a        model = Product\u000a</code></pre>\u000a\u000a<p>It's <a href="http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs" rel="noreferrer">described in Django documentation</a>.</p>\u000a\u000a<p><strong>Third approach</strong> is to leave the nice declarative interface of newforms for a while and set your widget attributes in custom constructor.</p>\u000a\u000a<pre><code>class ProductForm(ModelForm):\u000a    long_desc = forms.CharField(widget=forms.Textarea)\u000a    short_desc = forms.CharField(widget=forms.Textarea)\u000a    class Meta:\u000a        model = Product\u000a\u000a    # Edit by bryan\u000a    def __init__(self, *args, **kwargs):\u000a        super(ProductForm, self).__init__(*args, **kwargs) # Call to ModelForm constructor\u000a        self.fields['long_desc'].widget.attrs['cols'] = 10\u000a        self.fields['long_desc'].widget.attrs['rows'] = 20\u000a</code></pre>\u000a\u000a<p>This approach has the following advantages:</p>\u000a\u000a<ul>\u000a<li>You can define widget attributes for fields that are generated automatically from your model without redefining whole fields.</li>\u000a<li>It doesn't depend on the prefix of your form.</li>\u000a</ul>\u000a
p527
sVquestion_id
p528
I110378
sVlast_activity_date
p529
I1408642905
sVcreation_date
p530
I1221979442
sVscore
p531
I95
sVowner
p532
(dp533
Vuser_id
p534
I9812
sVprofile_image
p535
Vhttps://www.gravatar.com/avatar/4885da39b4bc6628c5599eb9253dcf32?s=128&d=identicon&r=PG
p536
sVuser_type
p537
Vregistered
p538
sVreputation
p539
I2340
sVlink
p540
Vhttp://stackoverflow.com/users/9812/zuber
p541
sVdisplay_name
p542
Vzuber
p543
ssVis_accepted
p544
I01
sVlast_edit_date
p545
I1408642905
sVanswer_id
p546
I110414
sa(dp547
Vbody
p548
V<p>I suggest you create your own list of operator words that you take out of the stopword list. Sets can be conveniently subtracted, so:</p>\u000a\u000a<pre><code>operators = set(('and', 'or', 'not'))\u000astop = set(stopwords...) - operators\u000a</code></pre>\u000a\u000a<p>Then you can simply test if a word is <code>in</code> or <code>not in</code> the set without relying on whether your operators are part of the stopword list. You can then later switch to another stopword list or add an operator.</p>\u000a\u000a<pre><code>if word.lower() not in stop:\u000a    # use word\u000a</code></pre>\u000a
p549
sVquestion_id
p550
I19130512
sVlast_activity_date
p551
I1402469676
sVcreation_date
p552
I1402235141
sVscore
p553
I41
sVowner
p554
(dp555
Vuser_id
p556
I1495539
sVprofile_image
p557
Vhttps://i.stack.imgur.com/Pektu.png?s=128&g=1
p558
sVuser_type
p559
Vregistered
p560
sVreputation
p561
I3204
sVlink
p562
Vhttp://stackoverflow.com/users/1495539/otus
p563
sVaccept_rate
p564
I100
sVdisplay_name
p565
Votus
p566
ssVis_accepted
p567
I01
sVlast_edit_date
p568
I1402469676
sVanswer_id
p569
I24106778
sa(dp570
Vbody
p571
V<p>Your virtualenv became corrupt due to diffs in the Python system lib.</p>\u000a\u000a<p>Best choice is to reinstall your virtualenv:</p>\u000a\u000a<pre><code>$ deactivate\u000a$ rmvirtualenv nlmanagement\u000a$ mkvirtualenv nlmanagement\u000a$ pip install -r requirements.txt\u000a</code></pre>\u000a
p572
sVquestion_id
p573
I23176697
sVlast_activity_date
p574
I1397950067
sVcreation_date
p575
I1397950067
sVscore
p576
I47
sVowner
p577
(dp578
Vuser_id
p579
I24545
sVprofile_image
p580
Vhttps://www.gravatar.com/avatar/0a59649d5bff1787b18d3a73da34a27a?s=128&d=identicon&r=PG
p581
sVuser_type
p582
Vregistered
p583
sVreputation
p584
I92496
sVlink
p585
Vhttp://stackoverflow.com/users/24545/yuval-adam
p586
sVaccept_rate
p587
I99
sVdisplay_name
p588
VYuval Adam
p589
ssVis_accepted
p590
I01
sVanswer_id
p591
I23176749
sa(dp592
Vbody
p593
V<p>The traceback is not stored in the exception. (Not, that is, in Python 2; see <a href="http://stackoverflow.com/a/14564261/577088">Vyktor</a>'s answer for more about the situation in Python 3). Within an <code>except</code> clause, you can retrieve it using <a href="http://docs.python.org/library/sys.html#sys.exc_info" rel="noreferrer"><code>sys.exc_info()</code></a>. See also the <a href="http://docs.python.org/library/traceback.html" rel="noreferrer"><code>traceback</code></a> module for a few useful tools. </p>\u000a\u000a<pre><code>&gt;&gt;&gt; import sys, traceback\u000a&gt;&gt;&gt; def raise_exception():\u000a...     try:\u000a...         raise Exception\u000a...     except Exception:\u000a...         ex_type, ex, tb = sys.exc_info()\u000a...         traceback.print_tb(tb)\u000a...     finally:\u000a...         del tb\u000a... \u000a&gt;&gt;&gt; raise_exception()\u000a  File "&lt;stdin&gt;", line 3, in raise_exception\u000a</code></pre>\u000a\u000a<p>Or, in your case (since you can't modify the <code>try/except</code> block):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def view_traceback():\u000a...     ex_type, ex, tb = sys.exc_info()\u000a...     traceback.print_tb(tb)\u000a...     del tb\u000a... \u000a&gt;&gt;&gt; try:\u000a...     raise Exception\u000a... except Exception:\u000a...     view_traceback()\u000a... \u000a  File "&lt;stdin&gt;", line 2, in &lt;module&gt;\u000a</code></pre>\u000a\u000a<p>To elaborate, <code>sys.exc_info</code> returns the exception, exception type, and traceback for whatever exception is currently being handled. </p>\u000a\u000a<p>But as your edit indicates, you're trying to get the traceback that <em>would</em> have been printed if your exception had not been handled, after it has <em>already</em> been handled. That's a much harder question. "Normal" exceptions don't store traceback information, perhaps because keeping exceptions lightweight allows for faster execution when an exception does occur. (Also, as <a href="http://stackoverflow.com/a/11417308/577088">ecatmur</a> observes, storing tracebacks in local variables creates circular references.) And unfortunately, <code>sys.exc_info</code> returns <code>(None, None, None)</code> when no exception is being handled. Other related <code>sys</code> attribues don't help either. <code>sys.exc_traceback</code> is deprecated and undefined when no exception is being handled; <code>sys.last_traceback</code> seems perfect, but I believe is only defined in interactive sessions.</p>\u000a\u000a<p>If you can control how the exception is raised, you might be able to use <a href="http://docs.python.org/library/inspect.html" rel="noreferrer"><code>inspect</code></a> and a <a href="http://docs.python.org/tutorial/errors.html#user-defined-exceptions" rel="noreferrer">custom exception</a> to store some of the information. But I'm not even sure how that would work. </p>\u000a\u000a<p>I'll add that <em>catching and returning an exception</em> is kind of an unusual thing to do; I would suggest refactoring.</p>\u000a
p594
sVquestion_id
p595
I11414894
sVlast_activity_date
p596
I1395087367
sVcreation_date
p597
I1341929337
sVscore
p598
I40
sVowner
p599
(dp600
Vuser_id
p601
I577088
sVprofile_image
p602
Vhttps://i.stack.imgur.com/5UZyo.jpg?s=128&g=1
p603
sVuser_type
p604
Vregistered
p605
sVreputation
p606
I67900
sVlink
p607
Vhttp://stackoverflow.com/users/577088/senderle
p608
sVdisplay_name
p609
Vsenderle
p610
ssVis_accepted
p611
I01
sVlast_edit_date
p612
I1395087367
sVanswer_id
p613
I11415140
sa(dp614
Vbody
p615
V<p>To solve the issue that some function might have cached <code>sys.stdout</code> stream as a local variable and therefore replacing the global <code>sys.stdout</code> won't work inside that function, you could redirect at a file descriptor level (<code>sys.stdout.fileno()</code>) e.g.:</p>\u000a\u000a<pre><code>from __future__ import print_function\u000aimport os\u000aimport sys\u000a\u000adef some_function_with_cached_sys_stdout(stdout=sys.stdout):\u000a    print('cached stdout', file=stdout)\u000a\u000awith stdout_redirected(to=os.devnull), merged_stderr_stdout():\u000a    print('stdout goes to devnull')\u000a    some_function_with_cached_sys_stdout()\u000a    print('stderr also goes to stdout that goes to devnull', file=sys.stderr)\u000aprint('stdout is back')\u000asome_function_with_cached_sys_stdout()\u000aprint('stderr is back', file=sys.stderr)\u000a</code></pre>\u000a\u000a<p><a href="http://stackoverflow.com/a/22434262/4279"><code>stdout_redirected()</code></a> redirects all output for <code>sys.stdout.fileno()</code> to a given filename,  file object, or file descriptor (<code>os.devnull</code> in the example).</p>\u000a\u000a<p><a href="http://stackoverflow.com/a/22434262/4279"><code>stdout_redirected()</code> and <code>merged_stderr_stdout()</code> are defined here</a>.</p>\u000a
p616
sVquestion_id
p617
I6796492
sVlast_activity_date
p618
I1394959759
sVcreation_date
p619
I1394959030
sVscore
p620
I11
sVowner
p621
(dp622
Vuser_id
p623
I4279
sVprofile_image
p624
Vhttps://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG
p625
sVuser_type
p626
Vregistered
p627
sVreputation
p628
I203089
sVlink
p629
Vhttp://stackoverflow.com/users/4279/j-f-sebastian
p630
sVaccept_rate
p631
I94
sVdisplay_name
p632
VJ.F. Sebastian
p633
ssVis_accepted
p634
I01
sVlast_edit_date
p635
I1394959759
sVanswer_id
p636
I22434728
sa(dp637
Vbody
p638
V<p>I had the same error and it turned out to be a circular dependency between something loaded by the settings and the settings module itself. In my case it was a middleware class which was named in the settings which itself tried to load the settings.</p>\u000a
p639
sVquestion_id
p640
I19128540
sVlast_activity_date
p641
I1387320320
sVcreation_date
p642
I1387320320
sVscore
p643
I49
sVowner
p644
(dp645
Vuser_id
p646
I434731
sVprofile_image
p647
Vhttps://www.gravatar.com/avatar/742ef7e9b79b6839344002844a95ee01?s=128&d=identicon&r=PG
p648
sVuser_type
p649
Vregistered
p650
sVreputation
p651
I1279
sVlink
p652
Vhttp://stackoverflow.com/users/434731/sam-svenbjorgchristiensensen
p653
sVaccept_rate
p654
I82
sVdisplay_name
p655
VSam Svenbjorgchristiensensen
p656
ssVis_accepted
p657
I01
sVanswer_id
p658
I20646241
sa(dp659
Vbody
p660
V<p>In two words, the difference between example 5 and example 6 is that in example 5 the variable <code>x</code> is also assigned to in the same scope, while not in example 6.  This triggers a difference that can be understood by historical reasons.</p>\u000a\u000a<p>This raises UnboundLocalError:</p>\u000a\u000a<pre><code>x = "foo"\u000adef f():\u000a    print x\u000a    x = 5\u000af()\u000a</code></pre>\u000a\u000a<p>instead of printing "foo".  It makes a bit of sense, even if it seems strange at first: the function f() defines the variable <code>x</code> locally, even if it is after the print, and so any reference to <code>x</code> in the same function must be to that local variable.  At least it makes sense in that it avoids strange surprizes if you have by mistake reused the name of a global variable locally, and are trying to use both the global and the local variable.  This is a good idea because it means that we can statically know, just by looking at a variable, <em>which</em> variable it means.  For example, we know that <code>print x</code> refers to the local variable (and thus may raise UnboundLocalError) here:</p>\u000a\u000a<pre><code>x = "foo"\u000adef f():\u000a    if some_condition:\u000a        x = 42\u000a    print x\u000af()\u000a</code></pre>\u000a\u000a<p>Now, this rule doesn't work for class-level scopes: there, we want expressions like <code>x = x</code> to work, capturing the global variable <code>x</code> into the class-level scope.  This means that class-level scopes don't follow the basic rule above: we can't know if <code>x</code> in this scope refers to some outer variable or to the locally-defined <code>x</code> --- for example:</p>\u000a\u000a<pre><code>class X:\u000a    x = x     # we want to read the global x and assign it locally\u000a    bar = x   # but here we want to read the local x of the previous line\u000a\u000aclass Y:\u000a    if some_condition:\u000a        x = 42\u000a    print x     # may refer to either the local x, or some global x\u000a\u000aclass Z:\u000a    for i in range(2):\u000a        print x    # prints the global x the 1st time, and 42 the 2nd time\u000a        x = 42\u000a</code></pre>\u000a\u000a<p>So in class scopes, a different rule is used: where it would normally raise UnboundLocalError --- and only in that case --- it instead looks up in the module globals.  That's all: it doesn't follow the chain of nested scopes.</p>\u000a\u000a<p>Why not?  I actually doubt there is a better explanation that "for historical reasons".  In more technical terms, it could consider that the variable <code>x</code> is both locally defined in the class scope (because it is assigned to) <em>and</em> should be passed in from the parent scope as a lexically nested variable (because it is read).  It would be possible to implement it by using a different bytecode than <code>LOAD_NAME</code> that looks up in the local scope, and falls back to using the nested scope's reference if not found.</p>\u000a\u000a<p><strong>EDIT:</strong> thanks wilberforce for the reference to <a href="http://bugs.python.org/issue532860">http://bugs.python.org/issue532860</a>.  We may have a chance to get some discussion reactivated with the proposed new bytecode, if we feel that it should be fixed after all (the bug report considers killing support for <code>x = x</code> but was closed for fear of breaking too much existing code; instead what I'm suggesting here would be to make <code>x = x</code> work in more cases).  Or I may be missing another fine point...</p>\u000a\u000a<p><strong>EDIT2:</strong> it seems that CPython did precisely that in the current 3.4 trunk: <a href="http://bugs.python.org/issue17853">http://bugs.python.org/issue17853</a> ... or not?  They introduced the bytecode for a slightly different reason and don't use it systematically...</p>\u000a
p661
sVquestion_id
p662
I20246523
sVlast_activity_date
p663
I1386969006
sVcreation_date
p664
I1385578709
sVscore
p665
I17
sVowner
p666
(dp667
Vuser_id
p668
I1556290
sVprofile_image
p669
Vhttps://www.gravatar.com/avatar/5b37e6b4ac97453e4ba9dba37954cf79?s=128&d=identicon&r=PG
p670
sVuser_type
p671
Vregistered
p672
sVreputation
p673
I7459
sVlink
p674
Vhttp://stackoverflow.com/users/1556290/armin-rigo
p675
sVaccept_rate
p676
I75
sVdisplay_name
p677
VArmin Rigo
p678
ssVis_accepted
p679
I01
sVlast_edit_date
p680
I1386969006
sVanswer_id
p681
I20250802
sa(dp682
Vbody
p683
V<p>Like so:</p>\u000a\u000a<pre><code>import pandas as pd\u000adf = pd.DataFrame({"pear": [1,2,3], "apple": [2,3,4], "orange": [3,4,5]})\u000a\u000alen(df.columns)\u000a3\u000a</code></pre>\u000a
p684
sVquestion_id
p685
I20297332
sVlast_activity_date
p686
I1385796172
sVcreation_date
p687
I1385795505
sVscore
p688
I74
sVowner
p689
(dp690
Vuser_id
p691
I390388
sVprofile_image
p692
Vhttps://i.stack.imgur.com/NqksL.jpg?s=128&g=1
p693
sVuser_type
p694
Vregistered
p695
sVreputation
p696
I7382
sVlink
p697
Vhttp://stackoverflow.com/users/390388/john
p698
sVaccept_rate
p699
I95
sVdisplay_name
p700
VJohn
p701
ssVis_accepted
p702
I01
sVlast_edit_date
p703
I1385796172
sVanswer_id
p704
I20297639
sa(dp705
Vbody
p706
V<pre><code>In [1]: df = DataFrame(np.random.randint(0,10,size=100).reshape(10,10))\u000a\u000aIn [2]: df\u000aOut[2]: \u000a   0  1  2  3  4  5  6  7  8  9\u000a0  2  2  3  2  6  1  9  9  3  3\u000a1  1  2  5  8  5  2  5  0  6  3\u000a2  0  7  0  7  5  5  9  1  0  3\u000a3  5  3  2  3  7  6  8  3  8  4\u000a4  8  0  2  2  3  9  7  1  2  7\u000a5  3  2  8  5  6  4  3  7  0  8\u000a6  4  2  6  5  3  3  4  5  3  2\u000a7  7  6  0  6  6  7  1  7  5  1\u000a8  7  4  3  1  0  6  9  7  7  3\u000a9  5  3  4  5  2  0  8  6  4  7\u000a\u000aIn [13]: Series(df.values.ravel()).unique()\u000aOut[13]: array([9, 1, 4, 6, 0, 7, 5, 8, 3, 2])\u000a</code></pre>\u000a\u000a<p>Numpy unique sorts, so its faster to do it this way (and then sort if you need to)</p>\u000a\u000a<pre><code>In [14]: df = DataFrame(np.random.randint(0,10,size=10000).reshape(100,100))\u000a\u000aIn [15]: %timeit Series(df.values.ravel()).unique()\u000a10000 loops, best of 3: 137 \uffb5s per loop\u000a\u000aIn [16]: %timeit np.unique(df.values.ravel())\u000a1000 loops, best of 3: 270 \uffb5s per loop\u000a</code></pre>\u000a
p707
sVquestion_id
p708
I20084382
sVlast_activity_date
p709
I1384908386
sVcreation_date
p710
I1384906204
sVscore
p711
I69
sVowner
p712
(dp713
Vuser_id
p714
I644898
sVprofile_image
p715
Vhttps://www.gravatar.com/avatar/b2833d485728ee2f603802242ebc9826?s=128&d=identicon&r=PG
p716
sVuser_type
p717
Vregistered
p718
sVreputation
p719
I55285
sVlink
p720
Vhttp://stackoverflow.com/users/644898/jeff
p721
sVdisplay_name
p722
VJeff
p723
ssVis_accepted
p724
I01
sVlast_edit_date
p725
I1384908386
sVanswer_id
p726
I20084895
sa(dp727
Vbody
p728
V<p>Did you try <code>df.groupby('id').head(2)</code></p>\u000a\u000a<p>Ouput generated: </p>\u000a\u000a<pre><code>&gt;&gt;&gt; df.groupby('id').head(2)\u000a       id  value\u000aid             \u000a1  0   1      1\u000a   1   1      2 \u000a2  3   2      1\u000a   4   2      2\u000a3  7   3      1\u000a4  8   4      1\u000a</code></pre>\u000a\u000a<p>(Keep in mind that you might need to order/sort before, depending on your data)</p>\u000a\u000a<p>EDIT: As mentioned by the questioner, use <code>df.groupby('id').head(2).reset_index(drop=True)</code> to remove the multindex and flatten the results.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df.groupby('id').head(2).reset_index(drop=True)\u000a    id  value\u000a0   1      1\u000a1   1      2\u000a2   2      1\u000a3   2      2\u000a4   3      1\u000a5   4      1\u000a</code></pre>\u000a
p729
sVquestion_id
p730
I20069009
sVlast_activity_date
p731
I1384858901
sVcreation_date
p732
I1384857963
sVscore
p733
I50
sVowner
p734
(dp735
Vuser_id
p736
I872535
sVprofile_image
p737
Vhttps://i.stack.imgur.com/McIUB.png?s=128&g=1
p738
sVuser_type
p739
Vregistered
p740
sVreputation
p741
I2634
sVlink
p742
Vhttp://stackoverflow.com/users/872535/dorvak
p743
sVaccept_rate
p744
I57
sVdisplay_name
p745
Vdorvak
p746
ssVis_accepted
p747
I01
sVlast_edit_date
p748
I1384858901
sVanswer_id
p749
I20069379
sa(dp750
Vbody
p751
V<p>Try passing columns of the <code>DataFrame</code> directly to matplotlib, as in the examples below, instead of extracting them as numpy arrays.</p>\u000a\u000a<pre><code>df = pd.DataFrame(np.random.randn(10,2), columns=['col1','col2'])\u000adf['col3'] = np.arange(len(df))**2 * 100 + 100\u000a\u000aIn [5]: df\u000aOut[5]: \u000a       col1      col2  col3\u000a0 -1.000075 -0.759910   100\u000a1  0.510382  0.972615   200\u000a2  1.872067 -0.731010   500\u000a3  0.131612  1.075142  1000\u000a4  1.497820  0.237024  1700\u000a</code></pre>\u000a\u000a<h3>Vary scatter point size based on another column</h3>\u000a\u000a<pre><code>plt.scatter(df.col1, df.col2, s=df.col3)\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/FA5KP.png" alt="enter image description here"></p>\u000a\u000a<h3>Vary scatter point color based on another column</h3>\u000a\u000a<pre><code>colors = np.where(df.col3 &gt; 300, 'r', 'k')\u000aplt.scatter(df.col1, df.col2, s=120, c=colors)\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/rghSv.png" alt="enter image description here"></p>\u000a\u000a<h3>Scatter plot with legend</h3>\u000a\u000a<p>However, the easiest way I've found to create a scatter plot with legend is to call <code>plt.scatter</code> once for each point type.</p>\u000a\u000a<pre><code>cond = df.col3 &gt; 300\u000asubset_a = df[cond].dropna()\u000asubset_b = df[~cond].dropna()\u000aplt.scatter(subset_a.col1, subset_a.col2, s=120, c='b', label='col3 &gt; 300')\u000aplt.scatter(subset_b.col1, subset_b.col2, s=60, c='r', label='col3 &lt;= 300') \u000aplt.legend()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/tlibK.png" alt="enter image description here"></p>\u000a\u000a<h3><em>Update</em></h3>\u000a\u000a<p>From what I can tell, matplotlib simply skips points with NA x/y coordinates or NA style settings (e.g., color/size).  To find points skipped due to NA, try the <code>isnull</code> method: <code>df[df.col3.isnull()]</code></p>\u000a\u000a<p>To split a list of points into many types, take a look at <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html" rel="noreferrer">numpy <code>select</code></a>, which is a vectorized if-then-else implementation and accepts an optional default value.  For example:</p>\u000a\u000a<pre><code>df['subset'] = np.select([df.col3 &lt; 150, df.col3 &lt; 400, df.col3 &lt; 600],\u000a                         [0, 1, 2], -1)\u000afor color, label in zip('bgrm', [0, 1, 2, -1]):\u000a    subset = df[df.subset == label]\u000a    plt.scatter(subset.col1, subset.col2, s=120, c=color, label=str(label))\u000aplt.legend()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/CtA9s.png" alt="enter image description here"></p>\u000a
p752
sVquestion_id
p753
I14300137
sVlast_activity_date
p754
I1384529676
sVcreation_date
p755
I1358102938
sVscore
p756
I68
sVowner
p757
(dp758
Vuser_id
p759
I243434
sVprofile_image
p760
Vhttps://www.gravatar.com/avatar/cb2009391875d8019a858f2d9d0fe391?s=128&d=identicon&r=PG
p761
sVuser_type
p762
Vregistered
p763
sVreputation
p764
I13076
sVlink
p765
Vhttp://stackoverflow.com/users/243434/garrett
p766
sVdisplay_name
p767
VGarrett
p768
ssVis_accepted
p769
I01
sVlast_edit_date
p770
I1384529676
sVanswer_id
p771
I14306902
sa(dp772
Vbody
p773
V<p>I am facing the same issue, and, like you, I would like a simple decorator to wrap around a Django ajax view in order to handle authentication in the same way that I have other views.  One approach that seems promising to me is to use such a decorator in conjunction with JavaScript that looks for a certain value in the response.</p>\u000a\u000a<p>Here is <s>first</s> revised draft of the decorator:</p>\u000a\u000a<pre><code>from functools import wraps\u000a\u000adef ajax_login_required(view_func):\u000a    @wraps(view_func)\u000a    def wrapper(request, *args, **kwargs):\u000a        if request.user.is_authenticated():\u000a            return view_func(request, *args, **kwargs)\u000a        json = simplejson.dumps({ 'not_authenticated': True })\u000a        return HttpResponse(json, mimetype='application/json')\u000a    return wrapper\u000a</code></pre>\u000a\u000a<p>Here is the view:</p>\u000a\u000a<pre><code>@ajax_login_required\u000adef ajax_update_module(request, module_slug, action):\u000a    # Etc ...\u000a    return HttpResponse(json, mimetype='application/json')\u000a</code></pre>\u000a\u000a<p>And here is the JavaScript (jQuery):</p>\u000a\u000a<pre><code>$.post('/restricted-url/', data, function(json) {\u000a    if (json.not_authenticated) {\u000a        alert('Not authorized.');  // Or something in a message DIV\u000a        return;\u000a    }\u000a    // Etc ...\u000a});\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>EDIT</strong>: I've attempted to use <code>functools.wraps</code>, as suggested.  I have not actually used this decorator in working code, so beware of possible bugs.</p>\u000a
p774
sVquestion_id
p775
I312925
sVlast_activity_date
p776
I1383235592
sVcreation_date
p777
I1233984002
sVscore
p778
I50
sVowner
p779
(dp780
Vuser_id
p781
I61048
sVprofile_image
p782
Vhttps://www.gravatar.com/avatar/ce0e172d9ca4f4e7735f9bd9929f381f?s=128&d=identicon&r=PG
p783
sVuser_type
p784
Vregistered
p785
sVreputation
p786
I3578
sVlink
p787
Vhttp://stackoverflow.com/users/61048/eric-walker
p788
sVaccept_rate
p789
I67
sVdisplay_name
p790
VEric Walker
p791
ssVis_accepted
p792
I01
sVlast_edit_date
p793
I1383235592
sVanswer_id
p794
I523196
sa(dp795
Vbody
p796
V<p>For an arbitrary number of levels:</p>\u000a\u000a<pre><code>def rec_dd():\u000a    return defaultdict(rec_dd)\u000a\u000a&gt;&gt;&gt; x = rec_dd()\u000a&gt;&gt;&gt; x['a']['b']['c']['d']\u000adefaultdict(&lt;function rec_dd at 0x7f0dcef81500&gt;, {})\u000a&gt;&gt;&gt; print json.dumps(x)\u000a{"a": {"b": {"c": {"d": {}}}}}\u000a</code></pre>\u000a\u000a<p>Of course you could also do this with a lambda, but I find lambdas to be less readable.  In any case it would look like this:</p>\u000a\u000a<pre><code>rec_dd = lambda: defaultdict(rec_dd)\u000a</code></pre>\u000a
p797
sVquestion_id
p798
I19189274
sVlast_activity_date
p799
I1380915235
sVcreation_date
p800
I1380915235
sVscore
p801
I62
sVowner
p802
(dp803
Vuser_id
p804
I505154
sVprofile_image
p805
Vhttps://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=128&d=identicon&r=PG
p806
sVuser_type
p807
Vregistered
p808
sVreputation
p809
I114239
sVlink
p810
Vhttp://stackoverflow.com/users/505154/andrew-clark
p811
sVaccept_rate
p812
I100
sVdisplay_name
p813
VAndrew Clark
p814
ssVis_accepted
p815
I01
sVanswer_id
p816
I19189356
sa(dp817
Vbody
p818
V<p>If all you need is the <code>stdout</code> output, then take a look at <a href="http://docs.python.org/2/library/subprocess.html#subprocess.check_output"><code>subprocess.check_output()</code></a> (added in Python 2.7):</p>\u000a\u000a<pre><code>import subprocess\u000a\u000abatcmd="dir"\u000aresult = subprocess.check_output(batcmd, shell=True)\u000a</code></pre>\u000a\u000a<p>Because you were using <code>os.system()</code>, you'd have to set <code>shell=True</code> to get the same behaviour. You do want to heed the <a href="http://docs.python.org/2/library/subprocess.html#frequently-used-arguments">big red warning message</a> about passing untrusted arguments to your shell.</p>\u000a\u000a<p>If you need to capture <code>stderr</code> as well, simply add <code>stderr=subprocess.STDOUT</code> to the call:</p>\u000a\u000a<pre><code>result = subprocess.check_output([batcmd], stderr=subprocess.STDOUT)\u000a</code></pre>\u000a\u000a<p>to redirect the error output to the default output stream.</p>\u000a
p819
sVquestion_id
p820
I18739239
sVlast_activity_date
p821
I1378899365
sVcreation_date
p822
I1378898663
sVscore
p823
I59
sVowner
p824
(dp825
Vuser_id
p826
I100297
sVprofile_image
p827
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p828
sVuser_type
p829
Vmoderator
p830
sVreputation
p831
I554897
sVlink
p832
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p833
sVdisplay_name
p834
VMartijn Pieters
p835
ssVis_accepted
p836
I01
sVlast_edit_date
p837
I1378899365
sVanswer_id
p838
I18739828
sa(dp839
Vbody
p840
V<p>This is an excellent question.  It took me forever to figure out.  This is the solution that works for me:</p>\u000a\u000a<p>Apparently, if <code>pip</code> can find a local version of the package, <code>pip</code> will prefer the local versions to remote ones.  I even disconnected my computer from the internet and tried it again -- when <code>pip</code> still installed the package successfully, and didn't even complain, the source was obviously local.  </p>\u000a\u000a<p>The really confusing part, in my case, was that <code>pip</code> found the newer versions on <a href="https://pypi.python.org/pypi">pypi</a>, reported them, and then went ahead and re-installed the older version anyway ... arggh.  Also, it didn't tell me what it was doing, and why.</p>\u000a\u000a<p>So how did I solve this problem?</p>\u000a\u000a<p>You can get <code>pip</code> to give verbose output using the <code>-v</code> flag ... but one isn't enough.  I RTFM-ed the help, which said you can do <code>-v</code> multiple times, up to 3x, for more verbose output.  So I did:</p>\u000a\u000a<pre><code>pip install -v -v -v &lt;my_package&gt;\u000a</code></pre>\u000a\u000a<p>Then I looked through the output.  One line caught my eye:</p>\u000a\u000a<blockquote>\u000a  <p>Source in /tmp/pip-build-root/ has version 0.0.11, which satisfies requirement &lt;my_package&gt;</p>\u000a</blockquote>\u000a\u000a<p>I deleted that directory, after which <code>pip</code> installed the newest version from pypi.</p>\u000a
p841
sVquestion_id
p842
I14617136
sVlast_activity_date
p843
I1373289010
sVcreation_date
p844
I1371492567
sVscore
p845
I57
sVowner
p846
(dp847
Vuser_id
p848
I894284
sVprofile_image
p849
Vhttps://www.gravatar.com/avatar/5b15ac856b808e329185b1f653805d09?s=128&d=identicon&r=PG
p850
sVuser_type
p851
Vregistered
p852
sVreputation
p853
I26929
sVlink
p854
Vhttp://stackoverflow.com/users/894284/matt-fenwick
p855
sVaccept_rate
p856
I75
sVdisplay_name
p857
VMatt Fenwick
p858
ssVis_accepted
p859
I01
sVlast_edit_date
p860
I1373289010
sVanswer_id
p861
I17153977
sa(dp862
Vbody
p863
V<p>All required parameters must be placed before any default arguments. Simply because they are mandatory, whereas default arguments are not. Syntactically, it would be <em>impossible</em> for the interpreter to decide which values match which arguments if mixed modes were allowed. A <code>SyntaxError</code> is raised if the arguments are not given in the correct order:</p>\u000a\u000a<p>Let us take a look at keyword arguments, using your function.</p>\u000a\u000a<pre><code>def fun1(a="who is you", b="True", x, y):\u000a...     print a,b,x,y\u000a</code></pre>\u000a\u000a<p>Suppose its allowed to declare function as above,\u000aThen with the above declarations, we can make the following (regular) positional or keyword argument calls:</p>\u000a\u000a<pre><code>func1("ok a", "ok b", 1)  # Is 1 assigned to x or ?\u000afunc1(1)                  # Is 1 assigned to a or ?\u000afunc1(1, 2)               # ?\u000a</code></pre>\u000a\u000a<p>How you will suggest the assignment of variables in the function call, how default arguments are going to be used along with keyword arguments.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def fun1(x, y, a="who is you", b="True"):\u000a...     print a,b,x,y\u000a... \u000a</code></pre>\u000a\u000a<p><em>Reference O'Reilly - Core-Python</em><br>\u000a                                                               Where as this function make use of the default arguments syntactically correct for above function calls.\u000aKeyword arguments calling prove useful for being able to provide for out-of-order positional arguments, but, coupled with default arguments, they can also be used to "skip over" missing arguments as well.</p>\u000a
p864
sVquestion_id
p865
I16932825
sVlast_activity_date
p866
I1370417487
sVcreation_date
p867
I1370416138
sVscore
p868
I52
sVowner
p869
(dp870
Vuser_id
p871
I1573422
sVprofile_image
p872
Vhttps://www.gravatar.com/avatar/58c29ec0548e4fd339585183de15e3e1?s=128&d=identicon&r=PG
p873
sVuser_type
p874
Vregistered
p875
sVreputation
p876
I2194
sVlink
p877
Vhttp://stackoverflow.com/users/1573422/rahul-gautam
p878
sVdisplay_name
p879
VRahul Gautam
p880
ssVis_accepted
p881
I01
sVlast_edit_date
p882
I1370417487
sVanswer_id
p883
I16933624
sa(dp884
Vbody
p885
V<p>Here are a few thoughts... I have only used Numpy, Scipy, and Matplotlib for financial calculations.</p>\u000a\u000a<ul>\u000a<li><a href="http://www.advogato.org/proj/py-fi/" rel="noreferrer">py-fi</a> - very basic financial functions</li>\u000a<li><a href="https://code.google.com/p/fin2py/" rel="noreferrer">fin2py</a> - financial tools</li>\u000a<li><a href="http://www.scipy.org" rel="noreferrer">Numpy/Scipy</a> - covers all of the statistics basics</li>\u000a<li><a href="http://matplotlib.sourceforge.net" rel="noreferrer">Matplotlib</a> - plotting financial functions</li>\u000a<li><a href="http://rpy.sourceforge.net/" rel="noreferrer">RPy</a> - a Python interface to R allowing use of R libraries</li>\u000a<li><a href="http://www.goldb.org/ystockquote.html" rel="noreferrer">ystockquote</a> - Python API for Yahoo! Stock Data</li>\u000a<li><a href="http://quantlib.org" rel="noreferrer">QuantLib</a> - Open source library (supposedly has Python Bindings)</li>\u000a<li><a href="http://code.google.com/p/pyfinancial/" rel="noreferrer">PyFinancial</a> - Docs in Spanish</li>\u000a<li><a href="https://github.com/escheffel/pymaclab/" rel="noreferrer">PyMacLab</a> - "Series of classes useful for conducting research in dynamic macroeconomics"</li>\u000a<li><a href="http://code.google.com/p/tsdb/" rel="noreferrer">TSDB</a> - for storing large volumes of time series data</li>\u000a<li><a href="http://code.google.com/p/pyvol/" rel="noreferrer">PyVol</a> - volatility estimation of financial time series</li>\u000a</ul>\u000a
p886
sVquestion_id
p887
I4406481
sVlast_activity_date
p888
I1369678475
sVcreation_date
p889
I1291966837
sVscore
p890
I66
sVowner
p891
(dp892
Vuser_id
p893
I537258
sVprofile_image
p894
Vhttps://www.gravatar.com/avatar/b9def9333d059e80ccb5b833b016f70d?s=128&d=identicon&r=PG
p895
sVuser_type
p896
Vregistered
p897
sVreputation
p898
I3265
sVlink
p899
Vhttp://stackoverflow.com/users/537258/arboc7
p900
sVaccept_rate
p901
I100
sVdisplay_name
p902
Varboc7
p903
ssVis_accepted
p904
I01
sVlast_edit_date
p905
I1369678475
sVanswer_id
p906
I4406666
sa(dp907
Vbody
p908
V<p>If you are talking about test/dev environments, then just use the debug option. It will auto-reload the flask app when a code change happens.</p>\u000a\u000a<pre><code>app.run(debug=True)\u000a</code></pre>\u000a\u000a<p><a href="http://flask.pocoo.org/docs/quickstart/#debug-mode" rel="noreferrer">http://flask.pocoo.org/docs/quickstart/#debug-mode</a></p>\u000a
p909
sVquestion_id
p910
I16344756
sVlast_activity_date
p911
I1367518140
sVcreation_date
p912
I1367518140
sVscore
p913
I96
sVowner
p914
(dp915
Vuser_id
p916
I1572562
sVprofile_image
p917
Vhttps://i.stack.imgur.com/iASbm.jpg?s=128&g=1
p918
sVuser_type
p919
Vregistered
p920
sVreputation
p921
I11350
sVlink
p922
Vhttp://stackoverflow.com/users/1572562/codegeek
p923
sVdisplay_name
p924
Vcodegeek
p925
ssVis_accepted
p926
I01
sVanswer_id
p927
I16344851
sa(dp928
Vbody
p929
V<blockquote>\u000a  <p>If <code>side_effect</code> is a function then whatever that function returns is\u000a  what calls to the mock return. The <code>side_effect</code> function is called with\u000a  the same arguments as the mock. This allows you to vary the return\u000a  value of the call dynamically, based on the input:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def side_effect(value):\u000a...     return value + 1\u000a...\u000a&gt;&gt;&gt; m = MagicMock(side_effect=side_effect)\u000a&gt;&gt;&gt; m(1)\u000a2\u000a&gt;&gt;&gt; m(2)\u000a3\u000a&gt;&gt;&gt; m.mock_calls\u000a[call(1), call(2)]\u000a</code></pre>\u000a</blockquote>\u000a\u000a<p><a href="http://www.voidspace.org.uk/python/mock/mock.html#calling">http://www.voidspace.org.uk/python/mock/mock.html#calling</a></p>\u000a
p930
sVquestion_id
p931
I16162015
sVlast_activity_date
p932
I1366697145
sVcreation_date
p933
I1366697145
sVscore
p934
I62
sVowner
p935
(dp936
Vuser_id
p937
I148870
sVprofile_image
p938
Vhttps://www.gravatar.com/avatar/559f9b4a76982a9c3e496e2e7686d4b1?s=128&d=identicon&r=PG
p939
sVuser_type
p940
Vregistered
p941
sVreputation
p942
I274118
sVlink
p943
Vhttp://stackoverflow.com/users/148870/amber
p944
sVdisplay_name
p945
VAmber
p946
ssVis_accepted
p947
I01
sVanswer_id
p948
I16162114
sa(dp949
Vbody
p950
V<pre><code>def contiguous(seq):\u000a    seq = iter(seq)\u000a    all(x is None for x in seq)        # Burn through any Nones at the beginning\u000a    any(x is None for x in seq)        # and the first group\u000a    return all(x is None for x in seq) # everthing else (if any) should be None.\u000a</code></pre>\u000a\u000a<p>Here are a couple of examples. You can use <code>next(seq)</code> to get the next item from an iterator. I'll put a mark pointing to the next item after each </p>\u000a\u000a<p>example1: </p>\u000a\u000a<pre><code>seq = iter([None, 1, 2, 3, None])        #  [None, 1, 2, 3, None]\u000a                                         # next^\u000aall(x is None for x in seq)            \u000a                                         #        next^\u000aany(x is None for x in seq)            \u000a                                         #                    next^ (off the end)\u000areturn all(x is None for x in seq)       # all returns True for the empty sequence\u000a</code></pre>\u000a\u000a<p>example2:</p>\u000a\u000a<pre><code>seq = iter([1, 2, None, 3, None, None])  #    [1, 2, None, 3, None, None]\u000a                                         # next^\u000aall(x is None for x in seq)            \u000a                                         #    next^\u000aany(x is None for x in seq)            \u000a                                         #             next^  \u000areturn all(x is None for x in seq)       # all returns False when 3 is encountered\u000a</code></pre>\u000a
p951
sVquestion_id
p952
I14721406
sVlast_activity_date
p953
I1360156072
sVcreation_date
p954
I1360125662
sVscore
p955
I44
sVowner
p956
(dp957
Vuser_id
p958
I174728
sVprofile_image
p959
Vhttps://i.stack.imgur.com/eRO75.jpg?s=128&g=1
p960
sVuser_type
p961
Vregistered
p962
sVreputation
p963
I167078
sVlink
p964
Vhttp://stackoverflow.com/users/174728/john-la-rooy
p965
sVaccept_rate
p966
I100
sVdisplay_name
p967
VJohn La Rooy
p968
ssVis_accepted
p969
I01
sVlast_edit_date
p970
I1360156072
sVanswer_id
p971
I14721700
sa(dp972
Vbody
p973
V<blockquote>\u000a  <p>Is there any specific reason as why it is not available in 2.7?</p>\u000a</blockquote>\u000a\u000a<p><a href="http://stackoverflow.com/a/11854956/63011">@Nirk</a> has already provided the reason: unfortunately, the 2.x line only receive bugfixes, and new features are developed for 3.x only.</p>\u000a\u000a<blockquote>\u000a  <p>Is there any 3rd party library providing the same feature?</p>\u000a</blockquote>\u000a\u000a<p><a href="http://pypi.python.org/pypi/repoze.lru/" rel="noreferrer"><code>repoze.lru</code></a> is a LRU cache implementation for Python 2.6, Python 2.7 and Python 3.2.</p>\u000a\u000a<p>Documentation and source code are available on <a href="https://github.com/repoze/repoze.lru" rel="noreferrer">GitHub</a>.</p>\u000a\u000a<p>Simple usage:</p>\u000a\u000a<pre><code>from repoze.lru import lru_cache\u000a\u000a@lru_cache(maxsize=500)\u000adef fib(n):\u000a    if n &lt; 2:\u000a        return n\u000a    return fib(n-1) + fib(n-2)\u000a</code></pre>\u000a
p974
sVquestion_id
p975
I11815873
sVlast_activity_date
p976
I1352126499
sVcreation_date
p977
I1344418981
sVscore
p978
I31
sVowner
p979
(dp980
Vuser_id
p981
I63011
sVprofile_image
p982
Vhttps://www.gravatar.com/avatar/6ab4f268e60bff57b813262cfbe9db6c?s=128&d=identicon&r=PG
p983
sVuser_type
p984
Vregistered
p985
sVreputation
p986
I27171
sVlink
p987
Vhttp://stackoverflow.com/users/63011/paolo-moretti
p988
sVdisplay_name
p989
VPaolo Moretti
p990
ssVis_accepted
p991
I01
sVlast_edit_date
p992
I1352126499
sVanswer_id
p993
I11861795
sa(dp994
Vbody
p995
V<p>Sure, you can use <code>.get_loc()</code>:</p>\u000a\u000a<pre><code>In [45]: df = DataFrame({"pear": [1,2,3], "apple": [2,3,4], "orange": [3,4,5]})\u000a\u000aIn [46]: df.columns\u000aOut[46]: Index([apple, orange, pear], dtype=object)\u000a\u000aIn [47]: df.columns.get_loc("pear")\u000aOut[47]: 2\u000a</code></pre>\u000a\u000a<p>although to be honest I don't often need this myself.  Usually access by name does what I want it to (<code>df["pear"]</code>, <code>df[["apple", "orange"]]</code>, or maybe <code>df.columns.isin(["orange", "pear"])</code>), although I can definitely see cases where you'd want the index number. </p>\u000a
p996
sVquestion_id
p997
I13021654
sVlast_activity_date
p998
I1350950796
sVcreation_date
p999
I1350950796
sVscore
p1000
I69
sVowner
p1001
(dp1002
Vuser_id
p1003
I487339
sVprofile_image
p1004
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p1005
sVuser_type
p1006
Vregistered
p1007
sVreputation
p1008
I147176
sVlink
p1009
Vhttp://stackoverflow.com/users/487339/dsm
p1010
sVdisplay_name
p1011
VDSM
p1012
ssVis_accepted
p1013
I01
sVanswer_id
p1014
I13021797
sa(dp1015
Vbody
p1016
V<p>In order for you to modify test1 you need to do the following:</p>\u000a\u000a<pre><code>test1 = 0\u000adef testFunc():\u000a    global test1 \u000a    test1 += 1\u000atestFunc()\u000a</code></pre>\u000a\u000a<p>If you only needed to read that global varaible you could have just printed it without using the keyword <code>global</code> as so:</p>\u000a\u000a<pre><code>test1 = 0\u000adef testFunc():\u000a     print test1 \u000atestFunc()\u000a</code></pre>\u000a\u000a<p>But whenever you need to modify a global variable you have let python know using the reserved keyword <code>global</code> </p>\u000a
p1017
sVquestion_id
p1018
I11904981
sVlast_activity_date
p1019
I1344613486
sVcreation_date
p1020
I1344613428
sVscore
p1021
I85
sVowner
p1022
(dp1023
Vuser_id
p1024
I1396465
sVprofile_image
p1025
Vhttps://www.gravatar.com/avatar/8f2fd01bc5978aaa40d64972a42937f6?s=128&d=identicon&r=PG
p1026
sVuser_type
p1027
Vregistered
p1028
sVreputation
p1029
I4322
sVlink
p1030
Vhttp://stackoverflow.com/users/1396465/florin-stingaciu
p1031
sVaccept_rate
p1032
I95
sVdisplay_name
p1033
VFlorin Stingaciu
p1034
ssVis_accepted
p1035
I01
sVlast_edit_date
p1036
I1344613486
sVanswer_id
p1037
I11905051
sa(dp1038
Vbody
p1039
V<p>per pip install -h the "egg" string is the directory that gets checked out as part of the install</p>\u000a
p1040
sVquestion_id
p1041
I11835396
sVlast_activity_date
p1042
I1344285213
sVcreation_date
p1043
I1344285213
sVscore
p1044
I18
sVowner
p1045
(dp1046
Vuser_id
p1047
I621736
sVprofile_image
p1048
Vhttps://i.stack.imgur.com/9hVqd.jpg?s=128&g=1
p1049
sVuser_type
p1050
Vregistered
p1051
sVreputation
p1052
I3966
sVlink
p1053
Vhttp://stackoverflow.com/users/621736/will-ayd
p1054
sVaccept_rate
p1055
I93
sVdisplay_name
p1056
VWill Ayd
p1057
ssVis_accepted
p1058
I01
sVanswer_id
p1059
I11835524
sa(dp1060
Vbody
p1061
V<p>I don't think that there is something better than <code>sphinx</code> for documenting python projects at the moment.</p>\u000a\u000a<p>To have a clearer docstring my favorite choice is using <code>sphinx</code> together with <a href="http://pypi.python.org/pypi/numpydoc"><code>numpydoc</code></a>. Based on your example this would look like:</p>\u000a\u000a<pre><code>def foo(path, field_storage, temporary):\u000a    """This is function foo\u000a\u000a    Parameters\u000a    ----------\u000a    path : str\u000a        The path of the file to wrap\u000a    field_storage : :class:`FileStorage`\u000a        The :class:`FileStorage` instance to wrap\u000a    temporary : bool\u000a        Whether or not to delete the file when the File instance\u000a        is destructed\u000a\u000a    Returns\u000a    -------\u000a    describe : type\u000a        Explanation\u000a    ...\u000a\u000a    Examples\u000a    --------\u000a    These are written in doctest format, and should illustrate how to\u000a    use the function.\u000a\u000a    &gt;&gt;&gt; a=[1,2,3]\u000a    &gt;&gt;&gt; print [x + 3 for x in a]\u000a    [4, 5, 6]\u000a    ...\u000a    """\u000a\u000a    pass\u000a</code></pre>\u000a\u000a<p>(a full example is <a href="https://github.com/numpy/numpy/blob/master/doc/example.py">Here</a>), \u000aHTML output will look like <a href="http://docs.scipy.org/doc/numpy-1.6.0/reference/generated/numpy.arange.html#numpy.arange">this</a></p>\u000a\u000a<p>I think the structure of the rst-file is clearer and more readable. The <a href="https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt">guide</a> gives some more information and conventions. The <code>numpydoc</code> extension works with <code>autodoc</code> as well.</p>\u000a
p1062
sVquestion_id
p1063
I11163436
sVlast_activity_date
p1064
I1343248779
sVcreation_date
p1065
I1340529265
sVscore
p1066
I30
sVowner
p1067
(dp1068
Vuser_id
p1069
I1301710
sVprofile_image
p1070
Vhttps://www.gravatar.com/avatar/c09e91f8758f4ea83dbaa5e199ebb71a?s=128&d=identicon&r=PG
p1071
sVuser_type
p1072
Vregistered
p1073
sVreputation
p1074
I14938
sVlink
p1075
Vhttp://stackoverflow.com/users/1301710/bmu
p1076
sVdisplay_name
p1077
Vbmu
p1078
ssVis_accepted
p1079
I01
sVlast_edit_date
p1080
I1343248779
sVanswer_id
p1081
I11176267
sa(dp1082
Vbody
p1083
V<p>You need to install the Python development files.  I believe this will do it:</p>\u000a\u000a<pre><code>sudo apt-get install python-dev\u000a</code></pre>\u000a
p1084
sVquestion_id
p1085
I11596839
sVlast_activity_date
p1086
I1342916335
sVcreation_date
p1087
I1342916335
sVscore
p1088
I122
sVowner
p1089
(dp1090
Vuser_id
p1091
I14343
sVprofile_image
p1092
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p1093
sVuser_type
p1094
Vregistered
p1095
sVreputation
p1096
I193903
sVlink
p1097
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p1098
sVaccept_rate
p1099
I80
sVdisplay_name
p1100
VNed Batchelder
p1101
ssVis_accepted
p1102
I01
sVanswer_id
p1103
I11596845
sa(dp1104
Vbody
p1105
V<p>You are calling the wrong class name in your super() call:</p>\u000a\u000a<pre><code>class SimpleHelloWorld(IRCReplyModule):\u000a\u000a     def __init__(self):\u000a            #super(IRCReplyModule,self).__init__('hello world')\u000a            super(SimpleHelloWorld,self).__init__('hello world')\u000a</code></pre>\u000a\u000a<p>Essentially what you are resolving to is the <code>__init__</code> of the object base class which takes no params.</p>\u000a\u000a<p>Its a bit redundant, I know, to have to specify the class that you are already inside of, which is why in python3 you can just do:  <code>super().__init__()</code></p>\u000a
p1106
sVquestion_id
p1107
I11179008
sVlast_activity_date
p1108
I1340554540
sVcreation_date
p1109
I1340554540
sVscore
p1110
I63
sVowner
p1111
(dp1112
Vuser_id
p1113
I496445
sVprofile_image
p1114
Vhttps://www.gravatar.com/avatar/db00d7b4388686c6d280e8f0578c7e39?s=128&d=identicon&r=PG
p1115
sVuser_type
p1116
Vregistered
p1117
sVreputation
p1118
I59249
sVlink
p1119
Vhttp://stackoverflow.com/users/496445/jdi
p1120
sVaccept_rate
p1121
I97
sVdisplay_name
p1122
Vjdi
p1123
ssVis_accepted
p1124
I01
sVanswer_id
p1125
I11179026
sa(dp1126
Vbody
p1127
V<pre><code>print ', '.join(names)\u000a</code></pre>\u000a\u000a<p>This, like it sounds, just takes all the elements of the list and joins them with <code>', '</code>.</p>\u000a
p1128
sVquestion_id
p1129
I11178061
sVlast_activity_date
p1130
I1340546467
sVcreation_date
p1131
I1340546467
sVscore
p1132
I68
sVowner
p1133
(dp1134
Vuser_id
p1135
I1172428
sVprofile_image
p1136
Vhttps://www.gravatar.com/avatar/240fe123035f1c6e184f59da2f1465d9?s=128&d=identicon&r=PG
p1137
sVuser_type
p1138
Vregistered
p1139
sVreputation
p1140
I31837
sVlink
p1141
Vhttp://stackoverflow.com/users/1172428/fatalerror
p1142
sVaccept_rate
p1143
I94
sVdisplay_name
p1144
VFatalError
p1145
ssVis_accepted
p1146
I01
sVanswer_id
p1147
I11178075
sa(dp1148
Vbody
p1149
V<p>I think you've just got a mixup here. Should probably be something like the following:</p>\u000a\u000a<pre><code>import zipfile\u000a\u000afh = open('test.zip', 'rb')\u000az = zipfile.ZipFile(fh)\u000afor name in z.namelist():\u000a    outpath = "C:\u005c\u005c"\u000a    z.extract(name, outpath)\u000afh.close()\u000a</code></pre>\u000a\u000a<p>and if you just want to extract all the files:</p>\u000a\u000a<pre><code>import zipfile\u000a\u000awith zipfile.ZipFile('test.zip', "r") as z:\u000a    z.extractall("C:\u005c\u005c")\u000a</code></pre>\u000a
p1150
sVquestion_id
p1151
I9431918
sVlast_activity_date
p1152
I1330093856
sVcreation_date
p1153
I1330093538
sVscore
p1154
I89
sVowner
p1155
(dp1156
Vuser_id
p1157
I821545
sVprofile_image
p1158
Vhttps://www.gravatar.com/avatar/74eb8f0b6d033d0fc97b3c33f43dc2c2?s=128&d=identicon&r=PG
p1159
sVuser_type
p1160
Vregistered
p1161
sVreputation
p1162
I7666
sVlink
p1163
Vhttp://stackoverflow.com/users/821545/secretmike
p1164
sVdisplay_name
p1165
Vsecretmike
p1166
ssVis_accepted
p1167
I01
sVlast_edit_date
p1168
I1330093856
sVanswer_id
p1169
I9432315
sa(dp1170
Vbody
p1171
V<p>I assume you wanted columns <code>1</code> and <code>9</code>? That's</p>\u000a\u000a<pre><code>data[:, [1, 9]]\u000a</code></pre>\u000a
p1172
sVquestion_id
p1173
I8386675
sVlast_activity_date
p1174
I1323095094
sVcreation_date
p1175
I1323095094
sVscore
p1176
I91
sVowner
p1177
(dp1178
Vuser_id
p1179
I166749
sVprofile_image
p1180
Vhttps://www.gravatar.com/avatar/cadb49057f720b1c1670d14bbd4567ca?s=128&d=identicon&r=PG&f=1
p1181
sVuser_type
p1182
Vregistered
p1183
sVreputation
p1184
I242543
sVlink
p1185
Vhttp://stackoverflow.com/users/166749/fred-foo
p1186
sVaccept_rate
p1187
I94
sVdisplay_name
p1188
VFred Foo
p1189
ssVis_accepted
p1190
I01
sVanswer_id
p1191
I8386737
sa(dp1192
Vbody
p1193
V<p>I recently found myself in the same boat, except I came from a mako background.  </p>\u000a\u000a<p>Mustache does not allow for template extension/inheritance but there are a few options available to you that I know of.</p>\u000a\u000a<ol>\u000a<li><p>You could use partials:</p>\u000a\u000a<pre><code>{{&gt;header}}\u000a    Hello {{name}}\u000a{{&gt;footer}}\u000a</code></pre></li>\u000a<li><p>You could inject template pre-processing functions into the context for each template that needs to inherit from some other page: </p>\u000a\u000a<pre><code>{{#extendBase}}      \u000a    Hello {{name}}\u000a{{/extendBase}} \u000a</code></pre>\u000a\u000a<p>Hash:</p>\u000a\u000a<pre><code>{\u000a   "name": "Walden",\u000a   "extendBase": function() {\u000a       return function(text) {\u000a           return "&lt;html&gt;&lt;head&gt;&lt;/head&gt;" + render(text) + "&lt;/body&gt;&lt;/html&gt;"\u000a       }\u000a   }\u000a}\u000a</code></pre></li>\u000a<li><p>Prepend and append the desired HTML to the relevant pages in your controller. </p></li>\u000a<li><p>Have a layout template ala:</p>\u000a\u000a<pre><code>{{&gt;header}}\u000a    {{{body}}}\u000a{{&gt;footer}}\u000a</code></pre>\u000a\u000a<p>And render the body in your controller, passing that to the layout template as a variable named <code>body</code>.</p></li>\u000a<li><p>Implement template inheritance, pre-mustache, in your code that loads templates.    </p></li>\u000a</ol>\u000a\u000a<p>I wouldn't, however, use the triple mustache because I don't want unescaped HTML to be appearing anywhere, it's just too risky in my opinion.</p>\u000a\u000a<p>If someone else has a better solution to this problem I'd love to hear it as well, since I haven't yet taken the plunge in any one of these directions.</p>\u000a
p1194
sVquestion_id
p1195
I7925931
sVlast_activity_date
p1196
I1320422844
sVcreation_date
p1197
I1320357948
sVscore
p1198
I56
sVowner
p1199
(dp1200
Vuser_id
p1201
I1024950
sVprofile_image
p1202
Vhttps://www.gravatar.com/avatar/10d8060f2fe8a16ab153c472e4edf777?s=128&d=identicon&r=PG
p1203
sVuser_type
p1204
Vregistered
p1205
sVreputation
p1206
I588
sVlink
p1207
Vhttp://stackoverflow.com/users/1024950/walden
p1208
sVdisplay_name
p1209
VWalden
p1210
ssVis_accepted
p1211
I01
sVlast_edit_date
p1212
I1320422844
sVanswer_id
p1213
I8002498
sa(dp1214
Vbody
p1215
V<p>You do this using the modulus operator, <code>%</code></p>\u000a\u000a<pre><code>n % k == 0\u000a</code></pre>\u000a\u000a<p>evaluates true if and only if <code>n</code> is an exact multiple of <code>k</code>. In elementary maths this is known as the remainder from a division.</p>\u000a\u000a<p>In your current approach you perform a division and the result will be either</p>\u000a\u000a<ul>\u000a<li>always an integer if you use integer division, or</li>\u000a<li>always a float if you use floating point division.</li>\u000a</ul>\u000a\u000a<p>It's just the wrong way to go about testing divisibility.</p>\u000a
p1216
sVquestion_id
p1217
I8002217
sVlast_activity_date
p1218
I1320356631
sVcreation_date
p1219
I1320356343
sVscore
p1220
I105
sVowner
p1221
(dp1222
Vuser_id
p1223
I505088
sVprofile_image
p1224
Vhttps://www.gravatar.com/avatar/3c0aac2191718ef0309dbc034d9b9961?s=128&d=identicon&r=PG
p1225
sVuser_type
p1226
Vregistered
p1227
sVreputation
p1228
I457525
sVlink
p1229
Vhttp://stackoverflow.com/users/505088/david-heffernan
p1230
sVaccept_rate
p1231
I92
sVdisplay_name
p1232
VDavid Heffernan
p1233
ssVis_accepted
p1234
I01
sVlast_edit_date
p1235
I1320356631
sVanswer_id
p1236
I8002234
sa(dp1237
Vbody
p1238
V<p>We'll combine graph-theory and probability:</p>\u000a\u000a<p>On the 1st day, build a set of all feasible solutions. Lets denote the solutions set as A1={a1(1), a1(2),...,a1(n)}.</p>\u000a\u000a<p>On the second day you can again build the solutions set A2.</p>\u000a\u000a<p>Now, for each element in A2, you'll need to check if it can be reached from each element of A1 (given x% tolerance). If so - connect A2(n) to A1(m). If it can't be reached from any node in A1(m) - you can delete this node.</p>\u000a\u000a<p>Basically we are building a connected directed acyclic graph.</p>\u000a\u000a<p>All paths in the graph are equally likely. You can find an exact solution only when there is a single edge from Am to Am+1 (from a node in Am to a node in Am+1).</p>\u000a\u000a<p>Sure, some nodes appear in more paths than other nodes. The probability for each node can be directly deduced based on the number of paths that contains this node.</p>\u000a\u000a<p>By assigning a weight to each node, which equals to the number of paths that leads to this node, there is no need to keep all history, but only the previous day.</p>\u000a\u000a<p>Also, have a look at <a href="http://stackoverflow.com/questions/1467907/algorithm-to-determine-non-negative-values-solution-existance-for-linear-diophant">non-negative-values linear diphantine equations</a> - A question I asked a while ago. The accepted answer is a great way to enumarte all combos in each step.</p>\u000a
p1239
sVquestion_id
p1240
I7694978
sVlast_activity_date
p1241
I1318074770
sVcreation_date
p1242
I1318072018
sVscore
p1243
I11
sVowner
p1244
(dp1245
Vuser_id
p1246
I171006
sVprofile_image
p1247
Vhttps://i.stack.imgur.com/unCkx.jpg?s=128&g=1
p1248
sVuser_type
p1249
Vregistered
p1250
sVreputation
p1251
I12763
sVlink
p1252
Vhttp://stackoverflow.com/users/171006/lior-kogan
p1253
sVaccept_rate
p1254
I65
sVdisplay_name
p1255
VLior Kogan
p1256
ssVis_accepted
p1257
I01
sVlast_edit_date
p1258
I1318074770
sVanswer_id
p1259
I7696379
sa(dp1260
Vbody
p1261
V<p>You can write one yourself:</p>\u000a\u000a<pre><code>def listdir_nohidden(path):\u000a    for f in os.listdir(path):\u000a        if not f.startswith('.'):\u000a            yield f\u000a</code></pre>\u000a\u000a<p>Or you can use a <a href="http://docs.python.org/library/glob.html">glob</a>:</p>\u000a\u000a<pre><code>def listdir_nohidden(path):\u000a    return glob.glob(os.path.join(path, '*'))\u000a</code></pre>\u000a\u000a<p>Either of these will ignore all filenames beginning with <code>'.'</code>.</p>\u000a
p1262
sVquestion_id
p1263
I7099290
sVlast_activity_date
p1264
I1313615394
sVcreation_date
p1265
I1313614413
sVscore
p1266
I55
sVowner
p1267
(dp1268
Vuser_id
p1269
I9530
sVprofile_image
p1270
Vhttps://www.gravatar.com/avatar/924800e76876546c5c575c0175e1f434?s=128&d=identicon&r=PG
p1271
sVuser_type
p1272
Vregistered
p1273
sVreputation
p1274
I259251
sVlink
p1275
Vhttp://stackoverflow.com/users/9530/adam-rosenfield
p1276
sVaccept_rate
p1277
I78
sVdisplay_name
p1278
VAdam Rosenfield
p1279
ssVis_accepted
p1280
I01
sVlast_edit_date
p1281
I1313615394
sVanswer_id
p1282
I7099342
sa(dp1283
Vbody
p1284
V<p>What you're doing should absolutely work. I tested out your class, and aside from a missing opening parenthesis in your log statements, it works just fine. There are only two things I can think of. First, is the output of your log statement set correctly? You might need to put a <code>logging.basicConfig(level=logging.DEBUG)</code> at the top of your script. </p>\u000a\u000a<p>Second, <code>__getitem__</code> and <code>__setitem__</code> are only called during <code>[]</code> accesses. So make sure you only access <code>DictWatch</code> via <code>d[key]</code>, rather than <code>d.get()</code> and <code>d.set()</code></p>\u000a
p1285
sVquestion_id
p1286
I2390827
sVlast_activity_date
p1287
I1313129225
sVcreation_date
p1288
I1267836136
sVscore
p1289
I18
sVowner
p1290
(dp1291
Vuser_id
p1292
I139993
sVprofile_image
p1293
Vhttps://www.gravatar.com/avatar/8671bf5ef615345a04355532d98c1c42?s=128&d=identicon&r=PG
p1294
sVuser_type
p1295
Vregistered
p1296
sVreputation
p1297
I2581
sVlink
p1298
Vhttp://stackoverflow.com/users/139993/braincore
p1299
sVaccept_rate
p1300
I59
sVdisplay_name
p1301
VBrainCore
p1302
ssVis_accepted
p1303
I01
sVlast_edit_date
p1304
I1313129225
sVanswer_id
p1305
I2390889
sa(dp1306
Vbody
p1307
V<p>use logspace() to create a geometric sequence, and pass it to bins parameter. And set the scale of xaxis to log scale.</p>\u000a\u000a<pre><code>import pylab as pl\u000aimport numpy as np\u000a\u000adata = np.random.normal(size=10000)\u000apl.hist(data, bins=np.logspace(0.1, 1.0, 50))\u000apl.gca().set_xscale("log")\u000apl.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/HmY2I.png" alt="enter image description here"></p>\u000a
p1308
sVquestion_id
p1309
I6855710
sVlast_activity_date
p1310
I1311842225
sVcreation_date
p1311
I1311842225
sVscore
p1312
I66
sVowner
p1313
(dp1314
Vuser_id
p1315
I772649
sVprofile_image
p1316
Vhttps://www.gravatar.com/avatar/03ad01df45fef92e267641197ad00e36?s=128&d=identicon&r=PG
p1317
sVuser_type
p1318
Vregistered
p1319
sVreputation
p1320
I49502
sVlink
p1321
Vhttp://stackoverflow.com/users/772649/hyry
p1322
sVaccept_rate
p1323
I56
sVdisplay_name
p1324
VHYRY
p1325
ssVis_accepted
p1326
I01
sVanswer_id
p1327
I6856155
sa(dp1328
Vbody
p1329
V<p>All of the tables are collected in the <code>tables</code> attribute of the sqlalchemy MetaData object.  to just get a list of the names of those tables:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; metadata.tables.keys()\u000a['posts', 'comments', 'users']\u000a</code></pre>\u000a\u000a<p>If you're using the declarative extension, then you probably aren't managing the metadata yourself.  Fortunately, the metadata is still present on the baseclass, </p>\u000a\u000a<pre><code>&gt;&gt;&gt; Base = sqlalchemy.ext.declarative.declarative_base()\u000a&gt;&gt;&gt; Base.metadata\u000aMetaData(None)\u000a</code></pre>\u000a\u000a<p>If you are trying to figure out what tables are present in your database, even among the ones you haven't even told sqlalchemy about yet, then you can use table reflection.  sqlalchemy will then inspect the database and update the metadata with all of the missing tables.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; metadata.reflect(engine)\u000a</code></pre>\u000a
p1330
sVquestion_id
p1331
I6473925
sVlast_activity_date
p1332
I1308951608
sVcreation_date
p1333
I1308951608
sVscore
p1334
I44
sVowner
p1335
(dp1336
Vuser_id
p1337
I65696
sVprofile_image
p1338
Vhttps://www.gravatar.com/avatar/d8da959b2a586b4a147604e6f534a9fe?s=128&d=identicon&r=PG
p1339
sVuser_type
p1340
Vregistered
p1341
sVreputation
p1342
I91218
sVlink
p1343
Vhttp://stackoverflow.com/users/65696/singlenegationelimination
p1344
sVaccept_rate
p1345
I85
sVdisplay_name
p1346
VSingleNegationElimination
p1347
ssVis_accepted
p1348
I01
sVanswer_id
p1349
I6474046
sa(dp1350
Vbody
p1351
V<p>You can use the <code>until</code> command.  Output of <code>help until</code> in <code>pdb</code>:</p>\u000a\u000a<blockquote>\u000a  <p>unt(il)<br>\u000a  Continue execution until the line with a number greater than the current\u000a  one is reached or until the current frame returns</p>\u000a</blockquote>\u000a
p1352
sVquestion_id
p1353
I6308569
sVlast_activity_date
p1354
I1307719852
sVcreation_date
p1355
I1307719852
sVscore
p1356
I57
sVowner
p1357
(dp1358
Vuser_id
p1359
I279627
sVprofile_image
p1360
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1361
sVuser_type
p1362
Vregistered
p1363
sVreputation
p1364
I252330
sVlink
p1365
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1366
sVaccept_rate
p1367
I78
sVdisplay_name
p1368
VSven Marnach
p1369
ssVis_accepted
p1370
I01
sVanswer_id
p1371
I6308596
sa(dp1372
Vbody
p1373
V<p>Everything Jochen + Sven said, plus:</p>\u000a\u000a<p>You can use <code>print()</code> it in places where you can't use <code>print</code>, such as:</p>\u000a\u000a<pre><code>[print(x) for x in range(10)]\u000a</code></pre>\u000a
p1374
sVquestion_id
p1375
I6239887
sVlast_activity_date
p1376
I1307258460
sVcreation_date
p1377
I1307258460
sVscore
p1378
I31
sVowner
p1379
(dp1380
Vuser_id
p1381
I126214
sVprofile_image
p1382
Vhttps://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=128&d=identicon&r=PG
p1383
sVuser_type
p1384
Vregistered
p1385
sVreputation
p1386
I82828
sVlink
p1387
Vhttp://stackoverflow.com/users/126214/lennart-regebro
p1388
sVaccept_rate
p1389
I100
sVdisplay_name
p1390
VLennart Regebro
p1391
ssVis_accepted
p1392
I01
sVanswer_id
p1393
I6241519
sa(dp1394
Vbody
p1395
V<p>The <code>string</code> constants may be what you want. (<a href="http://docs.python.org/library/string.html#string-constants">docs</a>)</p>\u000a\u000a<pre>\u000a>>> import string\u000a>>> string.ascii_uppercase\u000a'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\u000a</pre>\u000a\u000a<p>If you want all printable characters:</p>\u000a\u000a<pre>\u000a>>> string.printable\u000a'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\u005c'()*+,-./:;?@[\u005c\u005c]^_`{|}~ \u005ct\u005cn\u005cr\u005cx0b\u005cx0c'\u000a</pre>\u000a
p1396
sVquestion_id
p1397
I5891453
sVlast_activity_date
p1398
I1304558263
sVcreation_date
p1399
I1304556284
sVscore
p1400
I86
sVowner
p1401
(dp1402
Vuser_id
p1403
I311220
sVprofile_image
p1404
Vhttps://www.gravatar.com/avatar/333d38bdbe98c3c1b7fdb5e41c13dbc2?s=128&d=identicon&r=PG
p1405
sVuser_type
p1406
Vregistered
p1407
sVreputation
p1408
I26822
sVlink
p1409
Vhttp://stackoverflow.com/users/311220/acorn
p1410
sVaccept_rate
p1411
I94
sVdisplay_name
p1412
VAcorn
p1413
ssVis_accepted
p1414
I01
sVlast_edit_date
p1415
I1304558263
sVanswer_id
p1416
I5891469
sa(dp1417
Vbody
p1418
V<pre><code>cursor.execute("INSERT INTO .... RETURNING id")\u000aid_of_new_row = cursor.fetchone()[0]\u000a</code></pre>\u000a\u000a<p>And please do not build SQL strings containing values manually. You can (and should!) pass values separately, making it unnecessary to escape and SQL injection impossible:</p>\u000a\u000a<pre><code>sql_string = "INSERT INTO domes_hundred (name,name_slug,status) VALUES (%s,%s,%s) RETURNING id;"\u000acursor.execute(sql_string, (hundred_name, hundred_slug, status))\u000ahundred = cursor.fetchone()[0]\u000a</code></pre>\u000a\u000a<p>See the psycopg docs for more details: <a href="http://initd.org/psycopg/docs/usage.html#passing-parameters-to-sql-queries" rel="noreferrer">http://initd.org/psycopg/docs/usage.html#passing-parameters-to-sql-queries</a></p>\u000a
p1419
sVquestion_id
p1420
I5247685
sVlast_activity_date
p1421
I1299683194
sVcreation_date
p1422
I1299683194
sVscore
p1423
I97
sVowner
p1424
(dp1425
Vuser_id
p1426
I298479
sVprofile_image
p1427
Vhttps://www.gravatar.com/avatar/bc66db28aa7c3fa8e4ce4238b696dee9?s=128&d=identicon&r=PG
p1428
sVuser_type
p1429
Vmoderator
p1430
sVreputation
p1431
I202168
sVlink
p1432
Vhttp://stackoverflow.com/users/298479/thiefmaster
p1433
sVaccept_rate
p1434
I86
sVdisplay_name
p1435
VThiefMaster
p1436
ssVis_accepted
p1437
I01
sVanswer_id
p1438
I5247723
sa(dp1439
Vbody
p1440
V<p>We use Python in conjunction with h5py, numpy/scipy and boost::python to do data analysis. Our typical datasets have sizes of up to a few hundred GBs.</p>\u000a\u000a<p>HDF5 advantages:</p>\u000a\u000a<ul>\u000a<li>data can be inspected conveniently using the h5view application, h5py/ipython and the h5* commandline tools</li>\u000a<li>APIs are available for different platforms and languages</li>\u000a<li>structure data using groups</li>\u000a<li>annotating data using attributes  </li>\u000a<li>worry-free built-in data compression</li>\u000a<li>io on single datasets is fast</li>\u000a</ul>\u000a\u000a<p>HDF5 pitfalls:</p>\u000a\u000a<ul>\u000a<li>Performance breaks down, if a h5 file contains too many datasets/groups (> 1000), because traversing them is very slow. On the other side, io is fast for a few big datasets.</li>\u000a<li>Advanced data queries (SQL like) are clumsy to implement and slow (consider SQLite in that case)</li>\u000a<li>HDF5 is not thread-safe in all cases: one has to ensure, that the library was compiled with the correct options</li>\u000a<li>changing h5 datasets (resize, delete etc.) blows up the file size (in the best case) or is impossible (in the worst case) (the whole h5 file has to be copied to flatten it again)</li>\u000a</ul>\u000a
p1441
sVquestion_id
p1442
I4871670
sVlast_activity_date
p1443
I1296651583
sVcreation_date
p1444
I1296651583
sVscore
p1445
I48
sVowner
p1446
(dp1447
Vuser_id
p1448
I218681
sVprofile_image
p1449
Vhttps://www.gravatar.com/avatar/5736f812a96ba3fe8792be56e7186667?s=128&d=identicon&r=PG
p1450
sVuser_type
p1451
Vregistered
p1452
sVreputation
p1453
I2501
sVlink
p1454
Vhttp://stackoverflow.com/users/218681/bernhard-kausler
p1455
sVaccept_rate
p1456
I88
sVdisplay_name
p1457
VBernhard Kausler
p1458
ssVis_accepted
p1459
I01
sVanswer_id
p1460
I4874742
sa(dp1461
Vcommunity_owned_date
p1462
I1294334137
sVbody
p1463
V<p>This should work with Sqlalchemy >= 0.6</p>\u000a\u000a<pre><code>from sqlalchemy.sql import compiler\u000a\u000afrom psycopg2.extensions import adapt as sqlescape\u000a# or use the appropiate escape function from your db driver\u000a\u000adef compile_query(query):\u000a    dialect = query.session.bind.dialect\u000a    statement = query.statement\u000a    comp = compiler.SQLCompiler(dialect, statement)\u000a    comp.compile()\u000a    enc = dialect.encoding\u000a    params = {}\u000a    for k,v in comp.params.iteritems():\u000a        if isinstance(v, unicode):\u000a            v = v.encode(enc)\u000a        params[k] = sqlescape(v)\u000a    return (comp.string.encode(enc) % params).decode(enc)\u000a</code></pre>\u000a
p1464
sVquestion_id
p1465
I4617291
sVlast_activity_date
p1466
I1294334074
sVcreation_date
p1467
I1294334074
sVscore
p1468
I24
sVowner
p1469
(dp1470
Vuser_id
p1471
I560935
sVprofile_image
p1472
Vhttps://www.gravatar.com/avatar/abb278de3a27b6858ea7b49bea842ee8?s=128&d=identicon&r=PG
p1473
sVuser_type
p1474
Vregistered
p1475
sVreputation
p1476
I1865
sVlink
p1477
Vhttp://stackoverflow.com/users/560935/albertov
p1478
sVdisplay_name
p1479
Valbertov
p1480
ssVis_accepted
p1481
I01
sVanswer_id
p1482
I4617623
sa(dp1483
Vbody
p1484
V<p>Instead of capturing the part you want to <em>replace</em> you can capture the parts you want to <em>keep</em> and then refer to them using a reference <code>\u005c1</code> to include them in the substituted string.</p>\u000a\u000a<p>Try this instead:</p>\u000a\u000a<pre><code>output = re.sub(r'(&lt;textarea.*&gt;).*(&lt;/textarea&gt;)', r'\u005c1Bar\u005c2', s)\u000a</code></pre>\u000a\u000a<p>Also, assuming this is HTML you should consider using an HTML parser for this task, for example <a href="http://www.crummy.com/software/BeautifulSoup/" rel="noreferrer">Beautiful Soup</a>.</p>\u000a
p1485
sVquestion_id
p1486
I3997525
sVlast_activity_date
p1487
I1287756297
sVcreation_date
p1488
I1287756297
sVscore
p1489
I79
sVowner
p1490
(dp1491
Vuser_id
p1492
I61974
sVprofile_image
p1493
Vhttps://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=128&d=identicon&r=PG
p1494
sVuser_type
p1495
Vregistered
p1496
sVreputation
p1497
I484956
sVlink
p1498
Vhttp://stackoverflow.com/users/61974/mark-byers
p1499
sVdisplay_name
p1500
VMark Byers
p1501
ssVis_accepted
p1502
I01
sVanswer_id
p1503
I3997562
sa(dp1504
Vbody
p1505
V<pre><code>def all_same(items):\u000a    return all(x == items[0] for x in items)\u000a</code></pre>\u000a\u000a<p><strong>Example:</strong></p>\u000a\u000a<pre><code>&gt;&gt;&gt; def all_same(items):\u000a...     return all(x == items[0] for x in items)\u000a...\u000a&gt;&gt;&gt; property_list = ["one", "one", "one"]\u000a&gt;&gt;&gt; all_same(property_list)\u000aTrue\u000a&gt;&gt;&gt; property_list = ["one", "one", "two"]\u000a&gt;&gt;&gt; all_same(property_list)\u000aFalse\u000a&gt;&gt;&gt; all_same([])\u000aTrue\u000a</code></pre>\u000a
p1506
sVquestion_id
p1507
I3787908
sVlast_activity_date
p1508
I1285338172
sVcreation_date
p1509
I1285338172
sVscore
p1510
I86
sVowner
p1511
(dp1512
Vuser_id
p1513
I90308
sVprofile_image
p1514
Vhttps://www.gravatar.com/avatar/7b7aefbc459629eb4c864b825894c9c4?s=128&d=identicon&r=PG
p1515
sVuser_type
p1516
Vregistered
p1517
sVreputation
p1518
I38667
sVlink
p1519
Vhttp://stackoverflow.com/users/90308/foglebird
p1520
sVaccept_rate
p1521
I93
sVdisplay_name
p1522
VFogleBird
p1523
ssVis_accepted
p1524
I01
sVanswer_id
p1525
I3787983
sa(dp1526
Vbody
p1527
V<p>Try passing <code>shell=False</code> to sudo.  That way /bin/bash won't be added to the sudo command.  <code>sudo('some_command', shell=False)</code></p>\u000a\u000a<p>From line 503 of <a href="http://code.fabfile.org/repositories/entry/fabric/0.9/fabric/operations.py#L503" rel="noreferrer">fabric/operations.py</a>:</p>\u000a\u000a<pre><code>if (not env.use_shell) or (not shell):\u000a    real_command = "%s %s" % (sudo_prefix, _shell_escape(command))\u000a</code></pre>\u000a\u000a<p>the else block looks like this:</p>\u000a\u000a<pre><code>                                             # V-- here's where /bin/bash is added\u000areal_command = '%s %s "%s"' % (sudo_prefix, env.shell,\u000a    _shell_escape(cwd + command))\u000a</code></pre>\u000a
p1528
sVquestion_id
p1529
I3737003
sVlast_activity_date
p1530
I1284745684
sVcreation_date
p1531
I1284743265
sVscore
p1532
I32
sVowner
p1533
(dp1534
Vuser_id
p1535
I186868
sVprofile_image
p1536
Vhttps://i.stack.imgur.com/oCiSm.jpg?s=128&g=1
p1537
sVuser_type
p1538
Vregistered
p1539
sVreputation
p1540
I21838
sVlink
p1541
Vhttp://stackoverflow.com/users/186868/sdolan
p1542
sVaccept_rate
p1543
I100
sVdisplay_name
p1544
Vsdolan
p1545
ssVis_accepted
p1546
I01
sVlast_edit_date
p1547
I1284745684
sVanswer_id
p1548
I3737441
sa(dp1549
Vbody
p1550
V<p>Using <code>+=</code> with a list is like calling <code>extend</code>, not <code>+</code>.</p>\u000a\u000a<ul>\u000a<li>You can call <code>extend</code> with an iterable.</li>\u000a<li>You can only use <code>+</code> with another list.</li>\u000a</ul>\u000a\u000a<p>I can only guess why this decision was made, but I imagine it is for performance reasons. Calling <code>+</code> results in a new object being created and all items being copied, whereas <code>extend</code> can use free space in the existing list object saving a copy in some cases. </p>\u000a\u000a<p>Another side-effect of this decision is that if you write <code>x += y</code> other references to the list will see the change but if you use <code>x = x + y</code> then they will not. This is demonstrated below:</p>\u000a\u000a<pre>\u000a>>> x = ['a','b']\u000a>>> y = ['c', d']\u000a>>> z = x\u000a>>> x += y\u000a>>> z\u000a['a', 'b', 'c', 'd']\u000a\u000a>>> x = ['a','b']\u000a>>> y = ['c', d']\u000a>>> z = x\u000a>>> x = x + y\u000a>>> z\u000a['a', 'b']\u000a</pre>\u000a\u000a<p><strong>References</strong></p>\u000a\u000a<p><a href="http://svn.python.org/view/python/trunk/Objects/listobject.c?view=markup" rel="noreferrer">Python source code for list</a>.</p>\u000a\u000a<p>Source code for <code>+=</code>:</p>\u000a\u000a<pre>\u000astatic PyObject *\u000alist_inplace_concat(PyListObject *self, PyObject *other)\u000a{\u000a    PyObject *result;\u000a\u000a    result = <b>listextend</b>(self, other);\u000a    if (result == NULL)\u000a        return result;\u000a    Py_DECREF(result);\u000a    Py_INCREF(self);\u000a    return (PyObject *)self;\u000a}\u000a</pre>\u000a\u000a<p>Source code for <code>+</code>:</p>\u000a\u000a<pre>\u000astatic PyObject *\u000alist_concat(PyListObject *a, PyObject *bb)\u000a{\u000a    Py_ssize_t size;\u000a    Py_ssize_t i;\u000a    PyObject **src, **dest;\u000a    PyListObject *np;\u000a    if (!PyList_Check(bb)) {\u000a        PyErr_Format(PyExc_TypeError,\u000a                  <b>"can only concatenate list (not \u005c"%.200s\u005c") to list",</b>\u000a                  bb->ob_type->tp_name);\u000a        return NULL;\u000a    }\u000a\u000a    // etc ...\u000a</pre>\u000a
p1551
sVquestion_id
p1552
I3216706
sVlast_activity_date
p1553
I1278714002
sVcreation_date
p1554
I1278711397
sVscore
p1555
I33
sVowner
p1556
(dp1557
Vuser_id
p1558
I61974
sVprofile_image
p1559
Vhttps://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=128&d=identicon&r=PG
p1560
sVuser_type
p1561
Vregistered
p1562
sVreputation
p1563
I484956
sVlink
p1564
Vhttp://stackoverflow.com/users/61974/mark-byers
p1565
sVdisplay_name
p1566
VMark Byers
p1567
ssVis_accepted
p1568
I01
sVlast_edit_date
p1569
I1278714002
sVanswer_id
p1570
I3216728
sa(dp1571
Vbody
p1572
V<p><code>any</code> won't go beyond the first element if it's True. In case the iterator yields something false-ish you can write <code>any(True for _ in iterator)</code>.</p>\u000a
p1573
sVquestion_id
p1574
I3114252
sVlast_activity_date
p1575
I1277422101
sVcreation_date
p1576
I1277422101
sVscore
p1577
I85
sVowner
p1578
(dp1579
Vuser_id
p1580
I95612
sVprofile_image
p1581
Vhttps://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=128&d=identicon&r=PG
p1582
sVuser_type
p1583
Vregistered
p1584
sVreputation
p1585
I63439
sVlink
p1586
Vhttp://stackoverflow.com/users/95612/jochen-ritzel
p1587
sVaccept_rate
p1588
I80
sVdisplay_name
p1589
VJochen Ritzel
p1590
ssVis_accepted
p1591
I01
sVanswer_id
p1592
I3114640
sa(dp1593
Vbody
p1594
V<p>The last <code>assert</code> would have given you a warning (<code>SyntaxWarning: assertion is always true, perhaps remove parentheses?</code>) if you ran it through a full interpreter, not through IDLE.  Because <code>assert</code> is a keyword and not a function, you are actually passing in a tuple as the first argument and leaving off the second argument.</p>\u000a\u000a<p>Recall that non-empty tuples evaluate to <code>True</code>, and since the assertion message is optional, you've essentially called <code>assert True</code> when you wrote <code>assert(1==2, "hi")</code>.</p>\u000a
p1595
sVquestion_id
p1596
I3112171
sVlast_activity_date
p1597
I1277398858
sVcreation_date
p1598
I1277398858
sVscore
p1599
I56
sVowner
p1600
(dp1601
Vuser_id
p1602
I126042
sVprofile_image
p1603
Vhttps://www.gravatar.com/avatar/e9562ede99cb17789af5349379a9ef25?s=128&d=identicon&r=PG
p1604
sVuser_type
p1605
Vregistered
p1606
sVreputation
p1607
I149231
sVlink
p1608
Vhttp://stackoverflow.com/users/126042/mark-rushakoff
p1609
sVaccept_rate
p1610
I68
sVdisplay_name
p1611
VMark Rushakoff
p1612
ssVis_accepted
p1613
I01
sVanswer_id
p1614
I3112178
sa(dp1615
Vbody
p1616
V<p>Python 3.x does have <code>reduce</code>, you just have to do a <code>from functools import reduce</code>.  It also has "dict comprehensions", which have exactly the syntax in your example.</p>\u000a\u000a<p>Python 2.7 and 3.x also have a <a href="http://docs.python.org/py3k/library/collections.html#counter-objects" rel="noreferrer">Counter</a> class which does exactly what you want:</p>\u000a\u000a<pre><code>from collections import Counter\u000acnt = Counter("abracadabra")\u000a</code></pre>\u000a\u000a<p>In Python 2.6 or earlier, I'd personally use a <a href="http://docs.python.org/library/collections.html#defaultdict-objects" rel="noreferrer">defaultdict</a> and do it in 2 lines:</p>\u000a\u000a<pre><code>d = defaultdict(int)\u000afor x in xs: d[x] += 1\u000a</code></pre>\u000a\u000a<p>That's clean, efficient, Pythonic, and much easier for most people to understand than anything involving <code>reduce</code>.</p>\u000a
p1617
sVquestion_id
p1618
I2870466
sVlast_activity_date
p1619
I1274319201
sVcreation_date
p1620
I1274319201
sVscore
p1621
I75
sVowner
p1622
(dp1623
Vuser_id
p1624
I1694
sVprofile_image
p1625
Vhttps://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=128&d=identicon&r=PG
p1626
sVuser_type
p1627
Vregistered
p1628
sVreputation
p1629
I93134
sVlink
p1630
Vhttp://stackoverflow.com/users/1694/eli-courtwright
p1631
sVaccept_rate
p1632
I94
sVdisplay_name
p1633
VEli Courtwright
p1634
ssVis_accepted
p1635
I01
sVanswer_id
p1636
I2870517
sa(dp1637
Vbody
p1638
V<p>You can use <code>safe_dump</code> instead of <code>dump</code>. Just keep in mind that it won't be able to represent arbitrary Python objects then. Also, when you <code>load</code> the YAML, you will get a <code>str</code> object instead of <code>unicode</code>.</p>\u000a
p1639
sVquestion_id
p1640
I1950306
sVlast_activity_date
p1641
I1261535681
sVcreation_date
p1642
I1261535681
sVscore
p1643
I60
sVowner
p1644
(dp1645
Vuser_id
p1646
I189205
sVprofile_image
p1647
Vhttps://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG
p1648
sVuser_type
p1649
Vregistered
p1650
sVreputation
p1651
I71001
sVlink
p1652
Vhttp://stackoverflow.com/users/189205/interjay
p1653
sVdisplay_name
p1654
Vinterjay
p1655
ssVis_accepted
p1656
I01
sVanswer_id
p1657
I1950399
sa(dp1658
Vbody
p1659
V<p>There is a special-case shortcut for exactly this use case!</p>\u000a\u000a<p>If you call <code>str.split</code> without an argument, it splits on runs of whitespace instead of single characters. So:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; ' '.join("Please \u005cn don't \u005ct hurt \u005cx0b me.".split())\u000a"Please don't hurt me."\u000a</code></pre>\u000a
p1660
sVquestion_id
p1661
I1898656
sVlast_activity_date
p1662
I1260763181
sVcreation_date
p1663
I1260763181
sVscore
p1664
I140
sVowner
p1665
(dp1666
Vuser_id
p1667
I18936
sVprofile_image
p1668
Vhttps://www.gravatar.com/avatar/3f6f1bea81a68b2f1cfe3efbb9be94bc?s=128&d=identicon&r=PG
p1669
sVuser_type
p1670
Vregistered
p1671
sVreputation
p1672
I389448
sVlink
p1673
Vhttp://stackoverflow.com/users/18936/bobince
p1674
sVdisplay_name
p1675
Vbobince
p1676
ssVis_accepted
p1677
I01
sVanswer_id
p1678
I1898835
sa(dp1679
Vbody
p1680
V<p>With a 64-bit Python installation, and (say) 64 GB of memory, a Python 2 string of around 63 GB should be quite feasible (if not maximally fast).  If you can upgrade your memory much beyond that (which will cost you an arm and a leg, of course), your maximum feasible strings should get proportionally longer.  (I don't recommend relying on virtual memory to extend that by much, or your runtimes will get simply ridiculous;-).</p>\u000a\u000a<p>With a typical 32-bit Python installation, of course, the total memory you can use in your application is limited to something like 2 or 3 GB (depending on OS and configuration), so the longest strings you can use will be much smaller than in 64-bit installations with ridiculously high amounts of RAM.</p>\u000a
p1681
sVquestion_id
p1682
I1739913
sVlast_activity_date
p1683
I1258342953
sVcreation_date
p1684
I1258342953
sVscore
p1685
I61
sVowner
p1686
(dp1687
Vuser_id
p1688
I95810
sVprofile_image
p1689
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1690
sVuser_type
p1691
Vregistered
p1692
sVreputation
p1693
I516089
sVlink
p1694
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1695
sVaccept_rate
p1696
I80
sVdisplay_name
p1697
VAlex Martelli
p1698
ssVis_accepted
p1699
I01
sVanswer_id
p1700
I1739928
sa(dp1701
Vbody
p1702
V<p><a href="http://docs.python.org/library/os.html#os.walk" rel="noreferrer">os.walk</a> is the answer, this will find the first match:</p>\u000a\u000a<pre><code>import os\u000a\u000adef find(name, path):\u000a    for root, dirs, files in os.walk(path):\u000a        if name in files:\u000a            return os.path.join(root, name)\u000a</code></pre>\u000a\u000a<p>And this will find all matches:</p>\u000a\u000a<pre><code>def find_all(name, path):\u000a    result = []\u000a    for root, dirs, files in os.walk(path):\u000a        if name in files:\u000a            result.append(os.path.join(root, name))\u000a    return result\u000a</code></pre>\u000a\u000a<p>And this will match a pattern:</p>\u000a\u000a<pre><code>import os, fnmatch\u000adef find(pattern, path):\u000a    result = []\u000a    for root, dirs, files in os.walk(path):\u000a        for name in files:\u000a            if fnmatch.fnmatch(name, pattern):\u000a                result.append(os.path.join(root, name))\u000a    return result\u000a\u000afind('*.txt', '/path/to/dir')\u000a</code></pre>\u000a
p1703
sVquestion_id
p1704
I1724693
sVlast_activity_date
p1705
I1258054397
sVcreation_date
p1706
I1258053929
sVscore
p1707
I108
sVowner
p1708
(dp1709
Vuser_id
p1710
I97828
sVprofile_image
p1711
Vhttps://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG
p1712
sVuser_type
p1713
Vregistered
p1714
sVreputation
p1715
I64017
sVlink
p1716
Vhttp://stackoverflow.com/users/97828/nadia-alramli
p1717
sVdisplay_name
p1718
VNadia Alramli
p1719
ssVis_accepted
p1720
I01
sVlast_edit_date
p1721
I1258054397
sVanswer_id
p1722
I1724723
sa(dp1723
Vbody
p1724
V<p>I learned Python back before the 1.5.2 release, so the things that were key for me back then may not be the key things today.</p>\u000a\u000a<p>That being said, a crucial thing that took me a little bit to realize, but I now consider crucial: much functionality that other languages would make intrinsic is actually made available by the standard library and the built-ins.</p>\u000a\u000a<p>The language itself is small and simple, but until you're familiar with the built-ins and the "core parts" of the standard library (e.g., nowadays, <code>sys</code>, <code>itertools</code>, <code>collections</code>, <code>copy</code>, ...), you'll be reinventing the wheel over and over. So, the more time you invest in getting familiar with those parts, the smoother your progress will be.  Every time you have a task you want to do, that doesn't seem to be directly supported by the language, first ask yourself: what built-ins or modules in the standard library will make the task much simpler, or even do it all for me?  Sometimes there won't be any, but more often than not you'll find excellent solutions by proceeding with this mindset.</p>\u000a
p1725
sVquestion_id
p1726
I1710363
sVlast_activity_date
p1727
I1257880041
sVcreation_date
p1728
I1257880041
sVscore
p1729
I56
sVowner
p1730
(dp1731
Vuser_id
p1732
I95810
sVprofile_image
p1733
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1734
sVuser_type
p1735
Vregistered
p1736
sVreputation
p1737
I516089
sVlink
p1738
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1739
sVaccept_rate
p1740
I80
sVdisplay_name
p1741
VAlex Martelli
p1742
ssVis_accepted
p1743
I01
sVanswer_id
p1744
I1710411
sa(dp1745
Vbody
p1746
V<p>The easiest way might be to just override <code>sys.stdout</code>.  Slightly modifying an example from <a href="http://docs.python.org/library/multiprocessing.html#the-process-class" rel="noreferrer">the multiprocessing manual</a>:</p>\u000a\u000a<pre><code>from multiprocessing import Process\u000aimport os\u000aimport sys\u000a\u000adef info(title):\u000a    print title\u000a    print 'module name:', __name__\u000a    print 'parent process:', os.getppid()\u000a    print 'process id:', os.getpid()\u000a\u000adef f(name):\u000a    sys.stdout = open(str(os.getpid()) + ".out", "w")\u000a    info('function f')\u000a    print 'hello', name\u000a\u000aif __name__ == '__main__':\u000a    p = Process(target=f, args=('bob',))\u000a    p.start()\u000a    q = Process(target=f, args=('fred',))\u000a    q.start()\u000a    p.join()\u000a    q.join()\u000a</code></pre>\u000a\u000a<p>And running it:</p>\u000a\u000a<pre>\u000a$ ls\u000am.py\u000a$ python m.py\u000a$ ls\u000a27493.out  27494.out  m.py\u000a$ cat 27493.out \u000afunction f\u000amodule name: __main__\u000aparent process: 27492\u000aprocess id: 27493\u000ahello bob\u000a$ cat 27494.out \u000afunction f\u000amodule name: __main__\u000aparent process: 27492\u000aprocess id: 27494\u000ahello fred\u000a\u000a</pre>\u000a
p1747
sVquestion_id
p1748
I1501651
sVlast_activity_date
p1749
I1254367809
sVcreation_date
p1750
I1254367809
sVscore
p1751
I37
sVowner
p1752
(dp1753
Vuser_id
p1754
I126042
sVprofile_image
p1755
Vhttps://www.gravatar.com/avatar/e9562ede99cb17789af5349379a9ef25?s=128&d=identicon&r=PG
p1756
sVuser_type
p1757
Vregistered
p1758
sVreputation
p1759
I149231
sVlink
p1760
Vhttp://stackoverflow.com/users/126042/mark-rushakoff
p1761
sVaccept_rate
p1762
I68
sVdisplay_name
p1763
VMark Rushakoff
p1764
ssVis_accepted
p1765
I01
sVanswer_id
p1766
I1501757
sa(dp1767
Vbody
p1768
V<p>You've already listed all important advantages of making a framework (congratulations for excellent research and reporting thereof!); the only flip side is that it's harder to arrange to build one properly, but if you take your clues from the examples in the installer you quote, it should be doable.</p>\u000a\u000a<p>BTW, what's wrong with the system Python that comes with Snow Leopard? I haven't upgraded from Leopard yet (long story... I do have the "family license" upgrade DVD, but need Snow Leopard to fix some things before I can upgrade), so I have no first-hand experience with that yet, but I do know it's a 2.6 build and it comes in both 32-bit and 64-bit versions... so why do you need to build your own framework?</p>\u000a
p1769
sVquestion_id
p1770
I1444543
sVlast_activity_date
p1771
I1253292804
sVcreation_date
p1772
I1253292804
sVscore
p1773
I11
sVowner
p1774
(dp1775
Vuser_id
p1776
I95810
sVprofile_image
p1777
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1778
sVuser_type
p1779
Vregistered
p1780
sVreputation
p1781
I516089
sVlink
p1782
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1783
sVaccept_rate
p1784
I80
sVdisplay_name
p1785
VAlex Martelli
p1786
ssVis_accepted
p1787
I01
sVanswer_id
p1788
I1445711
sa(dp1789
Vbody
p1790
V<p>Answering my own question ;)</p>\u000a\u000a<p>Finally I decided to go by suggestion#1 i.e. write your own. And I am happy with the outcome. Please feel free to use/modify/send me patch etc.</p>\u000a\u000a<p>It's here -> <a href="http://pypi.python.org/pypi/httpagentparser" rel="noreferrer">http://pypi.python.org/pypi/httpagentparser</a></p>\u000a
p1791
sVquestion_id
p1792
I927552
sVlast_activity_date
p1793
I1248071080
sVcreation_date
p1794
I1248071080
sVscore
p1795
I65
sVowner
p1796
(dp1797
Vuser_id
p1798
I84513
sVprofile_image
p1799
Vhttps://www.gravatar.com/avatar/05ecb987b79a2d93de16403e8047a178?s=128&d=identicon&r=PG&f=1
p1800
sVuser_type
p1801
Vregistered
p1802
sVreputation
p1803
I5129
sVlink
p1804
Vhttp://stackoverflow.com/users/84513/shekhar
p1805
sVaccept_rate
p1806
I73
sVdisplay_name
p1807
VShekhar
p1808
ssVis_accepted
p1809
I01
sVanswer_id
p1810
I1151956
sa(dp1811
Vbody
p1812
V<p>At the python level, most of them are documented in the <a href="http://docs.python.org/reference/datamodel.html#specialnames" rel="noreferrer">language reference</a>. At the C level, you can find it under the <a href="http://docs.python.org/c-api/object.html" rel="noreferrer">object protocol</a> section (strictly speaking, you only have a subset here, though).</p>\u000a
p1813
sVquestion_id
p1814
I1090620
sVlast_activity_date
p1815
I1246947081
sVcreation_date
p1816
I1246947081
sVscore
p1817
I44
sVowner
p1818
(dp1819
Vuser_id
p1820
I11465
sVprofile_image
p1821
Vhttps://www.gravatar.com/avatar/9820b5956634e5bbad7f4ed91a232822?s=128&d=identicon&r=PG
p1822
sVuser_type
p1823
Vregistered
p1824
sVreputation
p1825
I41819
sVlink
p1826
Vhttp://stackoverflow.com/users/11465/david-cournapeau
p1827
sVaccept_rate
p1828
I65
sVdisplay_name
p1829
VDavid Cournapeau
p1830
ssVis_accepted
p1831
I01
sVanswer_id
p1832
I1090635
sa(dp1833
Vbody
p1834
V<pre><code>T = [L[i] for i in Idx]\u000a</code></pre>\u000a
p1835
sVquestion_id
p1836
I1012185
sVlast_activity_date
p1837
I1245325126
sVcreation_date
p1838
I1245325126
sVscore
p1839
I103
sVowner
p1840
(dp1841
Vuser_id
p1842
I99594
sVprofile_image
p1843
Vhttps://www.gravatar.com/avatar/5434869366641f527b3f25a34f6e4665?s=128&d=identicon&r=PG
p1844
sVuser_type
p1845
Vregistered
p1846
sVreputation
p1847
I35486
sVlink
p1848
Vhttp://stackoverflow.com/users/99594/van
p1849
sVaccept_rate
p1850
I100
sVdisplay_name
p1851
Vvan
p1852
ssVis_accepted
p1853
I01
sVanswer_id
p1854
I1012197
sa(dp1855
Vbody
p1856
V<p>This shouldn't match anything:</p>\u000a\u000a<pre><code>re.compile('$^')\u000a</code></pre>\u000a\u000a<p>So if you replace regexp1, regexp2 and regexp3 with '$^' it will be impossible to find a match. Unless you are using the multi line mode.</p>\u000a\u000a<hr>\u000a\u000a<p>After some tests I found a better solution</p>\u000a\u000a<pre><code>re.compile('a^')\u000a</code></pre>\u000a\u000a<p>It is impossible to match and will fail earlier than the previous solution. You can replace a with any other character and it will always be impossible to match</p>\u000a
p1857
sVquestion_id
p1858
I940822
sVlast_activity_date
p1859
I1243965111
sVcreation_date
p1860
I1243964055
sVscore
p1861
I68
sVowner
p1862
(dp1863
Vuser_id
p1864
I97828
sVprofile_image
p1865
Vhttps://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG
p1866
sVuser_type
p1867
Vregistered
p1868
sVreputation
p1869
I64017
sVlink
p1870
Vhttp://stackoverflow.com/users/97828/nadia-alramli
p1871
sVdisplay_name
p1872
VNadia Alramli
p1873
ssVis_accepted
p1874
I01
sVlast_edit_date
p1875
I1243965111
sVanswer_id
p1876
I940840
sa(dp1877
Vbody
p1878
V<p>Split on your separator at most once, and take the first piece:</p>\u000a\u000a<pre><code>sep = '...'\u000arest = text.split(sep, 1)[0]\u000a</code></pre>\u000a\u000a<p>You didn't say what should happen if the separator isn't present.  Both this and Alex's solution will return the entire string in that case.</p>\u000a
p1879
sVquestion_id
p1880
I904746
sVlast_activity_date
p1881
I1243203942
sVcreation_date
p1882
I1243202494
sVscore
p1883
I77
sVowner
p1884
(dp1885
Vuser_id
p1886
I14343
sVprofile_image
p1887
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p1888
sVuser_type
p1889
Vregistered
p1890
sVreputation
p1891
I193903
sVlink
p1892
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p1893
sVaccept_rate
p1894
I80
sVdisplay_name
p1895
VNed Batchelder
p1896
ssVis_accepted
p1897
I01
sVlast_edit_date
p1898
I1243203942
sVanswer_id
p1899
I904756
sa(dp1900
Vbody
p1901
V<p>You should use:</p>\u000a\u000a<pre><code>def __init__(self, *args, **kwargs):\u000a    super(RegistrationFormTOS, self).__init__(*args, **kwargs)\u000a    self.fields['email'].label = "New Email Label"\u000a</code></pre>\u000a\u000a<p>Note first you should use the super call.</p>\u000a
p1902
sVquestion_id
p1903
I636905
sVlast_activity_date
p1904
I1236820000
sVcreation_date
p1905
I1236820000
sVscore
p1906
I91
sVowner
p1907
(dp1908
Vuser_id
p1909
I76975
sVprofile_image
p1910
Vhttps://www.gravatar.com/avatar/dd4514cbac59645dd90da5500a38ec40?s=128&d=identicon&r=PG
p1911
sVuser_type
p1912
Vregistered
p1913
sVreputation
p1914
I1044
sVlink
p1915
Vhttp://stackoverflow.com/users/76975/xbito
p1916
sVdisplay_name
p1917
VXbito
p1918
ssVis_accepted
p1919
I01
sVanswer_id
p1920
I637020
sa(dp1921
Vbody
p1922
V<p>Personally, and I think this is backed up by convention, EAFP is never a good way to go.\u000aYou can look at it as an equivalent to the following:</p>\u000a\u000a<pre><code>if (o != null)\u000a    o.doSomething();\u000aelse\u000a    // handle\u000a</code></pre>\u000a\u000a<p>as opposed to:</p>\u000a\u000a<pre><code>try {\u000a    o.doSomething()\u000a}\u000acatch (NullPointerException npe) { \u000a    // handle\u000a}\u000a</code></pre>\u000a\u000a<p>Moreover, consider the following:</p>\u000a\u000a<pre><code>if (a != null)\u000a    if (b != null)\u000a        if (c != null)\u000a            a.getB().getC().doSomething();\u000a        else\u000a            // handle c null\u000a    else\u000a        // handle b null\u000aelse\u000a    // handle a null\u000a</code></pre>\u000a\u000a<p>This may look a lot less elegant (and yes this is a crude example - bear with me), but it gives you much greater granularity in handling the error, as opposed to wrapping it all in a try-catch to get that <code>NullPointerException</code>, and then try to figure out where and why you got it.</p>\u000a\u000a<p>The way I see it EAFP should never be used, except for rare situations. Also, since you raised the issue: <strong>yes, the try-catch block does incur some overhead</strong> even if the exception is not thrown.</p>\u000a
p1923
sVquestion_id
p1924
I404795
sVlast_activity_date
p1925
I1230808634
sVcreation_date
p1926
I1230803820
sVscore
p1927
I4
sVowner
p1928
(dp1929
Vuser_id
p1930
I24545
sVprofile_image
p1931
Vhttps://www.gravatar.com/avatar/0a59649d5bff1787b18d3a73da34a27a?s=128&d=identicon&r=PG
p1932
sVuser_type
p1933
Vregistered
p1934
sVreputation
p1935
I92496
sVlink
p1936
Vhttp://stackoverflow.com/users/24545/yuval-adam
p1937
sVaccept_rate
p1938
I99
sVdisplay_name
p1939
VYuval Adam
p1940
ssVis_accepted
p1941
I01
sVlast_edit_date
p1942
I1230808634
sVanswer_id
p1943
I404802
sa(dp1944
Vbody
p1945
V<p>Please do not do this as shown.   You code becomes unreadable when you monkeypatch an instance to be different from the class.</p>\u000a\u000a<p>You cannot debug monkeypatched code.</p>\u000a\u000a<p>When you find a bug in <code>boby</code> and <code>print type(boby)</code>, you'll see that (a) it's a Dog, but (b) for some obscure reason it doesn't bark correctly.  This is a nightmare.  Do not do it.</p>\u000a\u000a<p>Please do this instead.</p>\u000a\u000a<pre><code>class Dog:\u000a    def bark(self):\u000a        print "WOOF"\u000a\u000aclass BobyDog( Dog ):\u000a    def bark( self ):\u000a        print "WoOoOoF!!"\u000a\u000aotherDog= Dog()\u000aotherDog.bark() # WOOF\u000a\u000aboby = BobyDog()\u000aboby.bark() # WoOoOoF!!\u000a</code></pre>\u000a
p1946
sVquestion_id
p1947
I394770
sVlast_activity_date
p1948
I1230385485
sVcreation_date
p1949
I1230385485
sVscore
p1950
I22
sVowner
p1951
(dp1952
Vuser_id
p1953
I10661
sVprofile_image
p1954
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1955
sVuser_type
p1956
Vregistered
p1957
sVreputation
p1958
I277525
sVlink
p1959
Vhttp://stackoverflow.com/users/10661/s-lott
p1960
sVaccept_rate
p1961
I92
sVdisplay_name
p1962
VS.Lott
p1963
ssVis_accepted
p1964
I01
sVanswer_id
p1965
I395006
sasVquota_max
p1966
I300
sVquota_remaining
p1967
I137
s.