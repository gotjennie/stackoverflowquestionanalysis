(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<blockquote>\u000a  <h1>How do I manually throw/raise an exception in Python?</h1>\u000a</blockquote>\u000a\u000a<p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="noreferrer">Use the most specific Exception constructor that semantically fits your issue</a>.  </p>\u000a\u000a<p>Be specific in your message, e.g.:</p>\u000a\u000a<pre><code>raise ValueError('A very specific bad thing happened')\u000a</code></pre>\u000a\u000a<h1>Don't raise generic exceptions:</h1>\u000a\u000a<p>Avoid raising a generic Exception, to catch it, you'll have to catch all other more specific exceptions that subclass it.</p>\u000a\u000a<h2>Problem 1: Hiding bugs</h2>\u000a\u000a<pre><code>raise Exception('I know Python!') # don't, if you catch, likely to hide bugs.\u000a</code></pre>\u000a\u000a<p>For example:</p>\u000a\u000a<pre><code>def demo_bad_catch():\u000a    try:\u000a        raise ValueError('represents a hidden bug, do not catch this')\u000a        raise Exception('This is the exception you expect to handle')\u000a    except Exception as error:\u000a        print('caught this error: ' + repr(error))\u000a\u000a&gt;&gt;&gt; demo_bad_catch()\u000acaught this error: ValueError('represents a hidden bug, do not catch this',)\u000a</code></pre>\u000a\u000a<h2>Problem 2: Won't catch</h2>\u000a\u000a<p>and more specific catches won't catch the general exception:</p>\u000a\u000a<pre><code>def demo_no_catch():\u000a    try:\u000a        raise Exception('general exceptions not caught by specific handling')\u000a    except ValueError as e:\u000a        print('we will not catch e')\u000a\u000a\u000a&gt;&gt;&gt; demo_no_catch()\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "&lt;stdin&gt;", line 3, in demo_no_catch\u000aException: general exceptions not caught by specific handling\u000a</code></pre>\u000a\u000a<h1>Best Practice:</h1>\u000a\u000a<h2><code>raise</code> statement</h2>\u000a\u000a<p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="noreferrer">Instead, use the most specific Exception constructor that semantically fits your issue</a>.</p>\u000a\u000a<pre><code>raise ValueError('A very specific bad thing happened')\u000a</code></pre>\u000a\u000a<p>which also handily allows an arbitrary number of arguments to be passed to the constructor. This works in Python 2 and 3.</p>\u000a\u000a<pre><code>raise ValueError('A very specific bad thing happened', 'foo', 'bar', 'baz') \u000a</code></pre>\u000a\u000a<p>These arguments are accessed by the <code>args</code> attribute on the Exception object. For example:</p>\u000a\u000a<pre><code>try:\u000a    some_code_that_may_raise_our_value_error()\u000aexcept ValueError as err:\u000a    print(err.args)\u000a</code></pre>\u000a\u000a<p>prints </p>\u000a\u000a<pre><code>('message', 'foo', 'bar', 'baz')    \u000a</code></pre>\u000a\u000a<p>In Python 2.5, an actual <code>message</code> attribute was added to BaseException in favor of encouraging users to subclass Exceptions and stop using <code>args</code>, but <a href="http://www.python.org/dev/peps/pep-0352/#retracted-ideas" rel="noreferrer">the introduction of <code>message</code> and the original deprecation of args has been retracted</a>.</p>\u000a\u000a<h2><code>except</code> clause</h2>\u000a\u000a<p>When inside an except clause, you might want to, e.g. log that a specific type of error happened, and then reraise. The best way to do this while preserving the stack trace is to use a bare raise statement, e.g.:</p>\u000a\u000a<pre><code>try:\u000a    do_something_in_app_that_breaks_easily()\u000aexcept AppError as error:\u000a    logger.error(error)\u000a    raise                 # just this!\u000a    # raise AppError      # Don't do this, you'll lose the stack trace!\u000a</code></pre>\u000a\u000a<p>You can preserve the stacktrace (and error value) with <code>sys.exc_info()</code>, but this is way more error prone, prefer to use a bare <code>raise</code> to reraise. This is the syntax in Python 2:</p>\u000a\u000a<pre><code>    raise AppError, error, sys.exc_info()[2] # avoid this.\u000a    # Equivalently, as error *is* the second object:\u000a    raise sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]\u000a</code></pre>\u000a\u000a<p>In <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="noreferrer">Python 3</a>:</p>\u000a\u000a<pre><code>    raise error.with_traceback(sys.exc_info()[2])\u000a</code></pre>\u000a\u000a<p>Again: avoid manually manipulating tracebacks. It's <a href="https://docs.python.org/2/reference/simple_stmts.html#the-raise-statement" rel="noreferrer">less efficient</a> and more error prone. And if you're using threading and <code>sys.exc_info</code> you may even get the wrong traceback (especially if you're using exception handling for control flow - which I'd personally tend to avoid.)</p>\u000a\u000a<h3>Python 3, Exception chaining</h3>\u000a\u000a<p>In Python 3, you can chain Exceptions, which preserve tracebacks:</p>\u000a\u000a<pre><code>    raise RuntimeError('specific message') from error\u000a</code></pre>\u000a\u000a<p>But beware, this <em>does</em> change the error type raised.</p>\u000a\u000a<h2>Deprecated Methods:</h2>\u000a\u000a<p>These can easily hide and even get into production code. You want to raise an exception/error, and doing them will raise an error, <strong>but not the one intended!</strong></p>\u000a\u000a<p><a href="http://www.python.org/dev/peps/pep-3109/" rel="noreferrer">Valid in Python 2, but not in Python 3</a> is the following:</p>\u000a\u000a<pre><code>raise ValueError, 'message' # Don't do this, it's deprecated!\u000a</code></pre>\u000a\u000a<p>Only <a href="https://docs.python.org/2/whatsnew/2.5.html#pep-352-exceptions-as-new-style-classes" rel="noreferrer">valid in much older versions of Python</a> (2.4 and lower), you may still see people raising strings:</p>\u000a\u000a<pre><code>raise 'message' # really really wrong. don't do this.\u000a</code></pre>\u000a\u000a<p>In all modern versions, this will actually raise a TypeError, because you're not raising a BaseException type. If you're not checking for the right exception and don't have a reviewer that's aware of the issue, it could get into production.</p>\u000a\u000a<h1>Example Usage:</h1>\u000a\u000a<p>I raise Exceptions to warn consumers of my API if they're using it incorrectly:</p>\u000a\u000a<pre><code>def api_func(foo):\u000a    '''foo should be either 'baz' or 'bar'. returns something very useful.'''\u000a    if foo not in _ALLOWED_ARGS:\u000a        raise ValueError('{foo} wrong, use "baz" or "bar"'.format(foo=repr(foo)))\u000a</code></pre>\u000a\u000a<h1>Create your own error types when apropos:</h1>\u000a\u000a<blockquote>\u000a  <p><strong>"I want to make an error on purpose, so that it would go into the except"</strong></p>\u000a</blockquote>\u000a\u000a<p>You can create your own error types, if you want to indicate something specific is wrong with your application, just subclass the appropriate point in the exception hierarchy:</p>\u000a\u000a<pre><code>class MyAppLookupError(LookupError):\u000a    '''raise this when there's a lookup error for my app'''\u000a</code></pre>\u000a\u000a<p>and usage:</p>\u000a\u000a<pre><code>if important_key not in resource_dict and not ok_to_be_missing:\u000a    raise MyAppLookupError('resource is missing, and that is not ok.')\u000a</code></pre>\u000a
p6
sVquestion_id
p7
I2052390
sVlast_activity_date
p8
I1493971843
sVcreation_date
p9
I1401985858
sVscore
p10
I1102
sVowner
p11
(dp12
Vuser_id
p13
I541136
sVprofile_image
p14
Vhttps://i.stack.imgur.com/wftMn.jpg?s=128&g=1
p15
sVuser_type
p16
Vmoderator
p17
sVreputation
p18
I82078
sVlink
p19
Vhttp://stackoverflow.com/users/541136/aaron-hall
p20
sVaccept_rate
p21
I96
sVdisplay_name
p22
VAaron Hall
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1493971843
sVanswer_id
p26
I24065533
sa(dp27
Vbody
p28
V<pre><code>if not a:\u000a  print("List is empty")\u000a</code></pre>\u000a\u000a<p>Using the implicit booleanness of the empty list is quite pythonic.</p>\u000a
p29
sVquestion_id
p30
I53513
sVlast_activity_date
p31
I1493261523
sVcreation_date
p32
I1221028085
sVscore
p33
I2819
sVowner
p34
(dp35
Vuser_id
p36
I429
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/05ce4158a6d636a028bd108bf52cd492?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I41171
sVlink
p42
Vhttp://stackoverflow.com/users/429/patrick
p43
sVaccept_rate
p44
I80
sVdisplay_name
p45
VPatrick
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1493261523
sVanswer_id
p49
I53522
sa(dp50
Vbody
p51
V<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href="http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions" rel="noreferrer">more on defining functions</a> in the Python documentation.</p>\u000a\u000a<p>The <code>*args</code> will give you all function parameters <a href="https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists" rel="noreferrer">as a tuple</a>:</p>\u000a\u000a<pre><code>In [1]: def foo(*args):\u000a   ...:     for a in args:\u000a   ...:         print a\u000a   ...:         \u000a   ...:         \u000a\u000aIn [2]: foo(1)\u000a1\u000a\u000a\u000aIn [4]: foo(1,2,3)\u000a1\u000a2\u000a3\u000a</code></pre>\u000a\u000a<p>The <code>**kwargs</code> will give you all \u000a<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>\u000a\u000a<pre><code>In [5]: def bar(**kwargs):\u000a   ...:     for a in kwargs:\u000a   ...:         print a, kwargs[a]\u000a   ...:         \u000a   ...:         \u000a\u000aIn [6]: bar(name='one', age=27)\u000aage 27\u000aname one\u000a</code></pre>\u000a\u000a<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>\u000a\u000a<pre><code>def foo(kind, *args, **kwargs):\u000a   pass\u000a</code></pre>\u000a\u000a<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>\u000a\u000a<pre><code>In [9]: def foo(bar, lee):\u000a   ...:     print bar, lee\u000a   ...:     \u000a   ...:     \u000a\u000aIn [10]: l = [1,2]\u000a\u000aIn [11]: foo(*l)\u000a1 2\u000a</code></pre>\u000a\u000a<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href="http://www.python.org/dev/peps/pep-3132/" rel="noreferrer">Extended Iterable Unpacking</a>), though it gives a list instead of a tuple in this context:</p>\u000a\u000a<pre><code>first, *rest = [1,2,3,4]\u000afirst, *l, last = [1,2,3,4]\u000a</code></pre>\u000a\u000a<p>Also Python 3 adds new semantic (refer <a href="https://www.python.org/dev/peps/pep-3102/" rel="noreferrer">PEP 3102</a>):</p>\u000a\u000a<pre><code>def func(arg1, arg2, arg3, *, kwarg1, kwarg2):\u000a    pass\u000a</code></pre>\u000a\u000a<p>Such function accepts only 2 positional arguments, and everything after <code>*</code> can only be passed as keyword argument, not positional one.</p>\u000a
p52
sVquestion_id
p53
I36901
sVlast_activity_date
p54
I1493145566
sVcreation_date
p55
I1220195851
sVscore
p56
I1080
sVowner
p57
(dp58
Vuser_id
p59
I720
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/3c57f2a468f2fc945f1e5c47d1afee66?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I25613
sVlink
p65
Vhttp://stackoverflow.com/users/720/peter-hoffmann
p66
sVaccept_rate
p67
I69
sVdisplay_name
p68
VPeter Hoffmann
p69
ssVis_accepted
p70
I01
sVlast_edit_date
p71
I1493145566
sVanswer_id
p72
I36908
sa(dp73
Vbody
p74
V<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before generators come <em>iterables</em>.</p>\u000a\u000a<h2>Iterables</h2>\u000a\u000a<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]\u000a&gt;&gt;&gt; for i in mylist:\u000a...    print(i)\u000a1\u000a2\u000a3\u000a</code></pre>\u000a\u000a<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]\u000a&gt;&gt;&gt; for i in mylist:\u000a...    print(i)\u000a0\u000a1\u000a4\u000a</code></pre>\u000a\u000a<p>Everything you can use "<code>for... in...</code>" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>\u000a\u000a<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\u000a\u000a<h2>Generators</h2>\u000a\u000a<p>Generators are iterators, but <strong>you can only iterate over them once</strong>. It's because they do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))\u000a&gt;&gt;&gt; for i in mygenerator:\u000a...    print(i)\u000a0\u000a1\u000a4\u000a</code></pre>\u000a\u000a<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\u000a\u000a<h2>Yield</h2>\u000a\u000a<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def createGenerator():\u000a...    mylist = range(3)\u000a...    for i in mylist:\u000a...        yield i*i\u000a...\u000a&gt;&gt;&gt; mygenerator = createGenerator() # create a generator\u000a&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!\u000a&lt;generator object createGenerator at 0xb7555c34&gt;\u000a&gt;&gt;&gt; for i in mygenerator:\u000a...     print(i)\u000a0\u000a1\u000a4\u000a</code></pre>\u000a\u000a<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>\u000a\u000a<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>\u000a\u000a<p>Then, your code will be run each time the <code>for</code> uses the generator.</p>\u000a\u000a<p>Now the hard part:</p>\u000a\u000a<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each other call will run the loop you have written in the function one more time, and return the next value, until there is no value to return.</p>\u000a\u000a<p>The generator is considered empty once the function runs but does not hit <code>yield</code> anymore. It can be because the loop had come to an end, or because you do not satisfy an <code>"if/else"</code> anymore.</p>\u000a\u000a<hr>\u000a\u000a<h2>Your code explained</h2>\u000a\u000a<p>Generator:</p>\u000a\u000a<pre><code># Here you create the method of the node object that will return the generator\u000adef node._get_child_candidates(self, distance, min_dist, max_dist):\u000a\u000a  # Here is the code that will be called each time you use the generator object:\u000a\u000a  # If there is still a child of the node object on its left\u000a  # AND if distance is ok, return the next child\u000a  if self._leftchild and distance - max_dist &lt; self._median:\u000a      yield self._leftchild\u000a\u000a  # If there is still a child of the node object on its right\u000a  # AND if distance is ok, return the next child\u000a  if self._rightchild and distance + max_dist &gt;= self._median:\u000a      yield self._rightchild\u000a\u000a  # If the function arrives here, the generator will be considered empty\u000a  # there is no more than two values: the left and the right children\u000a</code></pre>\u000a\u000a<p>Caller:</p>\u000a\u000a<pre><code># Create an empty list and a list with the current object reference\u000aresult, candidates = list(), [self]\u000a\u000a# Loop on candidates (they contain only one element at the beginning)\u000awhile candidates:\u000a\u000a    # Get the last candidate and remove it from the list\u000a    node = candidates.pop()\u000a\u000a    # Get the distance between obj and the candidate\u000a    distance = node._get_dist(obj)\u000a\u000a    # If distance is ok, then you can fill the result\u000a    if distance &lt;= max_dist and distance &gt;= min_dist:\u000a        result.extend(node._values)\u000a\u000a    # Add the children of the candidate in the candidates list\u000a    # so the loop will keep running until it will have looked\u000a    # at all the children of the children of the children, etc. of the candidate\u000a    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\u000a\u000areturn result\u000a</code></pre>\u000a\u000a<p>This code contains several smart parts:</p>\u000a\u000a<ul>\u000a<li><p>The loop iterates on a list but the list expands while the loop is being iterated :-) It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhausts all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p></li>\u000a<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>\u000a</ul>\u000a\u000a<p>Usually we pass a list to it:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = [1, 2]\u000a&gt;&gt;&gt; b = [3, 4]\u000a&gt;&gt;&gt; a.extend(b)\u000a&gt;&gt;&gt; print(a)\u000a[1, 2, 3, 4]\u000a</code></pre>\u000a\u000a<p>But in your code it gets a generator, which is good because:</p>\u000a\u000a<ol>\u000a<li>You don't need to read the values twice.</li>\u000a<li>You may have a lot of children and you don't want them all stored in memory.</li>\u000a</ol>\u000a\u000a<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples and generators! This is called duck typing and is one of the reason why Python is so cool. But this is another story, for another question...</p>\u000a\u000a<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>\u000a\u000a<h2>Controlling a generator exhaustion</h2>\u000a\u000a<pre><code>&gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs\u000a...    crisis = False\u000a...    def create_atm(self):\u000a...        while not self.crisis:\u000a...            yield "$100"\u000a&gt;&gt;&gt; hsbc = Bank() # when everything's ok the ATM gives you as much as you want\u000a&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()\u000a&gt;&gt;&gt; print(corner_street_atm.next())\u000a$100\u000a&gt;&gt;&gt; print(corner_street_atm.next())\u000a$100\u000a&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])\u000a['$100', '$100', '$100', '$100', '$100']\u000a&gt;&gt;&gt; hsbc.crisis = True # crisis is coming, no more money!\u000a&gt;&gt;&gt; print(corner_street_atm.next())\u000a&lt;type 'exceptions.StopIteration'&gt;\u000a&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # it's even true for new ATMs\u000a&gt;&gt;&gt; print(wall_street_atm.next())\u000a&lt;type 'exceptions.StopIteration'&gt;\u000a&gt;&gt;&gt; hsbc.crisis = False # trouble is, even post-crisis the ATM remains empty\u000a&gt;&gt;&gt; print(corner_street_atm.next())\u000a&lt;type 'exceptions.StopIteration'&gt;\u000a&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # build a new one to get back in business\u000a&gt;&gt;&gt; for cash in brand_new_atm:\u000a...    print cash\u000a$100\u000a$100\u000a$100\u000a$100\u000a$100\u000a$100\u000a$100\u000a$100\u000a$100\u000a...\u000a</code></pre>\u000a\u000a<p>It can be useful for various things like controlling access to a resource.</p>\u000a\u000a<h2>Itertools, your best friend</h2>\u000a\u000a<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\u000aChain two generators? Group values in a nested list with a one liner? <code>Map / Zip</code> without creating another list?</p>\u000a\u000a<p>Then just <code>import itertools</code>.</p>\u000a\u000a<p>An example? Let's see the possible orders of arrival for a 4 horse race:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]\u000a&gt;&gt;&gt; races = itertools.permutations(horses)\u000a&gt;&gt;&gt; print(races)\u000a&lt;itertools.permutations object at 0xb754f1dc&gt;\u000a&gt;&gt;&gt; print(list(itertools.permutations(horses)))\u000a[(1, 2, 3, 4),\u000a (1, 2, 4, 3),\u000a (1, 3, 2, 4),\u000a (1, 3, 4, 2),\u000a (1, 4, 2, 3),\u000a (1, 4, 3, 2),\u000a (2, 1, 3, 4),\u000a (2, 1, 4, 3),\u000a (2, 3, 1, 4),\u000a (2, 3, 4, 1),\u000a (2, 4, 1, 3),\u000a (2, 4, 3, 1),\u000a (3, 1, 2, 4),\u000a (3, 1, 4, 2),\u000a (3, 2, 1, 4),\u000a (3, 2, 4, 1),\u000a (3, 4, 1, 2),\u000a (3, 4, 2, 1),\u000a (4, 1, 2, 3),\u000a (4, 1, 3, 2),\u000a (4, 2, 1, 3),\u000a (4, 2, 3, 1),\u000a (4, 3, 1, 2),\u000a (4, 3, 2, 1)]\u000a</code></pre>\u000a\u000a<h2>Understanding the inner mechanisms of iteration</h2>\u000a\u000a<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\u000aIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\u000a\u000a<p>More about it in this article about <a href="http://effbot.org/zone/python-for-statement.htm" rel="noreferrer">how does the for loop work</a>.</p>\u000a
p75
sVquestion_id
p76
I231767
sVlast_activity_date
p77
I1492296933
sVcreation_date
p78
I1224802124
sVscore
p79
I9571
sVowner
p80
(dp81
Vuser_id
p82
I9951
sVprofile_image
p83
Vhttps://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1
p84
sVuser_type
p85
Vregistered
p86
sVreputation
p87
I277803
sVlink
p88
Vhttp://stackoverflow.com/users/9951/e-satis
p89
sVaccept_rate
p90
I79
sVdisplay_name
p91
Ve-satis
p92
ssVis_accepted
p93
I01
sVlast_edit_date
p94
I1492296933
sVanswer_id
p95
I231855
sa(dp96
Vbody
p97
V<blockquote>\u000a  <h1>How can I merge two Python dictionaries in a single expression?</h1>\u000a</blockquote>\u000a\u000a<p>Say you have two dicts and you want to merge them into a new dict without altering the original dicts:</p>\u000a\u000a<pre><code>x = {'a': 1, 'b': 2}\u000ay = {'b': 3, 'c': 4}\u000a</code></pre>\u000a\u000a<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dict's values overwriting those from the first.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; z\u000a{'a': 1, 'b': 3, 'c': 4}\u000a</code></pre>\u000a\u000a<p>A new syntax for this, proposed in <a href="https://www.python.org/dev/peps/pep-0448" rel="noreferrer">PEP 448</a> and <a href="https://mail.python.org/pipermail/python-dev/2015-February/138564.html" rel="noreferrer">available as of Python 3.5</a>, is </p>\u000a\u000a<pre><code>z = {**x, **y}\u000a</code></pre>\u000a\u000a<p>And it is indeed a single expression. It is now showing as implemented in the <a href="https://www.python.org/dev/peps/pep-0478/#features-for-3-5" rel="noreferrer">release schedule for 3.5, PEP 478</a>, and it has now made its way into <a href="https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="noreferrer">What's New in Python 3.5</a> document.</p>\u000a\u000a<p>However, since many organizations are still on Python 2, you may wish to do this in a backwards compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>\u000a\u000a<pre><code>z = x.copy()\u000az.update(y) # which returns None since it mutates z\u000a</code></pre>\u000a\u000a<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>'b'</code> will point to <code>3</code> in our final result.</p>\u000a\u000a<h1>Not yet on Python 3.5, but want a <em>single expression</em></h1>\u000a\u000a<p>If you are not yet on Python 3.5, or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while correct approach is to put it in a function:</p>\u000a\u000a<pre><code>def merge_two_dicts(x, y):\u000a    """Given two dicts, merge them into a new dict as a shallow copy."""\u000a    z = x.copy()\u000a    z.update(y)\u000a    return z\u000a</code></pre>\u000a\u000a<p>and then you have a single expression:</p>\u000a\u000a<pre><code>z = merge_two_dicts(x, y)\u000a</code></pre>\u000a\u000a<p>You can also make a function to merge an undefined number of dicts, from zero to a very large number:</p>\u000a\u000a<pre><code>def merge_dicts(*dict_args):\u000a    """\u000a    Given any number of dicts, shallow copy and merge into a new dict,\u000a    precedence goes to key value pairs in latter dicts.\u000a    """\u000a    result = {}\u000a    for dictionary in dict_args:\u000a        result.update(dictionary)\u000a    return result\u000a</code></pre>\u000a\u000a<p>This function will work in Python 2 and 3 for all dicts. e.g. given dicts <code>a</code> to <code>g</code>:</p>\u000a\u000a<pre><code>z = merge_dicts(a, b, c, d, e, f, g) \u000a</code></pre>\u000a\u000a<p>and key value pairs in <code>g</code> will take precedence over dicts <code>a</code> to <code>f</code>, and so on.</p>\u000a\u000a<h1>Critiques of Other Answers</h1>\u000a\u000a<p>Don't use what you see in the formerly accepted answer:</p>\u000a\u000a<pre><code>z = dict(x.items() + y.items())\u000a</code></pre>\u000a\u000a<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you're adding two <code>dict_items</code> objects together, not two lists - </p>\u000a\u000a<pre><code>&gt;&gt;&gt; c = dict(a.items() + b.items())\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'\u000a</code></pre>\u000a\u000a<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power. </p>\u000a\u000a<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:</strong></p>\u000a\u000a<pre><code>&gt;&gt;&gt; c = dict(a.items() | b.items())\u000a</code></pre>\u000a\u000a<p>This example demonstrates what happens when values are unhashable:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = {'a': []}\u000a&gt;&gt;&gt; y = {'b': []}\u000a&gt;&gt;&gt; dict(x.items() | y.items())\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: unhashable type: 'list'\u000a</code></pre>\u000a\u000a<p>Here's an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = {'a': 2}\u000a&gt;&gt;&gt; y = {'a': 1}\u000a&gt;&gt;&gt; dict(x.items() | y.items())\u000a{'a': 2}\u000a</code></pre>\u000a\u000a<p>Another hack you should not use:</p>\u000a\u000a<pre><code>z = dict(x, **y)\u000a</code></pre>\u000a\u000a<p>This uses the <code>dict</code> constructor, and is very fast and memory efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic. </p>\u000a\u000a<p>Here's an example of the usage being <a href="https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff" rel="noreferrer">remediated in django</a>.</p>\u000a\u000a<p>Dicts are intended to take hashable keys (e.g. frozensets or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>\u000a\u000a<pre><code>&gt;&gt;&gt; c = dict(a, **b)\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: keyword arguments must be strings\u000a</code></pre>\u000a\u000a<p>From the <a href="https://mail.python.org/pipermail/python-dev/2010-April/099459.html" rel="noreferrer">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>\u000a\u000a<blockquote>\u000a  <p>I am fine with\u000a  declaring dict({}, **{1:3}) illegal, since after all it is abuse of\u000a  the ** mechanism.</p>\u000a</blockquote>\u000a\u000a<p>and </p>\u000a\u000a<blockquote>\u000a  <p>Apparently dict(x, **y) is going around as "cool hack" for "call\u000a  x.update(y) and return x". Personally I find it more despicable than\u000a  cool.</p>\u000a</blockquote>\u000a\u000a<p>It is my understanding (as well as the understanding of the <a href="https://mail.python.org/pipermail/python-dev/2010-April/099485.html" rel="noreferrer">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dicts for readability purposes, e.g.:</p>\u000a\u000a<pre><code>dict(a=1, b=10, c=11)\u000a</code></pre>\u000a\u000a<p>instead of </p>\u000a\u000a<pre><code>{'a': 1, 'b': 10, 'c': 11}\u000a</code></pre>\u000a\u000a<h2>Response to comment</h2>\u000a\u000a<blockquote>\u000a  <p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-comming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact ** was designed precisely to pass dicts as keywords. </p>\u000a</blockquote>\u000a\u000a<p>Again, it doesn't work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dicts, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; foo(**{('a', 'b'): None})\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: foo() keywords must be strings\u000a&gt;&gt;&gt; dict(**{('a', 'b'): None})\u000a{('a', 'b'): None}\u000a</code></pre>\u000a\u000a<p>This inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>\u000a\u000a<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>\u000a\u000a<h1>Less Performant But Correct Ad-hocs</h1>\u000a\u000a<p>These approaches are less performant, but they will provide correct behavior.\u000aThey will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dicts have precedence)</p>\u000a\u000a<p>You can also chain the dicts manually inside a dict comprehension:</p>\u000a\u000a<pre><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7\u000a</code></pre>\u000a\u000a<p>or in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>\u000a\u000a<pre><code>dict((k, v) for d in dicts for k, v in d.items())\u000a</code></pre>\u000a\u000a<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>\u000a\u000a<pre><code>import itertools\u000az = dict(itertools.chain(x.iteritems(), y.iteritems()))\u000a</code></pre>\u000a\u000a<h1>Performance Analysis</h1>\u000a\u000a<p>I'm only going to do the performance analysis of the usages known to behave correctly. </p>\u000a\u000a<pre><code>import timeit\u000a</code></pre>\u000a\u000a<p>The following is done on Ubuntu 14.04</p>\u000a\u000a<p>In Python 2.7 (system Python):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\u000a0.5726828575134277\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\u000a1.163769006729126\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.iteritems(), y.iteritems()))))\u000a1.1614501476287842\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\u000a2.2345519065856934\u000a</code></pre>\u000a\u000a<p>In Python 3.5 (deadsnakes PPA):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; min(timeit.repeat(lambda: {**x, **y}))\u000a0.4094954460160807\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\u000a0.7881555100320838\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\u000a1.4525277839857154\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.items(), y.items()))))\u000a2.3143140770262107\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\u000a3.2069112799945287\u000a</code></pre>\u000a
p98
sVquestion_id
p99
I38987
sVlast_activity_date
p100
I1492283587
sVcreation_date
p101
I1415657508
sVscore
p102
I1898
sVowner
p103
(dp104
Vuser_id
p105
I541136
sVprofile_image
p106
Vhttps://i.stack.imgur.com/wftMn.jpg?s=128&g=1
p107
sVuser_type
p108
Vmoderator
p109
sVreputation
p110
I82078
sVlink
p111
Vhttp://stackoverflow.com/users/541136/aaron-hall
p112
sVaccept_rate
p113
I96
sVdisplay_name
p114
VAaron Hall
p115
ssVis_accepted
p116
I01
sVlast_edit_date
p117
I1492283587
sVanswer_id
p118
I26853961
sa(dp119
Vbody
p120
V<p><strong>Answer in one line:</strong></p>\u000a\u000a<pre><code>''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\u000a</code></pre>\u000a\u000a<p>or even shorter starting with Python 3.6 using <a href="https://docs.python.org/3/library/random.html#random.choices" rel="noreferrer"><code>random.choices()</code></a>:</p>\u000a\u000a<pre><code>''.join(random.choices(string.ascii_uppercase + string.digits, k=N))\u000a</code></pre>\u000a\u000a<p><strong>A cryptographically more secure version; see <a href="http://stackoverflow.com/a/23728630/2213647">http://stackoverflow.com/a/23728630/2213647</a>:</strong></p>\u000a\u000a<pre><code>''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\u000a</code></pre>\u000a\u000a<p><strong>In details, with a clean function for further reuse:</strong></p>\u000a\u000a<pre><code>&gt;&gt;&gt; import string\u000a&gt;&gt;&gt; import random\u000a&gt;&gt;&gt; def id_generator(size=6, chars=string.ascii_uppercase + string.digits):\u000a...    return ''.join(random.choice(chars) for _ in range(size))\u000a...\u000a&gt;&gt;&gt; id_generator()\u000a'G5G74W'\u000a&gt;&gt;&gt; id_generator(3, "6793YUIO")\u000a'Y3U'\u000a</code></pre>\u000a\u000a<p><strong>How does it work ?</strong></p>\u000a\u000a<p>We import <code>string</code>, a module that contains sequences of common ASCII characters, and <code>random</code>, a module that deals with random generation.</p>\u000a\u000a<p><code>string.ascii_uppercase + string.digits</code> just concatenates the list of characters representing uppercase ASCII chars and digits:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; string.ascii_uppercase\u000a'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\u000a&gt;&gt;&gt; string.digits\u000a'0123456789'\u000a&gt;&gt;&gt; string.ascii_uppercase + string.digits\u000a'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\u000a</code></pre>\u000a\u000a<p>Then we use a list comprehension to create a list of 'n' elements:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; range(4) # range create a list of 'n' numbers\u000a[0, 1, 2, 3]\u000a&gt;&gt;&gt; ['elem' for _ in range(4)] # we use range to create 4 times 'elem'\u000a['elem', 'elem', 'elem', 'elem']\u000a</code></pre>\u000a\u000a<p>In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this <a href="http://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855">here</a>).</p>\u000a\u000a<p>Instead of asking to create 'n' times the string <code>elem</code>, we will ask Python to create 'n' times a random character, picked from a sequence of characters:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; random.choice("abcde")\u000a'a'\u000a&gt;&gt;&gt; random.choice("abcde")\u000a'd'\u000a&gt;&gt;&gt; random.choice("abcde")\u000a'b'\u000a</code></pre>\u000a\u000a<p>Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters. Characters that are randomly picked from <code>chars</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\u000a['a', 'b', 'b']\u000a&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\u000a['e', 'b', 'e']\u000a&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\u000a['d', 'a', 'c']\u000a</code></pre>\u000a\u000a<p>Then we just join them with an empty string so the sequence becomes a string:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; ''.join(['a', 'b', 'b'])\u000a'abb'\u000a&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\u000a['d', 'c', 'b']\u000a&gt;&gt;&gt; ''.join(random.choice('abcde') for _ in range(3))\u000a'dac'\u000a</code></pre>\u000a
p121
sVquestion_id
p122
I2257441
sVlast_activity_date
p123
I1491842221
sVcreation_date
p124
I1266063982
sVscore
p125
I1630
sVowner
p126
(dp127
Vuser_id
p128
I20862
sVprofile_image
p129
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p130
sVuser_type
p131
Vregistered
p132
sVreputation
p133
I480826
sVlink
p134
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p135
sVaccept_rate
p136
I60
sVdisplay_name
p137
VIgnacio Vazquez-Abrams
p138
ssVis_accepted
p139
I01
sVlast_edit_date
p140
I1491842221
sVanswer_id
p141
I2257449
sa(dp142
Vbody
p143
V<p>Arguments are <a href="http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="noreferrer">passed by assignment</a>. The rationale behind this is twofold:</p>\u000a\u000a<ol>\u000a<li>the parameter passed in is actually a <em>reference</em> to an object (but the reference is passed by value)</li>\u000a<li>some data types are mutable, but others aren't</li>\u000a</ol>\u000a\u000a<p>So:</p>\u000a\u000a<ul>\u000a<li><p>If you pass a <em>mutable</em> object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. </p></li>\u000a<li><p>If you pass an <em>immutable</em> object to a method, you still can't rebind the outer reference, and you can't even mutate the object.</p></li>\u000a</ul>\u000a\u000a<p>To make it even more clear, let's have some examples. </p>\u000a\u000a<h2>List - a mutable type</h2>\u000a\u000a<p><strong>Let's try to modify the list that was passed to a method:</strong></p>\u000a\u000a<pre><code>def try_to_change_list_contents(the_list):\u000a    print('got', the_list)\u000a    the_list.append('four')\u000a    print('changed to', the_list)\u000a\u000aouter_list = ['one', 'two', 'three']\u000a\u000aprint('before, outer_list =', outer_list)\u000atry_to_change_list_contents(outer_list)\u000aprint('after, outer_list =', outer_list)\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre class="lang-none prettyprint-override"><code>before, outer_list = ['one', 'two', 'three']\u000agot ['one', 'two', 'three']\u000achanged to ['one', 'two', 'three', 'four']\u000aafter, outer_list = ['one', 'two', 'three', 'four']\u000a</code></pre>\u000a\u000a<p>Since the parameter passed in is a reference to <code>outer_list</code>, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.</p>\u000a\u000a<p><strong>Now let's see what happens when we try to change the reference that was passed in as a parameter:</strong></p>\u000a\u000a<pre><code>def try_to_change_list_reference(the_list):\u000a    print('got', the_list)\u000a    the_list = ['and', 'we', 'can', 'not', 'lie']\u000a    print('set to', the_list)\u000a\u000aouter_list = ['we', 'like', 'proper', 'English']\u000a\u000aprint('before, outer_list =', outer_list)\u000atry_to_change_list_reference(outer_list)\u000aprint('after, outer_list =', outer_list)\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre class="lang-none prettyprint-override"><code>before, outer_list = ['we', 'like', 'proper', 'English']\u000agot ['we', 'like', 'proper', 'English']\u000aset to ['and', 'we', 'can', 'not', 'lie']\u000aafter, outer_list = ['we', 'like', 'proper', 'English']\u000a</code></pre>\u000a\u000a<p>Since the <code>the_list</code> parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The <code>the_list</code> was a copy of the <code>outer_list</code> reference, and we had <code>the_list</code> point to a new list, but there was no way to change where <code>outer_list</code> pointed.</p>\u000a\u000a<h2>String - an immutable type</h2>\u000a\u000a<p><strong>It's immutable, so there's nothing we can do to change the contents of the string</strong></p>\u000a\u000a<p><strong>Now, let's try to change the reference</strong></p>\u000a\u000a<pre><code>def try_to_change_string_reference(the_string):\u000a    print('got', the_string)\u000a    the_string = 'In a kingdom by the sea'\u000a    print('set to', the_string)\u000a\u000aouter_string = 'It was many and many a year ago'\u000a\u000aprint('before, outer_string =', outer_string)\u000atry_to_change_string_reference(outer_string)\u000aprint('after, outer_string =', outer_string)\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre class="lang-none prettyprint-override"><code>before, outer_string = It was many and many a year ago\u000agot It was many and many a year ago\u000aset to In a kingdom by the sea\u000aafter, outer_string = It was many and many a year ago\u000a</code></pre>\u000a\u000a<p>Again, since the <code>the_string</code> parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The <code>the_string</code> was a copy of the <code>outer_string</code> reference, and we had <code>the_string</code> point to a new string, but there was no way to change where <code>outer_string</code> pointed.</p>\u000a\u000a<p>I hope this clears things up a little.</p>\u000a\u000a<p><strong>EDIT:</strong> It's been noted that this doesn't answer the question that @David originally asked, "Is there something I can do to pass the variable by actual reference?". Let's work on that.</p>\u000a\u000a<h2>How do we get around this?</h2>\u000a\u000a<p>As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:</p>\u000a\u000a<pre><code>def return_a_whole_new_string(the_string):\u000a    new_string = something_to_do_with_the_old_string(the_string)\u000a    return new_string\u000a\u000a# then you could call it like\u000amy_string = return_a_whole_new_string(my_string)\u000a</code></pre>\u000a\u000a<p>If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:</p>\u000a\u000a<pre><code>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):\u000a    new_string = something_to_do_with_the_old_string(stuff_to_change[0])\u000a    stuff_to_change[0] = new_string\u000a\u000a# then you could call it like\u000awrapper = [my_string]\u000ause_a_wrapper_to_simulate_pass_by_reference(wrapper)\u000a\u000ado_something_with(wrapper[0])\u000a</code></pre>\u000a\u000a<p>Although this seems a little cumbersome.</p>\u000a
p144
sVquestion_id
p145
I986006
sVlast_activity_date
p146
I1491185618
sVcreation_date
p147
I1244805507
sVscore
p148
I1828
sVowner
p149
(dp150
Vuser_id
p151
I1199
sVprofile_image
p152
Vhttps://www.gravatar.com/avatar/78cb7314ef6c9ff2954f8e0d6506fc06?s=128&d=identicon&r=PG
p153
sVuser_type
p154
Vregistered
p155
sVreputation
p156
I112333
sVlink
p157
Vhttp://stackoverflow.com/users/1199/blair-conrad
p158
sVdisplay_name
p159
VBlair Conrad
p160
ssVis_accepted
p161
I01
sVlast_edit_date
p162
I1491185618
sVanswer_id
p163
I986145
sa(dp164
Vbody
p165
V<p>Usually, activating a virtualenv gives you a shell function named:</p>\u000a\u000a<pre><code>$ deactivate\u000a</code></pre>\u000a\u000a<p>which puts things back to normal.</p>\u000a\u000a<h3>Edit 1</h3>\u000a\u000a<p>I have just looked specifically again at the code for <code>virtualenvwrapper,</code> and, yes, it too supports <code>deactivate</code> as the way to escape from all virtualenvs.</p>\u000a\u000a<h3>Edit 2</h3>\u000a\u000a<p>If you are trying to leave an <em>Anaconda</em> environment, the procedure is a bit different: run the two-word command <code>source deactivate</code> since they implement deactivation using a stand-alone script.</p>\u000a\u000a<pre><code>bash-4.3$ deactivate\u000apyenv-virtualenv: deactivate must be sourced. Run 'source deactivate' instead of 'deactivate'\u000abash-4.3$ source deactivate\u000apyenv-virtualenv: no virtualenv has been activated.\u000a</code></pre>\u000a
p166
sVquestion_id
p167
I990754
sVlast_activity_date
p168
I1490795480
sVcreation_date
p169
I1244903460
sVscore
p170
I1310
sVowner
p171
(dp172
Vuser_id
p173
I85360
sVprofile_image
p174
Vhttps://www.gravatar.com/avatar/424a8f03889e3ffbf9ed57adb1fc41cc?s=128&d=identicon&r=PG
p175
sVuser_type
p176
Vregistered
p177
sVreputation
p178
I40068
sVlink
p179
Vhttp://stackoverflow.com/users/85360/brandon-rhodes
p180
sVaccept_rate
p181
I45
sVdisplay_name
p182
VBrandon Rhodes
p183
ssVis_accepted
p184
I01
sVlast_edit_date
p185
I1490795480
sVanswer_id
p186
I990779
sa(dp187
Vbody
p188
V<p><a href="http://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists" rel="noreferrer">The syntax is the <code>*</code> and <code>**</code></a>.  The names <code>*args</code> and <code>**kwargs</code> are only by convention but there's no hard requirement to use them.</p>\u000a\u000a<p>You would use <code>*args</code> when you're not sure how many arguments might be passed to your function, i.e. it allows you pass an arbitrary number of arguments to your function.  For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def print_everything(*args):\u000a        for count, thing in enumerate(args):\u000a...         print( '{0}. {1}'.format(count, thing))\u000a...\u000a&gt;&gt;&gt; print_everything('apple', 'banana', 'cabbage')\u000a0. apple\u000a1. banana\u000a2. cabbage\u000a</code></pre>\u000a\u000a<p>Similarly, <code>**kwargs</code> allows you to handle named arguments that you have not defined in advance:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def table_things(**kwargs):\u000a...     for name, value in kwargs.items():\u000a...         print( '{0} = {1}'.format(name, value))\u000a...\u000a&gt;&gt;&gt; table_things(apple = 'fruit', cabbage = 'vegetable')\u000acabbage = vegetable\u000aapple = fruit\u000a</code></pre>\u000a\u000a<p>You can use these along with named arguments too.  The explicit arguments get values first and then everything else is passed to <code>*args</code> and <code>**kwargs</code>.  The named arguments come first in the list.  For example:</p>\u000a\u000a<pre><code>def table_things(titlestring, **kwargs)\u000a</code></pre>\u000a\u000a<p>You can also use both in the same function definition but <code>*args</code> must occur before <code>**kwargs</code>.</p>\u000a\u000a<p>You can also use the <code>*</code> and <code>**</code> syntax when calling a function.  For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def print_three_things(a, b, c):\u000a...     print( 'a = {0}, b = {1}, c = {2}'.format(a,b,c))\u000a...\u000a&gt;&gt;&gt; mylist = ['aardvark', 'baboon', 'cat']\u000a&gt;&gt;&gt; print_three_things(*mylist)\u000aa = aardvark, b = baboon, c = cat\u000a</code></pre>\u000a\u000a<p>As you can see in this case it takes the list (or tuple) of items and unpacks it. By this it matches them to the arguments in the function.  Of course, you could have a <code>*</code> both in the function definition and in the function call.</p>\u000a
p189
sVquestion_id
p190
I3394835
sVlast_activity_date
p191
I1490282158
sVcreation_date
p192
I1280824725
sVscore
p193
I1148
sVowner
p194
(dp195
Vuser_id
p196
I3171
sVprofile_image
p197
Vhttps://www.gravatar.com/avatar/a780bab849bc39176f044f5effbba7da?s=128&d=identicon&r=PG
p198
sVuser_type
p199
Vregistered
p200
sVreputation
p201
I133824
sVlink
p202
Vhttp://stackoverflow.com/users/3171/dave-webb
p203
sVaccept_rate
p204
I92
sVdisplay_name
p205
VDave Webb
p206
ssVis_accepted
p207
I01
sVlast_edit_date
p208
I1490282158
sVanswer_id
p209
I3394898
sa(dp210
Vbody
p211
V<p>Though <code>classmethod</code> and <code>staticmethod</code> are quite similar, there's a slight difference in usage for both entities: <code>classmethod</code> must have a reference to a class object as the first parameter, whereas <code>staticmethod</code> can have no parameters at all.</p>\u000a\u000a<p>Let's look at all that was said in real examples.</p>\u000a\u000a<p><strong>Boilerplate</strong></p>\u000a\u000a<p>Let's assume an example of a class, dealing with date information (this is what will be our boilerplate to cook on):</p>\u000a\u000a<pre><code>class Date(object):\u000a\u000a    def __init__(self, day=0, month=0, year=0):\u000a        self.day = day\u000a        self.month = month\u000a        self.year = year\u000a</code></pre>\u000a\u000a<p>This class obviously could be used to store information about certain dates (without timezone information; let's assume all dates are presented in UTC).</p>\u000a\u000a<p>Here we have <code>__init__</code>, a typical initializer of Python class instances, which receives arguments as a typical <code>instancemethod</code>, having the first non-optional argument (<code>self</code>) that holds reference to a newly created instance.</p>\u000a\u000a<p><strong>Class Method</strong></p>\u000a\u000a<p>We have some tasks that can be nicely done using <code>classmethod</code>s.</p>\u000a\u000a<p><em>Let's assume that we want to create a lot of <code>Date</code> class instances having date information coming from outer source encoded as a string of next format ('dd-mm-yyyy'). We have to do that in different places of our source code in project.</em></p>\u000a\u000a<p>So what we must do here is:</p>\u000a\u000a<ol>\u000a<li>Parse a string to receive day, month and year as three integer variables or a 3-item tuple consisting of that variable.</li>\u000a<li>Instantiate <code>Date</code> by passing those values to initialization call.</li>\u000a</ol>\u000a\u000a<p>This will look like:</p>\u000a\u000a<pre><code>day, month, year = map(int, string_date.split('-'))\u000adate1 = Date(day, month, year)\u000a</code></pre>\u000a\u000a<p>For this purpose, C++ has such feature as overloading, but Python lacks that feature- so here's when <code>classmethod</code> applies. Lets create another "<em>constructor</em>".</p>\u000a\u000a<pre><code>    @classmethod\u000a    def from_string(cls, date_as_string):\u000a        day, month, year = map(int, date_as_string.split('-'))\u000a        date1 = cls(day, month, year)\u000a        return date1\u000a\u000adate2 = Date.from_string('11-09-2012')\u000a</code></pre>\u000a\u000a<p>Let's look more carefully at the above implementation, and review what advantages we have here:</p>\u000a\u000a<ol>\u000a<li>We've implemented date string parsing in one place and it's reusable now.</li>\u000a<li>Encapsulation works fine here (if you think that you could implement string parsing as a single function elsewhere, this solution fits OOP paradigm far better).</li>\u000a<li><code>cls</code> is an object that holds <strong>class itself</strong>, not an instance of the class. It's pretty cool because if we inherit our <code>Date</code> class, all children will have <code>from_string</code> defined also.</li>\u000a</ol>\u000a\u000a<p><strong>Static method</strong></p>\u000a\u000a<p>What about <code>staticmethod</code>? It's pretty similar to <code>classmethod</code> but doesn't take any obligatory parameters (like a class method or instance method does).</p>\u000a\u000a<p>Let's look at the next use case.</p>\u000a\u000a<p><em>We have a date string that we want to validate somehow. This task is also logically bound to <code>Date</code> class we've used so far, but still doesn't require instantiation of it.</em></p>\u000a\u000a<p>Here is where <code>staticmethod</code> can be useful. Let's look at the next piece of code:</p>\u000a\u000a<pre><code>    @staticmethod\u000a    def is_date_valid(date_as_string):\u000a        day, month, year = map(int, date_as_string.split('-'))\u000a        return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999\u000a\u000a    # usage:\u000a    is_date = Date.is_date_valid('11-09-2012')\u000a</code></pre>\u000a\u000a<p>So, as we can see from usage of <code>staticmethod</code>, we don't have any access to what the class is- it's basically just a function,  called syntactically like a method, but without access to the object and it's internals (fields and another methods), while classmethod does.</p>\u000a
p212
sVquestion_id
p213
I12179271
sVlast_activity_date
p214
I1489966198
sVcreation_date
p215
I1346248983
sVscore
p216
I1609
sVowner
p217
(dp218
Vuser_id
p219
I789649
sVprofile_image
p220
Vhttps://www.gravatar.com/avatar/3aba5dec1e9c2b2b65adc491a0bc6253?s=128&d=identicon&r=PG
p221
sVuser_type
p222
Vregistered
p223
sVreputation
p224
I22854
sVlink
p225
Vhttp://stackoverflow.com/users/789649/rostyslav-dzinko
p226
sVdisplay_name
p227
VRostyslav Dzinko
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1489966198
sVanswer_id
p231
I12179752
sa(dp232
Vcommunity_owned_date
p233
I1486499688
sVbody
p234
V<p>From <a href="http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes" rel="noreferrer">http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes</a> :</p>\u000a\u000a<blockquote>\u000a  <p>Up to Python 2.1, old-style classes were the only flavour available to the user. The concept of (old-style) class is unrelated to the concept of type: if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code> designates the class of <code>x</code>, but <code>type(x)</code> is always <code>&lt;type 'instance'&gt;</code>. This reflects the fact that all old-style instances, independently of their class, are implemented with a single built-in type, called instance. </p>\u000a  \u000a  <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. A new-style class is simply a user-defined type, no more, no less. If x is an instance of a new-style class, then <code>type(x)</code> is typically the same as <code>x.__class__</code> (although this is not guaranteed \u2013 a new-style class instance is permitted to override the value returned for <code>x.__class__</code>).</p>\u000a  \u000a  <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. It also has a number of immediate benefits, like the ability to subclass most built-in types, or the introduction of "descriptors", which enable computed properties. </p>\u000a  \u000a  <p><strong>For compatibility reasons, classes are still old-style by default</strong>. New-style classes are created by specifying another new-style class (i.e. a type) as a parent class, or the "top-level type" object if no other parent is needed. The behaviour of new-style classes differs from that of old-style classes in a number of important details in addition to what type returns. Some of these changes are fundamental to the new object model, like the way special methods are invoked. Others are "fixes" that could not be implemented before for compatibility concerns, like the method resolution order in case of multiple inheritance. </p>\u000a  \u000a  <p><strong>Python 3 only has new-style classes</strong>. No matter if you subclass from <code>object</code> or not, classes are new-style in Python 3.</p>\u000a</blockquote>\u000a
p235
sVquestion_id
p236
I54867
sVlast_activity_date
p237
I1489517081
sVcreation_date
p238
I1221069763
sVscore
p239
I393
sVowner
p240
(dp241
Vuser_id
p242
I1659
sVprofile_image
p243
Vhttps://www.gravatar.com/avatar/6cc331c477243ced5ff968a32a7dd14f?s=128&d=identicon&r=PG
p244
sVuser_type
p245
Vregistered
p246
sVreputation
p247
I75551
sVlink
p248
Vhttp://stackoverflow.com/users/1659/mark-cidade
p249
sVaccept_rate
p250
I96
sVdisplay_name
p251
VMark Cidade
p252
ssVis_accepted
p253
I01
sVlast_edit_date
p254
I1489517081
sVanswer_id
p255
I54873
sa(dp256
Vbody
p257
V<p>Python includes a profiler called cProfile. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.</p>\u000a\u000a<p>You can call it from within your code, or from the interpreter, like this:</p>\u000a\u000a<pre><code>import cProfile\u000acProfile.run('foo()')\u000a</code></pre>\u000a\u000a<p>Even more usefully, you can invoke the cProfile when running a script:</p>\u000a\u000a<pre><code>python -m cProfile myscript.py\u000a</code></pre>\u000a\u000a<p>To make it even easier, I made a little batch file called 'profile.bat':</p>\u000a\u000a<pre><code>python -m cProfile %1\u000a</code></pre>\u000a\u000a<p>So all I have to do is run:</p>\u000a\u000a<pre><code>profile euler048.py\u000a</code></pre>\u000a\u000a<p>And I get this:</p>\u000a\u000a<pre class="lang-none prettyprint-override"><code>1007 function calls in 0.061 CPU seconds\u000a\u000aOrdered by: standard name\u000ancalls  tottime  percall  cumtime  percall filename:lineno(function)\u000a    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)\u000a 1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)\u000a    1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)\u000a    1    0.000    0.000    0.061    0.061 {execfile}\u000a    1    0.002    0.002    0.053    0.053 {map}\u000a    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}\u000a    1    0.000    0.000    0.000    0.000 {range}\u000a    1    0.003    0.003    0.003    0.003 {sum}\u000a</code></pre>\u000a\u000a<p>EDIT: Updated link to a good video resource from PyCon 2013 titled \u000a<a href="http://lanyrd.com/2013/pycon/scdywg/" rel="noreferrer"><strong><em>Python Profiling</em></strong></a>.</p>\u000a
p258
sVquestion_id
p259
I582336
sVlast_activity_date
p260
I1488725241
sVcreation_date
p261
I1235491300
sVscore
p262
I852
sVowner
p263
(dp264
Vuser_id
p265
I21245
sVprofile_image
p266
Vhttps://www.gravatar.com/avatar/77a3d97a2dab188e5a351bfbd4482912?s=128&d=identicon&r=PG
p267
sVuser_type
p268
Vregistered
p269
sVreputation
p270
I19129
sVlink
p271
Vhttp://stackoverflow.com/users/21245/chris-lawlor
p272
sVaccept_rate
p273
I95
sVdisplay_name
p274
VChris Lawlor
p275
ssVis_accepted
p276
I01
sVlast_edit_date
p277
I1488725241
sVanswer_id
p278
I582337
sa(dp279
Vbody
p280
V<p>You can use <a href="https://docs.python.org/2/library/glob.html" rel="noreferrer"><code>glob</code></a>:</p>\u000a\u000a<pre><code>import glob, os\u000aos.chdir("/mydir")\u000afor file in glob.glob("*.txt"):\u000a    print(file)\u000a</code></pre>\u000a\u000a<p>or simply <a href="https://docs.python.org/2/library/os.html#os.listdir" rel="noreferrer"><code>os.listdir</code></a>:</p>\u000a\u000a<pre><code>import os\u000afor file in os.listdir("/mydir"):\u000a    if file.endswith(".txt"):\u000a        print(os.path.join("/mydir", file))\u000a</code></pre>\u000a\u000a<p>or if you want to traverse directory, use <a href="https://docs.python.org/2/library/os.html#os.walk" rel="noreferrer"><code>os.walk</code></a>:</p>\u000a\u000a<pre><code>import os\u000afor root, dirs, files in os.walk("/mydir"):\u000a    for file in files:\u000a        if file.endswith(".txt"):\u000a             print(os.path.join(root, file))\u000a</code></pre>\u000a
p281
sVquestion_id
p282
I3964681
sVlast_activity_date
p283
I1487844980
sVcreation_date
p284
I1287450720
sVscore
p285
I1199
sVowner
p286
(dp287
Vuser_id
p288
I131527
sVprofile_image
p289
Vhttps://www.gravatar.com/avatar/c2618d986361c695497c1a875ea8da01?s=128&d=identicon&r=PG
p290
sVuser_type
p291
Vregistered
p292
sVreputation
p293
I161917
sVlink
p294
Vhttp://stackoverflow.com/users/131527/ghostdog74
p295
sVaccept_rate
p296
I83
sVdisplay_name
p297
Vghostdog74
p298
ssVis_accepted
p299
I01
sVlast_edit_date
p300
I1487844980
sVanswer_id
p301
I3964691
sa(dp302
Vbody
p303
V<p>Assuming module <code>foo</code> with method <code>bar</code>:</p>\u000a\u000a<pre><code>import foo\u000amethod_to_call = getattr(foo, 'bar')\u000aresult = method_to_call()\u000a</code></pre>\u000a\u000a<p>As far as that goes, lines 2 and 3 can be compressed to:</p>\u000a\u000a<pre><code>result = getattr(foo, 'bar')()\u000a</code></pre>\u000a\u000a<p>if that makes more sense for your use case.  You can use <code>getattr</code> in this fashion on class instance bound methods, module-level methods, class methods... the list goes on.</p>\u000a
p304
sVquestion_id
p305
I3061
sVlast_activity_date
p306
I1487787017
sVcreation_date
p307
I1217995036
sVscore
p308
I1087
sVowner
p309
(dp310
Vuser_id
p311
I363
sVprofile_image
p312
Vhttps://www.gravatar.com/avatar/d13c16cb15cd0a22161dcdce9f159d10?s=128&d=identicon&r=PG
p313
sVuser_type
p314
Vregistered
p315
sVreputation
p316
I12760
sVlink
p317
Vhttp://stackoverflow.com/users/363/patrick-johnmeyer
p318
sVdisplay_name
p319
VPatrick Johnmeyer
p320
ssVis_accepted
p321
I01
sVlast_edit_date
p322
I1487787017
sVanswer_id
p323
I3071
sa(dp324
Vbody
p325
V<p>Look at the <a href="https://docs.python.org/2/library/subprocess.html" rel="noreferrer">subprocess module</a> in the standard library:</p>\u000a\u000a<pre><code>from subprocess import call\u000acall(["ls", "-l"])\u000a</code></pre>\u000a\u000a<p>The advantage of <strong>subprocess</strong> vs <strong>system</strong> is that it is more flexible (you can get the stdout, stderr, the "real" status code, better error handling, etc...). </p>\u000a\u000a<p>The <a href="https://docs.python.org/library/os.html#os.system" rel="noreferrer">official docs</a> recommend the <strong>subprocess</strong> module over the alternative os.system():</p>\u000a\u000a<blockquote>\u000a  <p>The <strong>subprocess</strong> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function [<a href="https://docs.python.org/library/os.html#os.system" rel="noreferrer"><code>os.system()</code></a>].</p>\u000a</blockquote>\u000a\u000a<p>The "<a href="https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module" rel="noreferrer">Replacing Older Functions with the subprocess Module</a>" section in the <strong>subprocess</strong> documentation may have some helpful recipes.</p>\u000a\u000a<p>Official documentation on the <strong>subprocess</strong> module:</p>\u000a\u000a<ul>\u000a<li><a href="https://docs.python.org/2/library/subprocess.html#module-subprocess" rel="noreferrer">Python 2 - subprocess</a></li>\u000a<li><a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="noreferrer">Python 3 - subprocess</a></li>\u000a</ul>\u000a
p326
sVquestion_id
p327
I89228
sVlast_activity_date
p328
I1487077551
sVcreation_date
p329
I1221701975
sVscore
p330
I2595
sVowner
p331
(dp332
Vuser_id
p333
I11465
sVprofile_image
p334
Vhttps://www.gravatar.com/avatar/9820b5956634e5bbad7f4ed91a232822?s=128&d=identicon&r=PG
p335
sVuser_type
p336
Vregistered
p337
sVreputation
p338
I41804
sVlink
p339
Vhttp://stackoverflow.com/users/11465/david-cournapeau
p340
sVaccept_rate
p341
I65
sVdisplay_name
p342
VDavid Cournapeau
p343
ssVis_accepted
p344
I01
sVlast_edit_date
p345
I1487077551
sVanswer_id
p346
I89243
sa(dp347
Vbody
p348
V<p>There isn't a built-in flag yet, but you can use</p>\u000a\u000a<pre><code>pip freeze --local | grep -v '^\u005c-e' | cut -d = -f 1  | xargs -n1 pip install -U\u000a</code></pre>\u000a\u000a<p>Note: there are infinite potential variations for this. I'm trying to keep this answer short and simple, but please do suggest variations in the comments!</p>\u000a\u000a<p>Relevant edits:</p>\u000a\u000a<ul>\u000a<li>Added a <code>grep</code> to skip "-e" package definitions, as suggested by @jawache (Yes, you could replace <code>grep</code>+<code>cut</code> with <code>sed</code> or <code>awk</code> or <code>perl</code> or...).</li>\u000a<li><p>Newer versions of <code>pip</code> allow you to list outdated packages: </p>\u000a\u000a<pre><code>pip list --outdated --format=freeze\u000a</code></pre></li>\u000a<li><p>Added <code>-n1</code> to <code>xargs</code>, prevents stopping everything if updating one package fails (thanks @andsens)</p></li>\u000a</ul>\u000a
p349
sVquestion_id
p350
I2720014
sVlast_activity_date
p351
I1486475162
sVcreation_date
p352
I1281470209
sVscore
p353
I1243
sVowner
p354
(dp355
Vuser_id
p356
I158773
sVprofile_image
p357
Vhttps://www.gravatar.com/avatar/3d8c280edaafd988742f45e81f89d24a?s=128&d=identicon&r=PG
p358
sVuser_type
p359
Vregistered
p360
sVreputation
p361
I21001
sVlink
p362
Vhttp://stackoverflow.com/users/158773/rbp
p363
sVdisplay_name
p364
Vrbp
p365
ssVis_accepted
p366
I01
sVlast_edit_date
p367
I1486475162
sVanswer_id
p368
I3452888
sa(dp369
Vbody
p370
V<p>Use <a href="https://docs.python.org/2/library/random.html#random.choice" rel="noreferrer"><code>random.choice</code></a>:</p>\u000a\u000a<pre><code>import random\u000a\u000afoo = ['a', 'b', 'c', 'd', 'e']\u000aprint(random.choice(foo))\u000a</code></pre>\u000a\u000a<p>For cryptographically secure random choices (e.g. for generating a passphrase from a wordlist), use <a href="https://docs.python.org/2/library/random.html#random.SystemRandom" rel="noreferrer"><code>random.SystemRandom</code></a> class:</p>\u000a\u000a<pre><code>import random\u000a\u000afoo = ['battery', 'correct', 'horse', 'staple']\u000asecure_random = random.SystemRandom()\u000aprint(secure_random.choice(foo))\u000a</code></pre>\u000a
p371
sVquestion_id
p372
I306400
sVlast_activity_date
p373
I1486386857
sVcreation_date
p374
I1227206799
sVscore
p375
I1662
sVowner
p376
(dp377
Vuser_id
p378
I5821
sVprofile_image
p379
Vhttps://www.gravatar.com/avatar/49a5be1c12519dc592e6d1aafd8026e9?s=128&d=identicon&r=PG
p380
sVuser_type
p381
Vregistered
p382
sVreputation
p383
I24904
sVlink
p384
Vhttp://stackoverflow.com/users/5821/p%c4%93teris-caune
p385
sVaccept_rate
p386
I50
sVdisplay_name
p387
VP\u0113teris Caune
p388
ssVis_accepted
p389
I01
sVlast_edit_date
p390
I1486386857
sVanswer_id
p391
I306417
sa(dp392
Vbody
p393
V<p>From <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="noreferrer">Python Documentation</a>:</p>\u000a\u000a<blockquote>\u000a  <p>An except clause may name multiple exceptions as a parenthesized tuple, for example</p>\u000a</blockquote>\u000a\u000a<pre><code>except (IDontLikeYouException, YouAreBeingMeanException) as e:\u000a    pass\u000a</code></pre>\u000a\u000a<p>Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using <code>as</code>.</p>\u000a
p394
sVquestion_id
p395
I6470428
sVlast_activity_date
p396
I1486253236
sVcreation_date
p397
I1308930994
sVscore
p398
I2030
sVowner
p399
(dp400
Vuser_id
p401
I42346
sVprofile_image
p402
Vhttps://i.stack.imgur.com/ZikEw.jpg?s=128&g=1
p403
sVuser_type
p404
Vregistered
p405
sVreputation
p406
I83917
sVlink
p407
Vhttp://stackoverflow.com/users/42346/bernie
p408
sVdisplay_name
p409
Vbernie
p410
ssVis_accepted
p411
I01
sVlast_edit_date
p412
I1486253236
sVanswer_id
p413
I6470452
sa(dp414
Vbody
p415
V<h2>General way</h2>\u000a\u000a<pre><code>import sys\u000asys.stdout.write('.')\u000a</code></pre>\u000a\u000a<p>You may also need to call</p>\u000a\u000a<pre><code>sys.stdout.flush()\u000a</code></pre>\u000a\u000a<p>to ensure <code>stdout</code> is flushed immediately.</p>\u000a\u000a<h2>Python 2.6+</h2>\u000a\u000a<p>From Python 2.6 you can import the <code>print</code> function from Python 3:</p>\u000a\u000a<pre><code>from __future__ import print_function\u000a</code></pre>\u000a\u000a<p>This allows you to use the Python 3 solution below.</p>\u000a\u000a<h2>Python 3</h2>\u000a\u000a<p>In Python 3, the <code>print</code> statement has been changed into a function. In Python 3, you can instead do:</p>\u000a\u000a<pre><code>print('.', end='')\u000a</code></pre>\u000a\u000a<p>This also works in Python 2, provided that you've used <code>from __future__ import print_function</code>.</p>\u000a\u000a<p>If you are having trouble with buffering, you can flush the output by adding <code>flush=True</code> keyword argument:</p>\u000a\u000a<pre><code>print('.', end='', flush=True)\u000a</code></pre>\u000a
p416
sVquestion_id
p417
I493386
sVlast_activity_date
p418
I1486121992
sVcreation_date
p419
I1233262903
sVscore
p420
I1345
sVowner
p421
(dp422
Vuser_id
p423
I43427
sVprofile_image
p424
Vhttps://www.gravatar.com/avatar/403cdea06d09870a185e495f2194bbcd?s=128&d=identicon&r=PG
p425
sVuser_type
p426
Vregistered
p427
sVreputation
p428
I41720
sVlink
p429
Vhttp://stackoverflow.com/users/43427/codelogic
p430
sVdisplay_name
p431
Vcodelogic
p432
ssVis_accepted
p433
I01
sVlast_edit_date
p434
I1486121992
sVanswer_id
p435
I493399
sa(dp436
Vbody
p437
V<p>Many of the answers here are out of date for 2015 (although <a href="http://stackoverflow.com/a/3220572/908494">the initially accepted one from Daniel Roseman</a> is not). Here's the current state of things:</p>\u000a\u000a<ul>\u000a<li>Binary packages are now distributed as wheels (<code>.whl</code> files)\u2014not just on PyPI, but in third-party repositories like <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">Christoph Gohlke's Extension Packages for Windows</a>. <code>pip</code> can handle wheels; <code>easy_install</code> cannot.</li>\u000a<li>Virtual environments (which come built-in with 3.4, or can be added to 2.6+/3.1+ with <a href="https://pypi.python.org/pypi/virtualenv"><code>virtualenv</code></a>) have become a very important and prominent tool (and recommended in <a href="https://docs.python.org/3/installing/index.html">the official docs</a>); they include <code>pip</code> out of the box, but don't even work properly with <code>easy_install</code>.</li>\u000a<li>The <code>distribute</code> package that included <code>easy_install</code> is no longer maintained. Its improvements over <code>setuptools</code> got merged back into <code>setuptools</code>. Trying to install <code>distribute</code> will just install <code>setuptools</code> instead.</li>\u000a<li><code>easy_install</code> itself is only quasi-maintained.</li>\u000a<li>All of the cases where <code>pip</code> used to be inferior to <code>easy_install</code>\u2014installing from an unpacked source tree, from a DVCS repo, etc.\u2014are long-gone; you can <code>pip install .</code>, <code>pip install git+https://</code>.</li>\u000a<li><code>pip</code> comes with the official Python 2.7 and 3.4+ packages from python.org, and a <code>pip</code> bootstrap is included by default if you build from source.</li>\u000a<li>The various incomplete bits of documentation on installing, using, and building packages have been replaced by the <a href="https://packaging.python.org/">Python Packaging User Guide</a>. Python's own documentation on <a href="https://docs.python.org/3/installing/index.html">Installing Python Modules</a> now defers to this user guide, and explicitly calls out <code>pip</code> as "the preferred installer program".</li>\u000a<li>Other new features have been added to <code>pip</code> over the years that will never be in <code>easy_install</code>. For example, <code>pip</code> makes it easy to clone your site-packages by building a requirements file and then installing it with a single command on each side. Or to convert your requirements file to a local repo to use for in-house development. And so on.</li>\u000a</ul>\u000a\u000a<p>The only good reason that I know of to use <code>easy_install</code> in 2015 is the special case of using Apple's pre-installed Python versions with OS X 10.5-10.8. Since 10.5, Apple has included <code>easy_install</code>, but as of 10.10 they still don't include <code>pip</code>. With 10.9+, you should still just use <code>get-pip.py</code>, but for 10.5-10.8, this has some problems, so it's easier to <code>sudo easy_install pip</code>. (In general, <code>easy_install pip</code> is a bad idea; it's only for OS X 10.5-10.8 that you want to do this.) Also, 10.5-10.8 include <code>readline</code> in a way that <code>easy_install</code> knows how to kludge around but <code>pip</code> doesn't, so you also want to <code>sudo easy_install readline</code> if you want to upgrade that.</p>\u000a
p438
sVquestion_id
p439
I3220404
sVlast_activity_date
p440
I1485121924
sVcreation_date
p441
I1432350630
sVscore
p442
I200
sVowner
p443
(dp444
Vuser_id
p445
I908494
sVprofile_image
p446
Vhttps://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG
p447
sVuser_type
p448
Vregistered
p449
sVreputation
p450
I178720
sVlink
p451
Vhttp://stackoverflow.com/users/908494/abarnert
p452
sVaccept_rate
p453
I25
sVdisplay_name
p454
Vabarnert
p455
ssVis_accepted
p456
I01
sVlast_edit_date
p457
I1485121924
sVanswer_id
p458
I30408520
sa(dp459
Vbody
p460
V<p>With <code>new_list = my_list</code>, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both <code>new_list</code> and <code>my_list</code> refer to the same list after the assignment.</p>\u000a\u000a<p>To actually copy the list, you have various possibilities:</p>\u000a\u000a<ul>\u000a<li><p>You can slice it: </p>\u000a\u000a<pre><code>new_list = old_list[:]\u000a</code></pre>\u000a\u000a<p><a href="https://en.wikipedia.org/wiki/Alex_Martelli" rel="noreferrer" title="Alex Martelli">Alex Martelli's</a> opinion (at least <a href="https://www.youtube.com/watch?v=g7V89K8QfgQ" rel="noreferrer" title="Bay Area Python Interest Group August 2007 Meeting">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p></li>\u000a<li><p>You can use the built in <a href="https://docs.python.org/2/library/functions.html#list" rel="noreferrer" title="list"><code>list()</code></a> function:</p>\u000a\u000a<pre><code>new_list = list(old_list)\u000a</code></pre></li>\u000a<li><p>You can use generic <a href="https://docs.python.org/2/library/copy.html#copy.copy" rel="noreferrer" title="copy.copy"><code>copy.copy()</code></a>:</p>\u000a\u000a<pre><code>import copy\u000anew_list = copy.copy(old_list)\u000a</code></pre>\u000a\u000a<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p></li>\u000a<li><p>If the list contains objects and you want to copy them as well, use generic <a href="https://docs.python.org/2/library/copy.html#copy.deepcopy" rel="noreferrer" title="copy.deepcopy"><code>copy.deepcopy()</code></a>:</p>\u000a\u000a<pre><code>import copy\u000anew_list = copy.deepcopy(old_list)\u000a</code></pre>\u000a\u000a<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable.</p></li>\u000a</ul>\u000a\u000a<p><strong>Example:</strong></p>\u000a\u000a<pre><code>import copy\u000a\u000aclass Foo(object):\u000a    def __init__(self, val):\u000a         self.val = val\u000a\u000a    def __repr__(self):\u000a        return str(self.val)\u000a\u000afoo = Foo(1)\u000a\u000aa = ['foo', foo]\u000ab = a[:]\u000ac = list(a)\u000ad = copy.copy(a)\u000ae = copy.deepcopy(a)\u000a\u000a# edit orignal list and instance \u000aa.append('baz')\u000afoo.val = 5\u000a\u000aprint('original: %r\u005cn slice: %r\u005cn list(): %r\u005cn copy: %r\u005cn deepcopy: %r'\u000a      % (a, b, c, d, e))\u000a</code></pre>\u000a\u000a<p>Result:</p>\u000a\u000a<pre><code>original: ['foo', 5, 'baz']\u000aslice: ['foo', 5]\u000alist(): ['foo', 5]\u000acopy: ['foo', 5]\u000adeepcopy: ['foo', 1]\u000a</code></pre>\u000a
p461
sVquestion_id
p462
I2612802
sVlast_activity_date
p463
I1483640043
sVcreation_date
p464
I1270889721
sVscore
p465
I1628
sVowner
p466
(dp467
Vuser_id
p468
I218196
sVprofile_image
p469
Vhttps://i.stack.imgur.com/4P5DY.jpg?s=128&g=1
p470
sVuser_type
p471
Vregistered
p472
sVreputation
p473
I434555
sVlink
p474
Vhttp://stackoverflow.com/users/218196/felix-kling
p475
sVaccept_rate
p476
I100
sVdisplay_name
p477
VFelix Kling
p478
ssVis_accepted
p479
I01
sVlast_edit_date
p480
I1483640043
sVanswer_id
p481
I2612815
sa(dp482
Vbody
p483
V<pre><code>from datetime import datetime\u000a\u000adatetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\u000a</code></pre>\u000a\u000a<p>The resulting <code>datetime</code> object is timezone-naive.</p>\u000a\u000a<p>Links:</p>\u000a\u000a<ul>\u000a<li><p>Python documentation for <code>strptime</code>: <a href="https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime" rel="noreferrer" title="datetime.datetime.strptime">Python 2</a>, <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="noreferrer">Python 3</a></p></li>\u000a<li><p>Python documentation for <code>strftime</code> format mask: <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer" title="strftime-and-strptime-behavior">Python 2</a>, <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">Python 3</a></p></li>\u000a<li><p><a href="http://strftime.org/" rel="noreferrer">This is also a really nice reference for strftime</a></p></li>\u000a</ul>\u000a\u000a<p>Notes:</p>\u000a\u000a<ul>\u000a<li><code>strptime</code> = "string parse time"</li>\u000a<li><code>strftime</code> = "string format time"</li>\u000a<li>Pronounce it out loud today &amp; you won't have to search for it again in 6 months.</li>\u000a</ul>\u000a
p484
sVquestion_id
p485
I466345
sVlast_activity_date
p486
I1483037875
sVcreation_date
p487
I1232561332
sVscore
p488
I1658
sVowner
p489
(dp490
Vuser_id
p491
I41165
sVprofile_image
p492
Vhttps://www.gravatar.com/avatar/c3fa7cc39c502467700f7aa870963983?s=128&d=identicon&r=PG
p493
sVuser_type
p494
Vregistered
p495
sVreputation
p496
I18887
sVlink
p497
Vhttp://stackoverflow.com/users/41165/patrick-harrington
p498
sVdisplay_name
p499
VPatrick Harrington
p500
ssVis_accepted
p501
I01
sVlast_edit_date
p502
I1483037875
sVanswer_id
p503
I466376
sa(dp504
Vbody
p505
V<p>The Python 3 <code>range()</code> object doesn't produce numbers immediately; it is a smart sequence object that produces numbers <em>on demand</em>. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.</p>\u000a\u000a<p>The object also implements the <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__"><code>object.__contains__</code> hook</a>, and <em>calculates</em> if your number is part of its range. Calculating is a O(1) constant time operation. There is never a need to scan through all possible integers in the range.</p>\u000a\u000a<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#range"><code>range()</code> object documentation</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The advantage of the <code>range</code> type over a regular <code>list</code> or <code>tuple</code> is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the <code>start</code>, <code>stop</code> and <code>step</code> values, calculating individual items and subranges as needed).</p>\u000a</blockquote>\u000a\u000a<p>So at a minimum, your <code>range()</code> object would do:</p>\u000a\u000a<pre><code>class my_range(object):\u000a    def __init__(self, start, stop=None, step=1):\u000a        if stop is None:\u000a            start, stop = 0, start\u000a        self.start, self.stop, self.step = start, stop, step\u000a        if step &lt; 0:\u000a            lo, hi = stop, start\u000a        else:\u000a            lo, hi = start, stop\u000a        self.length = ((hi - lo - 1) // abs(step)) + 1\u000a\u000a    def __iter__(self):\u000a        current = self.start\u000a        if self.step &lt; 0:\u000a            while current &gt; self.stop:\u000a                yield current\u000a                current += self.step\u000a        else:\u000a            while current &lt; self.stop:\u000a                yield current\u000a                current += self.step\u000a\u000a    def __len__(self):\u000a        return self.length\u000a\u000a    def __getitem__(self, i):\u000a        if i &lt; 0:\u000a            i += self.length\u000a        if 0 &lt;= i &lt; self.length:\u000a            return self.start + i * self.step\u000a        raise IndexError('Index out of range: {}'.format(i))\u000a\u000a    def __contains__(self, num):\u000a        if self.step &lt; 0:\u000a            if not (self.stop &lt; num &lt;= self.start):\u000a                return False\u000a        else:\u000a            if not (self.start &lt;= num &lt; self.stop):\u000a                return False\u000a        return (num - self.start) % self.step == 0\u000a</code></pre>\u000a\u000a<p>This is still missing several things that a real <code>range()</code> supports (such as the <code>.index()</code> or <code>.count()</code> methods, hashing, equality testing, or slicing), but should give you an idea.</p>\u000a\u000a<p>I also simplified the <code>__contains__</code> implementation to only focus on integer tests; if you give a real <code>range()</code> object a non-integer value (including subclasses of <code>int</code>), a slow scan is initiated to see if there is a match, just as if you use a containment test against a list of all the contained values. This was done to continue to support other numeric types that just happen to support equality testing with integers but are not expected to support integer arithmetic as well. See the original <a href="http://bugs.python.org/issue1766304">Python issue</a> that implemented the containment test.</p>\u000a
p506
sVquestion_id
p507
I30081275
sVlast_activity_date
p508
I1482266527
sVcreation_date
p509
I1430926438
sVscore
p510
I897
sVowner
p511
(dp512
Vuser_id
p513
I100297
sVprofile_image
p514
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p515
sVuser_type
p516
Vmoderator
p517
sVreputation
p518
I554452
sVlink
p519
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p520
sVdisplay_name
p521
VMartijn Pieters
p522
ssVis_accepted
p523
I01
sVlast_edit_date
p524
I1482266527
sVanswer_id
p525
I30081318
sa(dp526
Vbody
p527
V<p>Whitespace on both sides:</p>\u000a\u000a<pre><code>s = "  \u005ct a string example\u005ct  "\u000as = s.strip()\u000a</code></pre>\u000a\u000a<p>Whitespace on the right side:</p>\u000a\u000a<pre><code>s = s.rstrip()\u000a</code></pre>\u000a\u000a<p>Whitespace on the left side:</p>\u000a\u000a<pre><code>s = s.lstrip()\u000a</code></pre>\u000a\u000a<p>As <a href="http://stackoverflow.com/users/84380/thedz">thedz</a> points out, you can provide an argument to strip arbitrary characters to any of these functions like this:</p>\u000a\u000a<pre><code>s = s.strip(' \u005ct\u005cn\u005cr')\u000a</code></pre>\u000a\u000a<p>This will strip any space, <code>\u005ct</code>, <code>\u005cn</code>, or <code>\u005cr</code> characters from the left-hand side, right-hand side, or both sides of the string. </p>\u000a\u000a<p>The examples above only remove strings from the left-hand and right-hand sides of strings. If you want to also remove characters from the middle of a string, try <code>re.sub</code>:</p>\u000a\u000a<pre><code>import re\u000aprint re.sub('[\u005cs+]', '', s)\u000a</code></pre>\u000a\u000a<p>That should print out:</p>\u000a\u000a<pre><code>astringexample\u000a</code></pre>\u000a
p528
sVquestion_id
p529
I1185524
sVlast_activity_date
p530
I1482117462
sVcreation_date
p531
I1248641786
sVscore
p532
I1043
sVowner
p533
(dp534
Vuser_id
p535
I57458
sVprofile_image
p536
Vhttps://www.gravatar.com/avatar/e5539e4b4d399e76ea80a00159edbee5?s=128&d=identicon&r=PG
p537
sVuser_type
p538
Vregistered
p539
sVreputation
p540
I26018
sVlink
p541
Vhttp://stackoverflow.com/users/57458/james-thompson
p542
sVaccept_rate
p543
I97
sVdisplay_name
p544
VJames Thompson
p545
ssVis_accepted
p546
I01
sVlast_edit_date
p547
I1482117462
sVanswer_id
p548
I1185529
sa(dp549
Vbody
p550
V<p>You can use a global variable in other functions by declaring it as <code>global</code> in each function that assigns to it:</p>\u000a\u000a<pre><code>globvar = 0\u000a\u000adef set_globvar_to_one():\u000a    global globvar    # Needed to modify global copy of globvar\u000a    globvar = 1\u000a\u000adef print_globvar():\u000a    print(globvar)     # No need for global declaration to read value of globvar\u000a\u000aset_globvar_to_one()\u000aprint_globvar()       # Prints 1\u000a</code></pre>\u000a\u000a<p>I imagine the reason for it is that, since global variables are so dangerous, Python wants to make sure that you really know that's what you're playing with by explicitly requiring the <code>global</code> keyword.</p>\u000a\u000a<p>See other answers if you want to share a global variable across modules.</p>\u000a
p551
sVquestion_id
p552
I423379
sVlast_activity_date
p553
I1480563654
sVcreation_date
p554
I1231403984
sVscore
p555
I2776
sVowner
p556
(dp557
Vuser_id
p558
I5536
sVprofile_image
p559
Vhttps://i.stack.imgur.com/2RAZb.jpg?s=128&g=1
p560
sVuser_type
p561
Vregistered
p562
sVreputation
p563
I35693
sVlink
p564
Vhttp://stackoverflow.com/users/5536/paul-stephenson
p565
sVaccept_rate
p566
I75
sVdisplay_name
p567
VPaul Stephenson
p568
ssVis_accepted
p569
I01
sVlast_edit_date
p570
I1480563654
sVanswer_id
p571
I423596
sa(dp572
Vbody
p573
V<pre><code>[item for sublist in l for item in sublist]\u000a</code></pre>\u000a\u000a<p>is faster than the shortcuts posted so far. (<code>l</code> is the list to flatten.)</p>\u000a\u000a<p>Here is a the corresponding function:</p>\u000a\u000a<pre><code>flatten = lambda l: [item for sublist in l for item in sublist]\u000a</code></pre>\u000a\u000a<p>For evidence, as always, you can use the <code>timeit</code> module in the standard library:</p>\u000a\u000a<pre><code>$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'\u000a10000 loops, best of 3: 143 usec per loop\u000a$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'\u000a1000 loops, best of 3: 969 usec per loop\u000a$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'\u000a1000 loops, best of 3: 1.1 msec per loop\u000a</code></pre>\u000a\u000a<p>Explanation: the shortcuts based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(L**2)</code> when there are L sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So (for simplicity and without actual loss of generality) say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., <code>I * (L**2)/2</code>.</p>\u000a\u000a<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>\u000a
p574
sVquestion_id
p575
I952914
sVlast_activity_date
p576
I1480323157
sVcreation_date
p577
I1244147821
sVscore
p578
I1976
sVowner
p579
(dp580
Vuser_id
p581
I95810
sVprofile_image
p582
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p583
sVuser_type
p584
Vregistered
p585
sVreputation
p586
I515749
sVlink
p587
Vhttp://stackoverflow.com/users/95810/alex-martelli
p588
sVaccept_rate
p589
I80
sVdisplay_name
p590
VAlex Martelli
p591
ssVis_accepted
p592
I01
sVlast_edit_date
p593
I1480323157
sVanswer_id
p594
I952952
sa(dp595
Vbody
p596
V<h2>Python 2.7.9+ and 3.4+</h2>\u000a\u000a<p>Good news! <a href="https://docs.python.org/3/whatsnew/3.4.html" rel="noreferrer">Python 3.4</a> (released March 2014) and <a href="https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7" rel="noreferrer">Python 2.7.9</a> (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins <a href="http://en.wikipedia.org/wiki/Ruby_%28programming_language%29" rel="noreferrer">Ruby</a>, <a href="http://en.wikipedia.org/wiki/Node.js" rel="noreferrer">Node.js</a>, <a href="http://en.wikipedia.org/wiki/Haskell_%28programming_language%29" rel="noreferrer">Haskell</a>, <a href="http://en.wikipedia.org/wiki/Perl" rel="noreferrer">Perl</a>, <a href="http://en.wikipedia.org/wiki/Go_%28programming_language%29" rel="noreferrer">Go</a>--almost every other contemporary language with a majority open-source community. Thank you Python.</p>\u000a\u000a<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this <a href="http://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719">in Stack Overflow question <em>Does Python have a package/module management system?</em></a>.</p>\u000a\u000a<p>And, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There's no plan to ship Pip to you. Manual instructions follow.</p>\u000a\u000a<h2>Python 2 \u2264 2.7.8 and Python 3 \u2264 3.3</h2>\u000a\u000a<p>Flying in the face of its <a href="http://www.python.org/about/" rel="noreferrer">'batteries included'</a> motto, Python ships without a package manager. To make matters worse, Pip was--until recently--ironically difficult to install.</p>\u000a\u000a<h3>Official instructions</h3>\u000a\u000a<p>Per <a href="https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip" rel="noreferrer">https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip</a>:</p>\u000a\u000a<p>Download <a href="https://bootstrap.pypa.io/get-pip.py" rel="noreferrer"><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt:</p>\u000a\u000a<pre><code>python get-pip.py\u000a</code></pre>\u000a\u000a<p>You possibly need an administrator command prompt to do this. Follow <em><a href="http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx" rel="noreferrer">Start a Command Prompt as an Administrator</a></em> (Microsoft TechNet).</p>\u000a\u000a<h3>Alternative instructions</h3>\u000a\u000a<p>The official documentation tells users to install Pip and each of its dependencies from source. That's tedious for the experienced, and prohibitively difficult for newbies.</p>\u000a\u000a<p>For our sake, Christoph Gohlke prepares Windows installers (<code>.msi</code>) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to</p>\u000a\u000a<ol>\u000a<li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools" rel="noreferrer">Install setuptools</a></li>\u000a<li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip" rel="noreferrer">Install pip</a></li>\u000a</ol>\u000a\u000a<p>For me, this installed Pip at <code>C:\u005cPython27\u005cScripts\u005cpip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (for example, <code>C:\u005cPython27\u005cScripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>\u000a\u000a<pre><code>pip install httpie\u000a</code></pre>\u000a\u000a<p>There you go (hopefully)! Solutions for common problems are given below:</p>\u000a\u000a<h3>Proxy problems</h3>\u000a\u000a<p>If you work in an office, you might be behind a HTTP proxy. If so, set the environment variables <a href="http://docs.python.org/2/library/urllib.html" rel="noreferrer"><code>http_proxy</code> and <code>https_proxy</code></a>. Most Python applications (and other free software) respect these. Example syntax:</p>\u000a\u000a<pre><code>http://proxy_url:port\u000ahttp://username:password@proxy_url:port\u000a</code></pre>\u000a\u000a<p>If you're really unlucky, your proxy might be a Microsoft <a href="https://en.wikipedia.org/wiki/NT_LAN_Manager" rel="noreferrer">NTLM</a> proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. <a href="http://cntlm.sourceforge.net/" rel="noreferrer">http://cntlm.sourceforge.net/</a></p>\u000a\u000a<h3>Unable to find vcvarsall.bat</h3>\u000a\u000a<p>Python modules can be part written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.</p>\u000a\u000a<blockquote>\u000a  <p>Error: Unable to find vcvarsall.bat</p>\u000a</blockquote>\u000a\u000a<p>You can fix that by <a href="http://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat">installing a C++ compiler</a> such as <a href="http://en.wikipedia.org/wiki/MinGW" rel="noreferrer">MinGW</a> or <a href="http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions" rel="noreferrer">Visual C++</a>. Microsoft actually ship one specifically for use with Python. Or try <em><a href="http://aka.ms/vcpython27" rel="noreferrer">Microsoft Visual C++ Compiler for Python 2.7</a></em>.</p>\u000a\u000a<p>Often though it's easier to check <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noreferrer">Christoph's site</a> for your package.</p>\u000a
p597
sVquestion_id
p598
I4750806
sVlast_activity_date
p599
I1480075807
sVcreation_date
p600
I1347968733
sVscore
p601
I1335
sVowner
p602
(dp603
Vuser_id
p604
I284795
sVprofile_image
p605
Vhttps://www.gravatar.com/avatar/99f7ffd3d45dbcef0b3b6960dcfe81a2?s=128&d=identicon&r=PG
p606
sVuser_type
p607
Vregistered
p608
sVreputation
p609
I61366
sVlink
p610
Vhttp://stackoverflow.com/users/284795/colonel-panic
p611
sVaccept_rate
p612
I79
sVdisplay_name
p613
VColonel Panic
p614
ssVis_accepted
p615
I01
sVlast_edit_date
p616
I1480075807
sVanswer_id
p617
I12476379
sa(dp618
Vbody
p619
V<pre><code>s = "Kilometer"\u000aprint(s.lower())\u000a</code></pre>\u000a\u000a<p>The official documentation is <a href="https://docs.python.org/3.4/library/stdtypes.html?highlight=str.lower#str.lower" rel="noreferrer"><code>str.lower()</code></a>.</p>\u000a
p620
sVquestion_id
p621
I6797984
sVlast_activity_date
p622
I1477864344
sVcreation_date
p623
I1311390598
sVscore
p624
I1651
sVowner
p625
(dp626
Vuser_id
p627
I791998
sVprofile_image
p628
Vhttps://www.gravatar.com/avatar/a6704cf6e18d734f94d5988cf02fae45?s=128&d=identicon&r=PG
p629
sVuser_type
p630
Vregistered
p631
sVreputation
p632
I52262
sVlink
p633
Vhttp://stackoverflow.com/users/791998/petar-ivanov
p634
sVaccept_rate
p635
I80
sVdisplay_name
p636
VPetar Ivanov
p637
ssVis_accepted
p638
I01
sVlast_edit_date
p639
I1477864344
sVanswer_id
p640
I6797990
sa(dp641
Vcommunity_owned_date
p642
I1316309214
sVbody
p643
V<p>Enums have been added to Python 3.4 as described in <a href="http://www.python.org/dev/peps/pep-0435/" rel="noreferrer">PEP 435</a>.  It has also been <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer">backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4</a> on pypi.  </p>\u000a\u000a<p>For more advanced Enum techniques try the <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">aenum library</a> (2.7, 3.3+, same author as <code>enum34</code>. Code is not perfectly compatible between py2 and py3, e.g. you'll need <a href="http://stackoverflow.com/a/25982264/57461"><code>__order__</code> in python 2</a>).</p>\u000a\u000a<ul>\u000a<li>To use <code>enum34</code>, do <code>$ pip install enum34</code></li>\u000a<li>To use <code>aenum</code>, do <code>$ pip install aenum</code></li>\u000a</ul>\u000a\u000a<p>Installing <code>enum</code> (no numbers) will install a completely different and incompatible version.</p>\u000a\u000a<hr>\u000a\u000a<pre><code>from enum import Enum     # for enum34, or the stdlib version\u000a# from aenum import Enum  # for the aenum version\u000aAnimal = Enum('Animal', 'ant bee cat dog')\u000a\u000aAnimal.ant  # returns &lt;Animal.ant: 1&gt;\u000aAnimal['ant']  # returns &lt;Animal.ant: 1&gt; (string lookup)\u000aAnimal.ant.name  # returns 'ant' (inverse lookup)\u000a</code></pre>\u000a\u000a<p>or equivalently:</p>\u000a\u000a<pre><code>class Animal(Enum):\u000a    ant = 1\u000a    bee = 2\u000a    cat = 3\u000a    dog = 4\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>In earlier versions, one way of accomplishing enums is:</p>\u000a\u000a<pre><code>def enum(**enums):\u000a    return type('Enum', (), enums)\u000a</code></pre>\u000a\u000a<p>which is used like so:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; Numbers = enum(ONE=1, TWO=2, THREE='three')\u000a&gt;&gt;&gt; Numbers.ONE\u000a1\u000a&gt;&gt;&gt; Numbers.TWO\u000a2\u000a&gt;&gt;&gt; Numbers.THREE\u000a'three'\u000a</code></pre>\u000a\u000a<p>You can also easily support automatic enumeration with something like this:</p>\u000a\u000a<pre><code>def enum(*sequential, **named):\u000a    enums = dict(zip(sequential, range(len(sequential))), **named)\u000a    return type('Enum', (), enums)\u000a</code></pre>\u000a\u000a<p>and used like so:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; Numbers = enum('ZERO', 'ONE', 'TWO')\u000a&gt;&gt;&gt; Numbers.ZERO\u000a0\u000a&gt;&gt;&gt; Numbers.ONE\u000a1\u000a</code></pre>\u000a\u000a<p>Support for converting the values back to names can be added this way:</p>\u000a\u000a<pre><code>def enum(*sequential, **named):\u000a    enums = dict(zip(sequential, range(len(sequential))), **named)\u000a    reverse = dict((value, key) for key, value in enums.iteritems())\u000a    enums['reverse_mapping'] = reverse\u000a    return type('Enum', (), enums)\u000a</code></pre>\u000a\u000a<p>This overwrites anything with that name, but it is useful for rendering your enums in output.  It will throw KeyError if the reverse mapping doesn't exist.  With the first example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; Numbers.reverse_mapping['three']\u000a'THREE'\u000a</code></pre>\u000a
p644
sVquestion_id
p645
I36932
sVlast_activity_date
p646
I1476714190
sVcreation_date
p647
I1257650128
sVscore
p648
I2016
sVowner
p649
(dp650
Vuser_id
p651
I7980
sVprofile_image
p652
Vhttps://www.gravatar.com/avatar/65b42c59ffe8d671459604f0f32f7a30?s=128&d=identicon&r=PG
p653
sVuser_type
p654
Vregistered
p655
sVreputation
p656
I9654
sVlink
p657
Vhttp://stackoverflow.com/users/7980/alec-thomas
p658
sVdisplay_name
p659
VAlec Thomas
p660
ssVis_accepted
p661
I01
sVlast_edit_date
p662
I1476714190
sVanswer_id
p663
I1695250
sa(dp664
Vbody
p665
V<ol>\u000a<li><p><strong>"What are the largest sites built on Django today?"</strong></p>\u000a\u000a<p>There isn't any single place that collects information about traffic on Django built sites, so I'll have to take a stab at it using data from various locations.  First, we have a list of Django sites on the front page of <a href="http://www.djangoproject.com/" rel="noreferrer">the main Django project page</a> and then a list of Django built sites at <a href="http://www.djangosites.org/" rel="noreferrer">djangosites.org</a>.  Going through the lists and picking some that I know have decent traffic we see:</p>\u000a\u000a<ul>\u000a<li><p><strong><a href="http://instagram.com" rel="noreferrer">Instagram</a></strong>: <a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances" rel="noreferrer">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a>.</p></li>\u000a<li><p><strong><a href="http://pinterest.com/" rel="noreferrer">Pinterest</a></strong>: <a href="http://www.alexa.com/siteinfo/Pinterest.com" rel="noreferrer">Alexa rank 37 (21.4.2015)</a> &amp; 70 Million users in 2013</p></li>\u000a<li><p><strong><a href="http://bitbucket.org/" rel="noreferrer">Bitbucket</a></strong>: <a href="https://blog.bitbucket.org/2015/02/05/bitbucket-2014-in-review/" rel="noreferrer">200TB of Code and 2.500.000 Users</a></p></li>\u000a<li><p><strong><a href="http://disqus.com" rel="noreferrer">Disqus</a></strong>: <a href="http://pyvideo.org/video/418/pycon-2011--disqus--serving-400-million-people-wi" rel="noreferrer">Serving 400 million people with Python</a>.</p></li>\u000a<li><p><strong><a href="http://curse.com/" rel="noreferrer">curse.com</a></strong>: <a href="http://www.quantcast.com/curse.com" rel="noreferrer">600k daily visits</a>, also see <a href="http://cramer.io/2007/05/23/rapid-development-serving-500000-pageshour" rel="noreferrer">Rapid development serving 500,000 pages/hour</a> by David Cramer.</p></li>\u000a<li><p><strong><a href="http://tabblo.com/" rel="noreferrer">tabblo.com</a></strong>: <a href="http://www.quantcast.com/tabblo.com" rel="noreferrer">44k daily visits</a>, see Ned Batchelder's posts <a href="http://nedbatchelder.com/blog/200902/infrastructure_for_modern_web_sites.html" rel="noreferrer">Infrastructure for modern web sites</a>.</p></li>\u000a<li><p><strong><a href="http://chesspark.com/" rel="noreferrer">chesspark.com</a></strong>: <a href="http://www.alexa.com/siteinfo/chesspark.com" rel="noreferrer">Alexa</a> rank about 179k.</p></li>\u000a<li><p><strong><a href="http://pownce.com/" rel="noreferrer">pownce.com</a></strong> (no longer active): <a href="http://www.alexa.com/siteinfo/pownce.com" rel="noreferrer">alexa</a> rank about 65k.\u000aMike Malone of Pownce, in his EuroDjangoCon presentation on <strong><a href="http://www.slideshare.net/road76/scaling-django" rel="noreferrer">Scaling Django Web Apps</a></strong> says "hundreds of hits per second".  This is a very good presentation on how to scale Django, and makes some good points including (current) shortcomings in Django scalability.</p></li>\u000a<li><p>HP had a site built with Django 1.5: <a href="http://www.eprintcenter.com" rel="noreferrer">ePrint center</a>. However, as for novemer/2015 the entire website was migrated and this link is just a redirect. This website was a world-wide service attending subscription to Instant Ink and related services HP offered (*).</p></li>\u000a</ul></li>\u000a<li><p><strong>"Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?"</strong></p>\u000a\u000a<p>Yes, see above.</p></li>\u000a<li><p><strong>"Could a site like Stack Overflow run on Django?"</strong></p>\u000a\u000a<p>My gut feeling is yes but, as others answered and Mike Malone mentions in his presentation, database design is critical. Strong proof might also be found at www.cnprog.com if we can find any reliable traffic stats. Anyway, it's not just something that will happen by throwing together a bunch of Django models :)</p></li>\u000a</ol>\u000a\u000a<p>There are, of course, many more sites and bloggers of interest, but I have got to stop somewhere!</p>\u000a\u000a<hr>\u000a\u000a<p>Blog post about <a href="http://web.archive.org/web/20130307032621/http://concentricsky.com/blog/2009/oct/michaelmoorecom" rel="noreferrer">Using Django to build high-traffic site michaelmoore.com</a> described as a <a href="http://www.alexa.com/siteinfo/http%3A%2F%2Fmichaelmoore.com" rel="noreferrer">top 10,000 website</a>.  <a href="http://www.quantcast.com/michaelmoore.com" rel="noreferrer">Quantcast stats</a> and <a href="http://siteanalytics.compete.com/michaelmoore.com/" rel="noreferrer">compete.com stats</a>.</p>\u000a\u000a<hr>\u000a\u000a<p><sub>(*) The author of the edit, including such reference, used to work as outsourced developer in that project.</sub></p>\u000a
p666
sVquestion_id
p667
I886221
sVlast_activity_date
p668
I1476455817
sVcreation_date
p669
I1242805276
sVscore
p670
I521
sVowner
p671
(dp672
Vuser_id
p673
I34258
sVprofile_image
p674
Vhttps://www.gravatar.com/avatar/0f004343b1c3b4acff06803503c1d028?s=128&d=identicon&r=PG
p675
sVuser_type
p676
Vregistered
p677
sVreputation
p678
I31090
sVlink
p679
Vhttp://stackoverflow.com/users/34258/van-gale
p680
sVdisplay_name
p681
VVan Gale
p682
ssVis_accepted
p683
I01
sVlast_edit_date
p684
I1476455817
sVanswer_id
p685
I886645
sa(dp686
Vbody
p687
V<p><code>key</code> is just a variable name.  </p>\u000a\u000a<pre><code>for key in d:\u000a</code></pre>\u000a\u000a<p>will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:</p>\u000a\u000a<p>For Python 2.x:</p>\u000a\u000a<pre><code>for key, value in d.iteritems():\u000a</code></pre>\u000a\u000a<p>For Python 3.x:</p>\u000a\u000a<pre><code>for key, value in d.items():\u000a</code></pre>\u000a\u000a<p>To test for yourself, change the word <code>key</code> to <code>poop</code>.</p>\u000a\u000a<p>For Python 3.x, <code>iteritems()</code> has been replaced with simply <code>items()</code>, which returns a set-like view backed by the dict, like <code>iteritems()</code> but even better. \u000aThis is also available in 2.7 as <code>viewitems()</code>. </p>\u000a\u000a<p>The operation <code>items()</code> will work for both 2 and 3, but in 2 it will return a list of the dictionary's <code>(key, value)</code> pairs, which will not reflect changes to the dict that happen after the <code>items()</code> call. If you want the 2.x behavior in 3.x, you can call <code>list(d.items())</code>.</p>\u000a
p688
sVquestion_id
p689
I3294889
sVlast_activity_date
p690
I1476387919
sVcreation_date
p691
I1279664973
sVscore
p692
I2538
sVowner
p693
(dp694
Vuser_id
p695
I141555
sVprofile_image
p696
Vhttps://i.stack.imgur.com/g7wWn.jpg?s=128&g=1
p697
sVuser_type
p698
Vregistered
p699
sVreputation
p700
I61917
sVlink
p701
Vhttp://stackoverflow.com/users/141555/sberry
p702
sVaccept_rate
p703
I91
sVdisplay_name
p704
Vsberry
p705
ssVis_accepted
p706
I01
sVlast_edit_date
p707
I1476387919
sVanswer_id
p708
I3294899
sa(dp709
Vbody
p710
V<p>Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.</p>\u000a\u000a<p>The better option is to use the built-in function <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer" title="enumerate"><code>enumerate()</code></a>, available in both Python 2 and 3:</p>\u000a\u000a<pre><code>for idx, val in enumerate(ints):\u000a    print(idx, val)\u000a</code></pre>\u000a\u000a<p>Check out <a href="https://www.python.org/dev/peps/pep-0279/" rel="noreferrer" title="PEP 279">PEP 279</a> for more.</p>\u000a
p711
sVquestion_id
p712
I522563
sVlast_activity_date
p713
I1474107231
sVcreation_date
p714
I1233960756
sVscore
p715
I3147
sVowner
p716
(dp717
Vuser_id
p718
I19082
sVprofile_image
p719
Vhttps://www.gravatar.com/avatar/27c58ba8661585b00b571efab36af60f?s=128&d=identicon&r=PG
p720
sVuser_type
p721
Vregistered
p722
sVreputation
p723
I35197
sVlink
p724
Vhttp://stackoverflow.com/users/19082/mike-hordecki
p725
sVaccept_rate
p726
I50
sVdisplay_name
p727
VMike Hordecki
p728
ssVis_accepted
p729
I01
sVlast_edit_date
p730
I1474107231
sVanswer_id
p731
I522578
sa(dp732
Vbody
p733
V<p>Strings:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; n = '4'\u000a&gt;&gt;&gt; print n.zfill(3)\u000a004\u000a</code></pre>\u000a\u000a<p>And for numbers:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; n = 4\u000a&gt;&gt;&gt; print '%03d' % n\u000a004\u000a&gt;&gt;&gt; print format(4, '03') # python &gt;= 2.6\u000a004\u000a&gt;&gt;&gt; print '{0:03d}'.format(4)  # python &gt;= 2.6\u000a004\u000a&gt;&gt;&gt; print '{foo:03d}'.format(foo=4)  # python &gt;= 2.6\u000a004\u000a&gt;&gt;&gt; print('{:03d}'.format(4))  # python &gt;= 2.7 + python3\u000a004\u000a&gt;&gt;&gt; print('{0:03d}'.format(4))  # python 3\u000a004\u000a</code></pre>\u000a\u000a<p><a href="https://docs.python.org/2/library/string.html#formatexamples" rel="noreferrer">String formatting documentation</a>.</p>\u000a
p734
sVquestion_id
p735
I339007
sVlast_activity_date
p736
I1471954680
sVcreation_date
p737
I1228344124
sVscore
p738
I1169
sVowner
p739
(dp740
Vuser_id
p741
I1057
sVprofile_image
p742
Vhttps://www.gravatar.com/avatar/e5778b659d144e38ed982c3f4e566089?s=128&d=identicon&r=PG
p743
sVuser_type
p744
Vregistered
p745
sVreputation
p746
I78326
sVlink
p747
Vhttp://stackoverflow.com/users/1057/harley-holcombe
p748
sVaccept_rate
p749
I80
sVdisplay_name
p750
VHarley Holcombe
p751
ssVis_accepted
p752
I01
sVlast_edit_date
p753
I1471954680
sVanswer_id
p754
I339013
sa(dp755
Vbody
p756
V<p>A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>\u000a\u000a<p><a href="https://i.stack.imgur.com/QQ0OK.png" rel="noreferrer"><img src="https://i.stack.imgur.com/QQ0OK.png" alt="metaclass diagram"></a></p>\u000a\u000a<p>While in Python you can use arbitrary callables for metaclasses (like <a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037">Jerub</a> shows), the more useful approach is actually to make it an actual class itself. <code>type</code> is the usual metaclass in Python. In case you're wondering, yes, <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>\u000a\u000a<p>A metaclass is most commonly used as a class-factory. Like you create an instance of the class by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry, or even replace the class with something else entirely.</p>\u000a\u000a<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>\u000a\u000a<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods, in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>\u000a\u000a<p>Here's an aggregated example of the bits and pieces:</p>\u000a\u000a<pre><code>def make_hook(f):\u000a    """Decorator to turn 'foo' method into '__foo__'"""\u000a    f.is_hook = 1\u000a    return f\u000a\u000aclass MyType(type):\u000a    def __new__(cls, name, bases, attrs):\u000a\u000a        if name.startswith('None'):\u000a            return None\u000a\u000a        # Go over attributes and see if they should be renamed.\u000a        newattrs = {}\u000a        for attrname, attrvalue in attrs.iteritems():\u000a            if getattr(attrvalue, 'is_hook', 0):\u000a                newattrs['__%s__' % attrname] = attrvalue\u000a            else:\u000a                newattrs[attrname] = attrvalue\u000a\u000a        return super(MyType, cls).__new__(cls, name, bases, newattrs)\u000a\u000a    def __init__(self, name, bases, attrs):\u000a        super(MyType, self).__init__(name, bases, attrs)\u000a\u000a        # classregistry.register(self, self.interfaces)\u000a        print "Would register class %s now." % self\u000a\u000a    def __add__(self, other):\u000a        class AutoClass(self, other):\u000a            pass\u000a        return AutoClass\u000a        # Alternatively, to autogenerate the classname as well as the class:\u000a        # return type(self.__name__ + other.__name__, (self, other), {})\u000a\u000a    def unregister(self):\u000a        # classregistry.unregister(self)\u000a        print "Would unregister class %s now." % self\u000a\u000aclass MyObject:\u000a    __metaclass__ = MyType\u000a\u000a\u000aclass NoneSample(MyObject):\u000a    pass\u000a\u000a# Will print "NoneType None"\u000aprint type(NoneSample), repr(NoneSample)\u000a\u000aclass Example(MyObject):\u000a    def __init__(self, value):\u000a        self.value = value\u000a    @make_hook\u000a    def add(self, other):\u000a        return self.__class__(self.value + other.value)\u000a\u000a# Will unregister the class\u000aExample.unregister()\u000a\u000ainst = Example(10)\u000a# Will fail with an AttributeError\u000a#inst.unregister()\u000a\u000aprint inst + inst\u000aclass Sibling(MyObject):\u000a    pass\u000a\u000aExampleSibling = Example + Sibling\u000a# ExampleSibling is now a subclass of both Example and Sibling (with no\u000a# content of its own) although it will believe it's called 'AutoClass'\u000aprint ExampleSibling\u000aprint ExampleSibling.__mro__\u000a</code></pre>\u000a
p757
sVquestion_id
p758
I100003
sVlast_activity_date
p759
I1470765322
sVcreation_date
p760
I1221807718
sVscore
p761
I1430
sVowner
p762
(dp763
Vuser_id
p764
I17624
sVprofile_image
p765
Vhttps://www.gravatar.com/avatar/90285a816eda046ff55a0dcacc0c5ee8?s=128&d=identicon&r=PG
p766
sVuser_type
p767
Vregistered
p768
sVreputation
p769
I69165
sVlink
p770
Vhttp://stackoverflow.com/users/17624/thomas-wouters
p771
sVdisplay_name
p772
VThomas Wouters
p773
ssVis_accepted
p774
I01
sVlast_edit_date
p775
I1470765322
sVanswer_id
p776
I100146
sa(dp777
Vcommunity_owned_date
p778
I1392332837
sVbody
p779
V<p>Here's a generator that yields the chunks you want:</p>\u000a\u000a<pre><code>def chunks(l, n):\u000a    """Yield successive n-sized chunks from l."""\u000a    for i in range(0, len(l), n):\u000a        yield l[i:i + n]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<pre><code>import pprint\u000apprint.pprint(list(chunks(range(10, 75), 10)))\u000a[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\u000a [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\u000a [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\u000a [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\u000a [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\u000a [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\u000a [70, 71, 72, 73, 74]]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>If you're using Python 2, you should use <code>xrange()</code> instead of <code>range()</code>:</p>\u000a\u000a<pre><code>def chunks(l, n):\u000a    """Yield successive n-sized chunks from l."""\u000a    for i in xrange(0, len(l), n):\u000a        yield l[i:i + n]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Also you can simply use list comprehension instead of write a function. Python 3:</p>\u000a\u000a<pre><code>[l[i:i + n] for i in range(0, len(l), n)]\u000a</code></pre>\u000a\u000a<p>Python 2 version:</p>\u000a\u000a<pre><code>[l[i:i + n] for i in xrange(0, len(l), n)]\u000a</code></pre>\u000a
p780
sVquestion_id
p781
I312443
sVlast_activity_date
p782
I1470352285
sVcreation_date
p783
I1227443633
sVscore
p784
I1481
sVowner
p785
(dp786
Vuser_id
p787
I14343
sVprofile_image
p788
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p789
sVuser_type
p790
Vregistered
p791
sVreputation
p792
I193803
sVlink
p793
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p794
sVaccept_rate
p795
I80
sVdisplay_name
p796
VNed Batchelder
p797
ssVis_accepted
p798
I01
sVlast_edit_date
p799
I1470352285
sVanswer_id
p800
I312464
sa(dp801
Vbody
p802
V<p>I think what Ignacio is saying is that your JSON file is incorrect. You have <code>[]</code> when you should have <code>{}</code>. <code>[]</code> are for lists, <code>{}</code> are for dictionaries.</p>\u000a\u000a<p>Here's how your JSON file should look, your JSON file wouldn't even load for me:</p>\u000a\u000a<pre><code>{\u000a    "maps": [\u000a        {\u000a            "id": "blabla",\u000a            "iscategorical": "0"\u000a        },\u000a        {\u000a            "id": "blabla",\u000a            "iscategorical": "0"\u000a        }\u000a    ],\u000a    "masks": {\u000a        "id": "valore"\u000a    },\u000a    "om_points": "value",\u000a    "parameters": {\u000a        "id": "valore"\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<p>Then you can use your code:</p>\u000a\u000a<pre><code>import json\u000afrom pprint import pprint\u000a\u000awith open('data.json') as data_file:    \u000a    data = json.load(data_file)\u000a\u000apprint(data)\u000a</code></pre>\u000a\u000a<p>With data, you can now also find values like so:</p>\u000a\u000a<pre><code>data["maps"][0]["id"]\u000adata["masks"]["id"]\u000adata["om_points"]\u000a</code></pre>\u000a\u000a<p>Try those out and see if it starts to make sense.</p>\u000a
p803
sVquestion_id
p804
I2835559
sVlast_activity_date
p805
I1470178732
sVcreation_date
p806
I1273853415
sVscore
p807
I1111
sVowner
p808
(dp809
Vuser_id
p810
I254617
sVprofile_image
p811
Vhttps://www.gravatar.com/avatar/b8ae9879d7a5fb62f238a019b272d66f?s=128&d=identicon&r=PG
p812
sVuser_type
p813
Vregistered
p814
sVreputation
p815
I29950
sVlink
p816
Vhttp://stackoverflow.com/users/254617/justin-peel
p817
sVaccept_rate
p818
I80
sVdisplay_name
p819
VJustin Peel
p820
ssVis_accepted
p821
I01
sVlast_edit_date
p822
I1470178732
sVanswer_id
p823
I2835672
sa(dp824
Vbody
p825
V<p>When the Python interpreter reads a source file, it executes all of the code found in it.  </p>\u000a\u000a<p>Before executing the code, it will define a few special variables.  For example, if the python interpreter is running that module (the source file) as the main program, it sets the special <code>__name__</code> variable to have a value <code>"__main__"</code>.  If this file is being imported from another module, <code>__name__</code> will be set to the module's name.</p>\u000a\u000a<p>In the case of your script, let's assume that it's executing as the main function, e.g. you said something like</p>\u000a\u000a<pre><code>python threading_example.py\u000a</code></pre>\u000a\u000a<p>on the command line.  After setting up the special variables, it will execute the <code>import</code> statement and load those modules.  It will then evaluate the <code>def</code> block, creating a function object and creating a variable called <code>myfunction</code> that points to the function object.  It will then read the <code>if</code> statement and see that <code>__name__</code> does equal <code>"__main__"</code>, so it will execute the block shown there.</p>\u000a\u000a<p>One of the reasons for doing this is that sometimes you write a module (a <code>.py</code> file) where it can be executed directly.  Alternatively, it can also be imported and used in another module.  By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves.</p>\u000a\u000a<p>See <a href="http://ibiblio.org/g2swap/byteofpython/read/module-name.html" rel="noreferrer">this page</a> for some extra details.</p>\u000a
p826
sVquestion_id
p827
I419163
sVlast_activity_date
p828
I1470094691
sVcreation_date
p829
I1231302403
sVscore
p830
I3037
sVowner
p831
(dp832
Vuser_id
p833
I25050
sVprofile_image
p834
Vhttps://www.gravatar.com/avatar/6ec78954391f88681b2a5b97ef958d08?s=128&d=identicon&r=PG
p835
sVuser_type
p836
Vregistered
p837
sVreputation
p838
I46611
sVlink
p839
Vhttp://stackoverflow.com/users/25050/mr-fooz
p840
sVaccept_rate
p841
I78
sVdisplay_name
p842
VMr Fooz
p843
ssVis_accepted
p844
I01
sVlast_edit_date
p845
I1470094691
sVanswer_id
p846
I419185
sa(dp847
Vbody
p848
V<p>To get the full path to the directory a Python file is contained in, write this in that file:</p>\u000a\u000a<pre><code>import os \u000adir_path = os.path.dirname(os.path.realpath(__file__))\u000a</code></pre>\u000a\u000a<p>(Note that the incantation above won't work if you've already used <code>os.chdir()</code> to change your current working directory, since the value of the <code>__file__</code> constant is relative to the current working directory and is not changed by an <code>os.chdir()</code> call.)</p>\u000a\u000a<hr>\u000a\u000a<p>To get the current working directory use </p>\u000a\u000a<pre><code>import os\u000acwd = os.getcwd()\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Documentation references for the modules, constants and functions used above:</p>\u000a\u000a<ul>\u000a<li>The <a href="https://docs.python.org/library/os.html"><code>os</code></a> and <a href="https://docs.python.org/library/os.path.html#module-os.path"><code>os.path</code></a> modules.</li>\u000a<li>The <a href="https://docs.python.org/reference/datamodel.html"><code>__file__</code></a> constant</li>\u000a<li><a href="https://docs.python.org/library/os.path.html#os.path.realpath"><code>os.path.realpath(path)</code></a> (returns <em>"the canonical path of the specified filename, eliminating any symbolic links encountered in the path"</em>)</li>\u000a<li><a href="https://docs.python.org/library/os.path.html#os.path.dirname"><code>os.path.dirname(path)</code></a> (returns <em>"the directory name of pathname <code>path</code>"</em>)</li>\u000a<li><a href="https://docs.python.org/library/os.html#os.getcwd"><code>os.getcwd()</code></a> (returns <em>"a string representing the current working directory"</em>)</li>\u000a<li><a href="https://docs.python.org/library/os.html#os.chdir"><code>os.chdir(path)</code></a> (<em>"change the current working directory to <code>path</code>"</em>)</li>\u000a</ul>\u000a
p849
sVquestion_id
p850
I5137497
sVlast_activity_date
p851
I1469968442
sVcreation_date
p852
I1298858058
sVscore
p853
I1431
sVowner
p854
(dp855
Vuser_id
p856
I322129
sVprofile_image
p857
Vhttps://www.gravatar.com/avatar/64abfd8239a7a5b3dd6393fb64c059b3?s=128&d=identicon&r=PG&f=1
p858
sVuser_type
p859
Vregistered
p860
sVreputation
p861
I33751
sVlink
p862
Vhttp://stackoverflow.com/users/322129/russell-dias
p863
sVaccept_rate
p864
I100
sVdisplay_name
p865
VRussell Dias
p866
ssVis_accepted
p867
I01
sVlast_edit_date
p868
I1469968442
sVanswer_id
p869
I5137509
sa(dp870
Vbody
p871
V<p>Environment variables are accessed through <a href="http://docs.python.org/2/library/os.html#process-parameters" rel="noreferrer">os.environ</a></p>\u000a\u000a<pre><code>import os\u000aprint os.environ['HOME']\u000a</code></pre>\u000a\u000a<p>Or you can see a list of all the environment variables using:</p>\u000a\u000a<pre><code>os.environ\u000a</code></pre>\u000a\u000a<p>As sometimes you might need to see a complete list!</p>\u000a\u000a<pre><code># using get will return `None` if a key is not present rather than raise a `KeyError`\u000aprint os.environ.get('KEY_THAT_MIGHT_EXIST')\u000a\u000a# os.getenv is equivalent, and can also give a default value instead of `None`\u000aprint os.getenv('KEY_THAT_MIGHT_EXIST', default_value)\u000a</code></pre>\u000a\u000a<p><a href="http://docs.python.org/install/index.html#how-installation-works" rel="noreferrer">Python default installation</a> on Windows is <code>C:\u005cPython</code>. If you want to find out while running python you can do:</p>\u000a\u000a<pre><code>import sys\u000aprint sys.prefix\u000a</code></pre>\u000a
p872
sVquestion_id
p873
I4906977
sVlast_activity_date
p874
I1469432595
sVcreation_date
p875
I1296911880
sVscore
p876
I1234
sVowner
p877
(dp878
Vuser_id
p879
I64633
sVprofile_image
p880
Vhttps://www.gravatar.com/avatar/27081fdeb4fdc784fa1f14ec0fb2e1db?s=128&d=identicon&r=PG
p881
sVuser_type
p882
Vregistered
p883
sVreputation
p884
I18800
sVlink
p885
Vhttp://stackoverflow.com/users/64633/rod
p886
sVaccept_rate
p887
I100
sVdisplay_name
p888
VRod
p889
ssVis_accepted
p890
I01
sVlast_edit_date
p891
I1469432595
sVanswer_id
p892
I4907053
sa(dp893
Vcommunity_owned_date
p894
I1448304979
sVbody
p895
V<p>Yes, it was <a href="https://mail.python.org/pipermail/python-dev/2005-September/056846.html" rel="noreferrer" title="[Python-Dev] Conditional Expression Resolution">added</a> in version 2.5.<br>\u000aThe syntax is:</p>\u000a\u000a<pre><code>a if condition else b\u000a</code></pre>\u000a\u000a<p>First <code>condition</code> is evaluated, then either <code>a</code> or <code>b</code> is returned based on the <a href="https://en.wikipedia.org/wiki/Boolean_data_type" rel="noreferrer" title="Boolean data type">Boolean</a> value of <code>condition</code><br>\u000aIf <code>condition</code> evaluates to <em>True</em> <code>a</code> is returned, else <code>b</code> is returned. </p>\u000a\u000a<p>For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 'true' if True else 'false'\u000a'true'\u000a&gt;&gt;&gt; 'true' if False else 'false'\u000a'false'\u000a</code></pre>\u000a\u000a<p>Keep in mind that it's frowned upon by some Pythonistas for several reasons:</p>\u000a\u000a<ul>\u000a<li>The order of the arguments is different from many other languages (such as C, Ruby, Java, etc.), which may lead to bugs when people unfamiliar with Python's "surprising" behaviour use it (they may reverse the order).</li>\u000a<li>Some find it "unwieldy", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>\u000a<li>Stylistic reasons.</li>\u000a</ul>\u000a\u000a<p>If you're having trouble remembering the order, then remember that if you read it out loud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>\u000a\u000a<p>Official documentation:</p>\u000a\u000a<ul>\u000a<li><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer" title="Conditional expressions">Conditional expressions</a></li>\u000a<li><a href="https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="noreferrer" title="Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?">Is there an equivalent of C\u2019s \u201d?:\u201d ternary operator?</a></li>\u000a</ul>\u000a
p896
sVquestion_id
p897
I394809
sVlast_activity_date
p898
I1467050394
sVcreation_date
p899
I1230367459
sVscore
p900
I3717
sVowner
p901
(dp902
Vuser_id
p903
I5190
sVprofile_image
p904
Vhttps://www.gravatar.com/avatar/27a12fdc32baf8748018d373a973d22f?s=128&d=identicon&r=PG
p905
sVuser_type
p906
Vregistered
p907
sVreputation
p908
I176575
sVlink
p909
Vhttp://stackoverflow.com/users/5190/vinko-vrsalovic
p910
sVaccept_rate
p911
I74
sVdisplay_name
p912
VVinko Vrsalovic
p913
ssVis_accepted
p914
I01
sVlast_edit_date
p915
I1467050394
sVanswer_id
p916
I394814
sa(dp917
Vbody
p918
V<p>I found this to be the only one short + flexible + portable + readable:</p>\u000a\u000a<pre><code>from __future__ import print_function\u000aimport sys\u000a\u000adef eprint(*args, **kwargs):\u000a    print(*args, file=sys.stderr, **kwargs)\u000a</code></pre>\u000a\u000a<p>The function <code>eprint</code> can be used in the same was as the standard <code>print</code> function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print("Test")\u000aTest\u000a&gt;&gt;&gt; eprint("Test")\u000aTest\u000a&gt;&gt;&gt; eprint("foo", "bar", "baz", sep="---")\u000afoo---bar---baz\u000a</code></pre>\u000a
p919
sVquestion_id
p920
I5574702
sVlast_activity_date
p921
I1465009339
sVcreation_date
p922
I1361367114
sVscore
p923
I591
sVowner
p924
(dp925
Vuser_id
p926
I317623
sVprofile_image
p927
Vhttps://www.gravatar.com/avatar/c5b3f96a72280a159d7caaaaa2f19c41?s=128&d=identicon&r=PG
p928
sVuser_type
p929
Vregistered
p930
sVreputation
p931
I7629
sVlink
p932
Vhttp://stackoverflow.com/users/317623/march
p933
sVdisplay_name
p934
VMarcH
p935
ssVis_accepted
p936
I01
sVlast_edit_date
p937
I1465009339
sVanswer_id
p938
I14981125
sa(dp939
Vbody
p940
V<pre><code>&gt;&gt;&gt; import datetime\u000a&gt;&gt;&gt; datetime.datetime.now()\u000adatetime(2009, 1, 6, 15, 8, 24, 78915)\u000a</code></pre>\u000a\u000a<p>And just the time:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; datetime.datetime.time(datetime.datetime.now())\u000adatetime.time(15, 8, 24, 78915)\u000a</code></pre>\u000a\u000a<p>The same but slightly more compact:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; datetime.datetime.now().time()\u000a</code></pre>\u000a\u000a<p>See the <a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer"><strong>documentation</strong></a> for more info.</p>\u000a\u000a<p>To save typing, you can import the <code>datetime</code> object from the <code>datetime</code> module:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from datetime import datetime\u000a</code></pre>\u000a\u000a<p>Then remove the leading <code>datetime.</code> from all the above.</p>\u000a
p941
sVquestion_id
p942
I415511
sVlast_activity_date
p943
I1464546435
sVcreation_date
p944
I1231217825
sVscore
p945
I1418
sVowner
p946
(dp947
Vuser_id
p948
I1057
sVprofile_image
p949
Vhttps://www.gravatar.com/avatar/e5778b659d144e38ed982c3f4e566089?s=128&d=identicon&r=PG
p950
sVuser_type
p951
Vregistered
p952
sVreputation
p953
I78326
sVlink
p954
Vhttp://stackoverflow.com/users/1057/harley-holcombe
p955
sVaccept_rate
p956
I80
sVdisplay_name
p957
VHarley Holcombe
p958
ssVis_accepted
p959
I01
sVlast_edit_date
p960
I1464546435
sVanswer_id
p961
I415519
sa(dp962
Vbody
p963
V<p><a href="https://docs.python.org/2/library/array.html?#array.array.append" rel="noreferrer"><code>append</code></a>: Appends object at end.</p>\u000a\u000a<pre><code>x = [1, 2, 3]\u000ax.append([4, 5])\u000aprint (x)\u000a</code></pre>\u000a\u000a<p>gives you: <code>[1, 2, 3, [4, 5]]</code></p>\u000a\u000a<hr>\u000a\u000a<p><a href="https://docs.python.org/2/library/array.html?#array.array.extend" rel="noreferrer"><code>extend</code></a>: Extends list by appending elements from the iterable.</p>\u000a\u000a<pre><code>x = [1, 2, 3]\u000ax.extend([4, 5])\u000aprint (x)\u000a</code></pre>\u000a\u000a<p>gives you: <code>[1, 2, 3, 4, 5]</code></p>\u000a
p964
sVquestion_id
p965
I252703
sVlast_activity_date
p966
I1462500465
sVcreation_date
p967
I1225432945
sVscore
p968
I2949
sVowner
p969
(dp970
Vuser_id
p971
I4172
sVprofile_image
p972
Vhttps://www.gravatar.com/avatar/32cdc777a19a6f2b2129decd30061cd1?s=128&d=identicon&r=PG
p973
sVuser_type
p974
Vregistered
p975
sVreputation
p976
I41627
sVlink
p977
Vhttp://stackoverflow.com/users/4172/kender
p978
sVaccept_rate
p979
I60
sVdisplay_name
p980
Vkender
p981
ssVis_accepted
p982
I01
sVlast_edit_date
p983
I1462500465
sVanswer_id
p984
I252711
sa(dp985
Vbody
p986
V<p>I see two answers with good qualities, each with a small flaw, so I will give my take on it:</p>\u000a\u000a<p>Try <a href="https://docs.python.org/2/library/os.path.html#os.path.exists" rel="noreferrer"><code>os.path.exists</code></a>, and consider <a href="https://docs.python.org/2/library/os.html#os.makedirs" rel="noreferrer"><code>os.makedirs</code></a> for the creation.</p>\u000a\u000a<pre><code>if not os.path.exists(directory):\u000a    os.makedirs(directory)\u000a</code></pre>\u000a\u000a<p>As noted in comments and elsewhere, there's a race condition - if the directory is created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, the <code>os.makedirs</code> will fail with an <code>OSError</code>. Unfortunately, blanket-catching <code>OSError</code> and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</p>\u000a\u000a<p>One option would be to trap the <code>OSError</code> and examine the embedded error code, if one knew what's what (on my OS, 13 seems to indicate that permission is denied, and 17 that the file exists - it's not clear that that's even remotely portable, but is explored in <a href="http://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror">Is there a cross-platform way of getting information from Python\u2019s OSError</a>). Alternatively, there could be a second <code>os.path.exists</code>, but suppose another created the directory after the first check, then removed it before the second one - we could still be fooled. </p>\u000a\u000a<p>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</p>\u000a
p987
sVquestion_id
p988
I273192
sVlast_activity_date
p989
I1459635915
sVcreation_date
p990
I1226084767
sVscore
p991
I2491
sVowner
p992
(dp993
Vuser_id
p994
I1199
sVprofile_image
p995
Vhttps://www.gravatar.com/avatar/78cb7314ef6c9ff2954f8e0d6506fc06?s=128&d=identicon&r=PG
p996
sVuser_type
p997
Vregistered
p998
sVreputation
p999
I112333
sVlink
p1000
Vhttp://stackoverflow.com/users/1199/blair-conrad
p1001
sVdisplay_name
p1002
VBlair Conrad
p1003
ssVis_accepted
p1004
I01
sVlast_edit_date
p1005
I1459635915
sVanswer_id
p1006
I273227
sa(dp1007
Vbody
p1008
V<p>Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>:</p>\u000a\u000a<pre><code>class A(object):\u000a    def foo(self,x):\u000a        print "executing foo(%s,%s)"%(self,x)\u000a\u000a    @classmethod\u000a    def class_foo(cls,x):\u000a        print "executing class_foo(%s,%s)"%(cls,x)\u000a\u000a    @staticmethod\u000a    def static_foo(x):\u000a        print "executing static_foo(%s)"%x    \u000a\u000aa=A()\u000a</code></pre>\u000a\u000a<p>Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument.</p>\u000a\u000a<pre><code>a.foo(1)\u000a# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>.</p>\u000a\u000a<pre><code>a.class_foo(1)\u000a# executing class_foo(&lt;class '__main__.A'&gt;,1)\u000a</code></pre>\u000a\u000a<p>You can also call <code>class_foo</code> using the class. In fact, if you define something to be\u000aa classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine:</p>\u000a\u000a<pre><code>A.class_foo(1)\u000a# executing class_foo(&lt;class '__main__.A'&gt;,1)\u000a</code></pre>\u000a\u000a<p>One use people have found for class methods is to create <a href="http://stackoverflow.com/a/1950927/190597">inheritable alternative constructors</a>.</p>\u000a\u000a<hr>\u000a\u000a<p><strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:</p>\u000a\u000a<pre><code>a.static_foo(1)\u000a# executing static_foo(1)\u000a\u000aA.static_foo('hi')\u000a# executing static_foo(hi)\u000a</code></pre>\u000a\u000a<p>Staticmethods are used to group functions which have some logical connection with a class to the class.</p>\u000a\u000a<hr>\u000a\u000a<p><code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,\u000ayou get a "partially applied" version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument.</p>\u000a\u000a<p><code>a</code> is bound to <code>foo</code>. That is what is meant by the term "bound" below:</p>\u000a\u000a<pre><code>print(a.foo)\u000a# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;\u000a</code></pre>\u000a\u000a<p>With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>.</p>\u000a\u000a<pre><code>print(a.class_foo)\u000a# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;\u000a</code></pre>\u000a\u000a<p>Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returns\u000aa good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and\u000a<code>a.static_foo</code> expects 1 argument too.</p>\u000a\u000a<pre><code>print(a.static_foo)\u000a# &lt;function static_foo at 0xb7d479cc&gt;\u000a</code></pre>\u000a\u000a<p>And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.</p>\u000a\u000a<pre><code>print(A.static_foo)\u000a# &lt;function static_foo at 0xb7d479cc&gt;\u000a</code></pre>\u000a
p1009
sVquestion_id
p1010
I136097
sVlast_activity_date
p1011
I1455049253
sVcreation_date
p1012
I1257275628
sVscore
p1013
I1597
sVowner
p1014
(dp1015
Vuser_id
p1016
I190597
sVprofile_image
p1017
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p1018
sVuser_type
p1019
Vregistered
p1020
sVreputation
p1021
I424924
sVlink
p1022
Vhttp://stackoverflow.com/users/190597/unutbu
p1023
sVaccept_rate
p1024
I88
sVdisplay_name
p1025
Vunutbu
p1026
ssVis_accepted
p1027
I01
sVlast_edit_date
p1028
I1455049253
sVanswer_id
p1029
I1669524
sa(dp1030
Vbody
p1031
V<p>It's a part of a package. <a href="http://docs.python.org/tutorial/modules.html#packages" rel="noreferrer">Here's the documentation.</a></p>\u000a\u000a<blockquote>\u000a  <p>The <code>__init__.py</code> files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as <code>string</code>, from unintentionally hiding valid modules that occur later (deeper) on the module search path. In the simplest case, <code>__init__.py</code> can just be an empty file, but it can also execute initialization code for the package or set the <code>__all__</code> variable, described later.</p>\u000a</blockquote>\u000a
p1032
sVquestion_id
p1033
I448271
sVlast_activity_date
p1034
I1454689399
sVcreation_date
p1035
I1232050404
sVscore
p1036
I663
sVowner
p1037
(dp1038
Vuser_id
p1039
I39057
sVprofile_image
p1040
Vhttps://www.gravatar.com/avatar/884a795250ab6d23ae2bf052ba831610?s=128&d=identicon&r=PG
p1041
sVuser_type
p1042
Vregistered
p1043
sVreputation
p1044
I13335
sVlink
p1045
Vhttp://stackoverflow.com/users/39057/loki
p1046
sVaccept_rate
p1047
I90
sVdisplay_name
p1048
VLoki
p1049
ssVis_accepted
p1050
I01
sVlast_edit_date
p1051
I1454689399
sVanswer_id
p1052
I448279
sa(dp1053
Vbody
p1054
V<p><a href="http://docs.python.org/2/library/shutil.html" rel="noreferrer"><code>shutil</code></a> has many methods you can use. One of which is:</p>\u000a\u000a<pre><code>from shutil import copyfile\u000a\u000acopyfile(src, dst)\u000a</code></pre>\u000a\u000a<p>Copy the contents of the file named <code>src</code> to a file named <code>dst</code>. The destination location must be writable; otherwise, an <code>IOError</code> exception will be raised. If <code>dst</code> already exists, it will be replaced. Special files such as character or block devices and pipes cannot be copied with this function. <code>src</code> and <code>dst</code> are path names given as strings. </p>\u000a
p1055
sVquestion_id
p1056
I123198
sVlast_activity_date
p1057
I1453168431
sVcreation_date
p1058
I1222197935
sVscore
p1059
I1187
sVowner
p1060
(dp1061
Vuser_id
p1062
I12682
sVprofile_image
p1063
Vhttps://www.gravatar.com/avatar/9c6aeb29b5fb2bfebbb57dd47fc59dd6?s=128&d=identicon&r=PG
p1064
sVuser_type
p1065
Vregistered
p1066
sVreputation
p1067
I16218
sVlink
p1068
Vhttp://stackoverflow.com/users/12682/swati
p1069
sVaccept_rate
p1070
I100
sVdisplay_name
p1071
VSwati
p1072
ssVis_accepted
p1073
I01
sVlast_edit_date
p1074
I1453168431
sVanswer_id
p1075
I123212
sa(dp1076
Vbody
p1077
V<pre><code>import sys\u000asys.stdout.flush()\u000a</code></pre>\u000a\u000a<p>Print by default prints to <code>sys.stdout</code>.</p>\u000a\u000a<p>References:</p>\u000a\u000a<ul>\u000a<li><a href="http://docs.python.org/reference/simple_stmts.html#the-print-statement" rel="noreferrer">http://docs.python.org/reference/simple_stmts.html#the-print-statement</a></li>\u000a<li><a href="http://docs.python.org/library/sys.html" rel="noreferrer">http://docs.python.org/library/sys.html</a></li>\u000a<li><a href="http://docs.python.org/library/stdtypes.html#file-objects" rel="noreferrer">http://docs.python.org/library/stdtypes.html#file-objects</a></li>\u000a</ul>\u000a
p1078
sVquestion_id
p1079
I230751
sVlast_activity_date
p1080
I1452224303
sVcreation_date
p1081
I1224785099
sVscore
p1082
I849
sVowner
p1083
(dp1084
Vuser_id
p1085
I28258
sVprofile_image
p1086
Vhttps://www.gravatar.com/avatar/ccc2b01a6e55723c6b9d3810482dd8cf?s=128&d=identicon&r=PG
p1087
sVuser_type
p1088
Vregistered
p1089
sVreputation
p1090
I26823
sVlink
p1091
Vhttp://stackoverflow.com/users/28258/cesarb
p1092
sVaccept_rate
p1093
I80
sVdisplay_name
p1094
VCesarB
p1095
ssVis_accepted
p1096
I01
sVlast_edit_date
p1097
I1452224303
sVanswer_id
p1098
I230774
sa(dp1099
Vbody
p1100
V<p>Check out <a href="http://docs.python.org/reference/compound_stmts.html#function" rel="noreferrer">the documentation</a> to see how decorators work. Here is what you asked for:</p>\u000a\u000a<pre><code>def makebold(fn):\u000a    def wrapped():\u000a        return "&lt;b&gt;" + fn() + "&lt;/b&gt;"\u000a    return wrapped\u000a\u000adef makeitalic(fn):\u000a    def wrapped():\u000a        return "&lt;i&gt;" + fn() + "&lt;/i&gt;"\u000a    return wrapped\u000a\u000a@makebold\u000a@makeitalic\u000adef hello():\u000a    return "hello world"\u000a\u000aprint hello() ## returns "&lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;"\u000a</code></pre>\u000a
p1101
sVquestion_id
p1102
I739654
sVlast_activity_date
p1103
I1450366750
sVcreation_date
p1104
I1239434178
sVscore
p1105
I2452
sVowner
p1106
(dp1107
Vuser_id
p1108
I16417
sVprofile_image
p1109
Vhttps://www.gravatar.com/avatar/80ae8ec34e9e3e66c5be50733afaa44e?s=128&d=identicon&r=PG
p1110
sVuser_type
p1111
Vregistered
p1112
sVreputation
p1113
I313456
sVlink
p1114
Vhttp://stackoverflow.com/users/16417/paolo-bergantino
p1115
sVaccept_rate
p1116
I93
sVdisplay_name
p1117
VPaolo Bergantino
p1118
ssVis_accepted
p1119
I01
sVlast_edit_date
p1120
I1450366750
sVanswer_id
p1121
I739665
sa(dp1122
Vbody
p1123
V<p>Have you tried the <code>__name__</code> attribute of the class? ie <code>type(x).__name__</code> will give you the name of the class, which I think is what you want.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import itertools\u000a&gt;&gt;&gt; x = itertools.count(0)\u000a&gt;&gt;&gt; type(x).__name__\u000a'count'\u000a</code></pre>\u000a\u000a<p>This method works with <a href="https://wiki.python.org/moin/NewClassVsClassicClass" rel="noreferrer">new-style classes</a> only. Your code might use some old-style classes. The following works for both:</p>\u000a\u000a<pre><code>x.__class__.__name__\u000a</code></pre>\u000a
p1124
sVquestion_id
p1125
I510972
sVlast_activity_date
p1126
I1449813566
sVcreation_date
p1127
I1233748932
sVscore
p1128
I1073
sVowner
p1129
(dp1130
Vuser_id
p1131
I53850
sVprofile_image
p1132
Vhttps://www.gravatar.com/avatar/26b8c45762e996c0de755eb3c7f421a8?s=128&d=identicon&r=PG
p1133
sVuser_type
p1134
Vregistered
p1135
sVreputation
p1136
I46607
sVlink
p1137
Vhttp://stackoverflow.com/users/53850/sykora
p1138
sVdisplay_name
p1139
Vsykora
p1140
ssVis_accepted
p1141
I01
sVlast_edit_date
p1142
I1449813566
sVanswer_id
p1143
I511059
sa(dp1144
Vbody
p1145
V<p>You can use the <a href="https://docs.python.org/reference/expressions.html#membership-test-details" rel="noreferrer"><code>in</code> operator</a>:</p>\u000a\u000a<pre><code>if "blah" not in somestring: \u000a    continue\u000a</code></pre>\u000a
p1146
sVquestion_id
p1147
I3437059
sVlast_activity_date
p1148
I1447284617
sVcreation_date
p1149
I1281322581
sVscore
p1150
I2764
sVowner
p1151
(dp1152
Vuser_id
p1153
I309308
sVprofile_image
p1154
Vhttps://www.gravatar.com/avatar/dd7e03fbbfcabd4675844173ec5390d2?s=128&d=identicon&r=PG
p1155
sVuser_type
p1156
Vregistered
p1157
sVreputation
p1158
I81360
sVlink
p1159
Vhttp://stackoverflow.com/users/309308/michael-mrozek
p1160
sVaccept_rate
p1161
I76
sVdisplay_name
p1162
VMichael Mrozek
p1163
ssVis_accepted
p1164
I01
sVlast_edit_date
p1165
I1447284617
sVanswer_id
p1166
I3437070
sa(dp1167
Vbody
p1168
V<pre><code>&gt;&gt;&gt; ["foo", "bar", "baz"].index("bar")\u000a1\u000a</code></pre>\u000a\u000a<p>Reference: <a href="http://docs.python.org/2/tutorial/datastructures.html#more-on-lists" rel="noreferrer">Data Structures > More on Lists</a></p>\u000a
p1169
sVquestion_id
p1170
I176918
sVlast_activity_date
p1171
I1446046826
sVcreation_date
p1172
I1223343649
sVscore
p1173
I2309
sVowner
p1174
(dp1175
Vuser_id
p1176
I1941213
sVprofile_image
p1177
Vhttps://www.gravatar.com/avatar/24dea531b0cb0ec8ccd9825f0bd0886a?s=128&d=identicon&r=PG
p1178
sVuser_type
p1179
Vregistered
p1180
sVreputation
p1181
I28870
sVlink
p1182
Vhttp://stackoverflow.com/users/1941213/alex-coventry
p1183
sVaccept_rate
p1184
I54
sVdisplay_name
p1185
VAlex Coventry
p1186
ssVis_accepted
p1187
I01
sVlast_edit_date
p1188
I1446046826
sVanswer_id
p1189
I176921
sa(dp1190
Vbody
p1191
V<p>It's because any iterable can be joined, not just lists, but the result and the "joiner" are always strings.</p>\u000a\u000a<p>E.G:</p>\u000a\u000a<pre><code>import urllib2\u000aprint '\u005cn############\u005cn'.join(\u000a    urllib2.urlopen('http://data.stackexchange.com/users/7095'))\u000a</code></pre>\u000a
p1192
sVquestion_id
p1193
I493819
sVlast_activity_date
p1194
I1445923735
sVcreation_date
p1195
I1233269478
sVscore
p1196
I769
sVowner
p1197
(dp1198
Vuser_id
p1199
I44743
sVprofile_image
p1200
Vhttps://www.gravatar.com/avatar/9af6bab469df2f4e1486c3a608446f3b?s=128&d=identicon&r=PG
p1201
sVuser_type
p1202
Vregistered
p1203
sVreputation
p1204
I52318
sVlink
p1205
Vhttp://stackoverflow.com/users/44743/recursive
p1206
sVaccept_rate
p1207
I73
sVdisplay_name
p1208
Vrecursive
p1209
ssVis_accepted
p1210
I01
sVlast_edit_date
p1211
I1445923735
sVanswer_id
p1212
I493842
sa(dp1213
Vbody
p1214
V<p>Yep, using the <a href="https://docs.python.org/2/library/functions.html#staticmethod" rel="noreferrer" title="staticmethod">staticmethod</a> decorator</p>\u000a\u000a<pre><code>class MyClass(object):\u000a    @staticmethod\u000a    def the_static_method(x):\u000a        print x\u000a\u000aMyClass.the_static_method(2) # outputs 2\u000a</code></pre>\u000a\u000a<p>Note that some code might use the old method of defining a static method, using <code>staticmethod</code> as a function rather than a decorator. This should only be used if you have to support ancient versions of Python (2.2 and 2.3)</p>\u000a\u000a<pre><code>class MyClass(object):\u000a    def the_static_method(x):\u000a        print x\u000a    the_static_method = staticmethod(the_static_method)\u000a\u000aMyClass.the_static_method(2) # outputs 2\u000a</code></pre>\u000a\u000a<p>This is entirely identical to the first example (using <code>@staticmethod</code>), just not using the nice decorator syntax</p>\u000a\u000a<p>Finally, use <a href="https://docs.python.org/2/library/functions.html#staticmethod" rel="noreferrer" title="staticmethod"><code>staticmethod()</code></a> sparingly! There are very few situations where static-methods are necessary in Python, and I've seen them used many times where a separate "top-level" function would have been clearer.</p>\u000a\u000a<hr>\u000a\u000a<p><a href="https://docs.python.org/2/library/functions.html#staticmethod" rel="noreferrer" title="staticmethod">The following is verbatim from the documentation:</a>:</p>\u000a\u000a<blockquote>\u000a  <p>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</p>\u000a\u000a<pre><code>class C:\u000a    @staticmethod\u000a    def f(arg1, arg2, ...): ...\u000a</code></pre>\u000a  \u000a  <p>The @staticmethod form is a function <a href="https://docs.python.org/2/glossary.html#term-decorator" rel="noreferrer" title="term-decorator"><em>decorator</em></a> \u2013 see the description of function definitions in <a href="https://docs.python.org/2/reference/compound_stmts.html#function" rel="noreferrer" title="Function definitions"><em>Function definitions</em></a> for details.</p>\u000a  \u000a  <p>It can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>). The instance is ignored except for its class.</p>\u000a  \u000a  <p>Static methods in Python are similar to those found in Java or C++. For a more advanced concept, see <a href="https://docs.python.org/2/library/functions.html#classmethod" rel="noreferrer" title="classmethod"><code>classmethod()</code></a>.</p>\u000a  \u000a  <p>For more information on static methods, consult the documentation on the standard type hierarchy in <a href="https://docs.python.org/2/reference/datamodel.html#types" rel="noreferrer" title="types"><em>The standard type hierarchy</em></a>.</p>\u000a  \u000a  <p>New in version 2.2.</p>\u000a  \u000a  <p>Changed in version 2.4: Function decorator syntax added.</p>\u000a</blockquote>\u000a
p1215
sVquestion_id
p1216
I735975
sVlast_activity_date
p1217
I1444929050
sVcreation_date
p1218
I1239312276
sVscore
p1219
I1389
sVowner
p1220
(dp1221
Vuser_id
p1222
I745
sVprofile_image
p1223
Vhttps://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=128&d=identicon&r=PG
p1224
sVuser_type
p1225
Vregistered
p1226
sVreputation
p1227
I100229
sVlink
p1228
Vhttp://stackoverflow.com/users/745/dbr
p1229
sVaccept_rate
p1230
I90
sVdisplay_name
p1231
Vdbr
p1232
ssVis_accepted
p1233
I01
sVlast_edit_date
p1234
I1444929050
sVanswer_id
p1235
I735978
sa(dp1236
Vbody
p1237
V<p>The <a href="https://docs.python.org/2/library/functions.html#len" rel="noreferrer" title="len()"><code>len()</code></a> function can be used with a lot of types in <a href="http://en.wikipedia.org/wiki/Python_%28programming_language%29" rel="noreferrer">Python</a> - both built-in types and library types.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; len([1,2,3])\u000a3\u000a</code></pre>\u000a
p1238
sVquestion_id
p1239
I1712227
sVlast_activity_date
p1240
I1444928590
sVcreation_date
p1241
I1257899602
sVscore
p1242
I1624
sVowner
p1243
(dp1244
Vuser_id
p1245
I27204
sVprofile_image
p1246
Vhttps://www.gravatar.com/avatar/29671a1757eb710d42d327926b5e08b5?s=128&d=identicon&r=PG
p1247
sVuser_type
p1248
Vregistered
p1249
sVreputation
p1250
I46838
sVlink
p1251
Vhttp://stackoverflow.com/users/27204/gnud
p1252
sVdisplay_name
p1253
Vgnud
p1254
ssVis_accepted
p1255
I01
sVlast_edit_date
p1256
I1444928590
sVanswer_id
p1257
I1712236
sa(dp1258
Vbody
p1259
V<pre><code>&gt;&gt;&gt; str(10)\u000a'10'\u000a&gt;&gt;&gt; int('10')\u000a10\u000a</code></pre>\u000a\u000a<p>[Edit]</p>\u000a\u000a<p>Links to the documentation:<br>\u000a<a href="https://docs.python.org/2/library/functions.html#int" rel="noreferrer"><code>int()</code></a><br>\u000a<a href="https://docs.python.org/2/library/functions.html#str" rel="noreferrer"><code>str()</code></a></p>\u000a\u000a<p>[Edit]</p>\u000a\u000a<p>The problem seems to come from this line: <code>d.str()</code><br>\u000aConversion to string is done with the builtin <code>str()</code> function, which basically calls the <code>__str__()</code> method of its parameter.</p>\u000a\u000a<p>Also, it shouldn't be necessary to call <code>pow()</code>. Try using the <code>**</code> operator.</p>\u000a
p1260
sVquestion_id
p1261
I961632
sVlast_activity_date
p1262
I1444921732
sVcreation_date
p1263
I1244370255
sVscore
p1264
I1213
sVowner
p1265
(dp1266
Vuser_id
p1267
I88851
sVprofile_image
p1268
Vhttps://www.gravatar.com/avatar/f42db155847d3648bc14b86bf838af06?s=128&d=identicon&r=PG
p1269
sVuser_type
p1270
Vregistered
p1271
sVreputation
p1272
I34625
sVlink
p1273
Vhttp://stackoverflow.com/users/88851/bastien-l%c3%a9onard
p1274
sVaccept_rate
p1275
I73
sVdisplay_name
p1276
VBastien L&#233;onard
p1277
ssVis_accepted
p1278
I01
sVlast_edit_date
p1279
I1444921732
sVanswer_id
p1280
I961638
sa(dp1281
Vbody
p1282
V<p>By default, <code>cin</code> is synchronized with stdio, which causes it to avoid any input buffering.  If you add this to the top of your main, you should see much better performance:</p>\u000a\u000a<pre><code>std::ios_base::sync_with_stdio(false);\u000a</code></pre>\u000a\u000a<p>Normally, when an input stream is buffered, instead of reading one character at a time, the stream will be read in larger chunks.  This reduces the number of system calls, which are typically relatively expensive.  However, since the <code>FILE*</code> based <code>stdio</code> and <code>iostreams</code> often have separate implementations and therefore separate buffers, this could lead to a problem if both were used together.  For example:</p>\u000a\u000a<pre><code>int myvalue1;\u000acin &gt;&gt; myvalue1;\u000aint myvalue2;\u000ascanf("%d",&amp;myvalue2);\u000a</code></pre>\u000a\u000a<p>If more input was read by <code>cin</code> than it actually needed, then the second integer value wouldn't be available for the <code>scanf</code> function, which has its own independent buffer.  This would lead to unexpected results.</p>\u000a\u000a<p>To avoid this, by default, streams are synchronized with <code>stdio</code>.  One common way to achieve this is to have <code>cin</code> read each character one at a time as needed using <code>stdio</code> functions.  Unfortunately, this introduces a lot of overhead.  For small amounts of input, this isn't a big problem, but when you are reading millions of lines, the performance penalty is significant.</p>\u000a\u000a<p>Fortunately, the library designers decided that you should also be able to disable this feature to get improved performance if you knew what you were doing, so they provided the <code>sync_with_stdio</code> method.</p>\u000a
p1283
sVquestion_id
p1284
I9371238
sVlast_activity_date
p1285
I1443630378
sVcreation_date
p1286
I1329794659
sVscore
p1287
I893
sVowner
p1288
(dp1289
Vuser_id
p1290
I951890
sVprofile_image
p1291
Vhttps://www.gravatar.com/avatar/01c3ef0adae5153378a3f602ca068a03?s=128&d=identicon&r=PG
p1292
sVuser_type
p1293
Vregistered
p1294
sVreputation
p1295
I44633
sVlink
p1296
Vhttp://stackoverflow.com/users/951890/vaughn-cato
p1297
sVdisplay_name
p1298
VVaughn Cato
p1299
ssVis_accepted
p1300
I01
sVlast_edit_date
p1301
I1443630378
sVanswer_id
p1302
I9371717
sa(dp1303
Vbody
p1304
V<p>You need to decode the bytes object to produce a string:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; b"abcde"\u000ab'abcde'\u000a\u000a# utf-8 is used here because it is a very common encoding, but you\u000a# need to use the encoding your data is actually in.\u000a&gt;&gt;&gt; b"abcde".decode("utf-8") \u000a'abcde'\u000a</code></pre>\u000a
p1305
sVquestion_id
p1306
I606191
sVlast_activity_date
p1307
I1437761652
sVcreation_date
p1308
I1236083178
sVscore
p1309
I1189
sVowner
p1310
(dp1311
Vuser_id
p1312
I2603
sVprofile_image
p1313
Vhttps://i.stack.imgur.com/NIuNK.jpg?s=128&g=1
p1314
sVuser_type
p1315
Vregistered
p1316
sVreputation
p1317
I58747
sVlink
p1318
Vhttp://stackoverflow.com/users/2603/aaron-maenpaa
p1319
sVaccept_rate
p1320
I75
sVdisplay_name
p1321
VAaron Maenpaa
p1322
ssVis_accepted
p1323
I01
sVlast_edit_date
p1324
I1437761652
sVanswer_id
p1325
I606199
sa(dp1326
Vbody
p1327
V<p>To answer your first question... <code>.format</code> just seems more sophisticated in many ways. An annoying thing about <code>%</code> is also how it can either take a variable or a tuple. You'd think the following would always work:</p>\u000a\u000a<pre><code>"hi there %s" % name\u000a</code></pre>\u000a\u000a<p>yet, if <code>name</code> happens to be <code>(1, 2, 3)</code>, it will throw a <code>TypeError</code>. To guarantee that it always prints, you'd need to do</p>\u000a\u000a<pre><code>"hi there %s" % (name,)   # supply the single argument as a single-item tuple\u000a</code></pre>\u000a\u000a<p>which is just ugly. <code>.format</code> doesn't have those issues. Also in the second example you gave, the <code>.format</code> example is much cleaner looking.</p>\u000a\u000a<p>Why would you not use it? </p>\u000a\u000a<ul>\u000a<li>not knowing about it (me before reading this)</li>\u000a<li>having to be compatible with Python 2.5</li>\u000a</ul>\u000a\u000a<hr>\u000a\u000a<p>To answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so in your <code>log.debug</code> example, the expression <code>"some debug info: %s"%some_info</code>will first evaluate to, e.g. <code>"some debug info: roflcopters are active"</code>, then that string will be passed to <code>log.debug()</code>. </p>\u000a
p1328
sVquestion_id
p1329
I5082452
sVlast_activity_date
p1330
I1430482358
sVcreation_date
p1331
I1298400561
sVscore
p1332
I701
sVowner
p1333
(dp1334
Vuser_id
p1335
I15055
sVprofile_image
p1336
Vhttps://www.gravatar.com/avatar/7f71287b47b7189d11fe6d3fbc7ed2fe?s=128&d=identicon&r=PG
p1337
sVuser_type
p1338
Vregistered
p1339
sVreputation
p1340
I103470
sVlink
p1341
Vhttp://stackoverflow.com/users/15055/claudiu
p1342
sVaccept_rate
p1343
I80
sVdisplay_name
p1344
VClaudiu
p1345
ssVis_accepted
p1346
I01
sVlast_edit_date
p1347
I1430482358
sVanswer_id
p1348
I5082482
sa(dp1349
Vbody
p1350
V<p>It is not possible to sort a dict, only to get a representation of a dict that is sorted. Dicts are inherently orderless, but other types, such as lists and tuples, are not. So you need a sorted representation, which will be a list\u2014probably a list of tuples.</p>\u000a\u000a<p>For instance,</p>\u000a\u000a<pre><code>import operator\u000ax = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\u000asorted_x = sorted(x.items(), key=operator.itemgetter(1))\u000a</code></pre>\u000a\u000a<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>\u000a\u000a<p>And for those wishing to sort on keys instead of values:</p>\u000a\u000a<pre><code>import operator\u000ax = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\u000asorted_x = sorted(x.items(), key=operator.itemgetter(0))\u000a</code></pre>\u000a
p1351
sVquestion_id
p1352
I613183
sVlast_activity_date
p1353
I1429049596
sVcreation_date
p1354
I1236214774
sVscore
p1355
I2664
sVowner
p1356
(dp1357
Vuser_id
p1358
I18515
sVprofile_image
p1359
Vhttps://www.gravatar.com/avatar/f9375b447dd668a10c19891379b9db2a?s=128&d=identicon&r=PG
p1360
sVuser_type
p1361
Vregistered
p1362
sVreputation
p1363
I44242
sVlink
p1364
Vhttp://stackoverflow.com/users/18515/devin-jeanpierre
p1365
sVaccept_rate
p1366
I54
sVdisplay_name
p1367
VDevin Jeanpierre
p1368
ssVis_accepted
p1369
I01
sVlast_edit_date
p1370
I1429049596
sVanswer_id
p1371
I613218
sa(dp1372
Vbody
p1373
V<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class MyClass:\u000a...     i = 3\u000a...\u000a&gt;&gt;&gt; MyClass.i\u000a3 \u000a</code></pre>\u000a\u000a<p>As @<a href="http://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067">millerdev</a> points out, this creates a class-level "i" variable, but this is distinct from any instance-level "i" variable, so you could have</p>\u000a\u000a<pre><code>&gt;&gt;&gt; m = MyClass()\u000a&gt;&gt;&gt; m.i = 4\u000a&gt;&gt;&gt; MyClass.i, m.i\u000a&gt;&gt;&gt; (3, 4)\u000a</code></pre>\u000a\u000a<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>\u000a\u000a<p>See <a href="https://docs.python.org/2/tutorial/classes.html#class-objects" rel="noreferrer">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>\u000a\u000a<p>@Steve Johnson has already answered regarding <a href="http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod" rel="noreferrer">static methods</a>, also documented under <a href="https://docs.python.org/2/library/functions.html#staticmethod" rel="noreferrer">"Built-in Functions" in the Python Library Reference</a>.</p>\u000a\u000a<pre><code>class C:\u000a    @staticmethod\u000a    def f(arg1, arg2, ...): ...\u000a</code></pre>\u000a\u000a<p>@beidy recommends <a href="https://docs.python.org/2/library/functions.html#classmethod" rel="noreferrer">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument, but I'm still a little fuzzy on the advantages of this approach over staticmethod. If you are too, then it probably doesn't matter.</p>\u000a
p1374
sVquestion_id
p1375
I68645
sVlast_activity_date
p1376
I1426857311
sVcreation_date
p1377
I1221529866
sVscore
p1378
I1172
sVowner
p1379
(dp1380
Vuser_id
p1381
I1199
sVprofile_image
p1382
Vhttps://www.gravatar.com/avatar/78cb7314ef6c9ff2954f8e0d6506fc06?s=128&d=identicon&r=PG
p1383
sVuser_type
p1384
Vregistered
p1385
sVreputation
p1386
I112333
sVlink
p1387
Vhttp://stackoverflow.com/users/1199/blair-conrad
p1388
sVdisplay_name
p1389
VBlair Conrad
p1390
ssVis_accepted
p1391
I01
sVlast_edit_date
p1392
I1426857311
sVanswer_id
p1393
I68672
sa(dp1394
Vbody
p1395
V<p>It may look cleaner using a key instead a cmp:</p>\u000a\u000a<pre class="lang-py prettyprint-override"><code>newlist = sorted(list_to_be_sorted, key=lambda k: k['name']) \u000a</code></pre>\u000a\u000a<p>or as J.F.Sebastian and others suggested,</p>\u000a\u000a<pre class="lang-py prettyprint-override"><code>from operator import itemgetter\u000anewlist = sorted(list_to_be_sorted, key=itemgetter('name')) \u000a</code></pre>\u000a\u000a<p>For completeness (as pointed out in comments by fitzgeraldsteele), add <code>reverse=True</code> to sort descending</p>\u000a\u000a<pre class="lang-py prettyprint-override"><code>newlist = sorted(l, key=itemgetter('name'), reverse=True)\u000a</code></pre>\u000a
p1396
sVquestion_id
p1397
I72899
sVlast_activity_date
p1398
I1420054789
sVcreation_date
p1399
I1221575984
sVscore
p1400
I1330
sVowner
p1401
(dp1402
Vuser_id
p1403
I3785
sVprofile_image
p1404
Vhttps://www.gravatar.com/avatar/91e799ee062d66b9a2da8428d28038a0?s=128&d=identicon&r=PG
p1405
sVuser_type
p1406
Vregistered
p1407
sVreputation
p1408
I18354
sVlink
p1409
Vhttp://stackoverflow.com/users/3785/mario-fernandez
p1410
sVaccept_rate
p1411
I80
sVdisplay_name
p1412
VMario Fernandez
p1413
ssVis_accepted
p1414
I01
sVlast_edit_date
p1415
I1420054789
sVanswer_id
p1416
I73050
sa(dp1417
Vbody
p1418
V<p>To get the type of an object, you can use the built-in <a href="http://docs.python.org/3/library/functions.html#type" rel="noreferrer"><code>type()</code></a> function. Passing an object as the only parameter will return the type object of that object:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; type([]) is list\u000aTrue\u000a&gt;&gt;&gt; type({}) is dict\u000aTrue\u000a&gt;&gt;&gt; type('') is str\u000aTrue\u000a&gt;&gt;&gt; type(0) is int\u000aTrue\u000a&gt;&gt;&gt; type({})\u000a&lt;type 'dict'&gt;\u000a&gt;&gt;&gt; type([])\u000a&lt;type 'list'&gt;\u000a</code></pre>\u000a\u000a<p>This of course also works for custom types:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Test1 (object):\u000a        pass\u000a&gt;&gt;&gt; class Test2 (Test1):\u000a        pass\u000a&gt;&gt;&gt; a = Test1()\u000a&gt;&gt;&gt; b = Test2()\u000a&gt;&gt;&gt; type(a) is Test1\u000aTrue\u000a&gt;&gt;&gt; type(b) is Test2\u000aTrue\u000a</code></pre>\u000a\u000a<p>Note that <code>type()</code> will only return the immediate type of the object, but won\u2019t be able to tell you about type inheritance.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; type(b) is Test1\u000aFalse\u000a</code></pre>\u000a\u000a<p>To cover that, you should use the <a href="http://docs.python.org/3/library/functions.html#isinstance" rel="noreferrer"><code>isinstance</code></a> function. This of course also works for built-in types:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; isinstance(b, Test1)\u000aTrue\u000a&gt;&gt;&gt; isinstance(b, Test2)\u000aTrue\u000a&gt;&gt;&gt; isinstance(a, Test1)\u000aTrue\u000a&gt;&gt;&gt; isinstance(a, Test2)\u000aFalse\u000a&gt;&gt;&gt; isinstance([], list)\u000aTrue\u000a&gt;&gt;&gt; isinstance({}, dict)\u000aTrue\u000a</code></pre>\u000a\u000a<p><code>isinstance()</code> is usually the preferred way to ensure the type of an object because it will also accept derived types. So unless you actually need the type object (for whatever reason), using <code>isinstance()</code> is preferred over <code>type()</code>.</p>\u000a\u000a<p>The second parameter of <code>isinstance()</code> also accepts a tuple of types, so it\u2019s possible to check for multiple types at once. <code>isinstance</code> will then return true, if the object is of any of those types:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; isinstance([], (tuple, list, set))\u000aTrue\u000a</code></pre>\u000a
p1419
sVquestion_id
p1420
I2225038
sVlast_activity_date
p1421
I1419002248
sVcreation_date
p1422
I1265665206
sVscore
p1423
I1226
sVowner
p1424
(dp1425
Vuser_id
p1426
I216074
sVprofile_image
p1427
Vhttps://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG
p1428
sVuser_type
p1429
Vregistered
p1430
sVreputation
p1431
I145916
sVlink
p1432
Vhttp://stackoverflow.com/users/216074/poke
p1433
sVaccept_rate
p1434
I91
sVdisplay_name
p1435
Vpoke
p1436
ssVis_accepted
p1437
I01
sVlast_edit_date
p1438
I1419002248
sVanswer_id
p1439
I2225066
sa(dp1440
Vbody
p1441
V<p>One way is to use <a href="http://kivy.org/" rel="noreferrer">Kivy</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Open source Python library for rapid development of applications\u000a  that make use of innovative user interfaces, such as multi-touch apps.</p>\u000a</blockquote>\u000a\u000a<p></p>\u000a\u000a<blockquote>\u000a  <p>Kivy runs on Linux, Windows, OS X, Android and iOS. You can run the same [python] code on all supported platforms.</p>\u000a</blockquote>\u000a\u000a<p><a href="https://play.google.com/store/apps/details?id=org.kivy.showcase" rel="noreferrer">Kivy Showcase app</a>  </p>\u000a
p1442
sVquestion_id
p1443
I101754
sVlast_activity_date
p1444
I1409522980
sVcreation_date
p1445
I1321652985
sVscore
p1446
I608
sVowner
p1447
(dp1448
Vuser_id
p1449
I487992
sVprofile_image
p1450
Vhttps://www.gravatar.com/avatar/892d686b537ccfe617ca15df32192670?s=128&d=identicon&r=PG
p1451
sVuser_type
p1452
Vregistered
p1453
sVreputation
p1454
I6668
sVlink
p1455
Vhttp://stackoverflow.com/users/487992/johnmudd
p1456
sVaccept_rate
p1457
I75
sVdisplay_name
p1458
VJohnMudd
p1459
ssVis_accepted
p1460
I01
sVlast_edit_date
p1461
I1409522980
sVanswer_id
p1462
I8189603
sa(dp1463
Vbody
p1464
V<p><code>super()</code> lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=236275" rel="noreferrer">fun stuff</a> can happen. See the <a href="https://docs.python.org/2/library/functions.html#super" rel="noreferrer">standard docs on super</a> if you haven't already.</p>\u000a\u000a<p>Note that the syntax changed in Python 3.0: you can just say <code>super().__init__()</code> instead of <code>super(ChildB, self).__init__()</code> which IMO is quite a bit nicer.</p>\u000a
p1465
sVquestion_id
p1466
I576169
sVlast_activity_date
p1467
I1407317106
sVcreation_date
p1468
I1235349451
sVscore
p1469
I1081
sVowner
p1470
(dp1471
Vuser_id
p1472
I49559
sVprofile_image
p1473
Vhttps://www.gravatar.com/avatar/7145cb0edd64819646b468bf36515089?s=128&d=identicon&r=PG
p1474
sVuser_type
p1475
Vregistered
p1476
sVreputation
p1477
I16890
sVlink
p1478
Vhttp://stackoverflow.com/users/49559/kiv
p1479
sVaccept_rate
p1480
I94
sVdisplay_name
p1481
VKiv
p1482
ssVis_accepted
p1483
I01
sVlast_edit_date
p1484
I1407317106
sVanswer_id
p1485
I576183
sa(dp1486
Vbody
p1487
V<p>In Python 2.6 and earlier, the dict constructor can receive an iterable of key/value pairs:</p>\u000a\u000a<pre><code>d = dict((key, value) for (key, value) in iterable)\u000a</code></pre>\u000a\u000a<p>From Python 2.7 and 3 onwards, you can just use the <a href="http://www.python.org/dev/peps/pep-0274/" rel="noreferrer">dict comprehension syntax</a> directly:</p>\u000a\u000a<pre><code>d = {key: value for (key, value) in iterable}\u000a</code></pre>\u000a\u000a<p>Of course, you can use the iterable in any way you want (tuples and lists literals, generator comprehensions, list comprehensions, generator functions, functional composition... feel creative) as long as each element is an iterable itself of two elements:</p>\u000a\u000a<pre><code>d = {value: foo(value) for value in sequence if bar(value)}\u000a\u000adef key_value_gen(k):\u000a   yield chr(k+65)\u000a   yield chr((k+13)%26+65)\u000ad = dict(map(key_value_gen, range(26)))\u000a</code></pre>\u000a
p1488
sVquestion_id
p1489
I1747817
sVlast_activity_date
p1490
I1405097106
sVcreation_date
p1491
I1258452572
sVscore
p1492
I1271
sVowner
p1493
(dp1494
Vuser_id
p1495
I106979
sVprofile_image
p1496
Vhttps://i.stack.imgur.com/XUWge.gif?s=128&g=1
p1497
sVuser_type
p1498
Vregistered
p1499
sVreputation
p1500
I42372
sVlink
p1501
Vhttp://stackoverflow.com/users/106979/fortran
p1502
sVaccept_rate
p1503
I83
sVdisplay_name
p1504
Vfortran
p1505
ssVis_accepted
p1506
I01
sVlast_edit_date
p1507
I1405097106
sVanswer_id
p1508
I1747827
sa(dp1509
Vbody
p1510
V<p>Alex summarized well but, surprisingly, was too succinct.</p>\u000a\u000a<p>First, let me reiterate the main points in Alex\u2019s post:</p>\u000a\u000a<ul>\u000a<li>The default implementation is useless (it\u2019s hard to think of one which wouldn\u2019t be, but yeah)</li>\u000a<li><code>__repr__</code> goal is to be unambiguous</li>\u000a<li><code>__str__</code> goal is to be readable</li>\u000a<li>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></li>\u000a</ul>\u000a\u000a<p><strong>Default implementation is useless</strong></p>\u000a\u000a<p>This is mostly a surprise because Python\u2019s defaults tend to be fairly useful. However, in this case, having a default for <code>__repr__</code> which would act like:</p>\u000a\u000a<pre><code>return "%s(%r)" % (self.__class__, self.__dict__)\u000a</code></pre>\u000a\u000a<p>would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if <code>__repr__</code> is defined, and <code>__str__</code> is not, the object will behave as though <code>__str__=__repr__</code>.</p>\u000a\u000a<p>This means, in simple terms: almost every object you implement should have a functional <code>__repr__</code> that\u2019s usable for understanding the object. Implementing <code>__str__</code> is optional: do that if you need a \u201cpretty print\u201d functionality (for example, used by a report generator).</p>\u000a\u000a<p><strong>The goal of <code>__repr__</code> is to be unambiguous</strong></p>\u000a\u000a<p>Let me come right out and say it \u2014 I do not believe in debuggers. I don\u2019t really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature \u2014 most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a</p>\u000a\u000a<pre><code>log(INFO, "I am in the weird function and a is", a, "and b is", b, "but I got a null C \u2014 using default", default_c)\u000a</code></pre>\u000a\u000a<p>But you have to do the last step \u2014 make sure every object you implement has a useful repr, so code like that can just work. This is why the \u201ceval\u201d thing comes up: if you have enough information so <code>eval(repr(c))==c</code>, that means you know everything there is to know about <code>c</code>. If that\u2019s easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about <code>c</code> anyway. I usually use an eval-like format: <code>"MyClass(this=%r,that=%r)" % (self.this,self.that)</code>. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments \u2014 but it is a useful form to express \u201cthis is everything you need to know about this instance\u201d.</p>\u000a\u000a<p>Note: I used <code>%r</code> above, not <code>%s</code>. You always want to use <code>repr()</code> [or <code>%r</code> formatting character, equivalently] inside <code>__repr__</code> implementation, or you\u2019re defeating the goal of repr. You want to be able to differentiate <code>MyClass(3)</code> and <code>MyClass("3")</code>.</p>\u000a\u000a<p><strong>The goal of <code>__str__</code> is to be readable</strong></p>\u000a\u000a<p>Specifically, it is not intended to be unambiguous \u2014 notice that <code>str(3)==str("3")</code>. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be "2010/4/12 15:35:22", etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class \u2014 as long is it supports readability, it is an improvement.</p>\u000a\u000a<p><strong>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></strong></p>\u000a\u000a<p>This seems surprising, doesn\u2019t it? It is a little, but how readable would</p>\u000a\u000a<pre><code>[moshe is, 3, hello\u000aworld, this is a list, oh I don't know, containing just 4 elements]\u000a</code></pre>\u000a\u000a<p>be? Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when you\u2019re printing a list, just</p>\u000a\u000a<pre><code>print "["+", ".join(l)+"]"\u000a</code></pre>\u000a\u000a<p>(you can probably also figure out what to do about dictionaries.</p>\u000a\u000a<p><strong>Summary</strong></p>\u000a\u000a<p>Implement <code>__repr__</code> for any class you implement. This should be second nature. Implement <code>__str__</code> if you think it would be useful to have a string version which errs on the side of more readability in favor of more ambiguity.</p>\u000a
p1511
sVquestion_id
p1512
I1436703
sVlast_activity_date
p1513
I1395379671
sVcreation_date
p1514
I1271120212
sVscore
p1515
I1691
sVowner
p1516
(dp1517
Vuser_id
p1518
I122683
sVprofile_image
p1519
Vhttps://www.gravatar.com/avatar/9a414150a10bd70bfb5be0ba6b045e82?s=128&d=identicon&r=PG
p1520
sVuser_type
p1521
Vregistered
p1522
sVreputation
p1523
I18035
sVlink
p1524
Vhttp://stackoverflow.com/users/122683/moshez
p1525
sVdisplay_name
p1526
Vmoshez
p1527
ssVis_accepted
p1528
I01
sVlast_edit_date
p1529
I1395379671
sVanswer_id
p1530
I2626364
sa(dp1531
Vbody
p1532
V<p>How about:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 'hello world'[::-1]\u000a'dlrow olleh'\u000a</code></pre>\u000a\u000a<p>This is <a href="http://docs.python.org/2/whatsnew/2.3.html#extended-slices" rel="noreferrer">extended slice</a> syntax. It works by doing <code>[begin:end:step]</code> - by leaving begin and end off and specifying a step of -1, it reverses a string.</p>\u000a
p1533
sVquestion_id
p1534
I931092
sVlast_activity_date
p1535
I1393294432
sVcreation_date
p1536
I1243735906
sVscore
p1537
I1797
sVowner
p1538
(dp1539
Vuser_id
p1540
I16417
sVprofile_image
p1541
Vhttps://www.gravatar.com/avatar/80ae8ec34e9e3e66c5be50733afaa44e?s=128&d=identicon&r=PG
p1542
sVuser_type
p1543
Vregistered
p1544
sVreputation
p1545
I313456
sVlink
p1546
Vhttp://stackoverflow.com/users/16417/paolo-bergantino
p1547
sVaccept_rate
p1548
I93
sVdisplay_name
p1549
VPaolo Bergantino
p1550
ssVis_accepted
p1551
I01
sVlast_edit_date
p1552
I1393294432
sVanswer_id
p1553
I931095
sa(dp1554
Vbody
p1555
V<p><code>some_list[-1]</code> is the shortest and most Pythonic.</p>\u000a\u000a<p>In fact, you can do much more with this syntax. The <code>some_list[-n]</code> syntax gets the nth-to-last element. So <code>some_list[-1]</code> gets the last element, <code>some_list[-2]</code> gets the second to last, etc, all the way down to <code>some_list[-len(some_list)]</code>, which gives you the first element.</p>\u000a\u000a<p>You can also set list elements in this way. For instance:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; some_list = [1, 2, 3]\u000a&gt;&gt;&gt; some_list[-1] = 5 # Set the last element\u000a&gt;&gt;&gt; some_list[-2] = 3 # Set the second to last element\u000a&gt;&gt;&gt; some_list\u000a[1, 3, 5]\u000a</code></pre>\u000a
p1556
sVquestion_id
p1557
I930397
sVlast_activity_date
p1558
I1379352632
sVcreation_date
p1559
I1243711795
sVscore
p1560
I1623
sVowner
p1561
(dp1562
Vuser_id
p1563
I104184
sVprofile_image
p1564
Vhttps://www.gravatar.com/avatar/31a6ce9fac3ff6c5e1a019dbabb3a759?s=128&d=identicon&r=PG
p1565
sVuser_type
p1566
Vregistered
p1567
sVreputation
p1568
I67659
sVlink
p1569
Vhttp://stackoverflow.com/users/104184/sasha-chedygov
p1570
sVaccept_rate
p1571
I100
sVdisplay_name
p1572
VSasha Chedygov
p1573
ssVis_accepted
p1574
I01
sVlast_edit_date
p1575
I1379352632
sVanswer_id
p1576
I930398
sa(dp1577
Vbody
p1578
V<blockquote>\u000a  <p>Which, not only is ugly and slow</p>\u000a</blockquote>\u000a\u000a<p>I'd dispute both.</p>\u000a\u000a<p>A regex or other string parsing would be uglier and slower.  </p>\u000a\u000a<p>I'm not sure that anything much could be faster than the above.  It calls the function and returns.  Try/Catch doesn't introduce much overhead because the most common exception is caught without an extensive search of stack frames.</p>\u000a\u000a<p>The issue is that any numeric conversion function has two kinds of results</p>\u000a\u000a<ul>\u000a<li>A number, if the number is valid</li>\u000a<li>A status code (e.g., via errno) or exception to show that no valid number could be parsed.</li>\u000a</ul>\u000a\u000a<p>C (as an example) hacks around this a number of ways.  Python lays it out clearly and explicitly.</p>\u000a\u000a<p>I think your code for doing this is perfect.</p>\u000a
p1579
sVquestion_id
p1580
I354038
sVlast_activity_date
p1581
I1369159341
sVcreation_date
p1582
I1228854648
sVscore
p1583
I477
sVowner
p1584
(dp1585
Vuser_id
p1586
I10661
sVprofile_image
p1587
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1588
sVuser_type
p1589
Vregistered
p1590
sVreputation
p1591
I277397
sVlink
p1592
Vhttp://stackoverflow.com/users/10661/s-lott
p1593
sVaccept_rate
p1594
I92
sVdisplay_name
p1595
VS.Lott
p1596
ssVis_accepted
p1597
I01
sVlast_edit_date
p1598
I1369159341
sVanswer_id
p1599
I354130
sa(dp1600
Vbody
p1601
V<pre><code>&gt;&gt;&gt; x = "Hello World!"\u000a&gt;&gt;&gt; x[2:]\u000a'llo World!'\u000a&gt;&gt;&gt; x[:2]\u000a'He'\u000a&gt;&gt;&gt; x[:-2]\u000a'Hello Worl'\u000a&gt;&gt;&gt; x[-2:]\u000a'd!'\u000a&gt;&gt;&gt; x[2:-2]\u000a'llo Worl'\u000a</code></pre>\u000a\u000a<p>Python calls this concept "slicing" and it works on more than just strings. Take a look <a href="http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation">here</a> for a comprehensive introduction.</p>\u000a
p1602
sVquestion_id
p1603
I663171
sVlast_activity_date
p1604
I1368200697
sVcreation_date
p1605
I1237483844
sVscore
p1606
I1790
sVowner
p1607
(dp1608
Vuser_id
p1609
I16417
sVprofile_image
p1610
Vhttps://www.gravatar.com/avatar/80ae8ec34e9e3e66c5be50733afaa44e?s=128&d=identicon&r=PG
p1611
sVuser_type
p1612
Vregistered
p1613
sVreputation
p1614
I313456
sVlink
p1615
Vhttp://stackoverflow.com/users/16417/paolo-bergantino
p1616
sVaccept_rate
p1617
I93
sVdisplay_name
p1618
VPaolo Bergantino
p1619
ssVis_accepted
p1620
I01
sVlast_edit_date
p1621
I1368200697
sVanswer_id
p1622
I663175
sa(dp1623
Vbody
p1624
V<p>Just one space, or all such spaces?  If the second, then strings already have a <code>.strip()</code> method:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; ' Hello '.strip()\u000a'Hello'\u000a&gt;&gt;&gt; ' Hello'.strip()\u000a'Hello'\u000a&gt;&gt;&gt; 'Bob has a cat'.strip()\u000a'Bob has a cat'\u000a&gt;&gt;&gt; '          Hello        '.strip()  # ALL spaces at ends removed\u000a'Hello'\u000a</code></pre>\u000a\u000a<p>If you need only to remove one space however, you could do it with:</p>\u000a\u000a<pre><code>def strip_one_space(s):\u000a    if s.endswith(" "): s = s[:-1]\u000a    if s.startswith(" "): s = s[1:]\u000a    return s\u000a\u000a&gt;&gt;&gt; strip_one_space("   Hello ")\u000a'  Hello'\u000a</code></pre>\u000a\u000a<p>Also, note that <code>str.strip()</code> removes other whitespace characters as well (e.g. tabs and newlines).  To remove only spaces, you can specify the character to remove as an argument to <code>strip</code>, i.e.:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; "  Hello\u005cn".strip(" ")\u000a'Hello\u005cn'\u000a</code></pre>\u000a
p1625
sVquestion_id
p1626
I761804
sVlast_activity_date
p1627
I1364409295
sVcreation_date
p1628
I1239996089
sVscore
p1629
I1054
sVowner
p1630
(dp1631
Vuser_id
p1632
I9493
sVprofile_image
p1633
Vhttps://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=128&d=identicon&r=PG
p1634
sVuser_type
p1635
Vregistered
p1636
sVreputation
p1637
I73391
sVlink
p1638
Vhttp://stackoverflow.com/users/9493/brian
p1639
sVdisplay_name
p1640
VBrian
p1641
ssVis_accepted
p1642
I01
sVlast_edit_date
p1643
I1364409295
sVanswer_id
p1644
I761825
sa(dp1645
Vbody
p1646
V<h2>Single Underscore</h2>\u000a\u000a<p>Names, in a class, with a leading underscore are simply to indicate to other programmers that the attribute or method is intended to be private.  However, nothing special is done with the name itself.</p>\u000a\u000a<p>To quote <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP-8</a>:</p>\u000a\u000a<blockquote>\u000a  <p>_single_leading_underscore: weak "internal use" indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>\u000a</blockquote>\u000a\u000a<h2>Double Underscore (Name Mangling)</h2>\u000a\u000a<p>From <a href="http://docs.python.org/tutorial/classes.html#private-variables-and-class-local-references" rel="noreferrer">the Python docs</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes. </p>\u000a</blockquote>\u000a\u000a<p>And a warning from the same page:</p>\u000a\u000a<blockquote>\u000a  <p>Name mangling is intended to give classes an easy way to define \u201cprivate\u201d instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; it still is possible for a determined soul to access or modify a variable that is considered private.</p>\u000a</blockquote>\u000a\u000a<h2>Example</h2>\u000a\u000a<pre><code>&gt;&gt;&gt; class MyClass():\u000a...     def __init__(self):\u000a...             self.__superprivate = "Hello"\u000a...             self._semiprivate = ", world!"\u000a...\u000a&gt;&gt;&gt; mc = MyClass()\u000a&gt;&gt;&gt; print mc.__superprivate\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aAttributeError: myClass instance has no attribute '__superprivate'\u000a&gt;&gt;&gt; print mc._semiprivate\u000a, world!\u000a&gt;&gt;&gt; print mc.__dict__\u000a{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}\u000a</code></pre>\u000a
p1647
sVquestion_id
p1648
I1301346
sVlast_activity_date
p1649
I1360616063
sVcreation_date
p1650
I1250702153
sVscore
p1651
I711
sVowner
p1652
(dp1653
Vuser_id
p1654
I68086
sVprofile_image
p1655
Vhttps://www.gravatar.com/avatar/b2199cac7c940b3b0d3bfede5ec41939?s=128&d=identicon&r=PG
p1656
sVuser_type
p1657
Vregistered
p1658
sVreputation
p1659
I11482
sVlink
p1660
Vhttp://stackoverflow.com/users/68086/andrew-keeton
p1661
sVaccept_rate
p1662
I94
sVdisplay_name
p1663
VAndrew Keeton
p1664
ssVis_accepted
p1665
I01
sVlast_edit_date
p1666
I1360616063
sVanswer_id
p1667
I1301369
sa(dp1668
Vbody
p1669
V<p>Try hasattr():</p>\u000a\u000a<pre><code>if hasattr(a, 'property'):\u000a    a.property\u000a</code></pre>\u000a\u000a<p>EDIT: See <a href="http://stackoverflow.com/a/610923/117030">zweiterlinde's answer</a> below, who offers good advice about asking forgiveness! A very pythonic approach! </p>\u000a\u000a<p>The general practice in python is that, if the property is likely to be there most of the time, simply call it and either let the exception propagate, or trap it with a try/except block. This will likely be faster than <code>hasattr</code>. If the property is likely to not be there most of the time, or you're not sure, using <code>hasattr</code> will probably be faster than repeatedly falling into an exception block.</p>\u000a
p1670
sVquestion_id
p1671
I610883
sVlast_activity_date
p1672
I1354240682
sVcreation_date
p1673
I1236178123
sVscore
p1674
I1177
sVowner
p1675
(dp1676
Vuser_id
p1677
I72247
sVprofile_image
p1678
Vhttps://www.gravatar.com/avatar/9a457b3df9be22c93d3c1ba990236d56?s=128&d=identicon&r=PG
p1679
sVuser_type
p1680
Vregistered
p1681
sVreputation
p1682
I54128
sVlink
p1683
Vhttp://stackoverflow.com/users/72247/jarret-hardie
p1684
sVdisplay_name
p1685
VJarret Hardie
p1686
ssVis_accepted
p1687
I01
sVlast_edit_date
p1688
I1354240682
sVanswer_id
p1689
I610893
sa(dp1690
Vbody
p1691
V<p><a href="http://docs.python.org/library/os.html#os.remove" rel="noreferrer"><code>os.remove()</code></a> will remove a file.</p>\u000a\u000a<p><a href="http://docs.python.org/library/os.html#os.rmdir" rel="noreferrer"><code>os.rmdir()</code></a> will remove an empty directory.</p>\u000a\u000a<p><a href="http://docs.python.org/library/shutil.html#shutil.rmtree" rel="noreferrer"><code>shutil.rmtree()</code></a> will delete a directory and all its contents.</p>\u000a
p1692
sVquestion_id
p1693
I6996603
sVlast_activity_date
p1694
I1312895259
sVcreation_date
p1695
I1312895259
sVscore
p1696
I1497
sVowner
p1697
(dp1698
Vuser_id
p1699
I21886
sVprofile_image
p1700
Vhttps://www.gravatar.com/avatar/38750c50c11e6054c2123073b17b18fc?s=128&d=identicon&r=PG
p1701
sVuser_type
p1702
Vregistered
p1703
sVreputation
p1704
I160439
sVlink
p1705
Vhttp://stackoverflow.com/users/21886/richiehindle
p1706
sVaccept_rate
p1707
I87
sVdisplay_name
p1708
VRichieHindle
p1709
ssVis_accepted
p1710
I01
sVanswer_id
p1711
I6996628
sa(dp1712
Vbody
p1713
V<p>I like to use double quotes around strings that are used for interpolation or that are natural language messages, and single quotes for small symbol-like strings, but will break the rules if the strings contain quotes, or if I forget. I use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed.</p>\u000a\u000a<p>For example:</p>\u000a\u000a<pre><code>LIGHT_MESSAGES = {\u000a    'English': "There are %(number_of_lights)s lights.",\u000a    'Pirate':  "Arr! Thar be %(number_of_lights)s lights."\u000a}\u000a\u000adef lights_message(language, number_of_lights):\u000a    """Return a language-appropriate string reporting the light count."""\u000a    return LIGHT_MESSAGES[language] % locals()\u000a\u000adef is_pirate(message):\u000a    """Return True if the given message sounds piratical."""\u000a    return re.search(r"(?i)(arr|avast|yohoho)!", message) is not None\u000a</code></pre>\u000a
p1714
sVquestion_id
p1715
I56011
sVlast_activity_date
p1716
I1310047895
sVcreation_date
p1717
I1221127609
sVscore
p1718
I525
sVowner
p1719
(dp1720
Vuser_id
p1721
I4702
sVprofile_image
p1722
Vhttps://www.gravatar.com/avatar/a6fc04aff6a313128027f21767c13898?s=128&d=identicon&r=PG
p1723
sVuser_type
p1724
Vregistered
p1725
sVreputation
p1726
I19198
sVlink
p1727
Vhttp://stackoverflow.com/users/4702/will-harris
p1728
sVaccept_rate
p1729
I86
sVdisplay_name
p1730
VWill Harris
p1731
ssVis_accepted
p1732
I01
sVlast_edit_date
p1733
I1310047895
sVanswer_id
p1734
I56190
sa(dp1735
Vbody
p1736
V<pre><code>with open("test.txt", "a") as myfile:\u000a    myfile.write("appended text")\u000a</code></pre>\u000a
p1737
sVquestion_id
p1738
I4706499
sVlast_activity_date
p1739
I1309342036
sVcreation_date
p1740
I1295195045
sVscore
p1741
I1444
sVowner
p1742
(dp1743
Vuser_id
p1744
I116186
sVprofile_image
p1745
Vhttps://www.gravatar.com/avatar/dc5f7c3937e6844cb776d2004b903578?s=128&d=identicon&r=PG
p1746
sVuser_type
p1747
Vregistered
p1748
sVreputation
p1749
I17227
sVlink
p1750
Vhttp://stackoverflow.com/users/116186/petter
p1751
sVaccept_rate
p1752
I76
sVdisplay_name
p1753
VPetter
p1754
ssVis_accepted
p1755
I01
sVlast_edit_date
p1756
I1309342036
sVanswer_id
p1757
I4706520
sa(dp1758
Vbody
p1759
V<pre><code>&gt;&gt;&gt; [1, 2, 3, 4, 1, 4, 1].count(1)\u000a3\u000a</code></pre>\u000a
p1760
sVquestion_id
p1761
I2600191
sVlast_activity_date
p1762
I1270733512
sVcreation_date
p1763
I1270733512
sVscore
p1764
I1049
sVowner
p1765
(dp1766
Vuser_id
p1767
I4999
sVprofile_image
p1768
Vhttps://www.gravatar.com/avatar/ae995fa03b218e7c27a608b5f14e68ae?s=128&d=identicon&r=PG
p1769
sVuser_type
p1770
Vregistered
p1771
sVreputation
p1772
I15792
sVlink
p1773
Vhttp://stackoverflow.com/users/4999/%c5%81ukasz
p1774
sVdisplay_name
p1775
V\u0141ukasz
p1776
ssVis_accepted
p1777
I01
sVanswer_id
p1778
I2600208
sa(dp1779
Vbody
p1780
V<p>Python makes this ridiculously easy.</p>\u000a\u000a<pre><code>mergedlist = listone + listtwo\u000a</code></pre>\u000a
p1781
sVquestion_id
p1782
I1720421
sVlast_activity_date
p1783
I1258009626
sVcreation_date
p1784
I1258009626
sVscore
p1785
I1937
sVowner
p1786
(dp1787
Vuser_id
p1788
I207432
sVprofile_image
p1789
Vhttps://www.gravatar.com/avatar/6813ca950db3b749647569d79b96fbf9?s=128&d=identicon&r=PG
p1790
sVuser_type
p1791
Vregistered
p1792
sVreputation
p1793
I28091
sVlink
p1794
Vhttp://stackoverflow.com/users/207432/daniel-g
p1795
sVdisplay_name
p1796
VDaniel G
p1797
ssVis_accepted
p1798
I01
sVanswer_id
p1799
I1720432
sa(dp1800
Vbody
p1801
V<p><code>in</code> is the intended way to test for the existence of a key in a <code>dict</code>.</p>\u000a\u000a<pre><code>d = dict()\u000a\u000afor i in xrange(100):\u000a    key = i % 10\u000a    if key in d:\u000a        d[key] += 1\u000a    else:\u000a        d[key] = 1\u000a</code></pre>\u000a\u000a<p>If you wanted a default, you can always use <code>dict.get()</code>:</p>\u000a\u000a<pre><code>d = dict()\u000a\u000afor i in xrange(100):\u000a    key = i % 10\u000a    d[key] = d.get(key, 0) + 1\u000a</code></pre>\u000a\u000a<p>... and if you wanted to always ensure a default value for any key you can use <code>defaultdict</code> from the <code>collections</code> module, like so:</p>\u000a\u000a<pre><code>from collections import defaultdict\u000a\u000ad = defaultdict(lambda: 0)\u000a\u000afor i in xrange(100):\u000a    d[i % 10] += 1\u000a</code></pre>\u000a\u000a<p>... but in general, the <code>in</code> keyword is the best way to do it.</p>\u000a
p1802
sVquestion_id
p1803
I1602934
sVlast_activity_date
p1804
I1256152221
sVcreation_date
p1805
I1256152221
sVscore
p1806
I1533
sVowner
p1807
(dp1808
Vuser_id
p1809
I9161
sVprofile_image
p1810
Vhttps://www.gravatar.com/avatar/f7a299bf5d76571cdaa91d2d1ff3805e?s=128&d=identicon&r=PG
p1811
sVuser_type
p1812
Vregistered
p1813
sVreputation
p1814
I31747
sVlink
p1815
Vhttp://stackoverflow.com/users/9161/chris-b
p1816
sVaccept_rate
p1817
I53
sVdisplay_name
p1818
VChris B.
p1819
ssVis_accepted
p1820
I01
sVanswer_id
p1821
I1602964
sa(dp1822
Vbody
p1823
V<p>Actually, this is not a design flaw, and it is not because of internals, or performance.<br>\u000aIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.</p>\u000a\u000a<p>As soon as you get to think into this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of "member data" and therefore their state may change from one call to the other - exactly as in any other object.</p>\u000a\u000a<p>In any case, Effbot has a very nice explanation of the reasons for this behavior in <a href="http://effbot.org/zone/default-values.htm" rel="noreferrer">Default Parameter Values in Python</a>.<br>\u000aI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>\u000a
p1824
sVquestion_id
p1825
I1132941
sVlast_activity_date
p1826
I1247866179
sVcreation_date
p1827
I1247866179
sVscore
p1828
I1145
sVowner
p1829
(dp1830
Vuser_id
p1831
I43927
sVprofile_image
p1832
Vhttps://www.gravatar.com/avatar/8c41ddf8372ced51b47d3d7e215342b3?s=128&d=identicon&r=PG
p1833
sVuser_type
p1834
Vregistered
p1835
sVreputation
p1836
I23683
sVlink
p1837
Vhttp://stackoverflow.com/users/43927/roberto-liffredo
p1838
sVdisplay_name
p1839
VRoberto Liffredo
p1840
ssVis_accepted
p1841
I01
sVanswer_id
p1842
I1145781
sa(dp1843
Vbody
p1844
V<pre><code>&gt;&gt;&gt; d = {'key':'value'}\u000a&gt;&gt;&gt; print d\u000a{'key': 'value'}\u000a&gt;&gt;&gt; d['mynewkey'] = 'mynewvalue'\u000a&gt;&gt;&gt; print d\u000a{'mynewkey': 'mynewvalue', 'key': 'value'}\u000a</code></pre>\u000a
p1845
sVquestion_id
p1846
I1024847
sVlast_activity_date
p1847
I1245622146
sVcreation_date
p1848
I1245622146
sVscore
p1849
I1839
sVowner
p1850
(dp1851
Vuser_id
p1852
I16417
sVprofile_image
p1853
Vhttps://www.gravatar.com/avatar/80ae8ec34e9e3e66c5be50733afaa44e?s=128&d=identicon&r=PG
p1854
sVuser_type
p1855
Vregistered
p1856
sVreputation
p1857
I313456
sVlink
p1858
Vhttp://stackoverflow.com/users/16417/paolo-bergantino
p1859
sVaccept_rate
p1860
I93
sVdisplay_name
p1861
VPaolo Bergantino
p1862
ssVis_accepted
p1863
I01
sVanswer_id
p1864
I1024851
sa(dp1865
Vbody
p1866
V<p>Use <code>del</code> and specify the element you want to delete with the index:</p>\u000a\u000a<pre><code>In [9]: a = range(10)\u000aIn [10]: a\u000aOut[10]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\u000aIn [11]: del a[-1]\u000aIn [12]: a\u000aOut[12]: [0, 1, 2, 3, 4, 5, 6, 7, 8]\u000a</code></pre>\u000a\u000a<p><a href="http://docs.python.org/tutorial/datastructures.html#the-del-statement" rel="noreferrer">Here</a> is the section from the tutorial.</p>\u000a
p1867
sVquestion_id
p1868
I627435
sVlast_activity_date
p1869
I1236622884
sVcreation_date
p1870
I1236622884
sVscore
p1871
I905
sVowner
p1872
(dp1873
Vdisplay_name
p1874
Vunbeknown
p1875
sVuser_type
p1876
Vdoes_not_exist
p1877
ssVis_accepted
p1878
I01
sVanswer_id
p1879
I627453
sa(dp1880
Vbody
p1881
V<p>It's pretty simple really:</p>\u000a\u000a<pre><code>a[start:end] # items start through end-1\u000aa[start:]    # items start through the rest of the array\u000aa[:end]      # items from the beginning through end-1\u000aa[:]         # a copy of the whole array\u000a</code></pre>\u000a\u000a<p>There is also the <code>step</code> value, which can be used with any of the above:</p>\u000a\u000a<pre><code>a[start:end:step] # start through not past end, by step\u000a</code></pre>\u000a\u000a<p>The key point to remember is that the <code>:end</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference beween <code>end</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>\u000a\u000a<p>The other feature is that <code>start</code> or <code>end</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>\u000a\u000a<pre><code>a[-1]    # last item in the array\u000aa[-2:]   # last two items in the array\u000aa[:-2]   # everything except the last two items\u000a</code></pre>\u000a\u000a<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>\u000a
p1882
sVquestion_id
p1883
I509211
sVlast_activity_date
p1884
I1233704399
sVcreation_date
p1885
I1233701304
sVscore
p1886
I2280
sVowner
p1887
(dp1888
Vuser_id
p1889
I893
sVprofile_image
p1890
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p1891
sVuser_type
p1892
Vregistered
p1893
sVreputation
p1894
I552394
sVlink
p1895
Vhttp://stackoverflow.com/users/893/greg-hewgill
p1896
sVaccept_rate
p1897
I85
sVdisplay_name
p1898
VGreg Hewgill
p1899
ssVis_accepted
p1900
I01
sVlast_edit_date
p1901
I1233704399
sVanswer_id
p1902
I509295
sa(dp1903
Vbody
p1904
V<pre><code>&gt;&gt;&gt; a = "545.2222"\u000a&gt;&gt;&gt; float(a)\u000a545.22220000000004\u000a&gt;&gt;&gt; int(float(a))\u000a545\u000a</code></pre>\u000a
p1905
sVquestion_id
p1906
I379906
sVlast_activity_date
p1907
I1229651691
sVcreation_date
p1908
I1229651691
sVscore
p1909
I1605
sVowner
p1910
(dp1911
Vuser_id
p1912
I1057
sVprofile_image
p1913
Vhttps://www.gravatar.com/avatar/e5778b659d144e38ed982c3f4e566089?s=128&d=identicon&r=PG
p1914
sVuser_type
p1915
Vregistered
p1916
sVreputation
p1917
I78326
sVlink
p1918
Vhttp://stackoverflow.com/users/1057/harley-holcombe
p1919
sVaccept_rate
p1920
I80
sVdisplay_name
p1921
VHarley Holcombe
p1922
ssVis_accepted
p1923
I01
sVanswer_id
p1924
I379910
sa(dp1925
Vbody
p1926
V<p>You could use a dictionary:</p>\u000a\u000a<pre><code>def f(x):\u000a    return {\u000a        'a': 1,\u000a        'b': 2,\u000a    }[x]\u000a</code></pre>\u000a
p1927
sVquestion_id
p1928
I60208
sVlast_activity_date
p1929
I1221266304
sVcreation_date
p1930
I1221266304
sVscore
p1931
I748
sVowner
p1932
(dp1933
Vuser_id
p1934
I893
sVprofile_image
p1935
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p1936
sVuser_type
p1937
Vregistered
p1938
sVreputation
p1939
I552394
sVlink
p1940
Vhttp://stackoverflow.com/users/893/greg-hewgill
p1941
sVaccept_rate
p1942
I85
sVdisplay_name
p1943
VGreg Hewgill
p1944
ssVis_accepted
p1945
I01
sVanswer_id
p1946
I60211
sasVquota_max
p1947
I300
sVquota_remaining
p1948
I278
s.