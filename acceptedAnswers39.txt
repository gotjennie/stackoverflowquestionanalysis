(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>It is a little complicated, but you can draw all the objects by the following code:</p>\u000a\u000a<pre><code>from mpl_toolkits.mplot3d import Axes3D\u000aimport matplotlib.pyplot as plt\u000aimport numpy as np\u000afrom itertools import product, combinations\u000a\u000a\u000afig = plt.figure()\u000aax = fig.gca(projection='3d')\u000aax.set_aspect("equal")\u000a\u000a# draw cube\u000ar = [-1, 1]\u000afor s, e in combinations(np.array(list(product(r, r, r))), 2):\u000a    if np.sum(np.abs(s-e)) == r[1]-r[0]:\u000a        ax.plot3D(*zip(s, e), color="b")\u000a\u000a# draw sphere\u000au, v = np.mgrid[0:2*np.pi:20j, 0:np.pi:10j]\u000ax = np.cos(u)*np.sin(v)\u000ay = np.sin(u)*np.sin(v)\u000az = np.cos(v)\u000aax.plot_wireframe(x, y, z, color="r")\u000a\u000a# draw a point\u000aax.scatter([0], [0], [0], color="g", s=100)\u000a\u000a# draw a vector\u000afrom matplotlib.patches import FancyArrowPatch\u000afrom mpl_toolkits.mplot3d import proj3d\u000a\u000a\u000aclass Arrow3D(FancyArrowPatch):\u000a\u000a    def __init__(self, xs, ys, zs, *args, **kwargs):\u000a        FancyArrowPatch.__init__(self, (0, 0), (0, 0), *args, **kwargs)\u000a        self._verts3d = xs, ys, zs\u000a\u000a    def draw(self, renderer):\u000a        xs3d, ys3d, zs3d = self._verts3d\u000a        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M)\u000a        self.set_positions((xs[0], ys[0]), (xs[1], ys[1]))\u000a        FancyArrowPatch.draw(self, renderer)\u000a\u000aa = Arrow3D([0, 1], [0, 1], [0, 1], mutation_scale=20,\u000a            lw=1, arrowstyle="-|&gt;", color="k")\u000aax.add_artist(a)\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/rQfnu.png" alt="output_figure"></p>\u000a
p6
sVquestion_id
p7
I11140163
sVlast_activity_date
p8
I1487321928
sVcreation_date
p9
I1340368766
sVscore
p10
I120
sVowner
p11
(dp12
Vuser_id
p13
I772649
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/03ad01df45fef92e267641197ad00e36?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I49502
sVlink
p19
Vhttp://stackoverflow.com/users/772649/hyry
p20
sVaccept_rate
p21
I56
sVdisplay_name
p22
VHYRY
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1487321928
sVanswer_id
p26
I11156353
sa(dp27
Vbody
p28
V<p>Use the response contained within the exception. Here is an example:</p>\u000a\u000a<pre><code>import boto3\u000afrom botocore.exceptions import ClientError\u000a\u000atry:\u000a    iam = boto3.client('iam')\u000a    user = iam.create_user(UserName='fred')\u000a    print "Created user: %s" % user\u000aexcept ClientError as e:\u000a    if e.response['Error']['Code'] == 'EntityAlreadyExists':\u000a        print "User already exists"\u000a    else:\u000a        print "Unexpected error: %s" % e\u000a</code></pre>\u000a\u000a<p>The response dict in the exception will contain the following:</p>\u000a\u000a<ul>\u000a<li><code>['Error']['Code']</code> e.g. 'EntityAlreadyExists' or 'ValidationError'</li>\u000a<li><code>['ResponseMetadata']['HTTPStatusCode']</code> e.g. 400</li>\u000a<li><code>['ResponseMetadata']['RequestId']</code> e.g. 'd2b06652-88d7-11e5-99d0-812348583a35'</li>\u000a<li><code>['Error']['Message']</code> e.g. "An error occurred (EntityAlreadyExists) ..."</li>\u000a<li><code>['Error']['Type']</code> e.g. 'Sender'</li>\u000a</ul>\u000a\u000a<p>For more information see <a href="http://botocore.readthedocs.io/en/latest/client_upgrades.html#error-handling" rel="noreferrer">botocore error handling</a>.</p>\u000a
p29
sVquestion_id
p30
I33068055
sVlast_activity_date
p31
I1485435209
sVcreation_date
p32
I1447295954
sVscore
p33
I93
sVowner
p34
(dp35
Vuser_id
p36
I271415
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/8648256cc53b261c5e1d266380a256fc?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I7720
sVlink
p42
Vhttp://stackoverflow.com/users/271415/jarmod
p43
sVaccept_rate
p44
I91
sVdisplay_name
p45
Vjarmod
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1485435209
sVanswer_id
p49
I33663484
sa(dp50
Vbody
p51
V<p>Assuming you are <em>only</em> looking for simple obfuscation that will obscure things from the <em>very</em> casual observer, and you aren't looking to use third party libraries. I'd recommend something like the Vigenere cipher. It is one of the strongest of the simple ancient ciphers.</p>\u000a\u000a<p><a href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher" rel="noreferrer">https://en.wikipedia.org/wiki/Vigenère_cipher</a></p>\u000a\u000a<p>It's quick and easy to implement. Something like:</p>\u000a\u000a<pre><code>import base64\u000a\u000adef encode(key, string):\u000a    encoded_chars = []\u000a    for i in xrange(len(string)):\u000a        key_c = key[i % len(key)]\u000a        encoded_c = chr(ord(string[i]) + ord(key_c) % 256)\u000a        encoded_chars.append(encoded_c)\u000a    encoded_string = "".join(encoded_chars)\u000a    return base64.urlsafe_b64encode(encoded_string)\u000a</code></pre>\u000a\u000a<p>Decode is pretty much the same, except you subtract the key.</p>\u000a\u000a<p>It is much harder to break if the strings you are encoding are short, and/or if it is hard to guess the length of the passphrase used. </p>\u000a\u000a<p>If you are looking for something cryptographic, PyCrypto is probably your best bet, though previous answers overlook some details: ECB mode in PyCyrpto requires your message to be a multiple of 16 characters in length. So, you must pad. Also, if you want to use them as URL parameters, use <code>base64.urlsafe_b64_encode()</code>, rather than the standard one. This replaces a few of the characters in the base64 alphabet with URL-safe characters (as it's name suggests).</p>\u000a\u000a<p>However, you should be ABSOLUTELY certain that this <em>very</em> thin layer of obfuscation suffices for your needs before using this. The Wikipedia article I linked to provides detailed instructions for breaking the cipher, so anyone with a moderate amount of determination could easily break it.</p>\u000a
p52
sVquestion_id
p53
I2490334
sVlast_activity_date
p54
I1485371859
sVcreation_date
p55
I1269245496
sVscore
p56
I28
sVowner
p57
(dp58
Vuser_id
p59
I296946
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/b95cee13efec6afbddc1d916e9ddca24?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I1263
sVlink
p65
Vhttp://stackoverflow.com/users/296946/smehmood
p66
sVdisplay_name
p67
Vsmehmood
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1485371859
sVanswer_id
p71
I2490718
sa(dp72
Vbody
p73
V<p>The Natural Language Toolkit (<a href="http://www.nltk.org/" rel="noreferrer">nltk.org</a>) has what you need.  <a href="http://mailman.uib.no/public/corpora/2007-October/005426.html" rel="noreferrer">This group posting</a> indicates this does it:</p>\u000a\u000a<pre><code>import nltk.data\u000a\u000atokenizer = nltk.data.load('tokenizers/punkt/english.pickle')\u000afp = open("test.txt")\u000adata = fp.read()\u000aprint '\u005cn-----\u005cn'.join(tokenizer.tokenize(data))\u000a</code></pre>\u000a\u000a<p>(I haven't tried it!) </p>\u000a
p74
sVquestion_id
p75
I4576077
sVlast_activity_date
p76
I1485179280
sVcreation_date
p77
I1293920863
sVscore
p78
I91
sVowner
p79
(dp80
Vuser_id
p81
I14343
sVprofile_image
p82
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I193903
sVlink
p87
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p88
sVaccept_rate
p89
I80
sVdisplay_name
p90
VNed Batchelder
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1485179280
sVanswer_id
p94
I4576110
sa(dp95
Vbody
p96
V<p>This only works in Python 3.2+:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def gen(): yield 0; yield 1\u000a... \u000a&gt;&gt;&gt; a = gen()\u000a&gt;&gt;&gt; import inspect\u000a&gt;&gt;&gt; inspect.getgeneratorstate(a)\u000a'GEN_CREATED'\u000a&gt;&gt;&gt; next(a)\u000a0\u000a&gt;&gt;&gt; inspect.getgeneratorstate(a)\u000a'GEN_SUSPENDED'\u000a&gt;&gt;&gt; next(a)\u000a1\u000a&gt;&gt;&gt; inspect.getgeneratorstate(a)\u000a'GEN_SUSPENDED'\u000a&gt;&gt;&gt; next(a)\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aStopIteration\u000a&gt;&gt;&gt; inspect.getgeneratorstate(a)\u000a'GEN_CLOSED'\u000a</code></pre>\u000a\u000a<p>So, the requested function is:</p>\u000a\u000a<pre><code>import inspect\u000a\u000adef is_just_started(gen):\u000a    return inspect.getgeneratorstate(gen) == inspect.GEN_CREATED:\u000a</code></pre>\u000a\u000a<p>Out of curiosity, I looked into CPython to figure out how it was determining this...  Apparently it looks at <code>generator.gi_frame.f_lasti</code> which is the "index of last attempted instruction in bytecode".  If it's <code>-1</code> then it hasn't started yet.</p>\u000a\u000a<p>Here's a py2 version:</p>\u000a\u000a<pre><code>def is_just_started(gen):\u000a    return gen.gi_frame is not None and gen.gi_frame.f_lasti == -1\u000a</code></pre>\u000a
p97
sVquestion_id
p98
I41307038
sVlast_activity_date
p99
I1482525796
sVcreation_date
p100
I1482523219
sVscore
p101
I69
sVowner
p102
(dp103
Vuser_id
p104
I918558
sVprofile_image
p105
Vhttps://www.gravatar.com/avatar/427bbcd02224fced18848c5e9767c3e8?s=128&d=identicon&r=PG
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I6128
sVlink
p110
Vhttp://stackoverflow.com/users/918558/tim-tisdall
p111
sVaccept_rate
p112
I50
sVdisplay_name
p113
VTim Tisdall
p114
ssVis_accepted
p115
I01
sVlast_edit_date
p116
I1482525796
sVanswer_id
p117
I41307224
sa(dp118
Vbody
p119
V<p>A nested dict is a dictionary within a dictionary. A very simple thing.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; d = {}\u000a&gt;&gt;&gt; d['dict1'] = {}\u000a&gt;&gt;&gt; d['dict1']['innerkey'] = 'value'\u000a&gt;&gt;&gt; d\u000a{'dict1': {'innerkey': 'value'}}\u000a</code></pre>\u000a\u000a<p>You can also use a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict"><code>defaultdict</code></a> from the <a href="https://docs.python.org/2/library/collections.html"><code>collections</code></a> package to facilitate creating nested dictionaries.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import collections\u000a&gt;&gt;&gt; d = collections.defaultdict(dict)\u000a&gt;&gt;&gt; d['dict1']['innerkey'] = 'value'\u000a&gt;&gt;&gt; d  # currently a defaultdict type\u000adefaultdict(&lt;type 'dict'&gt;, {'dict1': {'innerkey': 'value'}})\u000a&gt;&gt;&gt; dict(d)  # but is exactly like a normal dictionary.\u000a{'dict1': {'innerkey': 'value'}}\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>You can populate that however you want.</p>\u000a\u000a<p>I would recommend in your code something <em>like</em> the following:</p>\u000a\u000a<pre><code>d = {}  # can use defaultdict(dict) instead\u000a\u000afor row in file_map:\u000a    # derive row key from something \u000a    # when using defaultdict, we can skip the next step creating a dictionary on row_key\u000a    d[row_key] = {} \u000a    for idx, col in enumerate(row):\u000a        d[row_key][idx] = col\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>According to your <a href="http://stackoverflow.com/questions/16333296/how-do-you-create-nested-dict-in-python/16333441?noredirect=1#comment23400008_16333441">comment</a>:</p>\u000a\u000a<blockquote>\u000a  <p>may be above code is confusing the question. My problem in nutshell: I\u000a  have 2 files a.csv b.csv, a.csv has 4 columns i j k l, b.csv also has\u000a  these columns. i is kind of key columns for these csvs'. j k l column\u000a  is empty in a.csv but populated in b.csv. I want to map values of j k\u000a  l columns using 'i` as key column from b.csv to a.csv file</p>\u000a</blockquote>\u000a\u000a<p>My suggestion would be something <em>like</em> this (without using defaultdict):</p>\u000a\u000a<pre><code>a_file = "path/to/a.csv"\u000ab_file = "path/to/b.csv"\u000a\u000a# read from file a.csv\u000awith open(a_file) as f:\u000a    # skip headers\u000a    f.next()\u000a    # get first colum as keys\u000a    keys = (line.split(',')[0] for line in f) \u000a\u000a# create empty dictionary:\u000ad = {}\u000a\u000a# read from file b.csv\u000awith open(b_file) as f:\u000a    # gather headers except first key header\u000a    headers = f.next().split(',')[1:]\u000a    # iterate lines\u000a    for line in f:\u000a        # gather the colums\u000a        cols = line.strip().split(',')\u000a        # check to make sure this key should be mapped.\u000a        if cols[0] not in keys:\u000a            continue\u000a        # add key to dict\u000a        d[cols[0]] = dict(\u000a            # inner keys are the header names, values are columns\u000a            (headers[idx], v) for idx, v in enumerate(cols[1:]))\u000a</code></pre>\u000a\u000a<p>Please note though, that for parsing csv files there is a <a href="https://docs.python.org/2/library/csv.html">csv module</a>.</p>\u000a
p120
sVquestion_id
p121
I16333296
sVlast_activity_date
p122
I1480844343
sVcreation_date
p123
I1367483057
sVscore
p124
I100
sVowner
p125
(dp126
Vuser_id
p127
I1561176
sVprofile_image
p128
Vhttps://www.gravatar.com/avatar/022b5d51f385a2b717c90e8cd371f2fe?s=128&d=identicon&r=PG
p129
sVuser_type
p130
Vregistered
p131
sVreputation
p132
I19731
sVlink
p133
Vhttp://stackoverflow.com/users/1561176/inbar-rose
p134
sVaccept_rate
p135
I90
sVdisplay_name
p136
VInbar Rose
p137
ssVis_accepted
p138
I01
sVlast_edit_date
p139
I1480844343
sVanswer_id
p140
I16333441
sa(dp141
Vbody
p142
V<p>Sure, take a look at <a href="http://docs.python.org/library/sys.html#sys.version"><code>sys.version</code></a> and <a href="http://docs.python.org/library/sys.html#sys.version_info"><code>sys.version_info</code></a>.</p>\u000a\u000a<p>For example, to check that you are running Python 3.x, use</p>\u000a\u000a<pre><code>import sys\u000aif sys.version_info[0] &lt; 3:\u000a    raise "Must be using Python 3"\u000a</code></pre>\u000a\u000a<p>Here, <code>sys.version_info[0]</code> is the major version number. <code>sys.version_info[1]</code> would give you the minor version number.</p>\u000a\u000a<p>In Python 2.7 and later, the components of <code>sys.version_info</code> can also be accessed by name, so the major version number is <code>sys.version_info.major</code>.</p>\u000a\u000a<p>See also <a href="http://stackoverflow.com/questions/446052/python-best-way-to-check-for-python-version-in-program-that-uses-new-language-f">How can I check for Python version in a program that uses new language features?</a></p>\u000a
p143
sVquestion_id
p144
I9079036
sVlast_activity_date
p145
I1477642945
sVcreation_date
p146
I1328010728
sVscore
p147
I83
sVowner
p148
(dp149
Vuser_id
p150
I623518
sVprofile_image
p151
Vhttps://www.gravatar.com/avatar/99ce218f4182a971a28ee53761867b97?s=128&d=identicon&r=PG&f=1
p152
sVuser_type
p153
Vregistered
p154
sVreputation
p155
I21659
sVlink
p156
Vhttp://stackoverflow.com/users/623518/chris
p157
sVaccept_rate
p158
I100
sVdisplay_name
p159
VChris
p160
ssVis_accepted
p161
I01
sVlast_edit_date
p162
I1477642945
sVanswer_id
p163
I9079062
sa(dp164
Vbody
p165
V<h1>First: The path structure</h1>\u000a\u000a<p>If you don't have it you need to create the <strong>middleware</strong> folder within your app following the structure:</p>\u000a\u000a<pre><code>yourproject/yourapp/middleware\u000a</code></pre>\u000a\u000a<p><em>The folder middleware should be placed in the same folder as settings.py, urls, templates...</em></p>\u000a\u000a<p><strong>Important: Don't forget to create the __init__.py empty file inside the middleware folder so your app recognize this folder</strong></p>\u000a\u000a<h1>Second: Create the middleware</h1>\u000a\u000a<p>Now we should create a file for our custom middleware, in this example let's supose we want a middleware that filter the users based on their IP, we create a file called <strong>filter_ip_middleware.py</strong> inside the <strong>middleware</strong> folder with this code:</p>\u000a\u000a<pre><code>class FilterIPMiddleware(object):\u000a    # Check if client IP is allowed\u000a    def process_request(self, request):\u000a        allowed_ips = ['192.168.1.1', '123.123.123.123', etc...] # Authorized ip's\u000a        ip = request.META.get('REMOTE_ADDR') # Get client IP\u000a        if ip not in allowed_ips:\u000a            raise Http403 # If user is not allowed raise Error\u000a\u000a       # If IP is allowed we don't do anything\u000a       return None\u000a</code></pre>\u000a\u000a<h1>Third: Add the middleware in our 'settings.py'</h1>\u000a\u000a<p>We need to look for the <code>MIDDLEWARE_CLASSES</code> inside the settings.py and there we need to add our middleware (<em>Add it in the last position</em>). It should be like:</p>\u000a\u000a<pre><code>MIDDLEWARE = ( #  Before Django 1.10 the setting name was 'MIDDLEWARE_CLASSES'\u000a    'django.middleware.common.CommonMiddleware',\u000a    'django.contrib.sessions.middleware.SessionMiddleware',\u000a    'django.middleware.csrf.CsrfViewMiddleware',\u000a    'django.contrib.auth.middleware.AuthenticationMiddleware',\u000a    'django.contrib.messages.middleware.MessageMiddleware',\u000a     # Above are django standard middlewares\u000a\u000a     # Now we add here our custom middleware\u000a     'yourapp.middleware.filter_ip_middleware.FilterIPMiddleware'\u000a)\u000a</code></pre>\u000a\u000a<p><strong>Done !</strong> Now every request from every client will call your custom middleware and process your custom code !</p>\u000a
p166
sVquestion_id
p167
I18322262
sVlast_activity_date
p168
I1475601601
sVcreation_date
p169
I1440656656
sVscore
p170
I72
sVowner
p171
(dp172
Vuser_id
p173
I2815099
sVprofile_image
p174
Vhttps://i.stack.imgur.com/fHZcV.jpg?s=128&g=1
p175
sVuser_type
p176
Vregistered
p177
sVreputation
p178
I4720
sVlink
p179
Vhttp://stackoverflow.com/users/2815099/alvaroav
p180
sVaccept_rate
p181
I68
sVdisplay_name
p182
VAlvaroAV
p183
ssVis_accepted
p184
I01
sVlast_edit_date
p185
I1475601601
sVanswer_id
p186
I32242074
sa(dp187
Vbody
p188
V<blockquote>\u000a  <p><code>TypeError: can't use a string pattern</code>\u000a  <code>on a bytes-like object</code></p>\u000a  \u000a  <p>what did i do wrong??</p>\u000a</blockquote>\u000a\u000a<p>You used a string pattern on a bytes object. Use a bytes pattern instead:</p>\u000a\u000a<pre><code>linkregex = re.compile(b'&lt;a\u005cs*href=[\u005c'|"](.*?)[\u005c'"].*?&gt;')\u000a                       ^\u000a            Add the b there, it makes it into a bytes object\u000a</code></pre>\u000a\u000a<p>(ps:</p>\u000a\u000a<pre><code> &gt;&gt;&gt; from disclaimer include dont_use_regexp_on_html\u000a "Use BeautifulSoup or lxml instead."\u000a</code></pre>\u000a\u000a<p>)</p>\u000a
p189
sVquestion_id
p190
I5184483
sVlast_activity_date
p191
I1474629006
sVcreation_date
p192
I1299180218
sVscore
p193
I66
sVowner
p194
(dp195
Vuser_id
p196
I126214
sVprofile_image
p197
Vhttps://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=128&d=identicon&r=PG
p198
sVuser_type
p199
Vregistered
p200
sVreputation
p201
I82828
sVlink
p202
Vhttp://stackoverflow.com/users/126214/lennart-regebro
p203
sVaccept_rate
p204
I100
sVdisplay_name
p205
VLennart Regebro
p206
ssVis_accepted
p207
I01
sVlast_edit_date
p208
I1474629006
sVanswer_id
p209
I5185462
sa(dp210
Vbody
p211
V<p>Yes, use <code>getattr()</code> to get the attribute, and <code>callable()</code> to verify it is a method:</p>\u000a\u000a<pre><code>invert_op = getattr(self, "invert_op", None)\u000aif callable(invert_op):\u000a    invert_op(self.path.parent_op)\u000a</code></pre>\u000a\u000a<p>Note that <code>getattr()</code> normally throws exception when the attribute doesn't exist. However, if you specify a default value (<code>None</code>, in this case), it will return that instead.</p>\u000a
p212
sVquestion_id
p213
I5268404
sVlast_activity_date
p214
I1473759639
sVcreation_date
p215
I1299812094
sVscore
p216
I78
sVowner
p217
(dp218
Vuser_id
p219
I648615
sVprofile_image
p220
Vhttps://www.gravatar.com/avatar/2ca03a181b2fd281e4fa7709e4564408?s=128&d=identicon&r=PG
p221
sVuser_type
p222
Vregistered
p223
sVreputation
p224
I5284
sVlink
p225
Vhttp://stackoverflow.com/users/648615/nathan-ostgard
p226
sVdisplay_name
p227
VNathan Ostgard
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1473759639
sVanswer_id
p231
I5268474
sa(dp232
Vbody
p233
V<p>No need for complicated logic, simply rearrange the list with slicing and step:</p>\u000a\u000a<pre><code>In [1]: l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\u000a\u000aIn [2]: l[::2], l[1::2] = l[1::2], l[::2]\u000a\u000aIn [3]: l\u000aOut[3]: [2, 1, 4, 3, 6, 5, 8, 7, 10, 9]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<h2> TLDR;</h2>\u000a\u000a<p><strong>Edited with explanation</strong></p>\u000a\u000a<p>I believe most viewers are already familiar with list slicing and multiple assignment. In case you don't I will try my best to explain what's going on (hope I do not make it worse).</p>\u000a\u000a<p>To understand list slicing, <a href="http://stackoverflow.com/questions/509211/explain-pythons-slice-notation">here</a> already has an excellent answer and explanation of list slice notation.\u000aSimply put:</p>\u000a\u000a<pre><code>a[start:end] # items start through end-1\u000aa[start:]    # items start through the rest of the array\u000aa[:end]      # items from the beginning through end-1\u000aa[:]         # a copy of the whole array\u000a\u000aThere is also the step value, which can be used with any of the above:\u000a\u000aa[start:end:step] # start through not past end, by step\u000a</code></pre>\u000a\u000a<p>Let's look at OP's requirements: </p>\u000a\u000a<pre><code> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # list l\u000a  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^\u000a  0  1  2  3  4  5  6  7  8  9    # respective index of the elements\u000al[0]  l[2]  l[4]  l[6]  l[8]      # first tier : start=0, step=2\u000a   l[1]  l[3]  l[5]  l[7]  l[9]   # second tier: start=1, step=2\u000a-----------------------------------------------------------------------\u000al[1]  l[3]  l[5]  l[7]  l[9]\u000a   l[0]  l[2]  l[4]  l[6]  l[8]   # desired output\u000a</code></pre>\u000a\u000a<p>First tier will be: <code>l[::2] = [1, 3, 5, 7, 9]</code>\u000aSecond tier will be: <code>l[1::2] = [2, 4, 6, 8, 10]</code></p>\u000a\u000a<p>As we want to re-assign <code>first = second</code> &amp; <code>second = first</code>, we can use multiple assignment, and update the original list in place:</p>\u000a\u000a<pre><code>first , second  = second , first\u000a</code></pre>\u000a\u000a<p>that is:</p>\u000a\u000a<pre><code>l[::2], l[1::2] = l[1::2], l[::2]\u000a</code></pre>\u000a\u000a<p>As a side note, to get a new list but not altering original <code>l</code>, we can assign a new list from <code>l</code>, and perform above, that is:</p>\u000a\u000a<pre><code>n = l[:]  # assign n as a copy of l (without [:], n still points to l)\u000an[::2], n[1::2] = n[1::2], n[::2]\u000a</code></pre>\u000a\u000a<p>Hopefully I do not confuse any of you with this added explanation. If it does, please help update mine and make it better :-) </p>\u000a
p234
sVquestion_id
p235
I39167057
sVlast_activity_date
p236
I1472264227
sVcreation_date
p237
I1472218192
sVscore
p238
I99
sVowner
p239
(dp240
Vuser_id
p241
I3849456
sVprofile_image
p242
Vhttps://i.stack.imgur.com/AonOf.jpg?s=128&g=1
p243
sVuser_type
p244
Vregistered
p245
sVreputation
p246
I10044
sVlink
p247
Vhttp://stackoverflow.com/users/3849456/anzel
p248
sVdisplay_name
p249
VAnzel
p250
ssVis_accepted
p251
I01
sVlast_edit_date
p252
I1472264227
sVanswer_id
p253
I39167545
sa(dp254
Vbody
p255
V<p>Add a <code>label=</code> to each of your <a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot" rel="noreferrer"><code>plot()</code></a> calls, and then call <a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.legend" rel="noreferrer"><code>legend(loc='upper left')</code></a>.</p>\u000a\u000a<p>Consider this sample:</p>\u000a\u000a<pre><code>import numpy as np\u000aimport pylab \u000ax = np.linspace(0, 20, 1000)\u000ay1 = np.sin(x)\u000ay2 = np.cos(x)\u000a\u000apylab.plot(x, y1, '-b', label='sine')\u000apylab.plot(x, y2, '-r', label='cosine')\u000apylab.legend(loc='upper left')\u000apylab.ylim(-1.5, 2.0)\u000apylab.show()\u000a</code></pre>\u000a\u000a<p><a href="https://i.stack.imgur.com/cuhnS.png" rel="noreferrer"><img src="https://i.stack.imgur.com/cuhnS.png" alt="enter image description here"></a>\u000aSlightly modified from this tutorial: <a href="http://jakevdp.github.io/mpl_tutorial/tutorial_pages/tut1.html" rel="noreferrer">http://jakevdp.github.io/mpl_tutorial/tutorial_pages/tut1.html</a></p>\u000a
p256
sVquestion_id
p257
I19125722
sVlast_activity_date
p258
I1469730448
sVcreation_date
p259
I1380661259
sVscore
p260
I85
sVowner
p261
(dp262
Vuser_id
p263
I8747
sVprofile_image
p264
Vhttps://www.gravatar.com/avatar/b1ee0402d24625f555c25ea8511aad31?s=128&d=identicon&r=PG
p265
sVuser_type
p266
Vregistered
p267
sVreputation
p268
I91520
sVlink
p269
Vhttp://stackoverflow.com/users/8747/rob%e1%b5%a9
p270
sVaccept_rate
p271
I100
sVdisplay_name
p272
VRob\u1d69
p273
ssVis_accepted
p274
I01
sVlast_edit_date
p275
I1469730448
sVanswer_id
p276
I19125863
sa(dp277
Vbody
p278
V<p>You can achieve this by creating a simple, empty wrapper class around the returned value from <code>namedtuple</code>.  Contents of a file I created (<code>nt.py</code>):</p>\u000a\u000a<pre><code>from collections import namedtuple\u000a\u000aPoint_ = namedtuple("Point", ["x", "y"])\u000a\u000aclass Point(Point_):\u000a    """ A point in 2d space """\u000a    pass\u000a</code></pre>\u000a\u000a<p>Then in the Python REPL:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print nt.Point.__doc__\u000a A point in 2d space \u000a</code></pre>\u000a\u000a<p>Or you could do:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; help(nt.Point)  # which outputs...\u000a</code></pre>\u000a\u000a<pre>\u000aHelp on class Point in module nt:\u000a\u000aclass Point(Point)\u000a |  A point in 2d space\u000a |  \u000a |  Method resolution order:\u000a |      Point\u000a |      Point\u000a |      __builtin__.tuple\u000a |      __builtin__.object\u000a ...\u000a</pre>\u000a\u000a<p>If you don't like doing that by hand every time, it's trivial to write a sort-of factory function to do this:</p>\u000a\u000a<pre><code>def NamedTupleWithDocstring(docstring, *ntargs):\u000a    nt = namedtuple(*ntargs)\u000a    class NT(nt):\u000a        __doc__ = docstring\u000a    return NT\u000a\u000aPoint3D = NamedTupleWithDocstring("A point in 3d space", "Point3d", ["x", "y", "z"])\u000a\u000ap3 = Point3D(1,2,3)\u000a\u000aprint p3.__doc__\u000a</code></pre>\u000a\u000a<p>which outputs:</p>\u000a\u000a<pre><code>A point in 3d space\u000a</code></pre>\u000a
p279
sVquestion_id
p280
I1606436
sVlast_activity_date
p281
I1467329097
sVcreation_date
p282
I1256209415
sVscore
p283
I32
sVowner
p284
(dp285
Vuser_id
p286
I126042
sVprofile_image
p287
Vhttps://www.gravatar.com/avatar/e9562ede99cb17789af5349379a9ef25?s=128&d=identicon&r=PG
p288
sVuser_type
p289
Vregistered
p290
sVreputation
p291
I149231
sVlink
p292
Vhttp://stackoverflow.com/users/126042/mark-rushakoff
p293
sVaccept_rate
p294
I68
sVdisplay_name
p295
VMark Rushakoff
p296
ssVis_accepted
p297
I01
sVlast_edit_date
p298
I1467329097
sVanswer_id
p299
I1606478
sa(dp300
Vbody
p301
V<p>Don't make them independent tests - if you want a monolithic test, write a monolithic test.</p>\u000a\u000a<pre><code>class Monolithic(TestCase):\u000a  def step1(self):\u000a      ...\u000a\u000a  def step2(self):\u000a      ...\u000a\u000a  def _steps(self):\u000a    for name in sorted(dir(self)):\u000a      if name.startswith("step"):\u000a        yield name, getattr(self, name) \u000a\u000a  def test_steps(self):\u000a    for name, step in self._steps():\u000a      try:\u000a        step()\u000a      except Exception as e:\u000a        self.fail("{} failed ({}: {})".format(step, type(e), e))\u000a</code></pre>\u000a\u000a<p>If the test later starts failing and you want information on all failing steps instead of halting the test case at the first failed step, you can use the <code>subtests</code> feature: <a href="https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests" rel="noreferrer">https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests</a></p>\u000a\u000a<p>(The subtest feature is available via <code>unittest2</code> for versions prior to Python 3.4: <a href="https://pypi.python.org/pypi/unittest2" rel="noreferrer">https://pypi.python.org/pypi/unittest2</a> )</p>\u000a
p302
sVquestion_id
p303
I5387299
sVlast_activity_date
p304
I1466125602
sVcreation_date
p305
I1300778325
sVscore
p306
I55
sVowner
p307
(dp308
Vuser_id
p309
I597742
sVprofile_image
p310
Vhttps://www.gravatar.com/avatar/f3ba3ecffd20251d73749afbfa636786?s=128&d=identicon&r=PG
p311
sVuser_type
p312
Vregistered
p313
sVreputation
p314
I20632
sVlink
p315
Vhttp://stackoverflow.com/users/597742/ncoghlan
p316
sVaccept_rate
p317
I100
sVdisplay_name
p318
Vncoghlan
p319
ssVis_accepted
p320
I01
sVlast_edit_date
p321
I1466125602
sVanswer_id
p322
I5387956
sa(dp323
Vbody
p324
V<p>You asked about the "basic concepts", so let's take it from the top: When you open a file, your program gains access to <strong>a system resource,</strong> that is, to something outside the program's own memory space. This is basically a bit of magic provided by the operating system (a <em>system call,</em> in Unix terminology). Hidden inside the file object is a reference to a "file descriptor", the actual OS resource associated with the open file. Closing the file tells the system to release this resource.</p>\u000a\u000a<p>As an OS resource, <strong>the number of files a process can keep open is limited:</strong> Long ago the per-process limit was about 20 on Unix. Right now my OS X box imposes a limit of 256 open files (though this is an imposed limit, and can be raised). Other systems might set limits of <a href="http://stackoverflow.com/q/870173/699305">a few thousand</a>, or in the <a href="http://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files/" rel="nofollow noreferrer">tens of thousands</a> (per user, not per process in this case). When your program ends, all resources are automatically released. So if your program opens a few files, does something with them and exits, you can be sloppy and you'll never know the difference. But if your program will be opening thousands of files, you'll do well to release open files to avoid exceeding OS limits.</p>\u000a\u000a<p>There's another benefit to closing files before your process exits: If you opened a file for writing, <strong>closing it will first "flush its output buffer".</strong> This means that i/o libraries optimize disk use by collecting ("buffering") what you write out, and saving it to disk in batches.  If you write text to a file and immediately try to reopen and read it without first closing the output handle, you'll find that not everything has been written out. Also, if your program is closed too abruptly (with a signal, or occasionally even through normal exit), the output might never be flushed. </p>\u000a\u000a<p>There's already plenty of other answers on how to release files, so here's just a brief list of the approaches:</p>\u000a\u000a<ol>\u000a<li><p>Explicitly with <code>close()</code>. (Note for python newbies: Don't forget the parens! My students like to write <code>in_file.close</code>, which does nothing.)</p></li>\u000a<li><p><strong>Recommended:</strong> Implicitly, by opening files with the <code>with</code> statement. The <code>close()</code> method will be called when the end of the <code>with</code> block is reached, even in the event of abnormal termination (from an exception).</p>\u000a\u000a<pre><code>with open("data.txt") as in_file:\u000a    data = in_file.read()\u000a</code></pre></li>\u000a<li><p>Implicitly by the reference manager or garbage collector, if your python engine implements it. This is not recommended since it's not entirely portable; see the other answers for details. That's why the <code>with</code> statement was added to python. </p></li>\u000a<li><p>Implicitly, when your program ends. If a file is open for output, this may run a risk of the program exiting before everything has been flushed to disk.</p></li>\u000a</ol>\u000a
p325
sVquestion_id
p326
I36046167
sVlast_activity_date
p327
I1458993247
sVcreation_date
p328
I1458224195
sVscore
p329
I34
sVowner
p330
(dp331
Vuser_id
p332
I699305
sVprofile_image
p333
Vhttps://www.gravatar.com/avatar/db6ce45b5ec86e1b00d922fc5cee315f?s=128&d=identicon&r=PG
p334
sVuser_type
p335
Vregistered
p336
sVreputation
p337
I26058
sVlink
p338
Vhttp://stackoverflow.com/users/699305/alexis
p339
sVaccept_rate
p340
I61
sVdisplay_name
p341
Valexis
p342
ssVis_accepted
p343
I01
sVlast_edit_date
p344
I1458993247
sVanswer_id
p345
I36063184
sa(dp346
Vbody
p347
V<p>You can do it by using either the <code>lower</code> or <code>upper</code> functions in your filter:</p>\u000a\u000a<pre><code>from sqlalchemy import func\u000auser = models.User.query.filter(func.lower(User.username) == func.lower("GaNyE")).first()\u000a</code></pre>\u000a\u000a<p>Another option is to do searching using <code>ilike</code> instead of <code>like</code>:</p>\u000a\u000a<pre><code>.query.filter(Model.column.ilike("ganye"))\u000a</code></pre>\u000a
p348
sVquestion_id
p349
I16573095
sVlast_activity_date
p350
I1458308556
sVcreation_date
p351
I1368647053
sVscore
p352
I89
sVowner
p353
(dp354
Vuser_id
p355
I157176
sVprofile_image
p356
Vhttps://www.gravatar.com/avatar/e72ba9209373ae37e13ab75054aa0ee5?s=128&d=identicon&r=PG
p357
sVuser_type
p358
Vregistered
p359
sVreputation
p360
I18239
sVlink
p361
Vhttp://stackoverflow.com/users/157176/plaes
p362
sVdisplay_name
p363
Vplaes
p364
ssVis_accepted
p365
I01
sVlast_edit_date
p366
I1458308556
sVanswer_id
p367
I16573690
sa(dp368
Vbody
p369
V<p>You can filter all characters from the string that are not printable using <a href="http://docs.python.org/library/string.html#string.printable">string.printable</a>, like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; s = "some\u005cx00string. with\u005cx15 funny characters"\u000a&gt;&gt;&gt; import string\u000a&gt;&gt;&gt; printable = set(string.printable)\u000a&gt;&gt;&gt; filter(lambda x: x in printable, s)\u000a'somestring. with funny characters'\u000a</code></pre>\u000a\u000a<p>string.printable on my machine contains:</p>\u000a\u000a<pre><code>0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u000a!"#$%&amp;\u005c'()*+,-./:;&lt;=&gt;?@[\u005c\u005c]^_`{|}~ \u005ct\u005cn\u005cr\u005cx0b\u005cx0c\u000a</code></pre>\u000a
p370
sVquestion_id
p371
I8689795
sVlast_activity_date
p372
I1456159412
sVcreation_date
p373
I1325356173
sVscore
p374
I92
sVowner
p375
(dp376
Vuser_id
p377
I624900
sVprofile_image
p378
Vhttps://www.gravatar.com/avatar/dd56da509c21eebb967777a9dbcce437?s=128&d=identicon&r=PG
p379
sVuser_type
p380
Vregistered
p381
sVreputation
p382
I34937
sVlink
p383
Vhttp://stackoverflow.com/users/624900/jterrace
p384
sVaccept_rate
p385
I88
sVdisplay_name
p386
Vjterrace
p387
ssVis_accepted
p388
I01
sVlast_edit_date
p389
I1456159412
sVanswer_id
p390
I8689826
sa(dp391
Vbody
p392
V<p>Most likely your application doesn't use the Flask-SQLAlchemy event system, so you're probably safe to turn off. You'll need to audit the code to verify--you're looking for anything that hooks into <a href="http://flask-sqlalchemy.pocoo.org/dev/signals/"><code>models_committed</code> or <code>before_models_committed</code></a>. If you do find that you're using the Flask-SQLAlchemy event system, you probably should update the code to use SQLAlchemy's built-in event system instead.</p>\u000a\u000a<p>To turn off the Flask-SQLAlchemy event system (and disable the warning), just add <code>SQLALCHEMY_TRACK_MODIFICATIONS = False</code> to your app config until the default is changed (most likely in Flask-SQLAlchemy v3).</p>\u000a\u000a<p>Background--here's what the warning is telling you: </p>\u000a\u000a<p>Flask-SQLAlchemy has its own event notification system that gets layered on top of SQLAlchemy. To do this, it tracks modifications to the SQLAlchemy session. This takes extra resources, so the option <code>SQLALCHEMY_TRACK_MODIFICATIONS</code> allows you to disable the modification tracking system. Currently the option defaults to <code>True</code>, but in the future, that default will change to <code>False</code>, thereby disabling the event system.</p>\u000a\u000a<p>As far as I understand, the rationale for the change is three-fold:</p>\u000a\u000a<ol>\u000a<li><p>Not many people use Flask-SQLAlchemy's event system, but most people don't realize they can save system resources by disabling it. So a saner default is to disable it and those who want it can turn it on.</p></li>\u000a<li><p>The event system in Flask-SQLAlchemy has been rather buggy (see issues linked to in the pull request mentioned below), requiring additional maintenance for a feature that few people use.</p></li>\u000a<li><p>In v0.7, SQLAlchemy itself added a <a href="http://docs.sqlalchemy.org/en/latest/core/event.html">powerful event system</a> including the ability to create custom events. Ideally, the Flask-SQLAlchemy event system should do nothing more than create a few custom SQLAlchemy event hooks and listeners, and then let SQLAlchemy itself manage the event trigger. </p></li>\u000a</ol>\u000a\u000a<p>You can see more in the discussion around <a href="https://github.com/mitsuhiko/flask-sqlalchemy/pull/256">the pull request that started triggering this warning</a>.</p>\u000a
p393
sVquestion_id
p394
I33738467
sVlast_activity_date
p395
I1448084857
sVcreation_date
p396
I1447880194
sVscore
p397
I60
sVowner
p398
(dp399
Vuser_id
p400
I770425
sVprofile_image
p401
Vhttps://www.gravatar.com/avatar/f87997cd806a0495c0b677f5a7728319?s=128&d=identicon&r=PG
p402
sVuser_type
p403
Vregistered
p404
sVreputation
p405
I3090
sVlink
p406
Vhttp://stackoverflow.com/users/770425/jeff-widman
p407
sVaccept_rate
p408
I79
sVdisplay_name
p409
VJeff Widman
p410
ssVis_accepted
p411
I01
sVlast_edit_date
p412
I1448084857
sVanswer_id
p413
I33790196
sa(dp414
Vbody
p415
V<p>Personally I go with parentheses when importing more than one component and sort them alphabetically. Like so:</p>\u000a\u000a<pre><code>from Tkinter import (\u000a    Button,\u000a    Canvas,\u000a    DISABLED,\u000a    END,\u000a    Entry,\u000a    Frame,\u000a    LEFT,\u000a    NORMAL,\u000a    RIDGE,\u000a    Text,\u000a    Tk,\u000a)\u000a</code></pre>\u000a\u000a<p>Overall though it's a personal preference and I would advise you to go with whatever looks best to you.</p>\u000a
p416
sVquestion_id
p417
I14376900
sVlast_activity_date
p418
I1446109033
sVcreation_date
p419
I1358419503
sVscore
p420
I66
sVowner
p421
(dp422
Vuser_id
p423
I621591
sVprofile_image
p424
Vhttps://www.gravatar.com/avatar/1923561d707307322c0e7542e7d558c7?s=128&d=identicon&r=PG
p425
sVuser_type
p426
Vregistered
p427
sVreputation
p428
I1028
sVlink
p429
Vhttp://stackoverflow.com/users/621591/brendan-maguire
p430
sVaccept_rate
p431
I90
sVdisplay_name
p432
VBrendan Maguire
p433
ssVis_accepted
p434
I01
sVlast_edit_date
p435
I1446109033
sVanswer_id
p436
I14377271
sa(dp437
Vbody
p438
V<p>For ASCII characters in the range <code>[ -~]</code> on Python 2:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import binascii\u000a&gt;&gt;&gt; bin(int(binascii.hexlify('hello'), 16))\u000a'0b110100001100101011011000110110001101111'\u000a</code></pre>\u000a\u000a<p>In reverse:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; n = int('0b110100001100101011011000110110001101111', 2)\u000a&gt;&gt;&gt; binascii.unhexlify('%x' % n)\u000a'hello'\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>In Python 3.2+:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; bin(int.from_bytes('hello'.encode(), 'big'))\u000a'0b110100001100101011011000110110001101111'\u000a</code></pre>\u000a\u000a<p>In reverse:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; n = int('0b110100001100101011011000110110001101111', 2)\u000a&gt;&gt;&gt; n.to_bytes((n.bit_length() + 7) // 8, 'big').decode()\u000a'hello'\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<h3>To support all Unicode characters in Python 3:</h3>\u000a\u000a<pre><code>def text_to_bits(text, encoding='utf-8', errors='surrogatepass'):\u000a    bits = bin(int.from_bytes(text.encode(encoding, errors), 'big'))[2:]\u000a    return bits.zfill(8 * ((len(bits) + 7) // 8))\u000a\u000adef text_from_bits(bits, encoding='utf-8', errors='surrogatepass'):\u000a    n = int(bits, 2)\u000a    return n.to_bytes((n.bit_length() + 7) // 8, 'big').decode(encoding, errors) or '\u005c0'\u000a</code></pre>\u000a\u000a<h3>Here's  single-source Python 2/3 compatible version:</h3>\u000a\u000a<pre><code>import binascii\u000a\u000adef text_to_bits(text, encoding='utf-8', errors='surrogatepass'):\u000a    bits = bin(int(binascii.hexlify(text.encode(encoding, errors)), 16))[2:]\u000a    return bits.zfill(8 * ((len(bits) + 7) // 8))\u000a\u000adef text_from_bits(bits, encoding='utf-8', errors='surrogatepass'):\u000a    n = int(bits, 2)\u000a    return int2bytes(n).decode(encoding, errors)\u000a\u000adef int2bytes(i):\u000a    hex_string = '%x' % i\u000a    n = len(hex_string)\u000a    return binascii.unhexlify(hex_string.zfill(n + (n &amp; 1)))\u000a</code></pre>\u000a\u000a<h3>Example</h3>\u000a\u000a<pre><code>&gt;&gt;&gt; text_to_bits('hello')\u000a'0110100001100101011011000110110001101111'\u000a&gt;&gt;&gt; text_from_bits('110100001100101011011000110110001101111') == u'hello'\u000aTrue\u000a</code></pre>\u000a
p439
sVquestion_id
p440
I7396849
sVlast_activity_date
p441
I1443031264
sVcreation_date
p442
I1315895357
sVscore
p443
I96
sVowner
p444
(dp445
Vuser_id
p446
I4279
sVprofile_image
p447
Vhttps://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG
p448
sVuser_type
p449
Vregistered
p450
sVreputation
p451
I203089
sVlink
p452
Vhttp://stackoverflow.com/users/4279/j-f-sebastian
p453
sVaccept_rate
p454
I94
sVdisplay_name
p455
VJ.F. Sebastian
p456
ssVis_accepted
p457
I01
sVlast_edit_date
p458
I1443031264
sVanswer_id
p459
I7397689
sa(dp460
Vbody
p461
V<p>Most of the answers seem massively over complicated. You <strong>don't</strong> need back references. You <strong>don't</strong> need to depend on whether or not re.findall gives overlapping matches.  Given that the input cannot be parsed with the csv module so a regular expression is pretty well the only way to go, all you need is to call re.split with a pattern that matches a field.</p>\u000a\u000a<p>Note that it is much easier here to match a field than it is to match a separator:</p>\u000a\u000a<pre><code>import re\u000adata = """part 1;"this is ; part 2;";'this is ; part 3';part 4;this "is ; part" 5"""\u000aPATTERN = re.compile(r'''((?:[^;"']|"[^"]*"|'[^']*')+)''')\u000aprint PATTERN.split(data)[1::2]\u000a</code></pre>\u000a\u000a<p>and the output is:</p>\u000a\u000a<pre><code>['part 1', '"this is ; part 2;"', "'this is ; part 3'", 'part 4', 'this "is ; part" 5']\u000a</code></pre>\u000a\u000a<p>As Jean-Luc Nacif Coelho correctly points out this won't handle empty groups correctly. Depending on the situation that may or may not matter. If it does matter it may be possible to handle it by, for example, replacing <code>';;'</code> with <code>';&lt;marker&gt;;'</code> where <code>&lt;marker&gt;</code> would have to be some string (without semicolons) that you know does not appear in the data before the split. Also you need to restore the data after:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; marker = ";!$%^&amp;;"\u000a&gt;&gt;&gt; [r.replace(marker[1:-1],'') for r in PATTERN.split("aaa;;aaa;'b;;b'".replace(';;', marker))[1::2]]\u000a['aaa', '', 'aaa', "'b;;b'"]\u000a</code></pre>\u000a\u000a<p>However this is a kludge. Any better suggestions?</p>\u000a
p462
sVquestion_id
p463
I2785755
sVlast_activity_date
p464
I1435651885
sVcreation_date
p465
I1273219189
sVscore
p466
I40
sVowner
p467
(dp468
Vuser_id
p469
I107660
sVprofile_image
p470
Vhttps://www.gravatar.com/avatar/0167bade38130f13a5fc468c10388d9d?s=128&d=identicon&r=PG
p471
sVuser_type
p472
Vregistered
p473
sVreputation
p474
I46101
sVlink
p475
Vhttp://stackoverflow.com/users/107660/duncan
p476
sVdisplay_name
p477
VDuncan
p478
ssVis_accepted
p479
I01
sVlast_edit_date
p480
I1435651885
sVanswer_id
p481
I2787064
sa(dp482
Vbody
p483
V<p><code>sessionmaker()</code> is a factory, it's there to encourage placing configuration options for creating new <code>Session</code> objects in just one place.   It is optional, in that you could just as easily call <code>Session(bind=engine, expire_on_commit=False)</code> anytime you needed a new <code>Session</code>, except that its verbose and redundant, and I wanted to stop the proliferation of small-scale "helpers" that each approached the issue of this redundancy in some new and more confusing way.</p>\u000a\u000a<p>So <code>sessionmaker()</code> is just a tool to help you create <code>Session</code> objects when you need them.</p>\u000a\u000a<p>Next part.   I think the question is, what's the difference between making a new <code>Session()</code> at various points versus just using one all the way through.  The answer, not very much.   <code>Session</code> is a container for all the objects you put into it, and then it also keeps track of an open transaction.  At the moment you call <code>rollback()</code> or <code>commit()</code>, the transaction is over, and the <code>Session</code> has no connection to the database until it is called upon to emit SQL again.   The links it holds to your mapped objects are weak referencing, provided the objects are clean of pending changes, so even in that regard the <code>Session</code> will empty itself out back to a brand new state when your application loses all references to mapped objects.  If you leave it with its default <code>"expire_on_commit"</code> setting, then all the objects are expired after a commit.  If that <code>Session</code> hangs around for five or twenty minutes, and all kinds of things have changed in the database the next time you use it, it will load all brand new state the next time you access those objects even though they've been sitting in memory for twenty minutes.</p>\u000a\u000a<p>In web applications, we usually say, hey why don't you make a brand new <code>Session</code> on each request, rather than using the same one over and over again.  This practice ensures that the new request begins "clean".  If some objects from the previous request haven't been garbage collected yet, and if maybe you've turned off <code>"expire_on_commit"</code>, maybe some state from the previous request is still hanging around, and that state might even be pretty old.   If you're careful to leave <code>expire_on_commit</code> turned on and to definitely call <code>commit()</code> or <code>rollback()</code> at request end, then it's fine, but if you start with a brand new <code>Session</code>, then there's not even any question that you're starting clean.   So the idea to start each request with a new <code>Session</code> is really just the simplest way to make sure you're starting fresh, and to make the usage of <code>expire_on_commit</code> pretty much optional, as this flag can incur a lot of extra SQL for an operation that calls <code>commit()</code> in the middle of a series of operations.   Not sure if this answers your question.</p>\u000a\u000a<p>The next round is what you mention about threading.   If your app is multithreaded, we recommend making sure the <code>Session</code> in use is local to...something.   <code>scoped_session()</code> by default makes it local to the current thread.  In a web app, local to the request is in fact even better.   Flask-SQLAlchemy actually sends a custom "scope function" to <code>scoped_session()</code> so that you get a request-scoped session.  The average Pyramid application sticks the Session into the "request" registry.   When using schemes like these, the "create new Session on request start" idea continues to look like the most straightforward way to keep things straight.</p>\u000a
p484
sVquestion_id
p485
I12223335
sVlast_activity_date
p486
I1434718979
sVcreation_date
p487
I1346456740
sVscore
p488
I127
sVowner
p489
(dp490
Vuser_id
p491
I34549
sVprofile_image
p492
Vhttps://www.gravatar.com/avatar/7c63a03cc45f763a06149d6c99cef46c?s=128&d=identicon&r=PG
p493
sVuser_type
p494
Vregistered
p495
sVreputation
p496
I38836
sVlink
p497
Vhttp://stackoverflow.com/users/34549/zzzeek
p498
sVaccept_rate
p499
I80
sVdisplay_name
p500
Vzzzeek
p501
ssVis_accepted
p502
I01
sVlast_edit_date
p503
I1434718979
sVanswer_id
p504
I12223711
sa(dp505
Vbody
p506
V<p>As stated in the warning, this happens either :</p>\u000a\u000a<ul>\u000a<li>When you're using a model which is not in an <code>INSTALLED_APPS</code>;</li>\u000a<li>Or when you're using a model before its application is loaded.</li>\u000a</ul>\u000a\u000a<p>Since you did refer the app in the <code>INSTALLED_APPS</code> setting, this is most likely you're using a model before the app initialisation.</p>\u000a\u000a<p>Typically, this occurs when you have <code>from .models import SomeModels</code> in an <strong>apps.py</strong> early signal (for example <code>post_migrate</code>).\u000aInstead of referring your models the classic way here, it is recommended to use <a href="http://django.readthedocs.org/en/latest/ref/applications.html#methods">AppConfig.get_model()</a>.\u000aCheck your <strong>apps.py</strong> file for any model import, and replace them using this api.</p>\u000a\u000a<p>For example instead of :</p>\u000a\u000a<pre><code># apps.py\u000a\u000afrom django.apps import AppConfig\u000afrom .models import MyModel\u000a\u000adef do_stuff(sender, **kwargs):\u000a    MyModel.objects.get() # etc...\u000a\u000aclass MyAppConfig(AppConfig):\u000a    name = 'src.my_app_label'\u000a\u000a    def ready(self):\u000a        post_migrate.connect(do_stuff, sender=self)\u000a</code></pre>\u000a\u000a<p>Do this :</p>\u000a\u000a<pre><code># apps.py\u000a\u000afrom django.apps import AppConfig\u000a\u000adef do_stuff(sender, **kwargs):\u000a    mymodel = sender.get_model('MyModel')\u000a    mymodel.objects.get() # etc...\u000a\u000aclass MyAppConfig(AppConfig):\u000a    name = 'src.my_app_label'\u000a\u000a    def ready(self):\u000a        post_migrate.connect(do_stuff, sender=self)\u000a</code></pre>\u000a\u000a<p>Note this enforcement was introduced in bug <a href="https://code.djangoproject.com/ticket/21719#no1">#21719</a>.</p>\u000a
p507
sVquestion_id
p508
I29635765
sVlast_activity_date
p509
I1429283697
sVcreation_date
p510
I1429283697
sVscore
p511
I41
sVowner
p512
(dp513
Vuser_id
p514
I106287
sVprofile_image
p515
Vhttps://i.stack.imgur.com/VfemB.png?s=128&g=1
p516
sVuser_type
p517
Vregistered
p518
sVreputation
p519
I965
sVlink
p520
Vhttp://stackoverflow.com/users/106287/antwan
p521
sVdisplay_name
p522
VAntwan
p523
ssVis_accepted
p524
I01
sVanswer_id
p525
I29703136
sa(dp526
Vbody
p527
V<p>By default, matplotlib will use something like the <code>TkAgg</code> backend.  This requires an X-server to be running.</p>\u000a\u000a<p>While you can just use X-forwarding, there will be a noticeable lag as matplotlib tries to connect with the remote X-server.  If you don't need to interact with the plot, it's often nicer to speed things up by avoiding an X-connection entirely.</p>\u000a\u000a<p>If you want to make a plot without needing an X-server at all, use the <code>Agg</code> <a href="http://matplotlib.org/faq/usage_faq.html#what-is-a-backend" rel="noreferrer">backend</a>  instead.</p>\u000a\u000a<p>E.g. do something like this:</p>\u000a\u000a<pre><code>import matplotlib\u000amatplotlib.use('Agg') # Must be before importing matplotlib.pyplot or pylab!\u000aimport matplotlib.pyplot as plt\u000a\u000afig = plt.figure()\u000aplt.plot(range(10))\u000afig.savefig('temp.png')\u000a</code></pre>\u000a\u000a<p>If you want this to be the default behavior, you can modify your <a href="http://matplotlib.sourceforge.net/users/customizing.html" rel="noreferrer">matplotlibrc file</a> to use the <code>Agg</code> backend by default.</p>\u000a\u000a<p>See <a href="http://matplotlib.sourceforge.net/faq/howto_faq.html#matplotlib-in-a-web-application-server" rel="noreferrer">this article for more information</a>.</p>\u000a
p528
sVquestion_id
p529
I4706451
sVlast_activity_date
p530
I1427446495
sVcreation_date
p531
I1295195913
sVscore
p532
I98
sVowner
p533
(dp534
Vuser_id
p535
I325565
sVprofile_image
p536
Vhttps://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=128&d=identicon&r=PG
p537
sVuser_type
p538
Vregistered
p539
sVreputation
p540
I136691
sVlink
p541
Vhttp://stackoverflow.com/users/325565/joe-kington
p542
sVdisplay_name
p543
VJoe Kington
p544
ssVis_accepted
p545
I01
sVlast_edit_date
p546
I1427446495
sVanswer_id
p547
I4706614
sa(dp548
Vbody
p549
V<p>Assuming you haven't set <code>TEMPLATE_CONTEXT_PROCESSORS</code> to some other value in <code>settings.py</code>, Django will automatically load the <code>debug</code> context preprocessor (as noted <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#id1" rel="noreferrer">here</a>). This means that you will have access to a variable called <code>debug</code> in your templates <em>if</em> <code>settings.DEBUG</code> is true <em>and</em> your local machine's IP address (which can simply be 127.0.0.1) is set in the variable <code>settings.INTERNAL_IPS</code> (which is described <a href="http://docs.djangoproject.com/en/dev/ref/settings/#internal-ips" rel="noreferrer">here</a>). <code>settings.INTERNAL_IPS</code> is a tuple or list of IP addresses that Django should recognize as "internal".</p>\u000a
p550
sVquestion_id
p551
I1271631
sVlast_activity_date
p552
I1422567219
sVcreation_date
p553
I1250169787
sVscore
p554
I54
sVowner
p555
(dp556
Vuser_id
p557
I28804
sVprofile_image
p558
Vhttps://www.gravatar.com/avatar/015c999a9db79ffb3030b3cc207d0be8?s=128&d=identicon&r=PG
p559
sVuser_type
p560
Vregistered
p561
sVreputation
p562
I234805
sVlink
p563
Vhttp://stackoverflow.com/users/28804/mipadi
p564
sVaccept_rate
p565
I75
sVdisplay_name
p566
Vmipadi
p567
ssVis_accepted
p568
I01
sVlast_edit_date
p569
I1422567219
sVanswer_id
p570
I1271914
sa(dp571
Vbody
p572
V<blockquote>\u000a  <p>Increment a python floating point\u000a  value by the smallest possible amount</p>\u000a</blockquote>\u000a\u000a<p>You are not crazy and you should be able to do this. It is a current shortcoming of the Python math library, sadly, both in Python 2.X and Python3000. There should be a <code>math.nextafter(x,y)</code> in Python but there isn't. It would be trivial to add since most C compilers have the functions. </p>\u000a\u000a<p>The <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/nextafter.3.html" rel="noreferrer">nextafter(x,y)</a> functions return the next discretely different representable floating-point value following x in the direction of y. The nextafter() functions are guaranteed to work on the platform or to return a sensible value to indicate that the next value is not possible. </p>\u000a\u000a<p>The <code>nextafter()</code> functions are part of <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/nextafter.html#" rel="noreferrer">POSIX</a> and ISO <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf" rel="noreferrer">C99</a> standards and is <a href="http://www.johndcook.com/math_h.html" rel="noreferrer">_nextafter() in Visual C</a>. C99 compliant standard math libraries, Visual C, C++, Boost and Java all implement the IEEE recommended nextafter() functions or methods. (I do not honestly know if .NET has nextafter(). Microsoft does not care much about C99 or POSIX.)</p>\u000a\u000a<p>Since Python seems to be heading in the direction of supporting most C99 math functions and behaviors for the math module, the exclusion of <code>nextafter()</code> is curious. Luckily there are easy workarounds. </p>\u000a\u000a<p><strong>None</strong> of the bit twiddling functions here fully or correctly deal with the edge cases, such as values going though 0.0, negative 0.0, subnormals, infinities, negative values, over or underflows, etc. <a href="http://opensource.apple.com/source/Libm/Libm-40.2/ppc.subproj/nextafter.c" rel="noreferrer">Here is a reference implementation of nextafter() in C</a> to give an idea of how to do the correct bit twiddling if that is your direction. </p>\u000a\u000a<p>There are two solid work arounds to get <code>nextafter()</code> or other excluded POSIX math functions in Python:</p>\u000a\u000a<p><strong>Use Numpy:</strong></p>\u000a\u000a<pre><code>&gt;&gt;&gt; import numpy\u000a&gt;&gt;&gt; numpy.nextafter(0,1)\u000a4.9406564584124654e-324\u000a&gt;&gt;&gt; numpy.nextafter(.1, 1)\u000a0.10000000000000002\u000a&gt;&gt;&gt; numpy.nextafter(1e6, -1)\u000a999999.99999999988\u000a&gt;&gt;&gt; numpy.nextafter(-.1, 1)\u000a-0.099999999999999992\u000a</code></pre>\u000a\u000a<p><strong>Link directly to the system math DLL:</strong></p>\u000a\u000a<pre><code>import ctypes\u000aimport sys\u000afrom sys import platform as _platform\u000a\u000aif _platform == "linux" or _platform == "linux2":\u000a    _libm = ctypes.cdll.LoadLibrary('libm.so.6')\u000a    _funcname = 'nextafter'\u000aelif _platform == "darwin":\u000a    _libm = ctypes.cdll.LoadLibrary('libSystem.dylib')\u000a    _funcname = 'nextafter'\u000aelif _platform == "win32":\u000a    _libm = ctypes.cdll.LoadLibrary('msvcrt.dll')\u000a    _funcname = '_nextafter'\u000aelse:\u000a    # these are the ones I have access to...\u000a    # fill in library and function name for your system math dll\u000a    print "Platform", repr(_platform), "is not supported"\u000a    sys.exit(0)\u000a\u000a_nextafter = getattr(_libm, _funcname)\u000a_nextafter.restype = ctypes.c_double\u000a_nextafter.argtypes = [ctypes.c_double, ctypes.c_double]\u000a\u000adef nextafter(x, y):\u000a    "Returns the next floating-point number after x in the direction of y."\u000a    return _nextafter(x, y)\u000a\u000aassert nextafter(0, 1) - nextafter(0, 1) == 0\u000aassert 0.0 + nextafter(0, 1) &gt; 0.0\u000a</code></pre>\u000a\u000a<p><strong>And if you really really want a pure Python solution:</strong></p>\u000a\u000a<pre><code># handles edge cases correctly on MY computer \u000a# not extensively QA'd...\u000aimport math\u000a# 'double' means IEEE 754 double precision -- c 'double'\u000aepsilon  = math.ldexp(1.0, -53) # smallest double that 0.5+epsilon != 0.5\u000amaxDouble = float(2**1024 - 2**971)  # From the IEEE 754 standard\u000aminDouble  = math.ldexp(1.0, -1022) # min positive normalized double\u000asmallEpsilon  = math.ldexp(1.0, -1074) # smallest increment for doubles &lt; minFloat\u000ainfinity = math.ldexp(1.0, 1023) * 2\u000a\u000adef nextafter(x,y):    \u000a    """returns the next IEEE double after x in the direction of y if possible"""\u000a    if y==x:\u000a       return y         #if x==y, no increment\u000a\u000a    # handle NaN\u000a    if x!=x or y!=y:\u000a        return x + y       \u000a\u000a    if x &gt;= infinity:\u000a        return infinity\u000a\u000a    if x &lt;= -infinity:\u000a        return -infinity\u000a\u000a    if -minDouble &lt; x &lt; minDouble:\u000a        if y &gt; x:\u000a            return x + smallEpsilon\u000a        else:\u000a            return x - smallEpsilon  \u000a\u000a    m, e = math.frexp(x)        \u000a    if y &gt; x:\u000a        m += epsilon\u000a    else:\u000a        m -= epsilon\u000a\u000a    return math.ldexp(m,e)\u000a</code></pre>\u000a\u000a<p>Or, use <a href="http://stackoverflow.com/users/270986/mark-dickinson">Mark Dickinson's</a> excellent <a href="http://stackoverflow.com/a/10426033/648852">solution</a> </p>\u000a\u000a<p>Obviously the <a href="http://numpy.scipy.org/" rel="noreferrer">Numpy</a> solution is the easiest. </p>\u000a
p573
sVquestion_id
p574
I6063755
sVlast_activity_date
p575
I1421602458
sVcreation_date
p576
I1306602933
sVscore
p577
I66
sVowner
p578
(dp579
Vdisplay_name
p580
Vuser648852
p581
sVuser_type
p582
Vdoes_not_exist
p583
ssVis_accepted
p584
I01
sVlast_edit_date
p585
I1421602458
sVanswer_id
p586
I6163157
sa(dp587
Vbody
p588
V<p><code>params</code> is for GET-style URL parameters, <code>data</code> is for POST-style body information. It is perfectly legal to provide <em>both</em> types of information in a request, and your request does so too, but you encoded the URL parameters into the URL already.</p>\u000a\u000a<p>Your raw post contains <em>JSON</em> data though, you better use the <code>json</code> module to properly encode that:</p>\u000a\u000a<pre><code>import json\u000a\u000adata = {"eventType": "AAS_PORTAL_START", "data": {"uid": "hfe3hf45huf33545", "aid": "1", "vid": "1"}}\u000adata = json.dumps(data)\u000a</code></pre>\u000a\u000a<p>You could split out the URL parameters too:</p>\u000a\u000a<pre><code>params = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}\u000a</code></pre>\u000a\u000a<p>Then post this with:</p>\u000a\u000a<pre><code>import requests\u000aimport json\u000a\u000aheaders = {'content-type': 'application/json'}\u000aurl = 'http://192.168.3.45:8080/api/v2/event/log'\u000a\u000adata = {"eventType": "AAS_PORTAL_START", "data": {"uid": "hfe3hf45huf33545", "aid": "1", "vid": "1"}}\u000aparams = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}\u000a\u000arequests.post(url, params=params, data=json.dumps(data), headers=headers)\u000a</code></pre>\u000a\u000a<p>If you are using <code>requests</code> version 2.4.2 or newer, you can have the library do the JSON encoding for you; it'll set the correct Content-Header too; all you need to do is pass in the Python object to be encoded as JSON into the <code>json</code> keyword argument:</p>\u000a\u000a<pre><code>import requests\u000a\u000aurl = 'http://192.168.3.45:8080/api/v2/event/log'\u000a\u000adata = {"eventType": "AAS_PORTAL_START", "data": {"uid": "hfe3hf45huf33545", "aid": "1", "vid": "1"}}\u000aparams = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}\u000a\u000arequests.post(url, params=params, json=data)\u000a</code></pre>\u000a
p589
sVquestion_id
p590
I15900338
sVlast_activity_date
p591
I1417919305
sVcreation_date
p592
I1365506360
sVscore
p593
I96
sVowner
p594
(dp595
Vuser_id
p596
I100297
sVprofile_image
p597
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p598
sVuser_type
p599
Vmoderator
p600
sVreputation
p601
I554897
sVlink
p602
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p603
sVdisplay_name
p604
VMartijn Pieters
p605
ssVis_accepted
p606
I01
sVlast_edit_date
p607
I1417919305
sVanswer_id
p608
I15900453
sa(dp609
Vbody
p610
V<p>Worked for me after installing scipy.</p>\u000a
p611
sVquestion_id
p612
I15274696
sVlast_activity_date
p613
I1412766206
sVcreation_date
p614
I1412766206
sVscore
p615
I64
sVowner
p616
(dp617
Vuser_id
p618
I2185714
sVprofile_image
p619
Vhttps://www.gravatar.com/avatar/355c7f590c7bd8e8fd53b8fca3622a64?s=128&d=identicon&r=PG
p620
sVuser_type
p621
Vregistered
p622
sVreputation
p623
I793
sVlink
p624
Vhttp://stackoverflow.com/users/2185714/sawan
p625
sVdisplay_name
p626
VSawan
p627
ssVis_accepted
p628
I01
sVanswer_id
p629
I26255358
sa(dp630
Vbody
p631
V<p>Look <a href="https://groups.google.com/forum/#!topic/cython-users/CwtU_jYADgM" rel="noreferrer">here</a> for an answer.</p>\u000a\u000a<p>The basic idea is that you want <code>cpython.array.array</code> and <code>cpython.array.clone</code> (<strong>not</strong> <code>cython.array.*</code>):</p>\u000a\u000a<pre><code>from cpython.array cimport array, clone\u000a\u000a# This type is what you want and can be cast to things of\u000a# the "double[:]" syntax, so no problems there\u000acdef array[double] armv, templatemv\u000a\u000atemplatemv = array('d')\u000a\u000a# This is fast\u000aarmv = clone(templatemv, L, False)\u000a</code></pre>\u000a\u000a<p><strong>EDIT</strong></p>\u000a\u000a<p>It turns out that the benchmarks in that thread were rubbish. Here's my set, with my timings:</p>\u000a\u000a<pre><code># cython: language_level=3\u000a# cython: boundscheck=False\u000a# cython: wraparound=False\u000a\u000aimport time\u000aimport sys\u000a\u000afrom cpython.array cimport array, clone\u000afrom cython.view cimport array as cvarray\u000afrom libc.stdlib cimport malloc, free\u000aimport numpy as numpy\u000acimport numpy as numpy\u000a\u000acdef int loops\u000a\u000adef timefunc(name):\u000a    def timedecorator(f):\u000a        cdef int L, i\u000a\u000a        print("Running", name)\u000a        for L in [1, 10, 100, 1000, 10000, 100000, 1000000]:\u000a            start = time.clock()\u000a            f(L)\u000a            end = time.clock()\u000a            print(format((end-start) / loops * 1e6, "2f"), end=" ")\u000a            sys.stdout.flush()\u000a\u000a        print("\u03bcs")\u000a    return timedecorator\u000a\u000aprint()\u000aprint("INITIALISATIONS")\u000aloops = 100000\u000a\u000a@timefunc("cpython.array buffer")\u000adef _(int L):\u000a    cdef int i\u000a    cdef array[double] arr, template = array('d')\u000a\u000a    for i in range(loops):\u000a        arr = clone(template, L, False)\u000a\u000a    # Prevents dead code elimination\u000a    str(arr[0])\u000a\u000a@timefunc("cpython.array memoryview")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double[::1] arr\u000a    cdef array template = array('d')\u000a\u000a    for i in range(loops):\u000a        arr = clone(template, L, False)\u000a\u000a    # Prevents dead code elimination\u000a    str(arr[0])\u000a\u000a@timefunc("cpython.array raw C type")\u000adef _(int L):\u000a    cdef int i\u000a    cdef array arr, template = array('d')\u000a\u000a    for i in range(loops):\u000a        arr = clone(template, L, False)\u000a\u000a    # Prevents dead code elimination\u000a    str(arr[0])\u000a\u000a@timefunc("numpy.empty_like memoryview")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double[::1] arr\u000a    template = numpy.empty((L,), dtype='double')\u000a\u000a    for i in range(loops):\u000a        arr = numpy.empty_like(template)\u000a\u000a    # Prevents dead code elimination\u000a    str(arr[0])\u000a\u000a@timefunc("malloc")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double* arrptr\u000a\u000a    for i in range(loops):\u000a        arrptr = &lt;double*&gt; malloc(sizeof(double) * L)\u000a        free(arrptr)\u000a\u000a    # Prevents dead code elimination\u000a    str(arrptr[0])\u000a\u000a@timefunc("malloc memoryview")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double* arrptr\u000a    cdef double[::1] arr\u000a\u000a    for i in range(loops):\u000a        arrptr = &lt;double*&gt; malloc(sizeof(double) * L)\u000a        arr = &lt;double[:L]&gt;arrptr\u000a        free(arrptr)\u000a\u000a    # Prevents dead code elimination\u000a    str(arr[0])\u000a\u000a@timefunc("cvarray memoryview")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double[::1] arr\u000a\u000a    for i in range(loops):\u000a        arr = cvarray((L,),sizeof(double),'d')\u000a\u000a    # Prevents dead code elimination\u000a    str(arr[0])\u000a\u000a\u000a\u000aprint()\u000aprint("ITERATING")\u000aloops = 1000\u000a\u000a@timefunc("cpython.array buffer")\u000adef _(int L):\u000a    cdef int i\u000a    cdef array[double] arr = clone(array('d'), L, False)\u000a\u000a    cdef double d\u000a    for i in range(loops):\u000a        for i in range(L):\u000a            d = arr[i]\u000a\u000a    # Prevents dead-code elimination\u000a    str(d)\u000a\u000a@timefunc("cpython.array memoryview")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double[::1] arr = clone(array('d'), L, False)\u000a\u000a    cdef double d\u000a    for i in range(loops):\u000a        for i in range(L):\u000a            d = arr[i]\u000a\u000a    # Prevents dead-code elimination\u000a    str(d)\u000a\u000a@timefunc("cpython.array raw C type")\u000adef _(int L):\u000a    cdef int i\u000a    cdef array arr = clone(array('d'), L, False)\u000a\u000a    cdef double d\u000a    for i in range(loops):\u000a        for i in range(L):\u000a            d = arr[i]\u000a\u000a    # Prevents dead-code elimination\u000a    str(d)\u000a\u000a@timefunc("numpy.empty_like memoryview")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double[::1] arr = numpy.empty((L,), dtype='double')\u000a\u000a    cdef double d\u000a    for i in range(loops):\u000a        for i in range(L):\u000a            d = arr[i]\u000a\u000a    # Prevents dead-code elimination\u000a    str(d)\u000a\u000a@timefunc("malloc")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double* arrptr = &lt;double*&gt; malloc(sizeof(double) * L)\u000a\u000a    cdef double d\u000a    for i in range(loops):\u000a        for i in range(L):\u000a            d = arrptr[i]\u000a\u000a    free(arrptr)\u000a\u000a    # Prevents dead-code elimination\u000a    str(d)\u000a\u000a@timefunc("malloc memoryview")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double* arrptr = &lt;double*&gt; malloc(sizeof(double) * L)\u000a    cdef double[::1] arr = &lt;double[:L]&gt;arrptr\u000a\u000a    cdef double d\u000a    for i in range(loops):\u000a        for i in range(L):\u000a            d = arr[i]\u000a\u000a    free(arrptr)\u000a\u000a    # Prevents dead-code elimination\u000a    str(d)\u000a\u000a@timefunc("cvarray memoryview")\u000adef _(int L):\u000a    cdef int i\u000a    cdef double[::1] arr = cvarray((L,),sizeof(double),'d')\u000a\u000a    cdef double d\u000a    for i in range(loops):\u000a        for i in range(L):\u000a            d = arr[i]\u000a\u000a    # Prevents dead-code elimination\u000a    str(d)\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre><code>INITIALISATIONS\u000aRunning cpython.array buffer\u000a0.100040 0.097140 0.133110 0.121820 0.131630 0.108420 0.112160 \u03bcs\u000aRunning cpython.array memoryview\u000a0.339480 0.333240 0.378790 0.445720 0.449800 0.414280 0.414060 \u03bcs\u000aRunning cpython.array raw C type\u000a0.048270 0.049250 0.069770 0.074140 0.076300 0.060980 0.060270 \u03bcs\u000aRunning numpy.empty_like memoryview\u000a1.006200 1.012160 1.128540 1.212350 1.250270 1.235710 1.241050 \u03bcs\u000aRunning malloc\u000a0.021850 0.022430 0.037240 0.046260 0.039570 0.043690 0.030720 \u03bcs\u000aRunning malloc memoryview\u000a1.640200 1.648000 1.681310 1.769610 1.755540 1.804950 1.758150 \u03bcs\u000aRunning cvarray memoryview\u000a1.332330 1.353910 1.358160 1.481150 1.517690 1.485600 1.490790 \u03bcs\u000a\u000aITERATING\u000aRunning cpython.array buffer\u000a0.010000 0.027000 0.091000 0.669000 6.314000 64.389000 635.171000 \u03bcs\u000aRunning cpython.array memoryview\u000a0.013000 0.015000 0.058000 0.354000 3.186000 33.062000 338.300000 \u03bcs\u000aRunning cpython.array raw C type\u000a0.014000 0.146000 0.979000 9.501000 94.160000 916.073000 9287.079000 \u03bcs\u000aRunning numpy.empty_like memoryview\u000a0.042000 0.020000 0.057000 0.352000 3.193000 34.474000 333.089000 \u03bcs\u000aRunning malloc\u000a0.002000 0.004000 0.064000 0.367000 3.599000 32.712000 323.858000 \u03bcs\u000aRunning malloc memoryview\u000a0.019000 0.032000 0.070000 0.356000 3.194000 32.100000 327.929000 \u03bcs\u000aRunning cvarray memoryview\u000a0.014000 0.026000 0.063000 0.351000 3.209000 32.013000 327.890000 \u03bcs\u000a</code></pre>\u000a\u000a<p>(The reason for the "iterations" benchmark is that some methods have surprisingly different characteristics in this respect.)</p>\u000a\u000a<p>In order of initialisation speed:</p>\u000a\u000a<p><code>malloc</code>: This is a harsh world, but it's fast. If you need to to allocate a lot of things and have unhindered iteration and indexing performance, this has to be it. But normally you're a good bet for...</p>\u000a\u000a<p><code>cpython.array raw C type</code>: Well damn, it's fast. And it's safe. Unfortunately it goes through Python to access its data fields. You can avoid that by using a wonderful trick:</p>\u000a\u000a<pre><code>arr.data.as_doubles[i]\u000a</code></pre>\u000a\u000a<p>which brings it up to the standard speed while removing safety! This makes this a <em>wonderful</em> replacement for <code>malloc</code>, being basically a pretty reference-counted version!</p>\u000a\u000a<p><code>cpython.array buffer</code>: Coming in at only three to four times the setup time of <code>malloc</code>, this is looks a wonderful bet. Unfortunately it has significant overhead (albeit small compared to the <code>boundscheck</code> and <code>wraparound</code> directives). That means it only really competes against full-safety variants, but it <em>is</em> the fastest of those to initialise. Your choice.</p>\u000a\u000a<p><code>cpython.array memoryview</code>: This is now an order of magnitude slower than <code>malloc</code> to initialise. That's a shame, but it iterates just as fast. This is the standard solution that I would suggest unless <code>boundscheck</code> or <code>wraparound</code> are on (in which case <code>cpython.array buffer</code> might be a more compelling tradeoff).</p>\u000a\u000a<p>The rest. The only one worth anything is <code>numpy</code>'s, due to the many fun methods attached to the objects. That's it, though.</p>\u000a
p632
sVquestion_id
p633
I18462785
sVlast_activity_date
p634
I1410058273
sVcreation_date
p635
I1389387882
sVscore
p636
I51
sVowner
p637
(dp638
Vuser_id
p639
I1763356
sVprofile_image
p640
Vhttps://i.stack.imgur.com/zGWG9.png?s=128&g=1
p641
sVuser_type
p642
Vregistered
p643
sVreputation
p644
I31547
sVlink
p645
Vhttp://stackoverflow.com/users/1763356/veedrac
p646
sVaccept_rate
p647
I79
sVdisplay_name
p648
VVeedrac
p649
ssVis_accepted
p650
I01
sVlast_edit_date
p651
I1410058273
sVanswer_id
p652
I21054369
sa(dp653
Vbody
p654
V<p>You could use ol' good <code>easy_install zipline</code> instead.</p>\u000a\u000a<p><code>easy_install</code> isn't pip but one good aspect of it is the ability to download and install binary packages too, which would free you for the need having VC++ ready. This of course relies of the assumption that the binaries were prepared for your Python version.</p>\u000a\u000a<p>UPDATE:</p>\u000a\u000a<p>Yes, Pip can install binaries now!</p>\u000a\u000a<p>There's a new binary Python archive format (<a href="http://pythonwheels.com/">wheel</a>) that is supposed to replace "eggs". Wheels are already supported by <code>pip</code>. This means you'll be able to install <code>zipline</code> with <code>pip</code> without compiling it as soon as someone builds the wheel for your platform and uploads it to PyPI.</p>\u000a
p655
sVquestion_id
p656
I19830942
sVlast_activity_date
p657
I1403164588
sVcreation_date
p658
I1383813963
sVscore
p659
I23
sVowner
p660
(dp661
Vuser_id
p662
I399317
sVprofile_image
p663
Vhttps://www.gravatar.com/avatar/28235d26ee007743c9d2150759d29139?s=128&d=identicon&r=PG
p664
sVuser_type
p665
Vregistered
p666
sVreputation
p667
I42262
sVlink
p668
Vhttp://stackoverflow.com/users/399317/kos
p669
sVaccept_rate
p670
I77
sVdisplay_name
p671
VKos
p672
ssVis_accepted
p673
I01
sVlast_edit_date
p674
I1403164588
sVanswer_id
p675
I19831360
sa(dp676
Vbody
p677
V<p>It's very simple. Use numpy slicing.</p>\u000a\u000a<pre><code>import cv2\u000aimg = cv2.imread("lenna.png")\u000acrop_img = img[200:400, 100:300] # Crop from x, y, w, h -&gt; 100, 200, 300, 400\u000a# NOTE: its img[y: y + h, x: x + w] and *not* img[x: x + w, y: y + h]\u000acv2.imshow("cropped", crop_img)\u000acv2.waitKey(0)\u000a</code></pre>\u000a
p678
sVquestion_id
p679
I15589517
sVlast_activity_date
p680
I1393683882
sVcreation_date
p681
I1364059618
sVscore
p682
I127
sVowner
p683
(dp684
Vuser_id
p685
I891373
sVprofile_image
p686
Vhttps://www.gravatar.com/avatar/e49081f9c8f64cd6617efda90398a2a1?s=128&d=identicon&r=PG
p687
sVuser_type
p688
Vregistered
p689
sVreputation
p690
I6055
sVlink
p691
Vhttp://stackoverflow.com/users/891373/froyo
p692
sVaccept_rate
p693
I81
sVdisplay_name
p694
VFroyo
p695
ssVis_accepted
p696
I01
sVlast_edit_date
p697
I1393683882
sVanswer_id
p698
I15589825
sa(dp699
Vbody
p700
V<p>Use <a href="http://docs.python.org/2/library/itertools.html#itertools.chain" rel="noreferrer"><code>itertools.chain</code></a>:</p>\u000a\u000a<pre><code>from itertools import chain\u000afor line in chain(file1, file2):\u000a   pass\u000a</code></pre>\u000a\u000a<p><a href="http://docs.python.org/2/library/fileinput.html#fileinput.input" rel="noreferrer"><code>fileinput</code></a> module also provides a similar feature:</p>\u000a\u000a<pre><code>import fileinput\u000afor line in fileinput.input(['file1', 'file2']):\u000a   pass\u000a</code></pre>\u000a
p701
sVquestion_id
p702
I21825984
sVlast_activity_date
p703
I1392631555
sVcreation_date
p704
I1392631555
sVscore
p705
I88
sVowner
p706
(dp707
Vuser_id
p708
I846892
sVprofile_image
p709
Vhttps://i.stack.imgur.com/E9dZn.png?s=128&g=1
p710
sVuser_type
p711
Vregistered
p712
sVreputation
p713
I142521
sVlink
p714
Vhttp://stackoverflow.com/users/846892/ashwini-chaudhary
p715
sVaccept_rate
p716
I88
sVdisplay_name
p717
VAshwini Chaudhary
p718
ssVis_accepted
p719
I01
sVanswer_id
p720
I21826012
sa(dp721
Vbody
p722
V<p><code>DateTime</code> doesn't have a default key as an input. The default key should be an input to the <code>Column</code> function. Try this:</p>\u000a\u000a<pre><code>import datetime\u000afrom sqlalchemy import Column, Integer, DateTime\u000afrom sqlalchemy.ext.declarative import declarative_base\u000a\u000aBase = declarative_base()\u000a\u000aclass Test(Base):\u000a    __tablename__ = 'test'\u000a\u000a    id = Column(Integer, primary_key=True)\u000a    created_date = Column(DateTime, default=datetime.datetime.utcnow)\u000a</code></pre>\u000a
p723
sVquestion_id
p724
I13370317
sVlast_activity_date
p725
I1390261440
sVcreation_date
p726
I1352847689
sVscore
p727
I67
sVowner
p728
(dp729
Vuser_id
p730
I544198
sVprofile_image
p731
Vhttps://www.gravatar.com/avatar/fdc52692a8ac266cd1c897f75a0f75f8?s=128&d=identicon&r=PG
p732
sVuser_type
p733
Vregistered
p734
sVreputation
p735
I24923
sVlink
p736
Vhttp://stackoverflow.com/users/544198/pearsonartphoto
p737
sVaccept_rate
p738
I90
sVdisplay_name
p739
VPearsonArtPhoto
p740
ssVis_accepted
p741
I01
sVlast_edit_date
p742
I1390261440
sVanswer_id
p743
I13370382
sa(dp744
Vbody
p745
V<p>I recommend using the django-extensions project like stated above by dongweiming. But instead of just 'shell_plus' management command, use:</p>\u000a\u000a<pre><code>manage.py shell_plus --notebook\u000a</code></pre>\u000a\u000a<p>This will open a IPython notebook on your web browser. Write your code there in a cell, your imports etc. and run it. </p>\u000a\u000a<p>When you change your modules, just click the notebook menu item 'Kernel->Restart'</p>\u000a\u000a<p>There you go, your code is now using your modified modules.</p>\u000a
p746
sVquestion_id
p747
I3772260
sVlast_activity_date
p748
I1386748527
sVcreation_date
p749
I1386748527
sVscore
p750
I19
sVowner
p751
(dp752
Vuser_id
p753
I1173397
sVprofile_image
p754
Vhttps://www.gravatar.com/avatar/ee6a6fba91b82e8854335c79a318dd25?s=128&d=identicon&r=PG
p755
sVuser_type
p756
Vregistered
p757
sVreputation
p758
I2454
sVlink
p759
Vhttp://stackoverflow.com/users/1173397/mpaf
p760
sVaccept_rate
p761
I71
sVdisplay_name
p762
Vmpaf
p763
ssVis_accepted
p764
I01
sVanswer_id
p765
I20513519
sa(dp766
Vbody
p767
V<p>I think you're a little confused. PYTHONPATH sets the search path for <strong>importing</strong> python modules, not for executing them like you're trying.</p>\u000a\u000a<blockquote>\u000a  <p>PYTHONPATH Augment the default search path for module files. The\u000a  format is the same as the shell\u2019s PATH: one or more directory\u000a  pathnames separated by os.pathsep (e.g. colons on Unix or semicolons\u000a  on Windows). Non-existent directories are silently ignored.</p>\u000a  \u000a  <p>In addition to normal directories, individual PYTHONPATH entries may\u000a  refer to zipfiles containing pure Python modules (in either source or\u000a  compiled form). Extension modules cannot be imported from zipfiles.</p>\u000a  \u000a  <p>The default search path is installation dependent, but generally\u000a  begins with prefix/lib/pythonversion (see PYTHONHOME above). It is\u000a  always appended to PYTHONPATH.</p>\u000a  \u000a  <p>An additional directory will be inserted in the search path in front\u000a  of PYTHONPATH as described above under Interface options. The search\u000a  path can be manipulated from within a Python program as the variable\u000a  sys.path.</p>\u000a</blockquote>\u000a\u000a<p><a href="http://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH" rel="noreferrer">http://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH</a></p>\u000a\u000a<p>What you're looking for is PATH. </p>\u000a\u000a<pre><code>export PATH=$PATH:/home/randy/lib/python \u000a</code></pre>\u000a\u000a<p>However, to run your python script as a program, you also need to set a <a href="http://en.wikipedia.org/wiki/Shebang_%28Unix%29" rel="noreferrer">shebang</a> for Python in the first line. Something like this should work:</p>\u000a\u000a<pre><code>#!/usr/bin/env python\u000a</code></pre>\u000a\u000a<p>And give execution privileges to it:</p>\u000a\u000a<pre><code>chmod +x /home/randy/lib/python/gbmx.py\u000a</code></pre>\u000a\u000a<p>Then you should be able to simply run <code>gmbx.py</code> from anywhere.</p>\u000a
p768
sVquestion_id
p769
I19917492
sVlast_activity_date
p770
I1384210617
sVcreation_date
p771
I1384210275
sVscore
p772
I67
sVowner
p773
(dp774
Vuser_id
p775
I1202421
sVprofile_image
p776
Vhttps://i.stack.imgur.com/wIvbn.jpg?s=128&g=1
p777
sVuser_type
p778
Vregistered
p779
sVreputation
p780
I20043
sVlink
p781
Vhttp://stackoverflow.com/users/1202421/pedro-werneck
p782
sVaccept_rate
p783
I82
sVdisplay_name
p784
VPedro Werneck
p785
ssVis_accepted
p786
I01
sVlast_edit_date
p787
I1384210617
sVanswer_id
p788
I19917565
sa(dp789
Vbody
p790
V<p>Setting <code>stdout</code> is a reasonable way to do it.  Another is to run it as another process:</p>\u000a\u000a<pre><code>import subprocess\u000a\u000aproc = subprocess.Popen(["python", "-c", "import writer; writer.write()"], stdout=subprocess.PIPE)\u000aout = proc.communicate()[0]\u000aprint out.upper()\u000a</code></pre>\u000a
p791
sVquestion_id
p792
I5136611
sVlast_activity_date
p793
I1382410759
sVcreation_date
p794
I1298847759
sVscore
p795
I36
sVowner
p796
(dp797
Vuser_id
p798
I47773
sVprofile_image
p799
Vhttps://www.gravatar.com/avatar/e72946d7c81ee170b322f6e6abae3442?s=128&d=identicon&r=PG
p800
sVuser_type
p801
Vregistered
p802
sVreputation
p803
I188293
sVlink
p804
Vhttp://stackoverflow.com/users/47773/matthew-flaschen
p805
sVaccept_rate
p806
I52
sVdisplay_name
p807
VMatthew Flaschen
p808
ssVis_accepted
p809
I01
sVlast_edit_date
p810
I1382410759
sVanswer_id
p811
I5136686
sa(dp812
Vbody
p813
V<p>for the 4:13, and other standard formats(but if you don't know which one) use dateutil.parser.parse from <a href="http://niemeyer.net/python-dateutil" rel="noreferrer">python-dateutil</a></p>\u000a\u000a<p>For the first format(5hr34m56s), you should parse using regular expressions</p>\u000a\u000a<p>Here is re-based solution:</p>\u000a\u000a<pre><code>import re\u000afrom datetime import timedelta\u000a\u000a\u000aregex = re.compile(r'((?P&lt;hours&gt;\u005cd+?)hr)?((?P&lt;minutes&gt;\u005cd+?)m)?((?P&lt;seconds&gt;\u005cd+?)s)?')\u000a\u000a\u000adef parse_time(time_str):\u000a    parts = regex.match(time_str)\u000a    if not parts:\u000a        return\u000a    parts = parts.groupdict()\u000a    time_params = {}\u000a    for (name, param) in parts.iteritems():\u000a        if param:\u000a            time_params[name] = int(param)\u000a    return timedelta(**time_params)\u000a\u000a\u000a&gt;&gt;&gt; from parse_time import parse_time\u000a&gt;&gt;&gt; parse_time('12hr')\u000adatetime.timedelta(0, 43200)\u000a&gt;&gt;&gt; parse_time('12hr5m10s')\u000adatetime.timedelta(0, 43510)\u000a&gt;&gt;&gt; parse_time('12hr10s')\u000adatetime.timedelta(0, 43210)\u000a&gt;&gt;&gt; parse_time('10s')\u000adatetime.timedelta(0, 10)\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a
p814
sVquestion_id
p815
I4628122
sVlast_activity_date
p816
I1377772327
sVcreation_date
p817
I1294419985
sVscore
p818
I41
sVowner
p819
(dp820
Vuser_id
p821
I492048
sVprofile_image
p822
Vhttps://www.gravatar.com/avatar/964e67bb9b2dd2627d4d18073e174185?s=128&d=identicon&r=PG
p823
sVuser_type
p824
Vregistered
p825
sVreputation
p826
I3527
sVlink
p827
Vhttp://stackoverflow.com/users/492048/virhilo
p828
sVdisplay_name
p829
Vvirhilo
p830
ssVis_accepted
p831
I01
sVlast_edit_date
p832
I1377772327
sVanswer_id
p833
I4628148
sa(dp834
Vbody
p835
V<p>This is exactly what <a href="http://docs.python.org/3.3/library/functions.html#bytearray"><code>bytearray</code></a> is for:</p>\u000a\u000a<pre><code>newFileByteArray = bytearray(newFileBytes)\u000anewFile.write(newFileByteArray)\u000a</code></pre>\u000a\u000a<p>If you're using Python 3.x, you can use <code>bytes</code> instead (and probably ought to, as it signals your intention better). But in Python 2.x, that won't work, because <code>bytes</code> is just an alias for <code>str</code>. As usual, showing with the interactive interpreter is easier than explaining with text, so let me just do that.</p>\u000a\u000a<p>Python 3.x:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; bytearray(newFileBytes)\u000abytearray(b'{\u005cx03\u005cxff\u005cx00d')\u000a&gt;&gt;&gt; bytes(newFileBytes)\u000ab'{\u005cx03\u005cxff\u005cx00d'\u000a</code></pre>\u000a\u000a<p>Python 2.x:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; bytearray(newFileBytes)\u000abytearray(b'{\u005cx03\u005cxff\u005cx00d')\u000a&gt;&gt;&gt; bytes(newFileBytes)\u000a'[123, 3, 255, 0, 100]'\u000a</code></pre>\u000a
p836
sVquestion_id
p837
I18367007
sVlast_activity_date
p838
I1377116949
sVcreation_date
p839
I1377116949
sVscore
p840
I49
sVowner
p841
(dp842
Vuser_id
p843
I908494
sVprofile_image
p844
Vhttps://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG
p845
sVuser_type
p846
Vregistered
p847
sVreputation
p848
I178780
sVlink
p849
Vhttp://stackoverflow.com/users/908494/abarnert
p850
sVaccept_rate
p851
I25
sVdisplay_name
p852
Vabarnert
p853
ssVis_accepted
p854
I01
sVanswer_id
p855
I18367068
sa(dp856
Vbody
p857
V<p>If you're having problems with syntax, you could try an editor with syntax highlighting. Until you get the feel for a language, simple errors won't just pop out at you.</p>\u000a\u000a<p>The simplest form of debugging is just to insert some print statements. A more advanced (and extensible) way to do this would be to use the <a href="http://docs.python.org/library/logging.html#module-logging" rel="noreferrer">logging</a> module from the std lib.</p>\u000a\u000a<p>The interactive interpreter is a wonderful tool for working with python code, and <a href="http://ipython.org" rel="noreferrer">IPython</a> is a great improvement over the built-in REPL (Read Eval Print Loop).</p>\u000a\u000a<p>If you actually want to step through your code, the python debugger is called <a href="http://docs.python.org/library/pdb.html#module-pdb" rel="noreferrer">pdb</a>, which can be called from the command line, or embedded in your code.</p>\u000a\u000a<p>If you're used to a fully integrated IDE, I would recommend using Eclipse with pydev, and PyCharm has a great commercial offering, with autocomplete, quick access to docs, and numerous shortcuts, among many other interesting features.</p>\u000a
p858
sVquestion_id
p859
I299704
sVlast_activity_date
p860
I1374091196
sVcreation_date
p861
I1227034131
sVscore
p862
I33
sVowner
p863
(dp864
Vuser_id
p865
I32880
sVprofile_image
p866
Vhttps://www.gravatar.com/avatar/35b00dd652b316f6cd6bb5c12c5be999?s=128&d=identicon&r=PG
p867
sVuser_type
p868
Vregistered
p869
sVreputation
p870
I45773
sVlink
p871
Vhttp://stackoverflow.com/users/32880/jimb
p872
sVaccept_rate
p873
I75
sVdisplay_name
p874
VJimB
p875
ssVis_accepted
p876
I01
sVlast_edit_date
p877
I1374091196
sVanswer_id
p878
I299737
sa(dp879
Vbody
p880
V<p>After trying everything, Yowsup library worked for me. The bug that I was facing was recently fixed. Anyone trying to do something with Whatsapp should try it.</p>\u000a
p881
sVquestion_id
p882
I17135496
sVlast_activity_date
p883
I1372101517
sVcreation_date
p884
I1372101517
sVscore
p885
I26
sVowner
p886
(dp887
Vuser_id
p888
I1675959
sVprofile_image
p889
Vhttps://www.gravatar.com/avatar/7785614352aeb64f4849f7a3835394b3?s=128&d=identicon&r=PG
p890
sVuser_type
p891
Vregistered
p892
sVreputation
p893
I544
sVlink
p894
Vhttp://stackoverflow.com/users/1675959/rishi
p895
sVaccept_rate
p896
I69
sVdisplay_name
p897
Vrishi
p898
ssVis_accepted
p899
I01
sVanswer_id
p900
I17283356
sa(dp901
Vbody
p902
V<blockquote>\u000a  <p>I actually want to know the difference between a model class that\u000a  inherits from a django abstract class (Meta: abstract = True) and a\u000a  plain Python class that inherits from say, 'object' (and not\u000a  models.Model).</p>\u000a</blockquote>\u000a\u000a<p>Django will only generate tables for subclasses of <code>models.Model</code>, so the former...</p>\u000a\u000a<pre><code>class User(models.Model):\u000a   first_name = models.CharField(max_length=255)\u000a\u000a   def get_username(self):\u000a       return self.username\u000a\u000a   class Meta:\u000a       abstract = True\u000a\u000aclass Employee(User):\u000a   title = models.CharField(max_length=255)\u000a</code></pre>\u000a\u000a<p>...will cause a single table to be generated, along the lines of...</p>\u000a\u000a<pre><code>CREATE TABLE myapp_employee\u000a(\u000a    id         INT          NOT NULL AUTO_INCREMENT,\u000a    first_name VARCHAR(255) NOT NULL,\u000a    title      VARCHAR(255) NOT NULL,\u000a    PRIMARY KEY (id)\u000a);\u000a</code></pre>\u000a\u000a<p>...whereas the latter...</p>\u000a\u000a<pre><code>class User(object):\u000a   first_name = models.CharField(max_length=255)\u000a\u000a   def get_username(self):\u000a       return self.username\u000a\u000aclass Employee(User):\u000a   title = models.CharField(max_length=255)\u000a</code></pre>\u000a\u000a<p>...won't cause any tables to be generated. </p>\u000a\u000a<p>You could use multiple inheritance to do something like this...</p>\u000a\u000a<pre><code>class User(object):\u000a   first_name = models.CharField(max_length=255)\u000a\u000a   def get_username(self):\u000a       return self.username\u000a\u000aclass Employee(User, models.Model):\u000a   title = models.CharField(max_length=255)\u000a</code></pre>\u000a\u000a<p>...which would create a table, but it will ignore the fields defined in the <code>User</code> class, so you'll end up with a table like this...</p>\u000a\u000a<pre><code>CREATE TABLE myapp_employee\u000a(\u000a    id         INT          NOT NULL AUTO_INCREMENT,\u000a    title      VARCHAR(255) NOT NULL,\u000a    PRIMARY KEY (id)\u000a);\u000a</code></pre>\u000a
p903
sVquestion_id
p904
I16655097
sVlast_activity_date
p905
I1369923594
sVcreation_date
p906
I1369923594
sVscore
p907
I78
sVowner
p908
(dp909
Vuser_id
p910
I172176
sVprofile_image
p911
Vhttps://www.gravatar.com/avatar/53ea9ceaca555fc33de2069b747554e5?s=128&d=identicon&r=PG
p912
sVuser_type
p913
Vregistered
p914
sVreputation
p915
I21602
sVlink
p916
Vhttp://stackoverflow.com/users/172176/aya
p917
sVdisplay_name
p918
VAya
p919
ssVis_accepted
p920
I01
sVanswer_id
p921
I16838663
sa(dp922
Vbody
p923
V<p>You can use <code>return</code> once in a generator; it stops iteration without yielding anything, and thus provides an explicit alternative to letting the function run out of scope. So use <code>yield</code> to turn the function into a generator, but precede it with <code>return</code> to terminate the generator before yielding anything.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def f():\u000a...     return\u000a...     yield\u000a... \u000a&gt;&gt;&gt; list(f())\u000a[]\u000a</code></pre>\u000a\u000a<p>I'm not sure it's that much better than what you have -- it just replaces a no-op <code>if</code> statement with a no-op <code>yield</code> statement. But I suppose it is more idiomatic. Note that just using <code>yield</code> doesn't work.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def f():\u000a...     yield\u000a... \u000a&gt;&gt;&gt; list(f())\u000a[None]\u000a</code></pre>\u000a
p924
sVquestion_id
p925
I13243766
sVlast_activity_date
p926
I1369830049
sVcreation_date
p927
I1352172164
sVscore
p928
I65
sVowner
p929
(dp930
Vuser_id
p931
I577088
sVprofile_image
p932
Vhttps://i.stack.imgur.com/5UZyo.jpg?s=128&g=1
p933
sVuser_type
p934
Vregistered
p935
sVreputation
p936
I67900
sVlink
p937
Vhttp://stackoverflow.com/users/577088/senderle
p938
sVdisplay_name
p939
Vsenderle
p940
ssVis_accepted
p941
I01
sVlast_edit_date
p942
I1369830049
sVanswer_id
p943
I13243870
sa(dp944
Vbody
p945
V<p>Assuming you are using Python 3.x:</p>\u000a\u000a<pre><code>print(*myList, sep='\u005cn')\u000a</code></pre>\u000a\u000a<p>You can get the same behavior on Python 2.x using <code>from __future__ import print_function</code>, as noted by mgilson in comments.</p>\u000a\u000a<p>With the print statement on Python 2.x you will need iteration of some kind, regarding your question about <code>print(p) for p in myList</code> not working, you can just use the following which does the same thing and is still one line:</p>\u000a\u000a<pre><code>for p in myList: print p\u000a</code></pre>\u000a\u000a<p>For a solution that uses <code>'\u005cn'.join()</code>, I prefer list comprehensions and generators over <code>map()</code> so I would probably use the following:</p>\u000a\u000a<pre><code>print '\u005cn'.join(str(p) for p in myList) \u000a</code></pre>\u000a
p946
sVquestion_id
p947
I15769246
sVlast_activity_date
p948
I1364920830
sVcreation_date
p949
I1364920063
sVscore
p950
I96
sVowner
p951
(dp952
Vuser_id
p953
I505154
sVprofile_image
p954
Vhttps://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=128&d=identicon&r=PG
p955
sVuser_type
p956
Vregistered
p957
sVreputation
p958
I114239
sVlink
p959
Vhttp://stackoverflow.com/users/505154/andrew-clark
p960
sVaccept_rate
p961
I100
sVdisplay_name
p962
VAndrew Clark
p963
ssVis_accepted
p964
I01
sVlast_edit_date
p965
I1364920830
sVanswer_id
p966
I15769313
sa(dp967
Vbody
p968
V<p>Sorry for posting to such an old thread -- but as someone who also shares a passion for pythonic 'best', I thought I'd share our solution.</p>\u000a\u000a<p>The solution is to build SQL statements using python's String Literal Concatenation (<a href="http://docs.python.org/reference/lexical_analysis.html#string-literal-concatenation">http://docs.python.org/</a>), which could be qualified a somewhere between Option 2 and Option 4</p>\u000a\u000a<p>Code Sample:</p>\u000a\u000a<pre><code>sql = ('select field1, field2, field3, field4 '\u000a       'from table '\u000a       'where condition1=1 '\u000a       'and condition2=2 ')\u000a</code></pre>\u000a\u000a<h3>Pros:</h3>\u000a\u000a<ol>\u000a<li>It retains the pythonic 'well tabulated' format, but does not add extraneous space characters (which pollutes logging). </li>\u000a<li>It avoids the backslash continuation ugliness of Option 4, which makes it difficult to add statements (not to mention white-space blindness).</li>\u000a<li>And further, it's really simple to expand the statement in VIM (just position the cursor to the insert point, and press <em>SHIFT-O</em> to open a new line).</li>\u000a</ol>\u000a
p969
sVquestion_id
p970
I5243596
sVlast_activity_date
p971
I1363990656
sVcreation_date
p972
I1330098140
sVscore
p973
I64
sVowner
p974
(dp975
Vuser_id
p976
I590028
sVprofile_image
p977
Vhttps://www.gravatar.com/avatar/43c6ce77252e438b40b96f5c68cf3432?s=128&d=identicon&r=PG
p978
sVuser_type
p979
Vregistered
p980
sVreputation
p981
I6577
sVlink
p982
Vhttp://stackoverflow.com/users/590028/user590028
p983
sVaccept_rate
p984
I90
sVdisplay_name
p985
Vuser590028
p986
ssVis_accepted
p987
I01
sVlast_edit_date
p988
I1363990656
sVanswer_id
p989
I9433548
sa(dp990
Vbody
p991
V<p>You have a few marginally related questions here.</p>\u000a\u000a<p>I'll start with the easiest: (3). Using <code>logging</code> you can aggregate all calls to a single log file or other output target: they will be in the order they occurred in the process.</p>\u000a\u000a<p>Next up: (2). <code>locals()</code> provides a dict of the current scope. Thus, in a method that has no other arguments, you have <code>self</code> in scope, which contains a reference to the current instance. The trick being used that is stumping you is the string formatting using a dict as the RHS of the <code>%</code> operator. <code>"%(foo)s" % bar</code> will be replaced by whatever the value of <code>bar["foo"]</code> is.</p>\u000a\u000a<p>Finally, you can use some introspection tricks, similar to those used by <code>pdb</code> that can log more info:</p>\u000a\u000a<pre><code>def autolog(message):\u000a    "Automatically log the current function details."\u000a    import inspect, logging\u000a    # Get the previous frame in the stack, otherwise it would\u000a    # be this function!!!\u000a    func = inspect.currentframe().f_back.f_code\u000a    # Dump the message + the name of this function to the log.\u000a    logging.debug("%s: %s in %s:%i" % (\u000a        message, \u000a        func.co_name, \u000a        func.co_filename, \u000a        func.co_firstlineno\u000a    ))\u000a</code></pre>\u000a\u000a<p>This will log the message passed in, plus the (original) function name, the filename in which the definition appears, and the line in that file. Have a look at <a href="http://docs.python.org/library/inspect.html" rel="noreferrer">inspect - Inspect live objects</a> for more details.</p>\u000a\u000a<p>As I mentioned in my comment earlier, you can also drop into a <code>pdb</code> interactive debugging prompt at any time by inserting the line <code>import pdb; pdb.set_trace()</code> in, and re-running your program. This enables you to step through the code, inspecting data as you choose.</p>\u000a
p992
sVquestion_id
p993
I10973362
sVlast_activity_date
p994
I1363575408
sVcreation_date
p995
I1339388969
sVscore
p996
I20
sVowner
p997
(dp998
Vuser_id
p999
I188
sVprofile_image
p1000
Vhttps://www.gravatar.com/avatar/833bfbcc9940cfcf0af6def751c23b05?s=128&d=identicon&r=PG
p1001
sVuser_type
p1002
Vregistered
p1003
sVreputation
p1004
I22569
sVlink
p1005
Vhttp://stackoverflow.com/users/188/matthew-schinckel
p1006
sVaccept_rate
p1007
I100
sVdisplay_name
p1008
VMatthew Schinckel
p1009
ssVis_accepted
p1010
I01
sVlast_edit_date
p1011
I1363575408
sVanswer_id
p1012
I10974508
sa(dp1013
Vbody
p1014
V<p>The <code>pop</code> method of dicts (like <code>self.data</code>, i.e. <code>{'a':'aaa','b':'bbb','c':'ccc'}</code>, here) takes two arguments -- see <a href="http://docs.python.org/library/stdtypes.html?highlight=dict.pop#dict.pop" rel="noreferrer">the docs</a></p>\u000a\u000a<p>The second argument, <code>default</code>, is what <code>pop</code> returns if the first argument, <code>key</code>, is absent.\u000a(If you call <code>pop</code> with just one argument, <code>key</code>, it raises an exception if that key's absent).</p>\u000a\u000a<p>In your example, <code>print b.pop('a',{'b':'bbb'})</code>, this is irrelevant because <code>'a'</code> <em>is</em> a key in <code>b.data</code>. But if you repeat that line...:</p>\u000a\u000a<pre><code>b=a()\u000aprint b.pop('a',{'b':'bbb'})\u000aprint b.pop('a',{'b':'bbb'})\u000aprint b.data\u000a</code></pre>\u000a\u000a<p>you'll see it makes a difference: the first <code>pop</code> removes the <code>'a'</code> key, so in the second <code>pop</code> the <code>default</code> argument is actually returned (since <code>'a'</code> is now absent from <code>b.data</code>).</p>\u000a
p1015
sVquestion_id
p1016
I1990802
sVlast_activity_date
p1017
I1363275869
sVcreation_date
p1018
I1262414991
sVscore
p1019
I67
sVowner
p1020
(dp1021
Vuser_id
p1022
I95810
sVprofile_image
p1023
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1024
sVuser_type
p1025
Vregistered
p1026
sVreputation
p1027
I516089
sVlink
p1028
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1029
sVaccept_rate
p1030
I80
sVdisplay_name
p1031
VAlex Martelli
p1032
ssVis_accepted
p1033
I01
sVlast_edit_date
p1034
I1363275869
sVanswer_id
p1035
I1990818
sa(dp1036
Vbody
p1037
V<p>You can simply set figure <code>f1</code> as the new current figure with:</p>\u000a\u000a<pre><code>pl.figure(f1.number)\u000a</code></pre>\u000a\u000a<p>Another option is to give names (or numbers) to figures, which might help make the code easier to read:</p>\u000a\u000a<pre><code>pl.figure("Share values")\u000a# ... some plots ...\u000apl.figure("Profits")\u000a# ... some plots ...\u000a\u000apl.figure("Share values")  # Selects the first figure again\u000a</code></pre>\u000a\u000a<p>In fact, figure "numbers" can be strings, which are arguably more explicit that simple numbers.</p>\u000a\u000a<p><strong>PS</strong>: The pyplot equivalent of <code>pylab.figure()</code> is <code>matplotlib.pyplot.figure()</code>.</p>\u000a
p1038
sVquestion_id
p1039
I7986567
sVlast_activity_date
p1040
I1362297628
sVcreation_date
p1041
I1320268794
sVscore
p1042
I45
sVowner
p1043
(dp1044
Vuser_id
p1045
I42973
sVprofile_image
p1046
Vhttps://www.gravatar.com/avatar/e1e331c88fcddfe245f4be299389270d?s=128&d=identicon&r=PG
p1047
sVuser_type
p1048
Vregistered
p1049
sVreputation
p1050
I43633
sVlink
p1051
Vhttp://stackoverflow.com/users/42973/eol
p1052
sVaccept_rate
p1053
I87
sVdisplay_name
p1054
VEOL
p1055
ssVis_accepted
p1056
I01
sVlast_edit_date
p1057
I1362297628
sVanswer_id
p1058
I7987462
sa(dp1059
Vbody
p1060
V<p>If you already have the figure object use:</p>\u000a\u000a<pre><code>f.set_figheight(15)\u000af.set_figwidth(15)\u000a</code></pre>\u000a\u000a<p>But if you use the .subplots() command (as in the examples you're showing) to create a new figure you can also use:</p>\u000a\u000a<pre><code>f, axs = plt.subplots(2,2,figsize=(15,15))\u000a</code></pre>\u000a
p1061
sVquestion_id
p1062
I14770735
sVlast_activity_date
p1063
I1360320483
sVcreation_date
p1064
I1360320483
sVscore
p1065
I97
sVowner
p1066
(dp1067
Vuser_id
p1068
I1755432
sVprofile_image
p1069
Vhttps://www.gravatar.com/avatar/6d648f8f0e0f6d9c7f4e347369000eb8?s=128&d=identicon&r=PG
p1070
sVuser_type
p1071
Vregistered
p1072
sVreputation
p1073
I18162
sVlink
p1074
Vhttp://stackoverflow.com/users/1755432/rutger-kassies
p1075
sVaccept_rate
p1076
I83
sVdisplay_name
p1077
VRutger Kassies
p1078
ssVis_accepted
p1079
I01
sVanswer_id
p1080
I14770827
sa(dp1081
Vbody
p1082
V<p>The best way is to interact with the <code>axes</code> object directly</p>\u000a\u000a<pre><code>import numpy as np\u000aimport matplotlib.pyplot as plt\u000ax = np.arange(0, 10, 0.1)\u000ay1 = 0.05 * x**2\u000ay2 = -1 *y1\u000a\u000afig, ax1 = plt.subplots()\u000a\u000aax2 = ax1.twinx()\u000aax1.plot(x, y1, 'g-')\u000aax2.plot(x, y2, 'b-')\u000a\u000aax1.set_xlabel('X data')\u000aax1.set_ylabel('Y1 data', color='g')\u000aax2.set_ylabel('Y2 data', color='b')\u000a\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/K7727.png" alt="example graph"></p>\u000a
p1083
sVquestion_id
p1084
I14762181
sVlast_activity_date
p1085
I1360277534
sVcreation_date
p1086
I1360277534
sVscore
p1087
I84
sVowner
p1088
(dp1089
Vuser_id
p1090
I1552748
sVprofile_image
p1091
Vhttps://www.gravatar.com/avatar/7840b7a3579d2a7065d5c0aa804b5b92?s=128&d=identicon&r=PG
p1092
sVuser_type
p1093
Vregistered
p1094
sVreputation
p1095
I18934
sVlink
p1096
Vhttp://stackoverflow.com/users/1552748/paul-h
p1097
sVaccept_rate
p1098
I92
sVdisplay_name
p1099
VPaul H
p1100
ssVis_accepted
p1101
I01
sVanswer_id
p1102
I14762601
sa(dp1103
Vbody
p1104
V<p>I know one of the 3 better than the others, but in the order given in the question:</p>\u000a\u000a<p>rpy2: </p>\u000a\u000a<ul>\u000a<li>C-level interface between Python and R (R running as an embedded process)</li>\u000a<li>R objects exposed to Python without the need to copy the data over</li>\u000a<li>Conversely, Python's numpy arrays can be exposed to R without making a copy</li>\u000a<li>Low-level interface (close to the R C-API) and high-level interface (for convenience)</li>\u000a<li>In-place modification for vectors and arrays possible</li>\u000a<li>R callback functions can be implemented in Python</li>\u000a<li>Possible to have anonymous R objects with a Python label</li>\u000a<li>Python pickling possible</li>\u000a<li>Full customization of R's behavior with its console (so possible to implement a full R GUI)</li>\u000a<li>MSWindows with limited support</li>\u000a</ul>\u000a\u000a<p>pyrserve:</p>\u000a\u000a<ul>\u000a<li>native Python code (will/should/may work with CPython, Jython, IronPython)</li>\u000a<li>use R's Rserve</li>\u000a<li>advantages and inconveniences linked to remote computation and to RServe</li>\u000a</ul>\u000a\u000a<p>pyper:</p>\u000a\u000a<ul>\u000a<li>native Python code (will/should/may work with CPython, Jython, IronPython) </li>\u000a<li>use of pipes to have Python communicate with R (with the advantages and inconveniences linked to it)</li>\u000a</ul>\u000a\u000a<p><em>edit:</em> Windows support for rpy2</p>\u000a
p1105
sVquestion_id
p1106
I5630441
sVlast_activity_date
p1107
I1343117004
sVcreation_date
p1108
I1302657557
sVscore
p1109
I32
sVowner
p1110
(dp1111
Vuser_id
p1112
I294017
sVprofile_image
p1113
Vhttps://www.gravatar.com/avatar/8e5422a173711c086b685140dbc498fe?s=128&d=identicon&r=PG
p1114
sVuser_type
p1115
Vregistered
p1116
sVreputation
p1117
I7414
sVlink
p1118
Vhttp://stackoverflow.com/users/294017/lgautier
p1119
sVaccept_rate
p1120
I67
sVdisplay_name
p1121
Vlgautier
p1122
ssVis_accepted
p1123
I01
sVlast_edit_date
p1124
I1343117004
sVanswer_id
p1125
I5643423
sa(dp1126
Vbody
p1127
V<p>Maybe there is a better way, but how about:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import glob\u000a&gt;&gt;&gt; types = ('*.pdf', '*.cpp') # the tuple of file types\u000a&gt;&gt;&gt; files_grabbed = []\u000a&gt;&gt;&gt; for files in types:\u000a...     files_grabbed.extend(glob.glob(files))\u000a... \u000a&gt;&gt;&gt; files_grabbed   # the list of pdf and cpp files\u000a</code></pre>\u000a\u000a<p>Perhaps there is another way, so wait in case someone else comes up with a better answer.</p>\u000a
p1128
sVquestion_id
p1129
I4568580
sVlast_activity_date
p1130
I1342974758
sVcreation_date
p1131
I1293778421
sVscore
p1132
I62
sVowner
p1133
(dp1134
Vuser_id
p1135
I225312
sVprofile_image
p1136
Vhttps://www.gravatar.com/avatar/98be1fca8529611a09e77da800faa817?s=128&d=identicon&r=PG
p1137
sVuser_type
p1138
Vregistered
p1139
sVreputation
p1140
I46012
sVlink
p1141
Vhttp://stackoverflow.com/users/225312/user225312
p1142
sVaccept_rate
p1143
I94
sVdisplay_name
p1144
Vuser225312
p1145
ssVis_accepted
p1146
I01
sVlast_edit_date
p1147
I1342974758
sVanswer_id
p1148
I4568638
sa(dp1149
Vbody
p1150
V<p>No. Regular expressions in Python are handled by the <a href="http://docs.python.org/library/re.html" rel="noreferrer"><code>re</code></a> module.</p>\u000a\u000a<pre><code>article = re.sub(r'(?is)&lt;/html&gt;.+', '&lt;/html&gt;', article)\u000a</code></pre>\u000a
p1151
sVquestion_id
p1152
I11475885
sVlast_activity_date
p1153
I1342206536
sVcreation_date
p1154
I1342202704
sVscore
p1155
I79
sVowner
p1156
(dp1157
Vuser_id
p1158
I20862
sVprofile_image
p1159
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p1160
sVuser_type
p1161
Vregistered
p1162
sVreputation
p1163
I481018
sVlink
p1164
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p1165
sVaccept_rate
p1166
I60
sVdisplay_name
p1167
VIgnacio Vazquez-Abrams
p1168
ssVis_accepted
p1169
I01
sVlast_edit_date
p1170
I1342206536
sVanswer_id
p1171
I11475905
sa(dp1172
Vbody
p1173
V<p>Jython doesn't compile to "pure java", it compiles to <em>java bytecode</em> - ie, to <code>*.class</code> files. To develop for Android, one further compiles java bytecode to Dalvik bytecode. This means that, yes, Jython <em>can</em> let you use Python for developing Android, subject to you getting it to play nice with the Android SDK (I haven't personally tried this, so I don't know how hard it actually is) - you <em>do</em> need to make sure you don't depend on any Java APIs that Android doesn't provide, and <em>might</em> need to have some of the Android API <code>.class</code> files around when you run jython. Aside from these niggles, your core idea should work - Jython does, indeed, let write code in Python that interacts with anything else that runs on the JVM.</p>\u000a
p1174
sVquestion_id
p1175
I11120130
sVlast_activity_date
p1176
I1340203441
sVcreation_date
p1177
I1340203441
sVscore
p1178
I36
sVowner
p1179
(dp1180
Vuser_id
p1181
I779200
sVprofile_image
p1182
Vhttps://www.gravatar.com/avatar/5b39b49e078967924f816af14a536994?s=128&d=identicon&r=PG
p1183
sVuser_type
p1184
Vregistered
p1185
sVreputation
p1186
I20088
sVlink
p1187
Vhttp://stackoverflow.com/users/779200/lvc
p1188
sVaccept_rate
p1189
I88
sVdisplay_name
p1190
Vlvc
p1191
ssVis_accepted
p1192
I01
sVanswer_id
p1193
I11122066
sa(dp1194
Vbody
p1195
V<pre><code>&gt;&gt;&gt; fruits = "['apple', 'orange', 'banana']"\u000a&gt;&gt;&gt; import ast\u000a&gt;&gt;&gt; fruits = ast.literal_eval(fruits)\u000a&gt;&gt;&gt; fruits\u000a['apple', 'orange', 'banana']\u000a&gt;&gt;&gt; fruits[1]\u000a'orange'\u000a</code></pre>\u000a\u000a<p>As pointed out in the comments <a href="http://docs.python.org/library/ast.html">ast.literal_eval</a> is <strong>safe</strong>. From the docs:</p>\u000a\u000a<blockquote>\u000a  <p>Safely evaluate an expression node or a string containing a Python\u000a  expression. The string or node provided may only consist of the\u000a  following Python literal structures: strings, numbers, tuples, lists,\u000a  dicts, booleans, and None.</p>\u000a  \u000a  <p>This can be used for safely evaluating strings containing Python\u000a  expressions from untrusted sources without the need to parse the\u000a  values oneself.</p>\u000a</blockquote>\u000a
p1196
sVquestion_id
p1197
I10775894
sVlast_activity_date
p1198
I1338140660
sVcreation_date
p1199
I1338139733
sVscore
p1200
I61
sVowner
p1201
(dp1202
Vuser_id
p1203
I1175101
sVprofile_image
p1204
Vhttps://www.gravatar.com/avatar/574a1e69c572acc1f946a4ebea5f7037?s=128&d=identicon&r=PG
p1205
sVuser_type
p1206
Vregistered
p1207
sVreputation
p1208
I21318
sVlink
p1209
Vhttp://stackoverflow.com/users/1175101/fraxel
p1210
sVaccept_rate
p1211
I82
sVdisplay_name
p1212
Vfraxel
p1213
ssVis_accepted
p1214
I01
sVlast_edit_date
p1215
I1338140660
sVanswer_id
p1216
I10775909
sa(dp1217
Vbody
p1218
V<p>PyPy's translation process is actually much less conceptually recursive than it sounds.</p>\u000a\u000a<p>Really all it is is a Python program that processes Python function/class/other objects (<strong>not</strong> Python source code) and outputs C code. But of course it doesn't process just <strong>any</strong> Python objects; it can only handle particular forms, which are what you get if you write your to-be-translated code in RPython.</p>\u000a\u000a<p>Since the translation toolchain is a Python program, you can run it on top of any Python interpreter, which obviously includes PyPy's python interpreter. So that's nothing special.</p>\u000a\u000a<p>Since it translates RPython objects, you can use it to translate PyPy's python interpreter, which is written in RPython.</p>\u000a\u000a<p>But you can't run it on the translation framework itself, which is <strong>not</strong> RPython. Only PyPy's python interpreter itself is RPython.</p>\u000a\u000a<p>Things only get interesting because RPython code is also Python code (but not the reverse), and because RPython doesn't ever "really exist" in source files, but only in memory inside a working Python process that necessarily includes other non-RPython code (there are no "pure-RPython" imports or function definitions, for example, because the translator operates on functions that have <em>already</em> been defined and imported).</p>\u000a\u000a<p>Remember that the translation toolchain operates on in-memory Python code objects. Python's execution model means that these <em>don't exist before some Python code has been running</em>. You can imagine that starting the translation process looks a bit like this, if you highly simplify it:</p>\u000a\u000a<pre><code>from my_interpreter import main\u000afrom pypy import translate\u000a\u000atranslate(main)\u000a</code></pre>\u000a\u000a<p>As we all know, just importing <code>main</code> is going to run lots of Python code, including all the other modules <code>my_interpreter</code> imports. But the translation process starts analysing the <em>function object</em> <code>main</code>; it never sees, and doesn't care about, whatever code was executed to come up with <code>main</code>.</p>\u000a\u000a<p>One way to think of this is that "programming in RPython" means "writing a Python program which generates an RPython program and then feeds it to the translation process". That's relatively easy to understand and is kind of similar to how many other compilers work (e.g. one way to think of programming in C is that you are essentially writing a C pre-processor program that generates a C program, which is then fed to the C compiler).</p>\u000a\u000a<p>Things only get confusing in the PyPy case because all 3 components (the Python program which generates the RPython program, the RPython program, and the translation process) are loaded into <strong>the same Python interpreter</strong>. This means it's quite possible to have functions that are RPython when called with some arguments and not when called with other arguments, to call helper functions from the translation framework as part of generating your RPython program, and lots of other weird things. So the situation gets rather blurry around the edges, and you can't necessarily divide your source lines cleanly into "RPython to be translated", "Python generating my RPython program" and "handing the RPython program over to the translation framework".</p>\u000a\u000a<hr>\u000a\u000a<blockquote>\u000a  <p>The PyPy interpreter, running on top of CPython, executes to partially\u000a  interpret itself</p>\u000a</blockquote>\u000a\u000a<p>What I think you're alluding to here is PyPy's use of the <a href="http://codespeak.net/pypy/dist/pypy/doc/objspace.html#the-flow-object-space" rel="noreferrer">the flow object space</a> during translation, to do abstract interpretation. Even this isn't as crazy and mind-bending as it seems at first. I'm much less informed about this part of PyPy, but as I understand it:</p>\u000a\u000a<p>PyPy implements all of the operations of a Python interpreter by delegating them to an "object space", which contains an implementation of all the basic built in operations. But you can plug in different object spaces to get different effects, and so long as they implement the same "object space" interface the interpreter will still be able to "execute" Python code.</p>\u000a\u000a<p>The RPython code objects that the PyPy translation toolchain processes is Python code that could be executed by an interpreter. So PyPy re-uses part of their Python interpreter as part of the translation tool-chain, by plugging in the flow object space. When "executing" code with this object space, the interpreter doesn't actually carry out the operations of the code, it instead produces flow graphs, which are analogous to the sorts of intermediate representation used by many other compilers; it's just a simple machine-manipulable representation of the code, to be further processed. This is how regular (R)Python code objects get turned into the input for the rest of the translation process.</p>\u000a\u000a<p>Since the usual thing that is translated with the translation process is PyPy's Python interpreter, it indeed "interprets itself" with the flow object space. But all that really means is that you have a Python program that is processing Python functions, including the ones doing the processing. In itself it isn't any more mind-bending than applying a decorator to itself, or having a wrapper-class wrap an instance of itself (or wrap the class itself).</p>\u000a\u000a<hr>\u000a\u000a<p>Um, that got a bit rambly. I hope it helps, anyway, and I hope I haven't said anything inaccurate; please correct me if I have.</p>\u000a
p1219
sVquestion_id
p1220
I8452396
sVlast_activity_date
p1221
I1330906922
sVcreation_date
p1222
I1324346058
sVscore
p1223
I67
sVowner
p1224
(dp1225
Vuser_id
p1226
I450128
sVprofile_image
p1227
Vhttps://www.gravatar.com/avatar/2f72b3fdc99fe9fd1bbeb2f9da1d2c0a?s=128&d=identicon&r=PG
p1228
sVuser_type
p1229
Vregistered
p1230
sVreputation
p1231
I37733
sVlink
p1232
Vhttp://stackoverflow.com/users/450128/ben
p1233
sVaccept_rate
p1234
I65
sVdisplay_name
p1235
VBen
p1236
ssVis_accepted
p1237
I01
sVlast_edit_date
p1238
I1330906922
sVanswer_id
p1239
I8569919
sa(dp1240
Vbody
p1241
V<p>I've discovered that py2exe works just fine if I comment out the part of my program that uses wxPython. Also, when I use py2exe on the 'simple' sample that comes with its download (i.e. in Python26\u005cLib\u005csite-packages\u005cpy2exe\u005csamples\u005csimple), I get this error message:</p>\u000a\u000a<pre><code>*** finding dlls needed ***\u000aerror: MSVCP90.dll: No such file or directory\u000a</code></pre>\u000a\u000a<p>So something about wxPython makes py2exe think I need a Visual Studio 2008 DLL. I don't have VS2008, and yet my program works perfectly well as a directory of Python modules. I  found a copy of MSVCP90.DLL on the web, installed it in Python26/DLLs, and py2exe now works fine.  </p>\u000a\u000a<p>I still don't understand where this dependency has come from, since I can run my code perfectly okay without py2exe. It's also annoying that py2exe didn't give me an error message like it did with the test_wx.py sample.</p>\u000a\u000a<p>Further update: When I tried to run the output from py2exe on another PC, I discovered that it needed to have MSVCR90.DLL installed; so if your target PC hasn't got Visual C++ 2008 already installed, I recommend you download and install the <a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=29" rel="noreferrer">Microsoft Visual C++ 2008 Redistributable Package</a>.</p>\u000a
p1242
sVquestion_id
p1243
I323424
sVlast_activity_date
p1244
I1324243612
sVcreation_date
p1245
I1227868616
sVscore
p1246
I35
sVowner
p1247
(dp1248
Vuser_id
p1249
I11677
sVprofile_image
p1250
Vhttps://i.stack.imgur.com/jSSjL.jpg?s=128&g=1
p1251
sVuser_type
p1252
Vregistered
p1253
sVreputation
p1254
I5937
sVlink
p1255
Vhttp://stackoverflow.com/users/11677/charles-anderson
p1256
sVaccept_rate
p1257
I94
sVdisplay_name
p1258
VCharles Anderson
p1259
ssVis_accepted
p1260
I01
sVlast_edit_date
p1261
I1324243612
sVanswer_id
p1262
I325456
sa(dp1263
Vbody
p1264
V<pre><code>&gt;&gt;&gt; my_list = ['this\u005cn', 'is\u005cn', 'a\u005cn', 'list\u005cn', 'of\u005cn', 'words\u005cn']\u000a&gt;&gt;&gt; map(str.strip, my_list)\u000a['this', 'is', 'a', 'list', 'of', 'words']\u000a</code></pre>\u000a
p1265
sVquestion_id
p1266
I7984169
sVlast_activity_date
p1267
I1320252758
sVcreation_date
p1268
I1320252758
sVscore
p1269
I99
sVowner
p1270
(dp1271
Vuser_id
p1272
I279627
sVprofile_image
p1273
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1274
sVuser_type
p1275
Vregistered
p1276
sVreputation
p1277
I252330
sVlink
p1278
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1279
sVaccept_rate
p1280
I78
sVdisplay_name
p1281
VSven Marnach
p1282
ssVis_accepted
p1283
I01
sVanswer_id
p1284
I7984192
sa(dp1285
Vbody
p1286
V<p>If you want to ignore lines with only whitespace:</p>\u000a\u000a<pre><code>if not line.strip():\u000a    ... do something\u000a</code></pre>\u000a\u000a<p>The empty string is a False value.</p>\u000a\u000a<p>Or if you really want only empty lines:</p>\u000a\u000a<pre><code>if line in ['\u005cn', '\u005cr\u005cn']:\u000a    ... do  something\u000a</code></pre>\u000a
p1287
sVquestion_id
p1288
I7896495
sVlast_activity_date
p1289
I1319581177
sVcreation_date
p1290
I1319581177
sVscore
p1291
I63
sVowner
p1292
(dp1293
Vuser_id
p1294
I100073
sVprofile_image
p1295
Vhttps://www.gravatar.com/avatar/1ef10621a85769f9554cd0cbf67be94e?s=128&d=identicon&r=PG
p1296
sVuser_type
p1297
Vregistered
p1298
sVreputation
p1299
I8047
sVlink
p1300
Vhttp://stackoverflow.com/users/100073/retracile
p1301
sVaccept_rate
p1302
I43
sVdisplay_name
p1303
Vretracile
p1304
ssVis_accepted
p1305
I01
sVanswer_id
p1306
I7896585
sa(dp1307
Vbody
p1308
V<p><a href="http://sourceforge.net/projects/numpy/files//NumPy/1.5.0/NOTES.txt/view" rel="noreferrer">Support for Python 3 was added in NumPy version 1.5.0</a>, so to begin with, you must download/install a newer version of NumPy.</p>\u000a
p1309
sVquestion_id
p1310
I7818811
sVlast_activity_date
p1311
I1319014690
sVcreation_date
p1312
I1319014690
sVscore
p1313
I16
sVowner
p1314
(dp1315
Vuser_id
p1316
I190597
sVprofile_image
p1317
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p1318
sVuser_type
p1319
Vregistered
p1320
sVreputation
p1321
I425294
sVlink
p1322
Vhttp://stackoverflow.com/users/190597/unutbu
p1323
sVaccept_rate
p1324
I88
sVdisplay_name
p1325
Vunutbu
p1326
ssVis_accepted
p1327
I01
sVanswer_id
p1328
I7818845
sa(dp1329
Vbody
p1330
V<p>A lot of it is personal preference. Using python modules, you do have the option to keep each class in a separate file and still allow for <code>import converters.SomeConverter</code> (or <code>from converters import SomeConverter</code>)</p>\u000a\u000a<p>Your file structure could look something like this:</p>\u000a\u000a<pre><code>* converters\u000a     - __init__.py\u000a     - baseconverter.py\u000a     - someconverter.py\u000a     - otherconverter.py\u000a</code></pre>\u000a\u000a<p>and then in your <code>__init__.py</code> file:</p>\u000a\u000a<pre><code>from baseconverter import BaseConverter\u000afrom otherconverter import OtherConverter\u000a</code></pre>\u000a
p1331
sVquestion_id
p1332
I3842616
sVlast_activity_date
p1333
I1317244723
sVcreation_date
p1334
I1285963627
sVscore
p1335
I49
sVowner
p1336
(dp1337
Vuser_id
p1338
I183304
sVprofile_image
p1339
Vhttps://www.gravatar.com/avatar/4da367970053ff57f1ed464e18358249?s=128&d=identicon&r=PG
p1340
sVuser_type
p1341
Vregistered
p1342
sVreputation
p1343
I7908
sVlink
p1344
Vhttp://stackoverflow.com/users/183304/zach
p1345
sVaccept_rate
p1346
I93
sVdisplay_name
p1347
VZach
p1348
ssVis_accepted
p1349
I01
sVlast_edit_date
p1350
I1317244723
sVanswer_id
p1351
I3842687
sa(dp1352
Vbody
p1353
V<p>Use <code>rpartition(s)</code>. It does exactly that.</p>\u000a\u000a<p>You can also use <code>rsplit(s, 1)</code>.</p>\u000a
p1354
sVquestion_id
p1355
I7351744
sVlast_activity_date
p1356
I1315501187
sVcreation_date
p1357
I1315501187
sVscore
p1358
I61
sVowner
p1359
(dp1360
Vuser_id
p1361
I791998
sVprofile_image
p1362
Vhttps://www.gravatar.com/avatar/a6704cf6e18d734f94d5988cf02fae45?s=128&d=identicon&r=PG
p1363
sVuser_type
p1364
Vregistered
p1365
sVreputation
p1366
I52302
sVlink
p1367
Vhttp://stackoverflow.com/users/791998/petar-ivanov
p1368
sVaccept_rate
p1369
I80
sVdisplay_name
p1370
VPetar Ivanov
p1371
ssVis_accepted
p1372
I01
sVanswer_id
p1373
I7351789
sa(dp1374
Vbody
p1375
V<p>For collections that implement the <a href="http://download.oracle.com/javase/7/docs/api/java/util/List.html"><code>List</code></a> interface, you can call the <a href="http://download.oracle.com/javase/7/docs/api/java/util/List.html#listIterator%28%29"><code>listIterator()</code></a> method to get a <a href="http://download.oracle.com/javase/7/docs/api/java/util/ListIterator.html"><code>ListIterator</code></a>. The iterator has (amongst others) two methods - <a href="http://download.oracle.com/javase/7/docs/api/java/util/ListIterator.html#nextIndex%28%29"><code>nextIndex()</code></a>, to get the index; and <a href="http://download.oracle.com/javase/7/docs/api/java/util/ListIterator.html#next%28%29"><code>next()</code></a>, to get the value (like other iterators).</p>\u000a\u000a<p>So a Java equivalent of the Python above might be:</p>\u000a\u000a<pre><code>List&lt;String&gt; numbers = Arrays.asList("zero", "one", "two");\u000aListIterator&lt;String&gt; it = numbers.listIterator();\u000awhile (it.hasNext()) {\u000a    System.out.println(it.nextIndex() + " " + it.next());\u000a}\u000a</code></pre>\u000a\u000a<p>which, like the Python, outputs:</p>\u000a\u000a<pre><code>0 zero\u000a1 one\u000a2 two\u000a</code></pre>\u000a
p1376
sVquestion_id
p1377
I7167253
sVlast_activity_date
p1378
I1314132516
sVcreation_date
p1379
I1314132087
sVscore
p1380
I44
sVowner
p1381
(dp1382
Vuser_id
p1383
I200609
sVprofile_image
p1384
Vhttps://i.stack.imgur.com/YSVRw.jpg?s=128&g=1
p1385
sVuser_type
p1386
Vregistered
p1387
sVreputation
p1388
I17752
sVlink
p1389
Vhttp://stackoverflow.com/users/200609/richard-fearn
p1390
sVaccept_rate
p1391
I25
sVdisplay_name
p1392
VRichard Fearn
p1393
ssVis_accepted
p1394
I01
sVlast_edit_date
p1395
I1314132516
sVanswer_id
p1396
I7167266
sa(dp1397
Vbody
p1398
V<p>I believe to reason lies with the <code>auto_now_add</code> field.</p>\u000a\u000a<p>From <a href="http://stackoverflow.com/questions/1737017/django-auto-now-and-auto-now-add/1737078#1737078">this answer</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Any field with the auto_now attribute\u000a  set will also inherit editable=False\u000a  and therefore will not show up in the\u000a  admin panel.</p>\u000a</blockquote>\u000a\u000a<p>Also mentioned in <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#datefield">the docs</a>:</p>\u000a\u000a<blockquote>\u000a  <p>As currently implemented, setting\u000a  auto_now or auto_now_add to True will\u000a  cause the field to have editable=False\u000a  and blank=True set.</p>\u000a</blockquote>\u000a\u000a<p>This does make sense, since there is no reason to have the field editable if it's going to be overwritten with the current datetime when the object is saved.</p>\u000a
p1399
sVquestion_id
p1400
I6386172
sVlast_activity_date
p1401
I1308316402
sVcreation_date
p1402
I1308316402
sVscore
p1403
I27
sVowner
p1404
(dp1405
Vuser_id
p1406
I115845
sVprofile_image
p1407
Vhttps://www.gravatar.com/avatar/6263f31d56de4b97575338214071f41d?s=128&d=identicon&r=PG
p1408
sVuser_type
p1409
Vregistered
p1410
sVreputation
p1411
I47416
sVlink
p1412
Vhttp://stackoverflow.com/users/115845/shawn-chin
p1413
sVaccept_rate
p1414
I70
sVdisplay_name
p1415
VShawn Chin
p1416
ssVis_accepted
p1417
I01
sVanswer_id
p1418
I6386240
sa(dp1419
Vbody
p1420
V<p>Try this</p>\u000a\u000a<pre><code>li = soup.find('li', {'class': 'text'})\u000achildren = li.findChildren()\u000afor child in children:\u000a    print child\u000a</code></pre>\u000a
p1421
sVquestion_id
p1422
I6287529
sVlast_activity_date
p1423
I1307587910
sVcreation_date
p1424
I1307587910
sVscore
p1425
I33
sVowner
p1426
(dp1427
Vuser_id
p1428
I121725
sVprofile_image
p1429
Vhttps://www.gravatar.com/avatar/149e29e5d24dde5c8ec5a146c4594348?s=128&d=identicon&r=PG
p1430
sVuser_type
p1431
Vregistered
p1432
sVreputation
p1433
I3458
sVlink
p1434
Vhttp://stackoverflow.com/users/121725/cerberos
p1435
sVaccept_rate
p1436
I100
sVdisplay_name
p1437
Vcerberos
p1438
ssVis_accepted
p1439
I01
sVanswer_id
p1440
I6287601
sa(dp1441
Vbody
p1442
V<p>I packaged Pennywise, which is available on the Mac App Store.  It's based on Virgil's moneyGuru, which uses Python, PyObjC, and py2app.</p>\u000a\u000a<p>You will have to follow <a href="http://developer.apple.com/devcenter/mac/documents/submitting.html" rel="noreferrer">Apple's process for preparing an application for submission to the Mac App Store</a>.  Most importantly, you will want to add the proper keys to your Info.plist, and remove any automatic updating mechanism, e.g. Sparkle.  It's not strictly required, but you will probably also want to <a href="http://developer.apple.com/devcenter/mac/documents/validating.html" rel="noreferrer">implement receipt checking</a>.  Using Xcode will make the submission process much easier.  You can look at <a href="https://bitbucket.org/hsoft/moneyguru" rel="noreferrer">the moneyGuru source code</a> for an example of how to use Xcode as the final part of the build process.</p>\u000a\u000a<p>Py2app embeds a copy of the Python framework in the bundle, so I don't know whether Apple would approve an application that only linked to the system framework.  While the primary binary can't support PPC, Apple does not seem to check the architectures of binaries in embedded frameworks.</p>\u000a\u000a<p>One final caveat: I wouldn't recommend this process for writing new applications.  Using Python, PyObjC, and py2app seriously complicates the build process and introduces additional dependencies.</p>\u000a
p1443
sVquestion_id
p1444
I4940273
sVlast_activity_date
p1445
I1304683618
sVcreation_date
p1446
I1297858831
sVscore
p1447
I55
sVowner
p1448
(dp1449
Vuser_id
p1450
I196079
sVprofile_image
p1451
Vhttps://www.gravatar.com/avatar/859b20b373bb7b3307931c55d9e79268?s=128&d=identicon&r=PG
p1452
sVuser_type
p1453
Vregistered
p1454
sVreputation
p1455
I3740
sVlink
p1456
Vhttp://stackoverflow.com/users/196079/lemnar
p1457
sVaccept_rate
p1458
I100
sVdisplay_name
p1459
Vlemnar
p1460
ssVis_accepted
p1461
I01
sVlast_edit_date
p1462
I1304683618
sVanswer_id
p1463
I5016342
sa(dp1464
Vbody
p1465
V<p>From <a href="http://docs.python.org/library/itertools.html">itertools</a> receipes:</p>\u000a\u000a<pre><code>from itertools import tee, izip\u000adef pairwise(iterable):\u000a    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."\u000a    a, b = tee(iterable)\u000a    next(b, None)\u000a    return izip(a, b)\u000a\u000afor v, w in pairwise(a):\u000a    ...\u000a</code></pre>\u000a
p1466
sVquestion_id
p1467
I5764782
sVlast_activity_date
p1468
I1303572285
sVcreation_date
p1469
I1303569525
sVscore
p1470
I60
sVowner
p1471
(dp1472
Vuser_id
p1473
I95612
sVprofile_image
p1474
Vhttps://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=128&d=identicon&r=PG
p1475
sVuser_type
p1476
Vregistered
p1477
sVreputation
p1478
I63439
sVlink
p1479
Vhttp://stackoverflow.com/users/95612/jochen-ritzel
p1480
sVaccept_rate
p1481
I80
sVdisplay_name
p1482
VJochen Ritzel
p1483
ssVis_accepted
p1484
I01
sVlast_edit_date
p1485
I1303572285
sVanswer_id
p1486
I5764807
sa(dp1487
Vbody
p1488
V<pre><code>&gt;&gt;&gt; a.argmax(axis=0)\u000a\u000aarray([1, 1, 0])\u000a</code></pre>\u000a
p1489
sVquestion_id
p1490
I5469286
sVlast_activity_date
p1491
I1301384383
sVcreation_date
p1492
I1301384383
sVscore
p1493
I71
sVowner
p1494
(dp1495
Vuser_id
p1496
I449449
sVprofile_image
p1497
Vhttps://www.gravatar.com/avatar/b52c27e86c87d931e654d6a2d2cdf974?s=128&d=identicon&r=PG
p1498
sVuser_type
p1499
Vregistered
p1500
sVreputation
p1501
I94835
sVlink
p1502
Vhttp://stackoverflow.com/users/449449/eumiro
p1503
sVaccept_rate
p1504
I100
sVdisplay_name
p1505
Veumiro
p1506
ssVis_accepted
p1507
I01
sVanswer_id
p1508
I5469326
sa(dp1509
Vbody
p1510
V<p><strong>Quick answer:</strong></p>\u000a\u000a<p>Doing <code>list()</code> around a generator expression is (almost) exactly equivalent to having  <code>[]</code> brackets around it. So yeah, you can do</p>\u000a\u000a<pre><code>&gt;&gt;&gt; list((x for x in string.letters if x in (y for y in "BigMan on campus")))\u000a</code></pre>\u000a\u000a<p>But you can just as well do</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [x for x in string.letters if x in (y for y in "BigMan on campus")]\u000a</code></pre>\u000a\u000a<p>Yes, that will turn the generator expression into a list comprehension. It's the same thing and calling list() on it. <em>So the way to make a generator expression into a list is to put brackets around it.</em></p>\u000a\u000a<p><strong>Detailed explanation:</strong></p>\u000a\u000a<p>A generator expression is a "naked" <code>for</code> expression. Like so:</p>\u000a\u000a<pre><code>x*x for x in range(10)\u000a</code></pre>\u000a\u000a<p>Now, you can't stick that on a line by itself, you'll get a syntax error. But you can put parenthesis around it.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; (x*x for x in range(10))\u000a&lt;generator object &lt;genexpr&gt; at 0xb7485464&gt;\u000a</code></pre>\u000a\u000a<p>This is sometimes called a generator comprehension, although I think the official name still is generator expression, there isn't really any difference, the parenthesis are only there to make the syntax valid. You do not need them if you are passing it in as the only parameter to a function for example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sorted(x*x for x in range(10))\u000a[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\u000a</code></pre>\u000a\u000a<p>Basically all the other comprehensions available in Python 3 and Python 2.7 is just syntactic sugar around a generator expression. Set comprehensions:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; {x*x for x in range(10)}\u000a{0, 1, 4, 81, 64, 9, 16, 49, 25, 36}\u000a\u000a&gt;&gt;&gt; set(x*x for x in range(10))\u000a{0, 1, 4, 81, 64, 9, 16, 49, 25, 36}\u000a</code></pre>\u000a\u000a<p>Dict comprehensions:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dict((x, x*x) for x in range(10))\u000a{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\u000a\u000a&gt;&gt;&gt; {x: x*x for x in range(10)}\u000a{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\u000a</code></pre>\u000a\u000a<p>And list comprehensions under Python 3:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; list(x*x for x in range(10))\u000a[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\u000a\u000a&gt;&gt;&gt; [x*x for x in range(10)]\u000a[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\u000a</code></pre>\u000a\u000a<p>Under Python 2, list comprehensions is not just syntactic sugar. But the only difference is that x will under Python 2 leak into the namespace.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x\u000a9\u000a</code></pre>\u000a\u000a<p>While under Python 3 you'll get </p>\u000a\u000a<pre><code>&gt;&gt;&gt; x\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aNameError: name 'x' is not defined\u000a</code></pre>\u000a\u000a<p>This means that the best way to get a nice printout of the content of your generator expression in Python is to make a list comprehension out of it! However, this will obviously not work if you already have a generator object. Doing that will just make a list of one generator:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; foo = (x*x for x in range(10))\u000a&gt;&gt;&gt; [foo]\u000a[&lt;generator object &lt;genexpr&gt; at 0xb7559504&gt;]\u000a</code></pre>\u000a\u000a<p>In that case you will need to call <code>list()</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; list(foo)\u000a[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\u000a</code></pre>\u000a\u000a<p>Although this works, but is kinda stupid:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [x for x in foo]\u000a[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\u000a</code></pre>\u000a
p1511
sVquestion_id
p1512
I5164642
sVlast_activity_date
p1513
I1299055737
sVcreation_date
p1514
I1299055737
sVscore
p1515
I78
sVowner
p1516
(dp1517
Vuser_id
p1518
I126214
sVprofile_image
p1519
Vhttps://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=128&d=identicon&r=PG
p1520
sVuser_type
p1521
Vregistered
p1522
sVreputation
p1523
I82828
sVlink
p1524
Vhttp://stackoverflow.com/users/126214/lennart-regebro
p1525
sVaccept_rate
p1526
I100
sVdisplay_name
p1527
VLennart Regebro
p1528
ssVis_accepted
p1529
I01
sVanswer_id
p1530
I5165222
sa(dp1531
Vbody
p1532
V<p>Appending data to an existing array is a natural thing to want to do for anyone with python experience.  However, if you find yourself regularly appending to large arrays, you'll quickly discover that NumPy doesn't easily or efficiently do this the way a python <code>list</code> will.  You'll find that every "append" action requires re-allocation of the array memory and short-term doubling of memory requirements.  So, the more general solution to the problem is to try to allocate arrays to be as large as the final output of your algorithm.  Then perform all your operations on sub-sets (<a href="http://docs.scipy.org/doc/numpy/user/basics.indexing.html#other-indexing-options" rel="noreferrer">slices</a>) of that array.  Array creation and destruction should ideally be minimized.</p>\u000a\u000a<p>That said, It's often unavoidable and the functions that do this are:</p>\u000a\u000a<p>for 2-D arrays:</p>\u000a\u000a<ul>\u000a<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html" rel="noreferrer">np.hstack</a> </li>\u000a<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html" rel="noreferrer">np.vstack</a></li>\u000a<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html" rel="noreferrer">np.column_stack</a></li>\u000a<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.row_stack.html" rel="noreferrer">np.row_stack</a></li>\u000a</ul>\u000a\u000a<p>for 3-D arrays (the above plus):</p>\u000a\u000a<ul>\u000a<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html" rel="noreferrer">np.dstack</a></li>\u000a</ul>\u000a\u000a<p>for N-D arrays:</p>\u000a\u000a<ul>\u000a<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html" rel="noreferrer">np.concatenate</a></li>\u000a</ul>\u000a
p1533
sVquestion_id
p1534
I5064822
sVlast_activity_date
p1535
I1298335285
sVcreation_date
p1536
I1298304222
sVscore
p1537
I93
sVowner
p1538
(dp1539
Vuser_id
p1540
I31676
sVprofile_image
p1541
Vhttps://www.gravatar.com/avatar/1e5e14a22b27a69b3d9fd5c7b05126d8?s=128&d=identicon&r=PG
p1542
sVuser_type
p1543
Vregistered
p1544
sVreputation
p1545
I21920
sVlink
p1546
Vhttp://stackoverflow.com/users/31676/paul
p1547
sVaccept_rate
p1548
I78
sVdisplay_name
p1549
VPaul
p1550
ssVis_accepted
p1551
I01
sVlast_edit_date
p1552
I1298335285
sVanswer_id
p1553
I5068182
sa(dp1554
Vbody
p1555
V<pre><code>d = {}\u000awith open("file.txt") as f:\u000a    for line in f:\u000a       (key, val) = line.split()\u000a       d[int(key)] = val\u000a</code></pre>\u000a
p1556
sVquestion_id
p1557
I4803999
sVlast_activity_date
p1558
I1296041327
sVcreation_date
p1559
I1296041327
sVscore
p1560
I86
sVowner
p1561
(dp1562
Vuser_id
p1563
I586714
sVprofile_image
p1564
Vhttps://www.gravatar.com/avatar/d58ad335aa4148f78a85d3102c138e81?s=128&d=identicon&r=PG
p1565
sVuser_type
p1566
Vregistered
p1567
sVreputation
p1568
I2371
sVlink
p1569
Vhttp://stackoverflow.com/users/586714/vlad-h
p1570
sVdisplay_name
p1571
VVlad H
p1572
ssVis_accepted
p1573
I01
sVanswer_id
p1574
I4804039
sa(dp1575
Vbody
p1576
V<p><code>:</code> is the delimiter of the slice syntax to 'slice out' sub-parts in sequences , <code>[start:end]</code></p>\u000a\u000a<pre><code>[1:5] is equivalent to "from 1 to 5" (5 not included)\u000a[1:] is equivalent to "1 to end"\u000a[len(a):] is equivalent to "from length of a to end"\u000a</code></pre>\u000a\u000a<p>Watch <a href="http://www.youtube.com/watch?v=tKTZoB2Vjuk" rel="noreferrer">http://www.youtube.com/watch?v=tKTZoB2Vjuk</a> at around 40:00 he starts explaining that.</p>\u000a\u000a<p>Works with tuples, dictionaries and lists, too.</p>\u000a
p1577
sVquestion_id
p1578
I4012340
sVlast_activity_date
p1579
I1287993855
sVcreation_date
p1580
I1287989599
sVscore
p1581
I69
sVowner
p1582
(dp1583
Vuser_id
p1584
I482864
sVprofile_image
p1585
Vhttps://www.gravatar.com/avatar/9ffc50d98e28398302c3a28040e8f63d?s=128&d=identicon&r=PG
p1586
sVuser_type
p1587
Vregistered
p1588
sVreputation
p1589
I4963
sVlink
p1590
Vhttp://stackoverflow.com/users/482864/soulseekah
p1591
sVaccept_rate
p1592
I100
sVdisplay_name
p1593
Vsoulseekah
p1594
ssVis_accepted
p1595
I01
sVlast_edit_date
p1596
I1287993855
sVanswer_id
p1597
I4012395
sa(dp1598
Vbody
p1599
V<p>You're not quite implementing the correct algorithm:</p>\u000a\u000a<p>In your first example, <code>primes_sieve</code> doesn't maintain a list of primality flags to strike/unset (as in the algorithm), but instead resizes a list of integers continuously, which is very expensive: removing an item from a list requires shifting all subsequent items down by one.</p>\u000a\u000a<p>In the second example, <code>primes_sieve1</code> maintains a <em>dictionary</em> of primality flags, which is a step in the right direction, but it iterates over the dictionary in undefined order, and redundantly strikes out factors of factors (instead of only factors of primes, as in the algorithm). You could fix this by sorting the keys, and skipping non-primes (which already makes it an order of magnitude faster), but it's still much more efficient to just use a list directly.</p>\u000a\u000a<p>The correct algorithm (with a list instead of a dictionary) looks something like:</p>\u000a\u000a<pre><code>def primes_sieve2(limit):\u000a    a = [True] * limit                          # Initialize the primality list\u000a    a[0] = a[1] = False\u000a\u000a    for (i, isprime) in enumerate(a):\u000a        if isprime:\u000a            yield i\u000a            for n in xrange(i*i, limit, i):     # Mark factors non-prime\u000a                a[n] = False\u000a</code></pre>\u000a\u000a<p>(Note that this also includes the algorithmic optimization of starting the non-prime marking at the prime's square (<code>i*i</code>) instead of its double.)</p>\u000a
p1600
sVquestion_id
p1601
I3939660
sVlast_activity_date
p1602
I1287143655
sVcreation_date
p1603
I1287143655
sVscore
p1604
I70
sVowner
p1605
(dp1606
Vuser_id
p1607
I444705
sVprofile_image
p1608
Vhttps://www.gravatar.com/avatar/3e754cabb8c4f443410c1fd107ecdfd8?s=128&d=identicon&r=PG
p1609
sVuser_type
p1610
Vregistered
p1611
sVreputation
p1612
I6731
sVlink
p1613
Vhttp://stackoverflow.com/users/444705/pi-delport
p1614
sVdisplay_name
p1615
VPi Delport
p1616
ssVis_accepted
p1617
I01
sVanswer_id
p1618
I3941967
sa(dp1619
Vbody
p1620
V<p>Oldest:</p>\u000a\u000a<pre><code>oldest = min(datetimes)\u000a</code></pre>\u000a\u000a<p>Youngest before now:</p>\u000a\u000a<pre><code>now = datetime.datetime.now(pytz.utc)\u000ayoungest = max(dt for dt in datetimes if dt &lt; now)\u000a</code></pre>\u000a
p1621
sVquestion_id
p1622
I3922644
sVlast_activity_date
p1623
I1286965454
sVcreation_date
p1624
I1286965454
sVscore
p1625
I66
sVowner
p1626
(dp1627
Vuser_id
p1628
I449449
sVprofile_image
p1629
Vhttps://www.gravatar.com/avatar/b52c27e86c87d931e654d6a2d2cdf974?s=128&d=identicon&r=PG
p1630
sVuser_type
p1631
Vregistered
p1632
sVreputation
p1633
I94835
sVlink
p1634
Vhttp://stackoverflow.com/users/449449/eumiro
p1635
sVaccept_rate
p1636
I100
sVdisplay_name
p1637
Veumiro
p1638
ssVis_accepted
p1639
I01
sVanswer_id
p1640
I3922675
sa(dp1641
Vbody
p1642
V<p>Starting with Version 1.3.6 (released Aug-17-2010) you <strong>CAN</strong>  </p>\u000a\u000a<p><a href="http://code.google.com/p/googleappengine/wiki/SdkReleaseNotes#Version_1.3.6_-_August_17,_2010" rel="noreferrer">From the changelog:</a></p>\u000a\u000a<blockquote>\u000a  <p>Results of datastore count() queries <strong>and offsets for all datastore queries are no longer capped at 1000</strong>.</p>\u000a</blockquote>\u000a
p1643
sVquestion_id
p1644
I264154
sVlast_activity_date
p1645
I1282513111
sVcreation_date
p1646
I1282513111
sVscore
p1647
I37
sVowner
p1648
(dp1649
Vuser_id
p1650
I48387
sVprofile_image
p1651
Vhttps://www.gravatar.com/avatar/b5b3262f246b9c41f5298adc62747d52?s=128&d=identicon&r=PG
p1652
sVuser_type
p1653
Vregistered
p1654
sVreputation
p1655
I27267
sVlink
p1656
Vhttp://stackoverflow.com/users/48387/shay-erlichmen
p1657
sVaccept_rate
p1658
I88
sVdisplay_name
p1659
VShay Erlichmen
p1660
ssVis_accepted
p1661
I01
sVanswer_id
p1662
I3543527
sa(dp1663
Vbody
p1664
V<p>When I'm working with python, I usually have two terminal windows open - one with IPython, and the other with a fairly customized Vim.</p>\u000a\u000a<p>Two good resources: </p>\u000a\u000a<ul>\u000a<li><a href="http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/" rel="noreferrer">http://blog.dispatched.ch/2009/05/24/vim-as-python-ide/</a></li>\u000a<li><a href="http://dancingpenguinsoflight.com/2009/02/python-and-vim-make-your-own-ide/" rel="noreferrer">http://dancingpenguinsoflight.com/2009/02/python-and-vim-make-your-own-ide/</a></li>\u000a</ul>\u000a\u000a<hr>\u000a\u000a<p>Though it sounds like what you want is IPython's magic function <code>%ed</code>/<code>%edit</code>:</p>\u000a\u000a<p>An example of what you can do:</p>\u000a\u000a<pre><code>In [72]: %ed\u000aIPython will make a temporary file named: c:\u005cdocume~1\u005cwjwe312\u005clocals~1\u005ctemp\u005cipython_edit_ar8veu.py\u000a</code></pre>\u000a\u000a<p>In the file I put:</p>\u000a\u000a<pre><code>x = "Hello World"\u000aprint 3\u000a</code></pre>\u000a\u000a<p>After saving and quitting the file:</p>\u000a\u000a<pre><code>Editing... done. Executing edited code...\u000a3\u000aOut[72]: "x = 'Hello world'\u005cnprint 3\u005cn"\u000a\u000aIn [73]: x\u000aOut[73]: 'Hello world'\u000a</code></pre>\u000a\u000a<p>You can define functions or anything else - just remember that the contents of the file will be executed when you close it.</p>\u000a\u000a<p>Another similar workflow is to <code>cd</code> to the directory containing your Python script that you're editing with your favorite editor. Then you can <code>%run</code> the script from within IPython and you'll have access to everything defined in the file. For instance, if you have the following in the file <code>test.py</code> in your <code>/home/myself</code> directory:</p>\u000a\u000a<pre><code>    class Tester(object):\u000a        def __init__(self):\u000a            print "hi"\u000a\u000a    def knightme(name):\u000a        print "Hello, Sir ", name\u000a</code></pre>\u000a\u000a<p>Then you can do the following:</p>\u000a\u000a<pre><code>In [42]: cd /home/myself\u000a/home/myself\u000a\u000aIn [43]: %run test.py # &lt;Tab&gt; autocomplete also works\u000a\u000aIn [44]: knightme('John')\u000aHello, Sir  John\u000a\u000aIn [45]: t = Tester()\u000aHi\u000a</code></pre>\u000a\u000a<p>Either a mix or one of those workflows should give you something very similar to the way you're used to working in IDLE.</p>\u000a
p1665
sVquestion_id
p1666
I3438531
sVlast_activity_date
p1667
I1282312750
sVcreation_date
p1668
I1282312750
sVscore
p1669
I48
sVowner
p1670
(dp1671
Vuser_id
p1672
I344286
sVprofile_image
p1673
Vhttps://www.gravatar.com/avatar/3827b2facd01ed6a64a96df00d4b877a?s=128&d=identicon&r=PG
p1674
sVuser_type
p1675
Vregistered
p1676
sVreputation
p1677
I21926
sVlink
p1678
Vhttp://stackoverflow.com/users/344286/wayne-werner
p1679
sVaccept_rate
p1680
I93
sVdisplay_name
p1681
VWayne Werner
p1682
ssVis_accepted
p1683
I01
sVanswer_id
p1684
I3531548
sa(dp1685
Vbody
p1686
V<p>Python tries to discourage you from "summing" strings. You're supposed to join them:</p>\u000a\u000a<pre><code>"".join(list_of_strings)\u000a</code></pre>\u000a\u000a<p>It's a lot faster, and uses much less memory.</p>\u000a\u000a<p>A quick benchmark:</p>\u000a\u000a<pre><code>$ python -m timeit -s 'import operator; strings = ["a"]*10000' 'r = reduce(operator.add, strings)'\u000a100 loops, best of 3: 8.46 msec per loop\u000a$ python -m timeit -s 'import operator; strings = ["a"]*10000' 'r = "".join(strings)'\u000a1000 loops, best of 3: 296 usec per loop\u000a</code></pre>\u000a\u000a<p>Edit (to answer OP's edit): As to why strings were apparently "singled out", I believe it's simply a matter of optimizing for a common case, as well as of enforcing best practice: you can join strings much faster with ''.join, so explicitly forbidding strings on <code>sum</code> will point this out to newbies.</p>\u000a\u000a<p>BTW, this restriction has been in place "forever", i.e., since the <code>sum</code> was added as a built-in function (<a href="http://svn.python.org/view/python/trunk/Python/bltinmodule.c?revision=32347&amp;view=markup&amp;pathrev=32347" rel="noreferrer">rev. 32347</a>)</p>\u000a
p1687
sVquestion_id
p1688
I3525359
sVlast_activity_date
p1689
I1282247478
sVcreation_date
p1690
I1282245355
sVscore
p1691
I41
sVowner
p1692
(dp1693
Vuser_id
p1694
I158773
sVprofile_image
p1695
Vhttps://www.gravatar.com/avatar/3d8c280edaafd988742f45e81f89d24a?s=128&d=identicon&r=PG
p1696
sVuser_type
p1697
Vregistered
p1698
sVreputation
p1699
I21021
sVlink
p1700
Vhttp://stackoverflow.com/users/158773/rbp
p1701
sVdisplay_name
p1702
Vrbp
p1703
ssVis_accepted
p1704
I01
sVlast_edit_date
p1705
I1282247478
sVanswer_id
p1706
I3525380
sa(dp1707
Vbody
p1708
V<p>The <code>property</code> descriptor always returns itself when accessed from a class (ie. when <code>instance</code> is <code>None</code> in its <code>__get__</code> method).</p>\u000a\u000a<p>If that's not what you want, you can write a new descriptor that always uses the class object (<code>owner</code>) instead of the instance:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class classproperty(object):\u000a...     def __init__(self, getter):\u000a...         self.getter= getter\u000a...     def __get__(self, instance, owner):\u000a...         return self.getter(owner)\u000a... \u000a&gt;&gt;&gt; class Foo(object):\u000a...     x= 4\u000a...     @classproperty\u000a...     def number(cls):\u000a...         return cls.x\u000a... \u000a&gt;&gt;&gt; Foo().number\u000a4\u000a&gt;&gt;&gt; Foo.number\u000a4\u000a</code></pre>\u000a
p1709
sVquestion_id
p1710
I3203286
sVlast_activity_date
p1711
I1278593034
sVcreation_date
p1712
I1278593034
sVscore
p1713
I35
sVowner
p1714
(dp1715
Vuser_id
p1716
I18936
sVprofile_image
p1717
Vhttps://www.gravatar.com/avatar/3f6f1bea81a68b2f1cfe3efbb9be94bc?s=128&d=identicon&r=PG
p1718
sVuser_type
p1719
Vregistered
p1720
sVreputation
p1721
I389448
sVlink
p1722
Vhttp://stackoverflow.com/users/18936/bobince
p1723
sVdisplay_name
p1724
Vbobince
p1725
ssVis_accepted
p1726
I01
sVanswer_id
p1727
I3203659
sa(dp1728
Vbody
p1729
V<p>Run <code>nohup python bgservice.py &amp;</code> to get the script to ignore the hangup signal and keep running. Output will be put in <code>nohup.out</code>.</p>\u000a\u000a<p>Ideally, you'd run your script with something like <a href="http://cr.yp.to/daemontools/supervise.html" rel="noreferrer"><code>supervise</code></a> so that it can be restarted if (when) it dies. </p>\u000a
p1730
sVquestion_id
p1731
I2975624
sVlast_activity_date
p1732
I1275666110
sVcreation_date
p1733
I1275666110
sVscore
p1734
I96
sVowner
p1735
(dp1736
Vuser_id
p1737
I111777
sVprofile_image
p1738
Vhttps://www.gravatar.com/avatar/730df0227780e818df8ce1e19c9a6c48?s=128&d=identicon&r=PG
p1739
sVuser_type
p1740
Vregistered
p1741
sVreputation
p1742
I19023
sVlink
p1743
Vhttp://stackoverflow.com/users/111777/scompt-com
p1744
sVaccept_rate
p1745
I84
sVdisplay_name
p1746
Vscompt.com
p1747
ssVis_accepted
p1748
I01
sVanswer_id
p1749
I2975645
sa(dp1750
Vbody
p1751
V<p>In the Python spirit of "ask for forgiveness, not permission", here's one way:</p>\u000a\u000a<pre><code>try:\u000a    b = a[4]\u000aexcept IndexError:\u000a    b = 'sss'\u000a</code></pre>\u000a
p1752
sVquestion_id
p1753
I2574636
sVlast_activity_date
p1754
I1270390436
sVcreation_date
p1755
I1270390436
sVscore
p1756
I60
sVowner
p1757
(dp1758
Vuser_id
p1759
I14637
sVprofile_image
p1760
Vhttps://www.gravatar.com/avatar/1904e7096278a10f1dfb3fdc0ceb53cc?s=128&d=identicon&r=PG
p1761
sVuser_type
p1762
Vregistered
p1763
sVreputation
p1764
I91715
sVlink
p1765
Vhttp://stackoverflow.com/users/14637/thomas
p1766
sVaccept_rate
p1767
I91
sVdisplay_name
p1768
VThomas
p1769
ssVis_accepted
p1770
I01
sVanswer_id
p1771
I2574650
sa(dp1772
Vbody
p1773
V<p>Using re:</p>\u000a\u000a<pre><code>import re\u000a\u000as = '\u0421\u043f\u043e\u0440\u0442 not russianA'\u000ad = {\u000a'\u0421\u043f\u043e\u0440\u0442':'\u0414\u043e\u0441\u0443\u0433',\u000a'russianA':'englishA'\u000a}\u000a\u000apattern = re.compile(r'\u005cb(' + '|'.join(d.keys()) + r')\u005cb')\u000aresult = pattern.sub(lambda x: d[x.group()], s)\u000a# Output: '\u0414\u043e\u0441\u0443\u0433 not englishA'\u000a</code></pre>\u000a\u000a<p>This will match whole words only. If you don't need that, use the pattern:</p>\u000a\u000a<pre><code>pattern = re.compile('|'.join(d.keys()))\u000a</code></pre>\u000a\u000a<p>Note that in this case you should sort the words descending by length if some of your dictionary entries are substrings of others.</p>\u000a
p1774
sVquestion_id
p1775
I2400504
sVlast_activity_date
p1776
I1268056131
sVcreation_date
p1777
I1268043639
sVscore
p1778
I65
sVowner
p1779
(dp1780
Vuser_id
p1781
I181765
sVprofile_image
p1782
Vhttps://www.gravatar.com/avatar/4eccfea56e4846550c2202b0ac8555fd?s=128&d=identicon&r=PG
p1783
sVuser_type
p1784
Vregistered
p1785
sVreputation
p1786
I26525
sVlink
p1787
Vhttp://stackoverflow.com/users/181765/max-shawabkeh
p1788
sVdisplay_name
p1789
VMax Shawabkeh
p1790
ssVis_accepted
p1791
I01
sVlast_edit_date
p1792
I1268056131
sVanswer_id
p1793
I2400577
sa(dp1794
Vbody
p1795
V<pre><code>&gt;&gt;&gt; t\u000a[1, 3, 6]\u000a&gt;&gt;&gt; [j-i for i, j in zip(t[:-1], t[1:])]  # or use itertools.izip in py2k\u000a[2, 3]\u000a</code></pre>\u000a
p1796
sVquestion_id
p1797
I2400840
sVlast_activity_date
p1798
I1268047418
sVcreation_date
p1799
I1268047418
sVscore
p1800
I75
sVowner
p1801
(dp1802
Vuser_id
p1803
I12855
sVprofile_image
p1804
Vhttps://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG
p1805
sVuser_type
p1806
Vregistered
p1807
sVreputation
p1808
I142797
sVlink
p1809
Vhttp://stackoverflow.com/users/12855/silentghost
p1810
sVaccept_rate
p1811
I86
sVdisplay_name
p1812
VSilentGhost
p1813
ssVis_accepted
p1814
I01
sVanswer_id
p1815
I2400875
sa(dp1816
Vbody
p1817
V<p>It expects a sequence (eg: a list or tuple) of strings. You're giving it a single string. A string happens to be a sequence of strings too, but it's a sequence of 1 character strings, which isn't what you want.</p>\u000a\u000a<p>If you just want one string per row you could do something like this:</p>\u000a\u000a<pre><code>csvwriter.writerow([JD])\u000a</code></pre>\u000a\u000a<p>This wraps JD (a string) with a list.</p>\u000a
p1818
sVquestion_id
p1819
I1816880
sVlast_activity_date
p1820
I1259531437
sVcreation_date
p1821
I1259531437
sVscore
p1822
I75
sVowner
p1823
(dp1824
Vuser_id
p1825
I90848
sVprofile_image
p1826
Vhttps://i.stack.imgur.com/RU38Z.jpg?s=128&g=1
p1827
sVuser_type
p1828
Vregistered
p1829
sVreputation
p1830
I84740
sVlink
p1831
Vhttp://stackoverflow.com/users/90848/laurence-gonsalves
p1832
sVaccept_rate
p1833
I88
sVdisplay_name
p1834
VLaurence Gonsalves
p1835
ssVis_accepted
p1836
I01
sVanswer_id
p1837
I1816897
sa(dp1838
Vbody
p1839
V<p>If Y is a module (and X a package) <code>reload(Y)</code> will be fine -- otherwise, you'll see why good Python style guides (such as my employer's) say to <strong>never</strong> import anything <strong>except</strong> a module (this is one out of many great reasons -- yet people still keep importing functions and classes directly, no matter how much I explain that it's <strong>not</strong> a good idea;-).</p>\u000a
p1840
sVquestion_id
p1841
I1739924
sVlast_activity_date
p1842
I1258343088
sVcreation_date
p1843
I1258343088
sVscore
p1844
I32
sVowner
p1845
(dp1846
Vuser_id
p1847
I95810
sVprofile_image
p1848
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1849
sVuser_type
p1850
Vregistered
p1851
sVreputation
p1852
I516089
sVlink
p1853
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1854
sVaccept_rate
p1855
I80
sVdisplay_name
p1856
VAlex Martelli
p1857
ssVis_accepted
p1858
I01
sVanswer_id
p1859
I1739931
sa(dp1860
Vbody
p1861
V<p>I'm very glad you asked! I was just working on explaining this very thing <a href="http://en.wikibooks.org/wiki/Choose_Your_Own_Pyventure" rel="noreferrer">in our wikibook</a> (which is obviously incomplete).  We're working with Python novices, and had to help a few through exactly what you're asking!  </p>\u000a\u000a<p><strong>Command-line Python in Windows:</strong> </p>\u000a\u000a<ol>\u000a<li><p>Save your python code file somewhere, using "Save" or "Save as" in your editor.  Lets call it 'first.py' in some folder, like "pyscripts" that you make on your Desktop.</p></li>\u000a<li><p>Open a <strong>prompt</strong> (a Windows 'cmd' shell that is a text interface into the computer):   </p>\u000a\u000a<p>start > run > "cmd" (in the little box).  OK.     </p></li>\u000a<li><p>Navigate to where your python file is, using the commands 'cd' (change directory) and 'dir' (to show files in the directory, to verify your head).  For our example something like, </p>\u000a\u000a<p>> cd C:\u005cDocuments and Settings\u005cGregg\u005cDesktop\u005cpyscripts</p></li>\u000a<li><p>try:</p>\u000a\u000a<p>> python first.py</p></li>\u000a</ol>\u000a\u000a<p>If you get this message:  </p>\u000a\u000a<blockquote>\u000a  <p>'python' is not recognized as an\u000a  internal or external command, operable\u000a  program or batch file.</p>\u000a</blockquote>\u000a\u000a<p>then <strong>python</strong> (the <em>interpreter</em> program that can translate Python into 'computer instructions') isn't on your path (see Putting Python in Your Path below).  Then try calling it like this (assuming Python2.6, installed in the usual location):</p>\u000a\u000a<p>> C:\u005cPython26\u005cpython.exe first.py</p>\u000a\u000a<p>(Advanced users:  instead of first.py, you could write out first.py's full path of C:\u005cDocuments and Settings\u005cGregg\u005cDesktop\u005cpyscripts\u005cfirst.py)</p>\u000a\u000a<p><strong>Putting Python In Your Path</strong></p>\u000a\u000a<p><em>Windows</em></p>\u000a\u000a<p>In order to run programs, your operating system looks in various places,\u000aand tries to match the name of the program / command you typed with some \u000aprograms along the way.  </p>\u000a\u000a<p>In windows:</p>\u000a\u000a<p>control panel > system >  advanced > |Environmental Variables| > system variables -> Path</p>\u000a\u000a<p>this needs to include:  C:\u005cPython26; (or equivalent).  If you put it at the front,\u000ait will be the first place looked.  You can also add it at the end, which is possibly saner.</p>\u000a\u000a<p>Then restart your prompt, and try typing 'python'.  If it all worked, you should\u000aget a ">>>" prompt.</p>\u000a
p1862
sVquestion_id
p1863
I1522564
sVlast_activity_date
p1864
I1254850646
sVcreation_date
p1865
I1254850646
sVscore
p1866
I61
sVowner
p1867
(dp1868
Vuser_id
p1869
I15842
sVprofile_image
p1870
Vhttps://www.gravatar.com/avatar/58d77327a8f46041462b31c117e5c51a?s=128&d=identicon&r=PG
p1871
sVuser_type
p1872
Vregistered
p1873
sVreputation
p1874
I10605
sVlink
p1875
Vhttp://stackoverflow.com/users/15842/gregg-lind
p1876
sVaccept_rate
p1877
I61
sVdisplay_name
p1878
VGregg Lind
p1879
ssVis_accepted
p1880
I01
sVanswer_id
p1881
I1527012
sa(dp1882
Vbody
p1883
V<p>I would suggest a custom django templating <em>filter</em> rather than a custom <em>tag</em> -- filter is handier and simpler (where appropriate, like here). <code>{{ fruits | joinby:", " }}</code> looks like what I'd want to have for the purpose... with a custom <code>joinby</code> filter:</p>\u000a\u000a<pre><code>def joinby(value, arg):\u000a    return arg.join(value)\u000a</code></pre>\u000a\u000a<p>which as you see is simplicity itself!</p>\u000a
p1884
sVquestion_id
p1885
I1236593
sVlast_activity_date
p1886
I1249526461
sVcreation_date
p1887
I1249526461
sVscore
p1888
I28
sVowner
p1889
(dp1890
Vuser_id
p1891
I95810
sVprofile_image
p1892
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1893
sVuser_type
p1894
Vregistered
p1895
sVreputation
p1896
I516089
sVlink
p1897
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1898
sVaccept_rate
p1899
I80
sVdisplay_name
p1900
VAlex Martelli
p1901
ssVis_accepted
p1902
I01
sVanswer_id
p1903
I1236716
sa(dp1904
Vbody
p1905
V<p>This can be done explicitly.</p>\u000a\u000a<pre><code>class ref:\u000a    def __init__(self, obj): self.obj = obj\u000a    def get(self):    return self.obj\u000a    def set(self, obj):      self.obj = obj\u000a\u000aa = ref([1, 2])\u000ab = a\u000aprint a.get()  # =&gt; [1, 2]\u000aprint b.get()  # =&gt; [1, 2]\u000a\u000ab.set(2)\u000aprint a.get()  # =&gt; 2\u000aprint b.get()  # =&gt; 2\u000a</code></pre>\u000a
p1906
sVquestion_id
p1907
I1145722
sVlast_activity_date
p1908
I1247867347
sVcreation_date
p1909
I1247867347
sVscore
p1910
I74
sVowner
p1911
(dp1912
Vuser_id
p1913
I20713
sVprofile_image
p1914
Vhttps://www.gravatar.com/avatar/09b9758a4a83cc25547eb93891f19df7?s=128&d=identicon&r=PG
p1915
sVuser_type
p1916
Vregistered
p1917
sVreputation
p1918
I128737
sVlink
p1919
Vhttp://stackoverflow.com/users/20713/ephemient
p1920
sVaccept_rate
p1921
I80
sVdisplay_name
p1922
Vephemient
p1923
ssVis_accepted
p1924
I01
sVanswer_id
p1925
I1145848
sa(dp1926
Vbody
p1927
V<p>If you mean a python script, just do something like this:</p>\u000a\u000a<pre><code>try:\u000a import mymodule\u000aexcept ImportError, e:\u000a pass # module doesn't exist, deal with it.\u000a</code></pre>\u000a
p1928
sVquestion_id
p1929
I1051254
sVlast_activity_date
p1930
I1246050017
sVcreation_date
p1931
I1246050017
sVscore
p1932
I60
sVowner
p1933
(dp1934
Vuser_id
p1935
I116154
sVprofile_image
p1936
Vhttps://www.gravatar.com/avatar/67e3cdb502d7abded72424b29683b1b3?s=128&d=identicon&r=PG
p1937
sVuser_type
p1938
Vregistered
p1939
sVreputation
p1940
I6432
sVlink
p1941
Vhttp://stackoverflow.com/users/116154/christopher
p1942
sVaccept_rate
p1943
I91
sVdisplay_name
p1944
VChristopher
p1945
ssVis_accepted
p1946
I01
sVanswer_id
p1947
I1051266
sa(dp1948
Vbody
p1949
V<p>Having a "table" in memory that needs lookups, sorting, and arbitrary aggregation really does call out for SQL.  You said you tried SQLite, but did you realize that SQLite can use an in-memory-only database?</p>\u000a\u000a<pre><code>connection = sqlite3.connect(':memory:')\u000a</code></pre>\u000a\u000a<p>Then you can create/drop/query/update tables in memory with all the functionality of SQLite and no files left over when you're done.  And as of Python 2.5, <code>sqlite3</code> is in the standard library, so it's not really "overkill" IMO.</p>\u000a\u000a<p>Here is a sample of how one might create and populate the database:</p>\u000a\u000a<pre><code>import csv\u000aimport sqlite3\u000a\u000adb = sqlite3.connect(':memory:')\u000a\u000adef init_db(cur):\u000a    cur.execute('''CREATE TABLE foo (\u000a        Row INTEGER,\u000a        Name TEXT,\u000a        Year INTEGER,\u000a        Priority INTEGER)''')\u000a\u000adef populate_db(cur, csv_fp):\u000a    rdr = csv.reader(csv_fp)\u000a    cur.executemany('''\u000a        INSERT INTO foo (Row, Name, Year, Priority)\u000a        VALUES (?,?,?,?)''', rdr)\u000a\u000acur = db.cursor()\u000ainit_db(cur)\u000apopulate_db(cur, open('my_csv_input_file.csv'))\u000adb.commit()\u000a</code></pre>\u000a\u000a<p>If you'd really prefer not to use SQL, you should probably use a list of dictionaries:</p>\u000a\u000a<pre><code>lod = [ ] # "list of dicts"\u000a\u000adef populate_lod(lod, csv_fp):\u000a    rdr = csv.DictReader(csv_fp, ['Row', 'Name', 'Year', 'Priority'])\u000a    lod.extend(rdr)\u000a\u000adef query_lod(lod, filter=None, sort_keys=None):\u000a    if filter is not None:\u000a        lod = (r for r in lod if filter(r))\u000a    if sort_keys is not None:\u000a        lod = sorted(lod, key=lambda r:[r[k] for k in sort_keys])\u000a    else:\u000a        lod = list(lod)\u000a    return lod\u000a\u000adef lookup_lod(lod, **kw):\u000a    for row in lod:\u000a        for k,v in kw.iteritems():\u000a            if row[k] != str(v): break\u000a        else:\u000a            return row\u000a    return None\u000a</code></pre>\u000a\u000a<p>Testing then yields:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; lod = []\u000a&gt;&gt;&gt; populate_lod(lod, csv_fp)\u000a&gt;&gt;&gt; \u000a&gt;&gt;&gt; pprint(lookup_lod(lod, Row=1))\u000a{'Name': 'Cat', 'Priority': '1', 'Row': '1', 'Year': '1998'}\u000a&gt;&gt;&gt; pprint(lookup_lod(lod, Name='Aardvark'))\u000a{'Name': 'Aardvark', 'Priority': '1', 'Row': '4', 'Year': '2000'}\u000a&gt;&gt;&gt; pprint(query_lod(lod, sort_keys=('Priority', 'Year')))\u000a[{'Name': 'Cat', 'Priority': '1', 'Row': '1', 'Year': '1998'},\u000a {'Name': 'Dog', 'Priority': '1', 'Row': '3', 'Year': '1999'},\u000a {'Name': 'Aardvark', 'Priority': '1', 'Row': '4', 'Year': '2000'},\u000a {'Name': 'Wallaby', 'Priority': '1', 'Row': '5', 'Year': '2000'},\u000a {'Name': 'Fish', 'Priority': '2', 'Row': '2', 'Year': '1998'},\u000a {'Name': 'Zebra', 'Priority': '3', 'Row': '6', 'Year': '2001'}]\u000a&gt;&gt;&gt; pprint(query_lod(lod, sort_keys=('Year', 'Priority')))\u000a[{'Name': 'Cat', 'Priority': '1', 'Row': '1', 'Year': '1998'},\u000a {'Name': 'Fish', 'Priority': '2', 'Row': '2', 'Year': '1998'},\u000a {'Name': 'Dog', 'Priority': '1', 'Row': '3', 'Year': '1999'},\u000a {'Name': 'Aardvark', 'Priority': '1', 'Row': '4', 'Year': '2000'},\u000a {'Name': 'Wallaby', 'Priority': '1', 'Row': '5', 'Year': '2000'},\u000a {'Name': 'Zebra', 'Priority': '3', 'Row': '6', 'Year': '2001'}]\u000a&gt;&gt;&gt; print len(query_lod(lod, lambda r:1997 &lt;= int(r['Year']) &lt;= 2002))\u000a6\u000a&gt;&gt;&gt; print len(query_lod(lod, lambda r:int(r['Year'])==1998 and int(r['Priority']) &gt; 2))\u000a0\u000a</code></pre>\u000a\u000a<p>Personally I like the SQLite version better since it preserves your types better (without extra conversion code in Python) and easily grows to accommodate future requirements.  But then again, I'm quite comfortable with SQL, so YMMV.</p>\u000a
p1950
sVquestion_id
p1951
I1038160
sVlast_activity_date
p1952
I1245855408
sVcreation_date
p1953
I1245848400
sVscore
p1954
I56
sVowner
p1955
(dp1956
Vuser_id
p1957
I89535
sVprofile_image
p1958
Vhttps://www.gravatar.com/avatar/55455771d6771dfd58860695d3e597e6?s=128&d=identicon&r=PG
p1959
sVuser_type
p1960
Vregistered
p1961
sVreputation
p1962
I7721
sVlink
p1963
Vhttp://stackoverflow.com/users/89535/rick-copeland
p1964
sVdisplay_name
p1965
VRick Copeland
p1966
ssVis_accepted
p1967
I01
sVlast_edit_date
p1968
I1245855408
sVanswer_id
p1969
I1038203
sa(dp1970
Vbody
p1971
V<p>PyWin32 is the way to go - but how to use it? One approach is to begin with a concrete problem you're having and attempting to solve it. PyWin32 provides bindings for the Win32 API functions for which there are many, and you really have to pick a specific goal first.</p>\u000a\u000a<p>In my Python 2.5 installation (ActiveState on Windows) the win32 package has a Demos folder packed with sample code of various parts of the library. </p>\u000a\u000a<p>For example, here's CopyFileEx.py:</p>\u000a\u000a<pre><code>import win32file, win32api\u000aimport os\u000a\u000a\u000adef ProgressRoutine(TotalFileSize, TotalBytesTransferred, StreamSize, StreamBytesTransferred,\u000a    StreamNumber, CallbackReason, SourceFile, DestinationFile, Data):\u000a    print Data\u000a    print TotalFileSize, TotalBytesTransferred, StreamSize, StreamBytesTransferred, StreamNumber, CallbackReason, SourceFile, DestinationFile\u000a    ##if TotalBytesTransferred &gt; 100000:\u000a    ##    return win32file.PROGRESS_STOP\u000a    return win32file.PROGRESS_CONTINUE\u000a\u000atemp_dir=win32api.GetTempPath()\u000afsrc=win32api.GetTempFileName(temp_dir,'cfe')[0]\u000afdst=win32api.GetTempFileName(temp_dir,'cfe')[0]\u000aprint fsrc, fdst\u000a\u000af=open(fsrc,'w')\u000af.write('xxxxxxxxxxxxxxxx\u005cn'*32768)\u000af.close()\u000a## add a couple of extra data streams\u000af=open(fsrc+':stream_y','w')\u000af.write('yyyyyyyyyyyyyyyy\u005cn'*32768)\u000af.close()\u000af=open(fsrc+':stream_z','w')\u000af.write('zzzzzzzzzzzzzzzz\u005cn'*32768)\u000af.close()\u000a\u000aoperation_desc='Copying '+fsrc+' to '+fdst\u000awin32file.CopyFileEx(fsrc, fdst, ProgressRoutine, operation_desc, False,   win32file.COPY_FILE_RESTARTABLE)\u000a</code></pre>\u000a\u000a<p>It shows how to use the CopyFileEx function with a few others (such as GetTempPath and GetTempFileName). From this example you can get a "general feel" of how to work with this library. </p>\u000a
p1972
sVquestion_id
p1973
I1025029
sVlast_activity_date
p1974
I1245639853
sVcreation_date
p1975
I1245639853
sVscore
p1976
I35
sVowner
p1977
(dp1978
Vuser_id
p1979
I8206
sVprofile_image
p1980
Vhttps://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?s=128&d=identicon&r=PG
p1981
sVuser_type
p1982
Vregistered
p1983
sVreputation
p1984
I133054
sVlink
p1985
Vhttp://stackoverflow.com/users/8206/eli-bendersky
p1986
sVaccept_rate
p1987
I94
sVdisplay_name
p1988
VEli Bendersky
p1989
ssVis_accepted
p1990
I01
sVanswer_id
p1991
I1025331
sa(dp1992
Vbody
p1993
V<p>Reclassing instances like this is done in <a href="http://selenic.com/mercurial/" rel="noreferrer">Mercurial</a> (a distributed revision control system) when extensions (plugins) want to change the object that represent the local repository. The object is called <code>repo</code> and is initially a <code>localrepo</code> instance. It is passed to each extension in turn and, when needed, extensions will define a new class which is a subclass of <code>repo.__class__</code> and <em>change</em> the class of <code>repo</code> to this new subclass!</p>\u000a\u000a<p>It looks <a href="http://www.selenic.com/hg/index.cgi/file/d19ab9a56bf4/hgext/bookmarks.py#l229" rel="noreferrer">like this</a> in code:</p>\u000a\u000a<pre><code>def reposetup(ui, repo):\u000a    # ...\u000a\u000a    class bookmark_repo(repo.__class__): \u000a        def rollback(self):\u000a            if os.path.exists(self.join('undo.bookmarks')):\u000a                util.rename(self.join('undo.bookmarks'), self.join('bookmarks'))\u000a            return super(bookmark_repo, self).rollback() \u000a\u000a        # ...\u000a\u000a    repo.__class__ = bookmark_repo \u000a</code></pre>\u000a\u000a<p>The extension (I took the code from the bookmarks extension) defines a module level function called <code>reposetup</code>. Mercurial will call this when initializing the extension and pass a <code>ui</code> (user interface) and <code>repo</code> (repository) argument.</p>\u000a\u000a<p>The function then defines a subclass of whatever class <code>repo</code> happens to be. It would <em>not</em> suffice to simply subclass <code>localrepo</code> since extensions need to be able to extend each other. So if the first extension changes <code>repo.__class__</code> to <code>foo_repo</code>, the next extension should change <code>repo.__class__</code> to a subclass of <code>foo_repo</code> and not just a subclass of <code>localrepo</code>. Finally the function changes the instanceø's class, just like you did in your code.</p>\u000a\u000a<p>I hope this code can show a legitimate use of this language feature. I think it's the only place where I've seen it used in the wild.</p>\u000a
p1994
sVquestion_id
p1995
I990758
sVlast_activity_date
p1996
I1244918865
sVcreation_date
p1997
I1244918865
sVscore
p1998
I14
sVowner
p1999
(dp2000
Vuser_id
p2001
I110204
sVprofile_image
p2002
Vhttps://www.gravatar.com/avatar/6bf0300fc4a5c9012fd254d3da2a6e69?s=128&d=identicon&r=PG
p2003
sVuser_type
p2004
Vregistered
p2005
sVreputation
p2006
I58568
sVlink
p2007
Vhttp://stackoverflow.com/users/110204/martin-geisler
p2008
sVaccept_rate
p2009
I100
sVdisplay_name
p2010
VMartin Geisler
p2011
ssVis_accepted
p2012
I01
sVanswer_id
p2013
I991262
sa(dp2014
Vbody
p2015
V<p>You can use the <a href="http://docs.python.org/library/inspect.html#inspect.getfile" rel="noreferrer">inspect</a> module, like this:</p>\u000a\u000a<pre><code>import inspect\u000ainspect.getfile(C.__class__)\u000a</code></pre>\u000a
p2016
sVquestion_id
p2017
I697320
sVlast_activity_date
p2018
I1238432620
sVcreation_date
p2019
I1238422495
sVscore
p2020
I66
sVowner
p2021
(dp2022
Vuser_id
p2023
I51025
sVprofile_image
p2024
Vhttps://www.gravatar.com/avatar/263fec125853f697e0ea89787a4731a6?s=128&d=identicon&r=PG
p2025
sVuser_type
p2026
Vregistered
p2027
sVreputation
p2028
I23952
sVlink
p2029
Vhttp://stackoverflow.com/users/51025/dns
p2030
sVaccept_rate
p2031
I94
sVdisplay_name
p2032
VDNS
p2033
ssVis_accepted
p2034
I01
sVlast_edit_date
p2035
I1238432620
sVanswer_id
p2036
I697395
sa(dp2037
Vbody
p2038
V<p>Try this:</p>\u000a\u000a<pre><code>re.compile(r"^(.+)\u005cn((?:\u005cn.+)+)", re.MULTILINE)\u000a</code></pre>\u000a\u000a<p>I think your biggest problem is that you're expecting the <code>^</code> and <code>$</code> anchors to match linefeeds, but they don't.  In multiline mode, <code>^</code> matches the position immediately <em>following</em> a newline and <code>$</code> matches the position immediately <em>preceding</em> a newline.</p>\u000a\u000a<p>Be aware, too, that a newline can consist of a linefeed (\u005cn), a carriage-return (\u005cr), or a carriage-return+linefeed (\u005cr\u005cn).  If you aren't certain that your target text uses only linefeeds, you should use this more inclusive version of the regex:</p>\u000a\u000a<pre><code>re.compile(r"^(.+)(?:\u005cn|\u005cr\u005cn?)((?:(?:\u005cn|\u005cr\u005cn?).+)+)", re.MULTILINE)\u000a</code></pre>\u000a\u000a<p>BTW, you don't want to use the DOTALL modifier here; you're relying on the fact that the dot matches everything <em>except</em> newlines.</p>\u000a
p2039
sVquestion_id
p2040
I587345
sVlast_activity_date
p2041
I1235592361
sVcreation_date
p2042
I1235592361
sVscore
p2043
I65
sVowner
p2044
(dp2045
Vuser_id
p2046
I20938
sVprofile_image
p2047
Vhttps://i.stack.imgur.com/CuXSm.jpg?s=128&g=1
p2048
sVuser_type
p2049
Vregistered
p2050
sVreputation
p2051
I53864
sVlink
p2052
Vhttp://stackoverflow.com/users/20938/alan-moore
p2053
sVdisplay_name
p2054
VAlan Moore
p2055
ssVis_accepted
p2056
I01
sVanswer_id
p2057
I587620
sa(dp2058
Vbody
p2059
V<p>use <a href="http://winpdb.org/" rel="noreferrer">Winpdb</a>. It is a <strong>platform independent</strong> graphical GPL Python debugger with support for remote debugging over a network, multiple threads, namespace modification, embedded debugging, encrypted communication and is up to 20 times faster than pdb.</p>\u000a\u000a<p>Features:</p>\u000a\u000a<ul>\u000a<li>GPL license. Winpdb is Free Software.</li>\u000a<li>Compatible with CPython 2.3 through 2.6 and Python 3000</li>\u000a<li>Compatible with wxPython 2.6 through 2.8</li>\u000a<li>Platform independent, and tested on Ubuntu Gutsy and Windows XP.</li>\u000a<li>User Interfaces: rpdb2 is console based, while winpdb requires wxPython 2.6 or later.</li>\u000a</ul>\u000a\u000a<p><a href="http://winpdb.org/images/screenshot_winpdb_small.jpg" rel="noreferrer">Screenshot http://winpdb.org/images/screenshot_winpdb_small.jpg</a></p>\u000a
p2060
sVquestion_id
p2061
I543196
sVlast_activity_date
p2062
I1234503138
sVcreation_date
p2063
I1234503138
sVscore
p2064
I54
sVowner
p2065
(dp2066
Vuser_id
p2067
I17160
sVprofile_image
p2068
Vhttps://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=128&d=identicon&r=PG
p2069
sVuser_type
p2070
Vregistered
p2071
sVreputation
p2072
I118064
sVlink
p2073
Vhttp://stackoverflow.com/users/17160/nosklo
p2074
sVaccept_rate
p2075
I78
sVdisplay_name
p2076
Vnosklo
p2077
ssVis_accepted
p2078
I01
sVanswer_id
p2079
I544838
sa(dp2080
Vbody
p2081
V<blockquote>\u000a  <p>I'm thinking of falling back to simply\u000a  writing view functions in Django that\u000a  return JSON results.</p>\u000a</blockquote>\u000a\u000a<ul>\u000a<li>Explicit</li>\u000a<li>Portable to other frameworks</li>\u000a<li>Doesn't require patching Django</li>\u000a</ul>\u000a
p2082
sVquestion_id
p2083
I308605
sVlast_activity_date
p2084
I1227274729
sVcreation_date
p2085
I1227274729
sVscore
p2086
I56
sVowner
p2087
(dp2088
Vuser_id
p2089
I28380
sVprofile_image
p2090
Vhttps://www.gravatar.com/avatar/e1f7597153b6acca55f0b522481e137d?s=128&d=identicon&r=PG
p2091
sVuser_type
p2092
Vregistered
p2093
sVreputation
p2094
I29484
sVlink
p2095
Vhttp://stackoverflow.com/users/28380/ali-afshar
p2096
sVaccept_rate
p2097
I92
sVdisplay_name
p2098
VAli Afshar
p2099
ssVis_accepted
p2100
I01
sVanswer_id
p2101
I308785
sasVquota_max
p2102
I300
sVquota_remaining
p2103
I141
s.