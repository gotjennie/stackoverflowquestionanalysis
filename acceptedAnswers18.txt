(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>Yes you can. You can install a package from a tarball or a folder, on the web or your computer. For example:</p>\u000a\u000a<h3>Install from tarball on web</h3>\u000a\u000a<pre><code>pip install https://pypi.python.org/packages/source/r/requests/requests-2.3.0.tar.gz\u000a</code></pre>\u000a\u000a<h3>Install from local tarball</h3>\u000a\u000a<pre><code>wget https://pypi.python.org/packages/source/r/requests/requests-2.3.0.tar.gz\u000apip install requests-2.3.0.tar.gz\u000a</code></pre>\u000a\u000a<h3>Install from local folder</h3>\u000a\u000a<pre><code>tar -zxvf requests-2.3.0.tar.gz\u000acd requests-2.3.0\u000apip install .\u000a</code></pre>\u000a\u000a<p>You can delete the <code>requests-2.3.0</code> folder.</p>\u000a\u000a<h3>Install from local folder (editable mode)</h3>\u000a\u000a<pre><code>pip install -e .\u000a</code></pre>\u000a\u000a<p>This installs the package in <a href="https://pip.pypa.io/en/latest/reference/pip_install/?highlight=editable#editable-installs" rel="nofollow noreferrer">editable mode</a>. Any changes you make to the code will immediately apply across the system. This is useful if you are the package developer and want to test changes. It also means you can't delete the folder without breaking the install.</p>\u000a
p6
sVquestion_id
p7
I2087148
sVlast_activity_date
p8
I1495061328
sVcreation_date
p9
I1401730427
sVscore
p10
I66
sVowner
p11
(dp12
Vuser_id
p13
I284795
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/99f7ffd3d45dbcef0b3b6960dcfe81a2?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I61391
sVlink
p19
Vhttp://stackoverflow.com/users/284795/colonel-panic
p20
sVaccept_rate
p21
I79
sVdisplay_name
p22
VColonel Panic
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1495061328
sVanswer_id
p26
I24000174
sa(dp27
Vbody
p28
V<p>In more recent Python versions (2.6+; in older versions you're pretty much limited to checking for a few hardcoded types), the correct way is to test if your variable is an instance of <code>numbers.Number</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import numbers\u000a&gt;&gt;&gt; import decimal\u000a&gt;&gt;&gt; [isinstance(x, numbers.Number) for x in (0, 0.0, 0j, decimal.Decimal(0))]\u000a[True, True, True, True]\u000a</code></pre>\u000a\u000a<p>This uses <a href="http://docs.python.org/glossary.html#term-abstract-base-class" rel="nofollow noreferrer">ABCs</a> and will work for all build-in number-like classes, and also for all third-party classes if they are worth their salt (registered as subclasses of the <code>Number</code> ABC). However, in many cases you shouldn't worry about checking typed manually - Python is duck-typed and mixing somewhat compatible types usually works, yet it will barf an error message when some operation doesn't make sense (<code>4 - "1"</code>), so manually checking this is rarely really needed. It's just bonus, you can add it when finishing this module to avoid pestering others with implementation details.</p>\u000a
p29
sVquestion_id
p30
I4187185
sVlast_activity_date
p31
I1493118893
sVcreation_date
p32
I1289843099
sVscore
p33
I117
sVowner
p34
(dp35
Vuser_id
p36
I395760
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/ce3278f4dfbb7287c89d749c95d6f805?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I75798
sVlink
p42
Vhttp://stackoverflow.com/users/395760/delnan
p43
sVaccept_rate
p44
I75
sVdisplay_name
p45
Vdelnan
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1493118893
sVanswer_id
p49
I4187266
sa(dp50
Vbody
p51
V<p>Use "\u005cn":</p>\u000a\u000a<pre><code>file.write("My String\u005cn")\u000a</code></pre>\u000a\u000a<p>See <a href="http://docs.python.org/tutorial/inputoutput.html" rel="noreferrer">the Python manual</a> for reference.</p>\u000a
p52
sVquestion_id
p53
I2918362
sVlast_activity_date
p54
I1490385608
sVcreation_date
p55
I1274932768
sVscore
p56
I98
sVowner
p57
(dp58
Vuser_id
p59
I220988
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/2174875fdee25e314d90b3382a123cf5?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I22970
sVlink
p65
Vhttp://stackoverflow.com/users/220988/halfdan
p66
sVaccept_rate
p67
I78
sVdisplay_name
p68
Vhalfdan
p69
ssVis_accepted
p70
I01
sVlast_edit_date
p71
I1490385608
sVanswer_id
p72
I2918370
sa(dp73
Vbody
p74
V<p><strong>Pyenv</strong> and <strong>virtualenv</strong> are very different tools that work in different ways to do different things:</p>\u000a\u000a<ul>\u000a<li><p><strong>Pyenv</strong> is a bash extension - will not work on Windows - that intercepts your calls to python, pip, etc., to direct them to one of several of the system python tool-chains.  So you always have all the libraries that you have installed in the selected python version available - as such it is good for users who have to switch between different versions of python.</p></li>\u000a<li><p><strong>VirtualEnv</strong>, is pure python so works everywhere, it makes a copy of, <em>optionally a specific version of,</em> python and pip local to the activate environment which may or may not include links to the current system tool-chain, if it does not you can install just a known subset of libraries into that environment.  As such it is almost certainly much better for testing and deployment as you know <strong>exactly</strong> which libraries, at which versions, are used and a global change will not impact your module.  </p></li>\u000a</ul>\u000a\u000a<h2>venv <em>python > 3.3</em></h2>\u000a\u000a<p>Note that from Python 3.3 onward there is a built in implementation of VirtualEnv called venv, <em>with, on some installations a wrapper called pyenv - this wrapper is deprecated in Python 3.6,</em> which should probably be used in preference. To avoid possible issues with the wrapper it is often a good idea to use it directly by using <code>/path/to/python3 -m venv desired/env/path</code> or you can use the excellent <code>py</code> python selector on windows with <code>py -3 -m venv desired/env/path</code>.  It will create the directory specified with <code>desired/env/path</code> configure and populate it appropriately.  In general it is very much like using VirtualEnv.</p>\u000a\u000a<h2>Additional Tools</h2>\u000a\u000a<p>There are a number of tools that it is worth mentioning, and considering, as they can help with the use of one or more of the above:</p>\u000a\u000a<ul>\u000a<li><a href="https://pypi.python.org/pypi/virtualenvwrapper" rel="noreferrer">VirtualEnvWrapper</a> Manage and simplify the use and management of VirtualEnv - <strong>Cross Platform</strong>.</li>\u000a<li><a href="https://github.com/yyuu/pyenv-virtualenv" rel="noreferrer">pyenv-virtualenv</a>, <em>installed by <a href="https://github.com/yyuu/pyenv-installer" rel="noreferrer">pyenv-installer</a></em>, which gives PyEnv tools for managing and interfacing to VirtualEnv - with this you can have a base installation that includes more than one version of python and create isolated environments within each of them - <em>Linux/OS-X</em>. <em>Suggested by Johann Visagie</em></li>\u000a<li><a href="http://www.pyinstaller.org/" rel="noreferrer">PyInstaller</a> can take your python code, possibly developed &amp; tested under VirtualEnv, and bundle it up so that it can run one platforms that do not have <em>your version of</em> python installed - Note that it is not a cross compiler you will need a Windows (virtual-)machine to build Windows installs, etc., but it can be handy even where you can be sure that python will be installed but cannot be sure that the version of python and all the libraries will be compatible with your code.</li>\u000a</ul>\u000a
p75
sVquestion_id
p76
I29950300
sVlast_activity_date
p77
I1489678922
sVcreation_date
p78
I1430328611
sVscore
p79
I88
sVowner
p80
(dp81
Vuser_id
p82
I2298070
sVprofile_image
p83
Vhttps://i.stack.imgur.com/A6aVe.jpg?s=128&g=1
p84
sVuser_type
p85
Vregistered
p86
sVreputation
p87
I16776
sVlink
p88
Vhttp://stackoverflow.com/users/2298070/steve-barnes
p89
sVdisplay_name
p90
VSteve Barnes
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1489678922
sVanswer_id
p94
I29950604
sa(dp95
Vbody
p96
V<p><em>Note: using in-place operations on NumPy arrays that share memory in no longer a problem in version 1.13.0 onward (see details <a href="https://github.com/numpy/numpy/pull/8043" rel="nofollow noreferrer">here</a>). The two operation will produce the same result. This answer only applies to earlier versions of NumPy.</em></p>\u000a\u000a<hr>\u000a\u000a<p>Mutating arrays while they're being used in computations can lead to unexpected results!</p>\u000a\u000a<p>In the example in the question, subtraction with <code>-=</code> modifies the second element of <code>a</code> and then immediately uses that <em>modified</em> second element in the operation on the third element of <code>a</code>.</p>\u000a\u000a<p>Here is what happens with <code>a[1:] -= a[:-1]</code> step by step:</p>\u000a\u000a<ul>\u000a<li><p><code>a</code> is the array with the data <code>[1, 2, 3]</code>.</p></li>\u000a<li><p>We have two views onto this data: <code>a[1:]</code> is <code>[2, 3]</code>, and <code>a[:-1]</code> is <code>[1, 2]</code>.</p></li>\u000a<li><p>The in-place subtraction <code>-=</code> begins. The first element of <code>a[:-1]</code>, 1, is subtracted from the first element of <code>a[1:]</code>. This has modified <code>a</code> to be <code>[1, 1, 3]</code>. Now we have that <code>a[1:]</code> is a view of the data <code>[1, 3]</code>, and <code>a[:-1]</code> is a view of the data <code>[1, 1]</code> (the second element of array <code>a</code> has been changed).</p></li>\u000a<li><p><code>a[:-1]</code> is now <code>[1, 1]</code> and NumPy must now subtract its second element <em>which is 1</em> (not 2 anymore!) from the second element of <code>a[1:]</code>. This makes <code>a[1:]</code> a view of the values <code>[1, 2]</code>.</p></li>\u000a<li><p><code>a</code> is now an array with the values <code>[1, 1, 2]</code>.</p></li>\u000a</ul>\u000a\u000a<p><code>b[1:] = b[1:] - b[:-1]</code> does not have this problem because <code>b[1:] - b[:-1]</code> creates a <em>new</em> array first and then assigns the values in this array to <code>b[1:]</code>. It does not modify <code>b</code> itself during the subtraction, so the views <code>b[1:]</code> and <code>b[:-1]</code> do not change.</p>\u000a\u000a<hr>\u000a\u000a<p>The general advice is to avoid modifying one view inplace with another if they overlap. This includes the operators <code>-=</code>, <code>*=</code>, etc. and using the <code>out</code> parameter in universal functions (like <code>np.subtract</code> and <code>np.multiply</code>) to write back to one of the arrays.</p>\u000a
p97
sVquestion_id
p98
I35036126
sVlast_activity_date
p99
I1487456931
sVcreation_date
p100
I1453895257
sVscore
p101
I78
sVowner
p102
(dp103
Vuser_id
p104
I3923281
sVprofile_image
p105
Vhttps://i.stack.imgur.com/CNpoa.jpg?s=128&g=1
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I47212
sVlink
p110
Vhttp://stackoverflow.com/users/3923281/alex-riley
p111
sVdisplay_name
p112
VAlex Riley
p113
ssVis_accepted
p114
I01
sVlast_edit_date
p115
I1487456931
sVanswer_id
p116
I35036528
sa(dp117
Vbody
p118
V<p>The array you are showing is the Fourier Transform coefficients of the audio signal. These coefficients can be used to get the frequency content of the audio. The FFT is defined for complex valued input functions, so the coefficients you get out will be imaginary numbers even though your input is all real values. In order to get the amount of power in each frequency, you need to calculate the magnitude of the FFT coefficient for each frequency. This is <strong>not</strong> just the real component of the coefficient, you need to calculate the square root of the sum of the square of its real and imaginary components. That is, if your coefficient is a + b*j, then its magnitude is sqrt(a^2 + b^2).</p>\u000a\u000a<p>Once you have calculated the magnitude of each FFT coefficient, you need to figure out which audio frequency each FFT coefficient belongs to. An N point FFT will give you the frequency content of your signal at N equally spaced frequencies, starting at 0. Because your sampling frequency is 44100 samples / sec. and the number of points in your FFT is 256, your frequency spacing is 44100 / 256 = 172 Hz (approximately)</p>\u000a\u000a<p>The first coefficient in your array will be the 0 frequency coefficient. That is basically the average power level for all frequencies. The rest of your coefficients will count up from 0 in multiples of 172 Hz until you get to 128. In an FFT, you only can measure frequencies up to half your sample points. Read these links on the <a href="http://mathworld.wolfram.com/NyquistFrequency.html" rel="noreferrer" title="MathWorld: Nyquist Frequency">Nyquist Frequency</a> and <a href="http://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem" rel="noreferrer" title="Wikipedia: Nyquist-Shannon Sampling Theorem">Nyquist-Shannon Sampling Theorem</a> if you are a glutton for punishment and need to know why, but the basic result is that your lower frequencies are going to be replicated or <a href="http://en.wikipedia.org/wiki/Aliasing" rel="noreferrer" title="Wikipedia: Aliasing">aliased</a> in the higher frequency buckets. So the frequencies will start from 0, increase by 172 Hz for each coefficient up to the N/2 coefficient, then decrease by 172 Hz until the N - 1 coefficient.</p>\u000a\u000a<p>That should be enough information to get you started. If you would like a much more approachable introduction to FFTs than is given on Wikipedia, you could try <a href="http://rads.stackoverflow.com/amzn/click/0131089897" rel="noreferrer" title="Amazon: Understanding Digital Signal Processing: 2nd Ed.">Understanding Digital Signal Processing: 2nd Ed.</a>. It was very helpful for me.</p>\u000a\u000a<p>So that is what those numbers represent. Converting to a percentage of height could be done by scaling each frequency component magnitude by the sum of all component magnitudes. Although, that would only give you a representation of the relative frequency distribution, and not the actual power for each frequency. You could try scaling by the maximum magnitude possible for a frequency component, but I'm not sure that that would display very well. The quickest way to find a workable scaling factor would be to experiment on loud and soft audio signals to find the right setting.</p>\u000a\u000a<p>Finally, you should be averaging the two channels together if you want to show the frequency content of the entire audio signal as a whole. You are mixing the stereo audio into mono audio and showing the combined frequencies. If you want two separate displays for right and left frequencies, then you will need to perform the Fourier Transform on each channel separately.</p>\u000a
p119
sVquestion_id
p120
I604453
sVlast_activity_date
p121
I1485901090
sVcreation_date
p122
I1236043183
sVscore
p123
I175
sVowner
p124
(dp125
Vuser_id
p126
I35881
sVprofile_image
p127
Vhttps://www.gravatar.com/avatar/95ee2befbddbd112fbbd1c8b500fcfc9?s=128&d=identicon&r=PG
p128
sVuser_type
p129
Vregistered
p130
sVreputation
p131
I10126
sVlink
p132
Vhttp://stackoverflow.com/users/35881/a-levy
p133
sVaccept_rate
p134
I88
sVdisplay_name
p135
VA. Levy
p136
ssVis_accepted
p137
I01
sVlast_edit_date
p138
I1485901090
sVanswer_id
p139
I604756
sa(dp140
Vbody
p141
V<p>I would suggest reading <a href="https://www.python.org/dev/peps/pep-0483/">PEP 483</a> and <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> and watching <a href="https://www.youtube.com/watch?v=2wDvzy6Hgxg">this</a> presentation by Guido on Type Hinting. In addition, more examples on Type Hints can be found at their <a class='doc-link' href="http://stackoverflow.com/documentation/python/1766/type-hints#t=201607251908319482596">documentation topic</a>.</p>\u000a\u000a<p><strong>In a nutshell</strong>: <strong>Type hinting is <em>literally what it means</em>, you hint the type of the object(s) you're using</strong>. </p>\u000a\u000a<p>Due to the highly <strong>dynamic</strong> nature of Python, <em>inferring or checking the type</em> of an object being used is especially hard. This fact makes it hard for developers to understand what exactly is going on in code they haven't written and, most importantly, for type checking tools found in many IDEs [PyCharm, PyDev come to mind] that are limited due to the fact that they don't have any indicator of what type the objects are. As a result they resort to trying to infer the type with (as mentioned in the presentation) around 50% success rate. </p>\u000a\u000a<hr>\u000a\u000a<p>To take two important slides from the Type Hinting presentation:</p>\u000a\u000a<h3><strong><em>Why Type Hints?</em></strong></h3>\u000a\u000a<ol>\u000a<li><strong>Helps Type Checkers:</strong> By hinting at what type you want the object to be the type checker can easily detect if, for instance, you're passing an object with a type that isn't expected.</li>\u000a<li><strong>Helps with documentation:</strong> A third person viewing your code will know what is expected where, ergo, how to use it without getting them <code>TypeErrors</code>. </li>\u000a<li><strong>Helps IDEs develop more accurate and robust tools:</strong> Development Environments will be better suited at suggesting appropriate methods when know what type your object is. You have probably experienced this with some IDE at some point, hitting the <code>.</code> and having methods/attributes pop up which aren't defined for an object.</li>\u000a</ol>\u000a\u000a<h3><strong><em>Why Static Type Checkers?</em></strong></h3>\u000a\u000a<ul>\u000a<li><strong>Find bugs sooner</strong>: This is self evident, I believe.</li>\u000a<li><strong>The larger your project the more you need it</strong>: Again, makes sense. Static languages offer a robustness and control that\u000adynamic languages lack. The bigger and more complex your application becomes the more control and predictability (from\u000aa behavioral aspect) you require.</li>\u000a<li><strong>Large teams are already running static analysis</strong>: I'm guessing this verifies the first two points.</li>\u000a</ul>\u000a\u000a<p><strong>As a closing note for this small introduction</strong>: This is an <strong>optional</strong> feature and from what I understand it has been introduced in order to reap some of the benefits of static typing. </p>\u000a\u000a<p>You generally <strong>do not</strong> need to worry about it and <strong>definitely</strong> don't need to use it (especially in cases where you use Python as an auxiliary scripting language). It should be helpful when developing large projects as <em>it offers much needed robustness, control and additional debugging capabilities</em>.</p>\u000a\u000a<hr>\u000a\u000a<h2><strong>Type Hinting with mypy</strong>:</h2>\u000a\u000a<p>In order to make this answer more complete, I think a little demonstration would be suitable. I'll be using <a href="http://mypy-lang.org/"><code>mypy</code></a>, the library which inspired Type Hints as they are presented in the PEP. This is mainly written for anybody bumping into this question and wondering where to begin.</p>\u000a\u000a<p>Before I do that let reiterate the following: <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a> doesn't enforce anything; it is simply setting a direction for function\u000aannotations and proposing guidelines for <strong>how</strong> type checking can/should be performed. You can annotate your functions and\u000ahint as many things as you want; your scripts will still run regardless of the presence of annotations.</p>\u000a\u000a<p>Anyways, as noted in the PEP, hinting types should generally take three forms:</p>\u000a\u000a<ul>\u000a<li>Function annotations. (<a href="https://www.python.org/dev/peps/pep-3107/">PEP 3107</a>)</li>\u000a<li>Stub files for built-in/user modules. (Ideal future for type checking)</li>\u000a<li>Special <code># type: type</code> comments that complement the first two forms. (See: <strong><a href="http://stackoverflow.com/questions/39971929/what-are-variable-annotations-in-python-3-6/39973133#39973133">What are variable annotations in Python 3.6?</a></strong> for an alternative to <code># type: type</code> comments)</li>\u000a</ul>\u000a\u000a<p>Additionally, you'll want to use type hints in conjunction with the new <a href="https://docs.python.org/3/library/typing.html"><code>typing</code></a> module introduced with <code>Py3.5</code>. The typing module will save your life in this situation; in it, many (additional) ABCs are defined along with helper functions and decorators for use in static checking. Most <code>ABCs</code> in <code>collections.abc</code> are included but in a <code>Generic</code> form in order to allow subscription (by defining a <code>__getitem__()</code> method).</p>\u000a\u000a<p>For anyone interested in a more in-depth explanation of these, the <a href="http://mypy.readthedocs.org/en/latest/"><code>mypy documentation</code></a> is written very nicely and has a lot of code samples demonstrating/describing the functionality of their checker; it is definitely worth a read.</p>\u000a\u000a<h3>Function annotations and special comments:</h3>\u000a\u000a<p>First, it's interesting to observe some of the behavior we can get when using special comments. Special <code># type: type</code> comments\u000acan be added during variable assignments to indicate the type of an object if one cannot be directly inferred. Simple assignments are\u000agenerally easily inferred but others, like lists (with regard to their contents), cannot.</p>\u000a\u000a<p><strong>Note:</strong> If we want to use any derivative of <code>Containers</code> and need to specify the contents for that container we <strong>must</strong> use the <strong><em>generic</em></strong> types from the <code>typing</code> module. <strong>These support indexing.</strong></p>\u000a\u000a<pre><code># generic List, supports indexing.\u000afrom typing import List\u000a\u000a# In this case, the type is easily inferred as type: int.\u000ai = 0\u000a\u000a# Even though the type can be inferred as of type list\u000a# there is no way to know the contents of this list.\u000a# By using type: List[str] we indicate we want to use a list of strings.\u000aa = []  # type: List[str]\u000a\u000a# Appending an int to our list\u000a# is statically not correct.\u000aa.append(i)\u000a\u000a# Appending a string is fine.\u000aa.append("i")\u000a\u000aprint(a)  # [0, 'i']\u000a</code></pre>\u000a\u000a<p>If we add these commands to a file and execute them with our interpreter, everything works just fine and <code>print(a)</code> just prints\u000athe contents of list <code>a</code>. The <code># type</code> comments have been discarded, <em>treated as plain comments which have no additional semantic meaning</em>.</p>\u000a\u000a<p>By running this with <code>mypy</code>, on the other hand, we get the following responce:</p>\u000a\u000a<pre><code>(Python3)jimmi@jim: mypy typeHintsCode.py\u000atypesInline.py:14: error: Argument 1 to "append" of "list" has incompatible type "int"; expected "str"\u000a</code></pre>\u000a\u000a<p>Indicating that a list of <code>str</code> objects cannot contain an <code>int</code>, which, statically speaking, is sound. This can be fixed by either abiding to the type of <code>a</code> and only appending <code>str</code> objects or by changing the type of the contents of <code>a</code> to indicate that any value is acceptable (Intuitively performed with <code>List[Any]</code> after <code>Any</code> has been imported from <code>typing</code>).</p>\u000a\u000a<p>Function annotations are added in the form <code>param_name : type</code> after each parameter in your function signature and a return type is specified using the <code>-&gt; type</code> notation before the ending function colon; all annotations are stored in the <code>__annotations__</code> attribute for that function in a handy dictionary form. Using a trivial example (which doesn't require extra types from the <code>typing</code> module):</p>\u000a\u000a<pre><code>def annotated(x: int, y: str) -&gt; bool:\u000a    return x &lt; y\u000a</code></pre>\u000a\u000a<p>The <code>annotated.__annotations__</code> attribute now has the following values:</p>\u000a\u000a<pre><code>{'y': &lt;class 'str'&gt;, 'return': &lt;class 'bool'&gt;, 'x': &lt;class 'int'&gt;}\u000a</code></pre>\u000a\u000a<p>If we're a complete noobie, or we are familiar with <code>Py2.7</code> concepts and are consequently unaware of the <code>TypeError</code> lurking in the comparison of <code>annotated</code>, we can perform another static check, catch the error and save us some trouble:</p>\u000a\u000a<pre><code>(Python3)jimmi@jim: mypy typeHintsCode.py\u000atypeFunction.py: note: In function "annotated":\u000atypeFunction.py:2: error: Unsupported operand types for &gt; ("str" and "int")\u000a</code></pre>\u000a\u000a<p>Among other things, calling the function with invalid arguments will also get caught:</p>\u000a\u000a<pre><code>annotated(20, 20)\u000a\u000a# mypy complains:\u000atypeHintsCode.py:4: error: Argument 2 to "annotated" has incompatible type "int"; expected "str"\u000a</code></pre>\u000a\u000a<p>These can be extended to basically any use-case and the errors caught extend further than basic calls and operations. The types you\u000acan check for are really flexible and I have merely given a small sneak peak of its potential. A look in the <code>typing</code> module, the\u000aPEPs or the <code>mypy</code> docs will give you a more comprehensive idea of the capabilities offered.</p>\u000a\u000a<h3>Stub Files:</h3>\u000a\u000a<p>Stub files can be used in two different non mutually exclusive cases:</p>\u000a\u000a<ul>\u000a<li>You need to type check a module for which you do not want to directly alter the function signatures</li>\u000a<li>You want to write modules and have type-checking but additionally want to separate annotations from content.</li>\u000a</ul>\u000a\u000a<p>What stub files (with an extension of <code>.pyi</code>) are is an annotated interface of the module you are making/want to use. They contain\u000athe signatures of the functions you want to type-check with the body of the functions discarded. To get a feel of this, given a set\u000aof three random functions in a module named <code>randfunc.py</code>:</p>\u000a\u000a<pre><code>def message(s):\u000a    print(s)\u000a\u000adef alterContents(myIterable):\u000a    return [i for i in myIterable if i % 2 == 0]\u000a\u000adef combine(messageFunc, itFunc):\u000a    messageFunc("Printing the Iterable")\u000a    a = alterContents(range(1, 20))\u000a    return set(a)\u000a</code></pre>\u000a\u000a<p>We can create a stub file <code>randfunc.pyi</code>, in which we can place some restrictions if we wish to do so. The downside is that\u000asomebody viewing the source without the stub won't really get that annotation assistance when trying to understand what is supposed\u000ato be passed where.</p>\u000a\u000a<p>Anyway, the structure of a stub file is pretty simplistic: Add all function definitions with empty bodies (<code>pass</code> filled) and\u000asupply the annotations based on your requirements. Here, let's assume we only want to work with <code>int</code> types for our Containers.</p>\u000a\u000a<pre><code># Stub for randfucn.py\u000afrom typing import Iterable, List, Set, Callable\u000a\u000adef message(s: str) -&gt; None: pass\u000a\u000adef alterContents(myIterable: Iterable[int])-&gt; List[int]: pass\u000a\u000adef combine(\u000a    messageFunc: Callable[[str], Any],\u000a    itFunc: Callable[[Iterable[int]], List[int]]\u000a)-&gt; Set[int]: pass\u000a</code></pre>\u000a\u000a<p>The <code>combine</code> function gives an indication of why you might want to use annotations in a different file, they some times clutter up\u000athe code and reduce readability (big no-no for Python). You could of course use type aliases but that sometime confuses more than it\u000ahelps (so use them wisely).</p>\u000a\u000a<hr>\u000a\u000a<p>This should get you familiarized with the basic concepts of Type Hints in Python. Even though the type checker used has been\u000a<code>mypy</code> you should gradually start to see more of them pop-up, some internally in IDEs (<a href="http://blog.jetbrains.com/pycharm/2015/11/python-3-5-type-hinting-in-pycharm-5/"><strong>PyCharm</strong></a>,) and others as standard python modules.\u000aI'll try and add additional checkers/related packages in the following list when and if I find them (or if suggested).</p>\u000a\u000a<p><strong><em>Checkers I know of</em></strong>:</p>\u000a\u000a<ul>\u000a<li><a href="http://mypy-lang.org/"><strong>Mypy</strong></a>: as described here.</li>\u000a<li><a href="https://github.com/google/pytype"><strong>PyType</strong></a>: By Google, uses different notation from what I gather, probably worth a look.</li>\u000a</ul>\u000a\u000a<p><strong><em>Related Packages/Projects</em></strong>:</p>\u000a\u000a<ul>\u000a<li><a href="https://github.com/python/typeshed/"><strong>typeshed:</strong></a> Official Python repo housing an assortment of stub files for the standard library. </li>\u000a</ul>\u000a\u000a<p>The <code>typeshed</code> project is actually one of the best places you can look to see how type hinting might be used in a project of your own. Let's take as an example <a href="https://github.com/python/typeshed/blob/master/stdlib/3/collections.pyi#L78">the <code>__init__</code> dunders of the <code>Counter</code> class</a> in the corresponding <code>.pyi</code> file: </p>\u000a\u000a<pre><code>class Counter(Dict[_T, int], Generic[_T]):\u000a        @overload\u000a        def __init__(self) -&gt; None: ...\u000a        @overload\u000a        def __init__(self, Mapping: Mapping[_T, int]) -&gt; None: ...\u000a        @overload\u000a        def __init__(self, iterable: Iterable[_T]) -&gt; None: ...\u000a</code></pre>\u000a\u000a<p><a href="http://mypy.readthedocs.org/en/latest/generics.html#defining-generic-classes">Where <code>_T = TypeVar('_T')</code> is used to define generic classes</a>. For the <code>Counter</code> class we can see that it can either take no arguments in its initializer, get a single <code>Mapping</code> from any type to an <code>int</code> <em>or</em> take an <code>Iterable</code> of any type.  </p>\u000a\u000a<hr>\u000a\u000a<p><strong>Notice</strong>: One thing I forgot to mention was that the <code>typing</code> module has been introduced on a <em>provisional basis</em>. From <strong><a href="https://www.python.org/dev/peps/pep-0411/">PEP 411</a></strong>:</p>\u000a\u000a<blockquote>\u000a  <p>A provisional package may have its API modified prior to "graduating" into a "stable" state. On one hand, this state provides the package with the benefits of being formally part of the Python distribution. On the other hand, the core development team explicitly states that no promises are made with regards to the the stability of the package's API, which may change for the next release. While it is considered an unlikely outcome, such packages may even be removed from the standard library without a deprecation period if the concerns regarding their API or maintenance prove well-founded.</p>\u000a</blockquote>\u000a\u000a<p>So take things here with a pinch of salt; I'm doubtfull it will be removed  or altered in significant ways but one can never know.</p>\u000a\u000a<p><strong>Update:</strong> As of Python <code>3.6</code> <a href="https://docs.python.org/3.6/whatsnew/3.6.html#typing">the <code>typing</code> module is now <em>stable</em></a>. Changes made will be back-ported to the Python <code>3.5.x</code>.</p>\u000a\u000a<hr>\u000a\u000a<p><sup>**</sup> Another topic altogether but valid in the scope of type-hints: <a href="https://docs.python.org/3.6/whatsnew/3.6.html#pep-526-syntax-for-variable-annotations"><code>PEP 526</code></a> is an effort to replace <code># type</code> comments by introducing new syntax which allows users to annotate the type of variables in simple <code>varname: type</code> statements. </p>\u000a
p142
sVquestion_id
p143
I32557920
sVlast_activity_date
p144
I1481793972
sVcreation_date
p145
I1442213390
sVscore
p146
I122
sVowner
p147
(dp148
Vuser_id
p149
I4952130
sVprofile_image
p150
Vhttps://i.stack.imgur.com/zCq9y.jpg?s=128&g=1
p151
sVuser_type
p152
Vregistered
p153
sVreputation
p154
I43353
sVlink
p155
Vhttp://stackoverflow.com/users/4952130/jim-fasarakis-hilliard
p156
sVaccept_rate
p157
I90
sVdisplay_name
p158
VJim Fasarakis Hilliard
p159
ssVis_accepted
p160
I01
sVlast_edit_date
p161
I1481793972
sVanswer_id
p162
I32558710
sa(dp163
Vbody
p164
V<blockquote>\u000a  <p>selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH. </p>\u000a</blockquote>\u000a\u000a<p><a href="https://github.com/mozilla/geckodriver/releases">First of all you will need to download latest executable geckodriver from here to run latest firefox using selenium</a></p>\u000a\u000a<p>Actually The Selenium client bindings tries to locate the <code>geckodriver</code> executable from the system <code>PATH</code>. You will need to add the directory containing the executable to the system path.</p>\u000a\u000a<ul>\u000a<li><p>On Unix systems you can do the following to append it to your system\u2019s search path, if you\u2019re using a bash-compatible shell:</p>\u000a\u000a<pre><code>export PATH=$PATH:/path/to/directory/of/executable/downloaded/in/previous/step\u000a</code></pre></li>\u000a<li><p>On Windows you will need to update the <strong>Path system variable to add the full directory path to the executable geckodriver</strong> <a href="https://www.google.co.in/amp/www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/amp/?client=ms-android-motorola">manually</a> or <a href="https://www.windows-commandline.com/set-path-command-line/">command line</a><strong>(don't forget to restart your system after adding executable geckodriver into system PATH to take effect)</strong>.  The principle is the same as on Unix. </p></li>\u000a</ul>\u000a\u000a<p>Now you can run your code same as you're doing as below :-</p>\u000a\u000a<pre><code>from selenium import webdriver\u000a\u000abrowser = webdriver.Firefox()\u000a</code></pre>\u000a\u000a<blockquote>\u000a  <p>selenium.common.exceptions.WebDriverException: Message: Expected browser binary location, but unable to find binary in default location, no 'moz:firefoxOptions.binary' capability provided, and no binary flag set on the command line</p>\u000a</blockquote>\u000a\u000a<p>Exception clearly states you have installed firefox some other location while Selenium is trying to find firefox and launch from default location but it couldn't find. You need to provide explicitly firefox installed binary location to launch firefox as below :-</p>\u000a\u000a<pre><code>from selenium import webdriver\u000afrom selenium.webdriver.firefox.firefox_binary import FirefoxBinary\u000a\u000abinary = FirefoxBinary('path/to/installed firefox binary')\u000abrowser = webdriver.Firefox(firefox_binary=binary)\u000a</code></pre>\u000a
p165
sVquestion_id
p166
I40208051
sVlast_activity_date
p167
I1477278732
sVcreation_date
p168
I1477264561
sVscore
p169
I94
sVowner
p170
(dp171
Vuser_id
p172
I3193455
sVprofile_image
p173
Vhttps://www.gravatar.com/avatar/47fc2c18bcbdb84eb374ca3f407c7318?s=128&d=identicon&r=PG&f=1
p174
sVuser_type
p175
Vregistered
p176
sVreputation
p177
I12194
sVlink
p178
Vhttp://stackoverflow.com/users/3193455/saurabh-gaur
p179
sVaccept_rate
p180
I88
sVdisplay_name
p181
VSaurabh Gaur
p182
ssVis_accepted
p183
I01
sVlast_edit_date
p184
I1477278732
sVanswer_id
p185
I40208762
sa(dp186
Vbody
p187
V<p>Implicit concatenation might be the cleanest solution:</p>\u000a\u000a<pre><code>s = "this is my really, really, really, really, really, really," \u005c\u000a    " really long string that I'd like to shorten."\u000a</code></pre>\u000a\u000a<p><strong>Edit</strong> On reflection I agree that Todd's suggestion to use brackets rather than line continuation is better for all the reasons he gives. The only hesitation I have is that it's relatively easy to confuse bracketed strings with tuples.</p>\u000a
p188
sVquestion_id
p189
I1874592
sVlast_activity_date
p190
I1477048394
sVcreation_date
p191
I1260372352
sVscore
p192
I57
sVowner
p193
(dp194
Vuser_id
p195
I188595
sVprofile_image
p196
Vhttps://i.stack.imgur.com/cAGdr.png?s=128&g=1
p197
sVuser_type
p198
Vregistered
p199
sVreputation
p200
I4552
sVlink
p201
Vhttp://stackoverflow.com/users/188595/michael-dunn
p202
sVaccept_rate
p203
I90
sVdisplay_name
p204
VMichael Dunn
p205
ssVis_accepted
p206
I01
sVlast_edit_date
p207
I1477048394
sVanswer_id
p208
I1874635
sa(dp209
Vcommunity_owned_date
p210
I1260439852
sVbody
p211
V<p><a href="https://en.wikipedia.org/wiki/XML-RPC" rel="nofollow noreferrer">XML-RPC</a> is part of the Python standard library:</p>\u000a\u000a<ul>\u000a<li>Python 2: <a href="https://docs.python.org/2/library/xmlrpclib.html" rel="nofollow noreferrer">xmlrpclib</a> and <a href="https://docs.python.org/2/library/simplexmlrpcserver.html" rel="nofollow noreferrer">SimpleXMLRPCServer</a></li>\u000a<li>Python 3: <a href="https://docs.python.org/3/library/xmlrpc.html" rel="nofollow noreferrer">xmlrpc</a> (both <a href="https://docs.python.org/3/library/xmlrpc.client.html" rel="nofollow noreferrer">client</a> and <a href="https://docs.python.org/3/library/xmlrpc.server.html" rel="nofollow noreferrer">server</a>)</li>\u000a</ul>\u000a
p212
sVquestion_id
p213
I1879971
sVlast_activity_date
p214
I1476843779
sVcreation_date
p215
I1260439706
sVscore
p216
I24
sVowner
p217
(dp218
Vuser_id
p219
I203858
sVprofile_image
p220
Vhttps://www.gravatar.com/avatar/187569ce881cec73990857ba7db32612?s=128&d=identicon&r=PG
p221
sVuser_type
p222
Vregistered
p223
sVreputation
p224
I19100
sVlink
p225
Vhttp://stackoverflow.com/users/203858/p%c3%a4r-wieslander
p226
sVdisplay_name
p227
VP&#228;r Wieslander
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1476843779
sVanswer_id
p231
I1880001
sa(dp232
Vbody
p233
V<p>It depends on what you are intending to do with it.</p>\u000a\u000a<p>Sets are significantly faster when it comes to determining if an object is present in the set (as in <code>x in s</code>), but are slower than lists when it comes to iterating over their contents.</p>\u000a\u000a<p>You can use the <a href="https://docs.python.org/library/timeit.html" rel="noreferrer">timeit module</a> to see which is faster for your situation.</p>\u000a
p234
sVquestion_id
p235
I2831212
sVlast_activity_date
p236
I1475144714
sVcreation_date
p237
I1273799044
sVscore
p238
I111
sVowner
p239
(dp240
Vuser_id
p241
I136540
sVprofile_image
p242
Vhttps://www.gravatar.com/avatar/a4d5888f021e337d09be5b3109c11e72?s=128&d=identicon&r=PG
p243
sVuser_type
p244
Vregistered
p245
sVreputation
p246
I66863
sVlink
p247
Vhttp://stackoverflow.com/users/136540/michael-aaron-safyan
p248
sVaccept_rate
p249
I83
sVdisplay_name
p250
VMichael Aaron Safyan
p251
ssVis_accepted
p252
I01
sVlast_edit_date
p253
I1475144714
sVanswer_id
p254
I2831242
sa(dp255
Vbody
p256
V<p>Here is an example implementation of a lazy property decorator:</p>\u000a\u000a<pre><code>def lazyprop(fn):\u000a    attr_name = '_lazy_' + fn.__name__\u000a    @property\u000a    def _lazyprop(self):\u000a        if not hasattr(self, attr_name):\u000a            setattr(self, attr_name, fn(self))\u000a        return getattr(self, attr_name)\u000a    return _lazyprop\u000a\u000a\u000aclass Test(object):\u000a\u000a    @lazyprop\u000a    def a(self):\u000a        print 'generating "a"'\u000a        return range(5)\u000a</code></pre>\u000a\u000a<p>Interactive session:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; t = Test()\u000a&gt;&gt;&gt; t.__dict__\u000a{}\u000a&gt;&gt;&gt; t.a\u000agenerating "a"\u000a[0, 1, 2, 3, 4]\u000a&gt;&gt;&gt; t.__dict__\u000a{'_lazy_a': [0, 1, 2, 3, 4]}\u000a&gt;&gt;&gt; t.a\u000a[0, 1, 2, 3, 4]\u000a</code></pre>\u000a
p257
sVquestion_id
p258
I3012421
sVlast_activity_date
p259
I1471497199
sVcreation_date
p260
I1276169228
sVscore
p261
I109
sVowner
p262
(dp263
Vuser_id
p264
I66502
sVprofile_image
p265
Vhttps://www.gravatar.com/avatar/ab87b4bc5b2d9b8f5e4fa625938bfc9a?s=128&d=identicon&r=PG
p266
sVuser_type
p267
Vregistered
p268
sVreputation
p269
I5118
sVlink
p270
Vhttp://stackoverflow.com/users/66502/mike-boers
p271
sVaccept_rate
p272
I83
sVdisplay_name
p273
VMike Boers
p274
ssVis_accepted
p275
I01
sVlast_edit_date
p276
I1471497199
sVanswer_id
p277
I3013910
sa(dp278
Vbody
p279
V<p>Have a look at this article: <a href="http://www.lshift.net/blog/2008/11/14/tracing-python-memory-leaks" rel="noreferrer">Tracing python memory leaks</a></p>\u000a\u000a<p>Also, note that the <a href="http://docs.python.org/library/gc.html" rel="noreferrer">garbage collection module</a> actually can have debug flags set. Look at the set_debug function. Additionally, look at <a href="http://stackoverflow.com/questions/1641231/python-working-around-memory-leaks/1641280#1641280">this code by Gnibbler</a> for determining the types of objects that have been created after a call.</p>\u000a
p280
sVquestion_id
p281
I1435415
sVlast_activity_date
p282
I1470171575
sVcreation_date
p283
I1253134697
sVscore
p284
I57
sVowner
p285
(dp286
Vuser_id
p287
I81179
sVprofile_image
p288
Vhttps://www.gravatar.com/avatar/d1fce11ffdac447464654ec3a79f568c?s=128&d=identicon&r=PG&f=1
p289
sVuser_type
p290
Vregistered
p291
sVreputation
p292
I62718
sVlink
p293
Vhttp://stackoverflow.com/users/81179/christophed
p294
sVaccept_rate
p295
I100
sVdisplay_name
p296
VChristopheD
p297
ssVis_accepted
p298
I01
sVlast_edit_date
p299
I1470171575
sVanswer_id
p300
I1435426
sa(dp301
Vbody
p302
V<p>If you can use <a href="http://pypi.python.org/pypi/flake8" rel="noreferrer">flake8</a> instead - which wraps pyflakes as well as the pep8 checker - a line ending with</p>\u000a\u000a<p><code>  # NOQA</code></p>\u000a\u000a<p>(in which the space is significant - 2 spaces between the end of the code and the <code>#</code>, one between it and the <code>NOQA</code> text) will tell the checker to ignore any errors on that line.</p>\u000a
p303
sVquestion_id
p304
I5033727
sVlast_activity_date
p305
I1468785114
sVcreation_date
p306
I1336512150
sVscore
p307
I142
sVowner
p308
(dp309
Vuser_id
p310
I336923
sVprofile_image
p311
Vhttps://www.gravatar.com/avatar/e616c42db7015af9c832a03ac4c2b885?s=128&d=identicon&r=PG
p312
sVuser_type
p313
Vregistered
p314
sVreputation
p315
I1594
sVlink
p316
Vhttp://stackoverflow.com/users/336923/yrstruly
p317
sVdisplay_name
p318
Vyrstruly
p319
ssVis_accepted
p320
I01
sVlast_edit_date
p321
I1468785114
sVanswer_id
p322
I10506715
sa(dp323
Vbody
p324
V<p>The correct way to do it is to provide a docstring. That way, <code>help(add)</code> will also spit out your comment.</p>\u000a\u000a<pre><code>def add(self):\u000a    """Create a new user.\u000a    Line 2 of comment...\u000a    And so on... \u000a    """\u000a</code></pre>\u000a\u000a<p>That's three double quotes to open the comment and another three double quotes to end it. You can also use any valid Python string. It doesn't need to be multiline and double quotes can be replaced by single quotes. </p>\u000a\u000a<p>See: <a href="http://www.python.org/dev/peps/pep-0257/" rel="noreferrer">PEP 257</a></p>\u000a
p325
sVquestion_id
p326
I2357230
sVlast_activity_date
p327
I1467303779
sVcreation_date
p328
I1267460589
sVscore
p329
I160
sVowner
p330
(dp331
Vuser_id
p332
I148765
sVprofile_image
p333
Vhttps://www.gravatar.com/avatar/07d542a58ef9867b4ac2309ecdac3d2e?s=128&d=identicon&r=PG
p334
sVuser_type
p335
Vregistered
p336
sVreputation
p337
I30438
sVlink
p338
Vhttp://stackoverflow.com/users/148765/chinmay-kanchi
p339
sVaccept_rate
p340
I88
sVdisplay_name
p341
VChinmay Kanchi
p342
ssVis_accepted
p343
I01
sVlast_edit_date
p344
I1467303779
sVanswer_id
p345
I2357251
sa(dp346
Vbody
p347
V<p>Use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.delete.html" rel="noreferrer">numpy.delete()</a> - returns a <em>new</em> array with sub-arrays along an axis deleted</p>\u000a\u000a<pre><code>numpy.delete(a, index)\u000a</code></pre>\u000a\u000a<p>For your specific question:</p>\u000a\u000a<pre><code>import numpy as np\u000a\u000aa = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\u000aindex = [2, 3, 6]\u000a\u000anew_a = np.delete(a, index)\u000a\u000aprint(new_a) #Prints `[1, 2, 5, 6, 8, 9]`\u000a</code></pre>\u000a\u000a<p>Note that <code>numpy.delete()</code> returns a new array since <a href="http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html" rel="noreferrer">array scalars</a> are immutable, similar to strings in Python, so each time a change is made to it, a new object is created. I.e., to quote the <code>delete()</code> <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.delete.html" rel="noreferrer">docs</a>:</p>\u000a\u000a<blockquote>\u000a  <p>"A <em>copy</em> of arr with the elements specified by obj removed. <em>Note that\u000a  delete does not occur in-place</em>..."</p>\u000a</blockquote>\u000a\u000a<p>If the code I post has output, it is the result of running the code.</p>\u000a
p348
sVquestion_id
p349
I10996140
sVlast_activity_date
p350
I1466109607
sVcreation_date
p351
I1339502286
sVscore
p352
I126
sVowner
p353
(dp354
Vuser_id
p355
I1209279
sVprofile_image
p356
Vhttps://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=128&d=identicon&r=PG
p357
sVuser_type
p358
Vregistered
p359
sVreputation
p360
I60869
sVlink
p361
Vhttp://stackoverflow.com/users/1209279/levon
p362
sVaccept_rate
p363
I91
sVdisplay_name
p364
VLevon
p365
ssVis_accepted
p366
I01
sVlast_edit_date
p367
I1466109607
sVanswer_id
p368
I10996196
sa(dp369
Vbody
p370
V<p><a href="https://github.com/conda/conda-env/">conda-env</a> now does this automatically (if pip was installed with conda).</p>\u000a\u000a<p>You can see how this works by using the export tool used for migrating an environment:</p>\u000a\u000a<pre><code>conda env export -n &lt;env-name&gt; &gt; environment.yml\u000a</code></pre>\u000a\u000a<p>The file will list both conda packages and pip packages:</p>\u000a\u000a<pre><code>name: stats\u000achannels:\u000a  - javascript\u000adependencies:\u000a  - python=3.4\u000a  - bokeh=0.9.2\u000a  - numpy=1.9.*\u000a  - nodejs=0.10.*\u000a  - flask\u000a  - pip:\u000a    - Flask-Testing\u000a</code></pre>\u000a\u000a<p>If you're looking to follow through with exporting the environment, move <code>environment.yml</code> to the new host machine and run:</p>\u000a\u000a<pre><code>conda env create -f path/to/environment.yml\u000a</code></pre>\u000a
p371
sVquestion_id
p372
I18640305
sVlast_activity_date
p373
I1464987023
sVcreation_date
p374
I1447424504
sVscore
p375
I66
sVowner
p376
(dp377
Vuser_id
p378
I2836259
sVprofile_image
p379
Vhttps://www.gravatar.com/avatar/3783d559c2d24f907375c588bd5160ff?s=128&d=identicon&r=PG
p380
sVuser_type
p381
Vregistered
p382
sVreputation
p383
I1506
sVlink
p384
Vhttp://stackoverflow.com/users/2836259/conner-xyz
p385
sVaccept_rate
p386
I68
sVdisplay_name
p387
Vconner.xyz
p388
ssVis_accepted
p389
I01
sVlast_edit_date
p390
I1464987023
sVanswer_id
p391
I33694864
sa(dp392
Vbody
p393
V<p>I think you're looking for the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndenumerate.html#numpy.ndenumerate" rel="noreferrer">ndenumerate</a>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a =numpy.array([[1,2],[3,4],[5,6]])\u000a&gt;&gt;&gt; for (x,y), value in numpy.ndenumerate(a):\u000a...  print x,y\u000a... \u000a0 0\u000a0 1\u000a1 0\u000a1 1\u000a2 0\u000a2 1\u000a</code></pre>\u000a\u000a<p>Regarding the performance. It is a bit slower than a list comprehension. </p>\u000a\u000a<pre><code>X = np.zeros((100, 100, 100))\u000a\u000a%timeit list([((i,j,k), X[i,j,k]) for i in range(X.shape[0]) for j in range(X.shape[1]) for k in range(X.shape[2])])\u000a1 loop, best of 3: 376 ms per loop\u000a\u000a%timeit list(np.ndenumerate(X))\u000a1 loop, best of 3: 570 ms per loop\u000a</code></pre>\u000a\u000a<p>If you are worried about the performance you could optimise a bit further by looking at the implementation of <code>ndenumerate</code>, which does 2 things, converting to an array and  looping. If you know you have an array, you can call the <code>.coords</code> attribute of the flat iterator. </p>\u000a\u000a<pre><code>a = X.flat\u000a%timeit list([(a.coords, x) for x in a.flat])\u000a1 loop, best of 3: 305 ms per loop\u000a</code></pre>\u000a
p394
sVquestion_id
p395
I6967463
sVlast_activity_date
p396
I1461613316
sVcreation_date
p397
I1312641111
sVscore
p398
I121
sVowner
p399
(dp400
Vuser_id
p401
I386327
sVprofile_image
p402
Vhttps://www.gravatar.com/avatar/88dd3d41d6c5d9e00c1e0a957ffaea9e?s=128&d=identicon&r=PG
p403
sVuser_type
p404
Vregistered
p405
sVreputation
p406
I9569
sVlink
p407
Vhttp://stackoverflow.com/users/386327/siggyf
p408
sVaccept_rate
p409
I100
sVdisplay_name
p410
VSiggyF
p411
ssVis_accepted
p412
I01
sVlast_edit_date
p413
I1461613316
sVanswer_id
p414
I6967491
sa(dp415
Vbody
p416
V<p>It seems the standard library doesn't address this, leaving each programmer to cobble <code>configparser</code> and <code>argparse</code> and <code>os.environ</code> all together in clunky ways.</p>\u000a
p417
sVquestion_id
p418
I6133517
sVlast_activity_date
p419
I1461438941
sVcreation_date
p420
I1309753456
sVscore
p421
I6
sVowner
p422
(dp423
Vuser_id
p424
I70157
sVprofile_image
p425
Vhttps://www.gravatar.com/avatar/da0a70a59c1e428c7780aa1cdc7a26d2?s=128&d=identicon&r=PG
p426
sVuser_type
p427
Vregistered
p428
sVreputation
p429
I11443
sVlink
p430
Vhttp://stackoverflow.com/users/70157/bignose
p431
sVaccept_rate
p432
I55
sVdisplay_name
p433
Vbignose
p434
ssVis_accepted
p435
I01
sVlast_edit_date
p436
I1461438941
sVanswer_id
p437
I6567266
sa(dp438
Vbody
p439
V<p>Here's the working version of the code in question (requires at least version Matplotlib 1.1.0 from 2011-11-14):</p>\u000a\u000a<pre><code>import numpy as np\u000aimport matplotlib.pyplot as plt\u000a\u000aplt.axis([0, 10, 0, 1])\u000aplt.ion()\u000a\u000afor i in range(10):\u000a    y = np.random.random()\u000a    plt.scatter(i, y)\u000a    plt.pause(0.05)\u000a\u000awhile True:\u000a    plt.pause(0.05)\u000a</code></pre>\u000a\u000a<p>Note some of the changes: </p>\u000a\u000a<ol>\u000a<li>Call <code>plt.ion()</code> in order to enable interactive plotting. <code>plt.show(block=False)</code> is no longer available.</li>\u000a<li>Call <code>plt.pause(0.05)</code> to both draw the new data and it runs the GUI's event loop (allowing for mouse interaction).</li>\u000a</ol>\u000a\u000a<p>The while loop at the end is to keep the window up after all data is plotted.</p>\u000a
p440
sVquestion_id
p441
I11874767
sVlast_activity_date
p442
I1460568894
sVcreation_date
p443
I1364661434
sVscore
p444
I141
sVowner
p445
(dp446
Vuser_id
p447
I1510289
sVprofile_image
p448
Vhttps://i.stack.imgur.com/UZr9s.png?s=128&g=1
p449
sVuser_type
p450
Vregistered
p451
sVreputation
p452
I4683
sVlink
p453
Vhttp://stackoverflow.com/users/1510289/velimir-mlaker
p454
sVaccept_rate
p455
I100
sVdisplay_name
p456
VVelimir Mlaker
p457
ssVis_accepted
p458
I01
sVlast_edit_date
p459
I1460568894
sVanswer_id
p460
I15720891
sa(dp461
Vbody
p462
V<p>The script I use is quite similar; I post it here as an example of how to use the email.* modules to generate MIME messages; so this script can be easily modified to attach pictures, etc.</p>\u000a\u000a<p>I rely on my ISP to add the date time header.</p>\u000a\u000a<p>My ISP requires me to use a secure smtp connection to send mail, I rely on the ssmtplib module (downloadable at <a href="http://www1.cs.columbia.edu/~db2501/ssmtplib.py" rel="noreferrer">http://www1.cs.columbia.edu/~db2501/ssmtplib.py</a>)</p>\u000a\u000a<p>As in your script, the username and password, (given dummy values below), used to authenticate on the SMTP server, are in plain text in the source. This is a security weakness; but the best alternative depends on how careful you need (want?) to be about protecting these.</p>\u000a\u000a<p>=======================================</p>\u000a\u000a<pre><code>#! /usr/local/bin/python\u000a\u000a\u000aSMTPserver = 'smtp.att.yahoo.com'\u000asender =     'me@my_email_domain.net'\u000adestination = ['recipient@her_email_domain.com']\u000a\u000aUSERNAME = "USER_NAME_FOR_INTERNET_SERVICE_PROVIDER"\u000aPASSWORD = "PASSWORD_INTERNET_SERVICE_PROVIDER"\u000a\u000a# typical values for text_subtype are plain, html, xml\u000atext_subtype = 'plain'\u000a\u000a\u000acontent="""\u005c\u000aTest message\u000a"""\u000a\u000asubject="Sent from Python"\u000a\u000aimport sys\u000aimport os\u000aimport re\u000a\u000afrom smtplib import SMTP_SSL as SMTP       # this invokes the secure SMTP protocol (port 465, uses SSL)\u000a# from smtplib import SMTP                  # use this for standard SMTP protocol   (port 25, no encryption)\u000a\u000a# old version\u000a# from email.MIMEText import MIMEText\u000afrom email.mime.text import MIMEText\u000a\u000atry:\u000a    msg = MIMEText(content, text_subtype)\u000a    msg['Subject']=       subject\u000a    msg['From']   = sender # some SMTP servers will do this automatically, not all\u000a\u000a    conn = SMTP(SMTPserver)\u000a    conn.set_debuglevel(False)\u000a    conn.login(USERNAME, PASSWORD)\u000a    try:\u000a        conn.sendmail(sender, destination, msg.as_string())\u000a    finally:\u000a        conn.quit()\u000a\u000aexcept Exception, exc:\u000a    sys.exit( "mail failed; %s" % str(exc) ) # give a error message\u000a</code></pre>\u000a
p463
sVquestion_id
p464
I64505
sVlast_activity_date
p465
I1458719755
sVcreation_date
p466
I1221499480
sVscore
p467
I86
sVowner
p468
(dp469
Vuser_id
p470
I8935
sVprofile_image
p471
Vhttps://www.gravatar.com/avatar/29e50206ac16ef97be15418557014197?s=128&d=identicon&r=PG
p472
sVuser_type
p473
Vregistered
p474
sVreputation
p475
I3295
sVlink
p476
Vhttp://stackoverflow.com/users/8935/vincent-marchetti
p477
sVdisplay_name
p478
VVincent Marchetti
p479
ssVis_accepted
p480
I01
sVlast_edit_date
p481
I1458719755
sVanswer_id
p482
I64890
sa(dp483
Vbody
p484
V<p>It is not very easy to install Tkinter locally to use with system-provided Python. You may build it from sources, but this is usually not the best idea with a binary package-based distro you're apparently running.</p>\u000a\u000a<p>It's safer to <code>apt-get install python-tk</code> on your machine(s).\u000a(Works on Debian-derived distributions like for Ubuntu; refer to your package manager and package list on other distributions.)</p>\u000a
p485
sVquestion_id
p486
I4783810
sVlast_activity_date
p487
I1458403841
sVcreation_date
p488
I1295885069
sVscore
p489
I141
sVowner
p490
(dp491
Vuser_id
p492
I223424
sVprofile_image
p493
Vhttps://www.gravatar.com/avatar/e97c628a88337b15e76a4690e916a2cd?s=128&d=identicon&r=PG
p494
sVuser_type
p495
Vregistered
p496
sVreputation
p497
I21684
sVlink
p498
Vhttp://stackoverflow.com/users/223424/9000
p499
sVaccept_rate
p500
I74
sVdisplay_name
p501
V9000
p502
ssVis_accepted
p503
I01
sVlast_edit_date
p504
I1458403841
sVanswer_id
p505
I4784123
sa(dp506
Vbody
p507
V<p>Square brackets are <a href="http://docs.python.org/tutorial/datastructures.html#more-on-lists" rel="noreferrer">lists</a> while parentheses are <a href="http://docs.python.org/library/functions.html#tuple" rel="noreferrer">tuples</a>.</p>\u000a\u000a<p>A list is mutable, meaning you can change its contents:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = [1,2]\u000a&gt;&gt;&gt; x.append(3)\u000a&gt;&gt;&gt; x\u000a[1, 2, 3]\u000a</code></pre>\u000a\u000a<p>while tuples are not:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = (1,2)\u000a&gt;&gt;&gt; x\u000a(1, 2)\u000a&gt;&gt;&gt; x.append(3)\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aAttributeError: 'tuple' object has no attribute 'append'\u000a</code></pre>\u000a\u000a<p>The other main difference is that a tuple is hashable, meaning that you can use it as a key to a dictionary, among other things. For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = (1,2)\u000a&gt;&gt;&gt; y = [1,2]\u000a&gt;&gt;&gt; z = {}\u000a&gt;&gt;&gt; z[x] = 3\u000a&gt;&gt;&gt; z\u000a{(1, 2): 3}\u000a&gt;&gt;&gt; z[y] = 4\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: unhashable type: 'list'\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Note that, as many people have pointed out, you can add tuples together. For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = (1,2)\u000a&gt;&gt;&gt; x += (3,)\u000a&gt;&gt;&gt; x\u000a(1, 2, 3)\u000a</code></pre>\u000a\u000a<p>However, <strong>this does not mean tuples are mutable</strong>. In the example above, a <em>new</em> tuple is constructed by adding together the two tuples as arguments. The original tuple is not modified. To demonstrate this, consider the following:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = (1,2)\u000a&gt;&gt;&gt; y = x\u000a&gt;&gt;&gt; x += (3,)\u000a&gt;&gt;&gt; x\u000a(1, 2, 3)\u000a&gt;&gt;&gt; y\u000a(1, 2)\u000a</code></pre>\u000a\u000a<p>Whereas, if you were to construct this same example with a list, <code>y</code> would also be updated:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = [1, 2]\u000a&gt;&gt;&gt; y = x\u000a&gt;&gt;&gt; x += [3]\u000a&gt;&gt;&gt; x\u000a[1, 2, 3]\u000a&gt;&gt;&gt; y\u000a[1, 2, 3]\u000a</code></pre>\u000a
p508
sVquestion_id
p509
I8900166
sVlast_activity_date
p510
I1456342788
sVcreation_date
p511
I1326827061
sVscore
p512
I164
sVowner
p513
(dp514
Vuser_id
p515
I624900
sVprofile_image
p516
Vhttps://www.gravatar.com/avatar/dd56da509c21eebb967777a9dbcce437?s=128&d=identicon&r=PG
p517
sVuser_type
p518
Vregistered
p519
sVreputation
p520
I34937
sVlink
p521
Vhttp://stackoverflow.com/users/624900/jterrace
p522
sVaccept_rate
p523
I88
sVdisplay_name
p524
Vjterrace
p525
ssVis_accepted
p526
I01
sVlast_edit_date
p527
I1456342788
sVanswer_id
p528
I8900189
sa(dp529
Vbody
p530
V<p>Check the docs <a href="http://docs.python.org/reference/lexical_analysis.html#encoding-declarations" rel="noreferrer">here</a>: </p>\u000a\u000a<p>"If a comment in the first or second line of the Python script matches the regular expression <code>coding[=:]\u005cs*([-\u005cw.]+)</code>, this comment is processed as an encoding declaration"</p>\u000a\u000a<p>"The recommended forms of this expression are</p>\u000a\u000a<pre><code># -*- coding: &lt;encoding-name&gt; -*-\u000a</code></pre>\u000a\u000a<p>which is recognized also by GNU Emacs, and</p>\u000a\u000a<pre><code># vim:fileencoding=&lt;encoding-name&gt;\u000a</code></pre>\u000a\u000a<p>which is recognized by Bram Moolenaar\u2019s VIM."</p>\u000a\u000a<p>So, you can put pretty much anything before the "coding" part, but stick to "coding" (with no prefix) if you want to be 100% python-docs-recommendation-compatible.</p>\u000a\u000a<p>More specifically, you need to use whatever is recognized by Python <em>and the specific editing software you use</em> (if it needs/accepts anything at all). E.g. the <code>coding</code> form is recognized (out of the box) by GNU Emacs but not Vim (yes, without a universal agreement, it's essentially a <a href="https://en.wikipedia.org/wiki/Turf_war" rel="noreferrer">turf war</a>).</p>\u000a
p531
sVquestion_id
p532
I728891
sVlast_activity_date
p533
I1456228890
sVcreation_date
p534
I1239178841
sVscore
p535
I100
sVowner
p536
(dp537
Vuser_id
p538
I12166
sVprofile_image
p539
Vhttps://www.gravatar.com/avatar/8ae44dc366eacfc7e7eede0ae0ac065c?s=128&d=identicon&r=PG
p540
sVuser_type
p541
Vregistered
p542
sVreputation
p543
I25538
sVlink
p544
Vhttp://stackoverflow.com/users/12166/rafa%c5%82-dowgird
p545
sVaccept_rate
p546
I100
sVdisplay_name
p547
VRafa\u0142 Dowgird
p548
ssVis_accepted
p549
I01
sVlast_edit_date
p550
I1456228890
sVanswer_id
p551
I729016
sa(dp552
Vbody
p553
V<p>Try the (unofficial) binaries in this site:</p>\u000a\u000a<p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy">http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy</a></p>\u000a\u000a<p>You can get the newest <code>numpy</code> x64 with or without Intel MKL libs for Python 2.7 or Python 3.</p>\u000a
p554
sVquestion_id
p555
I11200137
sVlast_activity_date
p556
I1455247517
sVcreation_date
p557
I1340678880
sVscore
p558
I149
sVowner
p559
(dp560
Vuser_id
p561
I754991
sVprofile_image
p562
Vhttps://www.gravatar.com/avatar/345fd2a0955fbab272da7ee594cbe7c1?s=128&d=identicon&r=PG
p563
sVuser_type
p564
Vregistered
p565
sVreputation
p566
I19235
sVlink
p567
Vhttp://stackoverflow.com/users/754991/jbernardo
p568
sVaccept_rate
p569
I92
sVdisplay_name
p570
VJBernardo
p571
ssVis_accepted
p572
I01
sVlast_edit_date
p573
I1455247517
sVanswer_id
p574
I11200146
sa(dp575
Vbody
p576
V<p>Basically, because python is slightly lenient in backslash processing. Quoting from <a href="https://docs.python.org/2.0/ref/strings.html">https://docs.python.org/2.0/ref/strings.html</a> :</p>\u000a\u000a<blockquote>\u000a  <p>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., <em>the backslash is left in the string</em>.</p>\u000a</blockquote>\u000a\u000a<p>(Emphasis in the original)</p>\u000a\u000a<p>Therefore, in python, it isn't that three backslashes are equal to four, it's that when you follow backslash with a character like <code>?</code>, the two together come through as two characters, because <code>\u005c?</code> is not a recognized escape sequence.</p>\u000a
p577
sVquestion_id
p578
I35121288
sVlast_activity_date
p579
I1454286827
sVcreation_date
p580
I1454286827
sVscore
p581
I83
sVowner
p582
(dp583
Vuser_id
p584
I107331
sVprofile_image
p585
Vhttps://www.gravatar.com/avatar/cf6d0868b2b4c69bac3e6f265a32b6a7?s=128&d=identicon&r=PG
p586
sVuser_type
p587
Vregistered
p588
sVreputation
p589
I16986
sVlink
p590
Vhttp://stackoverflow.com/users/107331/daniel-martin
p591
sVaccept_rate
p592
I88
sVdisplay_name
p593
VDaniel Martin
p594
ssVis_accepted
p595
I01
sVanswer_id
p596
I35121348
sa(dp597
Vbody
p598
V<p>You have to be very careful when using the <code>timeit</code> module in Python.</p>\u000a\u000a<pre><code>python -m timeit -s 'import random;a=range(10000);random.shuffle(a)' 'a.sort();a[-1]'\u000a</code></pre>\u000a\u000a<p>Here the initialisation code runs once to produce a randomised array <code>a</code>. Then the rest of the code is run several times. The first time it sorts the array, but every other time you are calling the sort method on an already sorted array. Only the fastest time is returned, so you are actually timing how long it takes Python to sort an already sorted array.</p>\u000a\u000a<p>Part of Python's sort algorithm is to detect when the array is already partly or completely sorted. When completely sorted it simply has to scan once through the array to detect this and then it stops.</p>\u000a\u000a<p>If instead you tried:</p>\u000a\u000a<pre><code>python -m timeit -s 'import random;a=range(100000);random.shuffle(a)' 'sorted(a)[-1]'\u000a</code></pre>\u000a\u000a<p>then the sort happens on every timing loop and you can see that the time for sorting an array is indeed much longer than to just find the maximum value.</p>\u000a\u000a<p><strong>Edit:</strong> @skyking's <a href="http://stackoverflow.com/a/35015156/641833">answer</a> explains the part I left unexplained: <code>a.sort()</code> knows it is working on a list so can directly access the elements. <code>max(a)</code> works on any arbitrary iterable so has to use generic iteration.</p>\u000a
p599
sVquestion_id
p600
I35014951
sVlast_activity_date
p601
I1453971271
sVcreation_date
p602
I1453815562
sVscore
p603
I121
sVowner
p604
(dp605
Vuser_id
p606
I107660
sVprofile_image
p607
Vhttps://www.gravatar.com/avatar/0167bade38130f13a5fc468c10388d9d?s=128&d=identicon&r=PG
p608
sVuser_type
p609
Vregistered
p610
sVreputation
p611
I46101
sVlink
p612
Vhttp://stackoverflow.com/users/107660/duncan
p613
sVdisplay_name
p614
VDuncan
p615
ssVis_accepted
p616
I01
sVlast_edit_date
p617
I1453971271
sVanswer_id
p618
I35015128
sa(dp619
Vbody
p620
V<p>You can create a folder with <a href="http://docs.python.org/3/library/os.html?highlight=os.makedirs#os.makedirs" rel="noreferrer">os.makedirs()</a><br>\u000aand use <a href="http://docs.python.org/3/library/os.path.html?highlight=os.path.exists#os.path.exists" rel="noreferrer">os.path.exists()</a> to see if it already exists:</p>\u000a\u000a<pre><code>newpath = r'C:\u005cProgram Files\u005carbitrary' \u000aif not os.path.exists(newpath):\u000a    os.makedirs(newpath)\u000a</code></pre>\u000a\u000a<p>If you're trying to make an installer: <a href="http://www.advancedinstaller.com/" rel="noreferrer">Windows Installer</a> does a lot of work for you.</p>\u000a
p621
sVquestion_id
p622
I1274405
sVlast_activity_date
p623
I1444662876
sVcreation_date
p624
I1250196217
sVscore
p625
I156
sVowner
p626
(dp627
Vuser_id
p628
I350106
sVprofile_image
p629
Vhttps://www.gravatar.com/avatar/dfe88469b75efc87cbcbbbc2a975850a?s=128&d=identicon&r=PG
p630
sVuser_type
p631
Vregistered
p632
sVreputation
p633
I10313
sVlink
p634
Vhttp://stackoverflow.com/users/350106/mcandre
p635
sVaccept_rate
p636
I70
sVdisplay_name
p637
Vmcandre
p638
ssVis_accepted
p639
I01
sVlast_edit_date
p640
I1444662876
sVanswer_id
p641
I1274465
sa(dp642
Vbody
p643
V<p>Fabric uses the following syntax for passing arguments to tasks:</p>\u000a\u000a<pre><code> fab task:'hello world'\u000a fab task:something='hello'\u000a fab task:foo=99,bar=True\u000a fab task:foo,bar\u000a</code></pre>\u000a\u000a<p>You can read more about it in <a href="http://docs.fabfile.org/en/latest/usage/fab.html#per-task-arguments" rel="noreferrer">Fabric docs</a>.</p>\u000a
p644
sVquestion_id
p645
I8960777
sVlast_activity_date
p646
I1439053367
sVcreation_date
p647
I1327233604
sVscore
p648
I158
sVowner
p649
(dp650
Vuser_id
p651
I380625
sVprofile_image
p652
Vhttps://i.stack.imgur.com/fE2Qd.jpg?s=128&g=1
p653
sVuser_type
p654
Vregistered
p655
sVreputation
p656
I10091
sVlink
p657
Vhttp://stackoverflow.com/users/380625/jakubroztocil
p658
sVdisplay_name
p659
Vjakubroztocil
p660
ssVis_accepted
p661
I01
sVlast_edit_date
p662
I1439053367
sVanswer_id
p663
I8960883
sa(dp664
Vbody
p665
V<p>The standard Python list is not sorted in any form. The standard heapq module can be used to append in O(log n) and remove the smallest one in O(log n), but isn't a sorted list in your definition.</p>\u000a\u000a<p>There are various implementations of balanced trees for Python that meet your requirements, e.g. <a href="http://pypi.python.org/pypi/rbtree/" rel="noreferrer">rbtree</a>, <a href="http://newcenturycomputers.net/projects/rbtree.html" rel="noreferrer">RBTree</a>, or <a href="http://sourceforge.net/projects/pyavl/" rel="noreferrer">pyavl</a>.</p>\u000a
p666
sVquestion_id
p667
I1109804
sVlast_activity_date
p668
I1438097773
sVcreation_date
p669
I1247236005
sVscore
p670
I38
sVowner
p671
(dp672
Vuser_id
p673
I33006
sVprofile_image
p674
Vhttps://www.gravatar.com/avatar/3acb8bae5a2b5a28f6fe522a4ea9b873?s=128&d=identicon&r=PG
p675
sVuser_type
p676
Vregistered
p677
sVreputation
p678
I84348
sVlink
p679
Vhttp://stackoverflow.com/users/33006/martin-v-l%c3%b6wis
p680
sVaccept_rate
p681
I88
sVdisplay_name
p682
VMartin v. L&#246;wis
p683
ssVis_accepted
p684
I01
sVlast_edit_date
p685
I1438097773
sVanswer_id
p686
I1109866
sa(dp687
Vbody
p688
V<h2>psycopg2cffi (Updated 2015)</h2>\u000a\u000a<p><a href="https://pypi.python.org/pypi/psycopg2cffi">psycopg2cffi</a> is yet another psycopg2-compatible replacement and should provide the best PostgreSQL performance with PyPy. Add this to your <code>settings.py</code> to remain compatible with both:</p>\u000a\u000a<pre><code>try:\u000a    import psycopg2\u000aexcept ImportError:\u000a    # Fall back to psycopg2cffi\u000a    from psycopg2cffi import compat\u000a    compat.register()\u000a</code></pre>\u000a\u000a<h2>psycopg2-ctypes (2012)</h2>\u000a\u000a<blockquote>\u000a  <p>I also know that some people are using psycopg2-ctypes.</p>\u000a</blockquote>\u000a\u000a<p>This is the easiest way; to stay compatible with both, just add this code in your Django <code>settings.py</code>:</p>\u000a\u000a<pre><code>try:\u000a    import psycopg2\u000aexcept ImportError:\u000a    # Fall back to psycopg2-ctypes\u000a    from psycopg2ct import compat\u000a    compat.register()\u000a</code></pre>\u000a\u000a<p>I tested this a few releases ago; sadly in my experience, psycopg2-ctypes negates the small performance gains afforded by PyPy. But YMMV, it depends on how JIT-friendly your code is in general and what fraction of time you actually spend running Python code. And maybe PyPy has just improved since then.</p>\u000a\u000a<blockquote>\u000a  <p>and I don't think psycopg2-ctypes is ready for Windows yet</p>\u000a</blockquote>\u000a\u000a<p>I haven't tried this, but ctypes is platform-independent. AFAICT you just have to make sure that the <code>libpq.dll</code> library is loadable (located in a directory in your PATH environment variable or local directory) and it should work on Windows just like in Linux.</p>\u000a\u000a<h2>pypy-postgresql</h2>\u000a\u000a<blockquote>\u000a  <p>I do see that Alex Gaynor has made a fork of PyPy called pypy-postgresql.</p>\u000a</blockquote>\u000a\u000a<p>I don't think this is a good choice in the long term. The branch hasn't been updated for more than a year and my attempts to build it have failed. And it seems wrong to hard-code a PostgreSQL driver in the interpreter anyway.</p>\u000a\u000a<p>I believe there are no binaries out there of pypy-postgresql either, so if you want to use it, you'd need to build the whole PyPy branch yourself. Not for the faint of heart: it takes tens of minutes and a machine with at least 4 GB of memory. (Official instructions: <a href="http://pypy.org/download.html#building-from-source">http://pypy.org/download.html#building-from-source</a>)</p>\u000a\u000a<p>To build, you first need the source. If you have Mercurial installed, you can simply <code>hg clone https://bitbucket.org/alex_gaynor/pypy-postgresql</code>. If not, you can download the automagic "tip" zip file: <a href="https://bitbucket.org/alex_gaynor/pypy-postgresql/get/tip.zip">https://bitbucket.org/alex_gaynor/pypy-postgresql/get/tip.zip</a></p>\u000a\u000a<p>Open a command line, go into the decompressed directory, and then inside <code>pypy/translator/goal</code></p>\u000a\u000a<p>If you have PyPy installed, it's recommended to use that for building:</p>\u000a\u000a<pre><code>pypy translate.py -Ojit\u000a</code></pre>\u000a\u000a<p>Otherwise:</p>\u000a\u000a<pre><code>python translate.py -Ojit\u000a</code></pre>\u000a\u000a<p>Sadly this is where my knowledge ends. I get the error "<code>BytecodeCorruption: unimplemented opcode, ofs=234, code=203, name=BUILD_LIST_FROM_ARG</code>"</p>\u000a
p689
sVquestion_id
p690
I9350422
sVlast_activity_date
p691
I1435226534
sVcreation_date
p692
I1341018427
sVscore
p693
I26
sVowner
p694
(dp695
Vuser_id
p696
I177663
sVprofile_image
p697
Vhttps://www.gravatar.com/avatar/485b471504b5332261dcf8e67b068b04?s=128&d=identicon&r=PG
p698
sVuser_type
p699
Vregistered
p700
sVreputation
p701
I12972
sVlink
p702
Vhttp://stackoverflow.com/users/177663/intgr
p703
sVdisplay_name
p704
Vintgr
p705
ssVis_accepted
p706
I01
sVlast_edit_date
p707
I1435226534
sVanswer_id
p708
I11270687
sa(dp709
Vbody
p710
V<p>Concatenation is (significantly) faster according to my machine. But stylistically, I'm willing to pay the price of substitution if performance is not critical. Well, and if I need formatting, there's no need to even ask the question... there's no option but to use interpolation/templating.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import timeit\u000a&gt;&gt;&gt; def so_q_sub(n):\u000a...  return "%s%s/%d" % (DOMAIN, QUESTIONS, n)\u000a...\u000a&gt;&gt;&gt; so_q_sub(1000)\u000a'http://stackoverflow.com/questions/1000'\u000a&gt;&gt;&gt; def so_q_cat(n):\u000a...  return DOMAIN + QUESTIONS + '/' + str(n)\u000a...\u000a&gt;&gt;&gt; so_q_cat(1000)\u000a'http://stackoverflow.com/questions/1000'\u000a&gt;&gt;&gt; t1 = timeit.Timer('so_q_sub(1000)','from __main__ import so_q_sub')\u000a&gt;&gt;&gt; t2 = timeit.Timer('so_q_cat(1000)','from __main__ import so_q_cat')\u000a&gt;&gt;&gt; t1.timeit(number=10000000)\u000a12.166618871951641\u000a&gt;&gt;&gt; t2.timeit(number=10000000)\u000a5.7813972166853773\u000a&gt;&gt;&gt; t1.timeit(number=1)\u000a1.103492206766532e-05\u000a&gt;&gt;&gt; t2.timeit(number=1)\u000a8.5206360154188587e-06\u000a\u000a&gt;&gt;&gt; def so_q_tmp(n):\u000a...  return "{d}{q}/{n}".format(d=DOMAIN,q=QUESTIONS,n=n)\u000a...\u000a&gt;&gt;&gt; so_q_tmp(1000)\u000a'http://stackoverflow.com/questions/1000'\u000a&gt;&gt;&gt; t3= timeit.Timer('so_q_tmp(1000)','from __main__ import so_q_tmp')\u000a&gt;&gt;&gt; t3.timeit(number=10000000)\u000a14.564135316080637\u000a\u000a&gt;&gt;&gt; def so_q_join(n):\u000a...  return ''.join([DOMAIN,QUESTIONS,'/',str(n)])\u000a...\u000a&gt;&gt;&gt; so_q_join(1000)\u000a'http://stackoverflow.com/questions/1000'\u000a&gt;&gt;&gt; t4= timeit.Timer('so_q_join(1000)','from __main__ import so_q_join')\u000a&gt;&gt;&gt; t4.timeit(number=10000000)\u000a9.4431309007150048\u000a</code></pre>\u000a
p711
sVquestion_id
p712
I376461
sVlast_activity_date
p713
I1434868918
sVcreation_date
p714
I1229558864
sVscore
p715
I48
sVowner
p716
(dp717
Vuser_id
p718
I5190
sVprofile_image
p719
Vhttps://www.gravatar.com/avatar/27a12fdc32baf8748018d373a973d22f?s=128&d=identicon&r=PG
p720
sVuser_type
p721
Vregistered
p722
sVreputation
p723
I176675
sVlink
p724
Vhttp://stackoverflow.com/users/5190/vinko-vrsalovic
p725
sVaccept_rate
p726
I74
sVdisplay_name
p727
VVinko Vrsalovic
p728
ssVis_accepted
p729
I01
sVlast_edit_date
p730
I1434868918
sVanswer_id
p731
I376508
sa(dp732
Vbody
p733
V<p>You can simply <a href="https://docs.python.org/2/reference/simple_stmts.html#grammar-token-del_stmt" rel="noreferrer"><code>del</code></a> your custom name to set it back to the default:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; True = False\u000a&gt;&gt;&gt; True\u000aFalse\u000a&gt;&gt;&gt; del True\u000a&gt;&gt;&gt; True\u000aTrue\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a
p734
sVquestion_id
p735
I30563716
sVlast_activity_date
p736
I1433114632
sVcreation_date
p737
I1433114632
sVscore
p738
I137
sVowner
p739
(dp740
Vuser_id
p741
I2555451
sVprofile_image
p742
Vhttps://i.stack.imgur.com/d8F3H.jpg?s=128&g=1
p743
sVuser_type
p744
Vregistered
p745
sVreputation
p746
I83342
sVlink
p747
Vhttp://stackoverflow.com/users/2555451/icodez
p748
sVaccept_rate
p749
I100
sVdisplay_name
p750
ViCodez
p751
ssVis_accepted
p752
I01
sVanswer_id
p753
I30563742
sa(dp754
Vbody
p755
V<p>What you're looking for in the script is calls to <a href="https://docs.python.org/2/library/sys.html#sys.exit" rel="noreferrer"><code>sys.exit()</code></a>.  The argument to that method is returned to the environment as the exit code.</p>\u000a\u000a<p>It's fairly likely that the script is never calling the exit method, and that 0 is the default exit code.</p>\u000a
p756
sVquestion_id
p757
I285289
sVlast_activity_date
p758
I1432107107
sVcreation_date
p759
I1226523048
sVscore
p760
I108
sVowner
p761
(dp762
Vuser_id
p763
I6568
sVprofile_image
p764
Vhttps://www.gravatar.com/avatar/29526c0a49238ab7f1d375f0e63edd1a?s=128&d=identicon&r=PG
p765
sVuser_type
p766
Vregistered
p767
sVreputation
p768
I34701
sVlink
p769
Vhttp://stackoverflow.com/users/6568/dave-costa
p770
sVdisplay_name
p771
VDave Costa
p772
ssVis_accepted
p773
I01
sVlast_edit_date
p774
I1432107107
sVanswer_id
p775
I285326
sa(dp776
Vbody
p777
V<p>What you are searching for is this:\u000a<a href="https://github.com/numpy/numpy/blob/master/numpy/distutils/system_info.py">system info</a></p>\u000a\u000a<p>I compiled numpy/scipy with atlas and i can check this with:</p>\u000a\u000a<pre><code>import numpy.distutils.system_info as sysinfo\u000asysinfo.get_info('atlas')\u000a</code></pre>\u000a\u000a<p>Check the documentation for more commands.</p>\u000a
p778
sVquestion_id
p779
I9000164
sVlast_activity_date
p780
I1432057164
sVcreation_date
p781
I1327494256
sVscore
p782
I23
sVowner
p783
(dp784
Vuser_id
p785
I925256
sVprofile_image
p786
Vhttps://www.gravatar.com/avatar/55f8732864146cdbaeffc3474c92c9c9?s=128&d=identicon&r=PG
p787
sVuser_type
p788
Vregistered
p789
sVreputation
p790
I555
sVlink
p791
Vhttp://stackoverflow.com/users/925256/rabra
p792
sVaccept_rate
p793
I80
sVdisplay_name
p794
Vrabra
p795
ssVis_accepted
p796
I01
sVlast_edit_date
p797
I1432057164
sVanswer_id
p798
I9002656
sa(dp799
Vbody
p800
V<p>Did you see <a href="http://stackoverflow.com/questions/2170252/can-existing-virtualenv-be-upgraded-gracefully">this</a>? If I haven't misunderstand that answer, you may try to create a new virtualenv on top of the old one. You just need to know which python is going to use your virtualenv (you will need to see your virtualenv version). </p>\u000a\u000a<p>If your virtualenv is installed with the same python version of the old one and upgrading your virtualenv package is not an option, you may want to read <a href="http://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv">this</a> in order to install a virtualenv with the python version you want.</p>\u000a\u000a<p><strong>EDIT</strong></p>\u000a\u000a<p>I've tested this approach (the one that create a new virtualenv on top of the old one) and it worked fine for me. I think you may have some problems if you change from python 2.6 to 2.7 or 2.7 to 3.x but if you just upgrade inside the same version (staying at 2.7 as you want) you shouldn't have any problem, as all the packages are held in the same folders for both python versions (2.7.x and 2.7.y packages are inside your_env/lib/python2.7/).</p>\u000a\u000a<p>If you change your virtualenv python version, you will need to install all your packages again for that version (or just link the packages you need into the new version packages folder, i.e: your_env/lib/python_newversion/site-packages)</p>\u000a
p801
sVquestion_id
p802
I10218946
sVlast_activity_date
p803
I1429476712
sVcreation_date
p804
I1339812664
sVscore
p805
I40
sVowner
p806
(dp807
Vuser_id
p808
I1029019
sVprofile_image
p809
Vhttps://www.gravatar.com/avatar/d6ebc292c336ad7a29a712ebcc415593?s=128&d=identicon&r=PG
p810
sVuser_type
p811
Vregistered
p812
sVreputation
p813
I3586
sVlink
p814
Vhttp://stackoverflow.com/users/1029019/marianobianchi
p815
sVdisplay_name
p816
Vmarianobianchi
p817
ssVis_accepted
p818
I01
sVlast_edit_date
p819
I1429476712
sVanswer_id
p820
I11060240
sa(dp821
Vbody
p822
V<p>You want <code>calendar.timegm()</code>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; calendar.timegm(time.gmtime())\u000a1293581619.0\u000a</code></pre>\u000a\u000a<p>You can turn your string into a time tuple with <code>time.strptime()</code>, which returns a time tuple that you can pass to <code>calendar.timegm()</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import calendar\u000a&gt;&gt;&gt; import time\u000a&gt;&gt;&gt; calendar.timegm(time.strptime('Jul 9, 2009 @ 20:02:58 UTC', '%b %d, %Y @ %H:%M:%S UTC'))\u000a1247169778\u000a</code></pre>\u000a\u000a<p>More information about calendar module <a href="https://docs.python.org/2/library/calendar.html" rel="noreferrer">here</a></p>\u000a
p823
sVquestion_id
p824
I4548684
sVlast_activity_date
p825
I1428011939
sVcreation_date
p826
I1293563610
sVscore
p827
I76
sVowner
p828
(dp829
Vuser_id
p830
I391531
sVprofile_image
p831
Vhttps://www.gravatar.com/avatar/04bbaf6d73be76d81b13f2e150017691?s=128&d=identicon&r=PG
p832
sVuser_type
p833
Vregistered
p834
sVreputation
p835
I30690
sVlink
p836
Vhttp://stackoverflow.com/users/391531/nmichaels
p837
sVaccept_rate
p838
I92
sVdisplay_name
p839
Vnmichaels
p840
ssVis_accepted
p841
I01
sVlast_edit_date
p842
I1428011939
sVanswer_id
p843
I4548711
sa(dp844
Vbody
p845
V<p>You can use:</p>\u000a\u000a<pre><code>cpvirtualenv oldenv newenv\u000armvirtualenv oldenv\u000a</code></pre>\u000a\u000a<p>So in your case:</p>\u000a\u000a<pre><code>cpvirtualenv doors django\u000armvirtualenv doors\u000a</code></pre>\u000a
p846
sVquestion_id
p847
I9540040
sVlast_activity_date
p848
I1427114954
sVcreation_date
p849
I1348367966
sVscore
p850
I159
sVowner
p851
(dp852
Vuser_id
p853
I134502
sVprofile_image
p854
Vhttps://www.gravatar.com/avatar/e2ef956a3d389bd39b943ed526a2e237?s=128&d=identicon&r=PG
p855
sVuser_type
p856
Vregistered
p857
sVreputation
p858
I6872
sVlink
p859
Vhttp://stackoverflow.com/users/134502/nickaldwin
p860
sVaccept_rate
p861
I69
sVdisplay_name
p862
VNickAldwin
p863
ssVis_accepted
p864
I01
sVlast_edit_date
p865
I1427114954
sVanswer_id
p866
I12549306
sa(dp867
Vbody
p868
V<p>Here is my implementation and works for me with some fixes and enhances the alignment of the key and secret phrase with 32 bytes and iv to 16 bytes:</p>\u000a\u000a<pre><code>import base64\u000aimport hashlib\u000afrom Crypto import Random\u000afrom Crypto.Cipher import AES\u000a\u000aclass AESCipher(object):\u000a\u000a    def __init__(self, key): \u000a        self.bs = 32\u000a        self.key = hashlib.sha256(key.encode()).digest()\u000a\u000a    def encrypt(self, raw):\u000a        raw = self._pad(raw)\u000a        iv = Random.new().read(AES.block_size)\u000a        cipher = AES.new(self.key, AES.MODE_CBC, iv)\u000a        return base64.b64encode(iv + cipher.encrypt(raw))\u000a\u000a    def decrypt(self, enc):\u000a        enc = base64.b64decode(enc)\u000a        iv = enc[:AES.block_size]\u000a        cipher = AES.new(self.key, AES.MODE_CBC, iv)\u000a        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')\u000a\u000a    def _pad(self, s):\u000a        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)\u000a\u000a    @staticmethod\u000a    def _unpad(s):\u000a        return s[:-ord(s[len(s)-1:])]\u000a</code></pre>\u000a
p869
sVquestion_id
p870
I12524994
sVlast_activity_date
p871
I1426088645
sVcreation_date
p872
I1392970237
sVscore
p873
I56
sVowner
p874
(dp875
Vuser_id
p876
I2262117
sVprofile_image
p877
Vhttps://i.stack.imgur.com/RZQfH.jpg?s=128&g=1
p878
sVuser_type
p879
Vregistered
p880
sVreputation
p881
I698
sVlink
p882
Vhttp://stackoverflow.com/users/2262117/mnothic
p883
sVdisplay_name
p884
Vmnothic
p885
ssVis_accepted
p886
I01
sVlast_edit_date
p887
I1426088645
sVanswer_id
p888
I21928790
sa(dp889
Vbody
p890
V<p>Check <code>pandas.__version__</code>:</p>\u000a\u000a<pre><code>In [76]: import pandas as pd\u000a\u000aIn [77]: pd.__version__\u000aOut[77]: '0.12.0-933-g281dc4e'\u000a</code></pre>\u000a\u000a<p>Pandas also provides a utility function, <code>pd.show_versions()</code>, which reports the version of its dependencies as well:</p>\u000a\u000a<pre><code>In [53]: pd.show_versions(as_json=False)\u000a\u000aINSTALLED VERSIONS\u000a------------------\u000acommit: None\u000apython: 2.7.6.final.0\u000apython-bits: 64\u000aOS: Linux\u000aOS-release: 3.13.0-45-generic\u000amachine: x86_64\u000aprocessor: x86_64\u000abyteorder: little\u000aLC_ALL: None\u000aLANG: en_US.UTF-8\u000a\u000apandas: 0.15.2-113-g5531341\u000anose: 1.3.1\u000aCython: 0.21.1\u000anumpy: 1.8.2\u000ascipy: 0.14.0.dev-371b4ff\u000astatsmodels: 0.6.0.dev-a738b4f\u000aIPython: 2.0.0-dev\u000asphinx: 1.2.2\u000apatsy: 0.3.0\u000adateutil: 1.5\u000apytz: 2012c\u000abottleneck: None\u000atables: 3.1.1\u000anumexpr: 2.2.2\u000amatplotlib: 1.4.2\u000aopenpyxl: None\u000axlrd: 0.9.3\u000axlwt: 0.7.5\u000axlsxwriter: None\u000alxml: 3.3.3\u000abs4: 4.3.2\u000ahtml5lib: 0.999\u000ahttplib2: 0.8\u000aapiclient: None\u000arpy2: 2.5.5\u000asqlalchemy: 0.9.8\u000apymysql: None\u000apsycopg2: 2.4.5 (dt dec mx pq3 ext)\u000a</code></pre>\u000a
p891
sVquestion_id
p892
I20612645
sVlast_activity_date
p893
I1423315068
sVcreation_date
p894
I1387202274
sVscore
p895
I122
sVowner
p896
(dp897
Vuser_id
p898
I190597
sVprofile_image
p899
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p900
sVuser_type
p901
Vregistered
p902
sVreputation
p903
I425294
sVlink
p904
Vhttp://stackoverflow.com/users/190597/unutbu
p905
sVaccept_rate
p906
I88
sVdisplay_name
p907
Vunutbu
p908
ssVis_accepted
p909
I01
sVlast_edit_date
p910
I1423315068
sVanswer_id
p911
I20612691
sa(dp912
Vbody
p913
V<p>Caveat: Unless the ticklabels are already set to a string (as is usually the case in e.g. a boxplot), this will not work with any version of matplotlib newer than <code>1.1.0</code>.  If you're working from the current github master, this won't work.  I'm not sure what the problem is yet...  It may be an unintended change, or it may not be...</p>\u000a\u000a<p>Normally, you'd do something along these lines:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000a\u000afig, ax = plt.subplots()\u000a\u000a# We need to draw the canvas, otherwise the labels won't be positioned and \u000a# won't have values yet.\u000afig.canvas.draw()\u000a\u000alabels = [item.get_text() for item in ax.get_xticklabels()]\u000alabels[1] = 'Testing'\u000a\u000aax.set_xticklabels(labels)\u000a\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/5m900.png" alt="enter image description here"></p>\u000a\u000a<p>To understand the reason why you need to jump through so many hoops, you need to understand a bit more about how matplotlib is structured.</p>\u000a\u000a<p>Matplotlib deliberately avoids doing "static" positioning of ticks, etc, unless it's explicitly told to.  The assumption is that you'll want to interact with the plot, and so the bounds of the plot, ticks, ticklabels, etc will be dynamically changing.</p>\u000a\u000a<p>Therefore, you can't just set the text of a given tick label.  By default, it's re-set by the axis's Locator and Formatter every time the plot is drawn.</p>\u000a\u000a<p>However, if the Locators and Formatters are set to be static (<code>FixedLocator</code> and <code>FixedFormatter</code>, respectively), then the tick labels stay the same.</p>\u000a\u000a<p>This is what <code>set_*ticklabels</code> or <code>ax.*axis.set_ticklabels</code> does. </p>\u000a\u000a<p>Hopefully that makes it slighly more clear as to why changing an individual tick label is a bit convoluted.</p>\u000a\u000a<p>Often, what you actually want to do is just annotate a certain position.  In that case, look into <code>annotate</code>, instead. </p>\u000a
p914
sVquestion_id
p915
I11244514
sVlast_activity_date
p916
I1417991241
sVcreation_date
p917
I1340908654
sVscore
p918
I130
sVowner
p919
(dp920
Vuser_id
p921
I325565
sVprofile_image
p922
Vhttps://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=128&d=identicon&r=PG
p923
sVuser_type
p924
Vregistered
p925
sVreputation
p926
I136691
sVlink
p927
Vhttp://stackoverflow.com/users/325565/joe-kington
p928
sVdisplay_name
p929
VJoe Kington
p930
ssVis_accepted
p931
I01
sVlast_edit_date
p932
I1417991241
sVanswer_id
p933
I11250884
sa(dp934
Vbody
p935
V<p><code>self.materials</code> is a <a href="http://www.python.org/doc//current/library/stdtypes.html#mapping-types-dict" rel="noreferrer"><code>dict</code></a> and by default you are iterating over just the keys (which are strings).</p>\u000a\u000a<p>Since <code>self.materials</code> has more than two keys<a href="http://stackoverflow.com/questions/7053551/python-valueerror-too-many-values-to-unpack/7053615#comment34696354_7053615">*</a>, they can't be unpacked into the <a href="http://www.python.org/doc//current/library/functions.html#tuple" rel="noreferrer"><code>tuple</code></a> "<code>k, m</code>", hence the <a href="http://docs.python.org/2/library/exceptions.html#exceptions.ValueError" rel="noreferrer"><code>ValueError</code></a> <a href="http://docs.python.org/2/library/exceptions.html" rel="noreferrer">exception</a> is raised.</p>\u000a\u000a<p>In Python 2.<em>x</em>, to iterate over the keys and the values (the <a href="http://www.python.org/doc//current/library/functions.html#tuple" rel="noreferrer"><code>tuple</code></a> "<code>k, m</code>"), we use <a href="http://www.python.org/doc//current/library/stdtypes.html#dict.iteritems" rel="noreferrer"><code>self.materials.iteritems()</code></a>.</p>\u000a\u000a<p>However, since you're throwing the key away anyway, you may as well simply iterate over the dictionary's values:</p>\u000a\u000a<pre><code>for m in self.materials.itervalues():\u000a</code></pre>\u000a\u000a<p>In Python 3.<em>x</em>, prefer <a href="http://docs.python.org/3/library/stdtypes.html#dict.values" rel="noreferrer"><code>dict.values()</code></a> (which returns a <a href="http://docs.python.org/3/library/stdtypes.html#dict-views" rel="noreferrer">dictionary view object</a>):</p>\u000a\u000a<pre><code>for m in self.materials.values():\u000a</code></pre>\u000a
p936
sVquestion_id
p937
I7053551
sVlast_activity_date
p938
I1417423906
sVcreation_date
p939
I1313273471
sVscore
p940
I119
sVowner
p941
(dp942
Vuser_id
p943
I78845
sVprofile_image
p944
Vhttps://www.gravatar.com/avatar/9d2da976eb1e7a1c22ad46adfdb68632?s=128&d=identicon&r=PG
p945
sVuser_type
p946
Vregistered
p947
sVreputation
p948
I76506
sVlink
p949
Vhttp://stackoverflow.com/users/78845/johnsyweb
p950
sVdisplay_name
p951
VJohnsyweb
p952
ssVis_accepted
p953
I01
sVlast_edit_date
p954
I1417423906
sVanswer_id
p955
I7053615
sa(dp956
Vbody
p957
V<p>You want <code>conda update --all</code>.</p>\u000a\u000a<p><code>conda search --outdated</code> will show outdated packages, and <code>conda update --all</code> will update them (note that the latter will not update you from Python 2 to Python 3, but the former will show Python as being outdated if you do use Python 2). </p>\u000a
p958
sVquestion_id
p959
I24958833
sVlast_activity_date
p960
I1406325917
sVcreation_date
p961
I1406325917
sVscore
p962
I142
sVowner
p963
(dp964
Vuser_id
p965
I161801
sVprofile_image
p966
Vhttps://www.gravatar.com/avatar/0383e4cae325f65a1bbd906be4be2276?s=128&d=identicon&r=PG
p967
sVuser_type
p968
Vregistered
p969
sVreputation
p970
I43936
sVlink
p971
Vhttp://stackoverflow.com/users/161801/asmeurer
p972
sVaccept_rate
p973
I69
sVdisplay_name
p974
Vasmeurer
p975
ssVis_accepted
p976
I01
sVanswer_id
p977
I24965191
sa(dp978
Vbody
p979
V<p>Alright, so I ended up going with the code I wrote <a href="http://www.evanfosmark.com/2009/01/cross-platform-file-locking-support-in-python/" rel="noreferrer">here, on my website</a> (<a href="https://github.com/dmfrey/FileLock" rel="noreferrer">also available on GitHub</a>). I can use it in the following fashion:</p>\u000a\u000a<pre><code>from filelock import FileLock\u000a\u000awith FileLock("myfile.txt"):\u000a    # work with the file as it is now locked\u000a    print("Lock acquired.")\u000a</code></pre>\u000a
p980
sVquestion_id
p981
I489861
sVlast_activity_date
p982
I1402474472
sVcreation_date
p983
I1233390604
sVscore
p984
I69
sVowner
p985
(dp986
Vuser_id
p987
I49701
sVprofile_image
p988
Vhttps://www.gravatar.com/avatar/88c44d4902ae5685dae7d672da983e08?s=128&d=identicon&r=PG
p989
sVuser_type
p990
Vregistered
p991
sVreputation
p992
I38229
sVlink
p993
Vhttp://stackoverflow.com/users/49701/evan-fosmark
p994
sVaccept_rate
p995
I94
sVdisplay_name
p996
VEvan Fosmark
p997
ssVis_accepted
p998
I01
sVlast_edit_date
p999
I1402474472
sVanswer_id
p1000
I498505
sa(dp1001
Vcommunity_owned_date
p1002
I1324253094
sVbody
p1003
V<p>I've been <a href="http://www.semanticdesigns.com/Products/DMS/DMSToolkit.html" rel="noreferrer">building tools (DMS Software Reengineering Toolkit)</a> to do general purpose program manipulation (with language translation being a special case) since 1995, supported by a strong team of computer scientists.  DMS provides generic parsing, AST building, symbol tables, control and data flow analysis, application of translation rules, regeneration of source text with comments, etc., all parameterized by explicit definitions of computer languages.</p>\u000a\u000a<p>The amount of machinery you need to do this <em>well</em> is vast (especially if you want to be able to do this for multiple languages in a general way), and then you need reliable parsers for languages with unreliable definitions (PHP is perfect example of this).</p>\u000a\u000a<p>There's nothing wrong with you thinking about building a language-to-language translator or attempting it, but I think you'll find this a much bigger task for real languages than you expect.  We have some 100 man-years invested in just DMS, and another 6-12 months in each "reliable" language definition (including the one we painfully built for PHP), much more for nasty languages such as C++.  It will be a "hell of a learning experience"; it has been for us.  (You might find the technical Papers section at the above website interesting to jump start that learning).</p>\u000a\u000a<p>People often attempt to build some kind of generalized machinery by starting with some piece of technology with which they are familiar, that does a part of the job. (Python ASTs are great example).  The good news, is that part of the job is done.  The bad news is that machinery has a zillion assumptions built into it, most of which you won't discover until you try to wrestle it into doing something else.  At that point you find out the machinery is wired to do what it originally does, and will really, really resist your attempt to make it do something else. (I suspect trying to get the Python AST to model PHP is going to be a lot of fun).</p>\u000a\u000a<p>The reason I started to build DMS originally was to build foundations that had very few such assumptions built in.   It has some that give us headaches.  So far, no black holes. (The hardest part of my job over the last 15 years is to try to prevent such assumptions from creeping in).</p>\u000a\u000a<p>Lots of folks also make the mistake of assuming that if they can parse (and perhaps get an AST), they are well on the way to doing something complicated.  One of the hard lessons is that you need symbol tables and flow analysis to do good program analysis or transformation.   ASTs are necessary but not sufficient.  This is the reason that Aho&amp;Ullman's compiler book doesn't stop at chapter 2.  (The OP has this right in that he is planning to build additional machinery beyond the AST).  For more on this topic, see <a href="http://www.semanticdesigns.com/Products/DMS/LifeAfterParsing.html" rel="noreferrer">Life After Parsing</a>.</p>\u000a\u000a<p>The remark about "I don't need a perfect translation" is troublesome.  What weak translators do is convert the "easy" 80% of the code, leaving the hard 20% to do by hand.  If the application you intend to convert are pretty small, and you only intend to convert it once well, then that 20% is OK. If you want to convert many applications (or even the same one with minor changes over time), this is not nice.  If you attempt to convert 100K SLOC then 20% is 20,000 original lines of code that are hard to translate, understand and modify in the context of another 80,000 lines of translated program you already don't understand.  That takes a huge amount of effort.  At the million line level, this is simply impossible in practice.  (Amazingly there are people that distrust automated tools and insist on translating million line systems by hand; that's even <em>harder</em> and they normally find out painfully with long time delays, high costs and often outright failure.)</p>\u000a\u000a<p>What you have to shoot for to translate large-scale systems is high nineties percentage  conversion rates, or it is likely that you can't complete the manual part of the translation activity.</p>\u000a\u000a<p>Another key consideration is size of code to be translated.  It takes a lot of energy to build a working, robust translator, even with good tools.  While it seems sexy and cool to build a translator instead of simply doing a manual conversion, for small code bases (e.g., up to about 100K SLOC in our experience) the economics simply don't justify it. Nobody likes this answer, but if you really have to translate just 10K SLOC of code, you are probably better off just biting the bullet and doing it.  And yes, that's painful.</p>\u000a\u000a<p>I consider our tools to be extremely good (but then, I'm pretty biased).   And it is still very hard to build a good translator; it takes us about 1.5-2 man-years and we know how to use our tools.  The difference is that with this much machinery, we <a href="http://www.semdesigns.com/Products/Services/NorthropGrummanB2.html" rel="noreferrer">succeed</a> considerably more often than we fail.</p>\u000a
p1004
sVquestion_id
p1005
I3455456
sVlast_activity_date
p1006
I1396706597
sVcreation_date
p1007
I1281546662
sVscore
p1008
I114
sVowner
p1009
(dp1010
Vuser_id
p1011
I120163
sVprofile_image
p1012
Vhttps://i.stack.imgur.com/OPDmg.jpg?s=128&g=1
p1013
sVuser_type
p1014
Vregistered
p1015
sVreputation
p1016
I73653
sVlink
p1017
Vhttp://stackoverflow.com/users/120163/ira-baxter
p1018
sVaccept_rate
p1019
I59
sVdisplay_name
p1020
VIra Baxter
p1021
ssVis_accepted
p1022
I01
sVlast_edit_date
p1023
I1396706597
sVanswer_id
p1024
I3460977
sa(dp1025
Vbody
p1026
V<p>Is this good for you?</p>\u000a\u000a<pre><code>geopoint = {'latitude':41.123,'longitude':71.091}\u000aprint('{latitude} {longitude}'.format(**geopoint))\u000a</code></pre>\u000a
p1027
sVquestion_id
p1028
I5952344
sVlast_activity_date
p1029
I1387801819
sVcreation_date
p1030
I1305041134
sVscore
p1031
I197
sVowner
p1032
(dp1033
Vuser_id
p1034
I747116
sVprofile_image
p1035
Vhttps://www.gravatar.com/avatar/85401912c23c7d5e656c08e7a751e95c?s=128&d=identicon&r=PG
p1036
sVuser_type
p1037
Vregistered
p1038
sVreputation
p1039
I2299
sVlink
p1040
Vhttp://stackoverflow.com/users/747116/cocoatomo
p1041
sVdisplay_name
p1042
Vcocoatomo
p1043
ssVis_accepted
p1044
I01
sVlast_edit_date
p1045
I1387801819
sVanswer_id
p1046
I5952472
sa(dp1047
Vbody
p1048
V<p>The csv file might contain very huge fields, therefore increase the <code>field_size_limit</code>:</p>\u000a\u000a<pre><code>import sys\u000aimport csv\u000a\u000acsv.field_size_limit(sys.maxsize)\u000a</code></pre>\u000a\u000a<p><code>sys.maxsize</code> works for Python 2.x and 3.x. <code>sys.maxint</code> would only work with Python 2.x (<a href="http://stackoverflow.com/questions/13795758/what-is-sys-maxint-in-python-3">SO: what-is-sys-maxint-in-python-3</a>)</p>\u000a\u000a<h3>Update</h3>\u000a\u000a<p>As Geoff pointed out, the code above might result in the following error: <code>OverflowError: Python int too large to convert to C long</code>. \u000aTo circumvent this, you could use the following <em>quick and dirty</em> code:</p>\u000a\u000a<pre><code>import sys\u000aimport csv\u000amaxInt = sys.maxsize\u000adecrement = True\u000a\u000awhile decrement:\u000a    # decrease the maxInt value by factor 10 \u000a    # as long as the OverflowError occurs.\u000a\u000a    decrement = False\u000a    try:\u000a        csv.field_size_limit(maxInt)\u000a    except OverflowError:\u000a        maxInt = int(maxInt/10)\u000a        decrement = True\u000a</code></pre>\u000a
p1049
sVquestion_id
p1050
I15063936
sVlast_activity_date
p1051
I1386014816
sVcreation_date
p1052
I1361785082
sVscore
p1053
I135
sVowner
p1054
(dp1055
Vuser_id
p1056
I1251007
sVprofile_image
p1057
Vhttps://www.gravatar.com/avatar/5caaf7e0d764745b31979d09c46a3c81?s=128&d=identicon&r=PG
p1058
sVuser_type
p1059
Vregistered
p1060
sVreputation
p1061
I5283
sVlink
p1062
Vhttp://stackoverflow.com/users/1251007/user1251007
p1063
sVaccept_rate
p1064
I83
sVdisplay_name
p1065
Vuser1251007
p1066
ssVis_accepted
p1067
I01
sVlast_edit_date
p1068
I1386014816
sVanswer_id
p1069
I15063941
sa(dp1070
Vbody
p1071
V<p><em>Note: The ideas here are pretty generic for StackOverflow, indeed <a href="http://sscce.org/">questions</a>.</em></p>\u000a\u000a<h3>Disclaimer: Writing a good question is HARD.</h3>\u000a\u000a<h2>The Good:</h2>\u000a\u000a<ul>\u000a<li><p>do include small* example DataFrame, either as runnable code:</p>\u000a\u000a<pre><code>In [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\u000a</code></pre>\u000a\u000a<p>or make it "copy and pasteable" using <code>pd.read_clipboard(sep='\u005cs\u005cs+')</code>, you can format the text for StackOverflow highlight and use Ctrl+K (or prepend four spaces to each line):</p>\u000a\u000a<pre><code>In [2]: df\u000aOut[2]: \u000a   A  B\u000a0  1  2\u000a1  1  3\u000a2  4  6\u000a</code></pre>\u000a\u000a<p>test <code>pd.read_clipboard(sep='\u005cs\u005cs+')</code> yourself.</p>\u000a\u000a<p>* <em>I really do mean <strong>small</strong>, the vast majority of example DataFrames could be fewer than 6 rows<sup>citation needed</sup>, and <strong>I bet I can do it in 5 rows.</strong> Can you reproduce the error with <code>df = df.head()</code>, if not fiddle around to see if you can make up a small DataFrame which exhibits the issue you are facing.</em></p>\u000a\u000a<p>* <em>Every rule has an exception, the obvious one is for performance issues  (<a href="http://ipython.org/ipython-doc/dev/interactive/tutorial.html#magic-functions">in which case definitely use %timeit and possibly %prun</a>), where you should generate (consider using np.random.seed so we have the exact same frame): <code>df = pd.DataFrame(np.random.randn(100000000, 10))</code>. Saying that, "make this code fast for me" is not strictly on topic for the site...</em></p></li>\u000a<li><p>write out the outcome you desire (similarly to above)</p>\u000a\u000a<pre><code>In [3]: iwantthis\u000aOut[3]: \u000a   A  B\u000a0  1  5\u000a1  4  6\u000a</code></pre>\u000a\u000a<p><em>Explain what the numbers come from: the 5 is sum of the B column for the rows where A is 1.</em></p></li>\u000a<li><p>do show <em>the code</em> you've tried:</p>\u000a\u000a<pre><code>In [4]: df.groupby('A').sum()\u000aOut[4]: \u000a   B\u000aA   \u000a1  5\u000a4  6\u000a</code></pre>\u000a\u000a<p><em>But say what's incorrect: the A column is in the index rather than a column.</em></p></li>\u000a<li><p>do show you've done some research (<a href="http://pandas.pydata.org/pandas-docs/stable/search.html?q=groupby+sum">search the docs</a>, <a href="http://stackoverflow.com/search?q=%5bpandas%5d+groupby+sum">search StackOverflow</a>), give a summary:</p>\u000a\u000a<blockquote>\u000a  <p>The docstring for sum simply states "Compute sum of group values"</p>\u000a  \u000a  <p>The <a href="http://pandas.pydata.org/pandas-docs/stable/groupby.html#cython-optimized-aggregation-functions">groupby docs</a> don't give any examples for this.</p>\u000a</blockquote>\u000a\u000a<p><em>Aside: the answer here is to use <code>df.groupby('A', as_index=False).sum()</code>.</em></p></li>\u000a<li><p>if it's relevant that you have Timestamp columns, e.g. you're resampling or something, then be explicit and apply <code>pd.to_datetime</code> to them for good measure**.</p>\u000a\u000a<pre><code>df['date'] = pd.to_datetime(df['date']) # this column ought to be date..\u000a</code></pre>\u000a\u000a<p>** <em>Sometimes this is the issue itself: they were strings.</em></p></li>\u000a</ul>\u000a\u000a<h2>The Bad:</h2>\u000a\u000a<ul>\u000a<li><p>don't include a MultiIndex, which <strong>we can't copy and paste</strong> (see above), this is kind of a grievance with pandas default display but nonetheless annoying:</p>\u000a\u000a<pre><code>In [11]: df\u000aOut[11]:\u000a     C\u000aA B   \u000a1 2  3\u000a  2  6\u000a</code></pre>\u000a\u000a<p><em>The correct way is to include an ordinary DataFrame with a <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.set_index.html"><code>set_index</code></a> call:</em></p>\u000a\u000a<pre><code>In [12]: df = pd.DataFrame([[1, 2, 3], [1, 2, 6]], columns=['A', 'B', 'C']).set_index(['A', 'B'])\u000a\u000aIn [13]: df\u000aOut[13]: \u000a     C\u000aA B   \u000a1 2  3\u000a  2  6\u000a</code></pre></li>\u000a<li><p>do provide insight to what it is when giving the outcome you want:</p>\u000a\u000a<pre><code>   B\u000aA   \u000a1  1\u000a5  0\u000a</code></pre>\u000a\u000a<p><em>Be specific about how you got the numbers (what are they)... double check they're correct.</em></p></li>\u000a<li><p>If your code throws an error, do include the entire stacktrace (this can be edited out later if it's too noisy). Show the line number (and the corresponding line of your code which it's raising against).</p></li>\u000a</ul>\u000a\u000a<h2>The Ugly:</h2>\u000a\u000a<ul>\u000a<li><p>don't link to a csv we don't has access to (ideally don't link to an external source at all...)</p>\u000a\u000a<pre><code>df = pd.read_csv('my_secret_file.csv')  # ideally with lots of parsing options\u000a</code></pre>\u000a\u000a<p><em><strong>Most data is proprietary</strong> we get that: Make up similar data and see if you can reproduce the problem (something small).</em></p></li>\u000a<li><p>don't explain the situation vaguely in words, like you have a DataFrame which is large, mention some of the column names in passing (be sure not to mention their dtypes). Try and go into lots of detail about something which is completely meaningless without seeing the actual context. Presumably noone is even going to read to the end of this paragraph.</p>\u000a\u000a<p><em>Essays are bad, it's easier with small examples.</em></p></li>\u000a<li><p>don't include 10+ (100+??) lines of data munging before getting to your actual question.</p>\u000a\u000a<p><em>Please, we see enough of this in our day jobs. We want to help, but <a href="https://www.youtube.com/watch?v=ECfRp-jwbI4">not like this...</a>.</em><br>\u000a<em>Cut the intro, and just show the relevant DataFrames (or small versions of them) in the step which is causing you trouble.</em></p></li>\u000a</ul>\u000a\u000a<h3>Anyways, have fun learning python, numpy and pandas!</h3>\u000a
p1072
sVquestion_id
p1073
I20109391
sVlast_activity_date
p1074
I1385187553
sVcreation_date
p1075
I1385187553
sVscore
p1076
I85
sVowner
p1077
(dp1078
Vuser_id
p1079
I1240268
sVprofile_image
p1080
Vhttps://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1
p1081
sVuser_type
p1082
Vregistered
p1083
sVreputation
p1084
I108899
sVlink
p1085
Vhttp://stackoverflow.com/users/1240268/andy-hayden
p1086
sVaccept_rate
p1087
I90
sVdisplay_name
p1088
VAndy Hayden
p1089
ssVis_accepted
p1090
I01
sVanswer_id
p1091
I20159305
sa(dp1092
Vbody
p1093
V<p>The solution is simple. It's actually <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#configuring-the-template-system-in-standalone-mode" rel="noreferrer">well documented</a>, but not too easy to find. (I had to dig around -- it didn't come up when I tried a few different Google searches.)</p>\u000a\u000a<p>The following code works:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from django.template import Template, Context\u000a&gt;&gt;&gt; from django.conf import settings\u000a&gt;&gt;&gt; settings.configure()\u000a&gt;&gt;&gt; t = Template('My name is {{ my_name }}.')\u000a&gt;&gt;&gt; c = Context({'my_name': 'Daryl Spitzer'})\u000a&gt;&gt;&gt; t.render(c)\u000au'My name is Daryl Spitzer.'\u000a</code></pre>\u000a\u000a<p>See the Django documentation (linked above) for a description of some of the settings you may want to define (as keyword arguments to configure).</p>\u000a
p1094
sVquestion_id
p1095
I98135
sVlast_activity_date
p1096
I1374712317
sVcreation_date
p1097
I1221782499
sVscore
p1098
I122
sVowner
p1099
(dp1100
Vuser_id
p1101
I4766
sVprofile_image
p1102
Vhttps://www.gravatar.com/avatar/56dbb3799dd6358c3bee3468d0328046?s=128&d=identicon&r=PG
p1103
sVuser_type
p1104
Vregistered
p1105
sVreputation
p1106
I37486
sVlink
p1107
Vhttp://stackoverflow.com/users/4766/daryl-spitzer
p1108
sVaccept_rate
p1109
I96
sVdisplay_name
p1110
VDaryl Spitzer
p1111
ssVis_accepted
p1112
I01
sVlast_edit_date
p1113
I1374712317
sVanswer_id
p1114
I98178
sa(dp1115
Vbody
p1116
V<p>It is a string formatting syntax (which it borrows from C).</p>\u000a\u000a<p>Please see <a href="http://www.diveintopython.net/native_data_types/formatting_strings.html" rel="noreferrer">"Formatting Strings"</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Python supports formatting values into\u000a  strings. Although this can include\u000a  very complicated expressions, the most\u000a  basic usage is to insert values into a\u000a  string with the <code>%s</code> placeholder.</p>\u000a</blockquote>\u000a\u000a<p><strong>Edit:</strong> Here is a really simple example:</p>\u000a\u000a<pre><code>name = raw_input("who are you?")\u000aprint "hello %s" % (name,)\u000a</code></pre>\u000a\u000a<p>The <code>%s</code> token allows me to insert (and potentially format) a string.  Notice that the <code>%s</code> token is replaced by whatever I pass to the string after the <code>%</code> symbol.  Notice also that I am using a tuple here as well (when you only have one string using a tuple is optional) to illustrate that multiple strings can be inserted and formatted in one statement.</p>\u000a
p1117
sVquestion_id
p1118
I997797
sVlast_activity_date
p1119
I1374083610
sVcreation_date
p1120
I1245092771
sVscore
p1121
I105
sVowner
p1122
(dp1123
Vuser_id
p1124
I34211
sVprofile_image
p1125
Vhttps://www.gravatar.com/avatar/be8accba01f6dedbd2669a66fd44fedf?s=128&d=identicon&r=PG
p1126
sVuser_type
p1127
Vregistered
p1128
sVreputation
p1129
I232317
sVlink
p1130
Vhttp://stackoverflow.com/users/34211/andrew-hare
p1131
sVaccept_rate
p1132
I83
sVdisplay_name
p1133
VAndrew Hare
p1134
ssVis_accepted
p1135
I01
sVlast_edit_date
p1136
I1374083610
sVanswer_id
p1137
I997807
sa(dp1138
Vbody
p1139
V<p>You should use the <code>values</code> attribute:</p>\u000a\u000a<pre><code>In [1]: df = pd.DataFrame(index=['a', 'b'])\u000a\u000aIn [2]: df.index.values\u000aOut[2]: array(['a', 'b'], dtype=object)\u000a</code></pre>\u000a\u000a<p><em>This accesses how the data is already stored, so there's no need for a conversion.<br>\u000aNote: This attribute is also available for many other pandas' objects.</em></p>\u000a
p1140
sVquestion_id
p1141
I17241004
sVlast_activity_date
p1142
I1371841287
sVcreation_date
p1143
I1371840673
sVscore
p1144
I112
sVowner
p1145
(dp1146
Vuser_id
p1147
I1240268
sVprofile_image
p1148
Vhttps://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1
p1149
sVuser_type
p1150
Vregistered
p1151
sVreputation
p1152
I108899
sVlink
p1153
Vhttp://stackoverflow.com/users/1240268/andy-hayden
p1154
sVaccept_rate
p1155
I90
sVdisplay_name
p1156
VAndy Hayden
p1157
ssVis_accepted
p1158
I01
sVlast_edit_date
p1159
I1371841287
sVanswer_id
p1160
I17242374
sa(dp1161
Vbody
p1162
V<p>Pony ORM author is here.</p>\u000a\u000a<p>Pony translates Python generator into SQL query in three steps:</p>\u000a\u000a<ol>\u000a<li>Decompiling of generator bytecode and rebuilding generator AST\u000a(abstract syntax tree)</li>\u000a<li>Translation of Python AST into "abstract SQL" -- universal\u000alist-based representation of a SQL query</li>\u000a<li>Converting abstract SQL representation into specific\u000adatabase-dependent SQL dialect</li>\u000a</ol>\u000a\u000a<p>The most complex part is the second step, where Pony must\u000aunderstand the "meaning" of Python expressions. Seems you are most\u000ainterested in the first step, so let me explain how decompiling works.</p>\u000a\u000a<p>Let's consider this query:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from pony.orm.examples.estore import *\u000a&gt;&gt;&gt; select(c for c in Customer if c.country == 'USA').show()\u000a</code></pre>\u000a\u000a<p>Which will be translated into the following SQL:</p>\u000a\u000a<pre><code>SELECT "c"."id", "c"."email", "c"."password", "c"."name", "c"."country", "c"."address"\u000aFROM "Customer" "c"\u000aWHERE "c"."country" = 'USA'\u000a</code></pre>\u000a\u000a<p>And below is the result of this query which will be printed out:</p>\u000a\u000a<pre><code>id|email              |password|name          |country|address  \u000a--+-------------------+--------+--------------+-------+---------\u000a1 |john@example.com   |***     |John Smith    |USA    |address 1\u000a2 |matthew@example.com|***     |Matthew Reed  |USA    |address 2\u000a4 |rebecca@example.com|***     |Rebecca Lawson|USA    |address 4\u000a</code></pre>\u000a\u000a<p>The <code>select()</code> function accepts a python generator as argument, and then analyzes its bytecode.\u000aWe can get bytecode instructions of this generator using standard python <code>dis</code> module:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; gen = (c for c in Customer if c.country == 'USA')\u000a&gt;&gt;&gt; import dis\u000a&gt;&gt;&gt; dis.dis(gen.gi_frame.f_code)\u000a  1           0 LOAD_FAST                0 (.0)\u000a        &gt;&gt;    3 FOR_ITER                26 (to 32)\u000a              6 STORE_FAST               1 (c)\u000a              9 LOAD_FAST                1 (c)\u000a             12 LOAD_ATTR                0 (country)\u000a             15 LOAD_CONST               0 ('USA')\u000a             18 COMPARE_OP               2 (==)\u000a             21 POP_JUMP_IF_FALSE        3\u000a             24 LOAD_FAST                1 (c)\u000a             27 YIELD_VALUE         \u000a             28 POP_TOP             \u000a             29 JUMP_ABSOLUTE            3\u000a        &gt;&gt;   32 LOAD_CONST               1 (None)\u000a             35 RETURN_VALUE\u000a</code></pre>\u000a\u000a<p>Pony ORM has the function <code>decompile()</code> within module <code>pony.orm.decompiling</code> which can\u000arestore an AST from the bytecode:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from pony.orm.decompiling import decompile\u000a&gt;&gt;&gt; ast, external_names = decompile(gen)\u000a</code></pre>\u000a\u000a<p>Here, we can see the textual representation of the AST nodes:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; ast\u000aGenExpr(GenExprInner(Name('c'), [GenExprFor(AssName('c', 'OP_ASSIGN'), Name('.0'),\u000a[GenExprIf(Compare(Getattr(Name('c'), 'country'), [('==', Const('USA'))]))])]))\u000a</code></pre>\u000a\u000a<p>Let's now see how the <code>decompile()</code> function works.</p>\u000a\u000a<p>The <code>decompile()</code> function creates a <code>Decompiler</code> object, which implements the Visitor pattern.\u000aThe decompiler instance gets bytecode instructions one-by-one.\u000aFor each instruction the decompiler object calls its own method.\u000aThe name of this method is equal to the name of current bytecode instruction.</p>\u000a\u000a<p>When Python calculates an expression, it uses stack, which stores an intermediate\u000aresult of calculation. The decompiler object also has its own stack,\u000abut this stack stores not the result of expression calculation,\u000abut AST node for the expression.</p>\u000a\u000a<p>When decompiler method for the next bytecode instruction is called,\u000ait takes AST nodes from the stack, combines them\u000ainto a new AST node, and then puts this node on the top of the stack.</p>\u000a\u000a<p>For example, let's see how the subexpression <code>c.country == 'USA'</code> is calculated. The\u000acorresponding bytecode fragment is:</p>\u000a\u000a<pre><code>              9 LOAD_FAST                1 (c)\u000a             12 LOAD_ATTR                0 (country)\u000a             15 LOAD_CONST               0 ('USA')\u000a             18 COMPARE_OP               2 (==)\u000a</code></pre>\u000a\u000a<p>So, the decompiler object does the following:</p>\u000a\u000a<ol>\u000a<li>Calls <code>decompiler.LOAD_FAST('c')</code>.\u000aThis method puts the <code>Name('c')</code> node on the top of the decompiler stack.</li>\u000a<li>Calls <code>decompiler.LOAD_ATTR('country')</code>.\u000aThis method takes the <code>Name('c')</code> node from the stack, \u000acreates the <code>Geattr(Name('c'), 'country')</code> node and puts it on the top of the stack.</li>\u000a<li>Calls <code>decompiler.LOAD_CONST('USA')</code>.\u000aThis method puts the <code>Const('USA')</code> node on top of the stack.</li>\u000a<li>Calls <code>decompiler.COMPARE_OP('==')</code>.\u000aThis method takes two nodes (Getattr and Const) from the stack,\u000aand then puts <code>Compare(Getattr(Name('c'), 'country'), [('==', Const('USA'))])</code>\u000aon the top of the stack.</li>\u000a</ol>\u000a\u000a<p>After all bytecode instructions are processed, the decompiler stack contains\u000aa single AST node which corresponds to the whole generator expression.</p>\u000a\u000a<p>Since Pony ORM needs to decompile generators \u000aand lambdas only, this is not that complex, because\u000athe instruction flow for a generator is relatively straightforward\u000a- it is just a bunch of nested loops.</p>\u000a\u000a<p>Currently Pony ORM covers the whole generator instructions set except two things:</p>\u000a\u000a<ol>\u000a<li>Inline if expressions: <code>a if b else c</code></li>\u000a<li>Compound comparisons: <code>a &lt; b &lt; c</code></li>\u000a</ol>\u000a\u000a<p>If Pony encounters such expression it raises the <code>NotImplementedError</code> exception. But even in \u000athis case you can make it work by passing the generator expression as a string.\u000aWhen you pass a generator as a string Pony doesn't use the decompiler module. Instead\u000ait gets the AST using the standard Python <code>compiler.parse</code> function.</p>\u000a\u000a<p>Hope this answers your question.</p>\u000a
p1163
sVquestion_id
p1164
I16115713
sVlast_activity_date
p1165
I1366652258
sVcreation_date
p1166
I1366450330
sVscore
p1167
I169
sVowner
p1168
(dp1169
Vuser_id
p1170
I1706814
sVprofile_image
p1171
Vhttps://www.gravatar.com/avatar/14ee766a8f92667b755c18b8499b4c77?s=128&d=identicon&r=PG
p1172
sVuser_type
p1173
Vregistered
p1174
sVreputation
p1175
I2812
sVlink
p1176
Vhttp://stackoverflow.com/users/1706814/alexander-kozlovsky
p1177
sVdisplay_name
p1178
VAlexander Kozlovsky
p1179
ssVis_accepted
p1180
I01
sVlast_edit_date
p1181
I1366652258
sVanswer_id
p1182
I16118756
sa(dp1183
Vbody
p1184
V<p>To use a pipe with the <code>subprocess</code> module, you have to pass <code>shell=True</code>.</p>\u000a\u000a<p>However, this isn't really advisable for various reasons, not least of which is security. Instead, create the <code>ps</code> and <code>grep</code> processes separately, and pipe the output from one into the other, like so:</p>\u000a\u000a<pre><code>ps = subprocess.Popen(('ps', '-A'), stdout=subprocess.PIPE)\u000aoutput = subprocess.check_output(('grep', 'process_name'), stdin=ps.stdout)\u000aps.wait()\u000a</code></pre>\u000a\u000a<p>In your particular case, however, the simple solution is to call <code>subprocess.check_output(('ps', '-A'))</code> and then <code>str.find</code> on the output.</p>\u000a
p1185
sVquestion_id
p1186
I13332268
sVlast_activity_date
p1187
I1352645882
sVcreation_date
p1188
I1352645882
sVscore
p1189
I188
sVowner
p1190
(dp1191
Vuser_id
p1192
I1064659
sVprofile_image
p1193
Vhttps://www.gravatar.com/avatar/1dc6f55bbe6f9c53e9d9a145b1f5158f?s=128&d=identicon&r=PG
p1194
sVuser_type
p1195
Vregistered
p1196
sVreputation
p1197
I12747
sVlink
p1198
Vhttp://stackoverflow.com/users/1064659/taymon
p1199
sVaccept_rate
p1200
I77
sVdisplay_name
p1201
VTaymon
p1202
ssVis_accepted
p1203
I01
sVanswer_id
p1204
I13332300
sa(dp1205
Vbody
p1206
V<p>Rough answers:</p>\u000a\u000a<ol>\u000a<li>Scala's static typing is helping it quite a bit here - this means that it uses the JVM pretty efficiently without too much extra effort.</li>\u000a<li>I'm not exactly sure on the Ruby/Python difference, but I suspect that <code>(2...n).all?</code> in the function <code>is-prime?</code> is likely to be quite well optimised in Ruby (EDIT: sounds like this is indeed the case, see Julian's answer for more detail...)</li>\u000a<li>Ruby 1.9.3 is just much better optimised</li>\u000a<li>Clojure code can certainly be accelerated a lot! While Clojure is dynamic by default, you can use type hints, primitive maths etc. to get close to Scala / pure Java speed in many cases when you need to.</li>\u000a</ol>\u000a\u000a<p>Most important optimisation in the Clojure code would be to use typed primitive maths within <code>is-prime?</code>, something like:</p>\u000a\u000a<pre><code>(set! *unchecked-math* true) ;; at top of file to avoid using BigIntegers\u000a\u000a(defn ^:static is-prime? [^long n]\u000a  (loop [i (long 2)] \u000a    (if (zero? (mod n i))\u000a      false\u000a      (if (&gt;= (inc i) n) true (recur (inc i))))))\u000a</code></pre>\u000a\u000a<p>With this improvement, I get Clojure completing 10k in 0.635 secs (i.e. the second fastest on your list, beating Scala)</p>\u000a\u000a<p><strong>P.S.</strong> note that you have printing code inside your benchmark in some cases - not a good idea as it will distort the results, especially if using a function like <code>print</code> for the first time causes initialisation of IO subsystems or something like that!</p>\u000a
p1207
sVquestion_id
p1208
I11641098
sVlast_activity_date
p1209
I1343271880
sVcreation_date
p1210
I1343178734
sVscore
p1211
I28
sVowner
p1212
(dp1213
Vuser_id
p1214
I214010
sVprofile_image
p1215
Vhttps://www.gravatar.com/avatar/2bfafb4d16a6dc78abef970bcab9ca97?s=128&d=identicon&r=PG
p1216
sVuser_type
p1217
Vregistered
p1218
sVreputation
p1219
I80836
sVlink
p1220
Vhttp://stackoverflow.com/users/214010/mikera
p1221
sVaccept_rate
p1222
I82
sVdisplay_name
p1223
Vmikera
p1224
ssVis_accepted
p1225
I01
sVlast_edit_date
p1226
I1343271880
sVanswer_id
p1227
I11641388
sa(dp1228
Vbody
p1229
V<p>It makes a difference if you return early:</p>\u000a\u000a<pre><code>try:\u000a    run_code1()\u000aexcept TypeError:\u000a    run_code2()\u000a    return None   # The finally block is run before the method returns\u000afinally:\u000a    other_code()\u000a</code></pre>\u000a\u000a<p>Compare to this:</p>\u000a\u000a<pre><code>try:\u000a    run_code1()\u000aexcept TypeError:\u000a    run_code2()\u000a    return None   \u000a\u000aother_code()  # This doesn't get run if there's an exception.\u000a</code></pre>\u000a\u000a<p>Other situations that can cause differences:</p>\u000a\u000a<ul>\u000a<li>If an exception is thrown inside the except block.</li>\u000a<li>If an exception is thrown in <code>run_code1()</code> but it's not a <code>TypeError</code>.</li>\u000a<li>Other control flow statements such as <code>continue</code> and <code>break</code> statements.</li>\u000a</ul>\u000a
p1230
sVquestion_id
p1231
I11551996
sVlast_activity_date
p1232
I1342656070
sVcreation_date
p1233
I1342655162
sVscore
p1234
I135
sVowner
p1235
(dp1236
Vuser_id
p1237
I61974
sVprofile_image
p1238
Vhttps://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=128&d=identicon&r=PG
p1239
sVuser_type
p1240
Vregistered
p1241
sVreputation
p1242
I484946
sVlink
p1243
Vhttp://stackoverflow.com/users/61974/mark-byers
p1244
sVdisplay_name
p1245
VMark Byers
p1246
ssVis_accepted
p1247
I01
sVlast_edit_date
p1248
I1342656070
sVanswer_id
p1249
I11552007
sa(dp1250
Vbody
p1251
V<p>You are asking a question about two different things:</p>\u000a\u000a<ol>\u000a<li><p><strong><code>Meta</code> inner class in Django models</strong>:</p>\u000a\u000a<p>This is just a class container with some options (metadata) attached to the model. It defines such things as available permissions, associated database table name, whether the model is abstract or not, singular and plural versions of the name etc.</p>\u000a\u000a<p>Short explanation is here: <a href="https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options" rel="noreferrer">Django docs: Models: Meta options</a></p>\u000a\u000a<p>List of available meta options is here: <a href="https://docs.djangoproject.com/en/dev/ref/models/options/" rel="noreferrer">Django docs: Model Meta options</a></p></li>\u000a<li><p><strong>Metaclass in Python</strong>:</p>\u000a\u000a<p>The best description is here: <a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">What is a metaclass in Python?</a></p></li>\u000a</ol>\u000a
p1252
sVquestion_id
p1253
I10344197
sVlast_activity_date
p1254
I1335496229
sVcreation_date
p1255
I1335495884
sVscore
p1256
I121
sVowner
p1257
(dp1258
Vuser_id
p1259
I548696
sVprofile_image
p1260
Vhttps://www.gravatar.com/avatar/c9b170f54e3286eea9aca961f7bfe3ef?s=128&d=identicon&r=PG
p1261
sVuser_type
p1262
Vregistered
p1263
sVreputation
p1264
I68226
sVlink
p1265
Vhttp://stackoverflow.com/users/548696/tadeck
p1266
sVaccept_rate
p1267
I90
sVdisplay_name
p1268
VTadeck
p1269
ssVis_accepted
p1270
I01
sVlast_edit_date
p1271
I1335496229
sVanswer_id
p1272
I10344231
sa(dp1273
Vbody
p1274
V<p>The <code>__import__</code> function can be a bit hard to understand.</p>\u000a\u000a<p>If you change </p>\u000a\u000a<pre><code>i = __import__('matplotlib.text')\u000a</code></pre>\u000a\u000a<p>to</p>\u000a\u000a<pre><code>i = __import__('matplotlib.text', fromlist=[''])\u000a</code></pre>\u000a\u000a<p>then <code>i</code> will refer to <code>matplotlib.text</code>.</p>\u000a\u000a<p>In Python 2.7 and Python 3.1 or later, you can use <code>importlib</code>:</p>\u000a\u000a<pre><code>import importlib\u000a\u000ai = importlib.import_module("matplotlib.text")\u000a</code></pre>\u000a
p1275
sVquestion_id
p1276
I8718885
sVlast_activity_date
p1277
I1325627420
sVcreation_date
p1278
I1325627420
sVscore
p1279
I142
sVowner
p1280
(dp1281
Vuser_id
p1282
I407651
sVprofile_image
p1283
Vhttps://www.gravatar.com/avatar/6e1f48e20177ed6c4c3197a9a92f48e5?s=128&d=identicon&r=PG
p1284
sVuser_type
p1285
Vregistered
p1286
sVreputation
p1287
I24243
sVlink
p1288
Vhttp://stackoverflow.com/users/407651/mzjn
p1289
sVdisplay_name
p1290
Vmzjn
p1291
ssVis_accepted
p1292
I01
sVanswer_id
p1293
I8719100
sa(dp1294
Vbody
p1295
V<p>pip is run from the command line, not the Python interpreter. It is a program that <strong>installs</strong> modules, so you can use them from Python. Once you have installed the module, then you can open the Python shell and do <code>import selenium</code>.</p>\u000a\u000a<p>The Python shell is not a command line, it is an interactive interpreter. You type Python code into it, not commands.</p>\u000a
p1296
sVquestion_id
p1297
I8548030
sVlast_activity_date
p1298
I1324158687
sVcreation_date
p1299
I1324158687
sVscore
p1300
I126
sVowner
p1301
(dp1302
Vuser_id
p1303
I126214
sVprofile_image
p1304
Vhttps://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=128&d=identicon&r=PG
p1305
sVuser_type
p1306
Vregistered
p1307
sVreputation
p1308
I82828
sVlink
p1309
Vhttp://stackoverflow.com/users/126214/lennart-regebro
p1310
sVaccept_rate
p1311
I100
sVdisplay_name
p1312
VLennart Regebro
p1313
ssVis_accepted
p1314
I01
sVanswer_id
p1315
I8548165
sa(dp1316
Vbody
p1317
V<p><strong>What is the following code to your dictionary declaration?</strong></p>\u000a\u000a<p>I think pycharm will trigger the error if you have something like:</p>\u000a\u000a<pre><code>dic = {}\u000adic['aaa'] = 5\u000a</code></pre>\u000a\u000a<p>as you could have written</p>\u000a\u000a<pre><code>dic = {'aaa': 5}\u000a</code></pre>\u000a\u000a<p>BTW: The fact that the error goes away if you use the function doesn't necessarily mean that pycharm believes <code>dict()</code> is a literal. It could just mean that it doesn't complain for:</p>\u000a\u000a<pre><code>dic = dict()\u000adic['aaa'] = 5\u000a</code></pre>\u000a\u000a<p>HTH!</p>\u000a
p1318
sVquestion_id
p1319
I8406242
sVlast_activity_date
p1320
I1323204439
sVcreation_date
p1321
I1323203340
sVscore
p1322
I115
sVowner
p1323
(dp1324
Vuser_id
p1325
I146792
sVprofile_image
p1326
Vhttps://www.gravatar.com/avatar/d321b6a6a9c8aeb609111c4ceb516e42?s=128&d=identicon&r=PG
p1327
sVuser_type
p1328
Vregistered
p1329
sVreputation
p1330
I24033
sVlink
p1331
Vhttp://stackoverflow.com/users/146792/mac
p1332
sVaccept_rate
p1333
I88
sVdisplay_name
p1334
Vmac
p1335
ssVis_accepted
p1336
I01
sVlast_edit_date
p1337
I1323204439
sVanswer_id
p1338
I8406391
sa(dp1339
Vbody
p1340
V<p>What's wrong with <code>self.left = None</code>? Am I misinterpreting your question, or are you just not familiar with the <code>None</code> keyword?</p>\u000a
p1341
sVquestion_id
p1342
I8237647
sVlast_activity_date
p1343
I1322025618
sVcreation_date
p1344
I1322025618
sVscore
p1345
I82
sVowner
p1346
(dp1347
Vuser_id
p1348
I233293
sVprofile_image
p1349
Vhttps://www.gravatar.com/avatar/ddcbe42a959e4e45e7f068fe09c92959?s=128&d=identicon&r=PG
p1350
sVuser_type
p1351
Vregistered
p1352
sVreputation
p1353
I8724
sVlink
p1354
Vhttp://stackoverflow.com/users/233293/bnaul
p1355
sVdisplay_name
p1356
Vbnaul
p1357
ssVis_accepted
p1358
I01
sVanswer_id
p1359
I8237659
sa(dp1360
Vbody
p1361
V<p>The <code>string</code> type doesn't support this. You're probably best off using <a href="http://docs.python.org/library/re.html#re.RegexObject.sub" rel="noreferrer">the regular expression sub method</a> with the <a href="http://docs.python.org/library/re.html#re.IGNORECASE" rel="noreferrer">re.IGNORECASE</a> option.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import re\u000a&gt;&gt;&gt; insensitive_hippo = re.compile(re.escape('hippo'), re.IGNORECASE)\u000a&gt;&gt;&gt; insensitive_hippo.sub('giraffe', 'I want a hIPpo for my birthday')\u000a'I want a giraffe for my birthday'\u000a</code></pre>\u000a
p1362
sVquestion_id
p1363
I919056
sVlast_activity_date
p1364
I1319055972
sVcreation_date
p1365
I1243481953
sVscore
p1366
I120
sVowner
p1367
(dp1368
Vuser_id
p1369
I1199
sVprofile_image
p1370
Vhttps://www.gravatar.com/avatar/78cb7314ef6c9ff2954f8e0d6506fc06?s=128&d=identicon&r=PG
p1371
sVuser_type
p1372
Vregistered
p1373
sVreputation
p1374
I112423
sVlink
p1375
Vhttp://stackoverflow.com/users/1199/blair-conrad
p1376
sVdisplay_name
p1377
VBlair Conrad
p1378
ssVis_accepted
p1379
I01
sVlast_edit_date
p1380
I1319055972
sVanswer_id
p1381
I919067
sa(dp1382
Vbody
p1383
V<p>Because <code>os.path.abspath = os.path.dirname + os.path.basename</code> does not hold.  we rather have</p>\u000a\u000a<pre><code>os.path.dirname(filename) + os.path.basename(filename) == filename\u000a</code></pre>\u000a\u000a<p>Both <code>dirname()</code> and <code>basename()</code> only split the passed filename into components without taking into account the current directory.  If you want to also consider the current directory, you have to do so explicitly.</p>\u000a\u000a<p>To get the dirname of the absolute path, use</p>\u000a\u000a<pre><code>os.path.dirname(os.path.abspath(__file__))\u000a</code></pre>\u000a
p1384
sVquestion_id
p1385
I7783308
sVlast_activity_date
p1386
I1318804978
sVcreation_date
p1387
I1318755989
sVscore
p1388
I150
sVowner
p1389
(dp1390
Vuser_id
p1391
I279627
sVprofile_image
p1392
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1393
sVuser_type
p1394
Vregistered
p1395
sVreputation
p1396
I252330
sVlink
p1397
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1398
sVaccept_rate
p1399
I78
sVdisplay_name
p1400
VSven Marnach
p1401
ssVis_accepted
p1402
I01
sVlast_edit_date
p1403
I1318804978
sVanswer_id
p1404
I7783326
sa(dp1405
Vbody
p1406
V<p>I've run <a href="https://github.com/zed/woltan-benchmark" rel="nofollow noreferrer">your benchmark</a>. There is no difference between C++ and numpy on my machine:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/nGX9d.jpg" alt="woltan&#39;s benchmark"></p>\u000a\u000a<blockquote>\u000a  <p>Do you think my approach is fair, or are there some unnecessary overheads I can avoid?</p>\u000a</blockquote>\u000a\u000a<p>It seems fair due to there is no difference in results.</p>\u000a\u000a<blockquote>\u000a  <p>Would you expect that the result would show such a huge discrepancy between the c++ and python approach? Both are using shared objects for their calculations.</p>\u000a</blockquote>\u000a\u000a<p>No.</p>\u000a\u000a<blockquote>\u000a  <p>Since I would rather use python for my program, what could I do to increase the performance when calling BLAS or LAPACK routines?</p>\u000a</blockquote>\u000a\u000a<p>Make sure that numpy uses optimized version of BLAS/LAPACK libraries on your system.</p>\u000a
p1407
sVquestion_id
p1408
I7596612
sVlast_activity_date
p1409
I1317406794
sVcreation_date
p1410
I1317405619
sVscore
p1411
I40
sVowner
p1412
(dp1413
Vuser_id
p1414
I4279
sVprofile_image
p1415
Vhttps://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG
p1416
sVuser_type
p1417
Vregistered
p1418
sVreputation
p1419
I203089
sVlink
p1420
Vhttp://stackoverflow.com/users/4279/j-f-sebastian
p1421
sVaccept_rate
p1422
I94
sVdisplay_name
p1423
VJ.F. Sebastian
p1424
ssVis_accepted
p1425
I01
sVlast_edit_date
p1426
I1317406794
sVanswer_id
p1427
I7614252
sa(dp1428
Vbody
p1429
V<p>you could try using a StringIO</p>\u000a\u000a<pre><code>import urllib, cStringIO\u000a\u000afile = cStringIO.StringIO(urllib.urlopen(URL).read())\u000aimg = Image.open(file)\u000a</code></pre>\u000a
p1430
sVquestion_id
p1431
I7391945
sVlast_activity_date
p1432
I1315850852
sVcreation_date
p1433
I1315850852
sVscore
p1434
I124
sVowner
p1435
(dp1436
Vuser_id
p1437
I541842
sVprofile_image
p1438
Vhttps://www.gravatar.com/avatar/8f7f40878fd90c71f8ec6abfcafeb20c?s=128&d=identicon&r=PG
p1439
sVuser_type
p1440
Vregistered
p1441
sVreputation
p1442
I6175
sVlink
p1443
Vhttp://stackoverflow.com/users/541842/f%c3%a1bio-diniz
p1444
sVaccept_rate
p1445
I75
sVdisplay_name
p1446
VF&#225;bio Diniz
p1447
ssVis_accepted
p1448
I01
sVanswer_id
p1449
I7391991
sa(dp1450
Vbody
p1451
V<p><a href="http://docs.python.org/library/calendar.html#calendar.month_name" rel="noreferrer">Calendar API</a></p>\u000a\u000a<p>From that you can see that <code>calendar.month_name[3]</code> would return <code>March</code>, and the array index of <code>0</code> is the empty string, so there's no need to worry about zero-indexing either.</p>\u000a
p1452
sVquestion_id
p1453
I6557553
sVlast_activity_date
p1454
I1309616507
sVcreation_date
p1455
I1309616507
sVscore
p1456
I120
sVowner
p1457
(dp1458
Vuser_id
p1459
I504990
sVprofile_image
p1460
Vhttps://www.gravatar.com/avatar/e3b43776a23b6eeb08873211834557ac?s=128&d=identicon&r=PG
p1461
sVuser_type
p1462
Vregistered
p1463
sVreputation
p1464
I4256
sVlink
p1465
Vhttp://stackoverflow.com/users/504990/siame
p1466
sVaccept_rate
p1467
I100
sVdisplay_name
p1468
Vsiame
p1469
ssVis_accepted
p1470
I01
sVanswer_id
p1471
I6557570
sa(dp1472
Vbody
p1473
V<p>Since these are member functions, call it as a member function on the instance, <code>self</code>.</p>\u000a\u000a<pre><code>def isNear(self, p):\u000a    self.distToPoint(p)\u000a    ...\u000a</code></pre>\u000a
p1474
sVquestion_id
p1475
I5615648
sVlast_activity_date
p1476
I1302481482
sVcreation_date
p1477
I1302481482
sVscore
p1478
I163
sVowner
p1479
(dp1480
Vuser_id
p1481
I390278
sVprofile_image
p1482
Vhttps://www.gravatar.com/avatar/84715fec547362389d02f5be0ed12814?s=128&d=identicon&r=PG
p1483
sVuser_type
p1484
Vregistered
p1485
sVreputation
p1486
I74800
sVlink
p1487
Vhttp://stackoverflow.com/users/390278/jeff-mercado
p1488
sVaccept_rate
p1489
I86
sVdisplay_name
p1490
VJeff Mercado
p1491
ssVis_accepted
p1492
I01
sVanswer_id
p1493
I5615674
sa(dp1494
Vbody
p1495
V<p>Cast from string using <code>float()</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; float('NaN')\u000anan\u000a&gt;&gt;&gt; float('Inf')\u000ainf\u000a&gt;&gt;&gt; -float('Inf')\u000a-inf\u000a&gt;&gt;&gt; float('Inf') == float('Inf')\u000aTrue\u000a&gt;&gt;&gt; float('Inf') == 1\u000aFalse\u000a</code></pre>\u000a
p1496
sVquestion_id
p1497
I5438745
sVlast_activity_date
p1498
I1301091946
sVcreation_date
p1499
I1301091946
sVscore
p1500
I130
sVowner
p1501
(dp1502
Vuser_id
p1503
I89806
sVprofile_image
p1504
Vhttps://www.gravatar.com/avatar/89cff7a629a2782ebc5805675fcb09f0?s=128&d=identicon&r=PG
p1505
sVuser_type
p1506
Vregistered
p1507
sVreputation
p1508
I67328
sVlink
p1509
Vhttp://stackoverflow.com/users/89806/marcog
p1510
sVaccept_rate
p1511
I58
sVdisplay_name
p1512
Vmarcog
p1513
ssVis_accepted
p1514
I01
sVanswer_id
p1515
I5438756
sa(dp1516
Vbody
p1517
V<p>You can use <code>issubclass()</code> like this <code>assert issubclass(suit, Suit)</code>. But why would you want to do such a thing? Python is not Java.</p>\u000a
p1518
sVquestion_id
p1519
I4912972
sVlast_activity_date
p1520
I1296995779
sVcreation_date
p1521
I1296991869
sVscore
p1522
I96
sVowner
p1523
(dp1524
Vdisplay_name
p1525
Vuser97370
p1526
sVuser_type
p1527
Vdoes_not_exist
p1528
ssVis_accepted
p1529
I01
sVlast_edit_date
p1530
I1296995779
sVanswer_id
p1531
I4912999
sa(dp1532
Vbody
p1533
V<p>Running a different copy of Python is as easy as starting the correct executable. You mention that you've started a python instance, from the command line, by simply typing <code>python</code>. </p>\u000a\u000a<p>What this does under Windows, is to trawl the %PATH% environment variable, checking for an executable, either batch file (.bat), command file (.cmd) or some other executable to run, that matches the name given. When it finds the correct file to run, it does it.</p>\u000a\u000a<p>Now, if you've installed two python versions 2.5 and 2.6, the path will have both of their directories in it, something like <code>PATH=c:\u005cpython\u005c2.5;c:\u005cpython\u005c2.6</code> but Windows will stop examining the path when it finds a match.</p>\u000a\u000a<p>What you really need to do is to explicitly call one or both of the applications, such as <code>c:\u005cpython\u005c2.5\u005cpython.exe</code> or <code>c:\u005cpython\u005c2.6\u005cpython.exe</code>.</p>\u000a\u000a<p>The other alternative is to create a shortcut to the respective python.exe calling one of them python25 and the other python26; you can then simply run <code>python25</code> on your command line.</p>\u000a
p1534
sVquestion_id
p1535
I4583367
sVlast_activity_date
p1536
I1294055651
sVcreation_date
p1537
I1294055651
sVscore
p1538
I77
sVowner
p1539
(dp1540
Vuser_id
p1541
I438017
sVprofile_image
p1542
Vhttps://www.gravatar.com/avatar/997f1f86cb7f45d0d4d787d60c845001?s=128&d=identicon&r=PG
p1543
sVuser_type
p1544
Vregistered
p1545
sVreputation
p1546
I1068
sVlink
p1547
Vhttp://stackoverflow.com/users/438017/aodj
p1548
sVaccept_rate
p1549
I25
sVdisplay_name
p1550
Vaodj
p1551
ssVis_accepted
p1552
I01
sVanswer_id
p1553
I4584180
sa(dp1554
Vbody
p1555
V<p>by set, do you mean <code>set</code>?</p>\u000a\u000a<pre><code>&gt;&gt;&gt; foo = set(range(0, 4))\u000a&gt;&gt;&gt; foo\u000aset([0, 1, 2, 3])\u000a&gt;&gt;&gt; foo.update(range(2, 6))\u000a&gt;&gt;&gt; foo\u000aset([0, 1, 2, 3, 4, 5])\u000a</code></pre>\u000a
p1556
sVquestion_id
p1557
I4045403
sVlast_activity_date
p1558
I1288287083
sVcreation_date
p1559
I1288286734
sVscore
p1560
I127
sVowner
p1561
(dp1562
Vuser_id
p1563
I65696
sVprofile_image
p1564
Vhttps://www.gravatar.com/avatar/d8da959b2a586b4a147604e6f534a9fe?s=128&d=identicon&r=PG
p1565
sVuser_type
p1566
Vregistered
p1567
sVreputation
p1568
I91218
sVlink
p1569
Vhttp://stackoverflow.com/users/65696/singlenegationelimination
p1570
sVaccept_rate
p1571
I85
sVdisplay_name
p1572
VSingleNegationElimination
p1573
ssVis_accepted
p1574
I01
sVlast_edit_date
p1575
I1288287083
sVanswer_id
p1576
I4045505
sa(dp1577
Vbody
p1578
V<p>A slightly faster approach than looping on <code>xrange(N)</code> is:</p>\u000a\u000a<pre><code>import itertools\u000a\u000afor _ in itertools.repeat(None, N):\u000a    do_something()\u000a</code></pre>\u000a
p1579
sVquestion_id
p1580
I2970780
sVlast_activity_date
p1581
I1275612128
sVcreation_date
p1582
I1275612128
sVscore
p1583
I65
sVowner
p1584
(dp1585
Vuser_id
p1586
I95810
sVprofile_image
p1587
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1588
sVuser_type
p1589
Vregistered
p1590
sVreputation
p1591
I516079
sVlink
p1592
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1593
sVaccept_rate
p1594
I80
sVdisplay_name
p1595
VAlex Martelli
p1596
ssVis_accepted
p1597
I01
sVanswer_id
p1598
I2970789
sa(dp1599
Vbody
p1600
V<p>You're using Python 2.x, where integer divisions will truncate instead of becoming a floating point number.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 1 / 2\u000a0\u000a</code></pre>\u000a\u000a<p>You should make one of them a <code>float</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; float(10 - 20) / (100 - 10)\u000a-0.1111111111111111\u000a</code></pre>\u000a\u000a<p>or <code>from __future__ import division</code>, which the forces <code>/</code> to adopt Python 3.x's behavior that always returns a float.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from __future__ import division\u000a&gt;&gt;&gt; (10 - 20) / (100 - 10)\u000a-0.1111111111111111\u000a</code></pre>\u000a
p1601
sVquestion_id
p1602
I2958684
sVlast_activity_date
p1603
I1275489413
sVcreation_date
p1604
I1275489413
sVscore
p1605
I178
sVowner
p1606
(dp1607
Vuser_id
p1608
I224671
sVprofile_image
p1609
Vhttps://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG
p1610
sVuser_type
p1611
Vregistered
p1612
sVreputation
p1613
I346163
sVlink
p1614
Vhttp://stackoverflow.com/users/224671/kennytm
p1615
sVaccept_rate
p1616
I67
sVdisplay_name
p1617
Vkennytm
p1618
ssVis_accepted
p1619
I01
sVanswer_id
p1620
I2958717
sa(dp1621
Vbody
p1622
V<p>Sounds like you want to do an "upsert".  MongoDB has built-in support for this.  Pass an extra parameter to your update() call:  {upsert:true}.  For example:</p>\u000a\u000a<pre><code>key = {'key':'value'}\u000adata = {'key2':'value2', 'key3':'value3'};\u000acoll.update(key, data, {upsert:true});\u000a</code></pre>\u000a\u000a<p>This replaces your if-find-else-update block entirely.  It will insert if the key doesn't exist and will update if it does.</p>\u000a\u000a<p>Before:</p>\u000a\u000a<pre><code>{"key":"value", "key2":"Ohai."}\u000a</code></pre>\u000a\u000a<p>After:</p>\u000a\u000a<pre><code>{"key":"value", "key2":"value2", "key3":"value3"}\u000a</code></pre>\u000a\u000a<p>You can also specify what data you want to write:</p>\u000a\u000a<pre><code>data = {"$set":{"key2":"value2"}}\u000a</code></pre>\u000a\u000a<p>Now your selected document will update the value of "key2" only and leave everything else untouched.  </p>\u000a
p1623
sVquestion_id
p1624
I2801008
sVlast_activity_date
p1625
I1274998473
sVcreation_date
p1626
I1274984264
sVscore
p1627
I97
sVowner
p1628
(dp1629
Vuser_id
p1630
I53894
sVprofile_image
p1631
Vhttps://www.gravatar.com/avatar/1842800aeae16263cc400189411ee9df?s=128&d=identicon&r=PG
p1632
sVuser_type
p1633
Vregistered
p1634
sVreputation
p1635
I2579
sVlink
p1636
Vhttp://stackoverflow.com/users/53894/van-nguyen
p1637
sVdisplay_name
p1638
VVan Nguyen
p1639
ssVis_accepted
p1640
I01
sVlast_edit_date
p1641
I1274998473
sVanswer_id
p1642
I2923719
sa(dp1643
Vbody
p1644
V<p>I don't know of a standard function in Python, but this works for me:</p>\u000a\u000a<pre><code>def myround(x, base=5):\u000a    return int(base * round(float(x)/base))\u000a</code></pre>\u000a\u000a<p>It is easy to see why the above works.  You want to make sure that your number divided by 5 is an integer, correctly rounded.  So, we first do exactly that (<code>round(float(x)/5)</code>), and then since we divided by 5, we multiply by 5 as well.  The final conversion to <code>int</code> is because <code>round()</code> returns a floating-point value in Python.</p>\u000a\u000a<p>I made the function more generic by giving it a <code>base</code> parameter, defaulting to 5.</p>\u000a
p1645
sVquestion_id
p1646
I2272149
sVlast_activity_date
p1647
I1266685861
sVcreation_date
p1648
I1266316702
sVscore
p1649
I168
sVowner
p1650
(dp1651
Vuser_id
p1652
I226621
sVprofile_image
p1653
Vhttps://www.gravatar.com/avatar/4ecd473d46f300f81636ee7034c358e2?s=128&d=identicon&r=PG
p1654
sVuser_type
p1655
Vregistered
p1656
sVreputation
p1657
I53883
sVlink
p1658
Vhttp://stackoverflow.com/users/226621/alok-singhal
p1659
sVaccept_rate
p1660
I80
sVdisplay_name
p1661
VAlok Singhal
p1662
ssVis_accepted
p1663
I01
sVlast_edit_date
p1664
I1266685861
sVanswer_id
p1665
I2272174
sa(dp1666
Vbody
p1667
V<pre><code>len(yourdict.keys())\u000a</code></pre>\u000a\u000a<p>or just</p>\u000a\u000a<pre><code>len(yourdict)\u000a</code></pre>\u000a\u000a<p>If you like to count unique words in the file, you could just use <a href="http://docs.python.org/library/sets.html#module-sets" rel="noreferrer"><code>set</code></a> and do like</p>\u000a\u000a<pre><code>len(set(open(yourdictfile).read().split()))\u000a</code></pre>\u000a
p1668
sVquestion_id
p1669
I2212433
sVlast_activity_date
p1670
I1265519516
sVcreation_date
p1671
I1265442098
sVscore
p1672
I174
sVowner
p1673
(dp1674
Vuser_id
p1675
I213464
sVprofile_image
p1676
Vhttps://www.gravatar.com/avatar/7f7ff8ab69ce836df0bf9af5acc689af?s=128&d=identicon&r=PG
p1677
sVuser_type
p1678
Vregistered
p1679
sVreputation
p1680
I67371
sVlink
p1681
Vhttp://stackoverflow.com/users/213464/you
p1682
sVaccept_rate
p1683
I100
sVdisplay_name
p1684
VYOU
p1685
ssVis_accepted
p1686
I01
sVlast_edit_date
p1687
I1265519516
sVanswer_id
p1688
I2212442
sa(dp1689
Vbody
p1690
V<p>Since the list is ordered you can do this:</p>\u000a\u000a<pre><code>a = [1,1,1,1,2,2,2,2,3,3,4,5,5]\u000afrom itertools import groupby\u000a[len(list(group)) for key, group in groupby(a)]\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre><code>[4, 4, 2, 1, 2]\u000a</code></pre>\u000a
p1691
sVquestion_id
p1692
I2161752
sVlast_activity_date
p1693
I1264767519
sVcreation_date
p1694
I1264767519
sVscore
p1695
I57
sVowner
p1696
(dp1697
Vuser_id
p1698
I97828
sVprofile_image
p1699
Vhttps://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG
p1700
sVuser_type
p1701
Vregistered
p1702
sVreputation
p1703
I64017
sVlink
p1704
Vhttp://stackoverflow.com/users/97828/nadia-alramli
p1705
sVdisplay_name
p1706
VNadia Alramli
p1707
ssVis_accepted
p1708
I01
sVanswer_id
p1709
I2161801
sa(dp1710
Vbody
p1711
V<p>That's a start.  It's not a bad practice to define your longer strings outside of the code that uses them.  It's a way to separate data and behavior.  Your first option is to join string literals together implicitly by making them adjacent to one another:</p>\u000a\u000a<pre><code>("This is the first line of my text, "\u000a"which will be joined to a second.")\u000a</code></pre>\u000a\u000a<p>Or with line ending continuations, which is a little more fragile, as this works:</p>\u000a\u000a<pre><code>"This is the first line of my text, " \u005c\u000a"which will be joined to a second."\u000a</code></pre>\u000a\u000a<p>But this doesn't:</p>\u000a\u000a<pre><code>"This is the first line of my text, " \u005c \u000a"which will be joined to a second."\u000a</code></pre>\u000a\u000a<p>See the difference?  No?  Well you won't when it's your code either.</p>\u000a\u000a<p>The downside to implicit joining is that it only works with string literals, not with strings taken from\u000avariables, so things can get a little more hairy when you refactor.  Also, you can only interpolate formatting on the combined string as a whole.</p>\u000a\u000a<p>Alternatively, you can join explicitly using the concatenation operator (<code>+</code>):</p>\u000a\u000a<pre><code>("This is the first line of my text, " + \u000a"which will be joined to a second.")\u000a</code></pre>\u000a\u000a<p>Explicit is better than implicit, as the zen of python says, but this creates three strings instead of one, and uses twice as much memory: there are the two you have written, plus one which is the two of them joined together, so you have to know when to ignore the zen.  The upside is you can apply formatting to\u000aany of the substrings separately on each line, or to the whole lot from outside the parentheses.</p>\u000a\u000a<p>Finally, you can use triple-quoted strings:</p>\u000a\u000a<pre><code>"""This is the first line of my text\u000awhich will be joined to a second."""\u000a</code></pre>\u000a\u000a<p>This is often my favorite, though its behavior is slightly different as the newline and any leading whitespace on subsequent lines will show up in your final string.  You can eliminate the newline with an escaping backslash.  </p>\u000a\u000a<pre><code>"""This is the first line of my text \u005c\u000awhich will be joined to a second."""\u000a</code></pre>\u000a\u000a<p>This has the same problem as the same technique above, in that correct code only differs from incorrect code by invisible whitespace.</p>\u000a\u000a<p>Which one is "best" depends on your particular situation, but the answer is not simply aesthetic, but one of subtly different behaviors.  </p>\u000a
p1712
sVquestion_id
p1713
I2058925
sVlast_activity_date
p1714
I1263405565
sVcreation_date
p1715
I1263405565
sVscore
p1716
I174
sVowner
p1717
(dp1718
Vuser_id
p1719
I131084
sVprofile_image
p1720
Vhttps://www.gravatar.com/avatar/b5129079df8199b730d06eec3c944f38?s=128&d=identicon&r=PG
p1721
sVuser_type
p1722
Vregistered
p1723
sVreputation
p1724
I11865
sVlink
p1725
Vhttp://stackoverflow.com/users/131084/jcdyer
p1726
sVdisplay_name
p1727
Vjcdyer
p1728
ssVis_accepted
p1729
I01
sVanswer_id
p1730
I2059025
sa(dp1731
Vbody
p1732
V<p>Variable set outside <code>__init__</code> belong to the class.  They're shared by all instances. </p>\u000a\u000a<p>Variables created inside <code>__init__</code> (and all other method functions) and prefaced with <code>self.</code> belong to the object instance. </p>\u000a
p1733
sVquestion_id
p1734
I1537202
sVlast_activity_date
p1735
I1255001763
sVcreation_date
p1736
I1255001355
sVscore
p1737
I115
sVowner
p1738
(dp1739
Vuser_id
p1740
I10661
sVprofile_image
p1741
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1742
sVuser_type
p1743
Vregistered
p1744
sVreputation
p1745
I277525
sVlink
p1746
Vhttp://stackoverflow.com/users/10661/s-lott
p1747
sVaccept_rate
p1748
I92
sVdisplay_name
p1749
VS.Lott
p1750
ssVis_accepted
p1751
I01
sVlast_edit_date
p1752
I1255001763
sVanswer_id
p1753
I1537226
sa(dp1754
Vbody
p1755
V<p>That is because in Python 3, they have replaced the <code>print</code> <em>statement</em> with the <code>print</code> <em>function</em>.</p>\u000a\u000a<p>The syntax is now more or less the same as before, but it requires parens:</p>\u000a\u000a<p>From the "<a href="http://docs.python.org/3.0/whatsnew/3.0.html" rel="noreferrer">what's new in python 3</a>" docs:</p>\u000a\u000a<pre><code>Old: print "The answer is", 2*2\u000aNew: print("The answer is", 2*2)\u000a\u000aOld: print x,           # Trailing comma suppresses newline\u000aNew: print(x, end=" ")  # Appends a space instead of a newline\u000a\u000aOld: print              # Prints a newline\u000aNew: print()            # You must call the function!\u000a\u000aOld: print &gt;&gt;sys.stderr, "fatal error"\u000aNew: print("fatal error", file=sys.stderr)\u000a\u000aOld: print (x, y)       # prints repr((x, y))\u000aNew: print((x, y))      # Not the same as print(x, y)!\u000a</code></pre>\u000a
p1756
sVquestion_id
p1757
I937491
sVlast_activity_date
p1758
I1243904537
sVcreation_date
p1759
I1243904537
sVscore
p1760
I187
sVowner
p1761
(dp1762
Vuser_id
p1763
I12983
sVprofile_image
p1764
Vhttps://www.gravatar.com/avatar/b33e8a75c925b361be8ff9568e35b26c?s=128&d=identicon&r=PG
p1765
sVuser_type
p1766
Vregistered
p1767
sVreputation
p1768
I36227
sVlink
p1769
Vhttp://stackoverflow.com/users/12983/tm
p1770
sVaccept_rate
p1771
I97
sVdisplay_name
p1772
VTM.
p1773
ssVis_accepted
p1774
I01
sVanswer_id
p1775
I937516
sa(dp1776
Vbody
p1777
V<p>Interactively, you can display it with</p>\u000a\u000a<pre><code>help(my_func)\u000a</code></pre>\u000a\u000a<p>Or from code you can retrieve it with</p>\u000a\u000a<pre><code>my_func.__doc__\u000a</code></pre>\u000a
p1778
sVquestion_id
p1779
I713138
sVlast_activity_date
p1780
I1238749557
sVcreation_date
p1781
I1238749557
sVscore
p1782
I126
sVowner
p1783
(dp1784
Vuser_id
p1785
I28169
sVprofile_image
p1786
Vhttps://www.gravatar.com/avatar/ec9385dc533f1a6a93769077f852503e?s=128&d=identicon&r=PG
p1787
sVuser_type
p1788
Vregistered
p1789
sVreputation
p1790
I275578
sVlink
p1791
Vhttp://stackoverflow.com/users/28169/unwind
p1792
sVaccept_rate
p1793
I88
sVdisplay_name
p1794
Vunwind
p1795
ssVis_accepted
p1796
I01
sVanswer_id
p1797
I713143
sa(dp1798
Vbody
p1799
V<pre><code>def getPermutations(string, prefix=""):\u000a    if len(string) == 1:\u000a        yield prefix + string\u000a    else:\u000a        for i in xrange(len(string)):\u000a            for perm in getPermutations(string[:i] + string[i+1:], prefix+string[i]):\u000a                yield perm\u000a</code></pre>\u000a\u000a<p>Or without an accumulator:</p>\u000a\u000a<pre><code>def getPermutations(string):\u000a    if len(string) == 1:\u000a        yield string\u000a    else:\u000a        for i in xrange(len(string)):\u000a            for perm in getPermutations(string[:i] + string[i+1:]):\u000a                yield string[i] + perm\u000a</code></pre>\u000a
p1800
sVquestion_id
p1801
I248830
sVlast_activity_date
p1802
I1225324427
sVcreation_date
p1803
I1225324427
sVscore
p1804
I106
sVowner
p1805
(dp1806
Vuser_id
p1807
I22364
sVprofile_image
p1808
Vhttps://www.gravatar.com/avatar/e4b5d57c78e74d4f5ee9773e2926c01d?s=128&d=identicon&r=PG
p1809
sVuser_type
p1810
Vregistered
p1811
sVreputation
p1812
I55004
sVlink
p1813
Vhttp://stackoverflow.com/users/22364/markus-jarderot
p1814
sVaccept_rate
p1815
I100
sVdisplay_name
p1816
VMarkus Jarderot
p1817
ssVis_accepted
p1818
I01
sVanswer_id
p1819
I248854
sasVquota_max
p1820
I300
sVquota_remaining
p1821
I216
s.