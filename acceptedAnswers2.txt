(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>It is generally a bad pattern to kill a thread abruptly, in Python and in any language. Think of the following cases:</p>\u000a\u000a<ul>\u000a<li>the thread is holding a critical resource that must be closed properly</li>\u000a<li>the thread has created several other threads that must be killed as well.</li>\u000a</ul>\u000a\u000a<p>The nice way of handling this if you can afford it (if you are managing your own threads) is to have an exit_request flag that each threads checks on regular interval to see if it is time for him to exit.</p>\u000a\u000a<p><strong>For example:</strong></p>\u000a\u000a<pre><code>import threading\u000a\u000aclass StoppableThread(threading.Thread):\u000a    """Thread class with a stop() method. The thread itself has to check\u000a    regularly for the stopped() condition."""\u000a\u000a    def __init__(self):\u000a        super(StoppableThread, self).__init__()\u000a        self._stop_event = threading.Event()\u000a\u000a    def stop(self):\u000a        self._stop_event.set()\u000a\u000a    def stopped(self):\u000a        return self._stop_event.is_set()\u000a</code></pre>\u000a\u000a<p>In this code, you should call stop() on the thread when you want it to exit, and wait for the thread to exit properly using join(). The thread should check the stop flag at regular intervals.</p>\u000a\u000a<p>There are cases however when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls and you want to interrupt it.</p>\u000a\u000a<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>\u000a\u000a<pre><code>def _async_raise(tid, exctype):\u000a    '''Raises an exception in the threads with id tid'''\u000a    if not inspect.isclass(exctype):\u000a        raise TypeError("Only types can be raised (not instances)")\u000a    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid,\u000a                                                  ctypes.py_object(exctype))\u000a    if res == 0:\u000a        raise ValueError("invalid thread id")\u000a    elif res != 1:\u000a        # "if it returns a number greater than one, you're in trouble,\u000a        # and you should call it again with exc=NULL to revert the effect"\u000a        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)\u000a        raise SystemError("PyThreadState_SetAsyncExc failed")\u000a\u000aclass ThreadWithExc(threading.Thread):\u000a    '''A thread class that supports raising exception in the thread from\u000a       another thread.\u000a    '''\u000a    def _get_my_tid(self):\u000a        """determines this (self's) thread id\u000a\u000a        CAREFUL : this function is executed in the context of the caller\u000a        thread, to get the identity of the thread represented by this\u000a        instance.\u000a        """\u000a        if not self.isAlive():\u000a            raise threading.ThreadError("the thread is not active")\u000a\u000a        # do we have it cached?\u000a        if hasattr(self, "_thread_id"):\u000a            return self._thread_id\u000a\u000a        # no, look for it in the _active dict\u000a        for tid, tobj in threading._active.items():\u000a            if tobj is self:\u000a                self._thread_id = tid\u000a                return tid\u000a\u000a        # TODO: in python 2.6, there's a simpler way to do : self.ident\u000a\u000a        raise AssertionError("could not determine the thread's id")\u000a\u000a    def raiseExc(self, exctype):\u000a        """Raises the given exception type in the context of this thread.\u000a\u000a        If the thread is busy in a system call (time.sleep(),\u000a        socket.accept(), ...), the exception is simply ignored.\u000a\u000a        If you are sure that your exception should terminate the thread,\u000a        one way to ensure that it works is:\u000a\u000a            t = ThreadWithExc( ... )\u000a            ...\u000a            t.raiseExc( SomeException )\u000a            while t.isAlive():\u000a                time.sleep( 0.1 )\u000a                t.raiseExc( SomeException )\u000a\u000a        If the exception is to be caught by the thread, you need a way to\u000a        check that your thread has caught it.\u000a\u000a        CAREFUL : this function is executed in the context of the\u000a        caller thread, to raise an excpetion in the context of the\u000a        thread represented by this instance.\u000a        """\u000a        _async_raise( self._get_my_tid(), exctype )\u000a</code></pre>\u000a\u000a<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>\u000a\u000a<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>\u000a
p6
sVquestion_id
p7
I323972
sVlast_activity_date
p8
I1494360278
sVcreation_date
p9
I1227871194
sVscore
p10
I433
sVowner
p11
(dp12
Vuser_id
p13
I13618
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/d55ed903bf7989796c0db26fc007b09f?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I6947
sVlink
p19
Vhttp://stackoverflow.com/users/13618/philippe-f
p20
sVaccept_rate
p21
I50
sVdisplay_name
p22
VPhilippe F
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1494360278
sVanswer_id
p26
I325528
sa(dp27
Vbody
p28
V<p>You can make use of the <a href="https://www.python.org/dev/peps/pep-0322/" rel="noreferrer"><code>reversed</code></a> function for this as:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; array=[0,10,20,40]\u000a&gt;&gt;&gt; for i in reversed(array):\u000a...     print i\u000a</code></pre>\u000a\u000a<p>Note that <code>reversed(...)</code> does not return a list. You can get a reversed list using <code>list(reversed(array))</code>.</p>\u000a
p29
sVquestion_id
p30
I3940128
sVlast_activity_date
p31
I1493944219
sVcreation_date
p32
I1287126140
sVscore
p33
I592
sVowner
p34
(dp35
Vuser_id
p36
I227665
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/ccc83a013527c186c03ea3a475552813?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I280080
sVlink
p42
Vhttp://stackoverflow.com/users/227665/codaddict
p43
sVaccept_rate
p44
I33
sVdisplay_name
p45
Vcodaddict
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1493944219
sVanswer_id
p49
I3940144
sa(dp50
Vbody
p51
V<p>You are really mixing together two different things.</p>\u000a\u000a<p>Use <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer"><code>dir()</code></a>, <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code></a> or the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module to get what you are interested in (I use <code>__builtins__</code> as an example; you can use any object instead).</p>\u000a\u000a<pre><code>&gt;&gt;&gt; l = dir(__builtins__)\u000a&gt;&gt;&gt; d = __builtins__.__dict__\u000a</code></pre>\u000a\u000a<p>Print that dictionary however fancy you like:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print l\u000a['ArithmeticError', 'AssertionError', 'AttributeError',...\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from pprint import pprint\u000a&gt;&gt;&gt; pprint(l)\u000a['ArithmeticError',\u000a 'AssertionError',\u000a 'AttributeError',\u000a 'BaseException',\u000a 'DeprecationWarning',\u000a...\u000a\u000a&gt;&gt;&gt; pprint(d, indent=2)\u000a{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,\u000a  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,\u000a  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,\u000a...\u000a  '_': [ 'ArithmeticError',\u000a         'AssertionError',\u000a         'AttributeError',\u000a         'BaseException',\u000a         'DeprecationWarning',\u000a...\u000a</code></pre>\u000a\u000a<p>Pretty printing is also available in the interactive debugger as a command:</p>\u000a\u000a<pre><code>(Pdb) pp vars()\u000a{'__builtins__': {'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,\u000a                  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,\u000a                  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,\u000a                  'BaseException': &lt;type 'exceptions.BaseException'&gt;,\u000a                  'BufferError': &lt;type 'exceptions.BufferError'&gt;,\u000a                  ...\u000a                  'zip': &lt;built-in function zip&gt;},\u000a '__file__': 'pass.py',\u000a '__name__': '__main__'}\u000a</code></pre>\u000a
p52
sVquestion_id
p53
I192109
sVlast_activity_date
p54
I1493906676
sVcreation_date
p55
I1223659626
sVscore
p56
I303
sVowner
p57
(dp58
Vuser_id
p59
I3850
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/0c6524ce20ccace7c2f65e31e7f52ba7?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I23725
sVlink
p65
Vhttp://stackoverflow.com/users/3850/hop
p66
sVdisplay_name
p67
Vhop
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1493906676
sVanswer_id
p71
I192365
sa(dp72
Vbody
p73
V<ol>\u000a<li>PyPy, as others have been quick to mention, has <strong>tenuous support for C extensions</strong>. It <em>has</em> support, but typically at slower-than-Python speeds and it's iffy at best. Hence a lot of modules simply <em>require</em> CPython. Cython and Numpy are <em>awesome</em> for numerics, and most people who actually need speed in Python are using those (+ Pandas, SciPy, etc.) heavily. Since they're either non-existent or tenuously supported and slow <strong>the people who need a fast Python often are better off with CPython both for speed and ease-of-use</strong>.</li>\u000a<li>Python 3 support <strike>is experimental at the moment.</strike> <strong>has just reached stable! As of 20th June 2014, <a href="http://morepypy.blogspot.co.uk/2014/06/pypy3-231-fulcrum.html" rel="noreferrer">PyPy3 2.3.1 - Fulcrum is out</a>!</strong></li>\u000a<li>PyPy sometimes <em>isn't</em> actually faster for "scripts", which a lot of people use Python for. These are the short-running programs that do something simple and small. Because PyPy is a JIT compiler its main advantages come from long run times and simple types (such as numbers). Frankly, <strong>PyPy's pre-JIT speeds are pretty bad</strong> compared to CPython.</li>\u000a<li><strong>Inertia</strong>. Moving to PyPy often requires retooling, which for some people and organizations is simply too much work.</li>\u000a</ol>\u000a\u000a<p>Those are the main reasons that affect me, I'd say.</p>\u000a\u000a<blockquote>\u000a  <p><strong>NOTE:</strong> This question is ancient! Avoid drawing conclusions from out-of-date information.</p>\u000a</blockquote>\u000a
p74
sVquestion_id
p75
I18946662
sVlast_activity_date
p76
I1492911847
sVcreation_date
p77
I1379871636
sVscore
p78
I566
sVowner
p79
(dp80
Vuser_id
p81
I1763356
sVprofile_image
p82
Vhttps://i.stack.imgur.com/zGWG9.png?s=128&g=1
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I31547
sVlink
p87
Vhttp://stackoverflow.com/users/1763356/veedrac
p88
sVaccept_rate
p89
I79
sVdisplay_name
p90
VVeedrac
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1492911847
sVanswer_id
p94
I18946824
sa(dp95
Vbody
p96
V<p>The answer to this question depends on the version of Python you're using. The simplest approach is to use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="noreferrer"><code>subprocess.check_output</code></a> function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; subprocess.check_output(['ls', '-l'])\u000ab'total 0\u005cn-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\u005cn'\u000a</code></pre>\u000a\u000a<p><code>check_output</code> runs a single program that takes only arguments as input.<sup>1</sup> It returns the result exactly as printed to <code>stdout</code>. If you need to write input to <code>stdin</code>, skip ahead to the <code>run</code> or <code>Popen</code> sections. If you want to execute complex shell commands, see the note on <code>shell=True</code> at the end of this answer.</p>\u000a\u000a<p>The <code>check_output</code> function works on almost all versions of Python still in wide use (2.7+).<sup>2</sup> But for more recent versions, it is no longer the recommended approach.</p>\u000a\u000a<h3>Modern versions of Python (3.5 or higher): <code>run</code></h3>\u000a\u000a<p>If you're using <strong>Python 3.5</strong> or higher, and <strong>do not need backwards compatibility</strong>, the <a href="https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module" rel="noreferrer">new <code>run</code> function</a> is recommended. It provides a very general, high-level API for the <code>subprocess</code> module. To capture the output of a program, pass the <code>subprocess.PIPE</code> flag to the <code>stdout</code> keyword argument. Then access the <code>stdout</code> attribute of the returned <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess" rel="noreferrer"><code>CompletedProcess</code></a> object:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import subprocess\u000a&gt;&gt;&gt; result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)\u000a&gt;&gt;&gt; result.stdout\u000ab'total 0\u005cn-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\u005cn'\u000a</code></pre>\u000a\u000a<p>The return value is a <code>bytes</code> object, so if you want a proper string, you'll need to <code>decode</code> it. Assuming the called process returns a UTF-8-encoded string:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; result.stdout.decode('utf-8')\u000a'total 0\u005cn-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\u005cn'\u000a</code></pre>\u000a\u000a<p>This can all be compressed to a one-liner:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')\u000a'total 0\u005cn-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\u005cn'\u000a</code></pre>\u000a\u000a<p>If you want to pass input to the process's <code>stdin</code>, pass a <code>bytes</code> object to the <code>input</code> keyword argument:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']\u000a&gt;&gt;&gt; input = 'foo\u005cnfoofoo\u005cn'.encode('utf-8')\u000a&gt;&gt;&gt; result = subprocess.run(cmd, stdout=subprocess.PIPE, input=input)\u000a&gt;&gt;&gt; result.stdout.decode('utf-8')\u000a'foofoo\u005cn'\u000a</code></pre>\u000a\u000a<p>You can capture errors by passing <code>stderr=subprocess.PIPE</code> (capture to <code>result.stderr</code>) or <code>stderr=subprocess.STDOUT</code> (capture to <code>result.stdout</code> along with regular output). When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\u000a\u000a<p>This adds just a bit of complexity, compared to the old way of doing things. But I think it's worth the payoff: now you can do almost anything you need to do with the <code>run</code> function alone.</p>\u000a\u000a<h3>Older versions of Python (2.7-3.4): <code>check_output</code></h3>\u000a\u000a<p>If you are using an older version of Python, or need modest backwards compatibility, you can probably use the <code>check_output</code> function as briefly described above. It has been available since Python 2.7.</p>\u000a\u000a<pre><code>subprocess.check_output(*popenargs, **kwargs)  \u000a</code></pre>\u000a\u000a<p>It takes takes the same arguments as <code>Popen</code> (see below), and returns a string containing the program's output. The beginning of this answer has a more detailed usage example. </p>\u000a\u000a<p>You can pass <code>stderr=subprocess.STDOUT</code> to ensure that error messages are included in the returned output -- but don't pass <code>stderr=subprocess.PIPE</code> to <code>check_output</code>. It can cause <a href="http://docs.python.org/library/subprocess.html#subprocess.check_output" rel="noreferrer">deadlocks</a>. When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\u000a\u000a<p>If you need to pipe from <code>stderr</code> or pass input to the process, <code>check_output</code> won't be up to the task. See the <code>Popen</code> examples below in that case. </p>\u000a\u000a<h3>Complex applications &amp; legacy versions of Python (2.6 and below): <code>Popen</code></h3>\u000a\u000a<p>If you need deep backwards compatibility, or if you need more sophisticated functionality than <code>check_output</code> provides, you'll have to work directly with <code>Popen</code> objects, which encapsulate the low-level API for subprocesses. </p>\u000a\u000a<p>The <code>Popen</code> constructor accepts either <strong>a single command</strong> without arguments, or <strong>a list</strong> containing a command as its first item, followed by any number of arguments, each as a separate item in the list. <a href="https://docs.python.org/3/library/shlex.html" rel="noreferrer"><code>shlex.split</code></a> can help parse strings into appropriately formatted lists. <code>Popen</code> objects also accept a <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="noreferrer">host of different arguments</a> for process IO management and low-level configuration. </p>\u000a\u000a<p>To send input and capture output, <code>communicate</code> is almost always the preferred method. As in:</p>\u000a\u000a<pre><code>output = subprocess.Popen(["mycmd", "myarg"], \u000a                          stdout=subprocess.PIPE).communicate()[0]\u000a</code></pre>\u000a\u000a<p>Or </p>\u000a\u000a<pre><code>&gt;&gt;&gt; import subprocess\u000a&gt;&gt;&gt; p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, \u000a...                                    stderr=subprocess.PIPE)\u000a&gt;&gt;&gt; out, err = p.communicate()\u000a&gt;&gt;&gt; print out\u000a.\u000a..\u000afoo\u000a</code></pre>\u000a\u000a<p>If you set <code>stdin=PIPE</code>, <code>communicate</code> also allows you to pass data to the process via <code>stdin</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']\u000a&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE,\u000a...                           stderr=subprocess.PIPE,\u000a...                           stdin=subprocess.PIPE)\u000a&gt;&gt;&gt; out, err = p.communicate('foo\u005cnfoofoo\u005cn')\u000a&gt;&gt;&gt; print out\u000afoofoo\u000a</code></pre>\u000a\u000a<p>Note <a href="http://stackoverflow.com/a/21867841/577088">Aaron Hall's answer</a>, which indicates that on some systems, you may need to set <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> all to <code>PIPE</code> (or <code>DEVNULL</code>) to get <code>communicate</code> to work at all.</p>\u000a\u000a<p>In some rare cases, you may need complex, real-time output capturing. <a href="http://stackoverflow.com/a/4760274/577088">Vartec</a>'s answer suggests a way forward, but methods other than <code>communicate</code> are prone to deadlocks if not used carefully.</p>\u000a\u000a<p>As with all the above functions, when security is not a concern, you can run more complex shell commands by passing <code>shell=True</code>.</p>\u000a\u000a<h3>Notes</h3>\u000a\u000a<p><strong>1. Running shell commands: the <code>shell=True</code> argument</strong></p>\u000a\u000a<p>Normally, each call to <code>run</code>, <code>check_output</code>, or the <code>Popen</code> constructor executes a <em>single program</em>. That means no fancy bash-style pipes. If you want to run complex shell commands, you can pass <code>shell=True</code>, which all three functions support.</p>\u000a\u000a<p>However, doing so raises <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="noreferrer">security concerns</a>. If you're doing anything more than light scripting, you might be better off calling each process separately, and passing the output from each as an input to the next, via</p>\u000a\u000a<pre><code>run(cmd, [stdout=etc...], input=other_output)\u000a</code></pre>\u000a\u000a<p>Or</p>\u000a\u000a<pre><code>Popen(cmd, [stdout=etc...]).communicate(other_output)\u000a</code></pre>\u000a\u000a<p>The temptation to directly connect pipes is strong; resist it. Otherwise, you'll likely see deadlocks or have to do hacky things like <a href="http://stackoverflow.com/questions/6341451/piping-together-several-subprocesses">this</a>.</p>\u000a\u000a<p><strong>2. Unicode considerations</strong></p>\u000a\u000a<p><code>check_output</code> returns a string in Python 2, but a <code>bytes</code> object in Python 3. It's worth taking a moment to <a href="https://docs.python.org/3/howto/unicode.html" rel="noreferrer">learn about unicode</a> if you haven't already.</p>\u000a
p97
sVquestion_id
p98
I4760215
sVlast_activity_date
p99
I1492288731
sVcreation_date
p100
I1295623672
sVscore
p101
I428
sVowner
p102
(dp103
Vuser_id
p104
I577088
sVprofile_image
p105
Vhttps://i.stack.imgur.com/5UZyo.jpg?s=128&g=1
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I67890
sVlink
p110
Vhttp://stackoverflow.com/users/577088/senderle
p111
sVdisplay_name
p112
Vsenderle
p113
ssVis_accepted
p114
I01
sVlast_edit_date
p115
I1492288731
sVanswer_id
p116
I4760517
sa(dp117
Vbody
p118
V<p><strong>Without</strong> the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:</p>\u000a\u000a<pre><code>x = int("deadbeef", 16)\u000a</code></pre>\u000a\u000a<p><strong>With</strong> the 0x prefix, Python can distinguish hex and decimal automatically.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print int("0xdeadbeef", 0)\u000a3735928559\u000a&gt;&gt;&gt; print int("10", 0)\u000a10\u000a</code></pre>\u000a\u000a<p>(You <em>must</em> specify <code>0</code> as the base in order to invoke this prefix-guessing behavior; omitting the second parameter means to assume base-10.)</p>\u000a
p119
sVquestion_id
p120
I209513
sVlast_activity_date
p121
I1491956479
sVcreation_date
p122
I1224178672
sVscore
p123
I657
sVowner
p124
(dp125
Vuser_id
p126
I20789
sVprofile_image
p127
Vhttps://www.gravatar.com/avatar/a913ff1821be75c981d066f685816ed9?s=128&d=identicon&r=PG
p128
sVuser_type
p129
Vregistered
p130
sVreputation
p131
I36282
sVlink
p132
Vhttp://stackoverflow.com/users/20789/dan-lenski
p133
sVaccept_rate
p134
I71
sVdisplay_name
p135
VDan Lenski
p136
ssVis_accepted
p137
I01
sVlast_edit_date
p138
I1491956479
sVanswer_id
p139
I209550
sa(dp140
Vbody
p141
V<p>Just use the -p flag when creating your virtualenv instance to specify the Python executable you want to use, e.g.:</p>\u000a\u000a<pre><code>virtualenv -p /usr/bin/python2.6 &lt;path/to/new/virtualenv/&gt;\u000a</code></pre>\u000a\u000a<p>N.B. For <strong>Python 3.6</strong> or later, refer to The Aelfinn's <a href="http://stackoverflow.com/a/39713544/1450294">answer</a> below. <em>[Editor's note: I know this should normally be a comment, not an edit, but a new comment would be hidden, and I just spent 45 minutes untangling errors because this important answer was buried under three or four parrot answers. I'm just trying to save everyone time here.]</em></p>\u000a
p142
sVquestion_id
p143
I1534210
sVlast_activity_date
p144
I1490975556
sVcreation_date
p145
I1254951192
sVscore
p146
I884
sVowner
p147
(dp148
Vuser_id
p149
I104349
sVprofile_image
p150
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p151
sVuser_type
p152
Vregistered
p153
sVreputation
p154
I356767
sVlink
p155
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p156
sVaccept_rate
p157
I86
sVdisplay_name
p158
VDaniel Roseman
p159
ssVis_accepted
p160
I01
sVlast_edit_date
p161
I1490975556
sVanswer_id
p162
I1534343
sa(dp163
Vbody
p164
V<p>It's a list of public objects of that module, as interpreted by <code>import *</code>. It overrides the default of hiding everything that begins with an underscore.</p>\u000a
p165
sVquestion_id
p166
I44834
sVlast_activity_date
p167
I1488988212
sVcreation_date
p168
I1220563846
sVscore
p169
I227
sVowner
p170
(dp171
Vuser_id
p172
I4435
sVprofile_image
p173
Vhttps://www.gravatar.com/avatar/67f11df8aec61f878051a101032c6b2d?s=128&d=identicon&r=PG
p174
sVuser_type
p175
Vregistered
p176
sVreputation
p177
I54403
sVlink
p178
Vhttp://stackoverflow.com/users/4435/jimmy
p179
sVaccept_rate
p180
I95
sVdisplay_name
p181
VJimmy
p182
ssVis_accepted
p183
I01
sVlast_edit_date
p184
I1488988212
sVanswer_id
p185
I44842
sa(dp186
Vbody
p187
V<p>Like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; keys = ['a', 'b', 'c']\u000a&gt;&gt;&gt; values = [1, 2, 3]\u000a&gt;&gt;&gt; dictionary = dict(zip(keys, values))\u000a&gt;&gt;&gt; print(dictionary)\u000a{'a': 1, 'b': 2, 'c': 3}\u000a</code></pre>\u000a\u000a<p>Voila :-)  The pairwise dict constructor and zip function are awesomely useful: <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="noreferrer">https://docs.python.org/3/library/functions.html#func-dict</a></p>\u000a
p188
sVquestion_id
p189
I209840
sVlast_activity_date
p190
I1486253419
sVcreation_date
p191
I1224184145
sVscore
p192
I937
sVowner
p193
(dp194
Vuser_id
p195
I20789
sVprofile_image
p196
Vhttps://www.gravatar.com/avatar/a913ff1821be75c981d066f685816ed9?s=128&d=identicon&r=PG
p197
sVuser_type
p198
Vregistered
p199
sVreputation
p200
I36282
sVlink
p201
Vhttp://stackoverflow.com/users/20789/dan-lenski
p202
sVaccept_rate
p203
I71
sVdisplay_name
p204
VDan Lenski
p205
ssVis_accepted
p206
I01
sVlast_edit_date
p207
I1486253419
sVanswer_id
p208
I209854
sa(dp209
Vbody
p210
V<p>Are you talking about multi-line strings? Easy, use triple quotes to start and end them.</p>\u000a\u000a<pre><code>s = """ this is a very\u000a        long string if I had the\u000a        energy to type more and more ..."""\u000a</code></pre>\u000a\u000a<p>You can use single quotes too (3 of them of course at start and end) and treat the resulting string <code>s</code> just like any other string.</p>\u000a\u000a<p><strong>NOTE</strong>: Just as with any string, anything between the starting and ending quotes becomes part of the string, so this example has a leading blank (as pointed out by @root45). This string will also contain both blanks and newlines.</p>\u000a\u000a<p>I.e.,:</p>\u000a\u000a<pre><code>' this is a very\u005cn        long string if I had the\u005cn        energy to type more and more ...'\u000a</code></pre>\u000a\u000a<p>Finally, one can also construct long lines in Python like this:</p>\u000a\u000a<pre><code> s = ("this is a very"\u000a      "long string too"\u000a      "for sure ..."\u000a     )\u000a</code></pre>\u000a\u000a<p>which will <strong>not</strong> include any extra blanks or newlines (this is a deliberate example showing what the effect of skipping blanks will result in):</p>\u000a\u000a<pre><code>'this is a verylong string toofor sure ...'\u000a</code></pre>\u000a\u000a<p>No commas required, simply place the strings to be joined together into a pair of parenthesis and be sure to account for any needed blanks and newlines.</p>\u000a
p211
sVquestion_id
p212
I10660435
sVlast_activity_date
p213
I1485867284
sVcreation_date
p214
I1337379774
sVscore
p215
I850
sVowner
p216
(dp217
Vuser_id
p218
I1209279
sVprofile_image
p219
Vhttps://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=128&d=identicon&r=PG
p220
sVuser_type
p221
Vregistered
p222
sVreputation
p223
I60869
sVlink
p224
Vhttp://stackoverflow.com/users/1209279/levon
p225
sVaccept_rate
p226
I91
sVdisplay_name
p227
VLevon
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1485867284
sVanswer_id
p231
I10660443
sa(dp232
Vbody
p233
V<p>This works for me:</p>\u000a\u000a<pre><code>$ pip install -r requirements.txt --no-index --find-links file:///tmp/packages\u000a</code></pre>\u000a\u000a<p><code>--no-index</code> - Ignore package index (only looking at <code>--find-links</code> URLs instead). </p>\u000a\u000a<p><code>-f, --find-links &lt;URL&gt;</code> - If a URL or path to an html file, then parse for links to archives. \u000aIf a local path or <code>file://</code> URL that's a directory, then look for archives in the directory listing.</p>\u000a
p234
sVquestion_id
p235
I7225900
sVlast_activity_date
p236
I1485427524
sVcreation_date
p237
I1336039479
sVscore
p238
I215
sVowner
p239
(dp240
Vuser_id
p241
I3571
sVprofile_image
p242
Vhttps://www.gravatar.com/avatar/b1d6ed6863a3b4aab3565f1f9625f156?s=128&d=identicon&r=PG
p243
sVuser_type
p244
Vregistered
p245
sVreputation
p246
I58092
sVlink
p247
Vhttp://stackoverflow.com/users/3571/codeape
p248
sVaccept_rate
p249
I56
sVdisplay_name
p250
Vcodeape
p251
ssVis_accepted
p252
I01
sVlast_edit_date
p253
I1485427524
sVanswer_id
p254
I10429168
sa(dp255
Vbody
p256
V<p>From <a href="http://mail.python.org/pipermail/python-win32/2005-April/003100.html" rel="noreferrer">here</a>:</p>\u000a\u000a<blockquote>\u000a  <p>function ord() would get the int value\u000a  of the char. And in case you want to\u000a  convert back after playing with the\u000a  number, function chr() does the trick.</p>\u000a</blockquote>\u000a\u000a<pre><code>&gt;&gt;&gt; ord('a')\u000a97\u000a&gt;&gt;&gt; chr(97)\u000a'a'\u000a&gt;&gt;&gt; chr(ord('a') + 3)\u000a'd'\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a\u000a<p>In Python 2, there is also the <code>unichr</code> function, returning the <a href="http://en.wikipedia.org/wiki/Unicode" rel="noreferrer">Unicode</a> character whose ordinal is the <code>unichr</code> argument:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; unichr(97)\u000au'a'\u000a&gt;&gt;&gt; unichr(1234)\u000au'\u005cu04d2'\u000a</code></pre>\u000a\u000a<p>In Python 3 you can use <code>chr</code> instead of <code>unichr</code>.</p>\u000a
p257
sVquestion_id
p258
I227459
sVlast_activity_date
p259
I1485252675
sVcreation_date
p260
I1224708184
sVscore
p261
I799
sVowner
p262
(dp263
Vuser_id
p264
I18528
sVprofile_image
p265
Vhttps://www.gravatar.com/avatar/2c638d6bdc75ffd5dbf06a1053779104?s=128&d=identicon&r=PG
p266
sVuser_type
p267
Vregistered
p268
sVreputation
p269
I25689
sVlink
p270
Vhttp://stackoverflow.com/users/18528/matt-j
p271
sVdisplay_name
p272
VMatt J
p273
ssVis_accepted
p274
I01
sVlast_edit_date
p275
I1485252675
sVanswer_id
p276
I227472
sa(dp277
Vbody
p278
V<ol>\u000a<li><p>Checking for <code>__iter__</code> works on sequence types, but it would fail on e.g. strings <strong>in Python 2</strong>. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too):</p>\u000a\u000a<pre><code>try:\u000a    some_object_iterator = iter(some_object)\u000aexcept TypeError, te:\u000a    print some_object, 'is not iterable'\u000a</code></pre>\u000a\u000a<p>The <code>iter</code> built-in checks for the <code>__iter__</code> method or in the case of strings the <code>__getitem__</code> method. <strong>In Python 2</strong>, to check if an object is "list like" and not "string like" then the key is the attributes <code>__getitem__</code> and <code>__iter__</code>:</p>\u000a\u000a<blockquote>\u000a<pre><code> In [9]: hasattr([1,2,3,4], '__iter__')\u000a Out[9]: True\u000a In [11]: hasattr((1,2,3,4), '__iter__')\u000a Out[11]: True\u000a In [12]: hasattr(u"hello", '__iter__')\u000a Out[12]: False\u000a In [14]: hasattr(u"hello", '__getitem__')\u000a Out[14]: True\u000a</code></pre>\u000a</blockquote></li>\u000a<li><p>Another general pythonic approach is to assume an iterable, then fail gracefully if it does not work on the given object. The Python glossary:</p>\u000a\u000a<blockquote>\u000a  <p>Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object ("If it looks like a <strong>duck</strong> and quacks like a <strong>duck</strong>, it must be a <strong>duck</strong>.") By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). <strong>Instead, it typically employs the EAFP (Easier to Ask Forgiveness than Permission) style of programming.</strong></p>\u000a  \u000a  <p>...</p>\u000a\u000a<pre><code>try:\u000a   _ = (e for e in my_object)\u000aexcept TypeError:\u000a   print my_object, 'is not iterable'\u000a</code></pre>\u000a</blockquote></li>\u000a<li><p>The <a href="http://docs.python.org/library/collections.html#abcs-abstract-base-classes" rel="noreferrer"><code>collections</code></a> module provides some abstract base classes, which allow to ask classes or instances if they provide particular functionality, for example:</p>\u000a\u000a<pre><code>import collections\u000a\u000aif isinstance(e, collections.Iterable):\u000a    # e is iterable\u000a</code></pre></li>\u000a</ol>\u000a\u000a<hr>\u000a\u000a<p><strong>NB:</strong> generic behavior changed in Python 3 (strings <em>are</em> now iterable), so be careful if you want to use <code>iter</code> to differentiate between types.\u000aSee <a href="http://stackoverflow.com/questions/1055360/how-to-tell-a-variable-is-iterable-but-not-a-string">"iterable but not string"</a> for details.</p>\u000a
p279
sVquestion_id
p280
I1952464
sVlast_activity_date
p281
I1484934332
sVcreation_date
p282
I1261570603
sVscore
p283
I527
sVowner
p284
(dp285
Vuser_id
p286
I89391
sVprofile_image
p287
Vhttps://www.gravatar.com/avatar/bb5230985aa2c9ea7d022d1a16890f16?s=128&d=identicon&r=PG
p288
sVuser_type
p289
Vregistered
p290
sVreputation
p291
I104500
sVlink
p292
Vhttp://stackoverflow.com/users/89391/miku
p293
sVaccept_rate
p294
I78
sVdisplay_name
p295
Vmiku
p296
ssVis_accepted
p297
I01
sVlast_edit_date
p298
I1484934332
sVanswer_id
p299
I1952481
sa(dp300
Vbody
p301
V<p>As of January 2017, all of the other answers to this question are at least two years out-of-date. When you come across advice on Python packaging issues, remember to look at the date of publication, and don't trust out-of-date information.</p>\u000a\u000a<p>The <a href="https://packaging.python.org/">Python Packaging User Guide</a> is worth a read. Every page has a "last reviewed" date displayed, so you can check the recency of the manual, and it's quite comprehensive. The fact that it's hosted on a subdomain of python.org of the Python Software Foundation just adds credence to it. The <a href="https://packaging.python.org/key_projects/">Project Summaries</a> page is especially relevant here.</p>\u000a\u000a<h2>Summary of tools:</h2>\u000a\u000a<p>Here's a summary of the Python packaging landscape in January 2017:</p>\u000a\u000a<h3>Supported tools:</h3>\u000a\u000a<ul>\u000a<li><p><strong>Distutils</strong> is still the standard tool for packaging in Python. It is included in the standard library (Python 2 and Python 3.0 to 3.6). It is useful for simple Python distributions, but lacks features. It introduces the <code>distutils</code> Python package that can be imported in your <code>setup.py</code> script.</p>\u000a\u000a<ul>\u000a<li><sub><a href="https://docs.python.org/3/library/distutils.html">Official docs</a> | <a href="https://packaging.python.org/key_projects/#distutils"><code>distutils</code> section of Python Package User Guide</a></sub></li>\u000a</ul></li>\u000a<li><p><strong>Setuptools</strong> was developed to overcome Distutils' limitations, and is not included in the standard library. It introduced a command-line utility called <code>easy_install</code>. It also introduced the <code>setuptools</code> Python package that can be imported in your <code>setup.py</code> script, and the <code>pkg_resources</code> Python package that can be imported in your code to locate data files installed with a distribution. One of its gotchas is that it monkey-patches the <code>distutils</code> Python package. It should work well with <code>pip</code>. <a href="https://github.com/pypa/setuptools/releases">It sees regular releases.</a></p>\u000a\u000a<ul>\u000a<li><sub><a href="https://setuptools.readthedocs.io/en/latest/">Official docs</a> | <a href="https://pypi.python.org/pypi/setuptools">Pypi page</a> | <a href="https://github.com/pypa/setuptools">GitHub repo</a> | <a href="https://packaging.python.org/key_projects/#setuptools"><code>setuptools</code> section of Python Package User Guide</a></sub></li>\u000a</ul></li>\u000a</ul>\u000a\u000a<h3>Deprecated/abandoned tools:</h3>\u000a\u000a<ul>\u000a<li><p><strong>Distribute</strong> was a fork of Setuptools. It shared the same namespace, so if you had Distribute installed, <code>import setuptools</code> would actually import the package distributed with Distribute. <strong><em>Distribute was merged back into Setuptools 0.7</em></strong>, so you don't need to use Distribute any more. In fact, the version on Pypi is just a compatibility layer that installs Setuptools.</p></li>\u000a<li><p><strong>Distutils2</strong> was an attempt to take the best of Distutils, Setuptools and Distribute and become the standard tool included in Python's standard library. The idea was that Distutils2 would be distributed for old Python versions, and that Distutils2 would be renamed to <code>packaging</code> for Python 3.3, which would include it in its standard library. These plans did not go as intended, however, and currently, <strong><em>Distutils2 is an abandoned project</em></strong>. The latest release was in March 2012, and its Pypi home page has finally been updated to reflect its death.</p></li>\u000a</ul>\u000a\u000a<h3>Alpha software:</h3>\u000a\u000a<ul>\u000a<li><p><strong>Distlib</strong> is a tool that aims to implement a subset of the previous tools' functionality, but only functionality that is very well-defined in accepted PEPs. It is one of the tools of the PyPA (Python Package Authority), and it should hopefully be included eventually in the Python standard library someday. <strong><em>It is still considered alpha software, so end-users beware.</em></strong></p>\u000a\u000a<ul>\u000a<li><sub><a href="http://pythonhosted.org/distlib/">Official docs</a> | <a href="https://pypi.python.org/pypi/distlib">Pypi page</a> | <a href="https://bitbucket.org/vinay.sajip/distlib">Bitbucket repo</a> | <a href="https://packaging.python.org/key_projects/#distlib"><code>distlib</code> section of Python Package User Guide</a></sub></li>\u000a</ul></li>\u000a<li><p>There are <a href="https://packaging.python.org/key_projects/">a couple more tools</a> (eg: Bento), but I won't mention them as they are too obscure or niche or early or undeveloped for this answer post, or else they're not direct alternatives.</p></li>\u000a</ul>\u000a\u000a<h2>Recommendation:</h2>\u000a\u000a<p>So in conclusion, out of all these options, <strong>I would recommend Setuptools</strong>, unless your requirements are very basic and you only need Distutils. Setuptools works very well with Virtualenv and Pip, tools that I highly recommend. Virtualenv and Pip could both be considered official, as they're part of PyPA, and Python 3 now ships <a href="https://docs.python.org/3/library/ensurepip.html"><code>ensurepip</code></a> (which helps you install <code>pip</code> on some systems).</p>\u000a\u000a<p>If you're looking into Virtualenv, you might be interested in this question: <a href="http://stackoverflow.com/q/41573587/247696">What is the difference between <code>venv</code>, <code>pyvenv</code>, <code>pyenv</code>, <code>virtualenv</code>, <code>virtualenvwrapper</code>, etc?</a>. (Yes, I know, I groan with you.)</p>\u000a\u000a<p>As a side-note, I recommend using Virtualenv 1.10 or higher, as it is the first release that recognises the Setuptools/Distribute merger, for both Python 2 and 3.</p>\u000a
p302
sVquestion_id
p303
I6344076
sVlast_activity_date
p304
I1484065938
sVcreation_date
p305
I1360247870
sVscore
p306
I709
sVowner
p307
(dp308
Vuser_id
p309
I247696
sVprofile_image
p310
Vhttps://www.gravatar.com/avatar/936383b387d6cc6d51279e429e5d7cd9?s=128&d=identicon&r=PG
p311
sVuser_type
p312
Vregistered
p313
sVreputation
p314
I28809
sVlink
p315
Vhttp://stackoverflow.com/users/247696/flimm
p316
sVaccept_rate
p317
I76
sVdisplay_name
p318
VFlimm
p319
ssVis_accepted
p320
I01
sVlast_edit_date
p321
I1484065938
sVanswer_id
p322
I14753678
sa(dp323
Vbody
p324
V<p>You should use the <code>print()</code> function which is available since Python 2.6+</p>\u000a\u000a<pre><code>from __future__ import print_function  # Only needed for Python 2\u000aprint("hi there", file=f)\u000a</code></pre>\u000a\u000a<p>For Python 3 you don't need the <code>import</code>, since the  <code>print()</code> function is the default.</p>\u000a\u000a<p>The alternative would be to use:</p>\u000a\u000a<pre><code>f = open('myfile', 'w')\u000af.write('hi there\u005cn')  # python will convert \u005cn to os.linesep\u000af.close()  # you can omit in most cases as the destructor will call it\u000a</code></pre>\u000a\u000a<p>Quoting from <a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files">Python documentation</a> regarding newlines:</p>\u000a\u000a<blockquote>\u000a  <p>On output, if newline is None, any <code>'\u005cn'</code> characters written are translated to the system default line separator, <code>os.linesep</code>. If newline is <code>''</code>, no translation takes place. If newline is any of the other legal values, any <code>'\u005cn'</code> characters written are translated to the given string.</p>\u000a</blockquote>\u000a
p325
sVquestion_id
p326
I6159900
sVlast_activity_date
p327
I1483305599
sVcreation_date
p328
I1306561718
sVscore
p329
I758
sVowner
p330
(dp331
Vuser_id
p332
I99834
sVprofile_image
p333
Vhttps://www.gravatar.com/avatar/63c50004c4f6eaf3235b9ea836f4b6cf?s=128&d=identicon&r=PG
p334
sVuser_type
p335
Vregistered
p336
sVreputation
p337
I55312
sVlink
p338
Vhttp://stackoverflow.com/users/99834/sorin
p339
sVaccept_rate
p340
I47
sVdisplay_name
p341
Vsorin
p342
ssVis_accepted
p343
I01
sVlast_edit_date
p344
I1483305599
sVanswer_id
p345
I6159912
sa(dp346
Vbody
p347
V<p>Are you talking about <a href="https://docs.python.org/3.5/tutorial/controlflow.html#lambda-expressions" rel="noreferrer">lambda functions</a>? Like</p>\u000a\u000a<pre><code>lambda x: x**2 + 2*x - 5\u000a</code></pre>\u000a\u000a<p>Those things are actually quite useful.  Python supports a style of programming called <em>functional programming</em> where you can pass functions to other functions to do stuff. Example:</p>\u000a\u000a<pre><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])\u000a</code></pre>\u000a\u000a<p>sets <code>mult3</code> to <code>[3, 6, 9]</code>, those elements of the original list that are multiples of 3. This is shorter (and, one could argue, clearer) than</p>\u000a\u000a<pre><code>def filterfunc(x):\u000a    return x % 3 == 0\u000amult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])\u000a</code></pre>\u000a\u000a<p>Of course, in this particular case, you could do the same thing as a list comprehension:</p>\u000a\u000a<pre><code>mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]\u000a</code></pre>\u000a\u000a<p>(or even as <code>range(3,10,3)</code>), but there are many other, more sophisticated use cases where you can't use a list comprehension and a lambda function may be the shortest way to write something out.</p>\u000a\u000a<ul>\u000a<li><p>Returning a function from another function</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def transform(n):\u000a...     return lambda x: x + n\u000a...\u000a&gt;&gt;&gt; f = transform(3)\u000a&gt;&gt;&gt; f(4)\u000a7\u000a</code></pre>\u000a\u000a<p>This is often used to create function wrappers, such as Python's decorators.</p></li>\u000a<li><p>Combining elements of an iterable sequence with <code>reduce()</code></p>\u000a\u000a<pre><code>&gt;&gt;&gt; reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])\u000a'1, 2, 3, 4, 5, 6, 7, 8, 9'\u000a</code></pre></li>\u000a<li><p>Sorting by an alternate key</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))\u000a[5, 4, 6, 3, 7, 2, 8, 1, 9]\u000a</code></pre></li>\u000a</ul>\u000a\u000a<p>I use lambda functions on a regular basis. It took me a while to get used to them, but eventually I came to understand that they're a very valuable part of the language.</p>\u000a
p348
sVquestion_id
p349
I890128
sVlast_activity_date
p350
I1481023614
sVcreation_date
p351
I1242852730
sVscore
p352
I725
sVowner
p353
(dp354
Vuser_id
p355
I56541
sVprofile_image
p356
Vhttps://i.stack.imgur.com/C6rHm.png?s=128&g=1
p357
sVuser_type
p358
Vregistered
p359
sVreputation
p360
I76997
sVlink
p361
Vhttp://stackoverflow.com/users/56541/david-z
p362
sVaccept_rate
p363
I81
sVdisplay_name
p364
VDavid Z
p365
ssVis_accepted
p366
I01
sVlast_edit_date
p367
I1481023614
sVanswer_id
p368
I890188
sa(dp369
Vbody
p370
V<blockquote>\u000a  <p><a href="https://docs.python.org/2/library/stdtypes.html#str.count" rel="noreferrer">str.count(sub[, start[, end]])</a></p>\u000a  \u000a  <p>Return the number of non-overlapping occurrences of substring <code>sub</code> in the range <code>[start, end]</code>. Optional arguments <code>start</code> and <code>end</code> are interpreted as in slice notation.</p>\u000a</blockquote>\u000a\u000a<pre><code>&gt;&gt;&gt; sentence = 'Mary had a little lamb'\u000a&gt;&gt;&gt; sentence.count('a')\u000a4\u000a</code></pre>\u000a
p371
sVquestion_id
p372
I1155617
sVlast_activity_date
p373
I1480576588
sVcreation_date
p374
I1248120266
sVscore
p375
I749
sVowner
p376
(dp377
Vuser_id
p378
I133867
sVprofile_image
p379
Vhttps://www.gravatar.com/avatar/6e6ab160c951099a0cb3b40fc3121aea?s=128&d=identicon&r=PG
p380
sVuser_type
p381
Vregistered
p382
sVreputation
p383
I8559
sVlink
p384
Vhttp://stackoverflow.com/users/133867/ogre-codes
p385
sVdisplay_name
p386
VOgre Codes
p387
ssVis_accepted
p388
I01
sVlast_edit_date
p389
I1480576588
sVanswer_id
p390
I1155647
sa(dp391
Vbody
p392
V<p>You can reload a module when it has already been imported by using the <a href="https://docs.python.org/2.7/library/functions.html#reload" rel="noreferrer"><code>reload</code></a> builtin function in Python 2:</p>\u000a\u000a<pre><code>import foo\u000a\u000awhile True:\u000a    # Do some things.\u000a    if is_changed(foo):\u000a        foo = reload(foo)\u000a</code></pre>\u000a\u000a<p>In Python 3, <code>reload</code> was moved to the <a href="https://docs.python.org/3.2/library/imp.html" rel="noreferrer"><code>imp</code></a> module. In 3.4, <code>imp</code> was deprecated in favor of <a href="https://docs.python.org/3.4/library/importlib.html" rel="noreferrer"><code>importlib</code></a>, and <code>reload</code> was added to the latter. When targeting 3 or later, either reference the appropriate module when calling <code>reload</code> or import it.</p>\u000a\u000a<p>I think that this is what you want. Web servers like Django's development server use this so that you can see the effects of your code changes without restarting the server process itself.</p>\u000a\u000a<p>To quote from the docs:</p>\u000a\u000a<blockquote>\u000a  <p>Python modules\u2019 code is recompiled and\u000a  the module-level code reexecuted,\u000a  defining a new set of objects which\u000a  are bound to names in the module\u2019s\u000a  dictionary. The init function of\u000a  extension modules is not called a\u000a  second time. As with all other objects\u000a  in Python the old objects are only\u000a  reclaimed after their reference counts\u000a  drop to zero. The names in the module\u000a  namespace are updated to point to any\u000a  new or changed objects. Other\u000a  references to the old objects (such as\u000a  names external to the module) are not\u000a  rebound to refer to the new objects\u000a  and must be updated in each namespace\u000a  where they occur if that is desired.</p>\u000a</blockquote>\u000a\u000a<p>As you noted in your question, you'll have to reconstruct <code>Foo</code> objects if the <code>Foo</code> class resides in the <code>foo</code> module.</p>\u000a
p393
sVquestion_id
p394
I437589
sVlast_activity_date
p395
I1480545813
sVcreation_date
p396
I1231806880
sVscore
p397
I435
sVowner
p398
(dp399
Vuser_id
p400
I3594
sVprofile_image
p401
Vhttps://www.gravatar.com/avatar/5928057c2aff65b162eb34d5cc3797fa?s=128&d=identicon&r=PG
p402
sVuser_type
p403
Vregistered
p404
sVreputation
p405
I29354
sVlink
p406
Vhttp://stackoverflow.com/users/3594/cdleary
p407
sVaccept_rate
p408
I95
sVdisplay_name
p409
Vcdleary
p410
ssVis_accepted
p411
I01
sVlast_edit_date
p412
I1480545813
sVanswer_id
p413
I437591
sa(dp414
Vbody
p415
V<p>I detected the peaks using a <strong>local maximum filter</strong>. Here is the result on your first dataset of 4 paws:\u000a<img src="https://i.stack.imgur.com/Kgt4H.png" alt="Peaks detection result"></p>\u000a\u000a<p>I also ran it on the second dataset of 9 paws and <a href="https://i.stack.imgur.com/4CKCh.png" rel="nofollow noreferrer">it worked as well</a>.</p>\u000a\u000a<p>Here is how you do it:</p>\u000a\u000a<pre><code>import numpy as np\u000afrom scipy.ndimage.filters import maximum_filter\u000afrom scipy.ndimage.morphology import generate_binary_structure, binary_erosion\u000aimport matplotlib.pyplot as pp\u000a\u000a#for some reason I had to reshape. Numpy ignored the shape header.\u000apaws_data = np.loadtxt("paws.txt").reshape(4,11,14)\u000a\u000a#getting a list of images\u000apaws = [p.squeeze() for p in np.vsplit(paws_data,4)]\u000a\u000a\u000adef detect_peaks(image):\u000a    """\u000a    Takes an image and detect the peaks usingthe local maximum filter.\u000a    Returns a boolean mask of the peaks (i.e. 1 when\u000a    the pixel's value is the neighborhood maximum, 0 otherwise)\u000a    """\u000a\u000a    # define an 8-connected neighborhood\u000a    neighborhood = generate_binary_structure(2,2)\u000a\u000a    #apply the local maximum filter; all pixel of maximal value \u000a    #in their neighborhood are set to 1\u000a    local_max = maximum_filter(image, footprint=neighborhood)==image\u000a    #local_max is a mask that contains the peaks we are \u000a    #looking for, but also the background.\u000a    #In order to isolate the peaks we must remove the background from the mask.\u000a\u000a    #we create the mask of the background\u000a    background = (image==0)\u000a\u000a    #a little technicality: we must erode the background in order to \u000a    #successfully subtract it form local_max, otherwise a line will \u000a    #appear along the background border (artifact of the local maximum filter)\u000a    eroded_background = binary_erosion(background, structure=neighborhood, border_value=1)\u000a\u000a    #we obtain the final mask, containing only peaks, \u000a    #by removing the background from the local_max mask (xor operation)\u000a    detected_peaks = local_max ^ eroded_background\u000a\u000a    return detected_peaks\u000a\u000a\u000a#applying the detection and plotting results\u000afor i, paw in enumerate(paws):\u000a    detected_peaks = detect_peaks(paw)\u000a    pp.subplot(4,2,(2*i+1))\u000a    pp.imshow(paw)\u000a    pp.subplot(4,2,(2*i+2) )\u000a    pp.imshow(detected_peaks)\u000a\u000app.show()\u000a</code></pre>\u000a\u000a<p>All you need to do after is use <em>scipy.ndimage.measurements.label</em> on the mask to label all distinct objects. Then you'll be able to play with them individually.</p>\u000a\u000a<p><strong>Note</strong> that the method works well because the background is not noisy. If it were, you would detect a bunch of other unwanted peaks in the background. Another important factor is the size of the <em>neighborhood</em>. You will need to adjust it if the peak size changes (the should remain roughly proportional).</p>\u000a
p416
sVquestion_id
p417
I3684484
sVlast_activity_date
p418
I1478853050
sVcreation_date
p419
I1284176287
sVscore
p420
I219
sVowner
p421
(dp422
Vuser_id
p423
I50135
sVprofile_image
p424
Vhttps://www.gravatar.com/avatar/60a28f9fd3193f7916820f0e67ce21da?s=128&d=identicon&r=PG
p425
sVuser_type
p426
Vregistered
p427
sVreputation
p428
I5416
sVlink
p429
Vhttp://stackoverflow.com/users/50135/ivan
p430
sVdisplay_name
p431
VIvan
p432
ssVis_accepted
p433
I01
sVlast_edit_date
p434
I1478853050
sVanswer_id
p435
I3689710
sa(dp436
Vbody
p437
V<p>I found this post searching for a Linux solution to this problem.</p>\u000a\u000a<p>This <a href="https://web.archive.org/web/20110305033324/http://goshawknest.wordpress.com/2011/02/16/how-to-install-psycopg2-under-virtualenv/" rel="noreferrer">post by "goshawk"</a> gave me the solution: run <code>sudo apt-get install libpq-dev python-dev</code> if you are on Ubuntu/Debian.</p>\u000a\u000a<h1>Update</h1>\u000a\u000a<p>Since more people have found this answer useful and posted their own solutions, here's a list of them:</p>\u000a\u000a<h2>Debian/Ubuntu</h2>\u000a\u000a<h3>Python 2</h3>\u000a\u000a<pre><code>sudo apt install libpq-dev python-dev\u000a</code></pre>\u000a\u000a<h3>Python 3</h3>\u000a\u000a<pre><code>sudo apt install libpq-dev python3-dev\u000a</code></pre>\u000a\u000a<h3>Additional</h3>\u000a\u000a<p>If none of the above solve your issue, try</p>\u000a\u000a<pre><code>sudo apt install build-essential\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>sudo apt install postgresql-server-dev-all\u000a</code></pre>\u000a
p438
sVquestion_id
p439
I5420789
sVlast_activity_date
p440
I1475767347
sVcreation_date
p441
I1301239516
sVscore
p442
I634
sVowner
p443
(dp444
Vuser_id
p445
I202522
sVprofile_image
p446
Vhttps://www.gravatar.com/avatar/a91c304e594e14d874923751e075f484?s=128&d=identicon&r=PG
p447
sVuser_type
p448
Vregistered
p449
sVreputation
p450
I8152
sVlink
p451
Vhttp://stackoverflow.com/users/202522/joar
p452
sVaccept_rate
p453
I93
sVdisplay_name
p454
Vjoar
p455
ssVis_accepted
p456
I01
sVlast_edit_date
p457
I1475767347
sVanswer_id
p458
I5450183
sa(dp459
Vbody
p460
V<p>From <a href="https://docs.python.org/2/library/simplehttpserver.html">the docs</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The <code>SimpleHTTPServer</code> module has been merged into <code>http.server</code> in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.</p>\u000a</blockquote>\u000a\u000a<p>So, your command is <code>python3 -m http.server</code>.</p>\u000a
p461
sVquestion_id
p462
I7943751
sVlast_activity_date
p463
I1475484299
sVcreation_date
p464
I1319959738
sVscore
p465
I655
sVowner
p466
(dp467
Vuser_id
p468
I99057
sVprofile_image
p469
Vhttps://www.gravatar.com/avatar/c50e5892d79fb240b2c870d458505eea?s=128&d=identicon&r=PG
p470
sVuser_type
p471
Vregistered
p472
sVreputation
p473
I29855
sVlink
p474
Vhttp://stackoverflow.com/users/99057/petr-viktorin
p475
sVdisplay_name
p476
VPetr Viktorin
p477
ssVis_accepted
p478
I01
sVlast_edit_date
p479
I1475484299
sVanswer_id
p480
I7943768
sa(dp481
Vbody
p482
V<p>Getting some sort of modification date in a cross-platform way is easy - just call <a href="https://docs.python.org/library/os.path.html#os.path.getmtime" rel="noreferrer"><code>os.path.getmtime(path)</code></a> and you'll get the Unix timestamp of when the file at <code>path</code> was last modified.</p>\u000a\u000a<p>Getting file <em>creation</em> dates, on the other hand, is fiddly and platform-dependent, differing even between the three big OSes:</p>\u000a\u000a<ul>\u000a<li>On <strong>Windows</strong>, a file's <code>ctime</code> (documented at <a href="https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx" rel="noreferrer">https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx</a>) stores its creation date. You can access this in Python through <a href="https://docs.python.org/library/os.path.html#os.path.getctime" rel="noreferrer"><code>os.path.getctime()</code></a> or the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_ctime" rel="noreferrer"><code>.st_ctime</code></a> attribute of the result of a call to <a href="https://docs.python.org/3/library/os.html#os.stat" rel="noreferrer"><code>os.stat()</code></a>. This <em>won't</em> work on Unix, where the <code>ctime</code> <a href="http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime" rel="noreferrer">is the last time that the file's attributes <em>or</em> content were changed</a>.</li>\u000a<li>On <strong>Mac</strong>, as well as some other Unix-based OSes, you can use the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_birthtime" rel="noreferrer"><code>.st_birthtime</code></a> attribute of the result of a call to <code>os.stat()</code>.</li>\u000a<li><p>On <strong>Linux</strong>, this is currently impossible, at least without writing a C extension for Python. Although some file systems commonly used with Linux <a href="https://unix.stackexchange.com/questions/7562/what-file-systems-on-linux-store-the-creation-time">do store creation dates</a> (for example, <code>ext4</code> stores them in <code>st_crtime</code>) , the Linux kernel <a href="https://unix.stackexchange.com/questions/91197/how-to-find-creation-date-of-file">offers no way of accessing them</a>; in particular, the structs it returns from <code>stat()</code> calls in C, as of the latest kernel version, <a href="https://github.com/torvalds/linux/blob/v4.8-rc6/include/linux/stat.h" rel="noreferrer">don't contain any creation date fields</a>. You can also see that the identifier <code>st_crtime</code> doesn't currently feature anywhere in the <a href="https://github.com/python/cpython/search?utf8=%E2%9C%93&amp;q=st_crtime" rel="noreferrer">Python source</a>. At least if you're on <code>ext4</code>, the data <em>is</em> attached to the inodes in the file system, but there's no convenient way of accessing it.</p>\u000a\u000a<p>The next-best thing on Linux is to access the file's <code>mtime</code>, through either <a href="https://docs.python.org/library/os.path.html#os.path.getmtime" rel="noreferrer"><code>os.path.getmtime()</code></a> or the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_ctime" rel="noreferrer"><code>.st_mtime</code></a> attribute of an <code>os.stat()</code> result. This will give you the last time the file's content was modified, which may be adequate for some use cases.</p></li>\u000a</ul>\u000a\u000a<p>Putting this all together, cross-platform code should look something like this...</p>\u000a\u000a<pre><code>import os\u000aimport platform\u000a\u000adef creation_date(path_to_file):\u000a    """\u000a    Try to get the date that a file was created, falling back to when it was\u000a    last modified if that isn't possible.\u000a    See http://stackoverflow.com/a/39501288/1709587 for explanation.\u000a    """\u000a    if platform.system() == 'Windows':\u000a        return os.path.getctime(path_to_file)\u000a    else:\u000a        stat = os.stat(path_to_file)\u000a        try:\u000a            return stat.st_birthtime\u000a        except AttributeError:\u000a            # We're probably on Linux. No easy way to get creation dates here,\u000a            # so we'll settle for when its content was last modified.\u000a            return stat.st_mtime\u000a</code></pre>\u000a
p483
sVquestion_id
p484
I237079
sVlast_activity_date
p485
I1473897866
sVcreation_date
p486
I1473897114
sVscore
p487
I99
sVowner
p488
(dp489
Vuser_id
p490
I1709587
sVprofile_image
p491
Vhttps://i.stack.imgur.com/frBtD.jpg?s=128&g=1
p492
sVuser_type
p493
Vregistered
p494
sVreputation
p495
I32700
sVlink
p496
Vhttp://stackoverflow.com/users/1709587/mark-amery
p497
sVaccept_rate
p498
I68
sVdisplay_name
p499
VMark Amery
p500
ssVis_accepted
p501
I01
sVlast_edit_date
p502
I1492086984
sVanswer_id
p503
I39501288
sa(dp504
Vbody
p505
V<p>I routinely use tens of gigabytes of data in just this fashion\u000ae.g. I have tables on disk that I read via queries, create data and append back.</p>\u000a\u000a<p>It's worth reading <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#hdf5-pytables">the docs</a> and <a href="https://groups.google.com/forum/m/?fromgroups#!topic/pydata/cmw1F3OFJSc">late in this thread</a> for several suggestions for how to store your data.</p>\u000a\u000a<p>Details which will affect how you store your data, like:<br>\u000a<em>Give as much detail as you can; and I can help you develop a structure.</em></p>\u000a\u000a<ol>\u000a<li>Size of data, # of rows, columns, types of columns; are you appending\u000arows, or just columns? </li>\u000a<li>What will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.<br>\u000a(Giving a toy example could enable us to offer more specific recommendations.)</li>\u000a<li>After that processing, then what do you do? Is step 2 ad hoc, or repeatable?</li>\u000a<li>Input flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?</li>\u000a<li>Do you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A > 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?</li>\u000a<li>Do you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?</li>\u000a</ol>\u000a\u000a<h2>Solution</h2>\u000a\u000a<p><em>Ensure you have <a href="http://pandas.pydata.org/getpandas.html">pandas at least <code>0.10.1</code></a> installed.</em></p>\u000a\u000a<p>Read <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#iterating-through-files-chunk-by-chunk">iterating files chunk-by-chunk</a> and <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#multiple-table-queries">multiple table queries</a>.</p>\u000a\u000a<p>Since pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):<br>\u000a(The following is pseudocode.)</p>\u000a\u000a<pre><code>import numpy as np\u000aimport pandas as pd\u000a\u000a# create a store\u000astore = pd.HDFStore('mystore.h5')\u000a\u000a# this is the key to your storage:\u000a#    this maps your fields to a specific group, and defines \u000a#    what you want to have as data_columns.\u000a#    you might want to create a nice class wrapping this\u000a#    (as you will want to have this map and its inversion)  \u000agroup_map = dict(\u000a    A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),\u000a    B = dict(fields = ['field_10',......        ], dc = ['field_10']),\u000a    .....\u000a    REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),\u000a\u000a)\u000a\u000agroup_map_inverted = dict()\u000afor g, v in group_map.items():\u000a    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))\u000a</code></pre>\u000a\u000a<p>Reading in the files and creating the storage (essentially doing what <code>append_to_multiple</code> does):</p>\u000a\u000a<pre><code>for f in files:\u000a   # read in the file, additional options hmay be necessary here\u000a   # the chunksize is not strictly necessary, you may be able to slurp each \u000a   # file into memory in which case just eliminate this part of the loop \u000a   # (you can also change chunksize if necessary)\u000a   for chunk in pd.read_table(f, chunksize=50000):\u000a       # we are going to append to each table by group\u000a       # we are not going to create indexes at this time\u000a       # but we *ARE* going to create (some) data_columns\u000a\u000a       # figure out the field groupings\u000a       for g, v in group_map.items():\u000a             # create the frame for this group\u000a             frame = chunk.reindex(columns = v['fields'], copy = False)    \u000a\u000a             # append it\u000a             store.append(g, frame, index=False, data_columns = v['dc'])\u000a</code></pre>\u000a\u000a<p>Now you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).</p>\u000a\u000a<p>This is how you get columns and create new ones:</p>\u000a\u000a<pre><code>frame = store.select(group_that_I_want)\u000a# you can optionally specify:\u000a# columns = a list of the columns IN THAT GROUP (if you wanted to\u000a#     select only say 3 out of the 20 columns in this sub-table)\u000a# and a where clause if you want a subset of the rows\u000a\u000a# do calculations on this frame\u000anew_frame = cool_function_on_frame(frame)\u000a\u000a# to 'add columns', create a new group (you probably want to\u000a# limit the columns in this new_group to be only NEW ones\u000a# (e.g. so you don't overlap from the other tables)\u000a# add this info to the group_map\u000astore.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)\u000a</code></pre>\u000a\u000a<p>When you are ready for post_processing:</p>\u000a\u000a<pre><code># This may be a bit tricky; and depends what you are actually doing.\u000a# I may need to modify this function to be a bit more general:\u000areport_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1&gt;0', 'field_1000=foo'], selector = group_1)\u000a</code></pre>\u000a\u000a<p>About data_columns, you don't actually need to define <strong>ANY</strong> data_columns; they allow you to sub-select rows based on the column. E.g. something like:</p>\u000a\u000a<pre><code>store.select(group, where = ['field_1000=foo', 'field_1001&gt;0'])\u000a</code></pre>\u000a\u000a<p>They may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).</p>\u000a\u000a<p>You also might want to:</p>\u000a\u000a<ul>\u000a<li>create a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). <em>This way the structure would be pretty transparent to you.</em></li>\u000a<li>indexes on certain data columns (makes row-subsetting much faster).</li>\u000a<li>enable compression.</li>\u000a</ul>\u000a\u000a<p>Let me know when you have questions!</p>\u000a
p506
sVquestion_id
p507
I14262433
sVlast_activity_date
p508
I1471485106
sVcreation_date
p509
I1357858642
sVscore
p510
I344
sVowner
p511
(dp512
Vuser_id
p513
I644898
sVprofile_image
p514
Vhttps://www.gravatar.com/avatar/b2833d485728ee2f603802242ebc9826?s=128&d=identicon&r=PG
p515
sVuser_type
p516
Vregistered
p517
sVreputation
p518
I55285
sVlink
p519
Vhttp://stackoverflow.com/users/644898/jeff
p520
sVdisplay_name
p521
VJeff
p522
ssVis_accepted
p523
I01
sVlast_edit_date
p524
I1471485106
sVanswer_id
p525
I14268804
sa(dp526
Vbody
p527
V<p>Use <a href="http://docs.python.org/library/stdtypes.html#dict.pop" rel="noreferrer"><code>dict.pop()</code></a>:</p>\u000a\u000a<pre><code>my_dict.pop('key', None)\u000a</code></pre>\u000a\u000a<p>This will return <code>my_dict[key]</code> if <code>key</code> exists in the dictionary, and <code>None</code> otherwise. If the second parameter is not specified (ie. <code>my_dict.pop('key')</code>) and <code>key</code> does not exist, a <code>KeyError</code> is raised.</p>\u000a
p528
sVquestion_id
p529
I11277432
sVlast_activity_date
p530
I1470439414
sVcreation_date
p531
I1341088158
sVscore
p532
I1155
sVowner
p533
(dp534
Vuser_id
p535
I279627
sVprofile_image
p536
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p537
sVuser_type
p538
Vregistered
p539
sVreputation
p540
I252330
sVlink
p541
Vhttp://stackoverflow.com/users/279627/sven-marnach
p542
sVaccept_rate
p543
I78
sVdisplay_name
p544
VSven Marnach
p545
ssVis_accepted
p546
I01
sVlast_edit_date
p547
I1470439414
sVanswer_id
p548
I11277439
sa(dp549
Vbody
p550
V<p>You can use <code>**kwargs</code> to let your functions take an arbitrary number of keyword arguments ("kwargs" means "keyword arguments"):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def print_keyword_args(**kwargs):\u000a...     # kwargs is a dict of the keyword args passed to the function\u000a...     for key, value in kwargs.iteritems():\u000a...         print "%s = %s" % (key, value)\u000a... \u000a&gt;&gt;&gt; print_keyword_args(first_name="John", last_name="Doe")\u000afirst_name = John\u000alast_name = Doe\u000a</code></pre>\u000a\u000a<p>You can also use the <code>**kwargs</code> syntax when calling functions by constructing a dictionary of keyword arguments and passing it to your function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; kwargs = {'first_name': 'Bobby', 'last_name': 'Smith'}\u000a&gt;&gt;&gt; print_keyword_args(**kwargs)\u000afirst_name = Bobby\u000alast_name = Smith\u000a</code></pre>\u000a\u000a<p>The <a href="http://docs.python.org/tutorial/controlflow.html#keyword-arguments" rel="noreferrer">Python Tutorial</a> contains a good explanation of how it works, along with some nice examples.</p>\u000a
p551
sVquestion_id
p552
I1769403
sVlast_activity_date
p553
I1470278279
sVcreation_date
p554
I1258711098
sVscore
p555
I532
sVowner
p556
(dp557
Vuser_id
p558
I203858
sVprofile_image
p559
Vhttps://www.gravatar.com/avatar/187569ce881cec73990857ba7db32612?s=128&d=identicon&r=PG
p560
sVuser_type
p561
Vregistered
p562
sVreputation
p563
I19100
sVlink
p564
Vhttp://stackoverflow.com/users/203858/p%c3%a4r-wieslander
p565
sVdisplay_name
p566
VP&#228;r Wieslander
p567
ssVis_accepted
p568
I01
sVlast_edit_date
p569
I1470278279
sVanswer_id
p570
I1769475
sa(dp571
Vbody
p572
V<p><code>mkdir -p</code> functionality as follows:</p>\u000a\u000a<pre><code>import errno    \u000aimport os\u000a\u000a\u000adef mkdir_p(path):\u000a    try:\u000a        os.makedirs(path)\u000a    except OSError as exc:  # Python &gt;2.5\u000a        if exc.errno == errno.EEXIST and os.path.isdir(path):\u000a            pass\u000a        else:\u000a            raise\u000a</code></pre>\u000a\u000a<h3>Update</h3>\u000a\u000a<p>For Python \u2265 3.2, <code>os.makedirs</code> has an <a href="http://docs.python.org/3/library/os.html?highlight=makedirs#os.makedirs" rel="noreferrer">optional third argument</a> <code>exist_ok</code> that, when true, enables the <code>mkdir -p</code> functionality \u2014<em>unless</em> <code>mode</code> is provided and the existing directory has different permissions than the intended ones; in that case, <code>OSError</code> is raised as previously.</p>\u000a
p573
sVquestion_id
p574
I600268
sVlast_activity_date
p575
I1469196841
sVcreation_date
p576
I1235944306
sVscore
p577
I718
sVowner
p578
(dp579
Vuser_id
p580
I6899
sVprofile_image
p581
Vhttps://www.gravatar.com/avatar/132aeb33251a1eddee3efc87633c0af1?s=128&d=identicon&r=PG
p582
sVuser_type
p583
Vregistered
p584
sVreputation
p585
I51023
sVlink
p586
Vhttp://stackoverflow.com/users/6899/tzot
p587
sVaccept_rate
p588
I83
sVdisplay_name
p589
Vtzot
p590
ssVis_accepted
p591
I01
sVlast_edit_date
p592
I1469196841
sVanswer_id
p593
I600612
sa(dp594
Vbody
p595
V<pre><code>my_list = [1,2,3,4,5]\u000alen(my_list)\u000a</code></pre>\u000a\u000a<p>The same works for tuples:</p>\u000a\u000a<pre><code>my_tuple = (1,2,3,4,5)\u000alen(my_tuple)\u000a</code></pre>\u000a\u000a<p>And strings, which are really just arrays of characters:</p>\u000a\u000a<pre><code>my_string = 'hello world'\u000alen(my_string)\u000a</code></pre>\u000a\u000a<p>It was <a href="http://effbot.org/pyfaq/why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list.htm" rel="noreferrer">intentionally done this way</a> so that lists, tuples and other container types didn't all need to explicitly implement a public <code>.length()</code> method, instead you can just check the <code>len()</code> of anything that implements the 'magic' <code>__len__()</code> method.</p>\u000a\u000a<p>Sure, this may seem redundant, but length checking implementations can vary considerably, even within the same language. It's not uncommon to see one collection type use a <code>.length()</code> method while another type uses a <code>.length</code> property, while yet another uses <code>.count()</code>. Having a language-level keyword unifies the entry point for all these types. So even objects you may not consider to be lists of elements could still be length-checked.  This includes strings, queues, trees, etc.</p>\u000a
p596
sVquestion_id
p597
I518021
sVlast_activity_date
p598
I1468785911
sVcreation_date
p599
I1233869388
sVscore
p600
I827
sVowner
p601
(dp602
Vuser_id
p603
I46914
sVprofile_image
p604
Vhttps://www.gravatar.com/avatar/d47d0397605e4b9cab9fd8fce027e3b5?s=128&d=identicon&r=PG
p605
sVuser_type
p606
Vregistered
p607
sVreputation
p608
I44104
sVlink
p609
Vhttp://stackoverflow.com/users/46914/soviut
p610
sVaccept_rate
p611
I89
sVdisplay_name
p612
VSoviut
p613
ssVis_accepted
p614
I01
sVlast_edit_date
p615
I1468785911
sVanswer_id
p616
I518038
sa(dp617
Vbody
p618
V<p>I know its been said already, but I'd highly recommend the Requests python package:\u000a<a href="http://docs.python-requests.org/en/latest/index.html" rel="noreferrer">http://docs.python-requests.org/en/latest/index.html</a></p>\u000a\u000a<p>If you've used languages other than python, you're probably thinking urllib and urllib2 are easy to use, not much code, and highly capable, that's how I used to think.  But the Requests package is so unbelievably useful and short that everyone should be using it.</p>\u000a\u000a<p>First, it supports a fully restful API, and is as easy as:</p>\u000a\u000a<pre><code>import requests\u000a...\u000a\u000aresp = requests.get('http://www.mywebsite.com/user')\u000aresp = requests.post('http://www.mywebsite.com/user')\u000aresp = requests.put('http://www.mywebsite.com/user/put')\u000aresp = requests.delete('http://www.mywebsite.com/user/delete')\u000a</code></pre>\u000a\u000a<p>Regardless of whether GET/POST you never have to encode parameters again, it simply takes a dictionary as an argument and is good to go.</p>\u000a\u000a<pre><code>userdata = {"firstname": "John", "lastname": "Doe", "password": "jdoe123"}\u000aresp = requests.post('http://www.mywebsite.com/user', data=userdata)\u000a</code></pre>\u000a\u000a<p>Plus it even has a built in json decoder (again, i know json.loads() isn't a lot more to write, but this sure is convenient):</p>\u000a\u000a<pre><code>resp.json()\u000a</code></pre>\u000a\u000a<p>Or if your response data is just text, use:</p>\u000a\u000a<pre><code>resp.text\u000a</code></pre>\u000a\u000a<p>This is just the tip of the iceberg. This is the list of features from the requests site:</p>\u000a\u000a<ul>\u000a<li>International Domains and URLs</li>\u000a<li>Keep-Alive &amp; Connection Pooling</li>\u000a<li>Sessions with Cookie Persistence</li>\u000a<li>Browser-style SSL Verification</li>\u000a<li>Basic/Digest Authentication</li>\u000a<li>Elegant Key/Value Cookies</li>\u000a<li>Automatic Decompression</li>\u000a<li>Unicode Response Bodies</li>\u000a<li>Multipart File Uploads</li>\u000a<li>Connection Timeouts</li>\u000a<li>.netrc support</li>\u000a<li>List item</li>\u000a<li>Python 2.6\u20143.4</li>\u000a<li>Thread-safe.</li>\u000a</ul>\u000a
p619
sVquestion_id
p620
I2018026
sVlast_activity_date
p621
I1468611925
sVcreation_date
p622
I1360542729
sVscore
p623
I424
sVowner
p624
(dp625
Vuser_id
p626
I1933117
sVprofile_image
p627
Vhttps://i.stack.imgur.com/iVMZO.png?s=128&g=1
p628
sVuser_type
p629
Vregistered
p630
sVreputation
p631
I5251
sVlink
p632
Vhttp://stackoverflow.com/users/1933117/hutch
p633
sVaccept_rate
p634
I25
sVdisplay_name
p635
VHutch
p636
ssVis_accepted
p637
I01
sVlast_edit_date
p638
I1468611925
sVanswer_id
p639
I14804320
sa(dp640
Vbody
p641
V<p>The <code>property()</code> function returns a special <a href="http://docs.python.org/2/howto/descriptor.html" rel="noreferrer">descriptor object</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; property()\u000a&lt;property object at 0x10ff07940&gt;\u000a</code></pre>\u000a\u000a<p>It is this object that has <em>extra</em> methods:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; property().getter\u000a&lt;built-in method getter of property object at 0x10ff07998&gt;\u000a&gt;&gt;&gt; property().setter\u000a&lt;built-in method setter of property object at 0x10ff07940&gt;\u000a&gt;&gt;&gt; property().deleter\u000a&lt;built-in method deleter of property object at 0x10ff07998&gt;\u000a</code></pre>\u000a\u000a<p>These act as decorators <em>too</em>. They return a new property object:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; property().getter(None)\u000a&lt;property object at 0x10ff079f0&gt;\u000a</code></pre>\u000a\u000a<p>that is a copy of the old object, but with one of the functions replaced.</p>\u000a\u000a<p>Remember, that the <code>@decorator</code> syntax is just syntactic sugar; the syntax:</p>\u000a\u000a<pre><code>@property\u000adef foo(self): return self._foo\u000a</code></pre>\u000a\u000a<p>really means the same thing as</p>\u000a\u000a<pre><code>def foo(self): return self._foo\u000afoo = property(foo)\u000a</code></pre>\u000a\u000a<p>so <code>foo</code> the function is replaced by <code>property(foo)</code>, which we saw above is a special object. Then when you use <code>@foo.setter()</code>, what you are doing is call that <code>property().setter</code> method I showed you above, which returns a new copy of the property, but this time with the setter function replaced with the decorated method.</p>\u000a\u000a<p>The following sequence also creates a full-on property, by using those decorator methods.</p>\u000a\u000a<p>First we create some functions and a <code>property</code> object with just a getter:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def getter(self): print 'Get!'\u000a... \u000a&gt;&gt;&gt; def setter(self, value): print 'Set to {!r}!'.format(value)\u000a... \u000a&gt;&gt;&gt; def deleter(self): print 'Delete!'\u000a... \u000a&gt;&gt;&gt; prop = property(getter)\u000a&gt;&gt;&gt; prop.fget is getter\u000aTrue\u000a&gt;&gt;&gt; prop.fset is None\u000aTrue\u000a&gt;&gt;&gt; prop.fdel is None\u000aTrue\u000a</code></pre>\u000a\u000a<p>Next we use the <code>.setter()</code> method to add a setter:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; prop = prop.setter(setter)\u000a&gt;&gt;&gt; prop.fget is getter\u000aTrue\u000a&gt;&gt;&gt; prop.fset is setter\u000aTrue\u000a&gt;&gt;&gt; prop.fdel is None\u000aTrue\u000a</code></pre>\u000a\u000a<p>Last we add a deleter with the <code>.deleter()</code> method:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; prop = prop.deleter(deleter)\u000a&gt;&gt;&gt; prop.fget is getter\u000aTrue\u000a&gt;&gt;&gt; prop.fset is setter\u000aTrue\u000a&gt;&gt;&gt; prop.fdel is deleter\u000aTrue\u000a</code></pre>\u000a\u000a<p>Last but not least, the <code>property</code> object acts as a <a href="http://docs.python.org/2/reference/datamodel.html#implementing-descriptors" rel="noreferrer">descriptor object</a>, so it has <a href="http://docs.python.org/2/reference/datamodel.html#object.__get__" rel="noreferrer"><code>.__get__()</code></a>, <a href="http://docs.python.org/2/reference/datamodel.html#object.__set__" rel="noreferrer"><code>.__set__()</code></a> and <a href="http://docs.python.org/2/reference/datamodel.html#object.__delete__" rel="noreferrer"><code>.__delete__()</code></a> methods to hook into instance attribute getting, setting and deleting:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Foo(object): pass\u000a... \u000a&gt;&gt;&gt; prop.__get__(Foo(), Foo)\u000aGet!\u000a&gt;&gt;&gt; prop.__set__(Foo(), 'bar')\u000aSet to 'bar'!\u000a&gt;&gt;&gt; prop.__delete__(Foo())\u000aDelete!\u000a</code></pre>\u000a\u000a<p>The Descriptor Howto includes a <a href="http://docs.python.org/2/howto/descriptor.html#properties" rel="noreferrer">pure python sample implementation</a> of the <code>property()</code> type:</p>\u000a\u000a<blockquote>\u000a<pre><code>class Property(object):\u000a    "Emulate PyProperty_Type() in Objects/descrobject.c"\u000a\u000a    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\u000a        self.fget = fget\u000a        self.fset = fset\u000a        self.fdel = fdel\u000a        if doc is None and fget is not None:\u000a            doc = fget.__doc__\u000a        self.__doc__ = doc\u000a\u000a    def __get__(self, obj, objtype=None):\u000a        if obj is None:\u000a            return self\u000a        if self.fget is None:\u000a            raise AttributeError("unreadable attribute")\u000a        return self.fget(obj)\u000a\u000a    def __set__(self, obj, value):\u000a        if self.fset is None:\u000a            raise AttributeError("can't set attribute")\u000a        self.fset(obj, value)\u000a\u000a    def __delete__(self, obj):\u000a        if self.fdel is None:\u000a            raise AttributeError("can't delete attribute")\u000a        self.fdel(obj)\u000a\u000a    def getter(self, fget):\u000a        return type(self)(fget, self.fset, self.fdel, self.__doc__)\u000a\u000a    def setter(self, fset):\u000a        return type(self)(self.fget, fset, self.fdel, self.__doc__)\u000a\u000a    def deleter(self, fdel):\u000a        return type(self)(self.fget, self.fset, fdel, self.__doc__)\u000a</code></pre>\u000a</blockquote>\u000a
p642
sVquestion_id
p643
I17330160
sVlast_activity_date
p644
I1468609508
sVcreation_date
p645
I1372280067
sVscore
p646
I547
sVowner
p647
(dp648
Vuser_id
p649
I100297
sVprofile_image
p650
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p651
sVuser_type
p652
Vmoderator
p653
sVreputation
p654
I554877
sVlink
p655
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p656
sVdisplay_name
p657
VMartijn Pieters
p658
ssVis_accepted
p659
I01
sVlast_edit_date
p660
I1468609508
sVanswer_id
p661
I17330273
sa(dp662
Vbody
p663
V<p>You can use triple-quoted strings. When they're not a docstring (first thing in a class/function/module), they are ignored.</p>\u000a\u000a<pre><code>'''\u000aThis is a multiline\u000acomment.\u000a'''\u000a</code></pre>\u000a\u000a<p>Guido van Rossum (creator of Python) <a href="https://twitter.com/gvanrossum/status/112670605505077248" rel="noreferrer">tweeted this</a> as a "pro tip".</p>\u000a\u000a<p>However, Python's style guide, PEP8, <a href="http://www.python.org/dev/peps/pep-0008/#block-comments" rel="noreferrer">favors using consecutive single-line comments</a>, and this is also what you'll find in many projects. Editors usually have a shortcut to do this easily.</p>\u000a
p664
sVquestion_id
p665
I7696924
sVlast_activity_date
p666
I1467296833
sVcreation_date
p667
I1318078727
sVscore
p668
I970
sVowner
p669
(dp670
Vuser_id
p671
I99057
sVprofile_image
p672
Vhttps://www.gravatar.com/avatar/c50e5892d79fb240b2c870d458505eea?s=128&d=identicon&r=PG
p673
sVuser_type
p674
Vregistered
p675
sVreputation
p676
I29855
sVlink
p677
Vhttp://stackoverflow.com/users/99057/petr-viktorin
p678
sVdisplay_name
p679
VPetr Viktorin
p680
ssVis_accepted
p681
I01
sVlast_edit_date
p682
I1467296833
sVanswer_id
p683
I7696966
sa(dp684
Vbody
p685
V<p>Here you are:</p>\u000a\u000a<pre><code>print "%02d" % (1,)\u000a</code></pre>\u000a\u000a<p>Basically <strong>%</strong> is like <code>printf</code> or <code>sprint</code>.</p>\u000a
p686
sVquestion_id
p687
I134934
sVlast_activity_date
p688
I1466605419
sVcreation_date
p689
I1222366101
sVscore
p690
I482
sVowner
p691
(dp692
Vuser_id
p693
I3421
sVprofile_image
p694
Vhttps://www.gravatar.com/avatar/9ecd2f59de5e03ba481723637fc74fad?s=128&d=identicon&r=PG
p695
sVuser_type
p696
Vregistered
p697
sVreputation
p698
I13256
sVlink
p699
Vhttp://stackoverflow.com/users/3421/jack-m
p700
sVaccept_rate
p701
I89
sVdisplay_name
p702
VJack M.
p703
ssVis_accepted
p704
I01
sVlast_edit_date
p705
I1466605419
sVanswer_id
p706
I134951
sa(dp707
Vbody
p708
V<p>You can use a list comprehension to create a new list containing only the elements you don't want to remove:</p>\u000a\u000a<pre><code>somelist = [x for x in somelist if not determine(x)]\u000a</code></pre>\u000a\u000a<p>Or, by assigning to the slice <code>somelist[:]</code>, you can mutate the existing list to contain only the items you want:</p>\u000a\u000a<pre><code>somelist[:] = [x for x in somelist if not determine(x)]\u000a</code></pre>\u000a\u000a<p>This approach could be useful if there are other references to <code>somelist</code> that need to reflect the changes.</p>\u000a\u000a<p>Instead of a comprehension, you could also use <code>itertools</code>. In Python 2:</p>\u000a\u000a<pre><code>from itertools import ifilterfalse\u000asomelist[:] = ifilterfalse(determine, somelist)\u000a</code></pre>\u000a\u000a<p>Or in Python 3:</p>\u000a\u000a<pre><code>from itertools import filterfalse\u000asomelist[:] = filterfalse(determine, somelist)\u000a</code></pre>\u000a
p709
sVquestion_id
p710
I1207406
sVlast_activity_date
p711
I1466547448
sVcreation_date
p712
I1248968493
sVscore
p713
I422
sVowner
p714
(dp715
Vuser_id
p716
I20842
sVprofile_image
p717
Vhttps://www.gravatar.com/avatar/864a8a9f22aacdae61e6995460103752?s=128&d=identicon&r=PG
p718
sVuser_type
p719
Vregistered
p720
sVreputation
p721
I9011
sVlink
p722
Vhttp://stackoverflow.com/users/20842/david-raznick
p723
sVdisplay_name
p724
VDavid Raznick
p725
ssVis_accepted
p726
I01
sVlast_edit_date
p727
I1466547448
sVanswer_id
p728
I1207461
sa(dp729
Vbody
p730
V<p>Standard Python dictionaries are unordered. Even if you sorted the (key,value) pairs, you wouldn't be able to store them in a <code>dict</code> in a way that would preserve the ordering.</p>\u000a\u000a<p>The easiest way is to use <a href="http://docs.python.org/library/collections.html#collections.OrderedDict"><code>OrderedDict</code></a>, which remembers the order in which the elements have been inserted:</p>\u000a\u000a<pre><code>In [1]: import collections\u000a\u000aIn [2]: d = {2:3, 1:89, 4:5, 3:0}\u000a\u000aIn [3]: od = collections.OrderedDict(sorted(d.items()))\u000a\u000aIn [4]: od\u000aOut[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])\u000a</code></pre>\u000a\u000a<p>Never mind the way <code>od</code> is printed out; it'll work as expected:</p>\u000a\u000a<pre><code>In [11]: od[1]\u000aOut[11]: 89\u000a\u000aIn [12]: od[3]\u000aOut[12]: 0\u000a\u000aIn [13]: for k, v in od.iteritems(): print k, v\u000a   ....: \u000a1 89\u000a2 3\u000a3 0\u000a4 5\u000a</code></pre>\u000a\u000a<h2>Python 3</h2>\u000a\u000a<p>For Python 3 users, one needs to use the <code>.items()</code> instead of <code>.iteritems()</code>:</p>\u000a\u000a<pre><code>In [13]: for k, v in od.items(): print(k, v)\u000a   ....: \u000a1 89\u000a2 3\u000a3 0\u000a4 5\u000a</code></pre>\u000a
p731
sVquestion_id
p732
I9001509
sVlast_activity_date
p733
I1457782718
sVcreation_date
p734
I1327488990
sVscore
p735
I523
sVowner
p736
(dp737
Vuser_id
p738
I367273
sVprofile_image
p739
Vhttps://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=128&d=identicon&r=PG
p740
sVuser_type
p741
Vregistered
p742
sVreputation
p743
I279603
sVlink
p744
Vhttp://stackoverflow.com/users/367273/npe
p745
sVaccept_rate
p746
I96
sVdisplay_name
p747
VNPE
p748
ssVis_accepted
p749
I01
sVlast_edit_date
p750
I1457782718
sVanswer_id
p751
I9001529
sa(dp752
Vbody
p753
V<p>Actually <code>None</code> is much better for "magic" values:</p>\u000a\u000a<pre><code>class Cheese():\u000a    def __init__(self, num_holes = None):\u000a        if num_holes is None:\u000a            ...\u000a</code></pre>\u000a\u000a<p>Now if you want complete freedom of adding more parameters:</p>\u000a\u000a<pre><code>class Cheese():\u000a    def __init__(self, *args, **kwargs):\u000a        #args -- tuple of anonymous arguments\u000a        #kwargs -- dictionary of named arguments\u000a        self.num_holes = kwargs.get('num_holes',random_holes())\u000a</code></pre>\u000a\u000a<p>To better explain the concept of <code>*args</code> and <code>**kwargs</code> (you can actually change these names):</p>\u000a\u000a<pre><code>def f(*args, **kwargs):\u000a   print 'args: ', args, ' kwargs: ', kwargs\u000a\u000a&gt;&gt;&gt; f('a')\u000aargs:  ('a',)  kwargs:  {}\u000a&gt;&gt;&gt; f(ar='a')\u000aargs:  ()  kwargs:  {'ar': 'a'}\u000a&gt;&gt;&gt; f(1,2,param=3)\u000aargs:  (1, 2)  kwargs:  {'param': 3}\u000a</code></pre>\u000a\u000a<p><a href="http://docs.python.org/reference/expressions.html#calls" rel="noreferrer">http://docs.python.org/reference/expressions.html#calls</a></p>\u000a
p754
sVquestion_id
p755
I682504
sVlast_activity_date
p756
I1457311318
sVcreation_date
p757
I1238000618
sVscore
p758
I573
sVowner
p759
(dp760
Vuser_id
p761
I60711
sVprofile_image
p762
Vhttps://www.gravatar.com/avatar/0b4fa970be41e2286c39f5b0167e6d9d?s=128&d=identicon&r=PG
p763
sVuser_type
p764
Vregistered
p765
sVreputation
p766
I80752
sVlink
p767
Vhttp://stackoverflow.com/users/60711/vartec
p768
sVaccept_rate
p769
I82
sVdisplay_name
p770
Vvartec
p771
ssVis_accepted
p772
I01
sVlast_edit_date
p773
I1457311318
sVanswer_id
p774
I682513
sa(dp775
Vbody
p776
V<p>Apart from tuples being immutable there is also a semantic distinction that should guide their usage. Tuples are heterogeneous data structures (i.e., their entries have different meanings), while lists are homogeneous sequences. <strong>Tuples have structure, lists have order.</strong> </p>\u000a\u000a<p>Using this distinction makes code more explicit and understandable.</p>\u000a\u000a<p>One example would be pairs of page and line number to reference locations in a book, e.g.:</p>\u000a\u000a<pre><code>my_location = (42, 11)  # page number, line number\u000a</code></pre>\u000a\u000a<p>You can then use this as a key in a dictionary to store notes on locations. A list on the other hand could be used to store multiple locations. Naturally one might want to add or remove locations from the list, so it makes sense that lists are mutable. On the other hand it doesn't make sense to add or remove items from an existing location - hence tuples are immutable.</p>\u000a\u000a<p>There might be situations where you want to change items within an existing location tuple, for example when iterating through the lines of a page. But tuple immutability forces you to create a new location tuple for each new value. This seems inconvenient on the face of it, but using immutable data like this is a cornerstone of value types and functional programming techniques, which can have substantial advantages.</p>\u000a\u000a<p>There are some interesting articles on this issue, e.g. <a href="http://jtauber.com/blog/2006/04/15/python_tuples_are_not_just_constant_lists/" rel="noreferrer">"Python Tuples are Not Just Constant Lists"</a> or <a href="http://news.e-scribe.com/397" rel="noreferrer">"Understanding tuples vs. lists in Python"</a>. The official Python documentation <a href="http://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences" rel="noreferrer">also mentions this</a> (<em>"Tuples are immutable, and usually contain an heterogeneous sequence ..."</em>).</p>\u000a\u000a<p>In a statically typed language like <em>Haskell</em> the values in a tuple generally have different types and the length of the tuple must be fixed. In a list the values all have the same type and the length is not fixed. So the difference is very obvious.</p>\u000a\u000a<p>Finally there is the <a href="http://docs.python.org/dev/library/collections.html#collections.namedtuple" rel="noreferrer">namedtuple</a> in Python, which makes sense because a tuple is already supposed to have structure. This underlines the idea that tuples are a light-weight alternative to classes and instances.</p>\u000a
p777
sVquestion_id
p778
I626759
sVlast_activity_date
p779
I1455296752
sVcreation_date
p780
I1236614571
sVscore
p781
I725
sVowner
p782
(dp783
Vuser_id
p784
I11992
sVprofile_image
p785
Vhttps://www.gravatar.com/avatar/09b743ba088c0bf7e07ee429a32acedc?s=128&d=identicon&r=PG
p786
sVuser_type
p787
Vregistered
p788
sVreputation
p789
I14044
sVlink
p790
Vhttp://stackoverflow.com/users/11992/nikow
p791
sVaccept_rate
p792
I91
sVdisplay_name
p793
Vnikow
p794
ssVis_accepted
p795
I01
sVlast_edit_date
p796
I1455296752
sVanswer_id
p797
I626871
sa(dp798
Vbody
p799
V<p>To remove an element's first occurrence in a list, simply use <code>list.remove</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']\u000a&gt;&gt;&gt; a.remove('b')\u000a&gt;&gt;&gt; print a\u000a['a', 'c', 'd']\u000a</code></pre>\u000a\u000a<p>Mind that it does not remove all occurrences of your element. Use a list comprehension for that.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4, 2, 3, 4, 2, 7, 2]\u000a&gt;&gt;&gt; a = [x for x in a if x != 2]\u000a&gt;&gt;&gt; print a\u000a[1, 3, 4, 3, 4, 7]\u000a</code></pre>\u000a
p800
sVquestion_id
p801
I2793324
sVlast_activity_date
p802
I1454928103
sVcreation_date
p803
I1273305363
sVscore
p804
I737
sVowner
p805
(dp806
Vuser_id
p807
I178560
sVprofile_image
p808
Vhttps://www.gravatar.com/avatar/c58c99cf1679d6f0a3a26c5ab3ed4d4a?s=128&d=identicon&r=PG
p809
sVuser_type
p810
Vregistered
p811
sVreputation
p812
I14419
sVlink
p813
Vhttp://stackoverflow.com/users/178560/johannes-charra
p814
sVaccept_rate
p815
I78
sVdisplay_name
p816
VJohannes Charra
p817
ssVis_accepted
p818
I01
sVlast_edit_date
p819
I1454928103
sVanswer_id
p820
I2793341
sa(dp821
Vbody
p822
V<p><em>Prefer properties</em>. It's what they're there for.</p>\u000a\u000a<p>The reason is that all attributes are public in Python. Starting names with an underscore or two is just a warning that the given attribute is an implementation detail that may not stay the same in future versions of the code. It doesn't prevent you from actually getting or setting that attribute. Therefore, standard attribute access is the normal, Pythonic way of, well, accessing attributes.</p>\u000a\u000a<p>The advantage of properties is that they are syntactically identical to attribute access, so you can change from one to another without any changes to client code. You could even have one version of a class that uses properties (say, for code-by-contract or debugging) and one that doesn't for production, without changing the code that uses it. At the same time, you don't have to write getters and setters for everything just in case you might need to better control access later.</p>\u000a
p823
sVquestion_id
p824
I6618002
sVlast_activity_date
p825
I1454700305
sVcreation_date
p826
I1310080002
sVscore
p827
I475
sVowner
p828
(dp829
Vuser_id
p830
I416467
sVprofile_image
p831
Vhttps://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=128&d=identicon&r=PG
p832
sVuser_type
p833
Vregistered
p834
sVreputation
p835
I102771
sVlink
p836
Vhttp://stackoverflow.com/users/416467/kindall
p837
sVaccept_rate
p838
I100
sVdisplay_name
p839
Vkindall
p840
ssVis_accepted
p841
I01
sVlast_edit_date
p842
I1454700305
sVanswer_id
p843
I6618176
sa(dp844
Vbody
p845
V<p>I managed to solve this issue and generate the .so file in one command </p>\u000a\u000a<pre><code>gcc -shared -o UtilcS.so\u000a-fPIC -I/usr/include/python2.7 -lpython2.7  utilsmodule.c\u000a</code></pre>\u000a
p846
sVquestion_id
p847
I21530577
sVlast_activity_date
p848
I1454031828
sVcreation_date
p849
I1391506322
sVscore
p850
I6
sVowner
p851
(dp852
Vuser_id
p853
I3266302
sVprofile_image
p854
Vhttps://i.stack.imgur.com/aT0iF.jpg?s=128&g=1
p855
sVuser_type
p856
Vregistered
p857
sVreputation
p858
I2270
sVlink
p859
Vhttp://stackoverflow.com/users/3266302/mohanad-y
p860
sVdisplay_name
p861
VMohanad Y.
p862
ssVis_accepted
p863
I01
sVlast_edit_date
p864
I1454031828
sVanswer_id
p865
I21548557
sa(dp866
Vbody
p867
V<p>This information is available in the <a href="http://docs.python.org/2/library/sys.html#sys.version" rel="noreferrer">sys.version</a> string in the <a href="http://docs.python.org/2/library/sys.html" rel="noreferrer">sys</a> module:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import sys\u000a</code></pre>\u000a\u000a<p>Human readable:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print (sys.version) #parentheses necessary in python 3.       \u000a2.5.2 (r252:60911, Jul 31 2008, 17:28:52) \u000a[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]\u000a</code></pre>\u000a\u000a<p>For further processing:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sys.version_info\u000a(2, 5, 2, 'final', 0)\u000a# or\u000a&gt;&gt;&gt; sys.hexversion\u000a34014192\u000a</code></pre>\u000a\u000a<p>To ensure a script runs with a minimal version requirement of the Python interpreter add this to your code:</p>\u000a\u000a<pre><code>assert sys.version_info &gt;= (2,5)\u000a</code></pre>\u000a\u000a<p>This compares major and minor version information. Add micro (=<code>0</code>, <code>1</code>, etc) and even releaselevel (=<code>'alpha'</code>,<code>'final'</code>, etc) to the tuple as you like. Note however, that it is almost always better to "duck" check if a certain feature is there, and if not, workaround (or bail out). Sometimes features go away in newer releases, being replaced by others.</p>\u000a
p868
sVquestion_id
p869
I1093322
sVlast_activity_date
p870
I1451898555
sVcreation_date
p871
I1246983612
sVscore
p872
I746
sVowner
p873
(dp874
Vuser_id
p875
I130961
sVprofile_image
p876
Vhttps://www.gravatar.com/avatar/afc87524b285fb0d0b937726207d7b7f?s=128&d=identicon&r=PG
p877
sVuser_type
p878
Vregistered
p879
sVreputation
p880
I9938
sVlink
p881
Vhttp://stackoverflow.com/users/130961/krawyoti
p882
sVdisplay_name
p883
Vkrawyoti
p884
ssVis_accepted
p885
I01
sVlast_edit_date
p886
I1451898555
sVanswer_id
p887
I1093331
sa(dp888
Vbody
p889
V<p>You could use:</p>\u000a\u000a<pre><code>with open('data.txt', 'r') as myfile:\u000a    data=myfile.read().replace('\u005cn', '')\u000a</code></pre>\u000a
p890
sVquestion_id
p891
I8369219
sVlast_activity_date
p892
I1449872487
sVcreation_date
p893
I1322931994
sVscore
p894
I606
sVowner
p895
(dp896
Vuser_id
p897
I616486
sVprofile_image
p898
Vhttps://www.gravatar.com/avatar/746431d17e14465659b2e9c74c444e9f?s=128&d=identicon&r=PG&f=1
p899
sVuser_type
p900
Vregistered
p901
sVreputation
p902
I8190
sVlink
p903
Vhttp://stackoverflow.com/users/616486/sleeplessnerd
p904
sVdisplay_name
p905
Vsleeplessnerd
p906
ssVis_accepted
p907
I01
sVlast_edit_date
p908
I1449872487
sVanswer_id
p909
I8369345
sa(dp910
Vbody
p911
V<p>For Python 3.5+ use:</p>\u000a\u000a<pre><code>import importlib.util\u000aspec = importlib.util.spec_from_file_location("module.name", "/path/to/file.py")\u000afoo = importlib.util.module_from_spec(spec)\u000aspec.loader.exec_module(foo)\u000afoo.MyClass()\u000a</code></pre>\u000a\u000a<p>For Python 3.3 and 3.4 use:</p>\u000a\u000a<pre><code>from importlib.machinery import SourceFileLoader\u000a\u000afoo = SourceFileLoader("module.name", "/path/to/file.py").load_module()\u000afoo.MyClass()\u000a</code></pre>\u000a\u000a<p>(Although this has been deprecated in Python 3.4.)</p>\u000a\u000a<p>Python 2 use:</p>\u000a\u000a<pre><code>import imp\u000a\u000afoo = imp.load_source('module.name', '/path/to/file.py')\u000afoo.MyClass()\u000a</code></pre>\u000a\u000a<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>\u000a\u000a<p>See also. <a href="http://bugs.python.org/issue21436" rel="noreferrer">http://bugs.python.org/issue21436</a>.</p>\u000a
p912
sVquestion_id
p913
I67631
sVlast_activity_date
p914
I1449498683
sVcreation_date
p915
I1221518476
sVscore
p916
I668
sVowner
p917
(dp918
Vuser_id
p919
I7779
sVprofile_image
p920
Vhttps://www.gravatar.com/avatar/c0d4fbf20d366735a1e6e4dd6d619b44?s=128&d=identicon&r=PG
p921
sVuser_type
p922
Vregistered
p923
sVreputation
p924
I8540
sVlink
p925
Vhttp://stackoverflow.com/users/7779/sebastian-rittau
p926
sVdisplay_name
p927
VSebastian Rittau
p928
ssVis_accepted
p929
I01
sVlast_edit_date
p930
I1449498683
sVanswer_id
p931
I67692
sa(dp932
Vbody
p933
V<p>Here you have some alternatives: <a href="http://www.peterbe.com/plog/uniqifiers-benchmark" rel="noreferrer">http://www.peterbe.com/plog/uniqifiers-benchmark</a></p>\u000a\u000a<p>Fastest one:</p>\u000a\u000a<pre><code>def f7(seq):\u000a    seen = set()\u000a    seen_add = seen.add\u000a    return [x for x in seq if not (x in seen or seen_add(x))]\u000a</code></pre>\u000a\u000a<p>Why assign <code>seen.add</code> to <code>seen_add</code> instead of just calling <code>seen.add</code>? Python is a dynamic language, and resolving <code>seen.add</code> each iteration is more costly than resolving a local variable. <code>seen.add</code> could have changed between iterations, and the runtime isn't smart enough to rule that out. To play it safe, it has to check the object each time.</p>\u000a\u000a<p>If you plan on using this function a lot on the same dataset, perhaps you would be better off with an ordered set: <a href="http://code.activestate.com/recipes/528878/" rel="noreferrer">http://code.activestate.com/recipes/528878/</a></p>\u000a\u000a<p><em>O</em>(1) insertion, deletion and member-check per operation.</p>\u000a
p934
sVquestion_id
p935
I480214
sVlast_activity_date
p936
I1447662059
sVcreation_date
p937
I1232984821
sVscore
p938
I522
sVowner
p939
(dp940
Vuser_id
p941
I22364
sVprofile_image
p942
Vhttps://www.gravatar.com/avatar/e4b5d57c78e74d4f5ee9773e2926c01d?s=128&d=identicon&r=PG
p943
sVuser_type
p944
Vregistered
p945
sVreputation
p946
I55004
sVlink
p947
Vhttp://stackoverflow.com/users/22364/markus-jarderot
p948
sVaccept_rate
p949
I100
sVdisplay_name
p950
VMarkus Jarderot
p951
ssVis_accepted
p952
I01
sVlast_edit_date
p953
I1447662059
sVanswer_id
p954
I480227
sa(dp955
Vbody
p956
V<p>To summarize the contents of other (already good!) answers, <code>isinstance</code> caters for inheritance (an instance of a derived class <em>is an</em> instance of a base class, too), while checking for equality of <code>type</code> does not (it demands identity of types and rejects instances of subtypes, AKA subclasses).</p>\u000a\u000a<p>Normally, in Python, you want your code to support inheritance, of course (since inheritance is so handy, it would be bad to stop code using yours from using it!), so <code>isinstance</code> is less bad than checking identity of <code>type</code>s because it seamlessly supports inheritance.</p>\u000a\u000a<p>It's not that <code>isinstance</code> is <em>good</em>, mind you\u2014it's just <em>less bad</em> than checking equality of types.  The normal, Pythonic, preferred solution is almost invariably "duck typing": try using the argument <em>as if</em> it was of a certain desired type, do it in a <code>try</code>/<code>except</code> statement catching all exceptions that could arise if the argument was not in fact of that type (or any other type nicely duck-mimicking it;-), and in the <code>except</code> clause, try something else (using the argument "as if" it was of some other type).</p>\u000a\u000a<p><code>basestring</code> <strong>is</strong>, however, quite a special case\u2014a builtin type that exists <strong>only</strong> to let you use <code>isinstance</code> (both <code>str</code> and <code>Unicode</code> subclass <code>basestring</code>). Strings are sequences (you could loop over them, index them, slice them, ...), but you generally want to treat them as "scalar" types\u2014it's somewhat incovenient (but a reasonably frequent use case) to treat all kinds of strings (and maybe other scalar types, i.e., ones you can't loop on) one way, all containers (lists, sets, dicts, ...) in another way, and <code>basestring</code> plus <code>isinstance</code> helps you do that\u2014the overall structure of this idiom is something like:</p>\u000a\u000a<pre><code>if isinstance(x, basestring)\u000a  return treatasscalar(x)\u000atry:\u000a  return treatasiter(iter(x))\u000aexcept TypeError:\u000a  return treatasscalar(x)\u000a</code></pre>\u000a\u000a<p>You could say that <code>basestring</code> is an <em>Abstract Base Class</em> ("ABC")\u2014it offers no concrete functionality to subclasses, but rather exists as a "marker", mainly for use with <code>isinstance</code>. The concept is obviously a growing one in Python, since <a href="http://www.python.org/dev/peps/pep-3119/" rel="noreferrer">PEP 3119</a>, which introduces a generalization of it, was accepted and has been implemented starting with Python 2.6 and 3.0.</p>\u000a\u000a<p>The PEP makes it clear that, while ABCs can often substitute for duck typing, there is generally no big pressure to do that (see <a href="http://www.python.org/dev/peps/pep-3119/#abcs-vs-duck-typing" rel="noreferrer">here</a>). ABCs as implemented in recent Python versions do however offer extra goodies: <code>isinstance</code> (and <code>issubclass</code>) can now mean more than just "[an instance of] a derived class" (in particular, any class can be "registered" with an ABC so that it will show as a subclass, and its instances as instances of the ABC); and ABCs can also offer extra convenience to actual subclasses in a very natural way via Template Method design pattern applications (see <a href="http://en.wikipedia.org/wiki/Template_method_pattern" rel="noreferrer">here</a> and <a href="http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/" rel="noreferrer">here</a> [[part II]] for more on the TM DP, in general and specifically in Python, independent of ABCs).</p>\u000a\u000a<p>For the underlying mechanics of ABC support as offered in Python 2.6, see <a href="http://docs.python.org/library/abc.html" rel="noreferrer">here</a>; for their 3.1 version, very similar, see <a href="http://docs.python.org/3.1/library/abc.html" rel="noreferrer">here</a>.  In both versions, standard library module <a href="http://docs.python.org/3.1/library/collections.html#module-collections" rel="noreferrer">collections</a> (that's the 3.1 version\u2014for the very similar 2.6 version, see <a href="http://docs.python.org/library/collections.html#module-collections" rel="noreferrer">here</a>) offers several useful ABCs.</p>\u000a\u000a<p>For the purpose of this answer, the key thing to retain about ABCs (beyond an arguably more natural placement for TM DP functionality, compared to the classic Python alternative of mixin classes such as <a href="http://docs.python.org/library/userdict.html?highlight=userdict#UserDict.DictMixin" rel="noreferrer">UserDict.DictMixin</a>) is that they make <code>isinstance</code> (and <code>issubclass</code>) much more attractive and pervasive (in Python 2.6 and going forward) than they used to be (in 2.5 and before), and therefore, by contrast, make checking type equality an even worse practice in recent Python versions than it already used to be.</p>\u000a
p957
sVquestion_id
p958
I1549801
sVlast_activity_date
p959
I1446806065
sVcreation_date
p960
I1255235517
sVscore
p961
I743
sVowner
p962
(dp963
Vuser_id
p964
I95810
sVprofile_image
p965
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p966
sVuser_type
p967
Vregistered
p968
sVreputation
p969
I516079
sVlink
p970
Vhttp://stackoverflow.com/users/95810/alex-martelli
p971
sVaccept_rate
p972
I80
sVdisplay_name
p973
VAlex Martelli
p974
ssVis_accepted
p975
I01
sVlast_edit_date
p976
I1446806065
sVanswer_id
p977
I1549854
sa(dp978
Vbody
p979
V<p><a href="http://pypi.python.org/pypi/pip/" rel="noreferrer">pip</a>, an alternative to setuptools/easy_install, provides an "uninstall" command. </p>\u000a\u000a<p>Install pip according to the <a href="http://pip.readthedocs.org/en/stable/installing/" rel="noreferrer">installation instructions</a>:</p>\u000a\u000a<pre><code>$ wget https://bootstrap.pypa.io/get-pip.py\u000a$ python get-pip.py\u000a</code></pre>\u000a\u000a<p>Then you can use <code>pip uninstall</code> to remove packages installed with <code>easy_install</code></p>\u000a
p980
sVquestion_id
p981
I1231688
sVlast_activity_date
p982
I1446453465
sVcreation_date
p983
I1279702041
sVscore
p984
I554
sVowner
p985
(dp986
Vuser_id
p987
I355252
sVprofile_image
p988
Vhttps://i.stack.imgur.com/ebO5J.jpg?s=128&g=1
p989
sVuser_type
p990
Vregistered
p991
sVreputation
p992
I22739
sVlink
p993
Vhttp://stackoverflow.com/users/355252/lunaryorn
p994
sVaccept_rate
p995
I43
sVdisplay_name
p996
Vlunaryorn
p997
ssVis_accepted
p998
I01
sVlast_edit_date
p999
I1446453465
sVanswer_id
p1000
I3297564
sa(dp1001
Vbody
p1002
V<p>This is detailed with a reasonable amount of detail by Guido himself at <a href="http://python-history.blogspot.com/2010/06/method-resolution-order.html" rel="noreferrer">http://python-history.blogspot.com/2010/06/method-resolution-order.html</a> (including two earlier attempts).</p>\u000a\u000a<p>But, briefly: in your example, Third() will call <code>First.__init__</code>. For such simple situations, Python will look for the attribute (in this case, <code>__init__</code>) on the class's parents, left to right. So, if you define</p>\u000a\u000a<pre><code>class Third(First, Second):\u000a    ...\u000a</code></pre>\u000a\u000a<p>Python will look at First, and, if First doesn't have the attribute, at Second.</p>\u000a\u000a<p>This situation becomes more complex when inheritance starts crossing paths (say, if First inherited from Second, for instance). Read the link above for more details, but, in a nutshell, Python will try to maintain the order in which each class appears on the inheritance list, child classes first.</p>\u000a\u000a<p>So, for instance, if you had:</p>\u000a\u000a<pre><code>class First(object):\u000a    def __init__(self):\u000a        print "first"\u000a\u000aclass Second(First):\u000a    def __init__(self):\u000a        print "second"\u000a\u000aclass Third(First):\u000a    def __init__(self):\u000a        print "third"\u000a\u000aclass Fourth(Second, Third):\u000a    def __init__(self):\u000a        super(Fourth, self).__init__()\u000a        print "that's it"\u000a</code></pre>\u000a\u000a<p>the <code>MRO</code> would be <code>[Fourth, Second, Third, First].</code></p>\u000a\u000a<p>By the way: if Python cannot find a coherent method resolution order, it'll raise an exception, instead of falling back to a behaviour which might surprise the user.</p>\u000a\u000a<p>Edited to add example of an ambiguous MRO:</p>\u000a\u000a<pre><code>class First(object):\u000a    def __init__(self):\u000a        print "first"\u000a\u000aclass Second(First):\u000a    def __init__(self):\u000a        print "second"\u000a\u000aclass Third(First, Second):\u000a    def __init__(self):\u000a        print "third"\u000a</code></pre>\u000a\u000a<p>Should Third's <code>MRO</code> be <code>[First, Second]</code> or [<code>Second, First]</code>? There's no obvious expectation, and Python will raise an error:</p>\u000a\u000a<blockquote>\u000a  <p>TypeError: Error when calling the\u000a  metaclass bases\u000a      Cannot create a consistent method resolution order (MRO) for bases\u000a  Second, First</p>\u000a</blockquote>\u000a\u000a<p>[Edit] I see several people arguing that the examples above lack <code>super()</code> calls, so let me explain: the point of the examples is to show how the MRO is constructed. They are <strong>not</strong> intended print "first\u005cnsecond\u005cthird" or whatever. You can - and should, of course, play around with the example, add <code>super()</code> calls, see what happens, and gain a deeper understanding of Python's inheritance model. But my goal here is to keep it simple and show how the MRO is build. And it is built as I explained:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; Fourth.__mro__\u000a(&lt;class '__main__.Fourth'&gt;, &lt;class '__main__.Second'&gt;, &lt;class '__main__.Third'&gt;, &lt;class '__main__.First'&gt;, &lt;type 'object'&gt;)\u000a</code></pre>\u000a
p1003
sVquestion_id
p1004
I3277367
sVlast_activity_date
p1005
I1445078102
sVcreation_date
p1006
I1279489972
sVscore
p1007
I380
sVowner
p1008
(dp1009
Vuser_id
p1010
I158773
sVprofile_image
p1011
Vhttps://www.gravatar.com/avatar/3d8c280edaafd988742f45e81f89d24a?s=128&d=identicon&r=PG
p1012
sVuser_type
p1013
Vregistered
p1014
sVreputation
p1015
I21021
sVlink
p1016
Vhttp://stackoverflow.com/users/158773/rbp
p1017
sVdisplay_name
p1018
Vrbp
p1019
ssVis_accepted
p1020
I01
sVlast_edit_date
p1021
I1445078102
sVanswer_id
p1022
I3277407
sa(dp1023
Vbody
p1024
V<p>A mixin is a special kind of multiple inheritance.  There are two main situations where mixins are used:</p>\u000a\u000a<ol>\u000a<li>You want to provide a lot of optional features for a class.</li>\u000a<li>You want to use one particular feature in a lot of different classes.</li>\u000a</ol>\u000a\u000a<p>For an example of number one, consider <a href="http://werkzeug.pocoo.org/docs/wrappers/" rel="noreferrer">werkzeug's request and response system</a>.  I can make a plain old request object by saying:</p>\u000a\u000a<pre><code>from werkzeug import BaseRequest\u000a\u000aclass Request(BaseRequest):\u000a    pass\u000a</code></pre>\u000a\u000a<p>If I want to add accept header support, I would make that</p>\u000a\u000a<pre><code>from werkzeug import BaseRequest, AcceptMixin\u000a\u000aclass Request(BaseRequest, AcceptMixin):\u000a    pass\u000a</code></pre>\u000a\u000a<p>If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:</p>\u000a\u000a<pre><code>from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthorizationMixin\u000a\u000aclass Request(BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthorizationMixin):\u000a    pass\u000a</code></pre>\u000a\u000a<p>The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own.  In more traditional multiple inheritance, The AuthenticationMixin (for example) would probably be something more like Authenticator.  That is, the class would probably be designed to stand on its own.</p>\u000a
p1025
sVquestion_id
p1026
I533631
sVlast_activity_date
p1027
I1445028182
sVcreation_date
p1028
I1234559717
sVscore
p1029
I432
sVowner
p1030
(dp1031
Vuser_id
p1032
I2147
sVprofile_image
p1033
Vhttps://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=128&d=identicon&r=PG
p1034
sVuser_type
p1035
Vregistered
p1036
sVreputation
p1037
I86169
sVlink
p1038
Vhttp://stackoverflow.com/users/2147/jason-baker
p1039
sVaccept_rate
p1040
I85
sVdisplay_name
p1041
VJason Baker
p1042
ssVis_accepted
p1043
I01
sVlast_edit_date
p1044
I1445028182
sVanswer_id
p1045
I547714
sa(dp1046
Vbody
p1047
V<p>range creates a list, so if you do <code>range(1, 10000000)</code> it creates a list in memory with <code>9999999</code> elements.</p>\u000a\u000a<p><code>xrange</code> is a sequence object that  evaluates lazily.  </p>\u000a
p1048
sVquestion_id
p1049
I94935
sVlast_activity_date
p1050
I1445010817
sVcreation_date
p1051
I1221760513
sVscore
p1052
I552
sVowner
p1053
(dp1054
Vuser_id
p1055
I18031
sVprofile_image
p1056
Vhttps://www.gravatar.com/avatar/780bad6bb617b876e3d2baf186a36cd7?s=128&d=identicon&r=PG
p1057
sVuser_type
p1058
Vregistered
p1059
sVreputation
p1060
I5549
sVlink
p1061
Vhttp://stackoverflow.com/users/18031/charles
p1062
sVdisplay_name
p1063
VCharles
p1064
ssVis_accepted
p1065
I01
sVlast_edit_date
p1066
I1445010817
sVanswer_id
p1067
I94962
sa(dp1068
Vbody
p1069
V<pre><code>import sys\u000asys.exit()\u000a</code></pre>\u000a\u000a<p>details from the <a href="https://docs.python.org/2/library/constants.html#exit" rel="noreferrer" title="exit"><code>sys</code> module documentation</a>:</p>\u000a\u000a<blockquote>\u000a  <p><code>sys.<strong>exit</strong>([<em>arg</em>])</code></p>\u000a  \u000a  <blockquote>\u000a    <p>Exit from Python. This is implemented by raising the\u000a    <a href="https://docs.python.org/2/library/exceptions.html#SystemExit" rel="noreferrer" title="SystemExit"><code>SystemExit</code></a> exception, so cleanup actions specified by finally clauses\u000a    of <a href="https://docs.python.org/2/reference/compound_stmts.html#try" rel="noreferrer" title="try"><code>try</code></a> statements are honored, and it is possible to intercept the\u000a    exit attempt at an outer level.</p>\u000a    \u000a    <p>The optional argument <em>arg</em> can be an integer giving the exit status\u000a    (defaulting to zero), or another type of object. If it is an integer,\u000a    zero is considered \u201csuccessful termination\u201d and any nonzero value is\u000a    considered \u201cabnormal termination\u201d by shells and the like. Most systems\u000a    require it to be in the range 0-127, and produce undefined results\u000a    otherwise. Some systems have a convention for assigning specific\u000a    meanings to specific exit codes, but these are generally\u000a    underdeveloped; Unix programs generally use 2 for command line syntax\u000a    errors and 1 for all other kind of errors. If another type of object\u000a    is passed, None is equivalent to passing zero, and any other object is\u000a    printed to <a href="https://docs.python.org/2/library/sys.html#sys.stderr" rel="noreferrer" title="sys.stderr"><code>stderr</code></a> and results in an exit code of 1. In particular,\u000a    <code>sys.exit("some error message")</code> is a quick way to exit a program when\u000a    an error occurs.</p>\u000a    \u000a    <p>Since <a href="https://docs.python.org/2/library/constants.html#exit" rel="noreferrer" title="exit"><code>exit()</code></a> ultimately \u201conly\u201d raises an exception, it will only exit\u000a    the process when called from the main thread, and the exception is not\u000a    intercepted.</p>\u000a  </blockquote>\u000a</blockquote>\u000a\u000a<p>Note that this is the 'nice' way to exit.  @<a href="http://stackoverflow.com/questions/73663/terminating-a-python-script#76374">glyphtwistedmatrix</a> below points out that if you want a 'hard exit', you can use os._exit(<em>errorcode</em>), though it's likely os-specific to some extent (it might not take an errorcode under windows, for example), and it definitely is less friendly since it doesn't let the interpreter do any cleanup before the process dies.</p>\u000a
p1070
sVquestion_id
p1071
I73663
sVlast_activity_date
p1072
I1444994070
sVcreation_date
p1073
I1221579396
sVscore
p1074
I772
sVowner
p1075
(dp1076
Vuser_id
p1077
I8002
sVprofile_image
p1078
Vhttps://www.gravatar.com/avatar/e1a9bed3bf6ee54cf86f952c87059afc?s=128&d=identicon&r=PG
p1079
sVuser_type
p1080
Vregistered
p1081
sVreputation
p1082
I23220
sVlink
p1083
Vhttp://stackoverflow.com/users/8002/pjz
p1084
sVaccept_rate
p1085
I89
sVdisplay_name
p1086
Vpjz
p1087
ssVis_accepted
p1088
I01
sVlast_edit_date
p1089
I1444994070
sVanswer_id
p1090
I73673
sa(dp1091
Vbody
p1092
V<p>Yes. Use <a href="https://docs.python.org/2/library/os.path.html#os.path.splitext" rel="noreferrer" title="os.path.splitext"><code>os.path.splitext</code></a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import os\u000a&gt;&gt;&gt; filename, file_extension = os.path.splitext('/path/to/somefile.ext')\u000a&gt;&gt;&gt; filename\u000a'/path/to/somefile'\u000a&gt;&gt;&gt; file_extension\u000a'.ext'\u000a</code></pre>\u000a
p1093
sVquestion_id
p1094
I541390
sVlast_activity_date
p1095
I1444943623
sVcreation_date
p1096
I1234447966
sVscore
p1097
I1100
sVowner
p1098
(dp1099
Vuser_id
p1100
I17160
sVprofile_image
p1101
Vhttps://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=128&d=identicon&r=PG
p1102
sVuser_type
p1103
Vregistered
p1104
sVreputation
p1105
I118064
sVlink
p1106
Vhttp://stackoverflow.com/users/17160/nosklo
p1107
sVaccept_rate
p1108
I78
sVdisplay_name
p1109
Vnosklo
p1110
ssVis_accepted
p1111
I01
sVlast_edit_date
p1112
I1444943623
sVanswer_id
p1113
I541394
sa(dp1114
Vbody
p1115
V<p>I suggest <a href="http://docs.python.org/library/xml.etree.elementtree.html" rel="noreferrer"><code>ElementTree</code></a>.  There are other compatible implementations of the same API, such as <a href="http://lxml.de/" rel="noreferrer"><code>lxml</code></a>, and <code>cElementTree</code> in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which <code>ElementTree</code> defines.</p>\u000a\u000a<p>After building an Element instance <code>e</code> from the XML, e.g. with the <a href="http://docs.python.org/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML" rel="noreferrer">XML</a> function, or by parsing a file with something like</p>\u000a\u000a<pre><code>import xml.etree.ElementTree\u000ae = xml.etree.ElementTree.parse('thefile.xml').getroot()\u000a</code></pre>\u000a\u000a<p>or any of the many other ways shown at <a href="http://docs.python.org/library/xml.etree.elementtree.html" rel="noreferrer"><code>ElementTree</code></a>, you just do something like:</p>\u000a\u000a<pre><code>for atype in e.findall('type'):\u000a    print(atype.get('foobar'))\u000a</code></pre>\u000a\u000a<p>and similar, usually pretty simple, code patterns.</p>\u000a
p1116
sVquestion_id
p1117
I1912434
sVlast_activity_date
p1118
I1444437018
sVcreation_date
p1119
I1260940915
sVscore
p1120
I444
sVowner
p1121
(dp1122
Vuser_id
p1123
I95810
sVprofile_image
p1124
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1125
sVuser_type
p1126
Vregistered
p1127
sVreputation
p1128
I516079
sVlink
p1129
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1130
sVaccept_rate
p1131
I80
sVdisplay_name
p1132
VAlex Martelli
p1133
ssVis_accepted
p1134
I01
sVlast_edit_date
p1135
I1444437018
sVanswer_id
p1136
I1912483
sa(dp1137
Vbody
p1138
V<pre><code>&gt;&gt;&gt; import site; site.getsitepackages()\u000a['/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages']\u000a</code></pre>\u000a\u000a<p>(or just first item with <code>site.getsitepackages()[0]</code>)</p>\u000a
p1139
sVquestion_id
p1140
I122327
sVlast_activity_date
p1141
I1440856218
sVcreation_date
p1142
I1350548385
sVscore
p1143
I515
sVowner
p1144
(dp1145
Vuser_id
p1146
I761090
sVprofile_image
p1147
Vhttps://www.gravatar.com/avatar/f1f2a78bb5182bae8adb98e08aa214c6?s=128&d=identicon&r=PG
p1148
sVuser_type
p1149
Vregistered
p1150
sVreputation
p1151
I10754
sVlink
p1152
Vhttp://stackoverflow.com/users/761090/eudoxos
p1153
sVaccept_rate
p1154
I69
sVdisplay_name
p1155
Veudoxos
p1156
ssVis_accepted
p1157
I01
sVlast_edit_date
p1158
I1440856218
sVanswer_id
p1159
I12950101
sa(dp1160
Vbody
p1161
V<p><strong>Operator precedence</strong> <sup><a href="https://docs.python.org/2/reference/expressions.html#operator-precedence">2.x</a>, <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence">3.x</a></sup>. The precedence of <code>not</code> is lower than that of <code>in</code>. So it is equivalent to:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; not (True in [False, True])\u000aFalse\u000a</code></pre>\u000a\u000a<p>This is what you want:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; (not True) in [False, True]\u000aTrue\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>As @Ben points out: It's recommended to never write <code>not(True)</code>, prefer <code>not True</code>. The former makes it look like a function call, while <code>not</code> is an operator, not a function.</p>\u000a
p1162
sVquestion_id
p1163
I31421379
sVlast_activity_date
p1164
I1437527626
sVcreation_date
p1165
I1436933848
sVscore
p1166
I683
sVowner
p1167
(dp1168
Vuser_id
p1169
I1009479
sVprofile_image
p1170
Vhttps://i.stack.imgur.com/wlrC5.jpg?s=128&g=1
p1171
sVuser_type
p1172
Vregistered
p1173
sVreputation
p1174
I87866
sVlink
p1175
Vhttp://stackoverflow.com/users/1009479/yu-hao
p1176
sVaccept_rate
p1177
I67
sVdisplay_name
p1178
VYu Hao
p1179
ssVis_accepted
p1180
I01
sVlast_edit_date
p1181
I1437527626
sVanswer_id
p1182
I31421411
sa(dp1183
Vbody
p1184
V<p>Try:</p>\u000a\u000a<pre><code>from random import randint\u000aprint(randint(0,9))\u000a</code></pre>\u000a\u000a<p>More info: <a href="https://docs.python.org/3.1/library/random.html#random.randint" rel="noreferrer">https://docs.python.org/3.1/library/random.html#random.randint</a></p>\u000a
p1185
sVquestion_id
p1186
I3996904
sVlast_activity_date
p1187
I1435673246
sVcreation_date
p1188
I1287751891
sVscore
p1189
I926
sVowner
p1190
(dp1191
Vuser_id
p1192
I24894
sVprofile_image
p1193
Vhttps://www.gravatar.com/avatar/8585b20b69e8ff4b0ba737accfdbb31b?s=128&d=identicon&r=PG
p1194
sVuser_type
p1195
Vregistered
p1196
sVreputation
p1197
I13491
sVlink
p1198
Vhttp://stackoverflow.com/users/24894/kovshenin
p1199
sVaccept_rate
p1200
I67
sVdisplay_name
p1201
Vkovshenin
p1202
ssVis_accepted
p1203
I01
sVlast_edit_date
p1204
I1435673246
sVanswer_id
p1205
I3996930
sa(dp1206
Vbody
p1207
V<p>Because <code>[]</code> and <code>{}</code> are <em>literal syntax</em>. Python can create bytecode just to create the list or dictionary objects:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import dis\u000a&gt;&gt;&gt; dis.dis(compile('[]', '', 'eval'))\u000a  1           0 BUILD_LIST               0\u000a              3 RETURN_VALUE        \u000a&gt;&gt;&gt; dis.dis(compile('{}', '', 'eval'))\u000a  1           0 BUILD_MAP                0\u000a              3 RETURN_VALUE        \u000a</code></pre>\u000a\u000a<p><code>list()</code> and <code>dict()</code> are separate objects. Their names need to be resolved, the stack has to be involved to push the arguments, the frame has to be stored to retrieve later, and a call has to be made. That all takes more time.</p>\u000a\u000a<p>For the empty case, that means you have at the very least a <a href="https://docs.python.org/2/library/dis.html#opcode-LOAD_NAME" rel="noreferrer"><code>LOAD_NAME</code></a> (which has to search through the global namespace as well as the <a href="https://docs.python.org/2/library/__builtin__.html" rel="noreferrer"><code>__builtin__</code> module</a>) followed by a <a href="https://docs.python.org/2/library/dis.html#opcode-CALL_FUNCTION" rel="noreferrer"><code>CALL_FUNCTION</code></a>, which has to preserve the current frame:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dis.dis(compile('list()', '', 'eval'))\u000a  1           0 LOAD_NAME                0 (list)\u000a              3 CALL_FUNCTION            0\u000a              6 RETURN_VALUE        \u000a&gt;&gt;&gt; dis.dis(compile('dict()', '', 'eval'))\u000a  1           0 LOAD_NAME                0 (dict)\u000a              3 CALL_FUNCTION            0\u000a              6 RETURN_VALUE        \u000a</code></pre>\u000a\u000a<p>You can time the name lookup separately with <code>timeit</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import timeit\u000a&gt;&gt;&gt; timeit.timeit('list', number=10**7)\u000a0.30749011039733887\u000a&gt;&gt;&gt; timeit.timeit('dict', number=10**7)\u000a0.4215109348297119\u000a</code></pre>\u000a\u000a<p>The time discrepancy there is probably a dictionary hash collision. Subtract those times from the times for calling those objects, and compare the result against the times for using literals:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; timeit.timeit('[]', number=10**7)\u000a0.30478692054748535\u000a&gt;&gt;&gt; timeit.timeit('{}', number=10**7)\u000a0.31482696533203125\u000a&gt;&gt;&gt; timeit.timeit('list()', number=10**7)\u000a0.9991960525512695\u000a&gt;&gt;&gt; timeit.timeit('dict()', number=10**7)\u000a1.0200958251953125\u000a</code></pre>\u000a\u000a<p>So having to call the object takes an additional <code>1.00 - 0.31 - 0.30 == 0.39</code> seconds per 10 million calls.</p>\u000a\u000a<p>You can avoid the global lookup cost by aliasing the global names as locals (using a <code>timeit</code> setup, everything you bind to a name is a local):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; timeit.timeit('_list', '_list = list', number=10**7)\u000a0.1866450309753418\u000a&gt;&gt;&gt; timeit.timeit('_dict', '_dict = dict', number=10**7)\u000a0.19016098976135254\u000a&gt;&gt;&gt; timeit.timeit('_list()', '_list = list', number=10**7)\u000a0.841480016708374\u000a&gt;&gt;&gt; timeit.timeit('_dict()', '_dict = dict', number=10**7)\u000a0.7233691215515137\u000a</code></pre>\u000a\u000a<p>but you never can overcome that <code>CALL_FUNCTION</code> cost.</p>\u000a
p1208
sVquestion_id
p1209
I30216000
sVlast_activity_date
p1210
I1431524448
sVcreation_date
p1211
I1431523317
sVscore
p1212
I575
sVowner
p1213
(dp1214
Vuser_id
p1215
I100297
sVprofile_image
p1216
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p1217
sVuser_type
p1218
Vmoderator
p1219
sVreputation
p1220
I554877
sVlink
p1221
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p1222
sVdisplay_name
p1223
VMartijn Pieters
p1224
ssVis_accepted
p1225
I01
sVlast_edit_date
p1226
I1431524448
sVanswer_id
p1227
I30216156
sa(dp1228
Vbody
p1229
V<p>This is a way to traverse every file and directory in a directory tree:</p>\u000a\u000a<pre><code>import os\u000a\u000afor dirname, dirnames, filenames in os.walk('.'):\u000a    # print path to all subdirectories first.\u000a    for subdirname in dirnames:\u000a        print(os.path.join(dirname, subdirname))\u000a\u000a    # print path to all filenames.\u000a    for filename in filenames:\u000a        print(os.path.join(dirname, filename))\u000a\u000a    # Advanced usage:\u000a    # editing the 'dirnames' list will stop os.walk() from recursing into there.\u000a    if '.git' in dirnames:\u000a        # don't go into any .git directories.\u000a        dirnames.remove('.git')\u000a</code></pre>\u000a
p1230
sVquestion_id
p1231
I120656
sVlast_activity_date
p1232
I1429289690
sVcreation_date
p1233
I1222173346
sVscore
p1234
I528
sVowner
p1235
(dp1236
Vuser_id
p1237
I14648
sVprofile_image
p1238
Vhttps://www.gravatar.com/avatar/84965d0d894b45875d8045bc5762ba57?s=128&d=identicon&r=PG
p1239
sVuser_type
p1240
Vregistered
p1241
sVreputation
p1242
I27307
sVlink
p1243
Vhttp://stackoverflow.com/users/14648/jerub
p1244
sVaccept_rate
p1245
I91
sVdisplay_name
p1246
VJerub
p1247
ssVis_accepted
p1248
I01
sVlast_edit_date
p1249
I1429289690
sVanswer_id
p1250
I120701
sa(dp1251
Vbody
p1252
V<p>You're looking for <a href="http://docs.python.org/dev/library/os.path.html#os.path.isdir"><code>os.path.isdir</code></a>, or <a href="http://docs.python.org/dev/library/os.path.html#os.path.exists"><code>os.path.exists</code></a> if you don't care whether it's a file or a directory.</p>\u000a\u000a<p>Example:</p>\u000a\u000a<pre><code>import os\u000aprint(os.path.isdir("/home/el"))\u000aprint(os.path.exists("/home/el/myfile.txt"))\u000a</code></pre>\u000a
p1253
sVquestion_id
p1254
I8933237
sVlast_activity_date
p1255
I1424957561
sVcreation_date
p1256
I1327007245
sVscore
p1257
I830
sVowner
p1258
(dp1259
Vuser_id
p1260
I35070
sVprofile_image
p1261
Vhttps://www.gravatar.com/avatar/6f92354195e8874dbee44d5c8714d506?s=128&d=identicon&r=PG
p1262
sVuser_type
p1263
Vregistered
p1264
sVreputation
p1265
I151504
sVlink
p1266
Vhttp://stackoverflow.com/users/35070/phihag
p1267
sVaccept_rate
p1268
I77
sVdisplay_name
p1269
Vphihag
p1270
ssVis_accepted
p1271
I01
sVlast_edit_date
p1272
I1424957561
sVanswer_id
p1273
I8933290
sa(dp1274
Vbody
p1275
V<p>It seems mysql_config is missing on your system or the installer could not find it.\u000aBe sure mysql_config is really installed.</p>\u000a\u000a<p>For example on Debian/Ubuntu you must install the package:</p>\u000a\u000a<pre><code>sudo apt-get install libmysqlclient-dev\u000a</code></pre>\u000a\u000a<p>Maybe the mysql_config is not in your path, it will be the case when you compile by yourself\u000athe mysql suite.</p>\u000a
p1276
sVquestion_id
p1277
I5178292
sVlast_activity_date
p1278
I1418621042
sVcreation_date
p1279
I1299143732
sVscore
p1280
I869
sVowner
p1281
(dp1282
Vuser_id
p1283
I401528
sVprofile_image
p1284
Vhttps://www.gravatar.com/avatar/afcd27526c3956f3ffee9a94b182b30c?s=128&d=identicon&r=PG
p1285
sVuser_type
p1286
Vregistered
p1287
sVreputation
p1288
I8905
sVlink
p1289
Vhttp://stackoverflow.com/users/401528/fbo
p1290
sVdisplay_name
p1291
VFbo
p1292
ssVis_accepted
p1293
I01
sVlast_edit_date
p1294
I1418621042
sVanswer_id
p1295
I5178698
sa(dp1296
Vbody
p1297
V<p>Maybe I missed the question, but why not:</p>\u000a\u000a<pre><code>class MyException(Exception):\u000a    pass\u000a</code></pre>\u000a\u000a<p><strong>Edit:</strong> to override something (or pass extra args), do this:</p>\u000a\u000a<pre><code>class ValidationError(Exception):\u000a    def __init__(self, message, errors):\u000a\u000a        # Call the base class constructor with the parameters it needs\u000a        super(ValidationError, self).__init__(message)\u000a\u000a        # Now for your custom code...\u000a        self.errors = errors\u000a</code></pre>\u000a\u000a<p>That way you could pass dict of error messages to the second param, and get to it later with <code>e.errors</code></p>\u000a
p1298
sVquestion_id
p1299
I1319615
sVlast_activity_date
p1300
I1413016313
sVcreation_date
p1301
I1251064523
sVscore
p1302
I672
sVowner
p1303
(dp1304
Vuser_id
p1305
I64004
sVprofile_image
p1306
Vhttps://www.gravatar.com/avatar/0ea88709c4b9bda3bc66c62237e12812?s=128&d=identicon&r=PG
p1307
sVuser_type
p1308
Vregistered
p1309
sVreputation
p1310
I69085
sVlink
p1311
Vhttp://stackoverflow.com/users/64004/gahooa
p1312
sVaccept_rate
p1313
I62
sVdisplay_name
p1314
Vgahooa
p1315
ssVis_accepted
p1316
I01
sVlast_edit_date
p1317
I1413016313
sVanswer_id
p1318
I1319675
sa(dp1319
Vbody
p1320
V<p>The <a href="http://docs.python.org/reference/simple_stmts.html#grammar-token-del_stmt" rel="noreferrer"><code>del</code> statement</a> removes an element:</p>\u000a\u000a<pre><code>del d[key]\u000a</code></pre>\u000a\u000a<p>However, this mutates the existing dictionary so the contents of the dictionary changes for anybody else who has a reference to the same instance. To return a <em>new</em> dictionary, make a copy of the dictionary:</p>\u000a\u000a<pre><code>def removekey(d, key):\u000a    r = dict(d)\u000a    del r[key]\u000a    return r\u000a</code></pre>\u000a\u000a<p>The <code>dict()</code> constructor makes a <em>shallow copy</em>. To make a deep copy, see the <a href="https://docs.python.org/library/copy.html" rel="noreferrer"><code>copy</code> module</a>.</p>\u000a
p1321
sVquestion_id
p1322
I5844672
sVlast_activity_date
p1323
I1406172783
sVcreation_date
p1324
I1304198739
sVscore
p1325
I801
sVowner
p1326
(dp1327
Vuser_id
p1328
I893
sVprofile_image
p1329
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p1330
sVuser_type
p1331
Vregistered
p1332
sVreputation
p1333
I552714
sVlink
p1334
Vhttp://stackoverflow.com/users/893/greg-hewgill
p1335
sVaccept_rate
p1336
I85
sVdisplay_name
p1337
VGreg Hewgill
p1338
ssVis_accepted
p1339
I01
sVlast_edit_date
p1340
I1406172783
sVanswer_id
p1341
I5844692
sa(dp1342
Vbody
p1343
V<h2>Solution</h2>\u000a\u000a<p>My 50 cents for getting a <code>pip freeze</code>-like list from a Python script:</p>\u000a\u000a<pre class="lang-python prettyprint-override"><code>import pip\u000ainstalled_packages = pip.get_installed_distributions()\u000ainstalled_packages_list = sorted(["%s==%s" % (i.key, i.version)\u000a     for i in installed_packages])\u000aprint(installed_packages_list)\u000a</code></pre>\u000a\u000a<p>As a (too long) one liner:</p>\u000a\u000a<pre class="lang-python prettyprint-override"><code>sorted(["%s==%s" % (i.key, i.version) for i in pip.get_installed_distributions()])\u000a</code></pre>\u000a\u000a<p>Giving:</p>\u000a\u000a<pre class="lang-js prettyprint-override"><code>['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24', \u000a 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3', \u000a 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0',\u000a 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1', \u000a 'werkzeug==0.9.4']\u000a</code></pre>\u000a\u000a<h2>Scope</h2>\u000a\u000a<p>This solution applies to the system scope or to a virtual environment scope, and covers packages installed by <code>setuptools</code>, <code>pip</code> and (<a href="http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install">god forbid</a>) <code>easy_install</code>.</p>\u000a\u000a<h2>My use case</h2>\u000a\u000a<p>I added the result of this call to my flask server, so when I call it with <code>http://example.com/exampleServer/environment</code> I get the list of packages installed on the server's virtualenv. It makes debugging a whole lot easier.</p>\u000a\u000a<h2>Caveats</h2>\u000a\u000a<p>I have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a <code>setup.py</code> file, it does not list the package installed by <code>setup.py</code>.</p>\u000a\u000a<h3>Steps to reproduce:</h3>\u000a\u000aCreate a virtual environment\u000a\u000a<pre><code>$ cd /tmp\u000a$ virtualenv test_env\u000aNew python executable in test_env/bin/python\u000aInstalling setuptools, pip...done.\u000a$ source test_env/bin/activate\u000a(test_env) $ \u000a</code></pre>\u000a\u000aClone a git repo with <code>setup.py</code>\u000a\u000a<pre><code>(test_env) $ git clone https://github.com/behave/behave.git\u000aCloning into 'behave'...\u000aremote: Reusing existing pack: 4350, done.\u000aremote: Total 4350 (delta 0), reused 0 (delta 0)\u000aReceiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done.\u000aResolving deltas: 100% (2388/2388), done.\u000aChecking connectivity... done.\u000a</code></pre>\u000a\u000a<p>We have behave's <code>setup.py</code> in <code>/tmp/behave</code>:</p>\u000a\u000a<pre><code>(test_env) $ ls /tmp/behave/setup.py\u000a/tmp/behave/setup.py\u000a</code></pre>\u000a\u000aInstall the python package from the git repo\u000a\u000a<pre><code>(test_env) $ cd /tmp/behave &amp;&amp; python setup.py install\u000arunning install\u000a...\u000aInstalled /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg\u000aFinished processing dependencies for behave==1.2.5a1\u000a</code></pre>\u000a\u000a<h3>If we run the aforementioned solution from <code>/tmp</code></h3>\u000a\u000a<pre><code>&gt;&gt;&gt; import pip\u000a&gt;&gt;&gt; sorted(["%s==%s" % (i.key, i.version) for i in pip.get_installed_distributions()])\u000a['behave==1.2.5a1', 'enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\u000a&gt;&gt;&gt; import os\u000a&gt;&gt;&gt; os.getcwd()\u000a'/private/tmp'\u000a</code></pre>\u000a\u000a<h3>If we run the aforementioned solution from <code>/tmp/behave</code></h3>\u000a\u000a<pre><code>&gt;&gt;&gt; import pip\u000a&gt;&gt;&gt; sorted(["%s==%s" % (i.key, i.version) for i in pip.get_installed_distributions()])\u000a['enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\u000a&gt;&gt;&gt; import os\u000a&gt;&gt;&gt; os.getcwd()\u000a'/private/tmp/behave'\u000a</code></pre>\u000a\u000a<p><code>behave==1.2.5a1</code> is missing from the second example, because the working directory contains <code>behave</code>'s <code>setup.py</code> file.</p>\u000a\u000a<p>I could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.</p>\u000a
p1344
sVquestion_id
p1345
I739993
sVlast_activity_date
p1346
I1405674324
sVcreation_date
p1347
I1401181542
sVscore
p1348
I335
sVowner
p1349
(dp1350
Vuser_id
p1351
I51197
sVprofile_image
p1352
Vhttps://i.stack.imgur.com/QG9pG.jpg?s=128&g=1
p1353
sVuser_type
p1354
Vregistered
p1355
sVreputation
p1356
I34569
sVlink
p1357
Vhttp://stackoverflow.com/users/51197/adam-matan
p1358
sVaccept_rate
p1359
I85
sVdisplay_name
p1360
VAdam Matan
p1361
ssVis_accepted
p1362
I01
sVlast_edit_date
p1363
I1405674324
sVanswer_id
p1364
I23885252
sa(dp1365
Vbody
p1366
V<p>Assuming that both your directories are real python packages (do have the <code>__init__.py</code> file inside them), here is a safe solution for inclusion of modules relatively to the location of the script.</p>\u000a\u000a<p>I assume that you want to do this because you need to include a set of modules with your script. I use this in production in several products and works in many special scenarios like: scripts called from another directory or executed with python execute instead of opening a new interpreter.</p>\u000a\u000a<pre><code> import os, sys, inspect\u000a # realpath() will make your script run, even if you symlink it :)\u000a cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0]))\u000a if cmd_folder not in sys.path:\u000a     sys.path.insert(0, cmd_folder)\u000a\u000a # use this if you want to include modules from a subfolder\u000a cmd_subfolder = os.path.realpath(os.path.abspath(os.path.join(os.path.split(inspect.getfile( inspect.currentframe() ))[0],"subfolder")))\u000a if cmd_subfolder not in sys.path:\u000a     sys.path.insert(0, cmd_subfolder)\u000a\u000a # Info:\u000a # cmd_folder = os.path.dirname(os.path.abspath(__file__)) # DO NOT USE __file__ !!!\u000a # __file__ fails if script is called in different ways on Windows\u000a # __file__ fails if someone does os.chdir() before\u000a # sys.argv[0] also fails because it doesn't not always contains the path\u000a</code></pre>\u000a\u000a<p>As a bonus, this approach does let you force Python to use your module instead of the ones installed on the system. </p>\u000a\u000a<p>Warning! I don't really know what is happening when current module is inside an <code>egg</code> file. Probably it fails too. Add a comment if you really need a better solution, I may invest few more hours in improving it.</p>\u000a
p1367
sVquestion_id
p1368
I279237
sVlast_activity_date
p1369
I1404988426
sVcreation_date
p1370
I1306159243
sVscore
p1371
I277
sVowner
p1372
(dp1373
Vuser_id
p1374
I99834
sVprofile_image
p1375
Vhttps://www.gravatar.com/avatar/63c50004c4f6eaf3235b9ea836f4b6cf?s=128&d=identicon&r=PG
p1376
sVuser_type
p1377
Vregistered
p1378
sVreputation
p1379
I55312
sVlink
p1380
Vhttp://stackoverflow.com/users/99834/sorin
p1381
sVaccept_rate
p1382
I47
sVdisplay_name
p1383
Vsorin
p1384
ssVis_accepted
p1385
I01
sVlast_edit_date
p1386
I1404988426
sVanswer_id
p1387
I6098238
sa(dp1388
Vbody
p1389
V<p>If you need to do this, do</p>\u000a\u000a<pre><code>isinstance( &lt;var&gt;, int )\u000a</code></pre>\u000a\u000a<p>unless you are in Python 2.x in which case you want</p>\u000a\u000a<pre><code>isinstance( &lt;var&gt;, ( int, long ) )\u000a</code></pre>\u000a\u000a<p>Do not use <code>type</code>. It is almost never the right answer in Python, since it blocks all the flexibility of polymorphism. For instance, if you subclass <code>int</code>, your new class should register as an <code>int</code>, which <code>type</code> will not do:</p>\u000a\u000a<pre><code>class Spam( int ): pass\u000ax = Spam( 0 )\u000atype( x ) == int # False\u000aisinstance( x, int ) # True\u000a</code></pre>\u000a\u000a<p>This adheres to Python's strong polymorphism: you should allow any object that behaves like an <code>int</code>, instead of mandating that it be one.</p>\u000a\u000a<h1>BUT</h1>\u000a\u000a<p>The classical Python mentality, though, is that it's <em>easier to ask forgiveness than permission</em>. In other words, don't check whether <code>x</code> is an integer; assume that it is and catch the exception results if it isn't:</p>\u000a\u000a<pre><code>try:\u000a    x += 1\u000aexcept TypeError:\u000a    ...\u000a</code></pre>\u000a\u000a<p>This mentality is slowly being overtaken by the use of <a href="http://docs.python.org/library/abc.html" rel="noreferrer">abstract base classes</a>, which let you register exactly what properties your object should have (adding? multiplying? doubling?) by making it inherit from a specially-constructed class. That would be the best solution, since it will permit <em>exactly</em> those objects with the necessary and sufficient attributes, but you will have to read the docs on how to use it.</p>\u000a
p1390
sVquestion_id
p1391
I3501382
sVlast_activity_date
p1392
I1402290419
sVcreation_date
p1393
I1282040296
sVscore
p1394
I549
sVowner
p1395
(dp1396
Vuser_id
p1397
I398968
sVprofile_image
p1398
Vhttps://graph.facebook.com/619530723/picture?type=large
p1399
sVuser_type
p1400
Vregistered
p1401
sVreputation
p1402
I66281
sVlink
p1403
Vhttp://stackoverflow.com/users/398968/katrielalex
p1404
sVaccept_rate
p1405
I75
sVdisplay_name
p1406
Vkatrielalex
p1407
ssVis_accepted
p1408
I01
sVlast_edit_date
p1409
I1402290419
sVanswer_id
p1410
I3501408
sa(dp1411
Vbody
p1412
V<p>In Python 2, use urllib2 which comes with the standard library.</p>\u000a\u000a<pre><code>import urllib2\u000aresponse = urllib2.urlopen('http://www.example.com/')\u000ahtml = response.read()\u000a</code></pre>\u000a\u000a<p>This is the most basic way to use the library, minus any error handling.  You can also do more complex stuff such as changing headers.  The documentation can be found <a href="http://docs.python.org/2/library/urllib2.html" rel="noreferrer">here.</a></p>\u000a
p1413
sVquestion_id
p1414
I22676
sVlast_activity_date
p1415
I1401966381
sVcreation_date
p1416
I1219419502
sVscore
p1417
I322
sVowner
p1418
(dp1419
Vuser_id
p1420
I1595
sVprofile_image
p1421
Vhttps://www.gravatar.com/avatar/4de03068cf3f1fce1a1c016d0b6f8651?s=128&d=identicon&r=PG
p1422
sVuser_type
p1423
Vregistered
p1424
sVreputation
p1425
I8594
sVlink
p1426
Vhttp://stackoverflow.com/users/1595/corey
p1427
sVaccept_rate
p1428
I75
sVdisplay_name
p1429
VCorey
p1430
ssVis_accepted
p1431
I01
sVlast_edit_date
p1432
I1401966381
sVanswer_id
p1433
I22682
sa(dp1434
Vbody
p1435
V<p>While the question has been answered, I'd like to add some useful tips when using <a href="http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.savefig" rel="noreferrer">savefig</a>. The file format can be specified by the extension:</p>\u000a\u000a<pre><code>savefig('foo.png')\u000asavefig('foo.pdf')\u000a</code></pre>\u000a\u000a<p>Will give a rasterized or vectorized output respectively, both which could be useful. In addition, you'll find that <code>pylab</code> leaves a generous, often undesirable, whitespace around the image. Remove it with:</p>\u000a\u000a<pre><code>savefig('foo.png', bbox_inches='tight')\u000a</code></pre>\u000a
p1436
sVquestion_id
p1437
I9622163
sVlast_activity_date
p1438
I1391609302
sVcreation_date
p1439
I1332855344
sVscore
p1440
I624
sVowner
p1441
(dp1442
Vuser_id
p1443
I249341
sVprofile_image
p1444
Vhttps://i.stack.imgur.com/ZFHpl.jpg?s=128&g=1
p1445
sVuser_type
p1446
Vregistered
p1447
sVreputation
p1448
I33132
sVlink
p1449
Vhttp://stackoverflow.com/users/249341/hooked
p1450
sVaccept_rate
p1451
I96
sVdisplay_name
p1452
VHooked
p1453
ssVis_accepted
p1454
I01
sVlast_edit_date
p1455
I1391609302
sVanswer_id
p1456
I9890599
sa(dp1457
Vbody
p1458
V<p>To check if the type of <code>o</code> is exactly <code>str</code>:</p>\u000a\u000a<pre><code>type(o) is str\u000a</code></pre>\u000a\u000a<p>To check if <code>o</code> is an instance of <code>str</code> or any subclass of <code>str</code> (this would be the "canonical" way):</p>\u000a\u000a<pre><code>isinstance(o, str)\u000a</code></pre>\u000a\u000a<p>The following also works, and can be useful in some cases:</p>\u000a\u000a<pre><code>issubclass(type(o), str)\u000atype(o) in ([str] + str.__subclasses__())\u000a</code></pre>\u000a\u000a<p>See <a href="http://docs.python.org/2/library/functions.html" rel="noreferrer">Built-in Functions</a> in the Python Library Reference for relevant information.</p>\u000a\u000a<p>One more note: in this case, you may actually want to use:</p>\u000a\u000a<pre><code>isinstance(o, basestring)\u000a</code></pre>\u000a\u000a<p>because this will also catch Unicode strings (<code>unicode</code> is not a subclass of <code>str</code>; both <code>str</code> and <code>unicode</code> are subclasses of <code>basestring</code>).</p>\u000a\u000a<p>Alternatively, <code>isinstance</code> accepts a tuple of classes. This will return True if x is an instance of any subclass of any of (str, unicode):</p>\u000a\u000a<pre><code>isinstance(o, (str, unicode))\u000a</code></pre>\u000a
p1459
sVquestion_id
p1460
I152580
sVlast_activity_date
p1461
I1387911008
sVcreation_date
p1462
I1222772865
sVscore
p1463
I840
sVowner
p1464
(dp1465
Vuser_id
p1466
I1163767
sVprofile_image
p1467
Vhttps://www.gravatar.com/avatar/9175248d9183522cc0d95ef6d3705cce?s=128&d=identicon&r=PG
p1468
sVuser_type
p1469
Vregistered
p1470
sVreputation
p1471
I10553
sVlink
p1472
Vhttp://stackoverflow.com/users/1163767/fredrik-johansson
p1473
sVdisplay_name
p1474
VFredrik Johansson
p1475
ssVis_accepted
p1476
I01
sVlast_edit_date
p1477
I1387911008
sVanswer_id
p1478
I152596
sa(dp1479
Vcommunity_owned_date
p1480
I1381027274
sVbody
p1481
V<p>Using <code>GHC 7.0.3</code>, <code>gcc 4.4.6</code>, <code>Linux 2.6.29</code> on an x86_64 Core2 Duo (2.5GHz) machine, compiling using <code>ghc -O2 -fllvm -fforce-recomp</code> for Haskell and <code>gcc -O3 -lm</code> for C.</p>\u000a\u000a<ul>\u000a<li>Your C routine runs in 8.4 seconds (faster than your run probably because of <code>-O3</code>)</li>\u000a<li>The Haskell solution runs in 36 seconds (due to the <code>-O2</code> flag)</li>\u000a<li>Your <code>factorCount'</code> code isn't explicitly typed and defaulting to <code>Integer</code> (thanks to Daniel for correcting my misdiagnosis here!).  Giving an explicit type signature (which is standard practice anyway) using <code>Int</code> and the time changes to <strong>11.1 seconds</strong></li>\u000a<li>in <code>factorCount'</code> you have needlessly called <code>fromIntegral</code>. A fix results in no change though (the compiler is smart, lucky for you).</li>\u000a<li>You used <code>mod</code> where <code>rem</code> is faster and sufficient. This changes the time to <strong>8.5 seconds</strong>.</li>\u000a<li><code>factorCount'</code> is constantly applying two extra arguments that never change (<code>number</code>, <code>sqrt</code>).  A worker/wrapper transformation gives us:</li>\u000a</ul>\u000a\u000a<pre class="lang-hs prettyprint-override"><code> $ time ./so\u000a 842161320  \u000a\u000a real    0m7.954s  \u000a user    0m7.944s  \u000a sys     0m0.004s  \u000a</code></pre>\u000a\u000a<p>That's right, <strong>7.95 seconds</strong>.  Consistently <strong>half a second faster than the C solution</strong>.  Without the <code>-fllvm</code> flag I'm still getting <code>8.182 seconds</code>, so the NCG backend is doing well in this case too.</p>\u000a\u000a<p>Conclusion: Haskell is awesome.</p>\u000a\u000a<p><strong>Resulting Code</strong></p>\u000a\u000a<pre class="lang-hs prettyprint-override"><code>factorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)\u000a    where square = sqrt $ fromIntegral number\u000a          isquare = floor square\u000a\u000afactorCount' :: Int -&gt; Int -&gt; Int -&gt; Int -&gt; Int\u000afactorCount' number sqrt candidate0 count0 = go candidate0 count0\u000a  where\u000a  go candidate count\u000a    | candidate &gt; sqrt = count\u000a    | number `rem` candidate == 0 = go (candidate + 1) (count + 2)\u000a    | otherwise = go (candidate + 1) count\u000a\u000anextTriangle index triangle\u000a    | factorCount triangle &gt; 1000 = triangle\u000a    | otherwise = nextTriangle (index + 1) (triangle + index + 1)\u000a\u000amain = print $ nextTriangle 1 1\u000a</code></pre>\u000a\u000a<p>EDIT: So now that we've explored that, lets address the questions</p>\u000a\u000a<blockquote>\u000a  <p>Question 1: Do erlang, python and haskell lose speed due to using\u000a  arbitrary length integers or don't they as long as the values are less\u000a  than MAXINT?</p>\u000a</blockquote>\u000a\u000a<p>In Haskell, using <code>Integer</code> is slower than <code>Int</code> but how much slower depends on the computations performed.  Luckily (for 64 bit machines) <code>Int</code> is sufficient.  For portability sake you should probably rewrite my code to use <code>Int64</code> or <code>Word64</code> (C isn't the only language with a <code>long</code>).</p>\u000a\u000a<blockquote>\u000a  <p>Question 2: Why is haskell so slow? Is there a compiler flag that\u000a  turns off the brakes or is it my implementation? (The latter is quite\u000a  probable as haskell is a book with seven seals to me.)</p>\u000a  \u000a  <p>Question 3: Can you offer me some hints how to optimize these\u000a  implementations without changing the way I determine the factors?\u000a  Optimization in any way: nicer, faster, more "native" to the language.</p>\u000a</blockquote>\u000a\u000a<p>That was what I answered above.   The answer was </p>\u000a\u000a<ul>\u000a<li>0) Use optimization via <code>-O2</code> </li>\u000a<li>1) Use fast  (notably: unbox-able) types when possible </li>\u000a<li>2) <code>rem</code> not <code>mod</code> (a frequently forgotten optimization) and </li>\u000a<li>3) worker/wrapper transformation (perhaps the most common optimization).</li>\u000a</ul>\u000a\u000a<blockquote>\u000a  <p>Question 4: Do my functional implementations permit LCO and hence\u000a  avoid adding unnecessary frames onto the call stack?</p>\u000a</blockquote>\u000a\u000a<p>Yes, that wasn't the issue.  Good work and glad you considered this.</p>\u000a
p1482
sVquestion_id
p1483
I6964392
sVlast_activity_date
p1484
I1381027274
sVcreation_date
p1485
I1312604746
sVscore
p1486
I636
sVowner
p1487
(dp1488
Vuser_id
p1489
I216164
sVprofile_image
p1490
Vhttps://www.gravatar.com/avatar/786f224adbe0784cdf7d0f15476061fe?s=128&d=identicon&r=PG
p1491
sVuser_type
p1492
Vregistered
p1493
sVreputation
p1494
I43192
sVlink
p1495
Vhttp://stackoverflow.com/users/216164/thomas-m-dubuisson
p1496
sVaccept_rate
p1497
I89
sVdisplay_name
p1498
VThomas M. DuBuisson
p1499
ssVis_accepted
p1500
I01
sVlast_edit_date
p1501
I1381027274
sVanswer_id
p1502
I6964760
sa(dp1503
Vbody
p1504
V<p>You need to remove all files manually, and also undo any other stuff that installation did manually.</p>\u000a\u000a<p>If you don't know the list of all files, you can reinstall it with the <code>--record</code> option, and take a look at the list this produces.</p>\u000a\u000a<p>To record list of installed files, you can use:</p>\u000a\u000a<pre><code>python setup.py install --record files.txt\u000a</code></pre>\u000a\u000a<p>Once you want to uninstall you can use xargs to do the removal:</p>\u000a\u000a<pre><code>cat files.txt | xargs rm -rf\u000a</code></pre>\u000a
p1505
sVquestion_id
p1506
I1550226
sVlast_activity_date
p1507
I1380116611
sVcreation_date
p1508
I1255252347
sVscore
p1509
I684
sVowner
p1510
(dp1511
Vuser_id
p1512
I33006
sVprofile_image
p1513
Vhttps://www.gravatar.com/avatar/3acb8bae5a2b5a28f6fe522a4ea9b873?s=128&d=identicon&r=PG
p1514
sVuser_type
p1515
Vregistered
p1516
sVreputation
p1517
I84348
sVlink
p1518
Vhttp://stackoverflow.com/users/33006/martin-v-l%c3%b6wis
p1519
sVaccept_rate
p1520
I88
sVdisplay_name
p1521
VMartin v. L&#246;wis
p1522
ssVis_accepted
p1523
I01
sVlast_edit_date
p1524
I1380116611
sVanswer_id
p1525
I1550235
sa(dp1526
Vbody
p1527
V<p>Empty strings are <a href="http://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="noreferrer">"falsy"</a> which means they are considered false in a Boolean context, so you can just do this:</p>\u000a\u000a<pre><code>if not myString:\u000a</code></pre>\u000a\u000a<p>This is the preferred way if you know that your variable is a string.  If your variable could also be some other type then you should use <code>myString == ""</code>.  See the documentation on <a href="http://docs.python.org/library/stdtypes.html#truth-value-testing" rel="noreferrer">Truth Value Testing</a> for other values that are false in Boolean contexts.</p>\u000a
p1528
sVquestion_id
p1529
I9573244
sVlast_activity_date
p1530
I1375891663
sVcreation_date
p1531
I1330978221
sVscore
p1532
I921
sVowner
p1533
(dp1534
Vuser_id
p1535
I505154
sVprofile_image
p1536
Vhttps://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=128&d=identicon&r=PG
p1537
sVuser_type
p1538
Vregistered
p1539
sVreputation
p1540
I114239
sVlink
p1541
Vhttp://stackoverflow.com/users/505154/andrew-clark
p1542
sVaccept_rate
p1543
I100
sVdisplay_name
p1544
VAndrew Clark
p1545
ssVis_accepted
p1546
I01
sVlast_edit_date
p1547
I1375891663
sVanswer_id
p1548
I9573259
sa(dp1549
Vbody
p1550
V<p>No there is not. You cannot declare a variable or value as constant in Python. Just don't change it.</p>\u000a\u000a<p>If you are in a class, the equivalent would be:</p>\u000a\u000a<pre><code>class Foo(object):\u000a    CONST_NAME = "Name"\u000a</code></pre>\u000a\u000a<p>if not, it is just</p>\u000a\u000a<pre><code>CONST_NAME = "Name"\u000a</code></pre>\u000a\u000a<p>But you might want to have a look at the code snippet <a href="http://code.activestate.com/recipes/65207-constants-in-python/?in=user-97991" rel="noreferrer">Constants in Python</a> by Alex Martelli.</p>\u000a
p1551
sVquestion_id
p1552
I2682745
sVlast_activity_date
p1553
I1369948598
sVcreation_date
p1554
I1271852514
sVscore
p1555
I504
sVowner
p1556
(dp1557
Vuser_id
p1558
I218196
sVprofile_image
p1559
Vhttps://i.stack.imgur.com/4P5DY.jpg?s=128&g=1
p1560
sVuser_type
p1561
Vregistered
p1562
sVreputation
p1563
I434937
sVlink
p1564
Vhttp://stackoverflow.com/users/218196/felix-kling
p1565
sVaccept_rate
p1566
I100
sVdisplay_name
p1567
VFelix Kling
p1568
ssVis_accepted
p1569
I01
sVlast_edit_date
p1570
I1369948598
sVanswer_id
p1571
I2682752
sa(dp1572
Vbody
p1573
V<p><code>in</code> is definitely more pythonic.</p>\u000a\u000a<p>In fact <a href="http://docs.python.org/3.1/whatsnew/3.0.html#builtins" rel="noreferrer"><code>has_key()</code> was removed in Python 3.x</a>.</p>\u000a
p1574
sVquestion_id
p1575
I1323410
sVlast_activity_date
p1576
I1367337384
sVcreation_date
p1577
I1251131598
sVscore
p1578
I759
sVowner
p1579
(dp1580
Vuser_id
p1581
I148532
sVprofile_image
p1582
Vhttps://www.gravatar.com/avatar/e8c8a66a3227ecf1fc2a2082d8c89c90?s=128&d=identicon&r=PG
p1583
sVuser_type
p1584
Vregistered
p1585
sVreputation
p1586
I14417
sVlink
p1587
Vhttp://stackoverflow.com/users/148532/tonfa
p1588
sVdisplay_name
p1589
Vtonfa
p1590
ssVis_accepted
p1591
I01
sVlast_edit_date
p1592
I1367337384
sVanswer_id
p1593
I1323426
sa(dp1594
Vbody
p1595
V<p><a href="http://guppy-pe.sourceforge.net/" rel="noreferrer">Heapy</a> is quite simple to use. At some point in your code, you have to write the following:</p>\u000a\u000a<pre><code>from guppy import hpy\u000ah = hpy()\u000aprint h.heap()\u000a</code></pre>\u000a\u000a<p>This gives you some output like this:</p>\u000a\u000a<pre><code>Partition of a set of 132527 objects. Total size = 8301532 bytes.\u000aIndex  Count   %     Size   % Cumulative  % Kind (class / dict of class)\u000a0  35144  27  2140412  26   2140412  26 str\u000a1  38397  29  1309020  16   3449432  42 tuple\u000a2    530   0   739856   9   4189288  50 dict (no owner)\u000a</code></pre>\u000a\u000a<p>You can also find out from where objects are referenced and get statistics about that, but somehow the docs on that are a bit sparse.</p>\u000a\u000a<p>There is a graphical browser as well, written in Tk.</p>\u000a
p1596
sVquestion_id
p1597
I110259
sVlast_activity_date
p1598
I1363981867
sVcreation_date
p1599
I1221997539
sVscore
p1600
I225
sVowner
p1601
(dp1602
Vuser_id
p1603
I9567
sVprofile_image
p1604
Vhttps://www.gravatar.com/avatar/5f066058675037dbbbae6665037b5fb5?s=128&d=identicon&r=PG
p1605
sVuser_type
p1606
Vregistered
p1607
sVreputation
p1608
I45342
sVlink
p1609
Vhttp://stackoverflow.com/users/9567/torsten-marek
p1610
sVaccept_rate
p1611
I100
sVdisplay_name
p1612
VTorsten Marek
p1613
ssVis_accepted
p1614
I01
sVlast_edit_date
p1615
I1363981867
sVanswer_id
p1616
I110826
sa(dp1617
Vcommunity_owned_date
p1618
I1270423193
sVbody
p1619
V<p>I thought the process of Python mastery went something like:</p>\u000a\u000a<ol>\u000a<li>Discover <a href="http://en.wikipedia.org/wiki/List_comprehension#Python" rel="noreferrer">list comprehensions</a></li>\u000a<li>Discover <a href="http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Generators" rel="noreferrer">generators</a></li>\u000a<li>Incorporate <a href="http://docs.python.org/library/functions.html" rel="noreferrer">map, reduce, filter, iter, range, xrange</a> often into your code</li>\u000a<li>Discover <a href="http://wiki.python.org/moin/PythonDecorators" rel="noreferrer">Decorators</a></li>\u000a<li>Write recursive functions, a lot</li>\u000a<li>Discover <a href="http://docs.python.org/library/itertools.html" rel="noreferrer">itertools</a> and <a href="http://docs.python.org/library/functools.html" rel="noreferrer">functools</a></li>\u000a<li>Read <a href="http://rads.stackoverflow.com/amzn/click/0596514980" rel="noreferrer">Real World Haskell</a> (<a href="http://book.realworldhaskell.org/read/" rel="noreferrer">read free online</a>)</li>\u000a<li>Rewrite all your old Python code with tons of higher order functions, recursion, and whatnot.</li>\u000a<li>Annoy your cubicle mates every time they present you with a Python class.  Claim it could be "better" implemented as a dictionary plus some functions.  Embrace functional programming.</li>\u000a<li>Rediscover the <a href="http://en.wikipedia.org/wiki/Strategy_pattern#Python" rel="noreferrer">Strategy</a> pattern and then <a href="http://rads.stackoverflow.com/amzn/click/0596007124" rel="noreferrer">all those things</a> from imperative code you tried so hard to forget after Haskell.</li>\u000a<li>Find a balance.</li>\u000a</ol>\u000a
p1620
sVquestion_id
p1621
I2573135
sVlast_activity_date
p1622
I1359368920
sVcreation_date
p1623
I1270423193
sVscore
p1624
I471
sVowner
p1625
(dp1626
Vuser_id
p1627
I178060
sVprofile_image
p1628
Vhttps://www.gravatar.com/avatar/e61aa9f3d632781569b0115b9f3154fd?s=128&d=identicon&r=PG
p1629
sVuser_type
p1630
Vregistered
p1631
sVreputation
p1632
I27394
sVlink
p1633
Vhttp://stackoverflow.com/users/178060/wheaties
p1634
sVaccept_rate
p1635
I92
sVdisplay_name
p1636
Vwheaties
p1637
ssVis_accepted
p1638
I01
sVlast_edit_date
p1639
I1359368920
sVanswer_id
p1640
I2576240
sa(dp1641
Vbody
p1642
V<p>It's difficult to make <code>del df.column_name</code> work simply as the result of syntactic limitations in Python. <code>del df[name]</code> gets translated to <code>df.__delitem__(name)</code> under the covers by Python</p>\u000a
p1643
sVquestion_id
p1644
I13411544
sVlast_activity_date
p1645
I1353467551
sVcreation_date
p1646
I1353467551
sVscore
p1647
I321
sVowner
p1648
(dp1649
Vuser_id
p1650
I776560
sVprofile_image
p1651
Vhttps://www.gravatar.com/avatar/2c08a3eed709a9d1a2654cea45aa466f?s=128&d=identicon&r=PG
p1652
sVuser_type
p1653
Vregistered
p1654
sVreputation
p1655
I37562
sVlink
p1656
Vhttp://stackoverflow.com/users/776560/wes-mckinney
p1657
sVdisplay_name
p1658
VWes McKinney
p1659
ssVis_accepted
p1660
I01
sVanswer_id
p1661
I13485766
sa(dp1662
Vbody
p1663
V<p>You want to use <a href="http://docs.python.org/library/os.path.html?highlight=os.path#os.path.expanduser" rel="noreferrer">os.path.expanduser</a>. This will ensure it works on all platforms</p>\u000a\u000a<pre><code>from os.path import expanduser\u000ahome = expanduser("~")\u000a</code></pre>\u000a
p1664
sVquestion_id
p1665
I4028904
sVlast_activity_date
p1666
I1351871969
sVcreation_date
p1667
I1288137159
sVscore
p1668
I771
sVowner
p1669
(dp1670
Vuser_id
p1671
I287279
sVprofile_image
p1672
Vhttps://www.gravatar.com/avatar/4cb51aa74068306f93490da3a7727234?s=128&d=identicon&r=PG
p1673
sVuser_type
p1674
Vregistered
p1675
sVreputation
p1676
I9303
sVlink
p1677
Vhttp://stackoverflow.com/users/287279/dcolish
p1678
sVaccept_rate
p1679
I80
sVdisplay_name
p1680
Vdcolish
p1681
ssVis_accepted
p1682
I01
sVlast_edit_date
p1683
I1351871969
sVanswer_id
p1684
I4028943
sa(dp1685
Vbody
p1686
V<p>First, I see two issues with what you're trying to do. Since you already have an installed version, you should either uninstall the current existing driver or use <code>pip install -I MySQL_python==1.2.2</code></p>\u000a\u000a<p>However, you'll soon find out that this doesn't work. If you look at pip's installation log, or if you do a <code>pip install -Iv MySQL_python==1.2.2</code> you'll find that the PyPI URL link does not work for MySQL_python v1.2.2. You can verify this here: <a href="http://pypi.python.org/pypi/MySQL-python/1.2.2" rel="noreferrer">http://pypi.python.org/pypi/MySQL-python/1.2.2</a></p>\u000a\u000a<p>The download link 404s and the fallback URL links are re-directing infinitely due to sourceforge.net's recent upgrade and PyPI's stale URL.</p>\u000a\u000a<p>So to properly install the driver, you can follow these steps:</p>\u000a\u000a<pre><code>pip uninstall MySQL_python\u000apip install -Iv http://sourceforge.net/projects/mysql-python/files/mysql-python/1.2.2/MySQL-python-1.2.2.tar.gz/download\u000a</code></pre>\u000a
p1687
sVquestion_id
p1688
I5226311
sVlast_activity_date
p1689
I1343216172
sVcreation_date
p1690
I1299539933
sVscore
p1691
I456
sVowner
p1692
(dp1693
Vuser_id
p1694
I133514
sVprofile_image
p1695
Vhttps://www.gravatar.com/avatar/7743eab8a5fe5da8c3771f3de2fc8c42?s=128&d=identicon&r=PG
p1696
sVuser_type
p1697
Vregistered
p1698
sVreputation
p1699
I10481
sVlink
p1700
Vhttp://stackoverflow.com/users/133514/mahmoud-abdelkader
p1701
sVaccept_rate
p1702
I100
sVdisplay_name
p1703
VMahmoud Abdelkader
p1704
ssVis_accepted
p1705
I01
sVlast_edit_date
p1706
I1343216172
sVanswer_id
p1707
I5226504
sa(dp1708
Vbody
p1709
V<p>Just assign it to the <code>.columns</code> attribute:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})\u000a&gt;&gt;&gt; df.columns = ['a', 'b']\u000a&gt;&gt;&gt; df\u000a   a   b\u000a0  1  10\u000a1  2  20\u000a</code></pre>\u000a
p1710
sVquestion_id
p1711
I11346283
sVlast_activity_date
p1712
I1341498207
sVcreation_date
p1713
I1341498207
sVscore
p1714
I662
sVowner
p1715
(dp1716
Vuser_id
p1717
I449449
sVprofile_image
p1718
Vhttps://www.gravatar.com/avatar/b52c27e86c87d931e654d6a2d2cdf974?s=128&d=identicon&r=PG
p1719
sVuser_type
p1720
Vregistered
p1721
sVreputation
p1722
I94835
sVlink
p1723
Vhttp://stackoverflow.com/users/449449/eumiro
p1724
sVaccept_rate
p1725
I100
sVdisplay_name
p1726
Veumiro
p1727
ssVis_accepted
p1728
I01
sVanswer_id
p1729
I11346337
sa(dp1730
Vbody
p1731
V<p>You might ask <em>why</em> it is faster to store local variables than globals. This is a CPython implementation detail.</p>\u000a\u000a<p>Remember that CPython is compiled to bytecode, which the interpreter runs. When a function is compiled, the local variables are stored in a fixed-size array (<em>not</em> a <code>dict</code>) and variable names are assigned to indexes. This is possible because you can't dynamically add local variables to a function. Then retrieving a local variable is literally a pointer lookup into the list and a refcount increase on the <code>PyObject</code> which is trivial.</p>\u000a\u000a<p>Contrast this to a global lookup (<code>LOAD_GLOBAL</code>), which is a true <code>dict</code> search involving a hash and so on. Incidentally, this is why you need to specify <code>global i</code> if you want it to be global: if you ever assign to a variable inside a scope, the compiler will issue <code>STORE_FAST</code>s for its access unless you tell it not to.</p>\u000a\u000a<p>By the way, global lookups are still pretty optimised. Attribute lookups <code>foo.bar</code> are the <em>really</em> slow ones!</p>\u000a
p1732
sVquestion_id
p1733
I11241523
sVlast_activity_date
p1734
I1340878508
sVcreation_date
p1735
I1340878508
sVscore
p1736
I377
sVowner
p1737
(dp1738
Vuser_id
p1739
I398968
sVprofile_image
p1740
Vhttps://graph.facebook.com/619530723/picture?type=large
p1741
sVuser_type
p1742
Vregistered
p1743
sVreputation
p1744
I66281
sVlink
p1745
Vhttp://stackoverflow.com/users/398968/katrielalex
p1746
sVaccept_rate
p1747
I75
sVdisplay_name
p1748
Vkatrielalex
p1749
ssVis_accepted
p1750
I01
sVanswer_id
p1751
I11242447
sa(dp1752
Vbody
p1753
V<p>What is the line?  You can just have arguments on the next line without any problems:</p>\u000a\u000a<pre><code>a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, \u000a            blahblah6, blahblah7)\u000a</code></pre>\u000a\u000a<p>Otherwise you can do something like this:</p>\u000a\u000a<pre><code>if a == True and \u005c\u000a   b == False\u000a</code></pre>\u000a\u000a<p>Check the <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">style guide</a> for more information.</p>\u000a\u000a<p>From your example line:</p>\u000a\u000a<pre><code>a = '1' + '2' + '3' + \u005c\u000a    '4' + '5'\u000a</code></pre>\u000a\u000a<p>Or:</p>\u000a\u000a<pre><code>a = ('1' + '2' + '3' +\u000a    '4' + '5')\u000a</code></pre>\u000a\u000a<p>Note that the style guide says that using the implicit continuation with parentheses is preferred, but in this particular case just adding parentheses around your expression is probably the wrong way to go.</p>\u000a
p1754
sVquestion_id
p1755
I53162
sVlast_activity_date
p1756
I1334103355
sVcreation_date
p1757
I1221004325
sVscore
p1758
I707
sVowner
p1759
(dp1760
Vuser_id
p1761
I1057
sVprofile_image
p1762
Vhttps://www.gravatar.com/avatar/e5778b659d144e38ed982c3f4e566089?s=128&d=identicon&r=PG
p1763
sVuser_type
p1764
Vregistered
p1765
sVreputation
p1766
I78416
sVlink
p1767
Vhttp://stackoverflow.com/users/1057/harley-holcombe
p1768
sVaccept_rate
p1769
I80
sVdisplay_name
p1770
VHarley Holcombe
p1771
ssVis_accepted
p1772
I01
sVlast_edit_date
p1773
I1334103355
sVanswer_id
p1774
I53180
sa(dp1775
Vbody
p1776
V<p>You need to read the Python <a href="http://docs.python.org/howto/unicode.html">Unicode HOWTO</a>. This error is the <a href="http://docs.python.org/howto/unicode.html#the-unicode-type">very first example</a>.</p>\u000a\u000a<p>Basically, stop using <code>str</code> to convert from unicode to encoded text / bytes.</p>\u000a\u000a<p>Instead, properly use <a href="http://docs.python.org/library/stdtypes.html#str.encode"><code>.encode()</code></a> to encode the string:</p>\u000a\u000a<pre><code>p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()\u000a</code></pre>\u000a\u000a<p>or work entirely in unicode.</p>\u000a
p1777
sVquestion_id
p1778
I9942594
sVlast_activity_date
p1779
I1333110091
sVcreation_date
p1780
I1333110091
sVscore
p1781
I701
sVowner
p1782
(dp1783
Vuser_id
p1784
I500584
sVprofile_image
p1785
Vhttps://www.gravatar.com/avatar/02cbc0104ac1794c222b2d3e11d325e4?s=128&d=identicon&r=PG
p1786
sVuser_type
p1787
Vregistered
p1788
sVreputation
p1789
I82963
sVlink
p1790
Vhttp://stackoverflow.com/users/500584/agf
p1791
sVdisplay_name
p1792
Vagf
p1793
ssVis_accepted
p1794
I01
sVanswer_id
p1795
I9942822
sa(dp1796
Vbody
p1797
V<p><code>null=True</code> sets <code>NULL</code> (versus <code>NOT NULL</code>) on the column in your DB. Blank values for Django field types such as <code>DateTimeField</code> or <code>ForeignKey</code> will be stored as <code>NULL</code> in the DB.</p>\u000a\u000a<p><code>blank=True</code> determines whether the field will be required in forms. This includes the admin and your own custom forms. If <code>blank=True</code> then the field will not be required, whereas if it's <code>False</code> the field cannot be blank.</p>\u000a\u000a<p>The combo of the two is so frequent because typically if you're going to allow a field to be blank in your form, you're going to also need your database to allow <code>NULL</code> values for that field. The exception is <code>CharField</code>s and <code>TextField</code>s, which in Django are <em>never</em> saved as <code>NULL</code>. Blank values are stored in the DB as an empty string (<code>''</code>).</p>\u000a\u000a<p>A few examples:</p>\u000a\u000a<pre><code>models.DateTimeField(blank=True) # raises IntegrityError if blank\u000a\u000amodels.DateTimeField(null=True) # NULL allowed, but must be filled out in a form\u000a</code></pre>\u000a\u000a<p>Obviously those two options don't make logical sense to use (though, there might be a use case for <code>null=True, blank=False</code> if you want a field to always be required in forms, but optional when dealing with an object through something like the shell.)</p>\u000a\u000a<pre><code>models.CharField(blank=True) # No problem, blank is stored as ''\u000a\u000amodels.CharField(null=True) # NULL allowed, but will never be set as NULL\u000a</code></pre>\u000a\u000a<p><code>CHAR</code> and <code>TEXT</code> types are never saved as <code>NULL</code> by Django, so <code>null=True</code> is unnecessary. However, you can manually set one of these fields to <code>None</code> to force set it as <code>NULL</code>. If you have a scenario where that might be necessary, you should still include <code>null=True</code>.</p>\u000a
p1798
sVquestion_id
p1799
I8609192
sVlast_activity_date
p1800
I1324586462
sVcreation_date
p1801
I1324586126
sVscore
p1802
I552
sVowner
p1803
(dp1804
Vuser_id
p1805
I654031
sVprofile_image
p1806
Vhttps://www.gravatar.com/avatar/9d0a45dd92ecc2cb15cdbc5f80befb15?s=128&d=identicon&r=PG
p1807
sVuser_type
p1808
Vregistered
p1809
sVreputation
p1810
I114900
sVlink
p1811
Vhttp://stackoverflow.com/users/654031/chris-pratt
p1812
sVaccept_rate
p1813
I77
sVdisplay_name
p1814
VChris Pratt
p1815
ssVis_accepted
p1816
I01
sVlast_edit_date
p1817
I1324586462
sVanswer_id
p1818
I8609425
sa(dp1819
Vbody
p1820
V<p>You need to double the <code>{{</code> and <code>}}</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = " {{ Hello }} {0} "\u000a&gt;&gt;&gt; print x.format(42)\u000a' { Hello } 42 '\u000a</code></pre>\u000a\u000a<p>Here's the relevant part of the <a href="http://docs.python.org/library/string.html#formatstrings">Python documentation for format string syntax</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Format strings contain \u201creplacement fields\u201d surrounded by curly braces <code>{}</code>. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>.</p>\u000a</blockquote>\u000a
p1821
sVquestion_id
p1822
I5466451
sVlast_activity_date
p1823
I1301357335
sVcreation_date
p1824
I1301357335
sVscore
p1825
I857
sVowner
p1826
(dp1827
Vuser_id
p1828
I893
sVprofile_image
p1829
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p1830
sVuser_type
p1831
Vregistered
p1832
sVreputation
p1833
I552714
sVlink
p1834
Vhttp://stackoverflow.com/users/893/greg-hewgill
p1835
sVaccept_rate
p1836
I85
sVdisplay_name
p1837
VGreg Hewgill
p1838
ssVis_accepted
p1839
I01
sVanswer_id
p1840
I5466478
sa(dp1841
Vbody
p1842
V<p>Yes, this is a 'new style' object. It was a feature introduced in python2.2.</p>\u000a\u000a<p>New style objects have a different object model to classic objects, and some things won't work properly with old style objects, for instance, super(), @property and descriptors. See this article for a good description of what a new style class is:</p>\u000a\u000a<p><a href="http://docs.python.org/release/2.2.3/whatsnew/sect-rellinks.html" rel="noreferrer">http://docs.python.org/release/2.2.3/whatsnew/sect-rellinks.html</a></p>\u000a\u000a<p>SO link for a description of the differences: <a href="http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python">What is the difference between old style and new style classes in Python?</a></p>\u000a
p1843
sVquestion_id
p1844
I4015417
sVlast_activity_date
p1845
I1288016456
sVcreation_date
p1846
I1288016456
sVscore
p1847
I336
sVowner
p1848
(dp1849
Vuser_id
p1850
I14648
sVprofile_image
p1851
Vhttps://www.gravatar.com/avatar/84965d0d894b45875d8045bc5762ba57?s=128&d=identicon&r=PG
p1852
sVuser_type
p1853
Vregistered
p1854
sVreputation
p1855
I27307
sVlink
p1856
Vhttp://stackoverflow.com/users/14648/jerub
p1857
sVaccept_rate
p1858
I91
sVdisplay_name
p1859
VJerub
p1860
ssVis_accepted
p1861
I01
sVanswer_id
p1862
I4015466
sa(dp1863
Vbody
p1864
V<p>In Python, the 'null' object is the singleton <code>None</code>.</p>\u000a\u000a<p>The best way to check things for "Noneness" is to use the identity operator, <code>is</code>:</p>\u000a\u000a<pre><code>if foo is None:\u000a    ...\u000a</code></pre>\u000a
p1865
sVquestion_id
p1866
I3289601
sVlast_activity_date
p1867
I1279626867
sVcreation_date
p1868
I1279626867
sVscore
p1869
I791
sVowner
p1870
(dp1871
Vuser_id
p1872
I189179
sVprofile_image
p1873
Vhttps://www.gravatar.com/avatar/bab16b3716e0e72b8b1a7741d68f5ee2?s=128&d=identicon&r=PG
p1874
sVuser_type
p1875
Vregistered
p1876
sVreputation
p1877
I67771
sVlink
p1878
Vhttp://stackoverflow.com/users/189179/ben-james
p1879
sVdisplay_name
p1880
VBen James
p1881
ssVis_accepted
p1882
I01
sVanswer_id
p1883
I3289606
sa(dp1884
Vbody
p1885
V<p>Named tuples are basically easy to create, lightweight object types.  Named tuple instances can be referenced using object like variable deferencing or the standard tuple syntax.  They can be used similarly to <code>struct</code> or other common record types, except that they are immutable.  They were added in Python 2.6 and Python 3.0, although there is a <a href="http://code.activestate.com/recipes/500261/" rel="noreferrer">recipe for implementation in Python 2.4</a>.</p>\u000a\u000a<p>For example, it is common to represent a point, for example as a tuple <code>(x, y)</code>.  This leads to code like the following:</p>\u000a\u000a<pre><code>pt1 = (1.0, 5.0)\u000apt2 = (2.5, 1.5)\u000a\u000afrom math import sqrt\u000aline_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)\u000a</code></pre>\u000a\u000a<p>Using a named tuple it becomes more readable:</p>\u000a\u000a<pre><code>from collections import namedtuple\u000aPoint = namedtuple('Point', 'x y')\u000apt1 = Point(1.0, 5.0)\u000apt2 = Point(2.5, 1.5)\u000a\u000afrom math import sqrt\u000aline_length = sqrt((pt1.x-pt2.x)**2 + (pt1.y-pt2.y)**2)\u000a</code></pre>\u000a\u000a<p>However, named tuples are still backwards compatible with normal tuples, so the following will still work:</p>\u000a\u000a<pre><code>Point = namedtuple('Point', 'x y')\u000apt1 = Point(1.0, 5.0)\u000apt2 = Point(2.5, 1.5)\u000a\u000afrom math import sqrt\u000a# use index referencing\u000aline_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)\u000a # use tuple unpacking\u000ax1, y1 = pt1\u000a</code></pre>\u000a\u000a<p>Thus, <strong>you should use named tuples instead of tuples anywhere you think object notation will make your code more pythonic and more easily readable</strong>.  I personally have started using them to represent very simple value types, particularly when passing them as parameters to functions.  It makes the functions more readable, without seeing the context of the tuple packing.</p>\u000a\u000a<p>Furthermore, <strong>you can also replace ordinary <em>immutable</em> classes that have no functions</strong>, only fields with them.  You can even use your named tuple types as base classes:</p>\u000a\u000a<pre><code>class Point(namedtuple('Point', 'x y')):\u000a    [...]\u000a</code></pre>\u000a\u000a<p>However, as with tuples, attributes in named tuples are immutable:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; Point = namedtuple('Point', 'x y')\u000a&gt;&gt;&gt; pt1 = Point(1.0, 5.0)\u000a&gt;&gt;&gt; pt1.x = 2.0\u000aAttributeError: can't set attribute\u000a</code></pre>\u000a\u000a<p>If you want to be able change the values, you need another type.  There is a handy recipe for <a href="http://code.activestate.com/recipes/576555/" rel="noreferrer">mutable recordtypes</a> which allow you to set new values to attributes.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from rcdtype import *\u000a&gt;&gt;&gt; Point = recordtype('Point', 'x y')\u000a&gt;&gt;&gt; pt1 = Point(1.0, 5.0)\u000a&gt;&gt;&gt; pt1 = Point(1.0, 5.0)\u000a&gt;&gt;&gt; pt1.x = 2.0\u000a&gt;&gt;&gt; print(pt1[0])\u000a    2.0\u000a</code></pre>\u000a\u000a<p>I am not aware of any form of "named list" that lets you add new fields, however.  You may just want to use a dictionary in this situation. Named tuples can be converted to dictionaries using <code>pt1._asdict()</code> which returns <code>{'x': 1.0, 'y': 5.0}</code> and can be operated upon with all the usual dictionary functions.  </p>\u000a\u000a<p>As already noted, you should <a href="http://docs.python.org/py3k/library/collections.html?highlight=namedtuple#collections.namedtuple" rel="noreferrer">check the documentation</a> for more information from which these examples were constructed.</p>\u000a
p1886
sVquestion_id
p1887
I2970608
sVlast_activity_date
p1888
I1276669615
sVcreation_date
p1889
I1275610777
sVscore
p1890
I739
sVowner
p1891
(dp1892
Vuser_id
p1893
I103225
sVprofile_image
p1894
Vhttps://www.gravatar.com/avatar/e57b10d7528f2fae99d6033816ee2216?s=128&d=identicon&r=PG
p1895
sVuser_type
p1896
Vregistered
p1897
sVreputation
p1898
I25985
sVlink
p1899
Vhttp://stackoverflow.com/users/103225/fmark
p1900
sVaccept_rate
p1901
I80
sVdisplay_name
p1902
Vfmark
p1903
ssVis_accepted
p1904
I01
sVlast_edit_date
p1905
I1276669615
sVanswer_id
p1906
I2970722
sa(dp1907
Vbody
p1908
V<p>They contain <a href="http://en.wikipedia.org/wiki/Bytecode" rel="noreferrer">byte code</a>, which is what the Python interpreter compiles the source to. This code is then executed by Python's virtual machine. </p>\u000a\u000a<p>Python's documentation explains the definition like this:</p>\u000a\u000a<blockquote>\u000a  <p>Python is an interpreted language, as\u000a  opposed to a compiled one, though the\u000a  distinction can be blurry because of\u000a  the presence of the bytecode compiler.\u000a  This means that source files can be\u000a  run directly without explicitly\u000a  creating an executable which is then\u000a  run.</p>\u000a</blockquote>\u000a
p1909
sVquestion_id
p1910
I2998215
sVlast_activity_date
p1911
I1276007320
sVcreation_date
p1912
I1276007320
sVscore
p1913
I408
sVowner
p1914
(dp1915
Vuser_id
p1916
I28169
sVprofile_image
p1917
Vhttps://www.gravatar.com/avatar/ec9385dc533f1a6a93769077f852503e?s=128&d=identicon&r=PG
p1918
sVuser_type
p1919
Vregistered
p1920
sVreputation
p1921
I275578
sVlink
p1922
Vhttp://stackoverflow.com/users/28169/unwind
p1923
sVaccept_rate
p1924
I88
sVdisplay_name
p1925
Vunwind
p1926
ssVis_accepted
p1927
I01
sVanswer_id
p1928
I2998228
sa(dp1929
Vbody
p1930
V<p>The reason you need to use <code>self.</code> is because Python does not use the <code>@</code> syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be <em>passed</em> automatically, but not <em>received</em> automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although <code>self</code> is the convention, and people will generally frown at you when you use something else.) <code>self</code> is not special to the code, it's just another object.</p>\u000a\u000a<p>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs <code>self.</code>.</p>\u000a
p1931
sVquestion_id
p1932
I2709821
sVlast_activity_date
p1933
I1272409288
sVcreation_date
p1934
I1272227137
sVscore
p1935
I446
sVowner
p1936
(dp1937
Vuser_id
p1938
I17624
sVprofile_image
p1939
Vhttps://www.gravatar.com/avatar/90285a816eda046ff55a0dcacc0c5ee8?s=128&d=identicon&r=PG
p1940
sVuser_type
p1941
Vregistered
p1942
sVreputation
p1943
I69283
sVlink
p1944
Vhttp://stackoverflow.com/users/17624/thomas-wouters
p1945
sVdisplay_name
p1946
VThomas Wouters
p1947
ssVis_accepted
p1948
I01
sVlast_edit_date
p1949
I1272409288
sVanswer_id
p1950
I2709832
sa(dp1951
Vbody
p1952
V<p><code>is</code> is identity testing, <code>==</code> is equality testing. what happens in your code would be emulated in the interpreter like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = 'pub'\u000a&gt;&gt;&gt; b = ''.join(['p', 'u', 'b'])\u000a&gt;&gt;&gt; a == b\u000aTrue\u000a&gt;&gt;&gt; a is b\u000aFalse\u000a</code></pre>\u000a\u000a<p>so, no wonder they're not the same, right?</p>\u000a\u000a<p>In other words: <code>is</code> is the <code>id(a) == id(b)</code></p>\u000a
p1953
sVquestion_id
p1954
I1504717
sVlast_activity_date
p1955
I1254412294
sVcreation_date
p1956
I1254411920
sVscore
p1957
I976
sVowner
p1958
(dp1959
Vuser_id
p1960
I12855
sVprofile_image
p1961
Vhttps://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG
p1962
sVuser_type
p1963
Vregistered
p1964
sVreputation
p1965
I142797
sVlink
p1966
Vhttp://stackoverflow.com/users/12855/silentghost
p1967
sVaccept_rate
p1968
I86
sVdisplay_name
p1969
VSilentGhost
p1970
ssVis_accepted
p1971
I01
sVlast_edit_date
p1972
I1254412294
sVanswer_id
p1973
I1504742
sa(dp1974
Vbody
p1975
V<p><code>++</code> is not an operator. It is two <code>+</code> operators. The <code>+</code> operator is the <strong>identity</strong> operator, which does nothing. (Clarification: the <code>+</code> and <code>-</code> unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical <code>++</code> operator to work on strings.)</p>\u000a\u000a<pre><code>++count\u000a</code></pre>\u000a\u000a<p>Parses as</p>\u000a\u000a<pre><code>+(+count)\u000a</code></pre>\u000a\u000a<p>Which translates to</p>\u000a\u000a<pre><code>count\u000a</code></pre>\u000a\u000a<p>You have to use the slightly longer <code>+=</code> operator to do what you want to do:</p>\u000a\u000a<pre><code>count += 1\u000a</code></pre>\u000a\u000a<p>I suspect the <code>++</code> and <code>--</code> operators were left out for consistency and simplicity. I don't know the exact argument Guido van Rossum gave for the decision, but I can imagine a few arguments:</p>\u000a\u000a<ul>\u000a<li>Simpler parsing. Technically, parsing <code>++count</code> is ambiguous, as it could be <code>+</code>, <code>+</code>, <code>count</code> (two unary <code>+</code> operators) just as easily as it could be <code>++</code>, <code>count</code> (one unary <code>++</code> operator). It's not a significant syntactic ambiguity, but it does exist.</li>\u000a<li>Simpler language. <code>++</code> is nothing more than a synonym for <code>+= 1</code>. It was a shorthand invented because C compilers were stupid and didn't know how to optimize <code>a += 1</code> into the <code>inc</code> instruction most computers have. In this day of optimizing compilers and bytecode interpreted languages, adding operators to a language to allow programmers to optimize their code is usually frowned upon, especially in a language like Python that is designed to be consistent and readable.</li>\u000a<li>Confusing side-effects. One common newbie error in languages with <code>++</code> operators is mixing up the differences (both in precedence and in return value) between the pre- and post-incremend/decrement operators, and Python likes to eliminate language "gotcha"-s. The precedence issues of pre-/post-increment in C are pretty hairy, and incredibly easy to mess up.</li>\u000a</ul>\u000a
p1976
sVquestion_id
p1977
I1485841
sVlast_activity_date
p1978
I1254190419
sVcreation_date
p1979
I1254123576
sVscore
p1980
I594
sVowner
p1981
(dp1982
Vuser_id
p1983
I60777
sVprofile_image
p1984
Vhttps://www.gravatar.com/avatar/4e698bea14e1d5f5c86d0359e5f24d28?s=128&d=identicon&r=PG
p1985
sVuser_type
p1986
Vregistered
p1987
sVreputation
p1988
I46414
sVlink
p1989
Vhttp://stackoverflow.com/users/60777/chris-lutz
p1990
sVaccept_rate
p1991
I77
sVdisplay_name
p1992
VChris Lutz
p1993
ssVis_accepted
p1994
I01
sVlast_edit_date
p1995
I1254190419
sVanswer_id
p1996
I1485854
sa(dp1997
Vbody
p1998
V<pre><code>&gt;&gt;&gt; from __future__ import division\u000a&gt;&gt;&gt; a = 4\u000a&gt;&gt;&gt; b = 6\u000a&gt;&gt;&gt; c = a / b\u000a&gt;&gt;&gt; c\u000a0.66666666666666663\u000a</code></pre>\u000a
p1999
sVquestion_id
p2000
I1267869
sVlast_activity_date
p2001
I1250101706
sVcreation_date
p2002
I1250101706
sVscore
p2003
I587
sVowner
p2004
(dp2005
Vuser_id
p2006
I145387
sVprofile_image
p2007
Vhttps://www.gravatar.com/avatar/b3ed9bd44a7d22be2dd659be02e44754?s=128&d=identicon&r=PG
p2008
sVuser_type
p2009
Vregistered
p2010
sVreputation
p2011
I8577
sVlink
p2012
Vhttp://stackoverflow.com/users/145387/michael-fairley
p2013
sVaccept_rate
p2014
I83
sVdisplay_name
p2015
VMichael Fairley
p2016
ssVis_accepted
p2017
I01
sVanswer_id
p2018
I1267892
sa(dp2019
Vbody
p2020
V<p><code>map</code> may be microscopically faster in some cases (when you're NOT making a lambda for the purpose, but using the same function in map and a listcomp). List comprehensions may be faster in other cases and most (not all) pythonistas consider them more direct and clearer.</p>\u000a\u000a<p>An example of the tiny speed advantage of map when using exactly the same function:</p>\u000a\u000a<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(hex, xs)'\u000a100000 loops, best of 3: 4.86 usec per loop\u000a$ python -mtimeit -s'xs=range(10)' '[hex(x) for x in xs]'\u000a100000 loops, best of 3: 5.58 usec per loop\u000a</code></pre>\u000a\u000a<p>An example of how performance comparison gets completely reversed when map needs a lambda:</p>\u000a\u000a<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'\u000a100000 loops, best of 3: 4.24 usec per loop\u000a$ python -mtimeit -s'xs=range(10)' '[x+2 for x in xs]'\u000a100000 loops, best of 3: 2.32 usec per loop\u000a</code></pre>\u000a
p2021
sVquestion_id
p2022
I1247486
sVlast_activity_date
p2023
I1249688723
sVcreation_date
p2024
I1249688723
sVscore
p2025
I409
sVowner
p2026
(dp2027
Vuser_id
p2028
I95810
sVprofile_image
p2029
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p2030
sVuser_type
p2031
Vregistered
p2032
sVreputation
p2033
I516079
sVlink
p2034
Vhttp://stackoverflow.com/users/95810/alex-martelli
p2035
sVaccept_rate
p2036
I80
sVdisplay_name
p2037
VAlex Martelli
p2038
ssVis_accepted
p2039
I01
sVanswer_id
p2040
I1247490
sa(dp2041
Vbody
p2042
V<p>You can't get any better than that.</p>\u000a\u000a<p>After all, any solution will have to read the entire file, figure out how many <code>\u005cn</code> you have, and return that result.</p>\u000a\u000a<p>Do you have a better way of doing that without reading the entire file? Not sure... The best solution will always be I/O-bound, best you can do is make sure you don't use unnecessary memory, but it looks like you have that covered.</p>\u000a
p2043
sVquestion_id
p2044
I845058
sVlast_activity_date
p2045
I1241952953
sVcreation_date
p2046
I1241951862
sVscore
p2047
I185
sVowner
p2048
(dp2049
Vuser_id
p2050
I24545
sVprofile_image
p2051
Vhttps://www.gravatar.com/avatar/0a59649d5bff1787b18d3a73da34a27a?s=128&d=identicon&r=PG
p2052
sVuser_type
p2053
Vregistered
p2054
sVreputation
p2055
I92486
sVlink
p2056
Vhttp://stackoverflow.com/users/24545/yuval-adam
p2057
sVaccept_rate
p2058
I99
sVdisplay_name
p2059
VYuval Adam
p2060
ssVis_accepted
p2061
I01
sVlast_edit_date
p2062
I1241952953
sVanswer_id
p2063
I845081
sa(dp2064
Vbody
p2065
V<p>To check the existence of a local variable:</p>\u000a\u000a<pre><code>if 'myVar' in locals():\u000a  # myVar exists.\u000a</code></pre>\u000a\u000a<p>To check the existence of a global variable:</p>\u000a\u000a<pre><code>if 'myVar' in globals():\u000a  # myVar exists.\u000a</code></pre>\u000a\u000a<p>To check if an object has an attribute:</p>\u000a\u000a<pre><code>if hasattr(obj, 'attr_name'):\u000a  # obj.attr_name exists.\u000a</code></pre>\u000a
p2066
sVquestion_id
p2067
I843277
sVlast_activity_date
p2068
I1241874965
sVcreation_date
p2069
I1241874965
sVscore
p2070
I835
sVowner
p2071
(dp2072
Vuser_id
p2073
I40005
sVprofile_image
p2074
Vhttps://www.gravatar.com/avatar/9430c2f290372174f5c818a318e14ed8?s=128&d=identicon&r=PG
p2075
sVuser_type
p2076
Vregistered
p2077
sVreputation
p2078
I69415
sVlink
p2079
Vhttp://stackoverflow.com/users/40005/ayman-hourieh
p2080
sVdisplay_name
p2081
VAyman Hourieh
p2082
ssVis_accepted
p2083
I01
sVanswer_id
p2084
I843293
sa(dp2085
Vbody
p2086
V<pre><code>try:\u000a  doSomething()\u000aexcept: \u000a  pass\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>try:\u000a  doSomething()\u000aexcept Exception: \u000a  pass\u000a</code></pre>\u000a\u000a<p>The difference is, that the first one will also catch <code>KeyboardInterrupt</code>, <code>SystemExit</code> and stuff like that, which are derived directly from <code>exceptions.BaseException</code>, not <code>exceptions.Exception</code>.<br/> See documentation for details:</p>\u000a\u000a<ul>\u000a<li>try statement &mdash; <a href="http://docs.python.org/reference/compound_stmts.html#try" rel="noreferrer">http://docs.python.org/reference/compound_stmts.html#try</a></li>\u000a<li>exceptions &mdash; <a href="http://docs.python.org/library/exceptions" rel="noreferrer">http://docs.python.org/library/exceptions</a></li>\u000a</ul>\u000a
p2087
sVquestion_id
p2088
I730764
sVlast_activity_date
p2089
I1239208669
sVcreation_date
p2090
I1239207910
sVscore
p2091
I664
sVowner
p2092
(dp2093
Vuser_id
p2094
I60711
sVprofile_image
p2095
Vhttps://www.gravatar.com/avatar/0b4fa970be41e2286c39f5b0167e6d9d?s=128&d=identicon&r=PG
p2096
sVuser_type
p2097
Vregistered
p2098
sVreputation
p2099
I80752
sVlink
p2100
Vhttp://stackoverflow.com/users/60711/vartec
p2101
sVaccept_rate
p2102
I82
sVdisplay_name
p2103
Vvartec
p2104
ssVis_accepted
p2105
I01
sVlast_edit_date
p2106
I1239208669
sVanswer_id
p2107
I730778
sa(dp2108
Vbody
p2109
V<pre><code>import shutil\u000a\u000ashutil.rmtree('/folder_name')\u000a</code></pre>\u000a\u000a<p><a href="http://docs.python.org/library/shutil.html#shutil.rmtree" rel="noreferrer">Standard Library Reference: shutil.rmtree</a>.</p>\u000a
p2110
sVquestion_id
p2111
I303200
sVlast_activity_date
p2112
I1227126196
sVcreation_date
p2113
I1227126196
sVscore
p2114
I878
sVowner
p2115
(dp2116
Vuser_id
p2117
I11549
sVprofile_image
p2118
Vhttps://www.gravatar.com/avatar/87719853dc06836b007091f08ed57568?s=128&d=identicon&r=PG
p2119
sVuser_type
p2120
Vregistered
p2121
sVreputation
p2122
I32310
sVlink
p2123
Vhttp://stackoverflow.com/users/11549/ddaa
p2124
sVdisplay_name
p2125
Vddaa
p2126
ssVis_accepted
p2127
I01
sVanswer_id
p2128
I303225
sa(dp2129
Vbody
p2130
V<p>Python, being a byte-code-compiled interpreted language, is very difficult to lock down.  Even if you use a exe-packager like <a href="http://py2exe.org" rel="noreferrer">py2exe</a>, the layout of the executable is well-known, and the Python byte-codes are well understood.</p>\u000a\u000a<p>Usually in cases like this, you have to make a tradeoff.  How important is it really to protect the code?  Are there real secrets in there (such as a key for symmetric encryption of bank transfers), or are you just being paranoid?  Choose the language that lets you develop the best product quickest, and be realistic about how valuable your novel ideas are.</p>\u000a\u000a<p>If you decide you really need to enforce the license check securely, write it as a small C extension so that the license check code can be extra-hard (but not impossible!) to reverse engineer, and leave the bulk of your code in Python.</p>\u000a
p2131
sVquestion_id
p2132
I261638
sVlast_activity_date
p2133
I1225800034
sVcreation_date
p2134
I1225800034
sVscore
p2135
I290
sVowner
p2136
(dp2137
Vuser_id
p2138
I14343
sVprofile_image
p2139
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p2140
sVuser_type
p2141
Vregistered
p2142
sVreputation
p2143
I193903
sVlink
p2144
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p2145
sVaccept_rate
p2146
I80
sVdisplay_name
p2147
VNed Batchelder
p2148
ssVis_accepted
p2149
I01
sVanswer_id
p2150
I261645
sa(dp2151
Vbody
p2152
V<p>Doesn't too much matter.  Whatever makes you happy will work.  There aren't a lot of silly rules because Python projects can be simple.</p>\u000a\u000a<ul>\u000a<li><code>/scripts</code> or <code>/bin</code> for that kind of command-line interface stuff</li>\u000a<li><code>/tests</code> for your tests</li>\u000a<li><code>/lib</code> for your C-language libraries</li>\u000a<li><code>/doc</code> for most documentation</li>\u000a<li><code>/apidoc</code> for the Epydoc-generated API docs.</li>\u000a</ul>\u000a\u000a<p>And the top-level directory can contain README's, Config's and whatnot.</p>\u000a\u000a<p>The hard choice is whether or not to use a <code>/src</code> tree.  Python doesn't have a distinction between <code>/src</code>, <code>/lib</code>, and <code>/bin</code> like Java or C has.</p>\u000a\u000a<p>Since a top-level <code>/src</code> directory is seen by some as meaningless, your top-level directory can be the top-level architecture of your application.</p>\u000a\u000a<ul>\u000a<li><code>/foo</code></li>\u000a<li><code>/bar</code></li>\u000a<li><code>/baz</code></li>\u000a</ul>\u000a\u000a<p>I recommend putting all of this under the "name-of-my-product" directory.  So, if you're writing an application named <code>quux</code>, the directory that contains all this stuff is named  <code>/quux</code>.</p>\u000a\u000a<p>Another project's <code>PYTHONPATH</code>, then, can include <code>/path/to/quux/foo</code> to reuse the <code>QUUX.foo</code> module.  </p>\u000a\u000a<p>In my case, since I use Komodo Edit, my IDE cuft is a single .KPF file.  I actually put that in the top-level <code>/quux</code> directory, and omit adding it to SVN.</p>\u000a
p2153
sVquestion_id
p2154
I193161
sVlast_activity_date
p2155
I1223689391
sVcreation_date
p2156
I1223676220
sVscore
p2157
I235
sVowner
p2158
(dp2159
Vuser_id
p2160
I10661
sVprofile_image
p2161
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p2162
sVuser_type
p2163
Vregistered
p2164
sVreputation
p2165
I277525
sVlink
p2166
Vhttp://stackoverflow.com/users/10661/s-lott
p2167
sVaccept_rate
p2168
I92
sVdisplay_name
p2169
VS.Lott
p2170
ssVis_accepted
p2171
I01
sVlast_edit_date
p2172
I1223689391
sVanswer_id
p2173
I193181
sasVquota_max
p2174
I300
sVquota_remaining
p2175
I247
s.