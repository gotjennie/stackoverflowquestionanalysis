(dp0
Vhas_more
p1
I01
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>It is generally a bad pattern to kill a thread abruptly, in Python and in any language. Think of the following cases:</p>\u000a\u000a<ul>\u000a<li>the thread is holding a critical resource that must be closed properly</li>\u000a<li>the thread has created several other threads that must be killed as well.</li>\u000a</ul>\u000a\u000a<p>The nice way of handling this if you can afford it (if you are managing your own threads) is to have an exit_request flag that each threads checks on regular interval to see if it is time for him to exit.</p>\u000a\u000a<p><strong>For example:</strong></p>\u000a\u000a<pre><code>import threading\u000a\u000aclass StoppableThread(threading.Thread):\u000a    """Thread class with a stop() method. The thread itself has to check\u000a    regularly for the stopped() condition."""\u000a\u000a    def __init__(self):\u000a        super(StoppableThread, self).__init__()\u000a        self._stop_event = threading.Event()\u000a\u000a    def stop(self):\u000a        self._stop_event.set()\u000a\u000a    def stopped(self):\u000a        return self._stop_event.is_set()\u000a</code></pre>\u000a\u000a<p>In this code, you should call stop() on the thread when you want it to exit, and wait for the thread to exit properly using join(). The thread should check the stop flag at regular intervals.</p>\u000a\u000a<p>There are cases however when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls and you want to interrupt it.</p>\u000a\u000a<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>\u000a\u000a<pre><code>def _async_raise(tid, exctype):\u000a    '''Raises an exception in the threads with id tid'''\u000a    if not inspect.isclass(exctype):\u000a        raise TypeError("Only types can be raised (not instances)")\u000a    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid,\u000a                                                  ctypes.py_object(exctype))\u000a    if res == 0:\u000a        raise ValueError("invalid thread id")\u000a    elif res != 1:\u000a        # "if it returns a number greater than one, you're in trouble,\u000a        # and you should call it again with exc=NULL to revert the effect"\u000a        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)\u000a        raise SystemError("PyThreadState_SetAsyncExc failed")\u000a\u000aclass ThreadWithExc(threading.Thread):\u000a    '''A thread class that supports raising exception in the thread from\u000a       another thread.\u000a    '''\u000a    def _get_my_tid(self):\u000a        """determines this (self's) thread id\u000a\u000a        CAREFUL : this function is executed in the context of the caller\u000a        thread, to get the identity of the thread represented by this\u000a        instance.\u000a        """\u000a        if not self.isAlive():\u000a            raise threading.ThreadError("the thread is not active")\u000a\u000a        # do we have it cached?\u000a        if hasattr(self, "_thread_id"):\u000a            return self._thread_id\u000a\u000a        # no, look for it in the _active dict\u000a        for tid, tobj in threading._active.items():\u000a            if tobj is self:\u000a                self._thread_id = tid\u000a                return tid\u000a\u000a        # TODO: in python 2.6, there's a simpler way to do : self.ident\u000a\u000a        raise AssertionError("could not determine the thread's id")\u000a\u000a    def raiseExc(self, exctype):\u000a        """Raises the given exception type in the context of this thread.\u000a\u000a        If the thread is busy in a system call (time.sleep(),\u000a        socket.accept(), ...), the exception is simply ignored.\u000a\u000a        If you are sure that your exception should terminate the thread,\u000a        one way to ensure that it works is:\u000a\u000a            t = ThreadWithExc( ... )\u000a            ...\u000a            t.raiseExc( SomeException )\u000a            while t.isAlive():\u000a                time.sleep( 0.1 )\u000a                t.raiseExc( SomeException )\u000a\u000a        If the exception is to be caught by the thread, you need a way to\u000a        check that your thread has caught it.\u000a\u000a        CAREFUL : this function is executed in the context of the\u000a        caller thread, to raise an excpetion in the context of the\u000a        thread represented by this instance.\u000a        """\u000a        _async_raise( self._get_my_tid(), exctype )\u000a</code></pre>\u000a\u000a<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>\u000a\u000a<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>\u000a
p6
sVquestion_id
p7
I323972
sVlast_activity_date
p8
I1494360278
sVcreation_date
p9
I1227871194
sVscore
p10
I433
sVowner
p11
(dp12
Vuser_id
p13
I13618
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/d55ed903bf7989796c0db26fc007b09f?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I6947
sVlink
p19
Vhttp://stackoverflow.com/users/13618/philippe-f
p20
sVaccept_rate
p21
I50
sVdisplay_name
p22
VPhilippe F
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1494360278
sVanswer_id
p26
I325528
sa(dp27
Vbody
p28
V<p>You can make use of the <a href="https://www.python.org/dev/peps/pep-0322/" rel="noreferrer"><code>reversed</code></a> function for this as:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; array=[0,10,20,40]\u000a&gt;&gt;&gt; for i in reversed(array):\u000a...     print i\u000a</code></pre>\u000a\u000a<p>Note that <code>reversed(...)</code> does not return a list. You can get a reversed list using <code>list(reversed(array))</code>.</p>\u000a
p29
sVquestion_id
p30
I3940128
sVlast_activity_date
p31
I1493944219
sVcreation_date
p32
I1287126140
sVscore
p33
I592
sVowner
p34
(dp35
Vuser_id
p36
I227665
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/ccc83a013527c186c03ea3a475552813?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I279940
sVlink
p42
Vhttp://stackoverflow.com/users/227665/codaddict
p43
sVaccept_rate
p44
I33
sVdisplay_name
p45
Vcodaddict
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1493944219
sVanswer_id
p49
I3940144
sa(dp50
Vbody
p51
V<p>You are really mixing together two different things.</p>\u000a\u000a<p>Use <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer"><code>dir()</code></a>, <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code></a> or the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module to get what you are interested in (I use <code>__builtins__</code> as an example; you can use any object instead).</p>\u000a\u000a<pre><code>&gt;&gt;&gt; l = dir(__builtins__)\u000a&gt;&gt;&gt; d = __builtins__.__dict__\u000a</code></pre>\u000a\u000a<p>Print that dictionary however fancy you like:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print l\u000a['ArithmeticError', 'AssertionError', 'AttributeError',...\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from pprint import pprint\u000a&gt;&gt;&gt; pprint(l)\u000a['ArithmeticError',\u000a 'AssertionError',\u000a 'AttributeError',\u000a 'BaseException',\u000a 'DeprecationWarning',\u000a...\u000a\u000a&gt;&gt;&gt; pprint(d, indent=2)\u000a{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,\u000a  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,\u000a  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,\u000a...\u000a  '_': [ 'ArithmeticError',\u000a         'AssertionError',\u000a         'AttributeError',\u000a         'BaseException',\u000a         'DeprecationWarning',\u000a...\u000a</code></pre>\u000a\u000a<p>Pretty printing is also available in the interactive debugger as a command:</p>\u000a\u000a<pre><code>(Pdb) pp vars()\u000a{'__builtins__': {'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,\u000a                  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,\u000a                  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,\u000a                  'BaseException': &lt;type 'exceptions.BaseException'&gt;,\u000a                  'BufferError': &lt;type 'exceptions.BufferError'&gt;,\u000a                  ...\u000a                  'zip': &lt;built-in function zip&gt;},\u000a '__file__': 'pass.py',\u000a '__name__': '__main__'}\u000a</code></pre>\u000a
p52
sVquestion_id
p53
I192109
sVlast_activity_date
p54
I1493906676
sVcreation_date
p55
I1223659626
sVscore
p56
I303
sVowner
p57
(dp58
Vuser_id
p59
I3850
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/0c6524ce20ccace7c2f65e31e7f52ba7?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I23707
sVlink
p65
Vhttp://stackoverflow.com/users/3850/hop
p66
sVdisplay_name
p67
Vhop
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1493906676
sVanswer_id
p71
I192365
sa(dp72
Vbody
p73
V<ol>\u000a<li>PyPy, as others have been quick to mention, has <strong>tenuous support for C extensions</strong>. It <em>has</em> support, but typically at slower-than-Python speeds and it's iffy at best. Hence a lot of modules simply <em>require</em> CPython. Cython and Numpy are <em>awesome</em> for numerics, and most people who actually need speed in Python are using those (+ Pandas, SciPy, etc.) heavily. Since they're either non-existent or tenuously supported and slow <strong>the people who need a fast Python often are better off with CPython both for speed and ease-of-use</strong>.</li>\u000a<li>Python 3 support <strike>is experimental at the moment.</strike> <strong>has just reached stable! As of 20th June 2014, <a href="http://morepypy.blogspot.co.uk/2014/06/pypy3-231-fulcrum.html" rel="noreferrer">PyPy3 2.3.1 - Fulcrum is out</a>!</strong></li>\u000a<li>PyPy sometimes <em>isn't</em> actually faster for "scripts", which a lot of people use Python for. These are the short-running programs that do something simple and small. Because PyPy is a JIT compiler its main advantages come from long run times and simple types (such as numbers). Frankly, <strong>PyPy's pre-JIT speeds are pretty bad</strong> compared to CPython.</li>\u000a<li><strong>Inertia</strong>. Moving to PyPy often requires retooling, which for some people and organizations is simply too much work.</li>\u000a</ol>\u000a\u000a<p>Those are the main reasons that affect me, I'd say.</p>\u000a\u000a<blockquote>\u000a  <p><strong>NOTE:</strong> This question is ancient! Avoid drawing conclusions from out-of-date information.</p>\u000a</blockquote>\u000a
p74
sVquestion_id
p75
I18946662
sVlast_activity_date
p76
I1492911847
sVcreation_date
p77
I1379871636
sVscore
p78
I566
sVowner
p79
(dp80
Vuser_id
p81
I1763356
sVprofile_image
p82
Vhttps://i.stack.imgur.com/zGWG9.png?s=128&g=1
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I31527
sVlink
p87
Vhttp://stackoverflow.com/users/1763356/veedrac
p88
sVaccept_rate
p89
I79
sVdisplay_name
p90
VVeedrac
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1492911847
sVanswer_id
p94
I18946824
sa(dp95
Vbody
p96
V<p>The answer to this question depends on the version of Python you're using. The simplest approach is to use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="noreferrer"><code>subprocess.check_output</code></a> function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; subprocess.check_output(['ls', '-l'])\u000ab'total 0\u005cn-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\u005cn'\u000a</code></pre>\u000a\u000a<p><code>check_output</code> runs a single program that takes only arguments as input.<sup>1</sup> It returns the result exactly as printed to <code>stdout</code>. If you need to write input to <code>stdin</code>, skip ahead to the <code>run</code> or <code>Popen</code> sections. If you want to execute complex shell commands, see the note on <code>shell=True</code> at the end of this answer.</p>\u000a\u000a<p>The <code>check_output</code> function works on almost all versions of Python still in wide use (2.7+).<sup>2</sup> But for more recent versions, it is no longer the recommended approach.</p>\u000a\u000a<h3>Modern versions of Python (3.5 or higher): <code>run</code></h3>\u000a\u000a<p>If you're using <strong>Python 3.5</strong> or higher, and <strong>do not need backwards compatibility</strong>, the <a href="https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module" rel="noreferrer">new <code>run</code> function</a> is recommended. It provides a very general, high-level API for the <code>subprocess</code> module. To capture the output of a program, pass the <code>subprocess.PIPE</code> flag to the <code>stdout</code> keyword argument. Then access the <code>stdout</code> attribute of the returned <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess" rel="noreferrer"><code>CompletedProcess</code></a> object:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import subprocess\u000a&gt;&gt;&gt; result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)\u000a&gt;&gt;&gt; result.stdout\u000ab'total 0\u005cn-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\u005cn'\u000a</code></pre>\u000a\u000a<p>The return value is a <code>bytes</code> object, so if you want a proper string, you'll need to <code>decode</code> it. Assuming the called process returns a UTF-8-encoded string:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; result.stdout.decode('utf-8')\u000a'total 0\u005cn-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\u005cn'\u000a</code></pre>\u000a\u000a<p>This can all be compressed to a one-liner:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')\u000a'total 0\u005cn-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\u005cn'\u000a</code></pre>\u000a\u000a<p>If you want to pass input to the process's <code>stdin</code>, pass a <code>bytes</code> object to the <code>input</code> keyword argument:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']\u000a&gt;&gt;&gt; input = 'foo\u005cnfoofoo\u005cn'.encode('utf-8')\u000a&gt;&gt;&gt; result = subprocess.run(cmd, stdout=subprocess.PIPE, input=input)\u000a&gt;&gt;&gt; result.stdout.decode('utf-8')\u000a'foofoo\u005cn'\u000a</code></pre>\u000a\u000a<p>You can capture errors by passing <code>stderr=subprocess.PIPE</code> (capture to <code>result.stderr</code>) or <code>stderr=subprocess.STDOUT</code> (capture to <code>result.stdout</code> along with regular output). When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\u000a\u000a<p>This adds just a bit of complexity, compared to the old way of doing things. But I think it's worth the payoff: now you can do almost anything you need to do with the <code>run</code> function alone.</p>\u000a\u000a<h3>Older versions of Python (2.7-3.4): <code>check_output</code></h3>\u000a\u000a<p>If you are using an older version of Python, or need modest backwards compatibility, you can probably use the <code>check_output</code> function as briefly described above. It has been available since Python 2.7.</p>\u000a\u000a<pre><code>subprocess.check_output(*popenargs, **kwargs)  \u000a</code></pre>\u000a\u000a<p>It takes takes the same arguments as <code>Popen</code> (see below), and returns a string containing the program's output. The beginning of this answer has a more detailed usage example. </p>\u000a\u000a<p>You can pass <code>stderr=subprocess.STDOUT</code> to ensure that error messages are included in the returned output -- but don't pass <code>stderr=subprocess.PIPE</code> to <code>check_output</code>. It can cause <a href="http://docs.python.org/library/subprocess.html#subprocess.check_output" rel="noreferrer">deadlocks</a>. When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\u000a\u000a<p>If you need to pipe from <code>stderr</code> or pass input to the process, <code>check_output</code> won't be up to the task. See the <code>Popen</code> examples below in that case. </p>\u000a\u000a<h3>Complex applications &amp; legacy versions of Python (2.6 and below): <code>Popen</code></h3>\u000a\u000a<p>If you need deep backwards compatibility, or if you need more sophisticated functionality than <code>check_output</code> provides, you'll have to work directly with <code>Popen</code> objects, which encapsulate the low-level API for subprocesses. </p>\u000a\u000a<p>The <code>Popen</code> constructor accepts either <strong>a single command</strong> without arguments, or <strong>a list</strong> containing a command as its first item, followed by any number of arguments, each as a separate item in the list. <a href="https://docs.python.org/3/library/shlex.html" rel="noreferrer"><code>shlex.split</code></a> can help parse strings into appropriately formatted lists. <code>Popen</code> objects also accept a <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="noreferrer">host of different arguments</a> for process IO management and low-level configuration. </p>\u000a\u000a<p>To send input and capture output, <code>communicate</code> is almost always the preferred method. As in:</p>\u000a\u000a<pre><code>output = subprocess.Popen(["mycmd", "myarg"], \u000a                          stdout=subprocess.PIPE).communicate()[0]\u000a</code></pre>\u000a\u000a<p>Or </p>\u000a\u000a<pre><code>&gt;&gt;&gt; import subprocess\u000a&gt;&gt;&gt; p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, \u000a...                                    stderr=subprocess.PIPE)\u000a&gt;&gt;&gt; out, err = p.communicate()\u000a&gt;&gt;&gt; print out\u000a.\u000a..\u000afoo\u000a</code></pre>\u000a\u000a<p>If you set <code>stdin=PIPE</code>, <code>communicate</code> also allows you to pass data to the process via <code>stdin</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']\u000a&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE,\u000a...                           stderr=subprocess.PIPE,\u000a...                           stdin=subprocess.PIPE)\u000a&gt;&gt;&gt; out, err = p.communicate('foo\u005cnfoofoo\u005cn')\u000a&gt;&gt;&gt; print out\u000afoofoo\u000a</code></pre>\u000a\u000a<p>Note <a href="http://stackoverflow.com/a/21867841/577088">Aaron Hall's answer</a>, which indicates that on some systems, you may need to set <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> all to <code>PIPE</code> (or <code>DEVNULL</code>) to get <code>communicate</code> to work at all.</p>\u000a\u000a<p>In some rare cases, you may need complex, real-time output capturing. <a href="http://stackoverflow.com/a/4760274/577088">Vartec</a>'s answer suggests a way forward, but methods other than <code>communicate</code> are prone to deadlocks if not used carefully.</p>\u000a\u000a<p>As with all the above functions, when security is not a concern, you can run more complex shell commands by passing <code>shell=True</code>.</p>\u000a\u000a<h3>Notes</h3>\u000a\u000a<p><strong>1. Running shell commands: the <code>shell=True</code> argument</strong></p>\u000a\u000a<p>Normally, each call to <code>run</code>, <code>check_output</code>, or the <code>Popen</code> constructor executes a <em>single program</em>. That means no fancy bash-style pipes. If you want to run complex shell commands, you can pass <code>shell=True</code>, which all three functions support.</p>\u000a\u000a<p>However, doing so raises <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="noreferrer">security concerns</a>. If you're doing anything more than light scripting, you might be better off calling each process separately, and passing the output from each as an input to the next, via</p>\u000a\u000a<pre><code>run(cmd, [stdout=etc...], input=other_output)\u000a</code></pre>\u000a\u000a<p>Or</p>\u000a\u000a<pre><code>Popen(cmd, [stdout=etc...]).communicate(other_output)\u000a</code></pre>\u000a\u000a<p>The temptation to directly connect pipes is strong; resist it. Otherwise, you'll likely see deadlocks or have to do hacky things like <a href="http://stackoverflow.com/questions/6341451/piping-together-several-subprocesses">this</a>.</p>\u000a\u000a<p><strong>2. Unicode considerations</strong></p>\u000a\u000a<p><code>check_output</code> returns a string in Python 2, but a <code>bytes</code> object in Python 3. It's worth taking a moment to <a href="https://docs.python.org/3/howto/unicode.html" rel="noreferrer">learn about unicode</a> if you haven't already.</p>\u000a
p97
sVquestion_id
p98
I4760215
sVlast_activity_date
p99
I1492288731
sVcreation_date
p100
I1295623672
sVscore
p101
I428
sVowner
p102
(dp103
Vuser_id
p104
I577088
sVprofile_image
p105
Vhttps://i.stack.imgur.com/5UZyo.jpg?s=128&g=1
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I67830
sVlink
p110
Vhttp://stackoverflow.com/users/577088/senderle
p111
sVdisplay_name
p112
Vsenderle
p113
ssVis_accepted
p114
I01
sVlast_edit_date
p115
I1492288731
sVanswer_id
p116
I4760517
sa(dp117
Vbody
p118
V<p><strong>Without</strong> the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:</p>\u000a\u000a<pre><code>x = int("deadbeef", 16)\u000a</code></pre>\u000a\u000a<p><strong>With</strong> the 0x prefix, Python can distinguish hex and decimal automatically.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print int("0xdeadbeef", 0)\u000a3735928559\u000a&gt;&gt;&gt; print int("10", 0)\u000a10\u000a</code></pre>\u000a\u000a<p>(You <em>must</em> specify <code>0</code> as the base in order to invoke this prefix-guessing behavior; omitting the second parameter means to assume base-10.)</p>\u000a
p119
sVquestion_id
p120
I209513
sVlast_activity_date
p121
I1491956479
sVcreation_date
p122
I1224178672
sVscore
p123
I657
sVowner
p124
(dp125
Vuser_id
p126
I20789
sVprofile_image
p127
Vhttps://www.gravatar.com/avatar/a913ff1821be75c981d066f685816ed9?s=128&d=identicon&r=PG
p128
sVuser_type
p129
Vregistered
p130
sVreputation
p131
I36282
sVlink
p132
Vhttp://stackoverflow.com/users/20789/dan-lenski
p133
sVaccept_rate
p134
I71
sVdisplay_name
p135
VDan Lenski
p136
ssVis_accepted
p137
I01
sVlast_edit_date
p138
I1491956479
sVanswer_id
p139
I209550
sa(dp140
Vbody
p141
V<p>Just use the -p flag when creating your virtualenv instance to specify the Python executable you want to use, e.g.:</p>\u000a\u000a<pre><code>virtualenv -p /usr/bin/python2.6 &lt;path/to/new/virtualenv/&gt;\u000a</code></pre>\u000a\u000a<p>N.B. For <strong>Python 3.6</strong> or later, refer to The Aelfinn's <a href="http://stackoverflow.com/a/39713544/1450294">answer</a> below. <em>[Editor's note: I know this should normally be a comment, not an edit, but a new comment would be hidden, and I just spent 45 minutes untangling errors because this important answer was buried under three or four parrot answers. I'm just trying to save everyone time here.]</em></p>\u000a
p142
sVquestion_id
p143
I1534210
sVlast_activity_date
p144
I1490975556
sVcreation_date
p145
I1254951192
sVscore
p146
I884
sVowner
p147
(dp148
Vuser_id
p149
I104349
sVprofile_image
p150
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p151
sVuser_type
p152
Vregistered
p153
sVreputation
p154
I356472
sVlink
p155
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p156
sVaccept_rate
p157
I86
sVdisplay_name
p158
VDaniel Roseman
p159
ssVis_accepted
p160
I01
sVlast_edit_date
p161
I1490975556
sVanswer_id
p162
I1534343
sa(dp163
Vbody
p164
V<p>It's a list of public objects of that module, as interpreted by <code>import *</code>. It overrides the default of hiding everything that begins with an underscore.</p>\u000a
p165
sVquestion_id
p166
I44834
sVlast_activity_date
p167
I1488988212
sVcreation_date
p168
I1220563846
sVscore
p169
I227
sVowner
p170
(dp171
Vuser_id
p172
I4435
sVprofile_image
p173
Vhttps://www.gravatar.com/avatar/67f11df8aec61f878051a101032c6b2d?s=128&d=identicon&r=PG
p174
sVuser_type
p175
Vregistered
p176
sVreputation
p177
I54373
sVlink
p178
Vhttp://stackoverflow.com/users/4435/jimmy
p179
sVaccept_rate
p180
I95
sVdisplay_name
p181
VJimmy
p182
ssVis_accepted
p183
I01
sVlast_edit_date
p184
I1488988212
sVanswer_id
p185
I44842
sa(dp186
Vbody
p187
V<p>Like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; keys = ['a', 'b', 'c']\u000a&gt;&gt;&gt; values = [1, 2, 3]\u000a&gt;&gt;&gt; dictionary = dict(zip(keys, values))\u000a&gt;&gt;&gt; print(dictionary)\u000a{'a': 1, 'b': 2, 'c': 3}\u000a</code></pre>\u000a\u000a<p>Voila :-)  The pairwise dict constructor and zip function are awesomely useful: <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="noreferrer">https://docs.python.org/3/library/functions.html#func-dict</a></p>\u000a
p188
sVquestion_id
p189
I209840
sVlast_activity_date
p190
I1486253419
sVcreation_date
p191
I1224184145
sVscore
p192
I937
sVowner
p193
(dp194
Vuser_id
p195
I20789
sVprofile_image
p196
Vhttps://www.gravatar.com/avatar/a913ff1821be75c981d066f685816ed9?s=128&d=identicon&r=PG
p197
sVuser_type
p198
Vregistered
p199
sVreputation
p200
I36282
sVlink
p201
Vhttp://stackoverflow.com/users/20789/dan-lenski
p202
sVaccept_rate
p203
I71
sVdisplay_name
p204
VDan Lenski
p205
ssVis_accepted
p206
I01
sVlast_edit_date
p207
I1486253419
sVanswer_id
p208
I209854
sa(dp209
Vbody
p210
V<p>Are you talking about multi-line strings? Easy, use triple quotes to start and end them.</p>\u000a\u000a<pre><code>s = """ this is a very\u000a        long string if I had the\u000a        energy to type more and more ..."""\u000a</code></pre>\u000a\u000a<p>You can use single quotes too (3 of them of course at start and end) and treat the resulting string <code>s</code> just like any other string.</p>\u000a\u000a<p><strong>NOTE</strong>: Just as with any string, anything between the starting and ending quotes becomes part of the string, so this example has a leading blank (as pointed out by @root45). This string will also contain both blanks and newlines.</p>\u000a\u000a<p>I.e.,:</p>\u000a\u000a<pre><code>' this is a very\u005cn        long string if I had the\u005cn        energy to type more and more ...'\u000a</code></pre>\u000a\u000a<p>Finally, one can also construct long lines in Python like this:</p>\u000a\u000a<pre><code> s = ("this is a very"\u000a      "long string too"\u000a      "for sure ..."\u000a     )\u000a</code></pre>\u000a\u000a<p>which will <strong>not</strong> include any extra blanks or newlines (this is a deliberate example showing what the effect of skipping blanks will result in):</p>\u000a\u000a<pre><code>'this is a verylong string toofor sure ...'\u000a</code></pre>\u000a\u000a<p>No commas required, simply place the strings to be joined together into a pair of parenthesis and be sure to account for any needed blanks and newlines.</p>\u000a
p211
sVquestion_id
p212
I10660435
sVlast_activity_date
p213
I1485867284
sVcreation_date
p214
I1337379774
sVscore
p215
I850
sVowner
p216
(dp217
Vuser_id
p218
I1209279
sVprofile_image
p219
Vhttps://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=128&d=identicon&r=PG
p220
sVuser_type
p221
Vregistered
p222
sVreputation
p223
I60849
sVlink
p224
Vhttp://stackoverflow.com/users/1209279/levon
p225
sVaccept_rate
p226
I91
sVdisplay_name
p227
VLevon
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1485867284
sVanswer_id
p231
I10660443
sa(dp232
Vbody
p233
V<p>This works for me:</p>\u000a\u000a<pre><code>$ pip install -r requirements.txt --no-index --find-links file:///tmp/packages\u000a</code></pre>\u000a\u000a<p><code>--no-index</code> - Ignore package index (only looking at <code>--find-links</code> URLs instead). </p>\u000a\u000a<p><code>-f, --find-links &lt;URL&gt;</code> - If a URL or path to an html file, then parse for links to archives. \u000aIf a local path or <code>file://</code> URL that's a directory, then look for archives in the directory listing.</p>\u000a
p234
sVquestion_id
p235
I7225900
sVlast_activity_date
p236
I1485427524
sVcreation_date
p237
I1336039479
sVscore
p238
I215
sVowner
p239
(dp240
Vuser_id
p241
I3571
sVprofile_image
p242
Vhttps://www.gravatar.com/avatar/b1d6ed6863a3b4aab3565f1f9625f156?s=128&d=identicon&r=PG
p243
sVuser_type
p244
Vregistered
p245
sVreputation
p246
I58052
sVlink
p247
Vhttp://stackoverflow.com/users/3571/codeape
p248
sVaccept_rate
p249
I56
sVdisplay_name
p250
Vcodeape
p251
ssVis_accepted
p252
I01
sVlast_edit_date
p253
I1485427524
sVanswer_id
p254
I10429168
sa(dp255
Vbody
p256
V<p>From <a href="http://mail.python.org/pipermail/python-win32/2005-April/003100.html" rel="noreferrer">here</a>:</p>\u000a\u000a<blockquote>\u000a  <p>function ord() would get the int value\u000a  of the char. And in case you want to\u000a  convert back after playing with the\u000a  number, function chr() does the trick.</p>\u000a</blockquote>\u000a\u000a<pre><code>&gt;&gt;&gt; ord('a')\u000a97\u000a&gt;&gt;&gt; chr(97)\u000a'a'\u000a&gt;&gt;&gt; chr(ord('a') + 3)\u000a'd'\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a\u000a<p>In Python 2, there is also the <code>unichr</code> function, returning the <a href="http://en.wikipedia.org/wiki/Unicode" rel="noreferrer">Unicode</a> character whose ordinal is the <code>unichr</code> argument:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; unichr(97)\u000au'a'\u000a&gt;&gt;&gt; unichr(1234)\u000au'\u005cu04d2'\u000a</code></pre>\u000a\u000a<p>In Python 3 you can use <code>chr</code> instead of <code>unichr</code>.</p>\u000a
p257
sVquestion_id
p258
I227459
sVlast_activity_date
p259
I1485252675
sVcreation_date
p260
I1224708184
sVscore
p261
I799
sVowner
p262
(dp263
Vuser_id
p264
I18528
sVprofile_image
p265
Vhttps://www.gravatar.com/avatar/2c638d6bdc75ffd5dbf06a1053779104?s=128&d=identicon&r=PG
p266
sVuser_type
p267
Vregistered
p268
sVreputation
p269
I25674
sVlink
p270
Vhttp://stackoverflow.com/users/18528/matt-j
p271
sVdisplay_name
p272
VMatt J
p273
ssVis_accepted
p274
I01
sVlast_edit_date
p275
I1485252675
sVanswer_id
p276
I227472
sa(dp277
Vbody
p278
V<ol>\u000a<li><p>Checking for <code>__iter__</code> works on sequence types, but it would fail on e.g. strings <strong>in Python 2</strong>. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too):</p>\u000a\u000a<pre><code>try:\u000a    some_object_iterator = iter(some_object)\u000aexcept TypeError, te:\u000a    print some_object, 'is not iterable'\u000a</code></pre>\u000a\u000a<p>The <code>iter</code> built-in checks for the <code>__iter__</code> method or in the case of strings the <code>__getitem__</code> method. <strong>In Python 2</strong>, to check if an object is "list like" and not "string like" then the key is the attributes <code>__getitem__</code> and <code>__iter__</code>:</p>\u000a\u000a<blockquote>\u000a<pre><code> In [9]: hasattr([1,2,3,4], '__iter__')\u000a Out[9]: True\u000a In [11]: hasattr((1,2,3,4), '__iter__')\u000a Out[11]: True\u000a In [12]: hasattr(u"hello", '__iter__')\u000a Out[12]: False\u000a In [14]: hasattr(u"hello", '__getitem__')\u000a Out[14]: True\u000a</code></pre>\u000a</blockquote></li>\u000a<li><p>Another general pythonic approach is to assume an iterable, then fail gracefully if it does not work on the given object. The Python glossary:</p>\u000a\u000a<blockquote>\u000a  <p>Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object ("If it looks like a <strong>duck</strong> and quacks like a <strong>duck</strong>, it must be a <strong>duck</strong>.") By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). <strong>Instead, it typically employs the EAFP (Easier to Ask Forgiveness than Permission) style of programming.</strong></p>\u000a  \u000a  <p>...</p>\u000a\u000a<pre><code>try:\u000a   _ = (e for e in my_object)\u000aexcept TypeError:\u000a   print my_object, 'is not iterable'\u000a</code></pre>\u000a</blockquote></li>\u000a<li><p>The <a href="http://docs.python.org/library/collections.html#abcs-abstract-base-classes" rel="noreferrer"><code>collections</code></a> module provides some abstract base classes, which allow to ask classes or instances if they provide particular functionality, for example:</p>\u000a\u000a<pre><code>import collections\u000a\u000aif isinstance(e, collections.Iterable):\u000a    # e is iterable\u000a</code></pre></li>\u000a</ol>\u000a\u000a<hr>\u000a\u000a<p><strong>NB:</strong> generic behavior changed in Python 3 (strings <em>are</em> now iterable), so be careful if you want to use <code>iter</code> to differentiate between types.\u000aSee <a href="http://stackoverflow.com/questions/1055360/how-to-tell-a-variable-is-iterable-but-not-a-string">"iterable but not string"</a> for details.</p>\u000a
p279
sVquestion_id
p280
I1952464
sVlast_activity_date
p281
I1484934332
sVcreation_date
p282
I1261570603
sVscore
p283
I525
sVowner
p284
(dp285
Vuser_id
p286
I89391
sVprofile_image
p287
Vhttps://www.gravatar.com/avatar/bb5230985aa2c9ea7d022d1a16890f16?s=128&d=identicon&r=PG
p288
sVuser_type
p289
Vregistered
p290
sVreputation
p291
I104450
sVlink
p292
Vhttp://stackoverflow.com/users/89391/miku
p293
sVaccept_rate
p294
I78
sVdisplay_name
p295
Vmiku
p296
ssVis_accepted
p297
I01
sVlast_edit_date
p298
I1484934332
sVanswer_id
p299
I1952481
sa(dp300
Vbody
p301
V<p>As of January 2017, all of the other answers to this question are at least two years out-of-date. When you come across advice on Python packaging issues, remember to look at the date of publication, and don't trust out-of-date information.</p>\u000a\u000a<p>The <a href="https://packaging.python.org/">Python Packaging User Guide</a> is worth a read. Every page has a "last reviewed" date displayed, so you can check the recency of the manual, and it's quite comprehensive. The fact that it's hosted on a subdomain of python.org of the Python Software Foundation just adds credence to it. The <a href="https://packaging.python.org/key_projects/">Project Summaries</a> page is especially relevant here.</p>\u000a\u000a<h2>Summary of tools:</h2>\u000a\u000a<p>Here's a summary of the Python packaging landscape in January 2017:</p>\u000a\u000a<h3>Supported tools:</h3>\u000a\u000a<ul>\u000a<li><p><strong>Distutils</strong> is still the standard tool for packaging in Python. It is included in the standard library (Python 2 and Python 3.0 to 3.6). It is useful for simple Python distributions, but lacks features. It introduces the <code>distutils</code> Python package that can be imported in your <code>setup.py</code> script.</p>\u000a\u000a<ul>\u000a<li><sub><a href="https://docs.python.org/3/library/distutils.html">Official docs</a> | <a href="https://packaging.python.org/key_projects/#distutils"><code>distutils</code> section of Python Package User Guide</a></sub></li>\u000a</ul></li>\u000a<li><p><strong>Setuptools</strong> was developed to overcome Distutils' limitations, and is not included in the standard library. It introduced a command-line utility called <code>easy_install</code>. It also introduced the <code>setuptools</code> Python package that can be imported in your <code>setup.py</code> script, and the <code>pkg_resources</code> Python package that can be imported in your code to locate data files installed with a distribution. One of its gotchas is that it monkey-patches the <code>distutils</code> Python package. It should work well with <code>pip</code>. <a href="https://github.com/pypa/setuptools/releases">It sees regular releases.</a></p>\u000a\u000a<ul>\u000a<li><sub><a href="https://setuptools.readthedocs.io/en/latest/">Official docs</a> | <a href="https://pypi.python.org/pypi/setuptools">Pypi page</a> | <a href="https://github.com/pypa/setuptools">GitHub repo</a> | <a href="https://packaging.python.org/key_projects/#setuptools"><code>setuptools</code> section of Python Package User Guide</a></sub></li>\u000a</ul></li>\u000a</ul>\u000a\u000a<h3>Deprecated/abandoned tools:</h3>\u000a\u000a<ul>\u000a<li><p><strong>Distribute</strong> was a fork of Setuptools. It shared the same namespace, so if you had Distribute installed, <code>import setuptools</code> would actually import the package distributed with Distribute. <strong><em>Distribute was merged back into Setuptools 0.7</em></strong>, so you don't need to use Distribute any more. In fact, the version on Pypi is just a compatibility layer that installs Setuptools.</p></li>\u000a<li><p><strong>Distutils2</strong> was an attempt to take the best of Distutils, Setuptools and Distribute and become the standard tool included in Python's standard library. The idea was that Distutils2 would be distributed for old Python versions, and that Distutils2 would be renamed to <code>packaging</code> for Python 3.3, which would include it in its standard library. These plans did not go as intended, however, and currently, <strong><em>Distutils2 is an abandoned project</em></strong>. The latest release was in March 2012, and its Pypi home page has finally been updated to reflect its death.</p></li>\u000a</ul>\u000a\u000a<h3>Alpha software:</h3>\u000a\u000a<ul>\u000a<li><p><strong>Distlib</strong> is a tool that aims to implement a subset of the previous tools' functionality, but only functionality that is very well-defined in accepted PEPs. It is one of the tools of the PyPA (Python Package Authority), and it should hopefully be included eventually in the Python standard library someday. <strong><em>It is still considered alpha software, so end-users beware.</em></strong></p>\u000a\u000a<ul>\u000a<li><sub><a href="http://pythonhosted.org/distlib/">Official docs</a> | <a href="https://pypi.python.org/pypi/distlib">Pypi page</a> | <a href="https://bitbucket.org/vinay.sajip/distlib">Bitbucket repo</a> | <a href="https://packaging.python.org/key_projects/#distlib"><code>distlib</code> section of Python Package User Guide</a></sub></li>\u000a</ul></li>\u000a<li><p>There are <a href="https://packaging.python.org/key_projects/">a couple more tools</a> (eg: Bento), but I won't mention them as they are too obscure or niche or early or undeveloped for this answer post, or else they're not direct alternatives.</p></li>\u000a</ul>\u000a\u000a<h2>Recommendation:</h2>\u000a\u000a<p>So in conclusion, out of all these options, <strong>I would recommend Setuptools</strong>, unless your requirements are very basic and you only need Distutils. Setuptools works very well with Virtualenv and Pip, tools that I highly recommend. Virtualenv and Pip could both be considered official, as they're part of PyPA, and Python 3 now ships <a href="https://docs.python.org/3/library/ensurepip.html"><code>ensurepip</code></a> (which helps you install <code>pip</code> on some systems).</p>\u000a\u000a<p>If you're looking into Virtualenv, you might be interested in this question: <a href="http://stackoverflow.com/q/41573587/247696">What is the difference between <code>venv</code>, <code>pyvenv</code>, <code>pyenv</code>, <code>virtualenv</code>, <code>virtualenvwrapper</code>, etc?</a>. (Yes, I know, I groan with you.)</p>\u000a\u000a<p>As a side-note, I recommend using Virtualenv 1.10 or higher, as it is the first release that recognises the Setuptools/Distribute merger, for both Python 2 and 3.</p>\u000a
p302
sVquestion_id
p303
I6344076
sVlast_activity_date
p304
I1484065938
sVcreation_date
p305
I1360247870
sVscore
p306
I708
sVowner
p307
(dp308
Vuser_id
p309
I247696
sVprofile_image
p310
Vhttps://www.gravatar.com/avatar/936383b387d6cc6d51279e429e5d7cd9?s=128&d=identicon&r=PG
p311
sVuser_type
p312
Vregistered
p313
sVreputation
p314
I28704
sVlink
p315
Vhttp://stackoverflow.com/users/247696/flimm
p316
sVaccept_rate
p317
I76
sVdisplay_name
p318
VFlimm
p319
ssVis_accepted
p320
I01
sVlast_edit_date
p321
I1484065938
sVanswer_id
p322
I14753678
sa(dp323
Vbody
p324
V<p>You should use the <code>print()</code> function which is available since Python 2.6+</p>\u000a\u000a<pre><code>from __future__ import print_function  # Only needed for Python 2\u000aprint("hi there", file=f)\u000a</code></pre>\u000a\u000a<p>For Python 3 you don't need the <code>import</code>, since the  <code>print()</code> function is the default.</p>\u000a\u000a<p>The alternative would be to use:</p>\u000a\u000a<pre><code>f = open('myfile', 'w')\u000af.write('hi there\u005cn')  # python will convert \u005cn to os.linesep\u000af.close()  # you can omit in most cases as the destructor will call it\u000a</code></pre>\u000a\u000a<p>Quoting from <a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files">Python documentation</a> regarding newlines:</p>\u000a\u000a<blockquote>\u000a  <p>On output, if newline is None, any <code>'\u005cn'</code> characters written are translated to the system default line separator, <code>os.linesep</code>. If newline is <code>''</code>, no translation takes place. If newline is any of the other legal values, any <code>'\u005cn'</code> characters written are translated to the given string.</p>\u000a</blockquote>\u000a
p325
sVquestion_id
p326
I6159900
sVlast_activity_date
p327
I1483305599
sVcreation_date
p328
I1306561718
sVscore
p329
I758
sVowner
p330
(dp331
Vuser_id
p332
I99834
sVprofile_image
p333
Vhttps://www.gravatar.com/avatar/63c50004c4f6eaf3235b9ea836f4b6cf?s=128&d=identicon&r=PG
p334
sVuser_type
p335
Vregistered
p336
sVreputation
p337
I55292
sVlink
p338
Vhttp://stackoverflow.com/users/99834/sorin
p339
sVaccept_rate
p340
I47
sVdisplay_name
p341
Vsorin
p342
ssVis_accepted
p343
I01
sVlast_edit_date
p344
I1483305599
sVanswer_id
p345
I6159912
sa(dp346
Vbody
p347
V<p>Are you talking about <a href="https://docs.python.org/3.5/tutorial/controlflow.html#lambda-expressions" rel="noreferrer">lambda functions</a>? Like</p>\u000a\u000a<pre><code>lambda x: x**2 + 2*x - 5\u000a</code></pre>\u000a\u000a<p>Those things are actually quite useful.  Python supports a style of programming called <em>functional programming</em> where you can pass functions to other functions to do stuff. Example:</p>\u000a\u000a<pre><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])\u000a</code></pre>\u000a\u000a<p>sets <code>mult3</code> to <code>[3, 6, 9]</code>, those elements of the original list that are multiples of 3. This is shorter (and, one could argue, clearer) than</p>\u000a\u000a<pre><code>def filterfunc(x):\u000a    return x % 3 == 0\u000amult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])\u000a</code></pre>\u000a\u000a<p>Of course, in this particular case, you could do the same thing as a list comprehension:</p>\u000a\u000a<pre><code>mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]\u000a</code></pre>\u000a\u000a<p>(or even as <code>range(3,10,3)</code>), but there are many other, more sophisticated use cases where you can't use a list comprehension and a lambda function may be the shortest way to write something out.</p>\u000a\u000a<ul>\u000a<li><p>Returning a function from another function</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def transform(n):\u000a...     return lambda x: x + n\u000a...\u000a&gt;&gt;&gt; f = transform(3)\u000a&gt;&gt;&gt; f(4)\u000a7\u000a</code></pre>\u000a\u000a<p>This is often used to create function wrappers, such as Python's decorators.</p></li>\u000a<li><p>Combining elements of an iterable sequence with <code>reduce()</code></p>\u000a\u000a<pre><code>&gt;&gt;&gt; reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])\u000a'1, 2, 3, 4, 5, 6, 7, 8, 9'\u000a</code></pre></li>\u000a<li><p>Sorting by an alternate key</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))\u000a[5, 4, 6, 3, 7, 2, 8, 1, 9]\u000a</code></pre></li>\u000a</ul>\u000a\u000a<p>I use lambda functions on a regular basis. It took me a while to get used to them, but eventually I came to understand that they're a very valuable part of the language.</p>\u000a
p348
sVquestion_id
p349
I890128
sVlast_activity_date
p350
I1481023614
sVcreation_date
p351
I1242852730
sVscore
p352
I725
sVowner
p353
(dp354
Vuser_id
p355
I56541
sVprofile_image
p356
Vhttps://i.stack.imgur.com/C6rHm.png?s=128&g=1
p357
sVuser_type
p358
Vregistered
p359
sVreputation
p360
I76967
sVlink
p361
Vhttp://stackoverflow.com/users/56541/david-z
p362
sVaccept_rate
p363
I81
sVdisplay_name
p364
VDavid Z
p365
ssVis_accepted
p366
I01
sVlast_edit_date
p367
I1481023614
sVanswer_id
p368
I890188
sa(dp369
Vbody
p370
V<blockquote>\u000a  <p><a href="https://docs.python.org/2/library/stdtypes.html#str.count" rel="noreferrer">str.count(sub[, start[, end]])</a></p>\u000a  \u000a  <p>Return the number of non-overlapping occurrences of substring <code>sub</code> in the range <code>[start, end]</code>. Optional arguments <code>start</code> and <code>end</code> are interpreted as in slice notation.</p>\u000a</blockquote>\u000a\u000a<pre><code>&gt;&gt;&gt; sentence = 'Mary had a little lamb'\u000a&gt;&gt;&gt; sentence.count('a')\u000a4\u000a</code></pre>\u000a
p371
sVquestion_id
p372
I1155617
sVlast_activity_date
p373
I1480576588
sVcreation_date
p374
I1248120266
sVscore
p375
I747
sVowner
p376
(dp377
Vuser_id
p378
I133867
sVprofile_image
p379
Vhttps://www.gravatar.com/avatar/6e6ab160c951099a0cb3b40fc3121aea?s=128&d=identicon&r=PG
p380
sVuser_type
p381
Vregistered
p382
sVreputation
p383
I8539
sVlink
p384
Vhttp://stackoverflow.com/users/133867/ogre-codes
p385
sVdisplay_name
p386
VOgre Codes
p387
ssVis_accepted
p388
I01
sVlast_edit_date
p389
I1480576588
sVanswer_id
p390
I1155647
sa(dp391
Vbody
p392
V<p>You can reload a module when it has already been imported by using the <a href="https://docs.python.org/2.7/library/functions.html#reload" rel="noreferrer"><code>reload</code></a> builtin function in Python 2:</p>\u000a\u000a<pre><code>import foo\u000a\u000awhile True:\u000a    # Do some things.\u000a    if is_changed(foo):\u000a        foo = reload(foo)\u000a</code></pre>\u000a\u000a<p>In Python 3, <code>reload</code> was moved to the <a href="https://docs.python.org/3.2/library/imp.html" rel="noreferrer"><code>imp</code></a> module. In 3.4, <code>imp</code> was deprecated in favor of <a href="https://docs.python.org/3.4/library/importlib.html" rel="noreferrer"><code>importlib</code></a>, and <code>reload</code> was added to the latter. When targeting 3 or later, either reference the appropriate module when calling <code>reload</code> or import it.</p>\u000a\u000a<p>I think that this is what you want. Web servers like Django's development server use this so that you can see the effects of your code changes without restarting the server process itself.</p>\u000a\u000a<p>To quote from the docs:</p>\u000a\u000a<blockquote>\u000a  <p>Python modules\u2019 code is recompiled and\u000a  the module-level code reexecuted,\u000a  defining a new set of objects which\u000a  are bound to names in the module\u2019s\u000a  dictionary. The init function of\u000a  extension modules is not called a\u000a  second time. As with all other objects\u000a  in Python the old objects are only\u000a  reclaimed after their reference counts\u000a  drop to zero. The names in the module\u000a  namespace are updated to point to any\u000a  new or changed objects. Other\u000a  references to the old objects (such as\u000a  names external to the module) are not\u000a  rebound to refer to the new objects\u000a  and must be updated in each namespace\u000a  where they occur if that is desired.</p>\u000a</blockquote>\u000a\u000a<p>As you noted in your question, you'll have to reconstruct <code>Foo</code> objects if the <code>Foo</code> class resides in the <code>foo</code> module.</p>\u000a
p393
sVquestion_id
p394
I437589
sVlast_activity_date
p395
I1480545813
sVcreation_date
p396
I1231806880
sVscore
p397
I435
sVowner
p398
(dp399
Vuser_id
p400
I3594
sVprofile_image
p401
Vhttps://www.gravatar.com/avatar/5928057c2aff65b162eb34d5cc3797fa?s=128&d=identicon&r=PG
p402
sVuser_type
p403
Vregistered
p404
sVreputation
p405
I29334
sVlink
p406
Vhttp://stackoverflow.com/users/3594/cdleary
p407
sVaccept_rate
p408
I95
sVdisplay_name
p409
Vcdleary
p410
ssVis_accepted
p411
I01
sVlast_edit_date
p412
I1480545813
sVanswer_id
p413
I437591
sa(dp414
Vbody
p415
V<p>I detected the peaks using a <strong>local maximum filter</strong>. Here is the result on your first dataset of 4 paws:\u000a<img src="https://i.stack.imgur.com/Kgt4H.png" alt="Peaks detection result"></p>\u000a\u000a<p>I also ran it on the second dataset of 9 paws and <a href="https://i.stack.imgur.com/4CKCh.png" rel="nofollow noreferrer">it worked as well</a>.</p>\u000a\u000a<p>Here is how you do it:</p>\u000a\u000a<pre><code>import numpy as np\u000afrom scipy.ndimage.filters import maximum_filter\u000afrom scipy.ndimage.morphology import generate_binary_structure, binary_erosion\u000aimport matplotlib.pyplot as pp\u000a\u000a#for some reason I had to reshape. Numpy ignored the shape header.\u000apaws_data = np.loadtxt("paws.txt").reshape(4,11,14)\u000a\u000a#getting a list of images\u000apaws = [p.squeeze() for p in np.vsplit(paws_data,4)]\u000a\u000a\u000adef detect_peaks(image):\u000a    """\u000a    Takes an image and detect the peaks usingthe local maximum filter.\u000a    Returns a boolean mask of the peaks (i.e. 1 when\u000a    the pixel's value is the neighborhood maximum, 0 otherwise)\u000a    """\u000a\u000a    # define an 8-connected neighborhood\u000a    neighborhood = generate_binary_structure(2,2)\u000a\u000a    #apply the local maximum filter; all pixel of maximal value \u000a    #in their neighborhood are set to 1\u000a    local_max = maximum_filter(image, footprint=neighborhood)==image\u000a    #local_max is a mask that contains the peaks we are \u000a    #looking for, but also the background.\u000a    #In order to isolate the peaks we must remove the background from the mask.\u000a\u000a    #we create the mask of the background\u000a    background = (image==0)\u000a\u000a    #a little technicality: we must erode the background in order to \u000a    #successfully subtract it form local_max, otherwise a line will \u000a    #appear along the background border (artifact of the local maximum filter)\u000a    eroded_background = binary_erosion(background, structure=neighborhood, border_value=1)\u000a\u000a    #we obtain the final mask, containing only peaks, \u000a    #by removing the background from the local_max mask (xor operation)\u000a    detected_peaks = local_max ^ eroded_background\u000a\u000a    return detected_peaks\u000a\u000a\u000a#applying the detection and plotting results\u000afor i, paw in enumerate(paws):\u000a    detected_peaks = detect_peaks(paw)\u000a    pp.subplot(4,2,(2*i+1))\u000a    pp.imshow(paw)\u000a    pp.subplot(4,2,(2*i+2) )\u000a    pp.imshow(detected_peaks)\u000a\u000app.show()\u000a</code></pre>\u000a\u000a<p>All you need to do after is use <em>scipy.ndimage.measurements.label</em> on the mask to label all distinct objects. Then you'll be able to play with them individually.</p>\u000a\u000a<p><strong>Note</strong> that the method works well because the background is not noisy. If it were, you would detect a bunch of other unwanted peaks in the background. Another important factor is the size of the <em>neighborhood</em>. You will need to adjust it if the peak size changes (the should remain roughly proportional).</p>\u000a
p416
sVquestion_id
p417
I3684484
sVlast_activity_date
p418
I1478853050
sVcreation_date
p419
I1284176287
sVscore
p420
I219
sVowner
p421
(dp422
Vuser_id
p423
I50135
sVprofile_image
p424
Vhttps://www.gravatar.com/avatar/60a28f9fd3193f7916820f0e67ce21da?s=128&d=identicon&r=PG
p425
sVuser_type
p426
Vregistered
p427
sVreputation
p428
I5416
sVlink
p429
Vhttp://stackoverflow.com/users/50135/ivan
p430
sVdisplay_name
p431
VIvan
p432
ssVis_accepted
p433
I01
sVlast_edit_date
p434
I1478853050
sVanswer_id
p435
I3689710
sa(dp436
Vbody
p437
V<p>I found this post searching for a Linux solution to this problem.</p>\u000a\u000a<p>This <a href="https://web.archive.org/web/20110305033324/http://goshawknest.wordpress.com/2011/02/16/how-to-install-psycopg2-under-virtualenv/" rel="noreferrer">post by "goshawk"</a> gave me the solution: run <code>sudo apt-get install libpq-dev python-dev</code> if you are on Ubuntu/Debian.</p>\u000a\u000a<h1>Update</h1>\u000a\u000a<p>Since more people have found this answer useful and posted their own solutions, here's a list of them:</p>\u000a\u000a<h2>Debian/Ubuntu</h2>\u000a\u000a<h3>Python 2</h3>\u000a\u000a<pre><code>sudo apt install libpq-dev python-dev\u000a</code></pre>\u000a\u000a<h3>Python 3</h3>\u000a\u000a<pre><code>sudo apt install libpq-dev python3-dev\u000a</code></pre>\u000a\u000a<h3>Additional</h3>\u000a\u000a<p>If none of the above solve your issue, try</p>\u000a\u000a<pre><code>sudo apt install build-essential\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>sudo apt install postgresql-server-dev-all\u000a</code></pre>\u000a
p438
sVquestion_id
p439
I5420789
sVlast_activity_date
p440
I1475767347
sVcreation_date
p441
I1301239516
sVscore
p442
I634
sVowner
p443
(dp444
Vuser_id
p445
I202522
sVprofile_image
p446
Vhttps://www.gravatar.com/avatar/a91c304e594e14d874923751e075f484?s=128&d=identicon&r=PG
p447
sVuser_type
p448
Vregistered
p449
sVreputation
p450
I8152
sVlink
p451
Vhttp://stackoverflow.com/users/202522/joar
p452
sVaccept_rate
p453
I93
sVdisplay_name
p454
Vjoar
p455
ssVis_accepted
p456
I01
sVlast_edit_date
p457
I1475767347
sVanswer_id
p458
I5450183
sa(dp459
Vbody
p460
V<p>From <a href="https://docs.python.org/2/library/simplehttpserver.html">the docs</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The <code>SimpleHTTPServer</code> module has been merged into <code>http.server</code> in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.</p>\u000a</blockquote>\u000a\u000a<p>So, your command is <code>python3 -m http.server</code>.</p>\u000a
p461
sVquestion_id
p462
I7943751
sVlast_activity_date
p463
I1475484299
sVcreation_date
p464
I1319959738
sVscore
p465
I655
sVowner
p466
(dp467
Vuser_id
p468
I99057
sVprofile_image
p469
Vhttps://www.gravatar.com/avatar/c50e5892d79fb240b2c870d458505eea?s=128&d=identicon&r=PG
p470
sVuser_type
p471
Vregistered
p472
sVreputation
p473
I29857
sVlink
p474
Vhttp://stackoverflow.com/users/99057/petr-viktorin
p475
sVdisplay_name
p476
VPetr Viktorin
p477
ssVis_accepted
p478
I01
sVlast_edit_date
p479
I1475484299
sVanswer_id
p480
I7943768
sa(dp481
Vbody
p482
V<p>Getting some sort of modification date in a cross-platform way is easy - just call <a href="https://docs.python.org/library/os.path.html#os.path.getmtime" rel="noreferrer"><code>os.path.getmtime(path)</code></a> and you'll get the Unix timestamp of when the file at <code>path</code> was last modified.</p>\u000a\u000a<p>Getting file <em>creation</em> dates, on the other hand, is fiddly and platform-dependent, differing even between the three big OSes:</p>\u000a\u000a<ul>\u000a<li>On <strong>Windows</strong>, a file's <code>ctime</code> (documented at <a href="https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx" rel="noreferrer">https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx</a>) stores its creation date. You can access this in Python through <a href="https://docs.python.org/library/os.path.html#os.path.getctime" rel="noreferrer"><code>os.path.getctime()</code></a> or the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_ctime" rel="noreferrer"><code>.st_ctime</code></a> attribute of the result of a call to <a href="https://docs.python.org/3/library/os.html#os.stat" rel="noreferrer"><code>os.stat()</code></a>. This <em>won't</em> work on Unix, where the <code>ctime</code> <a href="http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime" rel="noreferrer">is the last time that the file's attributes <em>or</em> content were changed</a>.</li>\u000a<li>On <strong>Mac</strong>, as well as some other Unix-based OSes, you can use the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_birthtime" rel="noreferrer"><code>.st_birthtime</code></a> attribute of the result of a call to <code>os.stat()</code>.</li>\u000a<li><p>On <strong>Linux</strong>, this is currently impossible, at least without writing a C extension for Python. Although some file systems commonly used with Linux <a href="https://unix.stackexchange.com/questions/7562/what-file-systems-on-linux-store-the-creation-time">do store creation dates</a> (for example, <code>ext4</code> stores them in <code>st_crtime</code>) , the Linux kernel <a href="https://unix.stackexchange.com/questions/91197/how-to-find-creation-date-of-file">offers no way of accessing them</a>; in particular, the structs it returns from <code>stat()</code> calls in C, as of the latest kernel version, <a href="https://github.com/torvalds/linux/blob/v4.8-rc6/include/linux/stat.h" rel="noreferrer">don't contain any creation date fields</a>. You can also see that the identifier <code>st_crtime</code> doesn't currently feature anywhere in the <a href="https://github.com/python/cpython/search?utf8=%E2%9C%93&amp;q=st_crtime" rel="noreferrer">Python source</a>. At least if you're on <code>ext4</code>, the data <em>is</em> attached to the inodes in the file system, but there's no convenient way of accessing it.</p>\u000a\u000a<p>The next-best thing on Linux is to access the file's <code>mtime</code>, through either <a href="https://docs.python.org/library/os.path.html#os.path.getmtime" rel="noreferrer"><code>os.path.getmtime()</code></a> or the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_ctime" rel="noreferrer"><code>.st_mtime</code></a> attribute of an <code>os.stat()</code> result. This will give you the last time the file's content was modified, which may be adequate for some use cases.</p></li>\u000a</ul>\u000a\u000a<p>Putting this all together, cross-platform code should look something like this...</p>\u000a\u000a<pre><code>import os\u000aimport platform\u000a\u000adef creation_date(path_to_file):\u000a    """\u000a    Try to get the date that a file was created, falling back to when it was\u000a    last modified if that isn't possible.\u000a    See http://stackoverflow.com/a/39501288/1709587 for explanation.\u000a    """\u000a    if platform.system() == 'Windows':\u000a        return os.path.getctime(path_to_file)\u000a    else:\u000a        stat = os.stat(path_to_file)\u000a        try:\u000a            return stat.st_birthtime\u000a        except AttributeError:\u000a            # We're probably on Linux. No easy way to get creation dates here,\u000a            # so we'll settle for when its content was last modified.\u000a            return stat.st_mtime\u000a</code></pre>\u000a
p483
sVquestion_id
p484
I237079
sVlast_activity_date
p485
I1473897866
sVcreation_date
p486
I1473897114
sVscore
p487
I99
sVowner
p488
(dp489
Vuser_id
p490
I1709587
sVprofile_image
p491
Vhttps://i.stack.imgur.com/frBtD.jpg?s=128&g=1
p492
sVuser_type
p493
Vregistered
p494
sVreputation
p495
I32641
sVlink
p496
Vhttp://stackoverflow.com/users/1709587/mark-amery
p497
sVaccept_rate
p498
I68
sVdisplay_name
p499
VMark Amery
p500
ssVis_accepted
p501
I01
sVlast_edit_date
p502
I1492086984
sVanswer_id
p503
I39501288
sa(dp504
Vbody
p505
V<p>I routinely use tens of gigabytes of data in just this fashion\u000ae.g. I have tables on disk that I read via queries, create data and append back.</p>\u000a\u000a<p>It's worth reading <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#hdf5-pytables">the docs</a> and <a href="https://groups.google.com/forum/m/?fromgroups#!topic/pydata/cmw1F3OFJSc">late in this thread</a> for several suggestions for how to store your data.</p>\u000a\u000a<p>Details which will affect how you store your data, like:<br>\u000a<em>Give as much detail as you can; and I can help you develop a structure.</em></p>\u000a\u000a<ol>\u000a<li>Size of data, # of rows, columns, types of columns; are you appending\u000arows, or just columns? </li>\u000a<li>What will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.<br>\u000a(Giving a toy example could enable us to offer more specific recommendations.)</li>\u000a<li>After that processing, then what do you do? Is step 2 ad hoc, or repeatable?</li>\u000a<li>Input flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?</li>\u000a<li>Do you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A > 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?</li>\u000a<li>Do you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?</li>\u000a</ol>\u000a\u000a<h2>Solution</h2>\u000a\u000a<p><em>Ensure you have <a href="http://pandas.pydata.org/getpandas.html">pandas at least <code>0.10.1</code></a> installed.</em></p>\u000a\u000a<p>Read <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#iterating-through-files-chunk-by-chunk">iterating files chunk-by-chunk</a> and <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#multiple-table-queries">multiple table queries</a>.</p>\u000a\u000a<p>Since pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):<br>\u000a(The following is pseudocode.)</p>\u000a\u000a<pre><code>import numpy as np\u000aimport pandas as pd\u000a\u000a# create a store\u000astore = pd.HDFStore('mystore.h5')\u000a\u000a# this is the key to your storage:\u000a#    this maps your fields to a specific group, and defines \u000a#    what you want to have as data_columns.\u000a#    you might want to create a nice class wrapping this\u000a#    (as you will want to have this map and its inversion)  \u000agroup_map = dict(\u000a    A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),\u000a    B = dict(fields = ['field_10',......        ], dc = ['field_10']),\u000a    .....\u000a    REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),\u000a\u000a)\u000a\u000agroup_map_inverted = dict()\u000afor g, v in group_map.items():\u000a    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))\u000a</code></pre>\u000a\u000a<p>Reading in the files and creating the storage (essentially doing what <code>append_to_multiple</code> does):</p>\u000a\u000a<pre><code>for f in files:\u000a   # read in the file, additional options hmay be necessary here\u000a   # the chunksize is not strictly necessary, you may be able to slurp each \u000a   # file into memory in which case just eliminate this part of the loop \u000a   # (you can also change chunksize if necessary)\u000a   for chunk in pd.read_table(f, chunksize=50000):\u000a       # we are going to append to each table by group\u000a       # we are not going to create indexes at this time\u000a       # but we *ARE* going to create (some) data_columns\u000a\u000a       # figure out the field groupings\u000a       for g, v in group_map.items():\u000a             # create the frame for this group\u000a             frame = chunk.reindex(columns = v['fields'], copy = False)    \u000a\u000a             # append it\u000a             store.append(g, frame, index=False, data_columns = v['dc'])\u000a</code></pre>\u000a\u000a<p>Now you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).</p>\u000a\u000a<p>This is how you get columns and create new ones:</p>\u000a\u000a<pre><code>frame = store.select(group_that_I_want)\u000a# you can optionally specify:\u000a# columns = a list of the columns IN THAT GROUP (if you wanted to\u000a#     select only say 3 out of the 20 columns in this sub-table)\u000a# and a where clause if you want a subset of the rows\u000a\u000a# do calculations on this frame\u000anew_frame = cool_function_on_frame(frame)\u000a\u000a# to 'add columns', create a new group (you probably want to\u000a# limit the columns in this new_group to be only NEW ones\u000a# (e.g. so you don't overlap from the other tables)\u000a# add this info to the group_map\u000astore.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)\u000a</code></pre>\u000a\u000a<p>When you are ready for post_processing:</p>\u000a\u000a<pre><code># This may be a bit tricky; and depends what you are actually doing.\u000a# I may need to modify this function to be a bit more general:\u000areport_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1&gt;0', 'field_1000=foo'], selector = group_1)\u000a</code></pre>\u000a\u000a<p>About data_columns, you don't actually need to define <strong>ANY</strong> data_columns; they allow you to sub-select rows based on the column. E.g. something like:</p>\u000a\u000a<pre><code>store.select(group, where = ['field_1000=foo', 'field_1001&gt;0'])\u000a</code></pre>\u000a\u000a<p>They may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).</p>\u000a\u000a<p>You also might want to:</p>\u000a\u000a<ul>\u000a<li>create a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). <em>This way the structure would be pretty transparent to you.</em></li>\u000a<li>indexes on certain data columns (makes row-subsetting much faster).</li>\u000a<li>enable compression.</li>\u000a</ul>\u000a\u000a<p>Let me know when you have questions!</p>\u000a
p506
sVquestion_id
p507
I14262433
sVlast_activity_date
p508
I1471485106
sVcreation_date
p509
I1357858642
sVscore
p510
I343
sVowner
p511
(dp512
Vuser_id
p513
I644898
sVprofile_image
p514
Vhttps://www.gravatar.com/avatar/b2833d485728ee2f603802242ebc9826?s=128&d=identicon&r=PG
p515
sVuser_type
p516
Vregistered
p517
sVreputation
p518
I55230
sVlink
p519
Vhttp://stackoverflow.com/users/644898/jeff
p520
sVdisplay_name
p521
VJeff
p522
ssVis_accepted
p523
I01
sVlast_edit_date
p524
I1471485106
sVanswer_id
p525
I14268804
sa(dp526
Vbody
p527
V<p>Use <a href="http://docs.python.org/library/stdtypes.html#dict.pop" rel="noreferrer"><code>dict.pop()</code></a>:</p>\u000a\u000a<pre><code>my_dict.pop('key', None)\u000a</code></pre>\u000a\u000a<p>This will return <code>my_dict[key]</code> if <code>key</code> exists in the dictionary, and <code>None</code> otherwise. If the second parameter is not specified (ie. <code>my_dict.pop('key')</code>) and <code>key</code> does not exist, a <code>KeyError</code> is raised.</p>\u000a
p528
sVquestion_id
p529
I11277432
sVlast_activity_date
p530
I1470439414
sVcreation_date
p531
I1341088158
sVscore
p532
I1151
sVowner
p533
(dp534
Vuser_id
p535
I279627
sVprofile_image
p536
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p537
sVuser_type
p538
Vregistered
p539
sVreputation
p540
I252086
sVlink
p541
Vhttp://stackoverflow.com/users/279627/sven-marnach
p542
sVaccept_rate
p543
I78
sVdisplay_name
p544
VSven Marnach
p545
ssVis_accepted
p546
I01
sVlast_edit_date
p547
I1470439414
sVanswer_id
p548
I11277439
sa(dp549
Vbody
p550
V<p>You can use <code>**kwargs</code> to let your functions take an arbitrary number of keyword arguments ("kwargs" means "keyword arguments"):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def print_keyword_args(**kwargs):\u000a...     # kwargs is a dict of the keyword args passed to the function\u000a...     for key, value in kwargs.iteritems():\u000a...         print "%s = %s" % (key, value)\u000a... \u000a&gt;&gt;&gt; print_keyword_args(first_name="John", last_name="Doe")\u000afirst_name = John\u000alast_name = Doe\u000a</code></pre>\u000a\u000a<p>You can also use the <code>**kwargs</code> syntax when calling functions by constructing a dictionary of keyword arguments and passing it to your function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; kwargs = {'first_name': 'Bobby', 'last_name': 'Smith'}\u000a&gt;&gt;&gt; print_keyword_args(**kwargs)\u000afirst_name = Bobby\u000alast_name = Smith\u000a</code></pre>\u000a\u000a<p>The <a href="http://docs.python.org/tutorial/controlflow.html#keyword-arguments" rel="noreferrer">Python Tutorial</a> contains a good explanation of how it works, along with some nice examples.</p>\u000a
p551
sVquestion_id
p552
I1769403
sVlast_activity_date
p553
I1470278279
sVcreation_date
p554
I1258711098
sVscore
p555
I532
sVowner
p556
(dp557
Vuser_id
p558
I203858
sVprofile_image
p559
Vhttps://www.gravatar.com/avatar/187569ce881cec73990857ba7db32612?s=128&d=identicon&r=PG
p560
sVuser_type
p561
Vregistered
p562
sVreputation
p563
I19100
sVlink
p564
Vhttp://stackoverflow.com/users/203858/p%c3%a4r-wieslander
p565
sVdisplay_name
p566
VP&#228;r Wieslander
p567
ssVis_accepted
p568
I01
sVlast_edit_date
p569
I1470278279
sVanswer_id
p570
I1769475
sa(dp571
Vbody
p572
V<p><code>mkdir -p</code> functionality as follows:</p>\u000a\u000a<pre><code>import errno    \u000aimport os\u000a\u000a\u000adef mkdir_p(path):\u000a    try:\u000a        os.makedirs(path)\u000a    except OSError as exc:  # Python &gt;2.5\u000a        if exc.errno == errno.EEXIST and os.path.isdir(path):\u000a            pass\u000a        else:\u000a            raise\u000a</code></pre>\u000a\u000a<h3>Update</h3>\u000a\u000a<p>For Python \u2265 3.2, <code>os.makedirs</code> has an <a href="http://docs.python.org/3/library/os.html?highlight=makedirs#os.makedirs" rel="noreferrer">optional third argument</a> <code>exist_ok</code> that, when true, enables the <code>mkdir -p</code> functionality \u2014<em>unless</em> <code>mode</code> is provided and the existing directory has different permissions than the intended ones; in that case, <code>OSError</code> is raised as previously.</p>\u000a
p573
sVquestion_id
p574
I600268
sVlast_activity_date
p575
I1469196841
sVcreation_date
p576
I1235944306
sVscore
p577
I718
sVowner
p578
(dp579
Vuser_id
p580
I6899
sVprofile_image
p581
Vhttps://www.gravatar.com/avatar/132aeb33251a1eddee3efc87633c0af1?s=128&d=identicon&r=PG
p582
sVuser_type
p583
Vregistered
p584
sVreputation
p585
I50998
sVlink
p586
Vhttp://stackoverflow.com/users/6899/tzot
p587
sVaccept_rate
p588
I83
sVdisplay_name
p589
Vtzot
p590
ssVis_accepted
p591
I01
sVlast_edit_date
p592
I1469196841
sVanswer_id
p593
I600612
sa(dp594
Vbody
p595
V<pre><code>my_list = [1,2,3,4,5]\u000alen(my_list)\u000a</code></pre>\u000a\u000a<p>The same works for tuples:</p>\u000a\u000a<pre><code>my_tuple = (1,2,3,4,5)\u000alen(my_tuple)\u000a</code></pre>\u000a\u000a<p>And strings, which are really just arrays of characters:</p>\u000a\u000a<pre><code>my_string = 'hello world'\u000alen(my_string)\u000a</code></pre>\u000a\u000a<p>It was <a href="http://effbot.org/pyfaq/why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list.htm" rel="noreferrer">intentionally done this way</a> so that lists, tuples and other container types didn't all need to explicitly implement a public <code>.length()</code> method, instead you can just check the <code>len()</code> of anything that implements the 'magic' <code>__len__()</code> method.</p>\u000a\u000a<p>Sure, this may seem redundant, but length checking implementations can vary considerably, even within the same language. It's not uncommon to see one collection type use a <code>.length()</code> method while another type uses a <code>.length</code> property, while yet another uses <code>.count()</code>. Having a language-level keyword unifies the entry point for all these types. So even objects you may not consider to be lists of elements could still be length-checked.  This includes strings, queues, trees, etc.</p>\u000a
p596
sVquestion_id
p597
I518021
sVlast_activity_date
p598
I1468785911
sVcreation_date
p599
I1233869388
sVscore
p600
I825
sVowner
p601
(dp602
Vuser_id
p603
I46914
sVprofile_image
p604
Vhttps://www.gravatar.com/avatar/d47d0397605e4b9cab9fd8fce027e3b5?s=128&d=identicon&r=PG
p605
sVuser_type
p606
Vregistered
p607
sVreputation
p608
I44069
sVlink
p609
Vhttp://stackoverflow.com/users/46914/soviut
p610
sVaccept_rate
p611
I89
sVdisplay_name
p612
VSoviut
p613
ssVis_accepted
p614
I01
sVlast_edit_date
p615
I1468785911
sVanswer_id
p616
I518038
sa(dp617
Vbody
p618
V<p>I know its been said already, but I'd highly recommend the Requests python package:\u000a<a href="http://docs.python-requests.org/en/latest/index.html" rel="noreferrer">http://docs.python-requests.org/en/latest/index.html</a></p>\u000a\u000a<p>If you've used languages other than python, you're probably thinking urllib and urllib2 are easy to use, not much code, and highly capable, that's how I used to think.  But the Requests package is so unbelievably useful and short that everyone should be using it.</p>\u000a\u000a<p>First, it supports a fully restful API, and is as easy as:</p>\u000a\u000a<pre><code>import requests\u000a...\u000a\u000aresp = requests.get('http://www.mywebsite.com/user')\u000aresp = requests.post('http://www.mywebsite.com/user')\u000aresp = requests.put('http://www.mywebsite.com/user/put')\u000aresp = requests.delete('http://www.mywebsite.com/user/delete')\u000a</code></pre>\u000a\u000a<p>Regardless of whether GET/POST you never have to encode parameters again, it simply takes a dictionary as an argument and is good to go.</p>\u000a\u000a<pre><code>userdata = {"firstname": "John", "lastname": "Doe", "password": "jdoe123"}\u000aresp = requests.post('http://www.mywebsite.com/user', data=userdata)\u000a</code></pre>\u000a\u000a<p>Plus it even has a built in json decoder (again, i know json.loads() isn't a lot more to write, but this sure is convenient):</p>\u000a\u000a<pre><code>resp.json()\u000a</code></pre>\u000a\u000a<p>Or if your response data is just text, use:</p>\u000a\u000a<pre><code>resp.text\u000a</code></pre>\u000a\u000a<p>This is just the tip of the iceberg. This is the list of features from the requests site:</p>\u000a\u000a<ul>\u000a<li>International Domains and URLs</li>\u000a<li>Keep-Alive &amp; Connection Pooling</li>\u000a<li>Sessions with Cookie Persistence</li>\u000a<li>Browser-style SSL Verification</li>\u000a<li>Basic/Digest Authentication</li>\u000a<li>Elegant Key/Value Cookies</li>\u000a<li>Automatic Decompression</li>\u000a<li>Unicode Response Bodies</li>\u000a<li>Multipart File Uploads</li>\u000a<li>Connection Timeouts</li>\u000a<li>.netrc support</li>\u000a<li>List item</li>\u000a<li>Python 2.6\u20143.4</li>\u000a<li>Thread-safe.</li>\u000a</ul>\u000a
p619
sVquestion_id
p620
I2018026
sVlast_activity_date
p621
I1468611925
sVcreation_date
p622
I1360542729
sVscore
p623
I423
sVowner
p624
(dp625
Vuser_id
p626
I1933117
sVprofile_image
p627
Vhttps://i.stack.imgur.com/iVMZO.png?s=128&g=1
p628
sVuser_type
p629
Vregistered
p630
sVreputation
p631
I5241
sVlink
p632
Vhttp://stackoverflow.com/users/1933117/hutch
p633
sVaccept_rate
p634
I25
sVdisplay_name
p635
VHutch
p636
ssVis_accepted
p637
I01
sVlast_edit_date
p638
I1468611925
sVanswer_id
p639
I14804320
sa(dp640
Vbody
p641
V<p>The <code>property()</code> function returns a special <a href="http://docs.python.org/2/howto/descriptor.html" rel="noreferrer">descriptor object</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; property()\u000a&lt;property object at 0x10ff07940&gt;\u000a</code></pre>\u000a\u000a<p>It is this object that has <em>extra</em> methods:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; property().getter\u000a&lt;built-in method getter of property object at 0x10ff07998&gt;\u000a&gt;&gt;&gt; property().setter\u000a&lt;built-in method setter of property object at 0x10ff07940&gt;\u000a&gt;&gt;&gt; property().deleter\u000a&lt;built-in method deleter of property object at 0x10ff07998&gt;\u000a</code></pre>\u000a\u000a<p>These act as decorators <em>too</em>. They return a new property object:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; property().getter(None)\u000a&lt;property object at 0x10ff079f0&gt;\u000a</code></pre>\u000a\u000a<p>that is a copy of the old object, but with one of the functions replaced.</p>\u000a\u000a<p>Remember, that the <code>@decorator</code> syntax is just syntactic sugar; the syntax:</p>\u000a\u000a<pre><code>@property\u000adef foo(self): return self._foo\u000a</code></pre>\u000a\u000a<p>really means the same thing as</p>\u000a\u000a<pre><code>def foo(self): return self._foo\u000afoo = property(foo)\u000a</code></pre>\u000a\u000a<p>so <code>foo</code> the function is replaced by <code>property(foo)</code>, which we saw above is a special object. Then when you use <code>@foo.setter()</code>, what you are doing is call that <code>property().setter</code> method I showed you above, which returns a new copy of the property, but this time with the setter function replaced with the decorated method.</p>\u000a\u000a<p>The following sequence also creates a full-on property, by using those decorator methods.</p>\u000a\u000a<p>First we create some functions and a <code>property</code> object with just a getter:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def getter(self): print 'Get!'\u000a... \u000a&gt;&gt;&gt; def setter(self, value): print 'Set to {!r}!'.format(value)\u000a... \u000a&gt;&gt;&gt; def deleter(self): print 'Delete!'\u000a... \u000a&gt;&gt;&gt; prop = property(getter)\u000a&gt;&gt;&gt; prop.fget is getter\u000aTrue\u000a&gt;&gt;&gt; prop.fset is None\u000aTrue\u000a&gt;&gt;&gt; prop.fdel is None\u000aTrue\u000a</code></pre>\u000a\u000a<p>Next we use the <code>.setter()</code> method to add a setter:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; prop = prop.setter(setter)\u000a&gt;&gt;&gt; prop.fget is getter\u000aTrue\u000a&gt;&gt;&gt; prop.fset is setter\u000aTrue\u000a&gt;&gt;&gt; prop.fdel is None\u000aTrue\u000a</code></pre>\u000a\u000a<p>Last we add a deleter with the <code>.deleter()</code> method:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; prop = prop.deleter(deleter)\u000a&gt;&gt;&gt; prop.fget is getter\u000aTrue\u000a&gt;&gt;&gt; prop.fset is setter\u000aTrue\u000a&gt;&gt;&gt; prop.fdel is deleter\u000aTrue\u000a</code></pre>\u000a\u000a<p>Last but not least, the <code>property</code> object acts as a <a href="http://docs.python.org/2/reference/datamodel.html#implementing-descriptors" rel="noreferrer">descriptor object</a>, so it has <a href="http://docs.python.org/2/reference/datamodel.html#object.__get__" rel="noreferrer"><code>.__get__()</code></a>, <a href="http://docs.python.org/2/reference/datamodel.html#object.__set__" rel="noreferrer"><code>.__set__()</code></a> and <a href="http://docs.python.org/2/reference/datamodel.html#object.__delete__" rel="noreferrer"><code>.__delete__()</code></a> methods to hook into instance attribute getting, setting and deleting:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Foo(object): pass\u000a... \u000a&gt;&gt;&gt; prop.__get__(Foo(), Foo)\u000aGet!\u000a&gt;&gt;&gt; prop.__set__(Foo(), 'bar')\u000aSet to 'bar'!\u000a&gt;&gt;&gt; prop.__delete__(Foo())\u000aDelete!\u000a</code></pre>\u000a\u000a<p>The Descriptor Howto includes a <a href="http://docs.python.org/2/howto/descriptor.html#properties" rel="noreferrer">pure python sample implementation</a> of the <code>property()</code> type:</p>\u000a\u000a<blockquote>\u000a<pre><code>class Property(object):\u000a    "Emulate PyProperty_Type() in Objects/descrobject.c"\u000a\u000a    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\u000a        self.fget = fget\u000a        self.fset = fset\u000a        self.fdel = fdel\u000a        if doc is None and fget is not None:\u000a            doc = fget.__doc__\u000a        self.__doc__ = doc\u000a\u000a    def __get__(self, obj, objtype=None):\u000a        if obj is None:\u000a            return self\u000a        if self.fget is None:\u000a            raise AttributeError("unreadable attribute")\u000a        return self.fget(obj)\u000a\u000a    def __set__(self, obj, value):\u000a        if self.fset is None:\u000a            raise AttributeError("can't set attribute")\u000a        self.fset(obj, value)\u000a\u000a    def __delete__(self, obj):\u000a        if self.fdel is None:\u000a            raise AttributeError("can't delete attribute")\u000a        self.fdel(obj)\u000a\u000a    def getter(self, fget):\u000a        return type(self)(fget, self.fset, self.fdel, self.__doc__)\u000a\u000a    def setter(self, fset):\u000a        return type(self)(self.fget, fset, self.fdel, self.__doc__)\u000a\u000a    def deleter(self, fdel):\u000a        return type(self)(self.fget, self.fset, fdel, self.__doc__)\u000a</code></pre>\u000a</blockquote>\u000a
p642
sVquestion_id
p643
I17330160
sVlast_activity_date
p644
I1468609508
sVcreation_date
p645
I1372280067
sVscore
p646
I547
sVowner
p647
(dp648
Vuser_id
p649
I100297
sVprofile_image
p650
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p651
sVuser_type
p652
Vmoderator
p653
sVreputation
p654
I554452
sVlink
p655
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p656
sVdisplay_name
p657
VMartijn Pieters
p658
ssVis_accepted
p659
I01
sVlast_edit_date
p660
I1468609508
sVanswer_id
p661
I17330273
sa(dp662
Vbody
p663
V<p>You can use triple-quoted strings. When they're not a docstring (first thing in a class/function/module), they are ignored.</p>\u000a\u000a<pre><code>'''\u000aThis is a multiline\u000acomment.\u000a'''\u000a</code></pre>\u000a\u000a<p>Guido van Rossum (creator of Python) <a href="https://twitter.com/gvanrossum/status/112670605505077248" rel="noreferrer">tweeted this</a> as a "pro tip".</p>\u000a\u000a<p>However, Python's style guide, PEP8, <a href="http://www.python.org/dev/peps/pep-0008/#block-comments" rel="noreferrer">favors using consecutive single-line comments</a>, and this is also what you'll find in many projects. Editors usually have a shortcut to do this easily.</p>\u000a
p664
sVquestion_id
p665
I7696924
sVlast_activity_date
p666
I1467296833
sVcreation_date
p667
I1318078727
sVscore
p668
I971
sVowner
p669
(dp670
Vuser_id
p671
I99057
sVprofile_image
p672
Vhttps://www.gravatar.com/avatar/c50e5892d79fb240b2c870d458505eea?s=128&d=identicon&r=PG
p673
sVuser_type
p674
Vregistered
p675
sVreputation
p676
I29857
sVlink
p677
Vhttp://stackoverflow.com/users/99057/petr-viktorin
p678
sVdisplay_name
p679
VPetr Viktorin
p680
ssVis_accepted
p681
I01
sVlast_edit_date
p682
I1467296833
sVanswer_id
p683
I7696966
sasVquota_max
p684
I300
sVquota_remaining
p685
I260
s.