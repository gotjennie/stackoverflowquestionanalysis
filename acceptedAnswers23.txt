(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>Oddly enough, requests doesn't have anything simple for this. You'll have to iterate over the response and write those chunks to a file:</p>\u000a\u000a<pre><code>response = requests.get('http://www.example.com/image.jpg', stream=True)\u000a\u000a# Throw an error for bad status codes\u000aresponse.raise_for_status()\u000a\u000awith open('output.jpg', 'wb') as handle:\u000a    for block in response.iter_content(1024):\u000a        handle.write(block)\u000a</code></pre>\u000a\u000a<p>I usually just use <code>urllib.urlretrieve()</code>. It works, but if you need to use a session or some sort of authentication, the above code works as well.</p>\u000a
p6
sVquestion_id
p7
I14114729
sVlast_activity_date
p8
I1494479140
sVcreation_date
p9
I1357078580
sVscore
p10
I132
sVowner
p11
(dp12
Vuser_id
p13
I464744
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/3dfd6067f4c69986a652444f44bb6d7c?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I166953
sVlink
p19
Vhttp://stackoverflow.com/users/464744/blender
p20
sVaccept_rate
p21
I86
sVdisplay_name
p22
VBlender
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1494479140
sVanswer_id
p26
I14114741
sa(dp27
Vbody
p28
V<p>Checkout <a href="https://github.com/jbalogh/django-nose" rel="nofollow noreferrer">django-nose</a>.  It allows you to specify tests to run like: </p>\u000a\u000a<pre><code>python manage.py test another.test:TestCase.test_method\u000a</code></pre>\u000a\u000a<p>or as noted in comments, use the syntax:</p>\u000a\u000a<pre><code>python manage.py test another.test.TestCase.test_method\u000a</code></pre>\u000a
p29
sVquestion_id
p30
I5875111
sVlast_activity_date
p31
I1488824138
sVcreation_date
p32
I1304454041
sVscore
p33
I77
sVowner
p34
(dp35
Vuser_id
p36
I186868
sVprofile_image
p37
Vhttps://i.stack.imgur.com/oCiSm.jpg?s=128&g=1
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I21838
sVlink
p42
Vhttp://stackoverflow.com/users/186868/sdolan
p43
sVaccept_rate
p44
I100
sVdisplay_name
p45
Vsdolan
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1488824138
sVanswer_id
p49
I5875223
sa(dp50
Vbody
p51
V<p>I ran into the same problem today.<br>\u000aI edited my <strong>UID</strong> by opening the file <code>.vagrant/machines/default/virtualbox/creator_uid</code> and changing the <strong>501</strong> to a <strong>0</strong>. </p>\u000a\u000a<p>After I saved the file, the command vagrant up worked like a champ.</p>\u000a\u000a<p>NB: the <code>.vagrant</code> folder is in the same directory as your Vagrantfile, where you ran <code>vagrant up</code></p>\u000a
p52
sVquestion_id
p53
I31644222
sVlast_activity_date
p54
I1488580658
sVcreation_date
p55
I1440699905
sVscore
p56
I135
sVowner
p57
(dp58
Vuser_id
p59
I5274152
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/1172daecfef5bd72b0207913f8c3fdba?s=128&d=identicon&r=PG&f=1
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I1366
sVlink
p65
Vhttp://stackoverflow.com/users/5274152/fred
p66
sVdisplay_name
p67
VFred
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1488580658
sVanswer_id
p71
I32256848
sa(dp72
Vbody
p73
V<p>You can use the <a href="http://docs.python.org/library/stdtypes.html#dict.update" rel="noreferrer"><code>.update()</code></a> method if you don't need the original <code>d2</code> any more:</p>\u000a\u000a<blockquote>\u000a  <p>Update the dictionary with the key/value pairs from other, <strong>overwriting existing keys</strong>. Return <code>None</code>.</p>\u000a</blockquote>\u000a\u000a<p>E.g.:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; d1 = {'a': 1, 'b': 2} \u000a&gt;&gt;&gt; d2 = {'b': 1, 'c': 3}\u000a&gt;&gt;&gt; d2.update(d1)\u000a&gt;&gt;&gt; d2\u000a{'a': 1, 'c': 3, 'b': 2}\u000a</code></pre>\u000a\u000a<p><strong>Update:</strong></p>\u000a\u000a<p>Of course you can copy the dictionary first in order to create a new merged one. This might or might not be necessary. In case you have compound objects (objects that contain other objects, like lists or class instances) in your dictionary, <a href="http://docs.python.org/library/copy.html" rel="noreferrer"><code>copy.deepcopy</code></a> should also be considered.</p>\u000a
p74
sVquestion_id
p75
I2799064
sVlast_activity_date
p76
I1487521362
sVcreation_date
p77
I1273437299
sVscore
p78
I123
sVowner
p79
(dp80
Vuser_id
p81
I218196
sVprofile_image
p82
Vhttps://i.stack.imgur.com/4P5DY.jpg?s=128&g=1
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I434937
sVlink
p87
Vhttp://stackoverflow.com/users/218196/felix-kling
p88
sVaccept_rate
p89
I100
sVdisplay_name
p90
VFelix Kling
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1487521362
sVanswer_id
p94
I2799075
sa(dp95
Vbody
p96
V<p>There's a Python module that you can get from <a href="http://pypi.python.org/pypi" rel="noreferrer">PyPI</a> called <a href="http://pypi.python.org/pypi/progressbar" rel="noreferrer"><code>progressbar</code></a> that implements such functionality. If you don't mind adding a dependency, it's a good solution. Otherwise, go with one of the other answers.</p>\u000a\u000a<p>A simple example of how to use it:</p>\u000a\u000a<pre><code>import progressbar\u000afrom time import sleep\u000abar = progressbar.ProgressBar(maxval=20, \u005c\u000a    widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])\u000abar.start()\u000afor i in xrange(20):\u000a    bar.update(i+1)\u000a    sleep(0.1)\u000abar.finish()\u000a</code></pre>\u000a\u000a<p>To install it, you can use <code>easy_install progressbar</code>, or <code>pip install progressbar</code> if you prefer pip.</p>\u000a
p97
sVquestion_id
p98
I3002085
sVlast_activity_date
p99
I1485130400
sVcreation_date
p100
I1276039998
sVscore
p101
I65
sVowner
p102
(dp103
Vuser_id
p104
I200291
sVprofile_image
p105
Vhttps://www.gravatar.com/avatar/399cacf55045372a29f1f844d12ee777?s=128&d=identicon&r=PG
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I89021
sVlink
p110
Vhttp://stackoverflow.com/users/200291/icktoofay
p111
sVaccept_rate
p112
I88
sVdisplay_name
p113
Vicktoofay
p114
ssVis_accepted
p115
I01
sVlast_edit_date
p116
I1485130400
sVanswer_id
p117
I3002114
sa(dp118
Vbody
p119
V<p>If you <strong>just</strong> want to bypass verification, you can create a new <a href="https://docs.python.org/2/library/ssl.html#ssl.SSLContext" rel="noreferrer">SSLContext</a>. By default newly created contexts use <a href="https://docs.python.org/2/library/ssl.html#ssl.CERT_NONE" rel="noreferrer">CERT_NONE</a>.</p>\u000a\u000a<p>Be careful with this as stated in section <a href="https://docs.python.org/2/library/ssl.html#verifying-certificates" rel="noreferrer">17.3.7.2.1</a></p>\u000a\u000a<blockquote>\u000a  <p>When calling the SSLContext constructor directly, CERT_NONE is the default. Since it does not authenticate the other peer, it can be insecure, especially in client mode where most of time you would like to ensure the authenticity of the server you\u2019re talking to. Therefore, when in client mode, it is highly recommended to use CERT_REQUIRED. </p>\u000a</blockquote>\u000a\u000a<p>But if you just want it to work now for some other reason you can do the following, you'll have to <code>import ssl</code> as well:</p>\u000a\u000a<pre><code>input = input.replace("!web ", "")      \u000aurl = "https://domainsearch.p.mashape.com/index.php?name=" + input\u000areq = urllib2.Request(url, headers={ 'X-Mashape-Key': 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' })\u000agcontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1)  # Only for gangstars\u000ainfo = urllib2.urlopen(req, context=gcontext).read()\u000aMessage.Chat.SendMessage ("" + info)\u000a</code></pre>\u000a\u000a<p>This should get round your problem but you're not really solving any of the issues, but you won't see the <code>[SSL: CERTIFICATE_VERIFY_FAILED]</code> because you now aren't verifying the cert!</p>\u000a\u000a<p>To add to the above, if you want to know more about why you are seeing these issues you will want to have a look at <a href="https://www.python.org/dev/peps/pep-0476/" rel="noreferrer">PEP 476</a>.</p>\u000a\u000a<blockquote>\u000a  <p>This PEP proposes to enable verification of X509 certificate signatures, as well as hostname verification for Python's HTTP clients by default, subject to opt-out on a per-call basis. This change would be applied to Python 2.7, Python 3.4, and Python 3.5. </p>\u000a</blockquote>\u000a\u000a<p>There is an advised opt out which isn't dissimilar to my advice above:</p>\u000a\u000a<pre><code>import ssl\u000a\u000a# This restores the same behavior as before.\u000acontext = ssl._create_unverified_context()\u000aurllib.urlopen("https://no-valid-cert", context=context)\u000a</code></pre>\u000a\u000a<p>It also features a <strong>highly discouraged</strong> option via <a href="http://en.wikipedia.org/wiki/Monkey_patch" rel="noreferrer">monkeypatching</a> which you don't often see in python:</p>\u000a\u000a<pre><code>import ssl\u000a\u000assl._create_default_https_context = ssl._create_unverified_context\u000a</code></pre>\u000a\u000a<p>Which overrides the default function for context creation with the function to create an unverified context. This <strong>highly discouraged</strong> option can be seen in the wild <a href="https://github.com/abeloin/SickRage/commit/21fcea2c3155f57dba5c64a55f1f8fee02804256" rel="noreferrer">here</a>!</p>\u000a
p120
sVquestion_id
p121
I27835619
sVlast_activity_date
p122
I1484918818
sVcreation_date
p123
I1421778372
sVscore
p124
I118
sVowner
p125
(dp126
Vuser_id
p127
I1663352
sVprofile_image
p128
Vhttps://www.gravatar.com/avatar/d7aae8aa2d2bd58c23ed06da5d3c2cca?s=128&d=identicon&r=PG
p129
sVuser_type
p130
Vregistered
p131
sVreputation
p132
I3924
sVlink
p133
Vhttp://stackoverflow.com/users/1663352/noelkd
p134
sVaccept_rate
p135
I100
sVdisplay_name
p136
VNoelkd
p137
ssVis_accepted
p138
I01
sVlast_edit_date
p139
I1484918818
sVanswer_id
p140
I28052583
sa(dp141
Vbody
p142
V<p>base64 encoding takes 8-bit binary byte data and encodes it uses only the characters <code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>+</code>, <code>/</code>* so it can be transmitted over channels that do not preserve all 8-bits of data, such as email.</p>\u000a\u000a<p>Hence, it wants a string of 8-bit bytes. You create those in Python 3 with the <code>b''</code> syntax.</p>\u000a\u000a<p>If you remove the <code>b</code>, it becomes a string. A string is a sequence of Unicode characters. base64 has no idea what to do with Unicode data, it's not 8-bit. It's not really any bits, in fact. :-)</p>\u000a\u000a<p>In your second example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; encoded = base64.b64encode('data to be encoded')\u000a</code></pre>\u000a\u000a<p>All the characters fit neatly into the ASCII character set, and base64 encoding is therefore actually a bit pointless. You can convert it to ascii instead, with</p>\u000a\u000a<pre><code>&gt;&gt;&gt; encoded = 'data to be encoded'.encode('ascii')\u000a</code></pre>\u000a\u000a<p>Or simpler:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; encoded = b'data to be encoded'\u000a</code></pre>\u000a\u000a<p>Which would be the same thing in this case.</p>\u000a\u000a<hr>\u000a\u000a<p>* Most base64 flavours may also include a <code>=</code> at the end as padding. In addition, some base64 variants may use characters other than <code>+</code> and <code>/</code>. See the <a href="https://en.wikipedia.org/wiki/Base64#Variants_summary_table">Variants summary table</a> at Wikipedia for an overview.</p>\u000a
p143
sVquestion_id
p144
I8908287
sVlast_activity_date
p145
I1483497219
sVcreation_date
p146
I1326885771
sVscore
p147
I99
sVowner
p148
(dp149
Vuser_id
p150
I126214
sVprofile_image
p151
Vhttps://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=128&d=identicon&r=PG
p152
sVuser_type
p153
Vregistered
p154
sVreputation
p155
I82828
sVlink
p156
Vhttp://stackoverflow.com/users/126214/lennart-regebro
p157
sVaccept_rate
p158
I100
sVdisplay_name
p159
VLennart Regebro
p160
ssVis_accepted
p161
I01
sVlast_edit_date
p162
I1483497219
sVanswer_id
p163
I8909233
sa(dp164
Vbody
p165
V<p>Here's a relevant example from the <a href="http://docs.python.org/library/itertools.html#recipes" rel="noreferrer">itertools</a> module docs:</p>\u000a\u000a<pre><code>import itertools\u000adef pairwise(iterable):\u000a    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."\u000a    a, b = itertools.tee(iterable)\u000a    next(b, None)\u000a    return itertools.izip(a, b)\u000a</code></pre>\u000a\u000a<p>How this works:</p>\u000a\u000a<p>First, two parallel iterators, <code>a</code> and <code>b</code> are created (the <code>tee()</code> call), both pointing to the first element of the original iterable. The second iterator, <code>b</code> is moved 1 step  forward (the <code>next(b, None)</code>) call). At this point <code>a</code> points to s0 and <code>b</code> points to s1. Both <code>a</code> and <code>b</code> can traverse the original iterator independently - the izip function takes the two iterators and makes pairs of the returned elements, advancing both iterators at the same pace.</p>\u000a\u000a<p>One caveat: the <code>tee()</code> function produces two iterators that can advance independently of each other, but it comes at a cost. If one of the iterators advances further than the other,  then <code>tee()</code>  needs to keep the consumed elements in memory until the second iterator comsumes them too (it cannot 'rewind' the original iterator). Here it doesn't matter because one iterator is only 1 step ahead of the other, but in general it's easy to use a lot of memory this way.</p>\u000a\u000a<p>And since <code>tee()</code> can take an <code>n</code> parameter, this can also be used for more than two parallel iterators:</p>\u000a\u000a<pre><code>def threes(iterator):\u000a    "s -&gt; (s0,s1,s2), (s1,s2,s3), (s2, s3,4), ..."\u000a    a, b, c = itertools.tee(iterator, 3)\u000a    next(b, None)\u000a    next(c, None)\u000a    next(c, None)\u000a    return itertools.izip(a, b, c)\u000a</code></pre>\u000a
p166
sVquestion_id
p167
I5434891
sVlast_activity_date
p168
I1481105400
sVcreation_date
p169
I1301068732
sVscore
p170
I75
sVowner
p171
(dp172
Vuser_id
p173
I12166
sVprofile_image
p174
Vhttps://www.gravatar.com/avatar/8ae44dc366eacfc7e7eede0ae0ac065c?s=128&d=identicon&r=PG
p175
sVuser_type
p176
Vregistered
p177
sVreputation
p178
I25538
sVlink
p179
Vhttp://stackoverflow.com/users/12166/rafa%c5%82-dowgird
p180
sVaccept_rate
p181
I100
sVdisplay_name
p182
VRafa\u0142 Dowgird
p183
ssVis_accepted
p184
I01
sVlast_edit_date
p185
I1481105400
sVanswer_id
p186
I5434936
sa(dp187
Vbody
p188
V<p>You should prefer <code>try/except</code> over <code>if/else</code> if that results in</p>\u000a\u000a<ul>\u000a<li>speed-ups (for example by preventing extra lookups)</li>\u000a<li>cleaner code (less lines/easier to read)</li>\u000a</ul>\u000a\u000a<p>Often, these go hand-in-hand.</p>\u000a\u000a<hr>\u000a\u000a<p><b>speed-ups</b></p>\u000a\u000a<p>In the case of trying to find an element in a long list by:</p>\u000a\u000a<pre><code>try:\u000a    x = my_list[index]\u000aexcept IndexError:\u000a    x = 'NO_ABC'\u000a</code></pre>\u000a\u000a<p>the try, except is the best option when the <code>index</code> is probably in the list and the IndexError is usually not raised. This way you avoid the need for an extra lookup by <code>if index &lt; len(mylist)</code>.</p>\u000a\u000a<p><b>Python encourages the use of exceptions, <em>which you handle</em></b> is a phrase from <a href="http://diveintopython3.org/your-first-python-program.html#exceptions">Dive Into Python</a>. Your example not only handles the exception (gracefully), rather than letting it <em>silently pass</em>, also the exception occurs only in the <em>exceptional</em> case of index not being found (hence the word <em>exception</em>!).</p>\u000a\u000a<hr>\u000a\u000a<p><b>cleaner code</b></p>\u000a\u000a<p>The official Python Documentation mentions <a href="https://docs.python.org/3/glossary.html?highlight=eafp#term-eafp">EAFP</a>: <em>Easier to ask for forgiveness than permission</em> and <a href="http://bayes.colorado.edu/PythonIdioms.html">Rob Knight</a> notes that <b>catching errors rather than avoiding them</b>, can result in cleaner, easier to read code. His example says it like this:</p>\u000a\u000a<p>Worse <em>(LBYL 'look before you leap')</em>:</p>\u000a\u000a<pre><code>#check whether int conversion will raise an error\u000aif not isinstance(s, str) or not s.isdigit:\u000a    return None\u000aelif len(s) &gt; 10:    #too many digits for int conversion\u000a    return None\u000aelse:\u000a    return int(str)\u000a</code></pre>\u000a\u000a<p>Better <em>(EAFP: Easier to ask for forgiveness than permission)</em>:</p>\u000a\u000a<pre><code>try:\u000a    return int(str)\u000aexcept (TypeError, ValueError, OverflowError): #int conversion failed\u000a    return None\u000a</code></pre>\u000a
p189
sVquestion_id
p190
I7604636
sVlast_activity_date
p191
I1479826846
sVcreation_date
p192
I1317341367
sVscore
p193
I88
sVowner
p194
(dp195
Vuser_id
p196
I847331
sVprofile_image
p197
Vhttps://www.gravatar.com/avatar/811e96762eac3a693825446a9896712c?s=128&d=identicon&r=PG
p198
sVuser_type
p199
Vregistered
p200
sVreputation
p201
I9111
sVlink
p202
Vhttp://stackoverflow.com/users/847331/remi
p203
sVaccept_rate
p204
I100
sVdisplay_name
p205
VRemi
p206
ssVis_accepted
p207
I01
sVlast_edit_date
p208
I1479826846
sVanswer_id
p209
I7604717
sa(dp210
Vbody
p211
V<p>Cookie is just another HTTP header.</p>\u000a\u000a<pre><code>import urllib2\u000aopener = urllib2.build_opener()\u000aopener.addheaders.append(('Cookie', 'cookiename=cookievalue'))\u000af = opener.open("http://example.com/")\u000a</code></pre>\u000a\u000a<p>See <a href="https://docs.python.org/2/library/urllib2.html#examples" rel="noreferrer">urllib2 examples</a> for other ways how to add HTTP headers to your request.</p>\u000a\u000a<p>There are more ways how to handle cookies. Some modules like <a href="https://docs.python.org/2/library/cookielib.html" rel="noreferrer">cookielib</a> try to behave like web browser - remember what cookies did you get previously and automatically send them again in following requests.</p>\u000a
p212
sVquestion_id
p213
I3334809
sVlast_activity_date
p214
I1479826298
sVcreation_date
p215
I1280149097
sVscore
p216
I97
sVowner
p217
(dp218
Vuser_id
p219
I196206
sVprofile_image
p220
Vhttps://www.gravatar.com/avatar/5b3e5f05b6457facb417239ce03739cb?s=128&d=identicon&r=PG
p221
sVuser_type
p222
Vregistered
p223
sVreputation
p224
I12447
sVlink
p225
Vhttp://stackoverflow.com/users/196206/messa
p226
sVdisplay_name
p227
VMessa
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1479826298
sVanswer_id
p231
I3334959
sa(dp232
Vbody
p233
V<p>The recommendation from <a href="http://stackoverflow.com/questions/449560/how-do-i-determine-the-size-of-an-object-in-python">an earlier question</a> on this was to use <a href="http://docs.python.org/library/sys.html#sys.getsizeof" rel="noreferrer">sys.getsizeof()</a>, quoting:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import sys\u000a&gt;&gt;&gt; x = 2\u000a&gt;&gt;&gt; sys.getsizeof(x)\u000a14\u000a&gt;&gt;&gt; sys.getsizeof(sys.getsizeof)\u000a32\u000a&gt;&gt;&gt; sys.getsizeof('this')\u000a38\u000a&gt;&gt;&gt; sys.getsizeof('this also')\u000a48\u000a</code></pre>\u000a\u000a<p>You could take this approach:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import sys\u000a&gt;&gt;&gt; import decimal\u000a&gt;&gt;&gt; \u000a&gt;&gt;&gt; d = {\u000a...     "int": 0,\u000a...     "float": 0.0,\u000a...     "dict": dict(),\u000a...     "set": set(),\u000a...     "tuple": tuple(),\u000a...     "list": list(),\u000a...     "str": "a",\u000a...     "unicode": u"a",\u000a...     "decimal": decimal.Decimal(0),\u000a...     "object": object(),\u000a... }\u000a&gt;&gt;&gt; for k, v in sorted(d.iteritems()):\u000a...     print k, sys.getsizeof(v)\u000a...\u000adecimal 40\u000adict 140\u000afloat 16\u000aint 12\u000alist 36\u000aobject 8\u000aset 116\u000astr 25\u000atuple 28\u000aunicode 28\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>2012-09-30</p>\u000a\u000a<p>python 2.7 (linux, 32-bit):</p>\u000a\u000a<pre><code>decimal 36\u000adict 136\u000afloat 16\u000aint 12\u000alist 32\u000aobject 8\u000aset 112\u000astr 22\u000atuple 24\u000aunicode 32\u000a</code></pre>\u000a\u000a<p>python 3.3 (linux, 32-bit)</p>\u000a\u000a<pre><code>decimal 52\u000adict 144\u000afloat 16\u000aint 14\u000alist 32\u000aobject 8\u000aset 112\u000astr 26\u000atuple 24\u000aunicode 26\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>2016-08-01</p>\u000a\u000a<p>OSX, Python 2.7.10 (default, Oct 23 2015, 19:19:21) [GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin</p>\u000a\u000a<pre><code>decimal 80\u000adict 280\u000afloat 24\u000aint 24\u000alist 72\u000aobject 16\u000aset 232\u000astr 38\u000atuple 56\u000aunicode 52\u000a</code></pre>\u000a
p234
sVquestion_id
p235
I1331471
sVlast_activity_date
p236
I1470075055
sVcreation_date
p237
I1251242028
sVscore
p238
I96
sVowner
p239
(dp240
Vuser_id
p241
I10293
sVprofile_image
p242
Vhttps://www.gravatar.com/avatar/bbcac97b68f9e9cabd25a3f0f0bdbe49?s=128&d=identicon&r=PG
p243
sVuser_type
p244
Vregistered
p245
sVreputation
p246
I25036
sVlink
p247
Vhttp://stackoverflow.com/users/10293/hughdbrown
p248
sVaccept_rate
p249
I88
sVdisplay_name
p250
Vhughdbrown
p251
ssVis_accepted
p252
I01
sVlast_edit_date
p253
I1470075055
sVanswer_id
p254
I1331541
sa(dp255
Vbody
p256
V<p>As of 13 Apr 2014, from <a href="http://hg.python.org/peps/rev/76d43e52d978" rel="noreferrer">http://hg.python.org/peps/rev/76d43e52d978</a> (PEP 373, Python 2.7 Release Schedule):</p>\u000a\u000a<blockquote>\u000a  <p>The End Of Life date (EOL, sunset date) for Python 2.7 has been moved\u000a  five years into the future, to 2020.  This decision was made to\u000a  clarify the status of Python 2.7 and relieve worries for those users\u000a  who cannot yet migrate to Python 3.  See also <a href="http://www.python.org/dev/peps/pep-0466/" rel="noreferrer">PEP 466</a>.</p>\u000a</blockquote>\u000a
p257
sVquestion_id
p258
I4836375
sVlast_activity_date
p259
I1467304101
sVcreation_date
p260
I1397486043
sVscore
p261
I63
sVowner
p262
(dp263
Vuser_id
p264
I74305
sVprofile_image
p265
Vhttps://www.gravatar.com/avatar/fa560d5191c8e4c960c01ddf8b27fc3d?s=128&d=identicon&r=PG
p266
sVuser_type
p267
Vregistered
p268
sVreputation
p269
I10522
sVlink
p270
Vhttp://stackoverflow.com/users/74305/marco-mariani
p271
sVaccept_rate
p272
I80
sVdisplay_name
p273
VMarco Mariani
p274
ssVis_accepted
p275
I01
sVlast_edit_date
p276
I1467304101
sVanswer_id
p277
I23062904
sa(dp278
Vbody
p279
V<p>You could use PIL to create (and display) an image:</p>\u000a\u000a<pre><code>from PIL import Image\u000aimport numpy as np\u000a\u000aw, h = 512, 512\u000adata = np.zeros((h, w, 3), dtype=np.uint8)\u000adata[256, 256] = [255, 0, 0]\u000aimg = Image.fromarray(data, 'RGB')\u000aimg.save('my.png')\u000aimg.show()\u000a</code></pre>\u000a
p280
sVquestion_id
p281
I2659312
sVlast_activity_date
p282
I1466419146
sVcreation_date
p283
I1271526414
sVscore
p284
I63
sVowner
p285
(dp286
Vuser_id
p287
I190597
sVprofile_image
p288
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p289
sVuser_type
p290
Vregistered
p291
sVreputation
p292
I425294
sVlink
p293
Vhttp://stackoverflow.com/users/190597/unutbu
p294
sVaccept_rate
p295
I88
sVdisplay_name
p296
Vunutbu
p297
ssVis_accepted
p298
I01
sVlast_edit_date
p299
I1466419146
sVanswer_id
p300
I2659378
sa(dp301
Vbody
p302
V<p>If we are not sure that the list is sorted, we could use the <a href="http://docs.python.org/library/functions.html?highlight=min#min">built-in <code>min()</code> function</a>, to find the element which has the minimum distance from the specified number.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; min(myList, key=lambda x:abs(x-myNumber))\u000a4\u000a</code></pre>\u000a\u000a<p>Note that it also works with dicts with int keys, like <code>{1: "a", 2: "b"}</code>. This method takes O(n) time.</p>\u000a\u000a<hr>\u000a\u000a<p>If the list is already sorted, or you could pay the price of sorting the array once only, use the bisection method illustrated in <a href="http://stackoverflow.com/a/12141511/224671">@Lauritz's answer</a> which only takes O(log n) time (note however checking if a list is already sorted is O(n) and sorting is O(n log n).)</p>\u000a
p303
sVquestion_id
p304
I12141150
sVlast_activity_date
p305
I1465208033
sVcreation_date
p306
I1346067425
sVscore
p307
I165
sVowner
p308
(dp309
Vuser_id
p310
I224671
sVprofile_image
p311
Vhttps://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG
p312
sVuser_type
p313
Vregistered
p314
sVreputation
p315
I346173
sVlink
p316
Vhttp://stackoverflow.com/users/224671/kennytm
p317
sVaccept_rate
p318
I67
sVdisplay_name
p319
Vkennytm
p320
ssVis_accepted
p321
I01
sVlast_edit_date
p322
I1465208033
sVanswer_id
p323
I12141207
sa(dp324
Vbody
p325
V<p>I'd say</p>\u000a\u000a<pre><code>chunks = [data[x:x+100] for x in xrange(0, len(data), 100)]\u000a</code></pre>\u000a\u000a<p>If you are using python 3.x <code>range()</code> replaces python 2.x's <code>xrange()</code>, changing the above code to:</p>\u000a\u000a<pre><code>chunks = [data[x:x+100] for x in range(0, len(data), 100)]\u000a</code></pre>\u000a
p326
sVquestion_id
p327
I9671224
sVlast_activity_date
p328
I1463930848
sVcreation_date
p329
I1331571080
sVscore
p330
I159
sVowner
p331
(dp332
Vuser_id
p333
I1261942
sVprofile_image
p334
Vhttps://www.gravatar.com/avatar/a5604800360c8ea563ba329aacc3f757?s=128&d=identicon&r=PG
p335
sVuser_type
p336
Vregistered
p337
sVreputation
p338
I4711
sVlink
p339
Vhttp://stackoverflow.com/users/1261942/danredux
p340
sVaccept_rate
p341
I40
sVdisplay_name
p342
VDanRedux
p343
ssVis_accepted
p344
I01
sVlast_edit_date
p345
I1463930848
sVanswer_id
p346
I9671301
sa(dp347
Vbody
p348
V<p>Use <a href="http://docs.python.org/library/urllib.html#urllib.urlencode" rel="noreferrer"><code>urllib.urlencode()</code></a>. It takes a dictionary of key-value pairs, and converts it into a form suitable for a URL (e.g., <code>key1=val1&amp;key2=val2</code>).</p>\u000a\u000a<p>If you are using Python3, use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode" rel="noreferrer"><code>urllib.parse.urlencode()</code></a></p>\u000a\u000a<p>If you want to make a URL with repetitive params such as: <code>p=1&amp;p=2&amp;p=3</code> you have two options:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import urllib\u000a&gt;&gt;&gt; a = (('p',1),('p',2), ('p', 3))\u000a&gt;&gt;&gt; urllib.urlencode(a)\u000a'p=1&amp;p=2&amp;p=3'\u000a</code></pre>\u000a\u000a<p>or if you want to make a url with repetitive params:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; urllib.urlencode({'p': [1, 2, 3]}, doseq=True)\u000a'p=1&amp;p=2&amp;p=3'\u000a</code></pre>\u000a
p349
sVquestion_id
p350
I1233539
sVlast_activity_date
p351
I1459919342
sVcreation_date
p352
I1249481788
sVscore
p353
I140
sVowner
p354
(dp355
Vuser_id
p356
I28804
sVprofile_image
p357
Vhttps://www.gravatar.com/avatar/015c999a9db79ffb3030b3cc207d0be8?s=128&d=identicon&r=PG
p358
sVuser_type
p359
Vregistered
p360
sVreputation
p361
I234805
sVlink
p362
Vhttp://stackoverflow.com/users/28804/mipadi
p363
sVaccept_rate
p364
I75
sVdisplay_name
p365
Vmipadi
p366
ssVis_accepted
p367
I01
sVlast_edit_date
p368
I1459919342
sVanswer_id
p369
I1233551
sa(dp370
Vbody
p371
V<p>If you take a look at the sources for <a href="http://code.djangoproject.com/browser/django/trunk/django/contrib/auth/views.py" rel="noreferrer">django.contrib.auth.views.password_reset</a> you'll see that it uses <a href="http://code.djangoproject.com/browser/django/trunk/django/template/__init__.py" rel="noreferrer"><code>RequestContext</code></a>. The upshot is, you can use Context Processors to modify the context which may allow you to inject the information that you need.</p>\u000a\u000a<p>The b-list has a good <a href="http://www.b-list.org/weblog/2006/jun/14/django-tips-template-context-processors/" rel="noreferrer">introduction to context processors</a>.</p>\u000a\u000a<p>Edit (I seem to have been confused about what the actual question was):</p>\u000a\u000a<p>You'll notice that <code>password_reset</code> takes a named parameter called <code>template_name</code>:</p>\u000a\u000a<pre><code>def password_reset(request, is_admin_site=False, \u000a            template_name='registration/password_reset_form.html',\u000a            email_template_name='registration/password_reset_email.html',\u000a            password_reset_form=PasswordResetForm, \u000a            token_generator=default_token_generator,\u000a            post_reset_redirect=None):\u000a</code></pre>\u000a\u000a<p>Check <a href="https://docs.djangoproject.com/en/1.9/topics/auth/default/#django.contrib.auth.views.password_reset" rel="noreferrer">password_reset</a> for more information.</p>\u000a\u000a<p>... thus, with a urls.py like:</p>\u000a\u000a<pre><code>from django.conf.urls.defaults import *\u000afrom django.contrib.auth.views import password_reset\u000a\u000aurlpatterns = patterns('',\u000a     (r'^/accounts/password/reset/$', password_reset, {'template_name': 'my_templates/password_reset.html'}),\u000a     ...\u000a)\u000a</code></pre>\u000a\u000a<p><code>django.contrib.auth.views.password_reset</code> will be called for URLs matching <code>'/accounts/password/reset'</code> with the keyword argument <code>template_name = 'my_templates/password_reset.html'</code>.</p>\u000a\u000a<p>Otherwise, you don't need to provide any context as the <code>password_reset</code> view takes care of itself. If you want to see what context you have available, you can trigger a <code>TemplateSyntax</code> error and look through the stack trace find the frame with a local variable named <code>context</code>. If you want to modify the context then what I said above about context processors is probably the way to go.</p>\u000a\u000a<p>In summary: what do you need to do to use your own template? Provide a <code>template_name</code> keyword argument to the view when it is called. You can supply keyword arguments to views by including a dictionary as the third member of a URL pattern tuple.</p>\u000a
p372
sVquestion_id
p373
I388800
sVlast_activity_date
p374
I1458733288
sVcreation_date
p375
I1230038471
sVscore
p376
I85
sVowner
p377
(dp378
Vuser_id
p379
I2603
sVprofile_image
p380
Vhttps://i.stack.imgur.com/NIuNK.jpg?s=128&g=1
p381
sVuser_type
p382
Vregistered
p383
sVreputation
p384
I58767
sVlink
p385
Vhttp://stackoverflow.com/users/2603/aaron-maenpaa
p386
sVaccept_rate
p387
I75
sVdisplay_name
p388
VAaron Maenpaa
p389
ssVis_accepted
p390
I01
sVlast_edit_date
p391
I1458733288
sVanswer_id
p392
I388858
sa(dp393
Vbody
p394
V<p>I've done this myself now, in a Python package <a href="http://pypi.python.org/pypi/simplerandom" rel="noreferrer"><code>simplerandom</code></a> (<a href="http://bitbucket.org/cmcqueen1975/simplerandom" rel="noreferrer">BitBucket repo</a> - EDIT: now <a href="https://github.com/cmcqueen/simplerandom" rel="noreferrer">github</a>) (I don't expect this to be a popular package, but it was a good chance to learn Cython).</p>\u000a\u000a<p>This method relies on the fact that building a <code>.pyx</code> file with <code>Cython.Distutils.build_ext</code> (at least with Cython version 0.14) always seems to create a <code>.c</code> file in the same directory as the source <code>.pyx</code> file.</p>\u000a\u000a<p>Here is a cut-down version of <code>setup.py</code> which I hope shows the essentials:</p>\u000a\u000a<pre><code>from distutils.core import setup\u000afrom distutils.extension import Extension\u000a\u000atry:\u000a    from Cython.Distutils import build_ext\u000aexcept ImportError:\u000a    use_cython = False\u000aelse:\u000a    use_cython = True\u000a\u000acmdclass = { }\u000aext_modules = [ ]\u000a\u000aif use_cython:\u000a    ext_modules += [\u000a        Extension("mypackage.mycythonmodule", [ "cython/mycythonmodule.pyx" ]),\u000a    ]\u000a    cmdclass.update({ 'build_ext': build_ext })\u000aelse:\u000a    ext_modules += [\u000a        Extension("mypackage.mycythonmodule", [ "cython/mycythonmodule.c" ]),\u000a    ]\u000a\u000asetup(\u000a    name='mypackage',\u000a    ...\u000a    cmdclass = cmdclass,\u000a    ext_modules=ext_modules,\u000a    ...\u000a)\u000a</code></pre>\u000a\u000a<p>I also edited <code>MANIFEST.in</code> to ensure that <code>mycythonmodule.c</code> is included in a source distribution (a source distribution that is created with <code>python setup.py sdist</code>):</p>\u000a\u000a<pre><code>...\u000arecursive-include cython *\u000a...\u000a</code></pre>\u000a\u000a<p>I don't commit <code>mycythonmodule.c</code> to version control 'trunk' (or 'default' for Mercurial). When I make a release, I need to remember to do a <code>python setup.py build_ext</code> first, to ensure that <code>mycythonmodule.c</code> is present and up-to-date for the source code distribution. I also make a release branch, and commit the C file into the branch. That way I have a historical record of the C file that was distributed with that release.</p>\u000a
p395
sVquestion_id
p396
I4505747
sVlast_activity_date
p397
I1458214367
sVcreation_date
p398
I1293069512
sVscore
p399
I44
sVowner
p400
(dp401
Vuser_id
p402
I60075
sVprofile_image
p403
Vhttps://www.gravatar.com/avatar/da582d6fbfa2ae515004ef49fcb7c281?s=128&d=identicon&r=PG
p404
sVuser_type
p405
Vregistered
p406
sVreputation
p407
I21791
sVlink
p408
Vhttp://stackoverflow.com/users/60075/craig-mcqueen
p409
sVaccept_rate
p410
I65
sVdisplay_name
p411
VCraig McQueen
p412
ssVis_accepted
p413
I01
sVlast_edit_date
p414
I1458214367
sVanswer_id
p415
I4515279
sa(dp416
Vbody
p417
V<p>If you only need the dictionary keys <code>1</code>, <code>2</code>, and <code>3</code> use: <code>your_dict.keys()</code>.</p>\u000a\u000a<p>If you only need the dictionary values <code>-0.3246</code>, <code>-0.9185</code>, and <code>-3985</code> use: <code>your_dict.values()</code>.</p>\u000a\u000a<p>If you want both keys and values use: <code>your_dict.items()</code> which returns a list of tuples <code>[(key1, value1), (key2, value2), ...]</code>.</p>\u000a
p418
sVquestion_id
p419
I7002429
sVlast_activity_date
p420
I1455818549
sVcreation_date
p421
I1312921435
sVscore
p422
I152
sVowner
p423
(dp424
Vuser_id
p425
I179806
sVprofile_image
p426
Vhttps://www.gravatar.com/avatar/a7c333ee5d59519be7b757f917a950ba?s=128&d=identicon&r=PG
p427
sVuser_type
p428
Vregistered
p429
sVreputation
p430
I5316
sVlink
p431
Vhttp://stackoverflow.com/users/179806/pierre-bourdon
p432
sVaccept_rate
p433
I83
sVdisplay_name
p434
VPierre Bourdon
p435
ssVis_accepted
p436
I01
sVlast_edit_date
p437
I1455818549
sVanswer_id
p438
I7002449
sa(dp439
Vbody
p440
V<p>Python doesn't actually support %s as an argument to strftime (if you check at <a href="http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior</a> it's not in the list), the only reason it's working is because Python is passing the information to your system's strftime, which uses your local timezone.</p>\u000a\u000a<p>If you want to convert a python datetime to seconds since epoch you should do it explicitly:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; datetime.datetime(2012,04,01,0,0).strftime('%s')\u000a'1333234800'\u000a&gt;&gt;&gt; (datetime.datetime(2012,04,01,0,0) - datetime.datetime(1970,1,1)).total_seconds()\u000a1333238400.0\u000a</code></pre>\u000a\u000a<p>In Python 3.3+ you can use <a href="https://docs.python.org/3/library/datetime.html?highlight=re#datetime.datetime.timestamp" rel="noreferrer"><code>timestamp()</code></a> instead:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; datetime.datetime(2012,4,1,0,0).timestamp()\u000a1333234800.0\u000a</code></pre>\u000a
p441
sVquestion_id
p442
I11743019
sVlast_activity_date
p443
I1453309947
sVcreation_date
p444
I1343747458
sVscore
p445
I145
sVowner
p446
(dp447
Vuser_id
p448
I1310220
sVprofile_image
p449
Vhttps://www.gravatar.com/avatar/59ca992de8dee13baeb893c9c26ee4e0?s=128&d=identicon&r=PG
p450
sVuser_type
p451
Vregistered
p452
sVreputation
p453
I6186
sVlink
p454
Vhttp://stackoverflow.com/users/1310220/jleahy
p455
sVaccept_rate
p456
I86
sVdisplay_name
p457
Vjleahy
p458
ssVis_accepted
p459
I01
sVlast_edit_date
p460
I1453309947
sVanswer_id
p461
I11743262
sa(dp462
Vbody
p463
V<p>Contrarily to what the <a href="http://stackoverflow.com/a/34567956/1906307">currently accepted answer</a> suggests, there's nothing specific to PhantomJS when it comes to the difference between having WebDriver do a click and doing it in JavaScript. </p>\u000a\u000a<h3>The Difference</h3>\u000a\u000a<p>The essential difference between the two methods is common to all browsers and can be explained pretty simply:</p>\u000a\u000a<ul>\u000a<li><p>WebDriver: <strong>When WebDriver does the click, it attempts as best as it can to simulate what happens when a real user uses the browser.</strong> Suppose you have an element A which is a button that says "Click me" and an element B which is a <code>div</code> element which is transparent but has its dimensions and <code>zIndex</code> set so that it completely covers A. Then you tell WebDriver to click A. WebDriver will simulate the click so that B receives the click <em>first</em>. Why? Because B covers A, and if a user were to try to click on A, then B would get the event first. Whether or not A would eventually get the click event depends on how B handles the event. At any rate, the behavior with WebDriver in this case is the same as when a real user tries to click on A.</p></li>\u000a<li><p>JavaScript: Now, suppose you use JavaScript to do <code>A.click()</code>. <strong>This method of clicking does not reproduce what really happens when the user tries to click A.</strong> JavaScript sends the <code>click</code> event directly to A, and B will not get any event.</p></li>\u000a</ul>\u000a\u000a<h3>Why a JavaScript Click Works When a WebDriver Click Does Not?</h3>\u000a\u000a<p>As I mentioned above WebDriver will try to simulate as best it can what happens when a real user is using a browser. The fact of the matter is that the DOM can contain elements that a user cannot interact with, and WebDriver won't allow you to click on these element. Besides the overlapping case I mentioned, this also entails that invisible elements cannot be clicked. A common case I see in Stack Overflow questions is someone who is trying to interact with a GUI element that already exists in the DOM but becomes visible only when some other element has been manipulated. This sometimes happens with dropdown menus: you have to first click on the button the brings up the dropdown before a menu item can be selected. If someone tries to click the menu item before the menu is visible, WebDriver will balk and say that the element cannot be manipulated. <strong>If the person then tries to do it with JavaScript, it will work because the event is delivered directly to the element, irrespective of visibility.</strong></p>\u000a\u000a<h3>When Should You Use JavaScript for Clicking?</h3>\u000a\u000a<p>If you are using Selenium for <em>testing an application</em>, my answer to this question is <strong>"almost never".</strong> By and large, your Selenium test should reproduce what a user would do with the browser. Taking the example of the drop down menu: a test should click on the button that brings up the drop down first, and then click on the menu item. If there is a problem with the GUI because the button is invisible, or the button fails to show the menu items, or something similar, then your test will fail and you'll have detected the bug. <strong>If you use JavaScript to click around, you won't be able to detect these bugs through automated testing.</strong> </p>\u000a\u000a<p>I say "almost never" because there may be exceptions where it makes sense to use JavaScript. They should be very rare, though.</p>\u000a\u000a<p>If you are using Selenium for <em>scraping sites</em>, then it is not as critical to attempt to reproduce user behavior. So using JavaScript to bypass the GUI is less of an issue.</p>\u000a
p464
sVquestion_id
p465
I34562061
sVlast_activity_date
p466
I1452793796
sVcreation_date
p467
I1452793796
sVscore
p468
I64
sVowner
p469
(dp470
Vuser_id
p471
I1906307
sVprofile_image
p472
Vhttps://i.stack.imgur.com/lzEEw.jpg?s=128&g=1
p473
sVuser_type
p474
Vregistered
p475
sVreputation
p476
I64751
sVlink
p477
Vhttp://stackoverflow.com/users/1906307/louis
p478
sVaccept_rate
p479
I58
sVdisplay_name
p480
VLouis
p481
ssVis_accepted
p482
I01
sVanswer_id
p483
I34796379
sa(dp484
Vbody
p485
V<p>The easiest way is to use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html"><code>to_datetime</code></a>:</p>\u000a\u000a<pre><code>df['col'] = pd.to_datetime(df['col'])\u000a</code></pre>\u000a\u000a<p>It also offers a <code>dayfirst</code> argument for European times (but beware <a href="https://github.com/pydata/pandas/issues/3341">this isn't strict</a>).</p>\u000a\u000a<p>Here it is in action:</p>\u000a\u000a<pre><code>In [11]: pd.to_datetime(pd.Series(['05/23/2005']))\u000aOut[11]:\u000a0   2005-05-23 00:00:00\u000adtype: datetime64[ns]\u000a</code></pre>\u000a\u000a<p>You can pass a specific <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior">format</a>:</p>\u000a\u000a<pre><code>In [12]: pd.to_datetime(pd.Series(['05/23/2005']), format="%m/%d/%Y")\u000aOut[12]:\u000a0   2005-05-23\u000adtype: datetime64[ns]\u000a</code></pre>\u000a
p486
sVquestion_id
p487
I17134716
sVlast_activity_date
p488
I1450997275
sVcreation_date
p489
I1371395903
sVscore
p490
I132
sVowner
p491
(dp492
Vuser_id
p493
I1240268
sVprofile_image
p494
Vhttps://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1
p495
sVuser_type
p496
Vregistered
p497
sVreputation
p498
I108899
sVlink
p499
Vhttp://stackoverflow.com/users/1240268/andy-hayden
p500
sVaccept_rate
p501
I90
sVdisplay_name
p502
VAndy Hayden
p503
ssVis_accepted
p504
I01
sVlast_edit_date
p505
I1450997275
sVanswer_id
p506
I17134750
sa(dp507
Vbody
p508
V<p><code>plt.subplots()</code> is a function that returns a tuple containing a figure and axes object(s). Thus when using <code>fig, ax = plt.subplots()</code> you unpack this tuple into the variables <code>fig</code> and <code>ax</code>. Having <code>fig</code> is useful if you want to change figure-level attributes or save the figure as an image file later (e.g. with <code>fig.savefig('yourfilename.png')</code>. You certainly don't have to use the returned figure object but many people do use it later so it's common to see. Also, all axes objects (the objects that have plotting methods), have a parent figure object anyway, thus:</p>\u000a\u000a<pre><code>fig, ax = plt.subplots()\u000a</code></pre>\u000a\u000a<p>is more concise than this:</p>\u000a\u000a<pre><code>fig = plt.figure()\u000aax = fig.add_subplot(111)\u000a</code></pre>\u000a
p509
sVquestion_id
p510
I34162443
sVlast_activity_date
p511
I1449597085
sVcreation_date
p512
I1449597085
sVscore
p513
I88
sVowner
p514
(dp515
Vuser_id
p516
I4524746
sVprofile_image
p517
Vhttps://i.stack.imgur.com/JtZst.jpg?s=128&g=1
p518
sVuser_type
p519
Vregistered
p520
sVreputation
p521
I1257
sVlink
p522
Vhttp://stackoverflow.com/users/4524746/jonchar
p523
sVdisplay_name
p524
Vjonchar
p525
ssVis_accepted
p526
I01
sVanswer_id
p527
I34162641
sa(dp528
Vbody
p529
V<p>Your Fortran implementation suffers two major shortcomings: </p>\u000a\u000a<ul>\u000a<li>You mix IO and computations (and read from the file entry by entry). </li>\u000a<li>You don't use vector/matrix operations.</li>\u000a</ul>\u000a\u000a<p>This implementation does perform the same operation as yours and is faster by a factor of 20 on my machine: </p>\u000a\u000a<pre><code>program test\u000a  integer gridsize,unit\u000a  real mini,maxi,mean\u000a  real, allocatable :: tmp (:,:,:)\u000a\u000a  gridsize=512\u000a  unit=40\u000a\u000a  allocate( tmp(gridsize, gridsize, gridsize))\u000a\u000a  open(unit=unit,file='T.out',status='old',access='stream',&amp;\u000a       form='unformatted',action='read')\u000a  read(unit=unit) tmp\u000a\u000a  close(unit=unit)\u000a\u000a  mini = minval(tmp)\u000a  maxi = maxval(tmp)\u000a  mean = sum(tmp)/gridsize**3\u000a  print *, mini, maxi, mean\u000a\u000aend program\u000a</code></pre>\u000a\u000a<p>The idea is to read in the whole file into one array <code>tmp</code> in one go. Then, I can use the functions <a href="https://gcc.gnu.org/onlinedocs/gfortran/MAXVAL.html"><code>MAXVAL</code></a>, <a href="https://gcc.gnu.org/onlinedocs/gfortran/MINVAL.html"><code>MINVAL</code></a>, and <a href="https://gcc.gnu.org/onlinedocs/gfortran/SUM.html"><code>SUM</code></a> on the array directly. </p>\u000a\u000a<hr>\u000a\u000a<p>For the accuracy issue: Simply using double precision values and doing the conversion on the fly as </p>\u000a\u000a<pre><code>mean = sum(real(tmp, kind=kind(1.d0)))/real(gridsize**3, kind=kind(1.d0))\u000a</code></pre>\u000a\u000a<p>only marginally increases the calculation time. I tried performing the operation element-wise and in slices, but that did only increase the required time at the default optimization level. </p>\u000a\u000a<p>At <code>-O3</code>, the element-wise addition performs ~3 % better than the array operation. The difference between double and single precision operations is less than 2% on my machine - on average (the individual runs deviate by far more). </p>\u000a\u000a<hr>\u000a\u000a<p>Here is a very fast implementation using LAPACK: </p>\u000a\u000a<pre><code>program test\u000a  integer gridsize,unit, i, j\u000a  real mini,maxi\u000a  integer  :: t1, t2, rate\u000a  real, allocatable :: tmp (:,:,:)\u000a  real, allocatable :: work(:)\u000a!  double precision :: mean\u000a  real :: mean\u000a  real :: slange\u000a\u000a  call system_clock(count_rate=rate)\u000a  call system_clock(t1)\u000a  gridsize=512\u000a  unit=40\u000a\u000a  allocate( tmp(gridsize, gridsize, gridsize), work(gridsize))\u000a\u000a  open(unit=unit,file='T.out',status='old',access='stream',&amp;\u000a       form='unformatted',action='read')\u000a  read(unit=unit) tmp\u000a\u000a  close(unit=unit)\u000a\u000a  mini = minval(tmp)\u000a  maxi = maxval(tmp)\u000a\u000a!  mean = sum(tmp)/gridsize**3\u000a!  mean = sum(real(tmp, kind=kind(1.d0)))/real(gridsize**3, kind=kind(1.d0))\u000a  mean = 0.d0\u000a  do j=1,gridsize\u000a    do i=1,gridsize\u000a      mean = mean + slange('1', gridsize, 1, tmp(:,i,j),gridsize, work)\u000a    enddo !i\u000a  enddo !j\u000a  mean = mean / gridsize**3\u000a\u000a  print *, mini, maxi, mean\u000a  call system_clock(t2)\u000a  print *,real(t2-t1)/real(rate)\u000a\u000aend program\u000a</code></pre>\u000a\u000a<p>This uses the single precision matrix 1-norm <a href="http://www.math.utah.edu/software/lapack/lapack-s/slange.html"><code>SLANGE</code></a> on matrix columns. The run-time is even faster than the approach using single precision array functions - and does not show the precision issue. </p>\u000a
p530
sVquestion_id
p531
I33723771
sVlast_activity_date
p532
I1447698339
sVcreation_date
p533
I1447618053
sVscore
p534
I107
sVowner
p535
(dp536
Vuser_id
p537
I2737715
sVprofile_image
p538
Vhttps://www.gravatar.com/avatar/600bf8722446680e50fbbb6ecbbe2b44?s=128&d=identicon&r=PG&f=1
p539
sVuser_type
p540
Vregistered
p541
sVreputation
p542
I13752
sVlink
p543
Vhttp://stackoverflow.com/users/2737715/alexander-vogt
p544
sVaccept_rate
p545
I86
sVdisplay_name
p546
VAlexander Vogt
p547
ssVis_accepted
p548
I01
sVlast_edit_date
p549
I1447698339
sVanswer_id
p550
I33724424
sa(dp551
Vbody
p552
V<p>Here's an simple example : </p>\u000a\u000a<pre><code>  for letter in 'Django':     # First Example\u000a      if letter == 'D':\u000a          continue\u000a      print 'Current Letter:', letter\u000a\u000a  output will be \u000a  Current Letter: j\u000a  Current Letter: a\u000a  Current Letter: n\u000a  Current Letter: g\u000a  Current Letter: o\u000a</code></pre>\u000a\u000a<p>It continues with the next iteration of the loop:</p>\u000a
p553
sVquestion_id
p554
I8420705
sVlast_activity_date
p555
I1446989096
sVcreation_date
p556
I1399287046
sVscore
p557
I72
sVowner
p558
(dp559
Vuser_id
p560
I1965509
sVprofile_image
p561
Vhttps://www.gravatar.com/avatar/61aa082ed9a6fccde266f3cf1c0165b7?s=128&d=identicon&r=PG
p562
sVuser_type
p563
Vregistered
p564
sVreputation
p565
I1491
sVlink
p566
Vhttp://stackoverflow.com/users/1965509/snehal-parmar
p567
sVaccept_rate
p568
I100
sVdisplay_name
p569
VSnehal Parmar
p570
ssVis_accepted
p571
I01
sVlast_edit_date
p572
I1446989096
sVanswer_id
p573
I23470680
sa(dp574
Vbody
p575
V<p>In this simple case you can use <a href="https://docs.python.org/2/library/functions.html#vars"><code>vars()</code></a>:</p>\u000a\u000a<pre><code>an = Animal()\u000aattrs = vars(an)\u000a# {'kids': 0, 'name': 'Dog', 'color': 'Spotted', 'age': 10, 'legs': 2, 'smell': 'Alot'}\u000a# now dump this in some way or another\u000aprint ', '.join("%s: %s" % item for item in attrs.items())\u000a</code></pre>\u000a\u000a<p>If you want to store Python objects on the disk you should look at <a href="https://docs.python.org/2/library/shelve.html">shelve \u2014 Python object persistence</a>.</p>\u000a
p576
sVquestion_id
p577
I5969806
sVlast_activity_date
p578
I1445069018
sVcreation_date
p579
I1305144100
sVscore
p580
I149
sVowner
p581
(dp582
Vuser_id
p583
I95612
sVprofile_image
p584
Vhttps://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=128&d=identicon&r=PG
p585
sVuser_type
p586
Vregistered
p587
sVreputation
p588
I63439
sVlink
p589
Vhttp://stackoverflow.com/users/95612/jochen-ritzel
p590
sVaccept_rate
p591
I80
sVdisplay_name
p592
VJochen Ritzel
p593
ssVis_accepted
p594
I01
sVlast_edit_date
p595
I1445069018
sVanswer_id
p596
I5969930
sa(dp597
Vbody
p598
V<p><a href="http://www.daniweb.com/forums/thread39804.html#" rel="noreferrer">There is no do-while loop in Python.</a></p>\u000a\u000a<p>This is a similar construct, taken from the link above.</p>\u000a\u000a<pre><code> while True:\u000a     do_something()\u000a     if condition():\u000a        break\u000a</code></pre>\u000a
p599
sVquestion_id
p600
I1662161
sVlast_activity_date
p601
I1434924270
sVcreation_date
p602
I1257178015
sVscore
p603
I145
sVowner
p604
(dp605
Vuser_id
p606
I75694
sVprofile_image
p607
Vhttps://www.gravatar.com/avatar/854d5dc902ca2fa8fb213d61a8090e42?s=128&d=identicon&r=PG
p608
sVuser_type
p609
Vregistered
p610
sVreputation
p611
I6780
sVlink
p612
Vhttp://stackoverflow.com/users/75694/theycallmemorty
p613
sVaccept_rate
p614
I70
sVdisplay_name
p615
Vtheycallmemorty
p616
ssVis_accepted
p617
I01
sVlast_edit_date
p618
I1434924270
sVanswer_id
p619
I1662176
sa(dp620
Vbody
p621
V<p><strong>UPDATE (23.05.2015): Based on this and fwc:s answer I created a pip installable package <a href="https://github.com/mkorpela/overrides">https://github.com/mkorpela/overrides</a></strong></p>\u000a\u000a<p>From time to time I end up here looking at this question.\u000aMainly this happens after (again) seeing the same bug in our code base: Someone has forgotten some "interface" implementing class while renaming a method in the "interface"..</p>\u000a\u000a<p>Well Python ain't Java but Python has power -- and explicit is better than implicit -- and there are real concrete cases in the real world where this thing would have helped me.</p>\u000a\u000a<p>So here is a sketch of overrides decorator. This will check that the class given as a parameter has the same method (or something) name as the method being decorated.</p>\u000a\u000a<p>If you can think of a better solution please post it here!</p>\u000a\u000a<pre><code>def overrides(interface_class):\u000a    def overrider(method):\u000a        assert(method.__name__ in dir(interface_class))\u000a        return method\u000a    return overrider\u000a</code></pre>\u000a\u000a<p>It works as follows:</p>\u000a\u000a<pre><code>class MySuperInterface(object):\u000a    def my_method(self):\u000a        print 'hello world!'\u000a\u000a\u000aclass ConcreteImplementer(MySuperInterface):\u000a    @overrides(MySuperInterface)\u000a    def my_method(self):\u000a        print 'hello kitty!'\u000a</code></pre>\u000a\u000a<p>and if you do a faulty version it will raise an assertion error during class loading:</p>\u000a\u000a<pre><code>class ConcreteFaultyImplementer(MySuperInterface):\u000a    @overrides(MySuperInterface)\u000a    def your_method(self):\u000a        print 'bye bye!'\u000a\u000a&gt;&gt; AssertionError!!!!!!!\u000a</code></pre>\u000a
p622
sVquestion_id
p623
I1167617
sVlast_activity_date
p624
I1432384189
sVcreation_date
p625
I1322579239
sVscore
p626
I120
sVowner
p627
(dp628
Vuser_id
p629
I308189
sVprofile_image
p630
Vhttps://www.gravatar.com/avatar/834f4e776adc4806aacdf4048536f298?s=128&d=identicon&r=PG
p631
sVuser_type
p632
Vregistered
p633
sVreputation
p634
I2396
sVlink
p635
Vhttp://stackoverflow.com/users/308189/mkorpela
p636
sVaccept_rate
p637
I89
sVdisplay_name
p638
Vmkorpela
p639
ssVis_accepted
p640
I01
sVlast_edit_date
p641
I1432384189
sVanswer_id
p642
I8313042
sa(dp643
Vbody
p644
V<p>Relative import happens whenever you are importing a package relative to the current script/package.</p>\u000a\u000a<p>Consider the following tree for example:</p>\u000a\u000a<pre><code>mypkg\u000a\u251c\u2500\u2500 base.py\u000a\u2514\u2500\u2500 derived.py\u000a</code></pre>\u000a\u000a<p>Now, your <code>derived.py</code> requires something from <code>base.py</code>. In Python 2, you could do it like this (in <code>derived.py</code>):</p>\u000a\u000a<pre><code>from base import BaseThing\u000a</code></pre>\u000a\u000a<p>Python 3 no longer supports that since it's not explicit whether you want the 'relative' or 'absolute' <code>base</code>. In other words, if there was a Python package named <code>base</code> installed in the system, you'd get the wrong one.</p>\u000a\u000a<p>Instead it requires you to use <em>explicit imports</em> which explicitly specify location of a module on a path-alike basis. Your <code>derived.py</code> would look like:</p>\u000a\u000a<pre><code>from .base import BaseThing\u000a</code></pre>\u000a\u000a<p>The leading <code>.</code> says 'import <code>base</code> from module directory'; in other words, <code>.base</code> maps to <code>./base.py</code>.</p>\u000a\u000a<p>Similarly, there is <code>..</code> prefix which goes up the directory hierarchy like <code>../</code> (with <code>..mod</code> mapping to <code>../mod.py</code>), and then <code>...</code> which goes two levels up (<code>../../mod.py</code>) and so on.</p>\u000a\u000a<p>Please however note that the relative paths listed above were relative to directory where current module (<code>derived.py</code>) resides in, <em>not</em> the current working directory.</p>\u000a\u000a<hr>\u000a\u000a<p><em>@BrenBarn</em> has already explained the star import case. For completeness, I will have to say the same ;).</p>\u000a\u000a<p>For example, you need to use a few <code>math</code> functions but you use them only in a single function. In Python 2 you were permitted to be semi-lazy:</p>\u000a\u000a<pre><code>def sin_degrees(x):\u000a    from math import *\u000a    return sin(degrees(x))\u000a</code></pre>\u000a\u000a<p>Note that it already triggers a warning in Python 2:</p>\u000a\u000a<pre><code>a.py:1: SyntaxWarning: import * only allowed at module level\u000a  def sin_degrees(x):\u000a</code></pre>\u000a\u000a<p>In modern Python 2 code you should and in Python 3 you have to do either:</p>\u000a\u000a<pre><code>def sin_degrees(x):\u000a    from math import sin, degrees\u000a    return sin(degrees(x))\u000a</code></pre>\u000a\u000a<p>or:</p>\u000a\u000a<pre><code>from math import *\u000a\u000adef sin_degrees(x):\u000a    return sin(degrees(x))\u000a</code></pre>\u000a
p645
sVquestion_id
p646
I12172791
sVlast_activity_date
p647
I1431195937
sVcreation_date
p648
I1346227722
sVscore
p649
I120
sVowner
p650
(dp651
Vuser_id
p652
I165333
sVprofile_image
p653
Vhttps://i.stack.imgur.com/Tes86.jpg?s=128&g=1
p654
sVuser_type
p655
Vregistered
p656
sVreputation
p657
I10466
sVlink
p658
Vhttp://stackoverflow.com/users/165333/micha%c5%82-g%c3%b3rny
p659
sVaccept_rate
p660
I86
sVdisplay_name
p661
VMicha\u0142 G&#243;rny
p662
ssVis_accepted
p663
I01
sVlast_edit_date
p664
I1431195937
sVanswer_id
p665
I12173406
sa(dp666
Vbody
p667
V<p>Use the <code>after</code> method on the <code>Tk</code> object:</p>\u000a\u000a<pre><code>from tkinter import *\u000a\u000aroot = Tk()\u000a\u000adef task():\u000a    print("hello")\u000a    root.after(2000, task)  # reschedule event in 2 seconds\u000a\u000aroot.after(2000, task)\u000aroot.mainloop()\u000a</code></pre>\u000a\u000a<p>Here's the declaration and documentation for the <code>after</code> method:</p>\u000a\u000a<pre><code>def after(self, ms, func=None, *args):\u000a    """Call function once after given time.\u000a\u000a    MS specifies the time in milliseconds. FUNC gives the\u000a    function which shall be called. Additional parameters\u000a    are given as parameters to the function call.  Return\u000a    identifier to cancel scheduling with after_cancel."""\u000a</code></pre>\u000a
p668
sVquestion_id
p669
I459083
sVlast_activity_date
p670
I1430686092
sVcreation_date
p671
I1232398536
sVscore
p672
I93
sVowner
p673
(dp674
Vuser_id
p675
I40310
sVprofile_image
p676
Vhttps://www.gravatar.com/avatar/8afe5283fb2d5f0a817c9c9ea4fa925e?s=128&d=identicon&r=PG
p677
sVuser_type
p678
Vregistered
p679
sVreputation
p680
I30612
sVlink
p681
Vhttp://stackoverflow.com/users/40310/dave-ray
p682
sVaccept_rate
p683
I62
sVdisplay_name
p684
VDave Ray
p685
ssVis_accepted
p686
I01
sVlast_edit_date
p687
I1430686092
sVanswer_id
p688
I459131
sa(dp689
Vbody
p690
V<p>Python 3.0's way is considered the standard rounding method these days, though some language implementations aren't on the bus yet.</p>\u000a\u000a<p>The simple "always round 0.5 up" technique results in a slight bias toward the higher number. With large numbers of calculations, this can be significant. The Python 3.0 approach eliminates this issue.</p>\u000a\u000a<p>There is more than one method of rounding in common use. IEEE 754, the international standard for floating-point math, defines <a href="http://en.wikipedia.org/wiki/IEEE_754-2008#Rounding_rules" rel="noreferrer">five different rounding methods</a> (the one used by Python 3.0 is the default). And there are others.</p>\u000a\u000a<p>This behavior is not as widely known as it ought to be. AppleScript was, if I remember correctly, an early adopter of this rounding method. The <code>round</code> command in AppleScript actually does offer several options, but round-toward-even is the default as it is in IEEE 754. Apparently the engineer who implemented the <code>round</code> command got so fed up with all the requests to "make it work like I learned in school" that he implemented just that: <code>round 2.5 rounding as taught in school</code> is a valid AppleScript command.  :-)</p>\u000a
p691
sVquestion_id
p692
I10825926
sVlast_activity_date
p693
I1429134243
sVcreation_date
p694
I1338423855
sVscore
p695
I82
sVowner
p696
(dp697
Vuser_id
p698
I416467
sVprofile_image
p699
Vhttps://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=128&d=identicon&r=PG
p700
sVuser_type
p701
Vregistered
p702
sVreputation
p703
I102771
sVlink
p704
Vhttp://stackoverflow.com/users/416467/kindall
p705
sVaccept_rate
p706
I100
sVdisplay_name
p707
Vkindall
p708
ssVis_accepted
p709
I01
sVlast_edit_date
p710
I1429134243
sVanswer_id
p711
I10825998
sa(dp712
Vbody
p713
V<pre><code>lst1, lst2 = zip(*zipped_list)\u000a</code></pre>\u000a\u000a<p>should give you the unzipped list.</p>\u000a\u000a<p><code>*zipped_list</code> unpacks the zipped_list object. it then passes all the tuples from the zipped_list object to zip, which just packs them back up as they were when you passed them in.</p>\u000a\u000a<p>so if:</p>\u000a\u000a<pre><code>a = [1,2,3]\u000ab = [4,5,6]\u000a</code></pre>\u000a\u000a<p>then <code>zipped_list = zip(a,b)</code> gives you:</p>\u000a\u000a<pre><code>[(1,4), (2,5), (3,6)]\u000a</code></pre>\u000a\u000a<p>and <code>*zipped_list</code> gives you back</p>\u000a\u000a<pre><code>(1,4), (2,5), (3,6)\u000a</code></pre>\u000a\u000a<p>zipping that with <code>zip(*zipped_list)</code> gives you back the two collections:</p>\u000a\u000a<pre><code>[(1, 2, 3), (4, 5, 6)]\u000a</code></pre>\u000a
p714
sVquestion_id
p715
I13635032
sVlast_activity_date
p716
I1427118660
sVcreation_date
p717
I1354224531
sVscore
p718
I172
sVowner
p719
(dp720
Vuser_id
p721
I1208078
sVprofile_image
p722
Vhttps://www.gravatar.com/avatar/7238a0285a2f92d218359b1c10af9a72?s=128&d=identicon&r=PG
p723
sVuser_type
p724
Vregistered
p725
sVreputation
p726
I8520
sVlink
p727
Vhttp://stackoverflow.com/users/1208078/mike-corcoran
p728
sVaccept_rate
p729
I81
sVdisplay_name
p730
VMike Corcoran
p731
ssVis_accepted
p732
I01
sVlast_edit_date
p733
I1427118660
sVanswer_id
p734
I13635074
sa(dp735
Vbody
p736
V<pre><code>data.rename(columns={'gdp':'log(gdp)'}, inplace=True)\u000a</code></pre>\u000a\u000a<p>The <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.rename.html#pandas.DataFrame.rename" rel="noreferrer"><code>rename</code></a> show that it accepts a dict as a param for <code>columns</code> so you just pass a dict with a single entry.</p>\u000a\u000a<p>Also see <a href="http://stackoverflow.com/questions/11346283/renaming-columns-in-pandas">related</a></p>\u000a
p737
sVquestion_id
p738
I19758364
sVlast_activity_date
p739
I1423645616
sVcreation_date
p740
I1383514321
sVscore
p741
I129
sVowner
p742
(dp743
Vuser_id
p744
I704848
sVprofile_image
p745
Vhttps://www.gravatar.com/avatar/3f9be2c2958e208c8d9b629ac43c9c42?s=128&d=identicon&r=PG
p746
sVuser_type
p747
Vregistered
p748
sVreputation
p749
I103173
sVlink
p750
Vhttp://stackoverflow.com/users/704848/edchum
p751
sVdisplay_name
p752
VEdChum
p753
ssVis_accepted
p754
I01
sVlast_edit_date
p755
I1423645616
sVanswer_id
p756
I19758398
sa(dp757
Vbody
p758
V<p>Use re.escape</p>\u000a\u000a<pre><code>re.escape(string)\u000a&gt;&gt;&gt; re.escape('\u005c a.*$')\u000a'\u005c\u005c\u005c\u005c\u005c\u005c a\u005c\u005c.\u005c\u005c*\u005c\u005c$'\u000a&gt;&gt;&gt; print(re.escape('\u005c a.*$'))\u000a\u005c\u005c\u005c a\u005c.\u005c*\u005c$\u000a&gt;&gt;&gt; re.escape('www.stackoverflow.com')\u000a'www\u005c\u005c.stackoverflow\u005c\u005c.com'\u000a&gt;&gt;&gt; print(re.escape('www.stackoverflow.com'))\u000awww\u005c.stackoverflow\u005c.com\u000a</code></pre>\u000a\u000a<p>See : <a href="http://docs.python.org/library/re.html#module-contents" rel="noreferrer">http://docs.python.org/library/re.html#module-contents</a></p>\u000a\u000a<p>Repeating it here:</p>\u000a\u000a<blockquote>\u000a  <p>re.escape(string)</p>\u000a  \u000a  <p>Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>\u000a</blockquote>\u000a
p759
sVquestion_id
p760
I4202538
sVlast_activity_date
p761
I1423632996
sVcreation_date
p762
I1289981626
sVscore
p763
I111
sVowner
p764
(dp765
Vuser_id
p766
I432745
sVprofile_image
p767
Vhttps://www.gravatar.com/avatar/61d5932d030d57eb9948756af74a357f?s=128&d=identicon&r=PG
p768
sVuser_type
p769
Vregistered
p770
sVreputation
p771
I44346
sVlink
p772
Vhttp://stackoverflow.com/users/432745/pyfunc
p773
sVdisplay_name
p774
Vpyfunc
p775
ssVis_accepted
p776
I01
sVlast_edit_date
p777
I1423632996
sVanswer_id
p778
I4202559
sa(dp779
Vbody
p780
V<p>In Mac OS, you can use the "open" command.  There is a Windows API call that does something similar, but I don't remember it offhand.</p>\u000a\u000a<h3>Update</h3>\u000a\u000a<p>Okay, the "start" command will do it, so this should work.</p>\u000a\u000a<p>Mac OS/X:</p>\u000a\u000a<pre><code>os.system("open "+filename)\u000a</code></pre>\u000a\u000a<p>Windows:</p>\u000a\u000a<pre><code>os.system("start "+filename)\u000a</code></pre>\u000a\u000a<h3>Much later update by Edward: os.system works, but <em>it only works with filenames that don't have any spaces in folders and files in the filename (e.g. A:\u005cabc\u005cdef\u005ca.txt)</em>.</h3>\u000a\u000a<h3>Later Update</h3>\u000a\u000a<p>Okay, clearly this silly-ass controversy continues, so let's just look at doing this with subprocess.</p>\u000a\u000a<p><code>open</code> and <code>start</code> are command interpreter things for Mac OS/X and Windows respectively.  Now, let's say we use subprocess.  Canonically, you'd use:</p>\u000a\u000a<pre><code>try:\u000a    retcode = subprocess.call("open " + filename, shell=True)\u000a    if retcode &lt; 0:\u000a        print &gt;&gt;sys.stderr, "Child was terminated by signal", -retcode\u000a    else:\u000a        print &gt;&gt;sys.stderr, "Child returned", retcode\u000aexcept OSError, e:\u000a    print &gt;&gt;sys.stderr, "Execution failed:", e\u000a</code></pre>\u000a\u000a<p>Now, what are the advantages of this?  In theory, this is more secure -- but in fact we're needing to execute a command line one way or the other; in either environment, we need the environment and services to interpet, get paths, and so forth.  In neither case are we executing arbitrary text, so it doesn't have an inherent "but you can type <code>'filename ; rm -rf /'</code>" problem, and IF the file name can be corrupted, using <code>subprocess.call</code> gives us no protection.</p>\u000a\u000a<p>It doesn't actually give us any more error detection, we're still depending on the <code>retcode</code> in either case.  We don't need to wait for the child process, since we're by problem statement starting a separate process.</p>\u000a\u000a<p>"But <code>subprocess</code> is preferred."  However, <code>os.system()</code> is not deprecated, and it's the simplest tool for this particular job.</p>\u000a\u000a<p>Conclusion: using <code>os.system()</code> is the simplest, most straightforward way to do this, and is therefore a correct answer.</p>\u000a
p781
sVquestion_id
p782
I434597
sVlast_activity_date
p783
I1421672750
sVcreation_date
p784
I1231741820
sVscore
p785
I50
sVowner
p786
(dp787
Vuser_id
p788
I35092
sVprofile_image
p789
Vhttps://i.stack.imgur.com/a0QNl.jpg?s=128&g=1
p790
sVuser_type
p791
Vregistered
p792
sVreputation
p793
I81156
sVlink
p794
Vhttp://stackoverflow.com/users/35092/charlie-martin
p795
sVaccept_rate
p796
I81
sVdisplay_name
p797
VCharlie Martin
p798
ssVis_accepted
p799
I01
sVlast_edit_date
p800
I1421672750
sVanswer_id
p801
I434612
sa(dp802
Vbody
p803
V<p><a href="http://docs.python.org/library/py_compile.html">py_compile \u2014 Compile Python source files</a></p>\u000a\u000a<pre><code>import py_compile\u000apy_compile.compile('my_script.py')\u000a</code></pre>\u000a
p804
sVquestion_id
p805
I4537411
sVlast_activity_date
p806
I1421422497
sVcreation_date
p807
I1293438185
sVscore
p808
I40
sVowner
p809
(dp810
Vuser_id
p811
I177517
sVprofile_image
p812
Vhttps://www.gravatar.com/avatar/783e2bdea442cdc63481b346762ae01b?s=128&d=identicon&r=PG
p813
sVuser_type
p814
Vregistered
p815
sVreputation
p816
I1508
sVlink
p817
Vhttp://stackoverflow.com/users/177517/yurymik
p818
sVdisplay_name
p819
Vyurymik
p820
ssVis_accepted
p821
I01
sVlast_edit_date
p822
I1421422497
sVanswer_id
p823
I4537442
sa(dp824
Vbody
p825
V<p>You can try to do <code>json.loads()</code>, which will throw a <code>ValueError</code> if the string you pass can't be decoded as JSON.</p>\u000a\u000a<p>In general, the "<a href="https://docs.python.org/2/glossary.html#term-pythonic">Pythonic</a>" philosophy for this kind of situation is called <a href="https://docs.python.org/2/glossary.html#term-eafp">EAFP</a>, for <em>easier to ask for forgiveness than permission</em>.</p>\u000a
p826
sVquestion_id
p827
I5508509
sVlast_activity_date
p828
I1416951784
sVcreation_date
p829
I1301624734
sVscore
p830
I108
sVowner
p831
(dp832
Vuser_id
p833
I331137
sVprofile_image
p834
Vhttps://www.gravatar.com/avatar/bcd4882cf423f5c6e31c74427173f4a3?s=128&d=identicon&r=PG
p835
sVuser_type
p836
Vregistered
p837
sVreputation
p838
I20773
sVlink
p839
Vhttp://stackoverflow.com/users/331137/john-flatness
p840
sVdisplay_name
p841
VJohn Flatness
p842
ssVis_accepted
p843
I01
sVlast_edit_date
p844
I1416951784
sVanswer_id
p845
I5508552
sa(dp846
Vbody
p847
V<p><a href="http://docs.python.org/3.2/library/datetime.html#timedelta-objects" rel="noreferrer"><code>datetime.timedelta</code></a> is just the difference between two datetimes ... so it's like a period of time, in days / seconds / microseconds</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = datetime.datetime.now()\u000a&gt;&gt;&gt; b = datetime.datetime.now()\u000a&gt;&gt;&gt; c = b - a\u000a\u000a&gt;&gt;&gt; c\u000adatetime.timedelta(0, 4, 316543)\u000a&gt;&gt;&gt; c.days\u000a0\u000a&gt;&gt;&gt; c.seconds\u000a4\u000a&gt;&gt;&gt; c.microseconds\u000a316543\u000a</code></pre>\u000a\u000a<p>Be aware that <code>c.microseconds</code> only returns the microseconds portion of the timedelta! For timing purposes always use <code>c.total_seconds()</code>.</p>\u000a\u000a<p>You can do all sorts of maths with datetime.timedelta, eg:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; c / 10\u000adatetime.timedelta(0, 0, 431654)\u000a</code></pre>\u000a\u000a<p>It might be more useful to look at CPU time instead of wallclock time though ... that's operating system dependant though ... under Unix-like systems, check out the 'time' command.</p>\u000a
p848
sVquestion_id
p849
I766335
sVlast_activity_date
p850
I1415561599
sVcreation_date
p851
I1240183861
sVscore
p852
I113
sVowner
p853
(dp854
Vuser_id
p855
I90927
sVprofile_image
p856
Vhttps://www.gravatar.com/avatar/9e80361429f8d28b42b25dea248bb7c4?s=128&d=identicon&r=PG
p857
sVuser_type
p858
Vregistered
p859
sVreputation
p860
I3925
sVlink
p861
Vhttp://stackoverflow.com/users/90927/nickzoic
p862
sVdisplay_name
p863
VNickZoic
p864
ssVis_accepted
p865
I01
sVlast_edit_date
p866
I1415561599
sVanswer_id
p867
I766382
sa(dp868
Vbody
p869
V<p><code>__repr__</code> should return a printable representation of the object, most likely <em>one</em> of the ways possible to create this object. See official documentation <a href="http://docs.python.org/library/functions.html#repr" rel="noreferrer">here</a>. <code>__repr__</code> is more for developers while <code>__str__</code> is for end users.</p>\u000a\u000a<p>A simple example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Point:\u000a...   def __init__(self, x, y):\u000a...     self.x, self.y = x, y\u000a...   def __repr__(self):\u000a...     return 'Point(x=%s, y=%s)' % (self.x, self.y)\u000a&gt;&gt;&gt; p = Point(1, 2)\u000a&gt;&gt;&gt; p\u000aPoint(x=1, y=2)\u000a</code></pre>\u000a
p870
sVquestion_id
p871
I1984162
sVlast_activity_date
p872
I1415077275
sVcreation_date
p873
I1262239958
sVscore
p874
I96
sVowner
p875
(dp876
Vuser_id
p877
I7650
sVprofile_image
p878
Vhttps://www.gravatar.com/avatar/052338b3d753f00bb7724f2d2ca060a4?s=128&d=identicon&r=PG
p879
sVuser_type
p880
Vregistered
p881
sVreputation
p882
I6593
sVlink
p883
Vhttp://stackoverflow.com/users/7650/lazy1
p884
sVaccept_rate
p885
I64
sVdisplay_name
p886
Vlazy1
p887
ssVis_accepted
p888
I01
sVlast_edit_date
p889
I1415077275
sVanswer_id
p890
I1984177
sa(dp891
Vbody
p892
V<p>Sure, just index it as you normally would.  E.g. <code>y = x[:k, :]</code>  This will return a view into the original array. No data will be copied, and any updates made to <code>y</code> will be reflected in <code>x</code> and vice versa.</p>\u000a\u000a<hr>\u000a\u000a<p>Edit: </p>\u000a\u000a<p>I commonly work with >10GB 3D arrays of uint8's, so I worry about this a lot... Numpy can be very efficient at memory management if you keep a few things in mind.\u000aHere are a few tips on avoiding making copies of arrays in memory: </p>\u000a\u000a<p>Use <code>+=</code>, <code>-=</code>, <code>*=</code>, etc to avoid making a copy of the array. E.g. <code>x += 10</code> will modify the array in place, while <code>x = x + 10</code> will make a copy and modify it.  (also, have a look a <a href="https://github.com/pydata/numexpr">numexpr</a>)  </p>\u000a\u000a<p>If you do want to make a copy with <code>x = x + 10</code>, be aware that <code>x = x + 10.0</code> will cause <code>x</code> to automatically be up-casted to a floating point array, if it wasn't already.  However, <code>x += 10.0</code>, where <code>x</code> is an integer array, will cause the <code>10.0</code> to be down-casted to an int of the same precision as the array, instead.  </p>\u000a\u000a<p>Additionally, many numpy functions take an <code>out</code> parameter, so you can do things like <code>np.abs(x, x)</code> to take the absolute value of <code>x</code> in-place.</p>\u000a\u000a<hr>\u000a\u000a<p>As a second edit, here's a few more on tips on views vs. copies with numpy arrays:</p>\u000a\u000a<p>Unlike python lists, <code>y = x[:]</code> does not return a copy, it returns a view. If you do want a copy (which will, of course, double the amount of memory you're using) use <code>y = x.copy()</code></p>\u000a\u000a<p>You'll often hear about "fancy indexing" of numpy arrays. Using a list (or integer array) as an index is "fancy indexing". It can be very useful, but copies the data.  </p>\u000a\u000a<p>As an example of this: <code>y = x[[0, 1, 2], :]</code> returns a copy, while <code>y = x[:3,:]</code> would return a view.  </p>\u000a\u000a<p>Even really crazy indexing like <code>x[4:100:5, :-10:-1, None]</code> is "normal" indexing and will return a view, though, so don't be afraid to use all kinds of slicing tricks on large arrays.</p>\u000a\u000a<p><code>x.astype(&lt;dtype&gt;)</code> will return a copy of the data as the new type, while<code>x.view(&lt;dtype&gt;)</code> will return a view.  </p>\u000a\u000a<p>Be careful with this, however... It's extremely powerful and useful, but you need to understand how the underlying data is stored in memory.  If you have an array of floats, and view them as ints, (or vice versa) numpy will interpret the underlying <em>bits</em> of the array as ints. </p>\u000a\u000a<p>For example, this means that <code>1.0</code> as a 64bit float on a little-endian system will be <code>4607182418800017408</code> when viewed as a 64bit int, and an array of <code>[  0,   0,   0,   0,   0,   0, 240,  63]</code> if viewed as a uint8.  This is really nice when you need to do bit-twiddling of some sort on large arrays, though... You have low level control over how the memory buffer is interpreted.</p>\u000a
p893
sVquestion_id
p894
I4370745
sVlast_activity_date
p895
I1406099924
sVcreation_date
p896
I1291670272
sVscore
p897
I174
sVowner
p898
(dp899
Vuser_id
p900
I325565
sVprofile_image
p901
Vhttps://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=128&d=identicon&r=PG
p902
sVuser_type
p903
Vregistered
p904
sVreputation
p905
I136691
sVlink
p906
Vhttp://stackoverflow.com/users/325565/joe-kington
p907
sVdisplay_name
p908
VJoe Kington
p909
ssVis_accepted
p910
I01
sVlast_edit_date
p911
I1406099924
sVanswer_id
p912
I4371049
sa(dp913
Vbody
p914
V<p>What does <code>dis</code> tell us:</p>\u000a\u000a<pre><code>Python 3.4.1 (default, May 19 2014, 13:10:29)\u000a[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; from dis import dis\u000a&gt;&gt;&gt; dis("""x = [1,2,3,4,5]\u000a... for x in x:\u000a...     print(x)\u000a... print(x)""")\u000a\u000a  1           0 LOAD_CONST               0 (1)\u000a              3 LOAD_CONST               1 (2)\u000a              6 LOAD_CONST               2 (3)\u000a              9 LOAD_CONST               3 (4)\u000a             12 LOAD_CONST               4 (5)\u000a             15 BUILD_LIST               5\u000a             18 STORE_NAME               0 (x)\u000a\u000a  2          21 SETUP_LOOP              24 (to 48)\u000a             24 LOAD_NAME                0 (x)\u000a             27 GET_ITER\u000a        &gt;&gt;   28 FOR_ITER                16 (to 47)\u000a             31 STORE_NAME               0 (x)\u000a\u000a  3          34 LOAD_NAME                1 (print)\u000a             37 LOAD_NAME                0 (x)\u000a             40 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\u000a             43 POP_TOP\u000a             44 JUMP_ABSOLUTE           28\u000a        &gt;&gt;   47 POP_BLOCK\u000a\u000a  4     &gt;&gt;   48 LOAD_NAME                1 (print)\u000a             51 LOAD_NAME                0 (x)\u000a             54 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\u000a             57 POP_TOP\u000a             58 LOAD_CONST               5 (None)\u000a             61 RETURN_VALUE\u000a</code></pre>\u000a\u000a<p>The key bits are sections 2 and 3 - we load the value out of <code>x</code> (<code>24 LOAD_NAME 0 (x)</code>) and then we get its iterator (<code>27 GET_ITER</code>) and start iterating over it (<code>28 FOR_ITER</code>).  Python <em>never goes back to load the iterator again</em>. </p>\u000a\u000a<p><em>Aside:</em> It wouldn't make any sense to do so, since it already has the iterator, and as <a href="http://stackoverflow.com/a/24690950/135978">Abhijit points out in his answer</a>, <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement">Section 7.3 of Python's specification</a> actually requires this behavior).</p>\u000a\u000a<p>When the name <code>x</code> gets overwritten to point at each value inside of the list formerly known as <code>x</code> Python doesn't have any problems finding the iterator because it never needs to look at the name <code>x</code> again to finish the iteration protocol.</p>\u000a
p915
sVquestion_id
p916
I24689967
sVlast_activity_date
p917
I1405100169
sVcreation_date
p918
I1405052457
sVscore
p919
I66
sVowner
p920
(dp921
Vuser_id
p922
I135978
sVprofile_image
p923
Vhttps://www.gravatar.com/avatar/8931e023c82f232d4d02a115710fb8fc?s=128&d=identicon&r=PG
p924
sVuser_type
p925
Vregistered
p926
sVreputation
p927
I90210
sVlink
p928
Vhttp://stackoverflow.com/users/135978/sean-vieira
p929
sVaccept_rate
p930
I100
sVdisplay_name
p931
VSean Vieira
p932
ssVis_accepted
p933
I01
sVlast_edit_date
p934
I1405100169
sVanswer_id
p935
I24690060
sa(dp936
Vbody
p937
V<p><a href="http://docs.python-requests.org/en/v1.2.3/user/advanced/#prepared-requests" rel="noreferrer">Since v1.2.3</a> Requests added the PreparedRequest object. As per the documentation "it contains the exact bytes that will be sent to the server".</p>\u000a\u000a<p>One can use this to pretty print a request, like so:</p>\u000a\u000a<pre><code>import requests\u000a\u000areq = requests.Request('POST','http://stackoverflow.com',headers={'X-Custom':'Test'},data='a=1&amp;b=2')\u000aprepared = req.prepare()\u000a\u000adef pretty_print_POST(req):\u000a    """\u000a    At this point it is completely built and ready\u000a    to be fired; it is "prepared".\u000a\u000a    However pay attention at the formatting used in \u000a    this function because it is programmed to be pretty \u000a    printed and may differ from the actual request.\u000a    """\u000a    print('{}\u005cn{}\u005cn{}\u005cn\u005cn{}'.format(\u000a        '-----------START-----------',\u000a        req.method + ' ' + req.url,\u000a        '\u005cn'.join('{}: {}'.format(k, v) for k, v in req.headers.items()),\u000a        req.body,\u000a    ))\u000a\u000apretty_print_POST(prepared)\u000a</code></pre>\u000a\u000a<p>which produces:</p>\u000a\u000a<pre><code>-----------START-----------\u000aPOST http://stackoverflow.com/\u000aContent-Length: 7\u000aX-Custom: Test\u000a\u000aa=1&amp;b=2\u000a</code></pre>\u000a\u000a<p>Then you can send the actual request with this:</p>\u000a\u000a<pre><code>s = requests.Session()\u000as.send(prepared)\u000a</code></pre>\u000a\u000a<p>These links are to the latest documentation available, so they might change in content:\u000a<a href="http://docs.python-requests.org/en/latest/user/advanced/#prepared-requests" rel="noreferrer">Advanced - Prepared requests</a> and <a href="http://docs.python-requests.org/en/latest/api/#lower-level-classes" rel="noreferrer">API - Lower level classes</a></p>\u000a
p938
sVquestion_id
p939
I20658572
sVlast_activity_date
p940
I1400789468
sVcreation_date
p941
I1400789468
sVscore
p942
I67
sVowner
p943
(dp944
Vuser_id
p945
I251509
sVprofile_image
p946
Vhttps://www.gravatar.com/avatar/cae460d3875e06e6dad9f3fd23c76fb6?s=128&d=identicon&r=PG
p947
sVuser_type
p948
Vregistered
p949
sVreputation
p950
I900
sVlink
p951
Vhttp://stackoverflow.com/users/251509/antonioherraizs
p952
sVdisplay_name
p953
VAntonioHerraizS
p954
ssVis_accepted
p955
I01
sVanswer_id
p956
I23816211
sa(dp957
Vbody
p958
V<p>I haven't tried it, but this <a href="http://pypi.python.org/pypi/pysftp/" rel="nofollow noreferrer">pysftp</a> module might help, which in turn uses paramiko. I believe everything is client-side.</p>\u000a\u000a<p>The interesting command is probably <code>.execute()</code> which executes an arbitrary command on the remote machine. (The module also features <code>.get()</code> and <code>.put</code> methods which allude more to its FTP character).</p>\u000a\u000a<p>UPDATE:</p>\u000a\u000a<p>I've re-written the answer after the blog post I originally linked to is not available anymore. Some of the comments that refer to the old version of this answer will now look weird.</p>\u000a
p959
sVquestion_id
p960
I1233655
sVlast_activity_date
p961
I1399593580
sVcreation_date
p962
I1249483745
sVscore
p963
I38
sVowner
p964
(dp965
Vuser_id
p966
I127465
sVprofile_image
p967
Vhttps://www.gravatar.com/avatar/0ca64f67167d37e7041e561104034bb2?s=128&d=identicon&r=PG
p968
sVuser_type
p969
Vregistered
p970
sVreputation
p971
I10060
sVlink
p972
Vhttp://stackoverflow.com/users/127465/thomash
p973
sVaccept_rate
p974
I94
sVdisplay_name
p975
VThomasH
p976
ssVis_accepted
p977
I01
sVlast_edit_date
p978
I1399593580
sVanswer_id
p979
I1233763
sa(dp980
Vbody
p981
V<p>I'm not sure whether it is a new feature in later versions of matplotlib, but at least for 1.3.1, this is simply:</p>\u000a\u000a<pre><code>plt.title(figure_title, y=1.08)\u000a</code></pre>\u000a\u000a<p>This also works for <code>plt.suptitle()</code>, but not (yet) for <code>plt.xlabel()</code>, etc.</p>\u000a
p982
sVquestion_id
p983
I12750355
sVlast_activity_date
p984
I1398680067
sVcreation_date
p985
I1398680067
sVscore
p986
I132
sVowner
p987
(dp988
Vuser_id
p989
I2003079
sVprofile_image
p990
Vhttps://www.gravatar.com/avatar/c3f70a7b41de014046acab0988b6d30c?s=128&d=identicon&r=PG
p991
sVuser_type
p992
Vregistered
p993
sVreputation
p994
I2196
sVlink
p995
Vhttp://stackoverflow.com/users/2003079/herrlich10
p996
sVaccept_rate
p997
I40
sVdisplay_name
p998
Vherrlich10
p999
ssVis_accepted
p1000
I01
sVanswer_id
p1001
I23338363
sa(dp1002
Vbody
p1003
V<p>The negation operator in Python is <code>not</code>. Therefore just replace your <code>!</code> with <code>not</code>.</p>\u000a\u000a<p>For your example, do this:</p>\u000a\u000a<pre><code>if not os.path.exists("/usr/share/sounds/blues") :\u000a    proc = subprocess.Popen(["mkdir", "/usr/share/sounds/blues"])\u000a    proc.wait()\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>For your specific example (as Neil said in the comments), you don't have to use the <code>subprocess</code> module, you can simply use <a href="http://docs.python.org/2/library/os.html#os.mkdir" rel="noreferrer"><code>os.mkdir()</code></a> to get the result you need, with added exception handling goodness.</p>\u000a\u000a<p>Example:</p>\u000a\u000a<pre><code>blues_sounds_path = "/usr/share/sounds/blues"\u000aif not os.path.exists(blues_sounds_path):\u000a    try:\u000a        os.mkdir(blues_sounds_path)\u000a    except OSError:\u000a        # Handle the case where the directory could not be created.\u000a</code></pre>\u000a
p1004
sVquestion_id
p1005
I6117733
sVlast_activity_date
p1006
I1394198941
sVcreation_date
p1007
I1306276910
sVscore
p1008
I110
sVowner
p1009
(dp1010
Vuser_id
p1011
I52724
sVprofile_image
p1012
Vhttps://www.gravatar.com/avatar/c1e5bf4421007b7cfe4dba5ecb24f777?s=128&d=identicon&r=PG
p1013
sVuser_type
p1014
Vregistered
p1015
sVreputation
p1016
I9809
sVlink
p1017
Vhttp://stackoverflow.com/users/52724/karl-nicoll
p1018
sVaccept_rate
p1019
I90
sVdisplay_name
p1020
VKarl Nicoll
p1021
ssVis_accepted
p1022
I01
sVlast_edit_date
p1023
I1394198941
sVanswer_id
p1024
I6117762
sa(dp1025
Vbody
p1026
V<p>Since version 1.4.0, <a href="http://docs.fabfile.org/en/1.4.0/usage/execution.html#ssh-config" rel="noreferrer">Fabric uses your ssh config</a> (partly). However, you need to explicitly enable it, with</p>\u000a\u000a<pre><code>env.use_ssh_config = True\u000a</code></pre>\u000a\u000a<p>somewhere near the top of your fabfile. Once you do this, Fabric should read your ssh config (from <code>~/.ssh/config</code> by default, or from <code>env.ssh_config_path</code>).</p>\u000a\u000a<p>One warning: if you use a version older than 1.5.4, an abort will occur if <code>env.use_ssh_config</code> is set but there is no config file present. In that case, you can use a workaround like:</p>\u000a\u000a<pre><code>if env.ssh_config_path and os.path.isfile(os.path.expanduser(env.ssh_config_path)):\u000a    env.use_ssh_config = True\u000a</code></pre>\u000a
p1027
sVquestion_id
p1028
I3077281
sVlast_activity_date
p1029
I1385310559
sVcreation_date
p1030
I1331646123
sVscore
p1031
I123
sVowner
p1032
(dp1033
Vuser_id
p1034
I158773
sVprofile_image
p1035
Vhttps://www.gravatar.com/avatar/3d8c280edaafd988742f45e81f89d24a?s=128&d=identicon&r=PG
p1036
sVuser_type
p1037
Vregistered
p1038
sVreputation
p1039
I21021
sVlink
p1040
Vhttp://stackoverflow.com/users/158773/rbp
p1041
sVdisplay_name
p1042
Vrbp
p1043
ssVis_accepted
p1044
I01
sVlast_edit_date
p1045
I1385310559
sVanswer_id
p1046
I9685171
sa(dp1047
Vbody
p1048
V<pre><code>df['color'] = np.where(df['Set']=='Z', 'green', 'red')\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>For example,</p>\u000a\u000a<pre><code>import pandas as pd\u000aimport numpy as np\u000a\u000adf = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})\u000adf['color'] = np.where(df['Set']=='Z', 'green', 'red')\u000aprint(df)\u000a</code></pre>\u000a\u000a<p>yields</p>\u000a\u000a<pre><code>  Set Type  color\u000a0   Z    A  green\u000a1   Z    B  green\u000a2   X    B    red\u000a3   Y    C    red\u000a</code></pre>\u000a
p1049
sVquestion_id
p1050
I19913659
sVlast_activity_date
p1051
I1384196595
sVcreation_date
p1052
I1384196595
sVscore
p1053
I121
sVowner
p1054
(dp1055
Vuser_id
p1056
I190597
sVprofile_image
p1057
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p1058
sVuser_type
p1059
Vregistered
p1060
sVreputation
p1061
I425294
sVlink
p1062
Vhttp://stackoverflow.com/users/190597/unutbu
p1063
sVaccept_rate
p1064
I88
sVdisplay_name
p1065
Vunutbu
p1066
ssVis_accepted
p1067
I01
sVanswer_id
p1068
I19913845
sa(dp1069
Vbody
p1070
V<p>Python allows putting multiple <code>open()</code> statements in a single <code>with</code>.  You comma-separate them.   Your code would then be:</p>\u000a\u000a<pre><code>def filter(txt, oldfile, newfile):\u000a    '''\u005c\u000a    Read a list of names from a file line by line into an output file.\u000a    If a line begins with a particular name, insert a string of text\u000a    after the name before appending the line to the output file.\u000a    '''\u000a\u000a    with open(newfile, 'w') as outfile, open(oldfile, 'r', encoding='utf-8') as infile:\u000a        for line in infile:\u000a            if line.startswith(txt):\u000a                line = line[0:len(txt)] + ' - Truly a great person!\u005cn'\u000a            outfile.write(line)\u000a\u000a# input the name you want to check against\u000atext = input('Please enter the name of a great person: ')    \u000aletsgo = filter(text,'Spanish', 'Spanish2')\u000a</code></pre>\u000a\u000a<p>And no, you don't gain anything by putting an explicit <code>return</code> at the end of your function.  You can use <code>return</code> to exit early, but you had it at the end, and the function will exit without it.  (Of course with functions that return a value, you use the <code>return</code> to specify the value to return.)</p>\u000a\u000a<p>Using multiple <code>open()</code> items with <code>with</code> was not supported in Python 2.5 when the <code>with</code> statement was introduced, or in Python 2.6, but it is supported in Python 2.7 and Python 3.1 or newer.</p>\u000a\u000a<p><a href="http://docs.python.org/reference/compound_stmts.html#the-with-statement">http://docs.python.org/reference/compound_stmts.html#the-with-statement</a>\u000a<a href="http://docs.python.org/release/3.1/reference/compound_stmts.html#the-with-statement">http://docs.python.org/release/3.1/reference/compound_stmts.html#the-with-statement</a></p>\u000a\u000a<p>If you are writing code that must run in Python 2.5, 2.6 or 3.0, nest the <code>with</code> statements as the other answers suggested or use <a href="http://docs.python.org/library/contextlib.html#contextlib.nested"><code>contextlib.nested</code></a>.</p>\u000a
p1071
sVquestion_id
p1072
I9282967
sVlast_activity_date
p1073
I1382996412
sVcreation_date
p1074
I1329248009
sVscore
p1075
I142
sVowner
p1076
(dp1077
Vuser_id
p1078
I166949
sVprofile_image
p1079
Vhttps://i.stack.imgur.com/tIFie.png?s=128&g=1
p1080
sVuser_type
p1081
Vregistered
p1082
sVreputation
p1083
I43195
sVlink
p1084
Vhttp://stackoverflow.com/users/166949/steveha
p1085
sVaccept_rate
p1086
I90
sVdisplay_name
p1087
Vsteveha
p1088
ssVis_accepted
p1089
I01
sVlast_edit_date
p1090
I1382996412
sVanswer_id
p1091
I9283052
sa(dp1092
Vbody
p1093
V<p>There is a feature request for this scheduled for Numpy 2.0.0: <a href="https://github.com/numpy/numpy/issues/2269" rel="noreferrer">https://github.com/numpy/numpy/issues/2269</a></p>\u000a
p1094
sVquestion_id
p1095
I7632963
sVlast_activity_date
p1096
I1382341478
sVcreation_date
p1097
I1317812747
sVscore
p1098
I37
sVowner
p1099
(dp1100
Vuser_id
p1101
I907578
sVprofile_image
p1102
Vhttps://www.gravatar.com/avatar/bbf9572666ca87e3bc0369274fef3ad6?s=128&d=identicon&r=PG
p1103
sVuser_type
p1104
Vregistered
p1105
sVreputation
p1106
I7265
sVlink
p1107
Vhttp://stackoverflow.com/users/907578/cyborg
p1108
sVaccept_rate
p1109
I80
sVdisplay_name
p1110
Vcyborg
p1111
ssVis_accepted
p1112
I01
sVlast_edit_date
p1113
I1382341478
sVanswer_id
p1114
I7660322
sa(dp1115
Vbody
p1116
V<p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">Unofficial Windows Binaries for Python Extension Packages</a></p>\u000a\u000a<p>you can find any python libs from here</p>\u000a
p1117
sVquestion_id
p1118
I19019720
sVlast_activity_date
p1119
I1380250849
sVcreation_date
p1120
I1380250849
sVscore
p1121
I60
sVowner
p1122
(dp1123
Vuser_id
p1124
I2590376
sVprofile_image
p1125
Vhttps://www.gravatar.com/avatar/7f7f5693ec26713074bc9b10eccb5a45?s=128&d=identicon&r=PG
p1126
sVuser_type
p1127
Vregistered
p1128
sVreputation
p1129
I1079
sVlink
p1130
Vhttp://stackoverflow.com/users/2590376/kill-console
p1131
sVaccept_rate
p1132
I90
sVdisplay_name
p1133
VKill Console
p1134
ssVis_accepted
p1135
I01
sVanswer_id
p1136
I19042026
sa(dp1137
Vbody
p1138
V<p><strong>Update:</strong> First algorithm described here is obsoleted by <a href="http://stackoverflow.com/a/18247391/1009831">Armin Rigo's second answer</a>, which is much simpler and more efficient. But both these methods have one disadvantage. They need many hours to find the result for one million integers. So I tried two more variants (see second half of this answer) where the range of input integers is assumed to be limited. Such limitation allows much faster algorithms. Also I tried to optimize Armin Rigo's code. See my benchmarking results at the end.</p>\u000a\u000a<hr>\u000a\u000a<p>Here is an idea of algorithm using O(N) memory. Time complexity is O(N<sup>2</sup> log N), but may be decreased to O(N<sup>2</sup>).</p>\u000a\u000a<p>Algorithm uses the following data structures:</p>\u000a\u000a<ol>\u000a<li><code>prev</code>: array of indexes pointing to previous element of (possibly incomplete) subsequence.</li>\u000a<li><code>hash</code>: hashmap with key = difference between consecutive pairs in subsequence and value = two other hashmaps. For these other hashmaps: key = starting/ending index of the subsequence, value = pair of (subsequence length, ending/starting index of the subsequence).</li>\u000a<li><code>pq</code>: priority queue for all possible "difference" values for subsequences stored in <code>prev</code> and <code>hash</code>.</li>\u000a</ol>\u000a\u000a<p>Algorithm:</p>\u000a\u000a<ol>\u000a<li>Initialize <code>prev</code> with indexes <code>i-1</code>. Update <code>hash</code> and <code>pq</code> to register all (incomplete) subsequences found on this step and their "differences".</li>\u000a<li>Get (and remove) smallest "difference" from <code>pq</code>. Get corresponding record from <code>hash</code> and scan one of second-level hash maps. At this time all subsequences with given "difference" are complete. If second-level hash map contains subsequence length better than found so far, update the best result.</li>\u000a<li>In the array <code>prev</code>: for each element of any sequence found on step #2, decrement index and update <code>hash</code> and possibly <code>pq</code>. While updating <code>hash</code>, we could perform one of the following operations: add a new subsequence of length 1, or grow some existing subsequence by 1, or merge two existing subsequences.</li>\u000a<li>Remove hash map record found on step #2.</li>\u000a<li>Continue from step #2 while <code>pq</code> is not empty.</li>\u000a</ol>\u000a\u000a<p>This algorithm updates O(N) elements of <code>prev</code> O(N) times each. And each of these updates may require to add a new "difference" to <code>pq</code>. All this means time complexity of O(N<sup>2</sup> log N) if we use simple heap implementation for <code>pq</code>. To decrease it to O(N<sup>2</sup>) we might use more advanced priority queue implementations. Some of the possibilities are listed on this page: <a href="http://www.theturingmachine.com/algorithms/heaps.html" rel="noreferrer">Priority Queues</a>.</p>\u000a\u000a<p>See corresponding Python code on <a href="http://ideone.com/h8oTYv" rel="noreferrer">Ideone</a>. This code does not allow duplicate elements in the list. It is possible to fix this, but it would be a good optimization anyway to remove duplicates (and to find the longest subsequence beyond duplicates separately).</p>\u000a\u000a<p>And <a href="http://ideone.com/bW8meY" rel="noreferrer">the same code after a little optimization</a>. Here search is terminated as soon as subsequence length multiplied by possible subsequence "difference" exceeds source list range.</p>\u000a\u000a<hr>\u000a\u000a<p>Armin Rigo's code is simple and pretty efficient. But in some cases it does some extra computations that may be avoided. Search may be terminated as soon as subsequence length multiplied by possible subsequence "difference" exceeds source list range:</p>\u000a\u000a<pre><code>def findLESS(A):\u000a  Aset = set(A)\u000a  lmax = 2\u000a  d = 1\u000a  minStep = 0\u000a\u000a  while (lmax - 1) * minStep &lt;= A[-1] - A[0]:\u000a    minStep = A[-1] - A[0] + 1\u000a    for j, b in enumerate(A):\u000a      if j+d &lt; len(A):\u000a        a = A[j+d]\u000a        step = a - b\u000a        minStep = min(minStep, step)\u000a        if a + step in Aset and b - step not in Aset:\u000a          c = a + step\u000a          count = 3\u000a          while c + step in Aset:\u000a            c += step\u000a            count += 1\u000a          if count &gt; lmax:\u000a            lmax = count\u000a    d += 1\u000a\u000a  return lmax\u000a\u000aprint(findLESS([1, 4, 5, 7, 8, 12]))\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>If range of integers in source data (M) is small, a simple algorithm is possible with O(M<sup>2</sup>) time and O(M) space:</p>\u000a\u000a<pre><code>def findLESS(src):\u000a  r = [False for i in range(src[-1]+1)]\u000a  for x in src:\u000a    r[x] = True\u000a\u000a  d = 1\u000a  best = 1\u000a\u000a  while best * d &lt; len(r):\u000a    for s in range(d):\u000a      l = 0\u000a\u000a      for i in range(s, len(r), d):\u000a        if r[i]:\u000a          l += 1\u000a          best = max(best, l)\u000a        else:\u000a          l = 0\u000a\u000a    d += 1\u000a\u000a  return best\u000a\u000a\u000aprint(findLESS([1, 4, 5, 7, 8, 12]))\u000a</code></pre>\u000a\u000a<p>It is similar to the first method by Armin Rigo, but it doesn't use any dynamic data structures. I suppose source data has no duplicates. And (to keep the code simple) I also suppose that minimum input value is non-negative and close to zero.</p>\u000a\u000a<hr>\u000a\u000a<p>Previous algorithm may be improved if instead of the array of booleans we use a bitset data structure and bitwise operations to process data in parallel. The code shown below implements bitset as a built-in Python integer. It has the same assumptions: no duplicates, minimum input value is non-negative and close to zero. Time complexity is O(M<sup>2</sup> * log L) where L is the length of optimal subsequence, space complexity is O(M):</p>\u000a\u000a<pre><code>def findLESS(src):\u000a  r = 0\u000a  for x in src:\u000a    r |= 1 &lt;&lt; x\u000a\u000a  d = 1\u000a  best = 1\u000a\u000a  while best * d &lt; src[-1] + 1:\u000a    c = best\u000a    rr = r\u000a\u000a    while c &amp; (c-1):\u000a      cc = c &amp; -c\u000a      rr &amp;= rr &gt;&gt; (cc * d)\u000a      c &amp;= c-1\u000a\u000a    while c != 1:\u000a      c = c &gt;&gt; 1\u000a      rr &amp;= rr &gt;&gt; (c * d)\u000a\u000a    rr &amp;= rr &gt;&gt; d\u000a\u000a    while rr:\u000a      rr &amp;= rr &gt;&gt; d\u000a      best += 1\u000a\u000a    d += 1\u000a\u000a  return best\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>Benchmarks:</strong></p>\u000a\u000a<p>Input data (about 100000 integers) is generated this way:</p>\u000a\u000a<pre><code>random.seed(42)\u000as = sorted(list(set([random.randint(0,200000) for r in xrange(140000)])))\u000a</code></pre>\u000a\u000a<p>And for fastest algorithms I also used the following data (about 1000000 integers):</p>\u000a\u000a<pre><code>s = sorted(list(set([random.randint(0,2000000) for r in xrange(1400000)])))\u000a</code></pre>\u000a\u000a<p>All results show time in seconds:</p>\u000a\u000a<pre><code>Size:                         100000   1000000\u000aSecond answer by Armin Rigo:     634         ?\u000aBy Armin Rigo, optimized:         64     &gt;5000\u000aO(M^2) algorithm:                 53      2940\u000aO(M^2*L) algorithm:                7       711\u000a</code></pre>\u000a
p1139
sVquestion_id
p1140
I18159911
sVlast_activity_date
p1141
I1376594706
sVcreation_date
p1142
I1376215729
sVscore
p1143
I11
sVowner
p1144
(dp1145
Vuser_id
p1146
I1009831
sVprofile_image
p1147
Vhttps://www.gravatar.com/avatar/7f63c0d0ab3657ff587817a938c555bd?s=128&d=identicon&r=PG
p1148
sVuser_type
p1149
Vregistered
p1150
sVreputation
p1151
I20854
sVlink
p1152
Vhttp://stackoverflow.com/users/1009831/evgeny-kluev
p1153
sVdisplay_name
p1154
VEvgeny Kluev
p1155
ssVis_accepted
p1156
I01
sVlast_edit_date
p1157
I1376594706
sVanswer_id
p1158
I18170834
sa(dp1159
Vbody
p1160
V<p>Here's a short snippet using the SoupStrainer class in BeautifulSoup:</p>\u000a\u000a<pre><code>import httplib2\u000afrom BeautifulSoup import BeautifulSoup, SoupStrainer\u000a\u000ahttp = httplib2.Http()\u000astatus, response = http.request('http://www.nytimes.com')\u000a\u000afor link in BeautifulSoup(response, parseOnlyThese=SoupStrainer('a')):\u000a    if link.has_attr('href'):\u000a        print link['href']\u000a</code></pre>\u000a\u000a<p>The BeautifulSoup documentation is actually quite good, and covers a number of typical scenarios:</p>\u000a\u000a<p><a href="http://www.crummy.com/software/BeautifulSoup/documentation.html" rel="noreferrer">http://www.crummy.com/software/BeautifulSoup/documentation.html</a></p>\u000a\u000a<p>Edit: Note that I used the SoupStrainer class because it's a bit more efficient (memory and speed wise), if you know what you're parsing in advance.</p>\u000a
p1161
sVquestion_id
p1162
I1080411
sVlast_activity_date
p1163
I1369427368
sVcreation_date
p1164
I1246647235
sVscore
p1165
I114
sVowner
p1166
(dp1167
Vuser_id
p1168
I2611
sVprofile_image
p1169
Vhttps://www.gravatar.com/avatar/3d9b2df0d1610c9418ba9e9013dbd418?s=128&d=identicon&r=PG
p1170
sVuser_type
p1171
Vregistered
p1172
sVreputation
p1173
I64105
sVlink
p1174
Vhttp://stackoverflow.com/users/2611/ars
p1175
sVdisplay_name
p1176
Vars
p1177
ssVis_accepted
p1178
I01
sVlast_edit_date
p1179
I1369427368
sVanswer_id
p1180
I1080472
sa(dp1181
Vbody
p1182
V<p>You can use <a href="http://www.python.org/dev/peps/pep-3101/" rel="noreferrer">advanced string formatting</a>, available in Python 2.6 and Python 3.x:</p>\u000a\u000a<pre><code>incoming = 'arbit'\u000aresult = '{0} hello world {0} hello world {0}'.format(incoming)\u000a</code></pre>\u000a
p1183
sVquestion_id
p1184
I1225637
sVlast_activity_date
p1185
I1369092604
sVcreation_date
p1186
I1249357741
sVscore
p1187
I136
sVowner
p1188
(dp1189
Vuser_id
p1190
I9530
sVprofile_image
p1191
Vhttps://www.gravatar.com/avatar/924800e76876546c5c575c0175e1f434?s=128&d=identicon&r=PG
p1192
sVuser_type
p1193
Vregistered
p1194
sVreputation
p1195
I259251
sVlink
p1196
Vhttp://stackoverflow.com/users/9530/adam-rosenfield
p1197
sVaccept_rate
p1198
I78
sVdisplay_name
p1199
VAdam Rosenfield
p1200
ssVis_accepted
p1201
I01
sVlast_edit_date
p1202
I1369092604
sVanswer_id
p1203
I1225656
sa(dp1204
Vbody
p1205
V<p>The following code should do the job, it is cross-platform and runs on Python 2.4-3.2. I tested it on Windows, OS X and Linux.</p>\u000a\u000a<pre><code>from tendo import singleton\u000ame = singleton.SingleInstance() # will sys.exit(-1) if other instance is running\u000a</code></pre>\u000a\u000a<p>The latest code version is available <a href="https://github.com/pycontribs/tendo/blob/master/tendo/singleton.py" rel="noreferrer">singleton.py</a>. Please <a href="https://github.com/pycontribs/tendo/issues" rel="noreferrer">file bugs here</a>.</p>\u000a\u000a<p>You can install tend using one of the following methods:</p>\u000a\u000a<ul>\u000a<li><code>easy_install tendo</code></li>\u000a<li><code>pip install tendo</code></li>\u000a<li>manually by getting it from <a href="http://pypi.python.org/pypi/tendo" rel="noreferrer">http://pypi.python.org/pypi/tendo</a></li>\u000a</ul>\u000a
p1206
sVquestion_id
p1207
I380870
sVlast_activity_date
p1208
I1365937889
sVcreation_date
p1209
I1250073924
sVscore
p1210
I67
sVowner
p1211
(dp1212
Vuser_id
p1213
I99834
sVprofile_image
p1214
Vhttps://www.gravatar.com/avatar/63c50004c4f6eaf3235b9ea836f4b6cf?s=128&d=identicon&r=PG
p1215
sVuser_type
p1216
Vregistered
p1217
sVreputation
p1218
I55322
sVlink
p1219
Vhttp://stackoverflow.com/users/99834/sorin
p1220
sVaccept_rate
p1221
I47
sVdisplay_name
p1222
Vsorin
p1223
ssVis_accepted
p1224
I01
sVlast_edit_date
p1225
I1365937889
sVanswer_id
p1226
I1265445
sa(dp1227
Vbody
p1228
V<p>You can pass in the name of a model as a string to ForeignKey and it will do the right thing.</p>\u000a\u000a<p>So:</p>\u000a\u000a<pre><code>parentId = models.ForeignKey("CategoryModel")\u000a</code></pre>\u000a\u000a<p>Or you can use the string "self"</p>\u000a\u000a<pre><code>parentId = models.ForeignKey("self")\u000a</code></pre>\u000a
p1229
sVquestion_id
p1230
I15285626
sVlast_activity_date
p1231
I1362709826
sVcreation_date
p1232
I1362709518
sVscore
p1233
I126
sVowner
p1234
(dp1235
Vuser_id
p1236
I290784
sVprofile_image
p1237
Vhttps://www.gravatar.com/avatar/806da8b7c3158ee5cc9f8dbc4c3493f8?s=128&d=identicon&r=PG
p1238
sVuser_type
p1239
Vregistered
p1240
sVreputation
p1241
I6109
sVlink
p1242
Vhttp://stackoverflow.com/users/290784/jared-forsyth
p1243
sVaccept_rate
p1244
I70
sVdisplay_name
p1245
VJared Forsyth
p1246
ssVis_accepted
p1247
I01
sVlast_edit_date
p1248
I1362709826
sVanswer_id
p1249
I15285656
sa(dp1250
Vbody
p1251
V<p>You need to include the protocol scheme:</p>\u000a\u000a<pre><code>'http://192.168.1.61:8080/api/call'\u000a</code></pre>\u000a\u000a<p>Without the <code>http://</code> part, <code>requests</code> has no idea how to connect to the remote server.</p>\u000a
p1252
sVquestion_id
p1253
I15115328
sVlast_activity_date
p1254
I1361977317
sVcreation_date
p1255
I1361977317
sVscore
p1256
I133
sVowner
p1257
(dp1258
Vuser_id
p1259
I100297
sVprofile_image
p1260
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p1261
sVuser_type
p1262
Vmoderator
p1263
sVreputation
p1264
I554897
sVlink
p1265
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p1266
sVdisplay_name
p1267
VMartijn Pieters
p1268
ssVis_accepted
p1269
I01
sVanswer_id
p1270
I15115345
sa(dp1271
Vbody
p1272
V<p>The way you use the <code>csv</code> module changed in Python 3 in several respects <a href="http://docs.python.org/dev/library/csv.html#csv.writer" rel="noreferrer">(docs)</a>, at least with respect to how you need to open the file.  Anyway, something like</p>\u000a\u000a<pre><code>import csv\u000awith open('test.csv', 'w', newline='') as fp:\u000a    a = csv.writer(fp, delimiter=',')\u000a    data = [['Me', 'You'],\u000a            ['293', '219'],\u000a            ['54', '13']]\u000a    a.writerows(data)\u000a</code></pre>\u000a\u000a<p>should work.</p>\u000a
p1273
sVquestion_id
p1274
I14693646
sVlast_activity_date
p1275
I1360005343
sVcreation_date
p1276
I1360005343
sVscore
p1277
I112
sVowner
p1278
(dp1279
Vuser_id
p1280
I487339
sVprofile_image
p1281
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p1282
sVuser_type
p1283
Vregistered
p1284
sVreputation
p1285
I147176
sVlink
p1286
Vhttp://stackoverflow.com/users/487339/dsm
p1287
sVdisplay_name
p1288
VDSM
p1289
ssVis_accepted
p1290
I01
sVanswer_id
p1291
I14693848
sa(dp1292
Vbody
p1293
V<p>I agree with you that using <code>typemap</code> gets a little messy, but it is the right way to accomplish this task. You are also right that the SWIG documentation does not directly say that <code>%pythonappend</code> is incompatible with <code>-builtin</code>, but it is strongly implied: <code>%pythonappend</code> <em>adds to the Python proxy class</em>, and the Python proxy class does not exist at all in conjunction with the <code>-builtin</code> flag.</p>\u000a\u000a<p>Before, what you were doing was having SWIG convert the C++ <code>std::vector</code> objects into Python tuples, and then passing those tuples back down to <code>numpy</code> - where they were converted again.</p>\u000a\u000a<p>What you really want to do is convert them once, at the C level.</p>\u000a\u000a<p>Here's some code which will turn all <code>std::vector&lt;int&gt;</code> objects into NumPy integer arrays:</p>\u000a\u000a<pre><code>%{\u000a#include "numpy/arrayobject.h"\u000a%}\u000a\u000a%init %{\u000a    import_array();\u000a%}\u000a\u000a%typemap(out) std::vector&lt;int&gt; {\u000a    npy_intp result_size = $1.size();\u000a\u000a    npy_intp dims[1] = { result_size };\u000a\u000a    PyArrayObject* npy_arr = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_INT);\u000a    int* dat = (int*) PyArray_DATA(npy_arr);\u000a\u000a    for (size_t i = 0; i &lt; result_size; ++i) {\u000a        dat[i] = $1[i];\u000a    }\u000a\u000a    $result = PyArray_Return(npy_arr);\u000a}\u000a</code></pre>\u000a\u000a<p>This uses the C-level numpy functions to construct and return an array. In order, it:</p>\u000a\u000a<ul>\u000a<li>Ensures NumPy's <code>arrayobject.h</code> file is included in the C++ output file</li>\u000a<li>Causes <code>import_array</code> to be called when the Python module is loaded (otherwise, all NumPy methods will segfault)</li>\u000a<li>Maps any returns of <code>std::vector&lt;int&gt;</code> into NumPy arrays with a <code>typemap</code></li>\u000a</ul>\u000a\u000a<p>This code should be placed <em>before</em> you <code>%import</code> the headers which contain the functions returning <code>std::vector&lt;int&gt;</code>. Other than that restriction, it's entirely self-contained, so it shouldn't add too much subjective "mess" to your codebase.</p>\u000a\u000a<p>If you need other vector types, you can just change the <code>NPY_INT</code> and all the <code>int*</code> and <code>int</code> bits, otherwise duplicating the function above.</p>\u000a
p1294
sVquestion_id
p1295
I9270052
sVlast_activity_date
p1296
I1357913445
sVcreation_date
p1297
I1357838308
sVscore
p1298
I6
sVowner
p1299
(dp1300
Vuser_id
p1301
I383402
sVprofile_image
p1302
Vhttps://www.gravatar.com/avatar/8c4a15feb7408cade1a8ad5bf34d44a4?s=128&d=identicon&r=PG
p1303
sVuser_type
p1304
Vregistered
p1305
sVreputation
p1306
I56954
sVlink
p1307
Vhttp://stackoverflow.com/users/383402/borealid
p1308
sVaccept_rate
p1309
I60
sVdisplay_name
p1310
VBorealid
p1311
ssVis_accepted
p1312
I01
sVlast_edit_date
p1313
I1357913445
sVanswer_id
p1314
I14263541
sa(dp1315
Vbody
p1316
V<p>I don't know what you mean by 'manually'.  You can choose a colourmap and make a colour array easily enough:</p>\u000a\u000a<pre><code>import numpy as np\u000aimport matplotlib.pyplot as plt\u000aimport matplotlib.cm as cm\u000a\u000ax = np.arange(10)\u000ays = [i+x+(i*x)**2 for i in range(10)]\u000a\u000acolors = cm.rainbow(np.linspace(0, 1, len(ys)))\u000afor y, c in zip(ys, colors):\u000a    plt.scatter(x, y, color=c)\u000a</code></pre>\u000a\u000a<p>or make your own colour cycler using <code>itertools.cycle</code> and specifying the colours you want to loop over, using <code>next</code> to get the one you want.  For example (I'm too lazy to type out ten colours):</p>\u000a\u000a<pre><code>colors = itertools.cycle(["r", "b", "g"])\u000afor y in ys:\u000a    plt.scatter(x, y, color=next(colors))\u000a</code></pre>\u000a\u000a<p>Come to think of it, maybe it's cleaner not to use <code>zip</code> with the first one too:</p>\u000a\u000a<pre><code>colors = iter(cm.rainbow(np.linspace(0, 1, len(ys))))\u000afor y in ys:\u000a    plt.scatter(x, y, color=next(colors))\u000a</code></pre>\u000a\u000a<p>[PS: I really hate that I have to drop the 'u' when working with matplotlib..]</p>\u000a
p1317
sVquestion_id
p1318
I12236566
sVlast_activity_date
p1319
I1346596747
sVcreation_date
p1320
I1346596747
sVscore
p1321
I121
sVowner
p1322
(dp1323
Vuser_id
p1324
I487339
sVprofile_image
p1325
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p1326
sVuser_type
p1327
Vregistered
p1328
sVreputation
p1329
I147176
sVlink
p1330
Vhttp://stackoverflow.com/users/487339/dsm
p1331
sVdisplay_name
p1332
VDSM
p1333
ssVis_accepted
p1334
I01
sVanswer_id
p1335
I12236808
sa(dp1336
Vbody
p1337
V<p>Here is a complete, working file.  I pulled the original from the Google site and modified it to make it slightly more real world.</p>\u000a\u000a<p>A few things to notice:</p>\u000a\u000a<ol>\u000a<li>This code uses the <a href="http://code.google.com/appengine/docs/python/blobstore/" rel="noreferrer">BlobStore API</a></li>\u000a<li><p>The purpose of this line in the\u000aServeHandler class is to "fix" the\u000akey so that it gets rid of any name\u000amangling that may have occurred in\u000athe browser (I didn't observe any in\u000aChrome)</p>\u000a\u000a<pre><code>blob_key = str(urllib.unquote(blob_key))\u000a</code></pre></li>\u000a<li><p>The "save_as" clause at the end of this is important.  It will make sure that the file name does not get mangled when it is sent to your browser.  Get rid of it to observe what happens.</p>\u000a\u000a<pre><code>self.send_blob(blobstore.BlobInfo.get(blob_key), save_as=True)\u000a</code></pre></li>\u000a</ol>\u000a\u000a<p>Good Luck!</p>\u000a\u000a<pre><code>import os\u000aimport urllib\u000a\u000afrom google.appengine.ext import blobstore\u000afrom google.appengine.ext import webapp\u000afrom google.appengine.ext.webapp import blobstore_handlers\u000afrom google.appengine.ext.webapp import template\u000afrom google.appengine.ext.webapp.util import run_wsgi_app\u000a\u000aclass MainHandler(webapp.RequestHandler):\u000a    def get(self):\u000a        upload_url = blobstore.create_upload_url('/upload')\u000a        self.response.out.write('&lt;html&gt;&lt;body&gt;')\u000a        self.response.out.write('&lt;form action="%s" method="POST" enctype="multipart/form-data"&gt;' % upload_url)\u000a        self.response.out.write("""Upload File: &lt;input type="file" name="file"&gt;&lt;br&gt; &lt;input type="submit" name="submit" value="Submit"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;""")\u000a\u000a        for b in blobstore.BlobInfo.all():\u000a            self.response.out.write('&lt;li&gt;&lt;a href="/serve/%s' % str(b.key()) + '"&gt;' + str(b.filename) + '&lt;/a&gt;')\u000a\u000aclass UploadHandler(blobstore_handlers.BlobstoreUploadHandler):\u000a    def post(self):\u000a        upload_files = self.get_uploads('file')\u000a        blob_info = upload_files[0]\u000a        self.redirect('/')\u000a\u000aclass ServeHandler(blobstore_handlers.BlobstoreDownloadHandler):\u000a    def get(self, blob_key):\u000a        blob_key = str(urllib.unquote(blob_key))\u000a        if not blobstore.get(blob_key):\u000a            self.error(404)\u000a        else:\u000a            self.send_blob(blobstore.BlobInfo.get(blob_key), save_as=True)\u000a\u000adef main():\u000a    application = webapp.WSGIApplication(\u000a          [('/', MainHandler),\u000a           ('/upload', UploadHandler),\u000a           ('/serve/([^/]+)?', ServeHandler),\u000a          ], debug=True)\u000a    run_wsgi_app(application)\u000a\u000aif __name__ == '__main__':\u000a  main()\u000a</code></pre>\u000a
p1338
sVquestion_id
p1339
I81451
sVlast_activity_date
p1340
I1344438001
sVcreation_date
p1341
I1295905606
sVscore
p1342
I41
sVowner
p1343
(dp1344
Vuser_id
p1345
I451007
sVprofile_image
p1346
Vhttps://www.gravatar.com/avatar/2531f8e004294a6243a92ad4f8e49149?s=128&d=identicon&r=PG
p1347
sVuser_type
p1348
Vregistered
p1349
sVreputation
p1350
I3933
sVlink
p1351
Vhttp://stackoverflow.com/users/451007/010110110101
p1352
sVaccept_rate
p1353
I67
sVdisplay_name
p1354
V010110110101
p1355
ssVis_accepted
p1356
I01
sVlast_edit_date
p1357
I1344438001
sVanswer_id
p1358
I4787543
sa(dp1359
Vbody
p1360
V<p>Seems fine to me (or <code>raw_input()</code> in Python 2.X). Alternatively you could use <code>time.sleep()</code> if you want to pause for a certain number of seconds.</p>\u000a\u000a<pre><code>import time\u000aprint("something")\u000atime.sleep(5.5)    # pause 5.5 seconds\u000aprint("something")\u000a</code></pre>\u000a
p1361
sVquestion_id
p1362
I11552320
sVlast_activity_date
p1363
I1342657944
sVcreation_date
p1364
I1342657944
sVscore
p1365
I112
sVowner
p1366
(dp1367
Vuser_id
p1368
I21945
sVprofile_image
p1369
Vhttps://www.gravatar.com/avatar/631470ecb1d4fe8bd3be6d7e0dfe4449?s=128&d=identicon&r=PG
p1370
sVuser_type
p1371
Vregistered
p1372
sVreputation
p1373
I44256
sVlink
p1374
Vhttp://stackoverflow.com/users/21945/mhawke
p1375
sVdisplay_name
p1376
Vmhawke
p1377
ssVis_accepted
p1378
I01
sVanswer_id
p1379
I11552350
sa(dp1380
Vbody
p1381
V<p><a href="http://scikit-learn.org/stable/modules/linear_model.html#ordinary-least-squares" rel="noreferrer"><code>sklearn.linear_model.LinearRegression</code></a> will do it:</p>\u000a\u000a<pre><code>from sklearn import linear_model\u000aclf = linear_model.LinearRegression()\u000aclf.fit([[getattr(t, 'x%d' % i) for i in range(1, 8)] for t in texts],\u000a        [t.y for t in texts])\u000a</code></pre>\u000a\u000a<p>Then <code>clf.coef_</code> will have the regression coefficients.</p>\u000a\u000a<p><a href="http://scikit-learn.org/stable/modules/linear_model.html" rel="noreferrer"><code>sklearn.linear_model</code></a> also has similar interfaces to do various kinds of regularizations on the regression.</p>\u000a
p1382
sVquestion_id
p1383
I11479064
sVlast_activity_date
p1384
I1342219310
sVcreation_date
p1385
I1342219310
sVscore
p1386
I56
sVowner
p1387
(dp1388
Vuser_id
p1389
I344821
sVprofile_image
p1390
Vhttps://www.gravatar.com/avatar/ae231e96cd76eaf98cabebba853e27e8?s=128&d=identicon&r=PG
p1391
sVuser_type
p1392
Vregistered
p1393
sVreputation
p1394
I20377
sVlink
p1395
Vhttp://stackoverflow.com/users/344821/dougal
p1396
sVaccept_rate
p1397
I86
sVdisplay_name
p1398
VDougal
p1399
ssVis_accepted
p1400
I01
sVanswer_id
p1401
I11479279
sa(dp1402
Vbody
p1403
V<p>If you're writing 2.x-and-3.x-compatible code, you'll probably want to use <a href="http://packages.python.org/six/#six.string_types" rel="noreferrer">six</a>:</p>\u000a\u000a<pre><code>from six import string_types\u000aisinstance(s, string_types)\u000a</code></pre>\u000a
p1404
sVquestion_id
p1405
I11301138
sVlast_activity_date
p1406
I1341264226
sVcreation_date
p1407
I1341264226
sVscore
p1408
I97
sVowner
p1409
(dp1410
Vuser_id
p1411
I567292
sVprofile_image
p1412
Vhttps://www.gravatar.com/avatar/b55da07dea89fa675c7e2894c77f8024?s=128&d=identicon&r=PG
p1413
sVuser_type
p1414
Vregistered
p1415
sVreputation
p1416
I98649
sVlink
p1417
Vhttp://stackoverflow.com/users/567292/ecatmur
p1418
sVaccept_rate
p1419
I84
sVdisplay_name
p1420
Vecatmur
p1421
ssVis_accepted
p1422
I01
sVanswer_id
p1423
I11301392
sa(dp1424
Vbody
p1425
V<p>I found a solution for this:</p>\u000a\u000a<pre><code>logger = logging.getLogger('my-logger')\u000alogger.propagate = False\u000a# now if you use logger it will not log to console.\u000a</code></pre>\u000a\u000a<p>This will prevent logging from being send to the upper logger that includes the console logging.</p>\u000a
p1426
sVquestion_id
p1427
I2266646
sVlast_activity_date
p1428
I1339681382
sVcreation_date
p1429
I1266253473
sVscore
p1430
I120
sVowner
p1431
(dp1432
Vuser_id
p1433
I99834
sVprofile_image
p1434
Vhttps://www.gravatar.com/avatar/63c50004c4f6eaf3235b9ea836f4b6cf?s=128&d=identicon&r=PG
p1435
sVuser_type
p1436
Vregistered
p1437
sVreputation
p1438
I55322
sVlink
p1439
Vhttp://stackoverflow.com/users/99834/sorin
p1440
sVaccept_rate
p1441
I47
sVdisplay_name
p1442
Vsorin
p1443
ssVis_accepted
p1444
I01
sVlast_edit_date
p1445
I1339681382
sVanswer_id
p1446
I2267567
sa(dp1447
Vbody
p1448
V<p>You can't copy to IPython directly. This are the steps:</p>\u000a\u000a<ol>\u000a<li>Copy the lines you want to copy into IPython into the clipboard</li>\u000a<li>Enter <code>%paste</code> into IPython</li>\u000a<li>Press enter</li>\u000a<li>Profit!</li>\u000a</ol>\u000a
p1449
sVquestion_id
p1450
I10886946
sVlast_activity_date
p1451
I1338837364
sVcreation_date
p1452
I1338837364
sVscore
p1453
I109
sVowner
p1454
(dp1455
Vuser_id
p1456
I380038
sVprofile_image
p1457
Vhttps://www.gravatar.com/avatar/56881de591adf646543e735ff28e77ea?s=128&d=identicon&r=PG&f=1
p1458
sVuser_type
p1459
Vregistered
p1460
sVreputation
p1461
I8133
sVlink
p1462
Vhttp://stackoverflow.com/users/380038/framester
p1463
sVaccept_rate
p1464
I80
sVdisplay_name
p1465
VFramester
p1466
ssVis_accepted
p1467
I01
sVanswer_id
p1468
I10886947
sa(dp1469
Vbody
p1470
V<p>The best answer here is to use <a href="http://docs.python.org/library/functions.html#all"><code>all()</code></a>, which is the builtin for this situation. We combine this with a <a href="https://www.youtube.com/watch?v=t85uBptTDYY">generator expression</a> to produce the result you want cleanly and efficiently. For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; items = [[1, 2, 0], [1, 2, 0], [1, 2, 0]]\u000a&gt;&gt;&gt; all(item[2] == 0 for item in items)\u000aTrue\u000a&gt;&gt;&gt; items = [[1, 2, 0], [1, 2, 1], [1, 2, 0]]\u000a&gt;&gt;&gt; all(item[2] == 0 for item in items)\u000aFalse\u000a</code></pre>\u000a\u000a<p>And, for his filter example, a list comprehension:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [x for x in items if x[2] == 0]\u000a[[1, 2, 0], [1, 2, 0]]\u000a</code></pre>\u000a\u000a<p>If you want to check at least one element is 0, the better option is to use <a href="http://docs.python.org/library/functions.html#any"><code>any()</code></a> which is more readable:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; any(item[2] == 0 for item in items)\u000aTrue\u000a</code></pre>\u000a
p1471
sVquestion_id
p1472
I10666163
sVlast_activity_date
p1473
I1337440771
sVcreation_date
p1474
I1337439893
sVscore
p1475
I160
sVowner
p1476
(dp1477
Vuser_id
p1478
I722121
sVprofile_image
p1479
Vhttps://www.gravatar.com/avatar/c494fd4b406a2c066054ad17d30ae73b?s=128&d=identicon&r=PG
p1480
sVuser_type
p1481
Vregistered
p1482
sVreputation
p1483
I51344
sVlink
p1484
Vhttp://stackoverflow.com/users/722121/gareth-latty
p1485
sVaccept_rate
p1486
I100
sVdisplay_name
p1487
VGareth Latty
p1488
ssVis_accepted
p1489
I01
sVlast_edit_date
p1490
I1337440771
sVanswer_id
p1491
I10666320
sa(dp1492
Vbody
p1493
V<p>Python's standard out is buffered (meaning that it collects some of the data "written" to standard out before it writes it to the terminal). Calling <code>sys.stdout.flush()</code> forces it to "flush" the buffer, meaning that it will write everything in the buffer to the terminal, even if normally it would wait before doing so.  </p>\u000a\u000a<p>Here's some good information about (un)buffered I/O and why it's useful:<br>\u000a<a href="http://en.wikipedia.org/wiki/Data_buffer" rel="noreferrer">http://en.wikipedia.org/wiki/Data_buffer</a><br>\u000a<a href="http://stackoverflow.com/questions/1450551/buffered-i-o-vs-unbuffered-io">Buffered vs unbuffered IO</a></p>\u000a
p1494
sVquestion_id
p1495
I10019456
sVlast_activity_date
p1496
I1333575318
sVcreation_date
p1497
I1333575318
sVscore
p1498
I83
sVowner
p1499
(dp1500
Vuser_id
p1501
I306257
sVprofile_image
p1502
Vhttps://www.gravatar.com/avatar/701752cfc3dd805d412884f38a464296?s=128&d=identicon&r=PG
p1503
sVuser_type
p1504
Vregistered
p1505
sVreputation
p1506
I6609
sVlink
p1507
Vhttp://stackoverflow.com/users/306257/haldean-brown
p1508
sVaccept_rate
p1509
I96
sVdisplay_name
p1510
VHaldean Brown
p1511
ssVis_accepted
p1512
I01
sVanswer_id
p1513
I10019605
sa(dp1514
Vbody
p1515
V<pre><code>import settings\u000a</code></pre>\u000a\u000a<p>Will import settings(.py) module of your Django project (if you are writing this code from the "root" package of your application, of course)</p>\u000a\u000a<pre><code>from django.conf import settings\u000a</code></pre>\u000a\u000a<p>Will import settings <strong>object</strong> from django.conf package (Django's provided files). <a href="https://docs.djangoproject.com/en/dev/topics/settings/#using-settings-in-python-code">This is important</a>, because</p>\u000a\u000a<blockquote>\u000a  <p>[..] note that your code should not import from either global_settings or your own settings file. django.conf.settings abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings.</p>\u000a</blockquote>\u000a\u000a<p>UPDATE: if you want to define some own settings, see <a href="https://docs.djangoproject.com/en/dev/topics/settings/#custom-default-settings">this part of the documentation</a></p>\u000a
p1516
sVquestion_id
p1517
I8780756
sVlast_activity_date
p1518
I1326053792
sVcreation_date
p1519
I1326053792
sVscore
p1520
I102
sVowner
p1521
(dp1522
Vuser_id
p1523
I237076
sVprofile_image
p1524
Vhttps://www.gravatar.com/avatar/d186ce603effe76318f42f275f105aaa?s=128&d=identicon&r=PG
p1525
sVuser_type
p1526
Vregistered
p1527
sVreputation
p1528
I1911
sVlink
p1529
Vhttp://stackoverflow.com/users/237076/dgraziotin
p1530
sVaccept_rate
p1531
I92
sVdisplay_name
p1532
Vdgraziotin
p1533
ssVis_accepted
p1534
I01
sVanswer_id
p1535
I8780907
sa(dp1536
Vbody
p1537
V<p>The <a href="http://docs.python.org/library/stdtypes.html#str.lstrip" rel="noreferrer"><code>lstrip()</code></a> method will remove leading whitespaces, newline and tab characters on a string beginning:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; '     hello world!'.lstrip()\u000a'hello world!'\u000a</code></pre>\u000a\u000a<p><strong>Edit</strong></p>\u000a\u000a<p>As balpha pointed out in the comments, in order to remove <em>only</em> spaces from the beginning of the string, <code>lstrip(' ')</code> should be used:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; '   hello world with 2 spaces and a tab!'.lstrip(' ')\u000a'\u005cthello world with 2 spaces and a tab!'\u000a</code></pre>\u000a\u000a<p>Related question:</p>\u000a\u000a<ul>\u000a<li><a href="http://stackoverflow.com/questions/761804/trimming-a-string-in-python">Trimming a string in Python</a></li>\u000a</ul>\u000a
p1538
sVquestion_id
p1539
I959215
sVlast_activity_date
p1540
I1319977860
sVcreation_date
p1541
I1244275042
sVscore
p1542
I147
sVowner
p1543
(dp1544
Vuser_id
p1545
I17172
sVprofile_image
p1546
Vhttps://www.gravatar.com/avatar/1de7574c70db36492ea962c22e2252a8?s=128&d=identicon&r=PG
p1547
sVuser_type
p1548
Vregistered
p1549
sVreputation
p1550
I112894
sVlink
p1551
Vhttp://stackoverflow.com/users/17172/coobird
p1552
sVdisplay_name
p1553
Vcoobird
p1554
ssVis_accepted
p1555
I01
sVlast_edit_date
p1556
I1319977860
sVanswer_id
p1557
I959216
sa(dp1558
Vbody
p1559
V<p>It takes keyword arguments for the variables:</p>\u000a\u000a<pre><code>url_for('add', variable=foo)\u000a</code></pre>\u000a
p1560
sVquestion_id
p1561
I7478366
sVlast_activity_date
p1562
I1316476971
sVcreation_date
p1563
I1316476971
sVscore
p1564
I119
sVowner
p1565
(dp1566
Vuser_id
p1567
I90308
sVprofile_image
p1568
Vhttps://www.gravatar.com/avatar/7b7aefbc459629eb4c864b825894c9c4?s=128&d=identicon&r=PG
p1569
sVuser_type
p1570
Vregistered
p1571
sVreputation
p1572
I38667
sVlink
p1573
Vhttp://stackoverflow.com/users/90308/foglebird
p1574
sVaccept_rate
p1575
I93
sVdisplay_name
p1576
VFogleBird
p1577
ssVis_accepted
p1578
I01
sVanswer_id
p1579
I7478705
sa(dp1580
Vbody
p1581
V<p>You have several options for iterating over a dictionary.</p>\u000a\u000a<p>If you iterate over the dictionary itself (<code>for team in league</code>), you will be iterating over the keys of the dictionary.  When looping with a for loop, the behavior will be the same whether you loop over the dict (<code>league</code>) itself, <code>league.keys()</code>, or <code>league.iterkeys()</code>.  <a href="http://docs.python.org/library/stdtypes.html#dict.iterkeys" rel="noreferrer"><code>dict.iterkeys()</code></a> is generally preferable because it is explicit and efficient:</p>\u000a\u000a<pre><code>for team in league.iterkeys():\u000a    runs_scored, runs_allowed = map(float, league[team])\u000a</code></pre>\u000a\u000a<p>You can also iterate over both the keys and the values at once by iterating over <code>league.items()</code> or <code>league.iteritems()</code>:</p>\u000a\u000a<pre><code>for team, runs in league.iteritems():\u000a    runs_scored, runs_allowed = map(float, runs)\u000a</code></pre>\u000a\u000a<p>You can even perform your tuple unpacking while iterating:</p>\u000a\u000a<pre><code>for team, (runs_scored, runs_allowed) in league.iteritems():\u000a    runs_scored = float(runs_scored)\u000a    runs_allowed = float(runs_allowed)\u000a</code></pre>\u000a
p1582
sVquestion_id
p1583
I7409078
sVlast_activity_date
p1584
I1315952570
sVcreation_date
p1585
I1315952570
sVscore
p1586
I119
sVowner
p1587
(dp1588
Vuser_id
p1589
I505154
sVprofile_image
p1590
Vhttps://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=128&d=identicon&r=PG
p1591
sVuser_type
p1592
Vregistered
p1593
sVreputation
p1594
I114239
sVlink
p1595
Vhttp://stackoverflow.com/users/505154/andrew-clark
p1596
sVaccept_rate
p1597
I100
sVdisplay_name
p1598
VAndrew Clark
p1599
ssVis_accepted
p1600
I01
sVanswer_id
p1601
I7409280
sa(dp1602
Vbody
p1603
V<p>It seems that you actually haven't executed your query. Try following:</p>\u000a\u000a<pre><code>return jsonify(json_list = qryresult.all())\u000a</code></pre>\u000a\u000a<p><strong>[Edit]</strong>: Problem with jsonify is, that usually the objects cannot be jsonified automatically. Even Python's datetime fails ;)</p>\u000a\u000a<p>What I have usually done, is to add an extra property (like <code>serialize</code>) to classes that need to be serialized:</p>\u000a\u000a<pre><code>def dump_datetime(value):\u000a    """Deserialize datetime object into string form for JSON processing."""\u000a    if value is None:\u000a        return None\u000a    return [value.strftime("%Y-%m-%d"), value.strftime("%H:%M:%S")]\u000a\u000aclass Foo(db.Model):\u000a    # ... SQLAlchemy defs here..\u000a    def __init__(self, ...):\u000a       # self.foo = ...\u000a       pass\u000a\u000a    @property\u000a    def serialize(self):\u000a       """Return object data in easily serializeable format"""\u000a       return {\u000a           'id'         : self.id,\u000a           'modified_at': dump_datetime(self.modified_at),\u000a           # This is an example how to deal with Many2Many relations\u000a           'many2many'  : self.serialize_many2many\u000a       }\u000a    @property\u000a    def serialize_many2many(self):\u000a       """\u000a       Return object's relations in easily serializeable format.\u000a       NB! Calls many2many's serialize property.\u000a       """\u000a       return [ item.serialize for item in self.many2many]\u000a</code></pre>\u000a\u000a<p>And now for views I can just do:</p>\u000a\u000a<pre><code>return jsonify(json_list=[i.serialize for i in qryresult.all()])\u000a</code></pre>\u000a\u000a<p>Hope this helps ;)</p>\u000a
p1604
sVquestion_id
p1605
I7102754
sVlast_activity_date
p1606
I1313732609
sVcreation_date
p1607
I1313650335
sVscore
p1608
I109
sVowner
p1609
(dp1610
Vuser_id
p1611
I157176
sVprofile_image
p1612
Vhttps://www.gravatar.com/avatar/e72ba9209373ae37e13ab75054aa0ee5?s=128&d=identicon&r=PG
p1613
sVuser_type
p1614
Vregistered
p1615
sVreputation
p1616
I18239
sVlink
p1617
Vhttp://stackoverflow.com/users/157176/plaes
p1618
sVdisplay_name
p1619
Vplaes
p1620
ssVis_accepted
p1621
I01
sVlast_edit_date
p1622
I1313732609
sVanswer_id
p1623
I7103486
sa(dp1624
Vbody
p1625
V<p>If the string is fixed you can simply use:</p>\u000a\u000a<pre><code>if line.startswith("Path="):\u000a    return line[5:]\u000a</code></pre>\u000a\u000a<p>which gives you everything from position 5 on in the string (a string is also a sequence so these sequence operators work here, too).</p>\u000a\u000a<p>Or you can split the line at the first <code>=</code>:</p>\u000a\u000a<pre><code>if "=" in line:\u000a    param, value = line.split("=",1)\u000a</code></pre>\u000a\u000a<p>Then param is "Path" and value is the rest after the first =.</p>\u000a
p1626
sVquestion_id
p1627
I599953
sVlast_activity_date
p1628
I1310759699
sVcreation_date
p1629
I1235921216
sVscore
p1630
I119
sVowner
p1631
(dp1632
Vuser_id
p1633
I67151
sVprofile_image
p1634
Vhttps://www.gravatar.com/avatar/f7d96d15b901651ba8861f8385b7042c?s=128&d=identicon&r=PG
p1635
sVuser_type
p1636
Vregistered
p1637
sVreputation
p1638
I3636
sVlink
p1639
Vhttp://stackoverflow.com/users/67151/mrtopf
p1640
sVdisplay_name
p1641
VMrTopf
p1642
ssVis_accepted
p1643
I01
sVlast_edit_date
p1644
I1310759699
sVanswer_id
p1645
I599962
sa(dp1646
Vbody
p1647
V<p>You could simply use</p>\u000a\u000a<pre><code>return\u000a</code></pre>\u000a\u000a<p>which does exactly the same as</p>\u000a\u000a<pre><code>return None\u000a</code></pre>\u000a\u000a<p>Your function will also return <code>None</code> if execution reaches the end of the function body without hitting a <code>return</code> statement.  Returning nothing is the same as returning <code>None</code> in Python.</p>\u000a
p1648
sVquestion_id
p1649
I6190776
sVlast_activity_date
p1650
I1306860279
sVcreation_date
p1651
I1306860279
sVscore
p1652
I127
sVowner
p1653
(dp1654
Vuser_id
p1655
I279627
sVprofile_image
p1656
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1657
sVuser_type
p1658
Vregistered
p1659
sVreputation
p1660
I252330
sVlink
p1661
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1662
sVaccept_rate
p1663
I78
sVdisplay_name
p1664
VSven Marnach
p1665
ssVis_accepted
p1666
I01
sVanswer_id
p1667
I6190798
sa(dp1668
Vbody
p1669
V<p>Yes. Look at <a href="http://cython.org/">Cython</a>. It does just that: Converts Python to C for speedups.</p>\u000a
p1670
sVquestion_id
p1671
I4650243
sVlast_activity_date
p1672
I1294685778
sVcreation_date
p1673
I1294685368
sVscore
p1674
I61
sVowner
p1675
(dp1676
Vuser_id
p1677
I126214
sVprofile_image
p1678
Vhttps://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=128&d=identicon&r=PG
p1679
sVuser_type
p1680
Vregistered
p1681
sVreputation
p1682
I82828
sVlink
p1683
Vhttp://stackoverflow.com/users/126214/lennart-regebro
p1684
sVaccept_rate
p1685
I100
sVdisplay_name
p1686
VLennart Regebro
p1687
ssVis_accepted
p1688
I01
sVlast_edit_date
p1689
I1294685778
sVanswer_id
p1690
I4650280
sa(dp1691
Vbody
p1692
V<p>I think I figured it out: computes number of seconds since epoch, then converts to a local timzeone using time.localtime, and then converts the time struct back into a datetime...</p>\u000a\u000a<pre><code>EPOCH_DATETIME = datetime.datetime(1970,1,1)\u000aSECONDS_PER_DAY = 24*60*60\u000a\u000adef utc_to_local_datetime( utc_datetime ):\u000a    delta = utc_datetime - EPOCH_DATETIME\u000a    utc_epoch = SECONDS_PER_DAY * delta.days + delta.seconds\u000a    time_struct = time.localtime( utc_epoch )\u000a    dt_args = time_struct[:6] + (delta.microseconds,)\u000a    return datetime.datetime( *dt_args )\u000a</code></pre>\u000a\u000a<p>It applies the summer/winter DST correctly:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; utc_to_local_datetime( datetime.datetime(2010, 6, 6, 17, 29, 7, 730000) )\u000adatetime.datetime(2010, 6, 6, 19, 29, 7, 730000)\u000a&gt;&gt;&gt; utc_to_local_datetime( datetime.datetime(2010, 12, 6, 17, 29, 7, 730000) )\u000adatetime.datetime(2010, 12, 6, 18, 29, 7, 730000)\u000a</code></pre>\u000a
p1693
sVquestion_id
p1694
I4563272
sVlast_activity_date
p1695
I1293721367
sVcreation_date
p1696
I1293721367
sVscore
p1697
I3
sVowner
p1698
(dp1699
Vuser_id
p1700
I558340
sVprofile_image
p1701
Vhttps://www.gravatar.com/avatar/29503f628c19203c1f8393683b37ce1c?s=128&d=identicon&r=PG
p1702
sVuser_type
p1703
Vregistered
p1704
sVreputation
p1705
I446
sVlink
p1706
Vhttp://stackoverflow.com/users/558340/nitro-zark
p1707
sVdisplay_name
p1708
VNitro Zark
p1709
ssVis_accepted
p1710
I01
sVanswer_id
p1711
I4563642
sa(dp1712
Vbody
p1713
V<p>Sven has shown how to use the class <code>gaussian_kde</code> from Scipy, but you will notice that it doesn't look quite like what you generated with R. This is because <code>gaussian_kde</code> tries to infer the bandwidth automatically. You can play with the bandwidth in a way by changing the function <code>covariance_factor</code> of the <code>gaussian_kde</code> class. First, here is what you get without changing that function:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/93NjV.png" alt="alt text"></p>\u000a\u000a<p>However, if I use the following code:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000aimport numpy as np\u000afrom scipy.stats import gaussian_kde\u000adata = [1.5]*7 + [2.5]*2 + [3.5]*8 + [4.5]*3 + [5.5]*1 + [6.5]*8\u000adensity = gaussian_kde(data)\u000axs = np.linspace(0,8,200)\u000adensity.covariance_factor = lambda : .25\u000adensity._compute_covariance()\u000aplt.plot(xs,density(xs))\u000aplt.show()\u000a</code></pre>\u000a\u000a<p>I get</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/kPXVJ.png" alt="alt text"></p>\u000a\u000a<p>which is pretty close to what you are getting from R. What have I done? <code>gaussian_kde</code> uses a changable function, <code>covariance_factor</code> to calculate it's bandwidth. Before changing the function, the value returned by covariance_factor for this data was about .5. Lowering this lowered the bandwidth. I had to call <code>_compute_covariance</code> after changing that function so that all of the factors would be calculated correctly. It isn't an exact correspondence with the bw parameter from R, but hopefully it helps you get in the right direction.</p>\u000a
p1714
sVquestion_id
p1715
I4150171
sVlast_activity_date
p1716
I1289458144
sVcreation_date
p1717
I1289458144
sVscore
p1718
I82
sVowner
p1719
(dp1720
Vuser_id
p1721
I254617
sVprofile_image
p1722
Vhttps://www.gravatar.com/avatar/b8ae9879d7a5fb62f238a019b272d66f?s=128&d=identicon&r=PG
p1723
sVuser_type
p1724
Vregistered
p1725
sVreputation
p1726
I29970
sVlink
p1727
Vhttp://stackoverflow.com/users/254617/justin-peel
p1728
sVaccept_rate
p1729
I80
sVdisplay_name
p1730
VJustin Peel
p1731
ssVis_accepted
p1732
I01
sVanswer_id
p1733
I4152016
sa(dp1734
Vbody
p1735
V<p>Taking advantage of str.split's behavior with no sep parameter:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; s = " \u005ct foo \u005cn bar "\u000a&gt;&gt;&gt; "".join(s.split())\u000a'foobar'\u000a</code></pre>\u000a\u000a<p>If you just want to remove spaces instead of all whitespace:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; s.replace(" ", "")\u000a'\u005ctfoo\u005cnbar'\u000a</code></pre>\u000a\u000a<h2>Premature optimization</h2>\u000a\u000a<p>Even though efficiency isn't the primary goal\u2014writing clear code is\u2014here are some initial timings:</p>\u000a\u000a<pre><code>$ python -m timeit '"".join(" \u005ct foo \u005cn bar ".split())'\u000a1000000 loops, best of 3: 1.38 usec per loop\u000a$ python -m timeit -s 'import re' 're.sub(r"\u005cs+", "", " \u005ct foo \u005cn bar ")'\u000a100000 loops, best of 3: 15.6 usec per loop\u000a</code></pre>\u000a\u000a<p>Note the regex is cached, so it's not as slow as you'd imagine.  Compiling it beforehand helps some, but would only matter in practice if you call this <em>many</em> times:</p>\u000a\u000a<pre><code>$ python -m timeit -s 'import re; e = re.compile(r"\u005cs+")' 'e.sub("", " \u005ct foo \u005cn bar ")'\u000a100000 loops, best of 3: 7.76 usec per loop\u000a</code></pre>\u000a\u000a<p>Even though re.sub is 11.3x slower, remember your bottlenecks are assuredly elsewhere.  Most programs would not notice the difference between any of these 3 choices.</p>\u000a
p1736
sVquestion_id
p1737
I3739909
sVlast_activity_date
p1738
I1284838721
sVcreation_date
p1739
I1284771266
sVscore
p1740
I156
sVowner
p1741
(dp1742
Vdisplay_name
p1743
VRoger Pate
p1744
sVuser_type
p1745
Vdoes_not_exist
p1746
ssVis_accepted
p1747
I01
sVlast_edit_date
p1748
I1284838721
sVanswer_id
p1749
I3739939
sa(dp1750
Vbody
p1751
V<pre><code>import threading\u000a\u000adef printit():\u000a  threading.Timer(5.0, printit).start()\u000a  print "Hello, World!"\u000a\u000aprintit()\u000a\u000a# continue with the rest of your code\u000a</code></pre>\u000a
p1752
sVquestion_id
p1753
I3393612
sVlast_activity_date
p1754
I1280814242
sVcreation_date
p1755
I1280812603
sVscore
p1756
I152
sVowner
p1757
(dp1758
Vuser_id
p1759
I95810
sVprofile_image
p1760
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1761
sVuser_type
p1762
Vregistered
p1763
sVreputation
p1764
I516089
sVlink
p1765
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1766
sVaccept_rate
p1767
I80
sVdisplay_name
p1768
VAlex Martelli
p1769
ssVis_accepted
p1770
I01
sVlast_edit_date
p1771
I1280814242
sVanswer_id
p1772
I3393759
sa(dp1773
Vbody
p1774
V<p>AFAIK, <code>len</code> is special in this respect and has historical roots.</p>\u000a\u000a<p>Here's a quote <a href="http://docs.python.org/faq/design.html" rel="noreferrer">from the FAQ</a>:</p>\u000a\u000a<blockquote>\u000a  <p><strong>Why does Python use methods for some\u000a  functionality (e.g. list.index()) but\u000a  functions for other (e.g. len(list))?</strong></p>\u000a  \u000a  <p>The major reason is history. Functions\u000a  were used for those operations that\u000a  were generic for a group of types and\u000a  which were intended to work even for\u000a  objects that didn\u2019t have methods at\u000a  all (e.g. tuples). It is also\u000a  convenient to have a function that can\u000a  readily be applied to an amorphous\u000a  collection of objects when you use the\u000a  functional features of Python (map(),\u000a  apply() et al).</p>\u000a  \u000a  <p>In fact, implementing len(), max(),\u000a  min() as a built-in function is\u000a  actually less code than implementing\u000a  them as methods for each type. One can\u000a  quibble about individual cases but\u000a  it\u2019s a part of Python, and it\u2019s too\u000a  late to make such fundamental changes\u000a  now. The functions have to remain to\u000a  avoid massive code breakage.</p>\u000a</blockquote>\u000a\u000a<p>The other "magical methods" (actually called <em>special method</em> in the Python folklore) make lots of sense, and similar functionality exists in other languages. They're mostly used for code that gets called implicitly when special syntax is used.</p>\u000a\u000a<p>For example:</p>\u000a\u000a<ul>\u000a<li>overloaded operators (exist in C++ and others)</li>\u000a<li>constructor/destructor</li>\u000a<li>hooks for accessing attributes</li>\u000a<li>tools for metaprogramming</li>\u000a</ul>\u000a\u000a<p>and so on...</p>\u000a
p1775
sVquestion_id
p1776
I2657627
sVlast_activity_date
p1777
I1271489936
sVcreation_date
p1778
I1271489532
sVscore
p1779
I49
sVowner
p1780
(dp1781
Vuser_id
p1782
I8206
sVprofile_image
p1783
Vhttps://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?s=128&d=identicon&r=PG
p1784
sVuser_type
p1785
Vregistered
p1786
sVreputation
p1787
I133054
sVlink
p1788
Vhttp://stackoverflow.com/users/8206/eli-bendersky
p1789
sVaccept_rate
p1790
I94
sVdisplay_name
p1791
VEli Bendersky
p1792
ssVis_accepted
p1793
I01
sVlast_edit_date
p1794
I1271489936
sVanswer_id
p1795
I2657639
sa(dp1796
Vbody
p1797
V<p>Me, I'd do <code>('%f' % x).rstrip('0').rstrip('.')</code> -- guarantees fixed-point formatting rather than scientific notation, etc etc.  Yeah, not as slick and elegant as <code>%g</code>, but, it works (and I don't know how to force <code>%g</code> to never use scientific notation;-).</p>\u000a
p1798
sVquestion_id
p1799
I2440692
sVlast_activity_date
p1800
I1268529084
sVcreation_date
p1801
I1268529084
sVscore
p1802
I88
sVowner
p1803
(dp1804
Vuser_id
p1805
I95810
sVprofile_image
p1806
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1807
sVuser_type
p1808
Vregistered
p1809
sVreputation
p1810
I516089
sVlink
p1811
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1812
sVaccept_rate
p1813
I80
sVdisplay_name
p1814
VAlex Martelli
p1815
ssVis_accepted
p1816
I01
sVanswer_id
p1817
I2440786
sa(dp1818
Vbody
p1819
V<p><code>inspect.getmro(cls)</code> works for both new and old style classes and returns the same as <code>NewClass.mro()</code>: a list of the class and all its base classes.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class A(object):\u000a&gt;&gt;&gt;     pass\u000a&gt;&gt;&gt;\u000a&gt;&gt;&gt; class B(A):\u000a&gt;&gt;&gt;     pass\u000a&gt;&gt;&gt;\u000a&gt;&gt;&gt; import inspect\u000a&gt;&gt;&gt; inspect.getmro(B)\u000a(&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\u000a</code></pre>\u000a
p1820
sVquestion_id
p1821
I1401661
sVlast_activity_date
p1822
I1252528392
sVcreation_date
p1823
I1252528101
sVscore
p1824
I111
sVowner
p1825
(dp1826
Vuser_id
p1827
I95612
sVprofile_image
p1828
Vhttps://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=128&d=identicon&r=PG
p1829
sVuser_type
p1830
Vregistered
p1831
sVreputation
p1832
I63439
sVlink
p1833
Vhttp://stackoverflow.com/users/95612/jochen-ritzel
p1834
sVaccept_rate
p1835
I80
sVdisplay_name
p1836
VJochen Ritzel
p1837
ssVis_accepted
p1838
I01
sVlast_edit_date
p1839
I1252528392
sVanswer_id
p1840
I1401900
sa(dp1841
Vbody
p1842
V<p>What you're wanting to do isn't possible. Take, for instance, whether or not the code below looks valid:</p>\u000a\u000a<pre><code>class Test(object):\u000a\u000a    def _decorator(self, foo):\u000a        foo()\u000a\u000a    def bar(self):\u000a        pass\u000a    bar = self._decorator(bar)\u000a</code></pre>\u000a\u000a<p>It, of course, isn't valid since <code>self</code> isn't defined at that point. The same goes for <code>Test</code> as it won't be defined until the class itself is defined (which its in the process of). I'm showing you this code snippet because <strong>this is what your decorator snippet transforms into.</strong></p>\u000a\u000a<p>So, as you can see, accessing the instance in a decorator like that isn't really possible since decorators are applied during the definition of whatever function/method they are attached to and not during instantiation.</p>\u000a\u000a<p>If you need <strong>class-level access</strong>, try this:</p>\u000a\u000a<pre><code>class Test(object):\u000a\u000a    @classmethod\u000a    def _decorator(cls, foo):\u000a        foo()\u000a\u000a    def bar(self):\u000a        pass\u000aTest.bar = Test._decorator(Test.bar)\u000a</code></pre>\u000a
p1843
sVquestion_id
p1844
I1263451
sVlast_activity_date
p1845
I1250033969
sVcreation_date
p1846
I1250033626
sVscore
p1847
I56
sVowner
p1848
(dp1849
Vuser_id
p1850
I49701
sVprofile_image
p1851
Vhttps://www.gravatar.com/avatar/88c44d4902ae5685dae7d672da983e08?s=128&d=identicon&r=PG
p1852
sVuser_type
p1853
Vregistered
p1854
sVreputation
p1855
I38229
sVlink
p1856
Vhttp://stackoverflow.com/users/49701/evan-fosmark
p1857
sVaccept_rate
p1858
I94
sVdisplay_name
p1859
VEvan Fosmark
p1860
ssVis_accepted
p1861
I01
sVlast_edit_date
p1862
I1250033969
sVanswer_id
p1863
I1263545
sa(dp1864
Vbody
p1865
V<p>Do as <a href="http://www.b-list.org/weblog/2007/nov/02/handle-choices-right-way/" rel="noreferrer">seen here</a>. Then you can use a word that represents the proper integer.</p>\u000a\u000a<p>Like so:</p>\u000a\u000a<pre><code>LOW = 0\u000aNORMAL = 1\u000aHIGH = 2\u000aSTATUS_CHOICES = (\u000a    (LOW, 'Low'),\u000a    (NORMAL, 'Normal'),\u000a    (HIGH, 'High'),\u000a)\u000a</code></pre>\u000a\u000a<p>Then they are still integers in the DB.</p>\u000a\u000a<p>Usage would be <code>thing.priority = Thing.NORMAL</code></p>\u000a
p1866
sVquestion_id
p1867
I1117564
sVlast_activity_date
p1868
I1247455903
sVcreation_date
p1869
I1247455428
sVscore
p1870
I117
sVowner
p1871
(dp1872
Vuser_id
p1873
I136565
sVprofile_image
p1874
Vhttps://www.gravatar.com/avatar/35bd93d097cb5ec85b5054bc2ff5cc1b?s=128&d=identicon&r=PG
p1875
sVuser_type
p1876
Vregistered
p1877
sVreputation
p1878
I2479
sVlink
p1879
Vhttp://stackoverflow.com/users/136565/jonwd7
p1880
sVdisplay_name
p1881
Vjonwd7
p1882
ssVis_accepted
p1883
I01
sVlast_edit_date
p1884
I1247455903
sVanswer_id
p1885
I1117587
sa(dp1886
Vbody
p1887
V<p>There is a bunch on here:</p>\u000a\u000a<p><a href="http://www.webservicex.net/WS/wscatlist.aspx" rel="noreferrer">http://www.webservicex.net/WS/wscatlist.aspx</a></p>\u000a\u000a<p>Just google for "Free WebService" or "Open WebService" and you'll find tons of open SOAP endpoints.</p>\u000a\u000a<p>Remember, you can get a WSDL from any ASMX endpoint by adding ?WSDL to the url.</p>\u000a
p1888
sVquestion_id
p1889
I311654
sVlast_activity_date
p1890
I1227381946
sVcreation_date
p1891
I1227381424
sVscore
p1892
I61
sVowner
p1893
(dp1894
Vuser_id
p1895
I1965
sVprofile_image
p1896
Vhttps://www.gravatar.com/avatar/ad348387d020a15171daed0ab492a49b?s=128&d=identicon&r=PG
p1897
sVuser_type
p1898
Vregistered
p1899
sVreputation
p1900
I95470
sVlink
p1901
Vhttp://stackoverflow.com/users/1965/flyswat
p1902
sVaccept_rate
p1903
I50
sVdisplay_name
p1904
VFlySwat
p1905
ssVis_accepted
p1906
I01
sVlast_edit_date
p1907
I1227381946
sVanswer_id
p1908
I311661
sa(dp1909
Vbody
p1910
V<p>Filter the result using os.path.isdir() (and use os.path.join() to get the real path):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [ name for name in os.listdir(thedir) if os.path.isdir(os.path.join(thedir, name)) ]\u000a['ctypes', 'distutils', 'encodings', 'lib-tk', 'config', 'idlelib', 'xml', 'bsddb', 'hotshot', 'logging', 'doc', 'test', 'compiler', 'curses', 'site-packages', 'email', 'sqlite3', 'lib-dynload', 'wsgiref', 'plat-linux2', 'plat-mac']\u000a</code></pre>\u000a
p1911
sVquestion_id
p1912
I141291
sVlast_activity_date
p1913
I1222456017
sVcreation_date
p1914
I1222456017
sVscore
p1915
I64
sVowner
p1916
(dp1917
Vuser_id
p1918
I17624
sVprofile_image
p1919
Vhttps://www.gravatar.com/avatar/90285a816eda046ff55a0dcacc0c5ee8?s=128&d=identicon&r=PG
p1920
sVuser_type
p1921
Vregistered
p1922
sVreputation
p1923
I69283
sVlink
p1924
Vhttp://stackoverflow.com/users/17624/thomas-wouters
p1925
sVdisplay_name
p1926
VThomas Wouters
p1927
ssVis_accepted
p1928
I01
sVanswer_id
p1929
I141327
sa(dp1930
Vbody
p1931
V<p>I was missing </p>\u000a\u000a<pre><code>l.set_option(ldap.OPT_REFERRALS, 0)\u000a</code></pre>\u000a\u000a<p>From the init.</p>\u000a
p1932
sVquestion_id
p1933
I140439
sVlast_activity_date
p1934
I1222445898
sVcreation_date
p1935
I1222445898
sVscore
p1936
I40
sVowner
p1937
(dp1938
Vuser_id
p1939
I4319
sVprofile_image
p1940
Vhttps://www.gravatar.com/avatar/6d8e25fb3a0b50e002252543e2573bbd?s=128&d=identicon&r=PG
p1941
sVuser_type
p1942
Vregistered
p1943
sVreputation
p1944
I2649
sVlink
p1945
Vhttp://stackoverflow.com/users/4319/1729
p1946
sVaccept_rate
p1947
I50
sVdisplay_name
p1948
V1729
p1949
ssVis_accepted
p1950
I01
sVanswer_id
p1951
I140495
sa(dp1952
Vbody
p1953
V<p>There's a solution to your problem that is distributed with python itself. <code>pindent.py</code>, it's located in the Tools\u005cScripts directory in a windows install (my path to it is C:\u005cPython25\u005cTools\u005cScripts), it looks like you'd have grab it from svn.python.org if you are running on Linux or OSX. </p>\u000a\u000a<p>It adds comments when blocks are closed, or can properly indent code if comments are put in. Here's an example of the code outputted by pindent with the command:</p>\u000a\u000a<p><code>pindent -c myfile.py</code></p>\u000a\u000a<pre><code>def foobar(a, b):\u000a   if a == b:\u000a       a = a+1\u000a   elif a &lt; b:\u000a       b = b-1\u000a       if b &gt; a: a = a-1\u000a       # end if\u000a   else:\u000a       print 'oops!'\u000a   # end if\u000a# end def foobar\u000a</code></pre>\u000a\u000a<p>Where the original <code>myfile.py</code> was: </p>\u000a\u000a<pre><code>def foobar(a, b):\u000a   if a == b:\u000a       a = a+1\u000a   elif a &lt; b:\u000a       b = b-1\u000a       if b &gt; a: a = a-1\u000a   else:\u000a       print 'oops!'\u000a</code></pre>\u000a\u000a<p>You can also use <code>pindent.py -d</code> to insert the correct indentation based on comments (read the header of pindent.py for details), this should allow you to code in python without worrying about indentation.</p>\u000a\u000a<p>I'd be interested to learn what solution you end up using, if you require any further assistance, please comment on this post and I'll try to help.</p>\u000a
p1954
sVquestion_id
p1955
I118643
sVlast_activity_date
p1956
I1222135441
sVcreation_date
p1957
I1222135441
sVscore
p1958
I53
sVowner
p1959
(dp1960
Vuser_id
p1961
I8819
sVprofile_image
p1962
Vhttps://www.gravatar.com/avatar/1e4e8e8e23ab56938797ddb1b9ad9fef?s=128&d=identicon&r=PG
p1963
sVuser_type
p1964
Vregistered
p1965
sVreputation
p1966
I10302
sVlink
p1967
Vhttp://stackoverflow.com/users/8819/ryan
p1968
sVaccept_rate
p1969
I90
sVdisplay_name
p1970
VRyan
p1971
ssVis_accepted
p1972
I01
sVanswer_id
p1973
I118744
sasVquota_max
p1974
I300
sVquota_remaining
p1975
I156
s.