(dp0
Vhas_more
p1
I01
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>From <a href="http://mail.python.org/pipermail/tutor/2003-November/026645.html" rel="nofollow noreferrer">Magnus Lycka answer on a mailing list</a>:</p>\u000a\u000a<blockquote>\u000a  <p>You can skip buffering for a whole\u000a  python process using "python -u" \u000a  (or#!/usr/bin/env python -u etc) or by\u000a  setting the environment variable\u000a  PYTHONUNBUFFERED.</p>\u000a  \u000a  <p>You could also replace sys.stdout with\u000a  some other stream like wrapper which\u000a  does a flush after every call.</p>\u000a\u000a<pre><code>class Unbuffered(object):\u000a   def __init__(self, stream):\u000a       self.stream = stream\u000a   def write(self, data):\u000a       self.stream.write(data)\u000a       self.stream.flush()\u000a   def writelines(self, datas):\u000a       self.stream.writelines(datas)\u000a       self.stream.flush()\u000a   def __getattr__(self, attr):\u000a       return getattr(self.stream, attr)\u000a\u000aimport sys\u000asys.stdout = Unbuffered(sys.stdout)\u000aprint 'Hello'\u000a</code></pre>\u000a</blockquote>\u000a
p6
sVquestion_id
p7
I107705
sVlast_activity_date
p8
I1493960818
sVcreation_date
p9
I1221902671
sVscore
p10
I286
sVowner
p11
(dp12
Vuser_id
p13
I189
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/a94b04abadb5fc282fd17eb8813139a6?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I8047
sVlink
p19
Vhttp://stackoverflow.com/users/189/seb
p20
sVdisplay_name
p21
VSeb
p22
ssVis_accepted
p23
I01
sVlast_edit_date
p24
I1493960818
sVanswer_id
p25
I107717
sa(dp26
Vbody
p27
V<p>There's not really any "raw <em>string</em>"; there are raw <em>string literals</em>, which are exactly the string literals marked by an <code>'r'</code> before the opening quote.</p>\u000a\u000a<p>A "raw string literal" is a slightly different syntax for a string literal, in which a backslash, <code>\u005c</code>, is taken as meaning "just a backslash" (except when it comes right before a quote that would otherwise terminate the literal) -- no "escape sequences" to represent newlines, tabs, backspaces, form-feeds, and so on.  In normal string literals, each backslash must be doubled up to avoid being taken as the start of an escape sequence.</p>\u000a\u000a<p>This syntax variant exists mostly because the syntax of regular expression patterns is heavy with backslashes (but never at the end, so the "except" clause above doesn't matter) and it looks a bit better when you avoid doubling up each of them -- that's all.  It also gained some popularity to express native Windows file paths (with backslashes instead of regular slashes like on other platforms), but that's very rarely needed (since normal slashes mostly work fine on Windows too) and imperfect (due to the "except" clause above).</p>\u000a\u000a<p><code>r'...'</code> is a byte string (in Python 2.*), <code>ur'...'</code> is a Unicode string (again, in Python 2.*), and any of the other three kinds of quoting also produces exactly the same types of strings (so for example <code>r'...'</code>, <code>r'''...'''</code>, <code>r"..."</code>, <code>r"""..."""</code> are all byte strings, and so on).</p>\u000a\u000a<p>Not sure what you mean by "going <em>back</em>" - there is no intrinsically back and forward directions, because there's no raw string <strong>type</strong>, it's just an alternative syntax to express perfectly normal string objects, byte or unicode as they may be.</p>\u000a\u000a<p>And yes, in Python 2.*, <code>u'...'</code> <strong>is</strong> of course always distinct from just <code>'...'</code> -- the former is a unicode string, the latter is a byte string. What encoding the literal might be expressed in is a completely orthogonal issue.</p>\u000a\u000a<p>E.g., consider (Python 2.6):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sys.getsizeof('ciao')\u000a28\u000a&gt;&gt;&gt; sys.getsizeof(u'ciao')\u000a34\u000a</code></pre>\u000a\u000a<p>The Unicode object of course takes more memory space (very small difference for a very short string, obviously ;-).</p>\u000a
p28
sVquestion_id
p29
I2081640
sVlast_activity_date
p30
I1493497375
sVcreation_date
p31
I1263746319
sVscore
p32
I326
sVowner
p33
(dp34
Vuser_id
p35
I95810
sVprofile_image
p36
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p37
sVuser_type
p38
Vregistered
p39
sVreputation
p40
I515739
sVlink
p41
Vhttp://stackoverflow.com/users/95810/alex-martelli
p42
sVaccept_rate
p43
I80
sVdisplay_name
p44
VAlex Martelli
p45
ssVis_accepted
p46
I01
sVlast_edit_date
p47
I1493497375
sVanswer_id
p48
I2081708
sa(dp49
Vbody
p50
V<p>"The uuid module, in Python 2.5 and up,  provides RFC compliant UUID\u000ageneration. See the module docs and the RFC for details."</p>\u000a\u000a<p>Docs:</p>\u000a\u000a<ul>\u000a<li>Python 2: <a href="http://docs.python.org/2/library/uuid.html" rel="noreferrer">http://docs.python.org/2/library/uuid.html</a></li>\u000a<li>Python 3:\u000a<a href="https://docs.python.org/3/library/uuid.html" rel="noreferrer">https://docs.python.org/3/library/uuid.html</a></li>\u000a</ul>\u000a\u000a<p>Example (working on 2 and 3):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import uuid\u000a&gt;&gt;&gt; uuid.uuid4()\u000aUUID('bd65600d-8669-4903-8a14-af88203add38')\u000a&gt;&gt;&gt; str(uuid.uuid4())\u000a'f50ec0b7-f960-400d-91f0-c42a6d44e3d0'\u000a&gt;&gt;&gt; uuid.uuid4().hex\u000a'9fe2c4e93f654fdbb24c02b15259716c'\u000a</code></pre>\u000a\u000a<p><a href="http://code.activestate.com/lists/python-list/72693/" rel="noreferrer">http://code.activestate.com/lists/python-list/72693/</a></p>\u000a
p51
sVquestion_id
p52
I534839
sVlast_activity_date
p53
I1493028658
sVcreation_date
p54
I1234310066
sVscore
p55
I195
sVowner
p56
(dp57
Vuser_id
p58
I43846
sVprofile_image
p59
Vhttps://i.stack.imgur.com/TGOxx.png?s=128&g=1
p60
sVuser_type
p61
Vregistered
p62
sVreputation
p63
I40351
sVlink
p64
Vhttp://stackoverflow.com/users/43846/stuartd
p65
sVaccept_rate
p66
I100
sVdisplay_name
p67
Vstuartd
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1493028658
sVanswer_id
p71
I534847
sa(dp72
Vbody
p73
V<p>To display a value nicely, you can use the <a href="http://docs.python.org/library/pprint.html" rel="noreferrer">pprint</a> module. The easiest way to dump all variables with it is to do</p>\u000a\u000a<pre><code>from pprint import pprint\u000a\u000apprint(globals())\u000apprint(locals())\u000a</code></pre>\u000a\u000a<p>If you are running in CGI, a useful debugging feature is the <a href="http://docs.python.org/library/cgitb.html" rel="noreferrer">cgitb</a> module, which displays the value of local variables as part of the traceback.</p>\u000a
p74
sVquestion_id
p75
I383944
sVlast_activity_date
p76
I1490393289
sVcreation_date
p77
I1229821143
sVscore
p78
I193
sVowner
p79
(dp80
Vuser_id
p81
I33006
sVprofile_image
p82
Vhttps://www.gravatar.com/avatar/3acb8bae5a2b5a28f6fe522a4ea9b873?s=128&d=identicon&r=PG
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I84298
sVlink
p87
Vhttp://stackoverflow.com/users/33006/martin-v-l%c3%b6wis
p88
sVaccept_rate
p89
I88
sVdisplay_name
p90
VMartin v. L&#246;wis
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1490393289
sVanswer_id
p94
I383953
sa(dp95
Vbody
p96
V<p>To select rows whose column value equals a scalar, <code>some_value</code>, use <code>==</code>:</p>\u000a\u000a<pre><code>df.loc[df['column_name'] == some_value]\u000a</code></pre>\u000a\u000a<p>To select rows whose column value is in an iterable, <code>some_values</code>, use <code>isin</code>:</p>\u000a\u000a<pre><code>df.loc[df['column_name'].isin(some_values)]\u000a</code></pre>\u000a\u000a<p>Combine multiple conditions with <code>&amp;</code>: </p>\u000a\u000a<pre><code>df.loc[(df['column_name'] == some_value) &amp; df['other_column'].isin(some_values)]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>To select rows whose column value <em>does not equal</em> <code>some_value</code>, use <code>!=</code>:</p>\u000a\u000a<pre><code>df.loc[df['column_name'] != some_value]\u000a</code></pre>\u000a\u000a<p><code>isin</code> returns a boolean Series, so to select rows whose value is <em>not</em> in <code>some_values</code>, negate the boolean Series using <code>~</code>:</p>\u000a\u000a<pre><code>df.loc[~df['column_name'].isin(some_values)]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>For example,</p>\u000a\u000a<pre><code>import pandas as pd\u000aimport numpy as np\u000adf = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),\u000a                   'B': 'one one two three two two one three'.split(),\u000a                   'C': np.arange(8), 'D': np.arange(8) * 2})\u000aprint(df)\u000a#      A      B  C   D\u000a# 0  foo    one  0   0\u000a# 1  bar    one  1   2\u000a# 2  foo    two  2   4\u000a# 3  bar  three  3   6\u000a# 4  foo    two  4   8\u000a# 5  bar    two  5  10\u000a# 6  foo    one  6  12\u000a# 7  foo  three  7  14\u000a\u000aprint(df.loc[df['A'] == 'foo'])\u000a</code></pre>\u000a\u000a<p>yields</p>\u000a\u000a<pre><code>     A      B  C   D\u000a0  foo    one  0   0\u000a2  foo    two  2   4\u000a4  foo    two  4   8\u000a6  foo    one  6  12\u000a7  foo  three  7  14\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>If you have multiple values you want to include, put them in a\u000alist (or more generally, any iterable) and use <code>isin</code>:</p>\u000a\u000a<pre><code>print(df.loc[df['B'].isin(['one','three'])])\u000a</code></pre>\u000a\u000a<p>yields</p>\u000a\u000a<pre><code>     A      B  C   D\u000a0  foo    one  0   0\u000a1  bar    one  1   2\u000a3  bar  three  3   6\u000a6  foo    one  6  12\u000a7  foo  three  7  14\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Note, however, that if you wish to do this many times, it is more efficient to\u000amake an index first, and then use <code>df.loc</code>:</p>\u000a\u000a<pre><code>df = df.set_index(['B'])\u000aprint(df.loc['one'])\u000a</code></pre>\u000a\u000a<p>yields</p>\u000a\u000a<pre><code>       A  C   D\u000aB              \u000aone  foo  0   0\u000aone  bar  1   2\u000aone  foo  6  12\u000a</code></pre>\u000a\u000a<p>or, to include multiple values from the index use <code>df.index.isin</code>:</p>\u000a\u000a<pre><code>df.loc[df.index.isin(['one','two'])]\u000a</code></pre>\u000a\u000a<p>yields</p>\u000a\u000a<pre><code>       A  C   D\u000aB              \u000aone  foo  0   0\u000aone  bar  1   2\u000atwo  foo  2   4\u000atwo  foo  4   8\u000atwo  bar  5  10\u000aone  foo  6  12\u000a</code></pre>\u000a
p97
sVquestion_id
p98
I17071871
sVlast_activity_date
p99
I1489177008
sVcreation_date
p100
I1371059060
sVscore
p101
I572
sVowner
p102
(dp103
Vuser_id
p104
I190597
sVprofile_image
p105
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I424924
sVlink
p110
Vhttp://stackoverflow.com/users/190597/unutbu
p111
sVaccept_rate
p112
I88
sVdisplay_name
p113
Vunutbu
p114
ssVis_accepted
p115
I01
sVlast_edit_date
p116
I1489177008
sVanswer_id
p117
I17071908
sa(dp118
Vbody
p119
V<ol>\u000a<li><p>Just <code>import file</code> without the '.py' extension.</p></li>\u000a<li><p>You can mark a folder as a package, by adding an empty file named <code>__init__.py</code>.</p></li>\u000a<li><p>You can use the <code>__import__</code> function. It takes the module name as a string. (Again: module name without the '.py' extension.)</p>\u000a\u000a<pre><code>pmName = input('Enter module name:')\u000apm = __import__(pmName)\u000aprint(dir(pm))\u000a</code></pre>\u000a\u000a<p>Type <code>help(__import__)</code> for more details.</p></li>\u000a</ol>\u000a\u000a<p><strong>Update: Answer above is outdated</strong>. Here is a more recent alternative:</p>\u000a\u000a<p><code>importlib</code> is recent addition in Python 2.7 to programmatically import a module. It just a wrapper around <code>__import__</code> \u000aSee <a href="https://docs.python.org/2/library/importlib.html#module-importlib" rel="noreferrer">https://docs.python.org/2/library/importlib.html#module-importlib</a></p>\u000a\u000a<pre><code>moduleName = input('Enter module name:')\u000aimport_module(moduleName)\u000a</code></pre>\u000a
p120
sVquestion_id
p121
I2349991
sVlast_activity_date
p122
I1488584204
sVcreation_date
p123
I1267328553
sVscore
p124
I209
sVowner
p125
(dp126
Vuser_id
p127
I234998
sVprofile_image
p128
Vhttps://www.gravatar.com/avatar/f3f8e8bc25c717b3abc8626b31642fb1?s=128&d=identicon&r=PG
p129
sVuser_type
p130
Vregistered
p131
sVreputation
p132
I3455
sVlink
p133
Vhttp://stackoverflow.com/users/234998/radian
p134
sVaccept_rate
p135
I88
sVdisplay_name
p136
VRadian
p137
ssVis_accepted
p138
I01
sVlast_edit_date
p139
I1488584204
sVanswer_id
p140
I2349998
sa(dp141
Vbody
p142
V<p><code>_</code> has 3 main conventional uses in Python:</p>\u000a\u000a<ol>\u000a<li>To hold the result of the last executed statement in an interactive\u000ainterpreter session. This precedent was set by the standard CPython\u000ainterpreter, and other interpreters have followed suit</li>\u000a<li>For translation lookup in i18n (see the\u000a<a href="https://docs.python.org/3/library/gettext.html#localizing-your-module" rel="noreferrer">gettext</a>\u000adocumentation for example), as in code like:\u000a<code>raise forms.ValidationError(_("Please enter a correct username"))</code></li>\u000a<li>As a general purpose "throwaway" variable name to indicate that part\u000aof a function result is being deliberately ignored, as in code like:\u000a<code>label, has_label, _ = text.partition(':')</code></li>\u000a</ol>\u000a\u000a<p>The latter two purposes can conflict, so it is necessary to avoid using <code>_</code> as a throwaway variable in any code block that also uses it for i18n translation (many folks prefer a double-underscore, <code>__</code>, as their throwaway variable for exactly this reason).</p>\u000a
p143
sVquestion_id
p144
I5893163
sVlast_activity_date
p145
I1488447245
sVcreation_date
p146
I1304579447
sVscore
p147
I447
sVowner
p148
(dp149
Vuser_id
p150
I597742
sVprofile_image
p151
Vhttps://www.gravatar.com/avatar/f3ba3ecffd20251d73749afbfa636786?s=128&d=identicon&r=PG
p152
sVuser_type
p153
Vregistered
p154
sVreputation
p155
I20617
sVlink
p156
Vhttp://stackoverflow.com/users/597742/ncoghlan
p157
sVaccept_rate
p158
I100
sVdisplay_name
p159
Vncoghlan
p160
ssVis_accepted
p161
I01
sVlast_edit_date
p162
I1488447245
sVanswer_id
p163
I5893946
sa(dp164
Vbody
p165
V<p>Other posters are probably correct...there might be spaces mixed in with your tabs. Try doing a search &amp; replace to replace all tabs with a few spaces.</p>\u000a\u000a<p>Try this:</p>\u000a\u000a<pre><code>import sys\u000a\u000adef Factorial(n): # return factorial\u000a    result = 1\u000a    for i in range (1,n):\u000a        result = result * i\u000a    print "factorial is ",result\u000a    return result\u000a\u000aprint Factorial(10)\u000a</code></pre>\u000a
p166
sVquestion_id
p167
I492387
sVlast_activity_date
p168
I1485529540
sVcreation_date
p169
I1233247038
sVscore
p170
I325
sVowner
p171
(dp172
Vuser_id
p173
I39461
sVprofile_image
p174
Vhttps://i.stack.imgur.com/AoGJE.png?s=128&g=1
p175
sVuser_type
p176
Vregistered
p177
sVreputation
p178
I9217
sVlink
p179
Vhttp://stackoverflow.com/users/39461/kevin-tighe
p180
sVdisplay_name
p181
VKevin Tighe
p182
ssVis_accepted
p183
I01
sVlast_edit_date
p184
I1485529540
sVanswer_id
p185
I492399
sa(dp186
Vbody
p187
V<p>Use <a href="https://docs.python.org/3/library/os.html#os.rename" rel="noreferrer"><code>os.rename(src, dst)</code></a> to rename or move a file or a directory.</p>\u000a\u000a<pre><code>$ ls\u000acheese_cheese_type.bar  cheese_cheese_type.foo\u000a$ python\u000a&gt;&gt;&gt; import os\u000a&gt;&gt;&gt; for filename in os.listdir("."):\u000a...  if filename.startswith("cheese_"):\u000a...    os.rename(filename, filename[7:])\u000a... \u000a&gt;&gt;&gt; \u000a$ ls\u000acheese_type.bar  cheese_type.foo\u000a</code></pre>\u000a
p188
sVquestion_id
p189
I2759067
sVlast_activity_date
p190
I1484950021
sVcreation_date
p191
I1272900356
sVscore
p192
I476
sVowner
p193
(dp194
Vuser_id
p195
I196206
sVprofile_image
p196
Vhttps://www.gravatar.com/avatar/5b3e5f05b6457facb417239ce03739cb?s=128&d=identicon&r=PG
p197
sVuser_type
p198
Vregistered
p199
sVreputation
p200
I12437
sVlink
p201
Vhttp://stackoverflow.com/users/196206/messa
p202
sVdisplay_name
p203
VMessa
p204
ssVis_accepted
p205
I01
sVlast_edit_date
p206
I1484950021
sVanswer_id
p207
I2759130
sa(dp208
Vbody
p209
V<p>Modified from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer">recipes</a> section of Python's <a href="http://docs.python.org/library/itertools.html" rel="noreferrer">itertools</a> docs:</p>\u000a\u000a<pre><code>from itertools import izip_longest\u000a\u000adef grouper(iterable, n, fillvalue=None):\u000a    args = [iter(iterable)] * n\u000a    return izip_longest(*args, fillvalue=fillvalue)\u000a</code></pre>\u000a\u000a<p><strong>Example</strong><br>\u000aIn pseudocode to keep the example terse.</p>\u000a\u000a<pre><code>grouper('ABCDEFG', 3, 'x') --&gt; 'ABC' 'DEF' 'Gxx'\u000a</code></pre>\u000a\u000a<p><strong>Note:</strong> <code>izip_longest</code> is new to Python 2.6. In Python 3 use <code>zip_longest</code>.</p>\u000a
p210
sVquestion_id
p211
I434287
sVlast_activity_date
p212
I1484685176
sVcreation_date
p213
I1231733240
sVscore
p214
I200
sVowner
p215
(dp216
Vuser_id
p217
I48200
sVprofile_image
p218
Vhttps://www.gravatar.com/avatar/65768cfd9d879fe1daaa7bd98d098ade?s=128&d=identicon&r=PG
p219
sVuser_type
p220
Vregistered
p221
sVreputation
p222
I5478
sVlink
p223
Vhttp://stackoverflow.com/users/48200/craz
p224
sVdisplay_name
p225
VCraz
p226
ssVis_accepted
p227
I01
sVlast_edit_date
p228
I1484685176
sVanswer_id
p229
I434411
sa(dp230
Vbody
p231
V<p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows">iterrows</a> is a generator which yield both index and row</p>\u000a\u000a<pre><code>In [18]: for index, row in df.iterrows():\u000a   ....:     print row['c1'], row['c2']\u000a   ....:     \u000a10 100\u000a11 110\u000a12 120\u000a</code></pre>\u000a
p232
sVquestion_id
p233
I16476924
sVlast_activity_date
p234
I1484080631
sVcreation_date
p235
I1368169678
sVscore
p236
I455
sVowner
p237
(dp238
Vuser_id
p239
I1426056
sVprofile_image
p240
Vhttps://www.gravatar.com/avatar/3ac815b6fca201737db888a28efd7248?s=128&d=identicon&r=PG
p241
sVuser_type
p242
Vregistered
p243
sVreputation
p244
I19695
sVlink
p245
Vhttp://stackoverflow.com/users/1426056/waitingkuo
p246
sVaccept_rate
p247
I87
sVdisplay_name
p248
Vwaitingkuo
p249
ssVis_accepted
p250
I01
sVlast_edit_date
p251
I1484080631
sVanswer_id
p252
I16476974
sa(dp253
Vbody
p254
V<p>Use the original df1 indexes to create the series:</p>\u000a\u000a<pre><code>df1['e'] = Series(np.random.randn(sLength), index=df1.index)\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<hr>\u000a\u000a<p><strong>Edit 2015</strong><br>\u000aSome reported to get the <code>SettingWithCopyWarning</code> with this code.<br>\u000aHowever, the code still runs perfect with the current pandas version 0.16.1.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sLength = len(df1['a'])\u000a&gt;&gt;&gt; df1\u000a          a         b         c         d\u000a6 -0.269221 -0.026476  0.997517  1.294385\u000a8  0.917438  0.847941  0.034235 -0.448948\u000a\u000a&gt;&gt;&gt; df1['e'] = p.Series(np.random.randn(sLength), index=df1.index)\u000a&gt;&gt;&gt; df1\u000a          a         b         c         d         e\u000a6 -0.269221 -0.026476  0.997517  1.294385  1.757167\u000a8  0.917438  0.847941  0.034235 -0.448948  2.228131\u000a\u000a&gt;&gt;&gt; p.version.short_version\u000a'0.16.1'\u000a</code></pre>\u000a\u000a<p>The <code>SettingWithCopyWarning</code> aims to inform of a possibly invalid assignment on a copy of the Dataframe. It doesn't necessarily say you did it wrong (it can trigger false positives) but from 0.13.0 it let you know there are more adequate methods for the same purpose. Then, if you get the warning, just follow its advise: <em>Try using .loc[row_index,col_indexer] = value instead</em></p>\u000a\u000a<pre><code>&gt;&gt;&gt; df1.loc[:,'f'] = p.Series(np.random.randn(sLength), index=df1.index)\u000a&gt;&gt;&gt; df1\u000a          a         b         c         d         e         f\u000a6 -0.269221 -0.026476  0.997517  1.294385  1.757167 -0.050927\u000a8  0.917438  0.847941  0.034235 -0.448948  2.228131  0.006109\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a\u000a<p>In fact, this is currently the more efficient method as <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy">described in pandas docs</a></p>\u000a\u000a<hr>\u000a\u000a<hr>\u000a\u000a<p><strong>Edit 2017</strong></p>\u000a\u000a<p>As indicated in the comments and by @Alexander, currently the best method to add the values of a Series as a new column of a DataFrame could be using <code>assign</code>:</p>\u000a\u000a<pre><code>df1 = df1.assign(e=p.Series(np.random.randn(sLength)).values)\u000a</code></pre>\u000a
p255
sVquestion_id
p256
I12555323
sVlast_activity_date
p257
I1483790879
sVcreation_date
p258
I1348428285
sVscore
p259
I356
sVowner
p260
(dp261
Vuser_id
p262
I308903
sVprofile_image
p263
Vhttps://www.gravatar.com/avatar/712ac24edc67b5e789ed86dcc11ca6b9?s=128&d=identicon&r=PG
p264
sVuser_type
p265
Vregistered
p266
sVreputation
p267
I39537
sVlink
p268
Vhttp://stackoverflow.com/users/308903/joaquin
p269
sVaccept_rate
p270
I89
sVdisplay_name
p271
Vjoaquin
p272
ssVis_accepted
p273
I01
sVlast_edit_date
p274
I1483790879
sVanswer_id
p275
I12555510
sa(dp276
Vbody
p277
V<pre><code>from time import sleep\u000asleep(0.05)\u000a</code></pre>\u000a\u000a<p><a href="http://docs.python.org/library/time.html" rel="noreferrer">Reference</a></p>\u000a
p278
sVquestion_id
p279
I377454
sVlast_activity_date
p280
I1482364963
sVcreation_date
p281
I1229595830
sVscore
p282
I399
sVowner
p283
(dp284
Vuser_id
p285
I5757
sVprofile_image
p286
Vhttps://www.gravatar.com/avatar/7d4e26dfca44119ccc080a2ae4263267?s=128&d=identicon&r=PG
p287
sVuser_type
p288
Vregistered
p289
sVreputation
p290
I4287
sVlink
p291
Vhttp://stackoverflow.com/users/5757/will-boyce
p292
sVdisplay_name
p293
VWill Boyce
p294
ssVis_accepted
p295
I01
sVlast_edit_date
p296
I1482364963
sVanswer_id
p297
I377463
sa(dp298
Vbody
p299
V<p>Without the main sentinel, the code would be executed even if the script were imported as a module.</p>\u000a
p300
sVquestion_id
p301
I4041238
sVlast_activity_date
p302
I1482345084
sVcreation_date
p303
I1288256163
sVscore
p304
I330
sVowner
p305
(dp306
Vuser_id
p307
I20862
sVprofile_image
p308
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p309
sVuser_type
p310
Vregistered
p311
sVreputation
p312
I480818
sVlink
p313
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p314
sVaccept_rate
p315
I60
sVdisplay_name
p316
VIgnacio Vazquez-Abrams
p317
ssVis_accepted
p318
I01
sVlast_edit_date
p319
I1482345084
sVanswer_id
p320
I4041253
sa(dp321
Vbody
p322
V<p>Actually, a concise rule for Python Scope resolution, from <a href="http://rads.stackoverflow.com/amzn/click/0596513984" rel="noreferrer">Learning Python, 3rd. Ed.</a>. (These rules are specific to variable names, not attributes. If you reference it without a period, these rules apply)</p>\u000a\u000a<p>LEGB Rule.</p>\u000a\u000a<p><strong>L</strong>, Local \u2014 Names assigned in any way within a function (<code>def</code> or <code>lambda</code>)), and not declared global in that function.</p>\u000a\u000a<p><strong>E</strong>, Enclosing-function locals \u2014 Name in the local scope of any and all statically enclosing functions (<code>def</code> or <code>lambda</code>), from inner to outer.</p>\u000a\u000a<p><strong>G</strong>, Global (module) \u2014 Names assigned at the top-level of a module file, or by executing a <code>global</code> statement in a <code>def</code> within the file.</p>\u000a\u000a<p><strong>B</strong>, Built-in (Python) \u2014 Names preassigned in the built-in names module : <code>open</code>,<code>range</code>,<code>SyntaxError</code>,...</p>\u000a\u000a<p>So, in the case of</p>\u000a\u000a<pre><code>code1\u000aclass Foo:\u000a   code2\u000a   def spam.....\u000a      code3\u000a      for code4..:\u000a       code5\u000a       x()\u000a</code></pre>\u000a\u000a<p>The for loop does not have its own namespace. In LEGB order, the scopes would be </p>\u000a\u000a<p>L : local, in <code>def spam</code> (in <code>code3</code>, <code>code 4</code>, <code>code5</code>).</p>\u000a\u000a<p>E : Enclosed function, any enclosing functions (if the whole example were in another <code>def</code>)</p>\u000a\u000a<p>G : Global. Were there any <code>x</code> declared globally in the module (<code>code1</code>)?</p>\u000a\u000a<p>B : Any builtin <code>x</code> in Python.</p>\u000a\u000a<p><code>x</code> will never be found in <code>code2</code> (even in cases where you might expect it would, see <a href="http://stackoverflow.com/a/23471004/2810305">Antti's answer</a> or <a href="http://stackoverflow.com/q/13905741/2810305">here</a>).</p>\u000a
p323
sVquestion_id
p324
I291978
sVlast_activity_date
p325
I1479893933
sVcreation_date
p326
I1226753242
sVscore
p327
I244
sVowner
p328
(dp329
Vuser_id
p330
I35335
sVprofile_image
p331
Vhttps://www.gravatar.com/avatar/cea4dbf0bf2672b0121374c6423329e8?s=128&d=identicon&r=PG
p332
sVuser_type
p333
Vregistered
p334
sVreputation
p335
I4403
sVlink
p336
Vhttp://stackoverflow.com/users/35335/rizwan-kassim
p337
sVaccept_rate
p338
I75
sVdisplay_name
p339
VRizwan Kassim
p340
ssVis_accepted
p341
I01
sVlast_edit_date
p342
I1479893933
sVanswer_id
p343
I292502
sa(dp344
Vbody
p345
V<blockquote>\u000a  <p><strong>EDIT</strong> Adding info from <a href="http://stackoverflow.com/users/306312/thomas">Thomas</a>' comment</p>\u000a  \u000a  <p>Don't forget to open the file first</p>\u000a  \u000a  <p><code>thefile = open('test.txt', 'w')</code></p>\u000a</blockquote>\u000a\u000a<p>I'd use a loop:</p>\u000a\u000a<pre><code>for item in thelist:\u000a  thefile.write("%s\u005cn" % item)\u000a</code></pre>\u000a\u000a<p>or:</p>\u000a\u000a<pre><code>for item in thelist:\u000a  print&gt;&gt;thefile, item\u000a</code></pre>\u000a\u000a<p>If you're keen on a single function call, at least remove the square brackets <code>[]</code> so that the strings to be printed get made one at a time (a genexp rather than a listcomp) -- no reason to take up all the memory required to materialize the whole list of strings.</p>\u000a
p346
sVquestion_id
p347
I899103
sVlast_activity_date
p348
I1479835722
sVcreation_date
p349
I1243015461
sVscore
p350
I391
sVowner
p351
(dp352
Vuser_id
p353
I95810
sVprofile_image
p354
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p355
sVuser_type
p356
Vregistered
p357
sVreputation
p358
I515739
sVlink
p359
Vhttp://stackoverflow.com/users/95810/alex-martelli
p360
sVaccept_rate
p361
I80
sVdisplay_name
p362
VAlex Martelli
p363
ssVis_accepted
p364
I01
sVlast_edit_date
p365
I1479835722
sVanswer_id
p366
I899176
sa(dp367
Vbody
p368
V<p>Same concept as a <code>.jar</code> file in Java, it is a <code>.zip</code> file with some metadata files renamed <code>.egg</code>, for distributing code as bundles.</p>\u000a\u000a<p><a href="http://svn.python.org/projects/sandbox/trunk/setuptools/doc/formats.txt" rel="noreferrer">Specifically: The Internal Structure of Python Eggs</a></p>\u000a\u000a<blockquote>\u000a  <p>A "Python egg" is a logical structure embodying the release of a\u000a  specific version of a Python project, comprising its code, resources,\u000a  and metadata. There are multiple formats that can be used to\u000a  physically encode a Python egg, and others can be developed. However,\u000a  a key principle of Python eggs is that they should be discoverable and\u000a  importable. That is, it should be possible for a Python application to\u000a  easily and efficiently find out what eggs are present on a system, and\u000a  to ensure that the desired eggs' contents are importable.</p>\u000a  \u000a  <p>The <code>.egg</code> format is well-suited to distribution and the easy\u000a  uninstallation or upgrades of code, since the project is essentially\u000a  self-contained within a single directory or file, unmingled with any\u000a  other projects' code or resources.  It also makes it possible to have\u000a  multiple versions of a project simultaneously installed, such that\u000a  individual programs can select the versions they wish to use.</p>\u000a</blockquote>\u000a\u000a<p><em>Note: <a href="https://packaging.python.org/wheel_egg/" rel="noreferrer">Egg packaging has been superseded by Wheel packaging.</em></a></p>\u000a
p369
sVquestion_id
p370
I2051192
sVlast_activity_date
p371
I1478350282
sVcreation_date
p372
I1263319602
sVscore
p373
I388
sVowner
p374
(dp375
Vuser_id
p376
I177800
sVprofile_image
p377
Vhttps://www.gravatar.com/avatar/12356ae4540e9286f4984eb7beef801e?s=128&d=identicon&r=PG
p378
sVuser_type
p379
Vregistered
p380
sVreputation
p381
I41055
sVlink
p382
Vhttp://stackoverflow.com/users/177800/jarrod-roberson
p383
sVaccept_rate
p384
I78
sVdisplay_name
p385
VJarrod Roberson
p386
ssVis_accepted
p387
I01
sVlast_edit_date
p388
I1478350282
sVanswer_id
p389
I2051195
sa(dp390
Vbody
p391
V<p>For Python 2.7.x</p>\u000a\u000a<pre><code>inv_map = {v: k for k, v in my_map.iteritems()}\u000a</code></pre>\u000a\u000a<p>For Python 3+:</p>\u000a\u000a<pre><code>inv_map = {v: k for k, v in my_map.items()}\u000a</code></pre>\u000a
p392
sVquestion_id
p393
I483666
sVlast_activity_date
p394
I1476462061
sVcreation_date
p395
I1233069896
sVscore
p396
I419
sVowner
p397
(dp398
Vuser_id
p399
I12855
sVprofile_image
p400
Vhttps://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG
p401
sVuser_type
p402
Vregistered
p403
sVreputation
p404
I142689
sVlink
p405
Vhttp://stackoverflow.com/users/12855/silentghost
p406
sVaccept_rate
p407
I86
sVdisplay_name
p408
VSilentGhost
p409
ssVis_accepted
p410
I01
sVlast_edit_date
p411
I1476462061
sVanswer_id
p412
I483833
sa(dp413
Vbody
p414
V<p>With Python older than 2.7/3.1, that's pretty much how you do it. For newer versions, see <code>importlib.import_module</code> <a href="https://docs.python.org/2/library/importlib.html#importlib.import_module" rel="noreferrer">for 2.7+</a> and <a href="https://docs.python.org/3.1/library/importlib.html#importlib.import_module" rel="noreferrer">for 3.1+</a>.</p>\u000a\u000a<p>You can use <code>exec</code> if you want to as well.</p>\u000a\u000a<p>Note you can import a list of modules by doing this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; moduleNames = ['sys', 'os', 're', 'unittest'] \u000a&gt;&gt;&gt; moduleNames\u000a['sys', 'os', 're', 'unittest']\u000a&gt;&gt;&gt; modules = map(__import__, moduleNames)\u000a</code></pre>\u000a\u000a<p>Ripped straight from <a href="http://www.diveintopython.net/functional_programming/dynamic_import.html" rel="noreferrer">Dive Into Python</a>.</p>\u000a
p415
sVquestion_id
p416
I301134
sVlast_activity_date
p417
I1476410145
sVcreation_date
p418
I1227075438
sVscore
p419
I202
sVowner
p420
(dp421
Vuser_id
p422
I1057
sVprofile_image
p423
Vhttps://www.gravatar.com/avatar/e5778b659d144e38ed982c3f4e566089?s=128&d=identicon&r=PG
p424
sVuser_type
p425
Vregistered
p426
sVreputation
p427
I78316
sVlink
p428
Vhttp://stackoverflow.com/users/1057/harley-holcombe
p429
sVaccept_rate
p430
I80
sVdisplay_name
p431
VHarley Holcombe
p432
ssVis_accepted
p433
I01
sVlast_edit_date
p434
I1476410145
sVanswer_id
p435
I301146
sa(dp436
Vbody
p437
V<p>Using generator functions can make your example a little easier to read and probably boost the performance.</p>\u000a\u000a<h2>Python 2</h2>\u000a\u000a<pre><code>def flatten(l):\u000a    for el in l:\u000a        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):\u000a            for sub in flatten(el):\u000a                yield sub\u000a        else:\u000a            yield el\u000a</code></pre>\u000a\u000a<p>I used the <a href="http://docs.python.org/library/collections.html#abcs-abstract-base-classes" rel="noreferrer">Iterable ABC</a> added in 2.6.</p>\u000a\u000a<h2>Python 3</h2>\u000a\u000a<p>In Python 3, the <code>basestring</code> is no more, but you can use a tuple of <code>str</code> and <code>bytes</code> to get the same effect there.</p>\u000a\u000a<p>The <code>yield from</code> operator returns an item from a generator one at a time. This <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="noreferrer">syntax for delegating to a subgenerator</a> was added in 3.3</p>\u000a\u000a<pre><code>def flatten(l):\u000a    for el in l:\u000a        if isinstance(el, collections.Iterable) and not isinstance(el, (str, bytes)):\u000a            yield from flatten(el)\u000a        else:\u000a            yield el\u000a</code></pre>\u000a
p438
sVquestion_id
p439
I2158395
sVlast_activity_date
p440
I1473824992
sVcreation_date
p441
I1264718151
sVscore
p442
I245
sVowner
p443
(dp444
Vuser_id
p445
I680
sVprofile_image
p446
Vhttps://www.gravatar.com/avatar/4829c840d6358510b7ab02aa52c2f2ce?s=128&d=identicon&r=PG
p447
sVuser_type
p448
Vregistered
p449
sVreputation
p450
I17449
sVlink
p451
Vhttp://stackoverflow.com/users/680/cristian
p452
sVaccept_rate
p453
I72
sVdisplay_name
p454
VCristian
p455
ssVis_accepted
p456
I01
sVlast_edit_date
p457
I1473824992
sVanswer_id
p458
I2158532
sa(dp459
Vbody
p460
V<p>Python 2.x:</p>\u000a\u000a<pre><code>import urllib2\u000aurllib2.urlopen("http://example.com/foo/bar").read()\u000a</code></pre>\u000a\u000a<p>Python 3.x:</p>\u000a\u000a<pre><code>import urllib.request\u000aurllib.request.urlopen("http://example.com/foo/bar").read()\u000a</code></pre>\u000a\u000a<p>Documentation for <a href="https://docs.python.org/3.5/library/urllib.request.html" rel="noreferrer">urllib.request</a> and <a href="https://docs.python.org/3.3/tutorial/inputoutput.html#methods-of-file-objects" rel="noreferrer">read</a>.</p>\u000a\u000a<p>How is that?</p>\u000a
p461
sVquestion_id
p462
I645312
sVlast_activity_date
p463
I1473706056
sVcreation_date
p464
I1237002504
sVscore
p465
I467
sVowner
p466
(dp467
Vuser_id
p468
I40906
sVprofile_image
p469
Vhttps://www.gravatar.com/avatar/b4a08356600e1e28141b0d9fa60cbf74?s=128&d=identicon&r=PG
p470
sVuser_type
p471
Vregistered
p472
sVreputation
p473
I19944
sVlink
p474
Vhttp://stackoverflow.com/users/40906/nick-presta
p475
sVaccept_rate
p476
I91
sVdisplay_name
p477
VNick Presta
p478
ssVis_accepted
p479
I01
sVlast_edit_date
p480
I1473706056
sVanswer_id
p481
I645318
sa(dp482
Vbody
p483
V<p>When you write <code>[x]*3</code> you get, essentially, the list <code>[x, x, x]</code>. That is, a list with 3 references to the same <code>x</code>. When you then modify this single <code>x</code> it is visible via all three references to it.</p>\u000a\u000a<p>To fix it, you need to make sure that you create a new list at each position. One way to do it is</p>\u000a\u000a<pre><code>[[1]*4 for n in range(3)]\u000a</code></pre>\u000a
p484
sVquestion_id
p485
I240178
sVlast_activity_date
p486
I1470402646
sVcreation_date
p487
I1225119810
sVscore
p488
I229
sVowner
p489
(dp490
Vuser_id
p491
I30579
sVprofile_image
p492
Vhttps://www.gravatar.com/avatar/ae5b42b31b934b305c8f6bdb7595b926?s=128&d=identicon&r=PG
p493
sVuser_type
p494
Vregistered
p495
sVreputation
p496
I7148
sVlink
p497
Vhttp://stackoverflow.com/users/30579/cadaker
p498
sVdisplay_name
p499
VCAdaker
p500
ssVis_accepted
p501
I01
sVlast_edit_date
p502
I1470402646
sVanswer_id
p503
I240205
sa(dp504
Vcommunity_owned_date
p505
I1242936955
sVbody
p506
V<p>Unfortunately, at the moment, I don't think there is a "best" Python SOAP library. Each of the mainstream ones available has its own pros and cons.</p>\u000a\u000a<p>Older libraries:</p>\u000a\u000a<ul>\u000a<li><p><a href="http://soapy.sourceforge.net" rel="noreferrer">SOAPy</a>: Was the "best," but no longer maintained. Does not work on Python 2.5+</p></li>\u000a<li><p><a href="http://pywebsvcs.sourceforge.net" rel="noreferrer">ZSI</a>: Very painful to use, and development is slow. Has a module called "SOAPpy", which is different than SOAPy (above).</p></li>\u000a</ul>\u000a\u000a<p>"Newer" libraries:</p>\u000a\u000a<ul>\u000a<li><p><a href="https://fedorahosted.org/suds" rel="noreferrer">SUDS</a>: Very Pythonic, and easy to create WSDL-consuming SOAP clients. Creating SOAP servers is a little bit more difficult. (This package does not work with python3.)</p></li>\u000a<li><p><a href="https://github.com/arskom/spyne" rel="noreferrer">spyne</a>: Creating servers is easy, creating clients a little bit more challenging. Documentation is somewhat lacking.</p></li>\u000a<li><p><a href="http://pypi.python.org/pypi/ladon" rel="noreferrer">ladon</a>: Creating servers is much like in soaplib (using a decorator). Ladon exposes more interfaces than SOAP at the same time without extra user code needed.</p></li>\u000a<li><p><a href="http://code.google.com/p/pysimplesoap/" rel="noreferrer">pysimplesoap</a>: very lightweight but useful for both client and server - includes a web2py server integration that ships with web2py.</p></li>\u000a<li><a href="https://github.com/kiorky/SOAPpy" rel="noreferrer">SOAPpy</a>: Distinct from the abandoned SOAPpy that's hosted at the ZSI link above, this version was actually maintained until 2011, now it seems to be abandoned too.</li>\u000a<li><a href="http://www.python.org/pypi/soaplib" rel="noreferrer">soaplib</a>: Easy to use python library for writing and calling soap web services. Webservices written with soaplib are simple, lightweight, work well with other SOAP implementations, and can be deployed as WSGI applications.</li>\u000a<li><a href="https://bitbucket.org/sboz/osa" rel="noreferrer">osa</a>: A fast/slim easy to use SOAP python client library.</li>\u000a</ul>\u000a\u000a<p>Of the above, I've only used SUDS personally, and I liked it a lot.</p>\u000a\u000a<p><strong><em>Update:</em></strong></p>\u000a\u000a<p>Additionally to what is mentioned above, I will refer to <a href="https://wiki.python.org/moin/WebServices#SOAP" rel="noreferrer">Python WebServices</a> page which is always up-to-date with all actively maintained and recommended modules to <strong>SOAP</strong> and all other webservice types.</p>\u000a\u000a<p><strong><em>Update (2016):</em></strong></p>\u000a\u000a<p>If you only need SOAP client, there is well maintained library called <a href="http://docs.python-zeep.org/en/latest/" rel="noreferrer">zeep</a>. It supports both Python 2 and 3 :)</p>\u000a
p507
sVquestion_id
p508
I206154
sVlast_activity_date
p509
I1469709540
sVcreation_date
p510
I1224115522
sVscore
p511
I340
sVowner
p512
(dp513
Vuser_id
p514
I14878
sVprofile_image
p515
Vhttps://www.gravatar.com/avatar/ea5b465c21aded0b76e319f5ceeeec1e?s=128&d=identicon&r=PG
p516
sVuser_type
p517
Vregistered
p518
sVreputation
p519
I6543
sVlink
p520
Vhttp://stackoverflow.com/users/14878/samat-jain
p521
sVdisplay_name
p522
VSamat Jain
p523
ssVis_accepted
p524
I01
sVlast_edit_date
p525
I1469709540
sVanswer_id
p526
I206964
sa(dp527
Vbody
p528
V<p>The shebang line in any script determines the script's ability to be executed like an standalone executable without typing <code>python</code> beforehand in the terminal or when double clicking it in a file manager(when configured properly). It isn't necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they're looking at. However, which shebang line you use <strong>IS</strong> important;\u000a<strong>Correct</strong> usage is:</p>\u000a\u000a<pre><code>#!/usr/bin/env python\u000a</code></pre>\u000a\u000a<p><code>#!/usr/bin/env python</code> Usually defaults to python 2.7.latest, and the following defaults to 3.latest</p>\u000a\u000a<pre><code>#!/usr/bin/env python3\u000a</code></pre>\u000a\u000a<h3><strong>DO NOT Use:</strong></h3>\u000a\u000a<pre><code>#!/usr/local/bin/python\u000a</code></pre>\u000a\u000a<blockquote>\u000a  <p>"python may be installed at /usr/bin/python or /bin/python in those\u000a  cases, the above #! will fail."</p>\u000a</blockquote>\u000a\u000a<p>--<a href="https://mail.python.org/pipermail/tutor/2007-June/054816.html" rel="noreferrer">"#!/usr/bin/env python" vs "#!/usr/local/bin/python"</a></p>\u000a
p529
sVquestion_id
p530
I6908143
sVlast_activity_date
p531
I1469013663
sVcreation_date
p532
I1381435135
sVscore
p533
I452
sVowner
p534
(dp535
Vuser_id
p536
I144020
sVprofile_image
p537
Vhttps://www.gravatar.com/avatar/cae9f3dfd5cdaab0b22a1d4d4c7be29c?s=128&d=identicon&r=PG
p538
sVuser_type
p539
Vregistered
p540
sVreputation
p541
I3802
sVlink
p542
Vhttp://stackoverflow.com/users/144020/glassghost
p543
sVaccept_rate
p544
I72
sVdisplay_name
p545
VGlassGhost
p546
ssVis_accepted
p547
I01
sVlast_edit_date
p548
I1469013663
sVanswer_id
p549
I19305076
sa(dp550
Vbody
p551
V<p>I encountered the same <code>ImportError</code> today while trying to use pip. Somehow the <code>setuptools</code> package had been deleted in my Python environment.</p>\u000a\u000a<p>To fix the issue, run the setup script for <code>setuptools</code>:</p>\u000a\u000a<pre><code>wget https://bootstrap.pypa.io/ez_setup.py -O - | python\u000a</code></pre>\u000a\u000a<p>(or if you don't have <code>wget</code> installed (e.g. OS X), try</p>\u000a\u000a<pre><code>curl https://bootstrap.pypa.io/ez_setup.py | python\u000a</code></pre>\u000a\u000a<p>possibly with <code>sudo</code> prepended.)</p>\u000a\u000a<p>If you have any version of <a href="http://pythonhosted.org/setuptools/merge-faq.html"><code>distribute</code></a>, or any <code>setuptools</code> below 0.6, you will have to uninstall it first.*</p>\u000a\u000a<p>See <a href="https://pypi.python.org/pypi/setuptools/0.9.8#installation-instructions">Installation Instructions</a> for further details.</p>\u000a\u000a<hr>\u000a\u000a<p>* If you already have a working <code>distribute</code>, upgrading it to the "compatibility wrapper" that switches you over to <code>setuptools</code> is easier. But if things are already broken, don't try that.</p>\u000a
p552
sVquestion_id
p553
I7446187
sVlast_activity_date
p554
I1464912671
sVcreation_date
p555
I1336667368
sVscore
p556
I496
sVowner
p557
(dp558
Vuser_id
p559
I1200865
sVprofile_image
p560
Vhttps://www.gravatar.com/avatar/0dfbab4c14b93778cf866c1ccefe6573?s=128&d=identicon&r=PG
p561
sVuser_type
p562
Vregistered
p563
sVreputation
p564
I5993
sVlink
p565
Vhttp://stackoverflow.com/users/1200865/cwc
p566
sVdisplay_name
p567
Vcwc
p568
ssVis_accepted
p569
I01
sVlast_edit_date
p570
I1464912671
sVanswer_id
p571
I10538412
sa(dp572
Vbody
p573
V<p>It's a way of generating a valid URL, generally using data already obtained. For instance, using the title of an article to generate a URL. I'd advise to generate the slug, using a function, given a title (or other piece of data), rather than setting it manually.</p>\u000a\u000a<p>An example:</p>\u000a\u000a<pre class="lang-html prettyprint-override"><code>&lt;title&gt; The 46 Year Old Virgin &lt;/title&gt;\u000a&lt;content&gt; A silly comedy movie &lt;/content&gt;\u000a&lt;slug&gt; the-46-year-old-virgin &lt;/slug&gt;\u000a</code></pre>\u000a\u000a<p>Now let's pretend that we have a Django model such as:</p>\u000a\u000a<pre class="lang-python prettyprint-override"><code>class Article(models.Model):\u000a    title = models.CharField(max_length=100)\u000a    content = models.TextField(max_length=1000)\u000a    slug = models.SlugField(max_length=40)\u000a</code></pre>\u000a\u000a<p>How would you reference this object with a URL, with a meaningful name? You could use Article.id so the URL would look like this:</p>\u000a\u000a<pre><code>www.example.com/article/23\u000a</code></pre>\u000a\u000a<p>Or, you could reference the title like so:</p>\u000a\u000a<pre><code>www.example.com/article/The 46 Year Old Virgin\u000a</code></pre>\u000a\u000a<p>Problem is, spaces aren't valid in URLs, they need to be replaced by <code>%20</code> which is ugly, making it the following:</p>\u000a\u000a<pre><code>www.example.com/article/The%2046%20Year%20Old%20Virgin\u000a</code></pre>\u000a\u000a<p>That's not solving our meaningful URL. Wouldn't this be better:</p>\u000a\u000a<pre><code>www.example.com/article/the-46-year-old-virgin\u000a</code></pre>\u000a\u000a<p>That's a slug. <code>the-46-year-old-virgin</code>. All letters are downcased and spaces are replaced by hyphens <code>-</code>. See the URL of this very webpage for an example!</p>\u000a
p574
sVquestion_id
p575
I427102
sVlast_activity_date
p576
I1464889767
sVcreation_date
p577
I1231479107
sVscore
p578
I400
sVowner
p579
(dp580
Vuser_id
p581
I10583
sVprofile_image
p582
Vhttps://www.gravatar.com/avatar/3891f38e5165127cac92a4e9e4aba688?s=128&d=identicon&r=PG
p583
sVuser_type
p584
Vregistered
p585
sVreputation
p586
I26448
sVlink
p587
Vhttp://stackoverflow.com/users/10583/josh-smeaton
p588
sVaccept_rate
p589
I88
sVdisplay_name
p590
VJosh Smeaton
p591
ssVis_accepted
p592
I01
sVlast_edit_date
p593
I1464889767
sVanswer_id
p594
I427160
sa(dp595
Vbody
p596
V<p>Take a look at this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = 256\u000a&gt;&gt;&gt; b = 256\u000a&gt;&gt;&gt; id(a)\u000a9987148\u000a&gt;&gt;&gt; id(b)\u000a9987148\u000a&gt;&gt;&gt; a = 257\u000a&gt;&gt;&gt; b = 257\u000a&gt;&gt;&gt; id(a)\u000a11662816\u000a&gt;&gt;&gt; id(b)\u000a11662828\u000a</code></pre>\u000a\u000a<p>EDIT: Here's what I found in the Python 2 documentation, <a href="https://docs.python.org/2/c-api/int.html" rel="noreferrer">"Plain Integer Objects"</a> (It's the same for <a href="https://docs.python.org/3/c-api/long.html" rel="noreferrer">Python 3</a>):</p>\u000a\u000a<blockquote>\u000a  <p>The current implementation keeps an\u000a  array of integer objects for all\u000a  integers between -5 and 256, when you\u000a  create an int in that range you\u000a  actually just get back a reference to\u000a  the existing object. So it should be\u000a  possible to change the value of 1. I\u000a  suspect the behaviour of Python in\u000a  this case is undefined. :-)</p>\u000a</blockquote>\u000a
p597
sVquestion_id
p598
I306313
sVlast_activity_date
p599
I1464720336
sVcreation_date
p600
I1227205820
sVscore
p601
I243
sVowner
p602
(dp603
Vuser_id
p604
I32998
sVprofile_image
p605
Vhttps://www.gravatar.com/avatar/f599950caf04b08ccc7cbf066312121d?s=128&d=identicon&r=PG
p606
sVuser_type
p607
Vregistered
p608
sVreputation
p609
I6353
sVlink
p610
Vhttp://stackoverflow.com/users/32998/cybis
p611
sVaccept_rate
p612
I100
sVdisplay_name
p613
VCybis
p614
ssVis_accepted
p615
I01
sVlast_edit_date
p616
I1464720336
sVanswer_id
p617
I306353
sa(dp618
Vbody
p619
V<p>I would just raise <a href="https://docs.python.org/2/library/exceptions.html#exceptions.ValueError" rel="noreferrer">ValueError</a>, unless you need a more specific exception..</p>\u000a\u000a<pre><code>def import_to_orm(name, save=False, recurse=False):\u000a    if recurse and not save:\u000a        raise ValueError("save must be True if recurse is True")\u000a</code></pre>\u000a\u000a<p>There's really no point in doing <code>class BadValueError(ValueError):pass</code> - your custom class is identical in use to <a href="https://docs.python.org/2/library/exceptions.html#exceptions.ValueError" rel="noreferrer">ValueError</a>, so why not use that?</p>\u000a
p620
sVquestion_id
p621
I256222
sVlast_activity_date
p622
I1461953046
sVcreation_date
p623
I1225582651
sVscore
p624
I293
sVowner
p625
(dp626
Vuser_id
p627
I745
sVprofile_image
p628
Vhttps://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=128&d=identicon&r=PG
p629
sVuser_type
p630
Vregistered
p631
sVreputation
p632
I100229
sVlink
p633
Vhttp://stackoverflow.com/users/745/dbr
p634
sVaccept_rate
p635
I90
sVdisplay_name
p636
Vdbr
p637
ssVis_accepted
p638
I01
sVlast_edit_date
p639
I1461953046
sVanswer_id
p640
I256260
sa(dp641
Vbody
p642
V<p>To read user input you can try <a href="http://docs.python.org/2/library/cmd.html" rel="noreferrer">the cmd module</a> for easily creating a mini-command line interpreter (with help texts and autocompletion) and <a href="http://docs.python.org/2/library/functions.html#raw_input" rel="noreferrer">raw_input</a> for less fancy stuff (just reading a line of text from the user).</p>\u000a\u000a<p>Command line inputs are in sys.argv. Try this in your script for Python 2:</p>\u000a\u000a<pre><code>import sys\u000aprint sys.argv\u000a</code></pre>\u000a\u000a<p>For Python 3:</p>\u000a\u000a<pre><code>import sys\u000aprint(sys.argv)\u000a</code></pre>\u000a\u000a<p>Since print has changed from a keyword in Python 2 into a function call in Python 3. </p>\u000a\u000a<p>There are two modules for parsing command line options: <a href="http://docs.python.org/2/library/optparse.html" rel="noreferrer">optparse</a> and <a href="http://docs.python.org/2/library/getopt.html" rel="noreferrer">getopt</a>. If you just want to input files to your script, behold the power of <a href="http://docs.python.org/2/library/fileinput.html" rel="noreferrer">fileinput</a>.</p>\u000a\u000a<p>The <a href="http://docs.python.org/2/library/" rel="noreferrer">Python library reference is your friend</a>.</p>\u000a
p643
sVquestion_id
p644
I70797
sVlast_activity_date
p645
I1461741439
sVcreation_date
p646
I1221558640
sVscore
p647
I218
sVowner
p648
(dp649
Vuser_id
p650
I8570
sVprofile_image
p651
Vhttps://www.gravatar.com/avatar/c81dee2ef36d2c0d115aebfc660b2f1f?s=128&d=identicon&r=PG
p652
sVuser_type
p653
Vregistered
p654
sVreputation
p655
I4553
sVlink
p656
Vhttp://stackoverflow.com/users/8570/antti-rasinen
p657
sVdisplay_name
p658
VAntti Rasinen
p659
ssVis_accepted
p660
I01
sVlast_edit_date
p661
I1461741439
sVanswer_id
p662
I70833
sa(dp663
Vbody
p664
V<p>I don't really see the need, as a module with functions (and not a class) would serve well as a singleton. All its variables would be bound to the module, which could not be instantiated repeatedly anyway. </p>\u000a\u000a<p>If you do wish to use a class, there is no way of creating private classes or private constructors in Python, so you can't protect against multiple instantiations, other than just via convention in use of your API. I would still just put methods in a module, and consider the module as the singleton.</p>\u000a
p665
sVquestion_id
p666
I31875
sVlast_activity_date
p667
I1457901856
sVcreation_date
p668
I1219914612
sVscore
p669
I271
sVowner
p670
(dp671
Vuser_id
p672
I3355
sVprofile_image
p673
Vhttps://www.gravatar.com/avatar/f6ad9abb5f92bb63ef248518e255b1c9?s=128&d=identicon&r=PG
p674
sVuser_type
p675
Vregistered
p676
sVreputation
p677
I14190
sVlink
p678
Vhttp://stackoverflow.com/users/3355/staale
p679
sVaccept_rate
p680
I69
sVdisplay_name
p681
VStaale
p682
ssVis_accepted
p683
I01
sVlast_edit_date
p684
I1457901856
sVanswer_id
p685
I31887
sasVquota_max
p686
I300
sVquota_remaining
p687
I254
s.