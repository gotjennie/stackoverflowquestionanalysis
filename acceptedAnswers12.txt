(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>You need to add <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow noreferrer">2 methods</a>, note <code>__hash__</code> and  <code>__eq__</code>:</p>\u000a\u000a<pre><code>class MyThing:\u000a    def __init__(self,name,location,length):\u000a        self.name = name\u000a        self.location = location\u000a        self.length = length\u000a\u000a    def __hash__(self):\u000a        return hash((self.name, self.location))\u000a\u000a    def __eq__(self, other):\u000a        return (self.name, self.location) == (other.name, other.location)\u000a\u000a    def __ne__(self, other):\u000a        # Not strictly necessary, but to avoid having both x==y and x!=y\u000a        # True at the same time\u000a        return not(self == other)\u000a</code></pre>\u000a\u000a<p>The Python <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">dict documentation</a> defines these requirements on key objects, i.e. they must be <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow noreferrer">hashable</a>.</p>\u000a
p6
sVquestion_id
p7
I4901815
sVlast_activity_date
p8
I1492488798
sVcreation_date
p9
I1296845744
sVscore
p10
I141
sVowner
p11
(dp12
Vuser_id
p13
I320726
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/02041b18199678d1f02e6d5040dbb907?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I74425
sVlink
p19
Vhttp://stackoverflow.com/users/320726/6502
p20
sVaccept_rate
p21
I72
sVdisplay_name
p22
V6502
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1492488798
sVanswer_id
p26
I4901847
sa(dp27
Vbody
p28
V<p>Sure, if this comes up a lot, make a function like this one. You can even configure it to load every time you start IPython: <a href="https://ipython.org/ipython-doc/1/config/overview.html" rel="noreferrer">https://ipython.org/ipython-doc/1/config/overview.html</a></p>\u000a\u000a<pre><code>def print_full(x):\u000a    pd.set_option('display.max_rows', len(x))\u000a    print(x)\u000a    pd.reset_option('display.max_rows')\u000a</code></pre>\u000a\u000a<p>As for coloring, getting too elaborate with colors sounds counterproductive to me, but I agree something like <a href="http://getbootstrap.com/2.3.2/base-css.html#tables" rel="noreferrer">bootstrap's <code>.table-striped</code></a> would be nice. You could always <a href="https://github.com/pydata/pandas/issues" rel="noreferrer">create an issue</a> to suggest this feature.</p>\u000a
p29
sVquestion_id
p30
I19124601
sVlast_activity_date
p31
I1488104743
sVcreation_date
p32
I1380664110
sVscore
p33
I104
sVowner
p34
(dp35
Vuser_id
p36
I1221924
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/f54c6896f32653516c994bfcb12b704a?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I13183
sVlink
p42
Vhttp://stackoverflow.com/users/1221924/dan-allan
p43
sVaccept_rate
p44
I80
sVdisplay_name
p45
VDan Allan
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1488104743
sVanswer_id
p49
I19126566
sa(dp50
Vbody
p51
V<p>In Python 2.6 or better:</p>\u000a\u000a<p>If you want <code>StopIteration</code> to be raised if no matching element is found:</p>\u000a\u000a<p><code>next(x for x in the_iterable if x &gt; 3)</code></p>\u000a\u000a<p>If you want <code>default_value</code> (e.g. <code>None</code>) to be returned instead:</p>\u000a\u000a<p><code>next( (x for x in the_iterable if x&gt;3), default_value)</code></p>\u000a\u000a<p>Note that you need an extra pair of parentheses around the generator expression in this case - they are needed always when the generator expression isn't the only argument.</p>\u000a\u000a<p>I see most answers resolutely ignore the <a href="https://docs.python.org/2/library/functions.html#next" rel="noreferrer"><code>next</code></a> built-in and so I assume that for some mysterious reason they're 100% focused on versions 2.5 and older -- without mentioning the Python-version issue (but then I don't see that mention in the answers that <em>do</em> mention the <code>next</code> built-in, which is why I thought it necessary to provide an answer myself -- at least the "correct version" issue gets on record this way;-).</p>\u000a\u000a<p>In 2.5, the <a href="https://docs.python.org/2.5/ref/yieldexpr.html#l2h-407" rel="noreferrer"><code>.next()</code></a> method of iterators immediately raises <code>StopIteration</code> if the iterator immediately finishes -- i.e., for your use case, if no item in the iterable satisfies the condition.  If you don't care (i.e., you know there <strong>must</strong> be at least one satisfactory item) then just use <code>.next()</code> (best on a genexp, line for the <code>next</code> built-in in Python 2.6 and better).</p>\u000a\u000a<p>If you <em>do</em> care, wrapping things in a function as you had first indicated in your Q seems best, and while the function implementation you proposed is just fine, you could alternatively use <code>itertools</code>, a <code>for...: break</code> loop, or a genexp, or a <code>try/except StopIteration</code> as the function's body, as various answers suggested.  There's not much added value in any of these alternatives so I'd go for the starkly-simple version you first proposed.</p>\u000a
p52
sVquestion_id
p53
I2361426
sVlast_activity_date
p54
I1484736866
sVcreation_date
p55
I1267543766
sVscore
p56
I196
sVowner
p57
(dp58
Vuser_id
p59
I95810
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I516079
sVlink
p65
Vhttp://stackoverflow.com/users/95810/alex-martelli
p66
sVaccept_rate
p67
I80
sVdisplay_name
p68
VAlex Martelli
p69
ssVis_accepted
p70
I01
sVlast_edit_date
p71
I1484736866
sVanswer_id
p72
I2364277
sa(dp73
Vbody
p74
V<p>From the <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#the-pk-lookup-shortcut" rel="noreferrer">Django documentation</a>:</p>\u000a\u000a<pre><code>Blog.objects.filter(pk__in=[1, 4, 7])\u000a</code></pre>\u000a
p75
sVquestion_id
p76
I9304908
sVlast_activity_date
p77
I1484681621
sVcreation_date
p78
I1329361557
sVscore
p79
I265
sVowner
p80
(dp81
Vuser_id
p82
I199649
sVprofile_image
p83
Vhttps://www.gravatar.com/avatar/894eaf7d342e28755670466829510b36?s=128&d=identicon&r=PG
p84
sVuser_type
p85
Vregistered
p86
sVreputation
p87
I8514
sVlink
p88
Vhttp://stackoverflow.com/users/199649/charlax
p89
sVaccept_rate
p90
I88
sVdisplay_name
p91
Vcharlax
p92
ssVis_accepted
p93
I01
sVlast_edit_date
p94
I1484681621
sVanswer_id
p95
I9304968
sa(dp96
Vbody
p97
V<h2>Solution - almost no coding needed</h2>\u000a\u000a<p>Just inherit your exception class from <code>Exception</code> and pass the message as the first parameter to the constructor</p>\u000a\u000a<p>Example:</p>\u000a\u000a<pre><code>class MyException(Exception):\u000a    """My documentation"""\u000a\u000atry:\u000a    raise MyException('my detailed description')\u000aexcept MyException as my:\u000a    print my # outputs 'my detailed description'\u000a</code></pre>\u000a\u000a<p>You can use <code>str(my)</code> or (less elegant) <code>my.args[0]</code> to access the custom message.</p>\u000a\u000a<h2>Background</h2>\u000a\u000a<p>In the newer versions of Python (from 2.6) we are supposed to inherit our custom exception classes from Exception which (<a href="http://docs.python.org/library/exceptions.html#exceptions.Exception" rel="nofollow noreferrer">starting from Python 2.5</a>) inherits from BaseException. The background is described in detail in <a href="http://www.python.org/dev/peps/pep-0352/" rel="nofollow noreferrer">PEP 352</a>.</p>\u000a\u000a<pre><code>class BaseException(object):\u000a\u000a    """Superclass representing the base of the exception hierarchy.\u000a    Provides an 'args' attribute that contains all arguments passed\u000a    to the constructor.  Suggested practice, though, is that only a\u000a    single string argument be passed to the constructor."""\u000a</code></pre>\u000a\u000a<p><code>__str__</code> and <code>__repr__</code> are already implemented in a meaningful way, \u000aespecially for the case of only one arg (that can be used as message).</p>\u000a\u000a<p>You do not need to repeat <code>__str__</code> or <code>__init__</code> implementation or create <code>_get_message</code> as suggested by others.</p>\u000a
p98
sVquestion_id
p99
I1272138
sVlast_activity_date
p100
I1481525089
sVcreation_date
p101
I1305629914
sVscore
p102
I111
sVowner
p103
(dp104
Vuser_id
p105
I111995
sVprofile_image
p106
Vhttps://www.gravatar.com/avatar/e5536e38257a6ca81a0476ee928d237f?s=128&d=identicon&r=PG
p107
sVuser_type
p108
Vregistered
p109
sVreputation
p110
I19182
sVlink
p111
Vhttp://stackoverflow.com/users/111995/geekq
p112
sVaccept_rate
p113
I38
sVdisplay_name
p114
VgeekQ
p115
ssVis_accepted
p116
I01
sVlast_edit_date
p117
I1481525089
sVanswer_id
p118
I6029838
sa(dp119
Vbody
p120
V<p>Here is some list functions based on <a href="http://stackoverflow.com/questions/280243/python-linked-list#280284">Martin v. Löwis's representation</a>:</p>\u000a\u000a<pre><code>cons   = lambda el, lst: (el, lst)\u000amklist = lambda *args: reduce(lambda lst, el: cons(el, lst), reversed(args), None)\u000acar = lambda lst: lst[0] if lst else lst\u000acdr = lambda lst: lst[1] if lst else lst\u000anth = lambda n, lst: nth(n-1, cdr(lst)) if n &gt; 0 else car(lst)\u000alength  = lambda lst, count=0: length(cdr(lst), count+1) if lst else count\u000abegin   = lambda *args: args[-1]\u000adisplay = lambda lst: begin(w("%s " % car(lst)), display(cdr(lst))) if lst else w("nil\u005cn")\u000a</code></pre>\u000a\u000a<p>where <code>w = sys.stdout.write</code></p>\u000a\u000a<p>Although doubly linked lists are famously used in Raymond Hettinger's <a href="http://code.activestate.com/recipes/576694-orderedset/" rel="nofollow noreferrer">ordered set recipe</a>, singly linked lists have no practical value in Python.</p>\u000a\u000a<p>I've <em>never</em> used a singly linked list in Python for any problem except educational. </p>\u000a\u000a<p>Thomas Watnedal <a href="http://stackoverflow.com/questions/280243/python-linked-list#280280">suggested</a> a good educational resource <a href="http://greenteapress.com/thinkpython/html/chap17.html" rel="nofollow noreferrer">How to Think Like a Computer Scientist, Chapter 17: Linked lists</a>:</p>\u000a\u000a<p>A linked list is either: </p>\u000a\u000a<ul>\u000a<li>the empty list, represented by None, or </li>\u000a<li><p>a node that contains a cargo object and a reference to a linked list.</p>\u000a\u000a<pre><code>class Node: \u000a  def __init__(self, cargo=None, next=None): \u000a    self.car = cargo \u000a    self.cdr = next    \u000a  def __str__(self): \u000a    return str(self.car)\u000a\u000adef display(lst):\u000a  if lst:\u000a    w("%s " % lst)\u000a    display(lst.cdr)\u000a  else:\u000a    w("nil\u005cn")\u000a</code></pre></li>\u000a</ul>\u000a
p121
sVquestion_id
p122
I280243
sVlast_activity_date
p123
I1480991483
sVcreation_date
p124
I1226488215
sVscore
p125
I56
sVowner
p126
(dp127
Vuser_id
p128
I4279
sVprofile_image
p129
Vhttps://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG
p130
sVuser_type
p131
Vregistered
p132
sVreputation
p133
I203089
sVlink
p134
Vhttp://stackoverflow.com/users/4279/j-f-sebastian
p135
sVaccept_rate
p136
I94
sVdisplay_name
p137
VJ.F. Sebastian
p138
ssVis_accepted
p139
I01
sVlast_edit_date
p140
I1480991483
sVanswer_id
p141
I283630
sa(dp142
Vbody
p143
V<p>Wrapping up the various event systems that are mentioned in the answers here:</p>\u000a\u000a<p>The most basic style of event system is the 'bag of handler methods', which is a simple implementation of the <a href="http://en.wikipedia.org/wiki/Observer_pattern" rel="noreferrer">Observer pattern</a>.  Basically, the handler methods (callables) are stored in an array and are each called when the event 'fires'.</p>\u000a\u000a<ul>\u000a<li><a href="https://pypi.python.org/pypi/zope.event" rel="noreferrer">zope.event</a> shows the bare bones of how this works (see <a href="http://stackoverflow.com/a/1092617/1075152">Lennart's answer</a>). Note: this example does not even support handler arguments.</li>\u000a<li><a href="http://stackoverflow.com/a/2022629/1075152">LongPoke's 'callable list'</a> implementation shows that such an event system can be implemented very minimalistically by subclassing <code>list</code>.</li>\u000a<li><a href="http://stackoverflow.com/a/1094423/1075152">spassig's EventHook</a> (Michael Foord's Event Pattern) is a straightforward implementation.</li>\u000a<li><a href="http://stackoverflow.com/a/1096614/1075152">Josip's Valued Lessons Event class</a> is basically the same, but uses a <code>set</code> instead of a <code>list</code> to store the bag, and implements <code>__call__</code> which are both reasonable additions.</li>\u000a<li><a href="http://home.gna.org/py-notify/" rel="noreferrer">PyNotify</a> is similar in concept and also provides additional concepts of variables and conditions ('variable changed event').</li>\u000a<li><a href="https://pypi.python.org/pypi/axel" rel="noreferrer">axel</a> is basically a bag-of-handlers with more features related to threading, error handling, ...</li>\u000a</ul>\u000a\u000a<p>The disadvantage of these event systems is that you can only register the handlers on the actual Event object (or handlers list).\u000aSo at registration time the event already needs to exist.</p>\u000a\u000a<p>That's why the second style of event systems exists: the <a href="http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern" rel="noreferrer">publish-subscribe pattern</a>.\u000aHere, the handlers don't register on an event object (or handler list), but on a central dispatcher.  Also the notifiers only talk to the dispatcher.  What to listen for, or what to publish is determined by 'signal', which is nothing more than a name (string).</p>\u000a\u000a<ul>\u000a<li><a href="https://pythonhosted.org/blinker/" rel="noreferrer">blinker</a> has some nifty features such as automatic disconnection and filtering based on sender.</li>\u000a<li><a href="https://github.com/schollii/pypubsub" rel="noreferrer">PyPubSub</a> at first sight seems to be pretty straightforward; apparently does not yet support Python3</li>\u000a<li><a href="http://pydispatcher.sourceforge.net/" rel="noreferrer">PyDispatcher</a> seems to emphasize flexibility with regards to many-to-many publication etc.</li>\u000a<li><a href="https://github.com/11craft/louie" rel="noreferrer">louie</a> is a reworked PyDispatcher "providing plugin infrastructure including Twisted and PyQt specific support".</li>\u000a<li><a href="https://code.djangoproject.com/browser/django/trunk/django/dispatch" rel="noreferrer">django.dispatch</a> is a rewritten PyDispatcher "with a more limited interface, but higher performance".</li>\u000a<li>Qt's Signals and Slots are available from <a href="http://pyqt.sourceforge.net/Docs/PyQt4/new_style_signals_slots.html" rel="noreferrer">PyQt</a> or <a href="https://wiki.qt.io/Signals_and_Slots_in_PySide" rel="noreferrer">PySide</a>. They work as callback when used in the same thread, or as events (using an event loop) between two different threads.  Signals and Slots have the limitation that they only work in objects of classes that derive from <code>QObject</code>.</li>\u000a</ul>\u000a\u000a<p>Note: <a href="https://docs.python.org/3.5/library/threading.html#event-objects" rel="noreferrer">threading.Event</a> is not an 'event system' in the above sense.  It's a thread synchronization system where one thread waits until another thread 'signals' the Event object.</p>\u000a
p144
sVquestion_id
p145
I1092531
sVlast_activity_date
p146
I1477662842
sVcreation_date
p147
I1366807135
sVscore
p148
I66
sVowner
p149
(dp150
Vuser_id
p151
I1075152
sVprofile_image
p152
Vhttps://www.gravatar.com/avatar/617a28399f0834b1d90ff38472b6c0de?s=128&d=identicon&r=PG
p153
sVuser_type
p154
Vregistered
p155
sVreputation
p156
I2665
sVlink
p157
Vhttp://stackoverflow.com/users/1075152/florisla
p158
sVdisplay_name
p159
Vflorisla
p160
ssVis_accepted
p161
I01
sVlast_edit_date
p162
I1477662842
sVanswer_id
p163
I16192256
sa(dp164
Vbody
p165
V<p>What is <code>int(True)</code>? It is <code>1</code>.</p>\u000a\u000a<p><code>1</code> is:</p>\u000a\u000a<pre><code>00000001\u000a</code></pre>\u000a\u000a<p>and <code>~1</code> is:</p>\u000a\u000a<pre><code>11111110\u000a</code></pre>\u000a\u000a<p>Which is <code>-2</code> in <a href="http://en.wikipedia.org/wiki/Two%27s_complement" rel="nofollow">Two's complement</a><sup>1</sup></p>\u000a\u000a<p><sup>1</sup> Flip all the bits, add 1 to the resulting number and interpret the result as a <em>binary representation</em> of the magnitude and add a negative sign (since the number begins with 1):</p>\u000a\u000a<pre><code>11111110 \u2192 00000001 \u2192 00000010 \u000a         \u2191          \u2191 \u000a       Flip       Add 1\u000a</code></pre>\u000a\u000a<p>Which is 2, but the sign is negative since the <a href="http://en.wikipedia.org/wiki/Most_significant_bit" rel="nofollow">MSB</a> is 1.</p>\u000a\u000a<hr>\u000a\u000a<p>Worth mentioning:</p>\u000a\u000a<p>Think about <code>bool</code>, you'll find that it's numeric in nature - It has two values, <code>True</code> and <code>False</code>, and they are just "customized" versions of the integers 1 and 0 that only print themselves differently. They are <em>subclasses</em> of the integer type <code>int</code>.</p>\u000a\u000a<p>So they behave exactly as 1 and 0, except that <code>bool</code> redefines <code>str</code> and <code>repr</code> to display them differently.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; type(True)\u000a&lt;class 'bool'&gt;\u000a&gt;&gt;&gt; isinstance(True, int)\u000aTrue\u000a\u000a&gt;&gt;&gt; True == 1\u000aTrue\u000a&gt;&gt;&gt; True is 1  # they're still different objects\u000aFalse\u000a</code></pre>\u000a
p166
sVquestion_id
p167
I21881362
sVlast_activity_date
p168
I1476882242
sVcreation_date
p169
I1392815379
sVscore
p170
I231
sVowner
p171
(dp172
Vuser_id
p173
I1735406
sVprofile_image
p174
Vhttps://i.stack.imgur.com/Hz9S7.png?s=128&g=1
p175
sVuser_type
p176
Vregistered
p177
sVreputation
p178
I63490
sVlink
p179
Vhttp://stackoverflow.com/users/1735406/maroun-maroun
p180
sVaccept_rate
p181
I98
sVdisplay_name
p182
VMaroun Maroun
p183
ssVis_accepted
p184
I01
sVlast_edit_date
p185
I1476882242
sVanswer_id
p186
I21881463
sa(dp187
Vbody
p188
V<pre><code>other = s or "some default value"\u000a</code></pre>\u000a\u000a<p>Ok, it must be clarified how the <code>or</code> operator works. It is a boolean operator, so it works in a boolean context. If the values are not boolean, they are converted to boolean for the purposes of the operator.</p>\u000a\u000a<p>Note that the <code>or</code> operator does not return only <code>True</code> or <code>False</code>. Instead, it returns the first operand if the first operand evaluates to true, and it returns the second operand if the first operand evaluates to false.</p>\u000a\u000a<p>In this case, the expression <code>x or y</code> returns <code>x</code> if it is <code>True</code> or evaluates to true when converted to boolean. Otherwise, it returns <code>y</code>. For most cases, this will serve for the very same purpose of C\u266f's null-coalescing operator, but keep in mind:</p>\u000a\u000a<pre><code>42    or "something"    # returns 42\u000a0     or "something"    # returns "something"\u000aNone  or "something"    # returns "something"\u000aFalse or "something"    # returns "something"\u000a""    or "something"    # returns "something"\u000a</code></pre>\u000a\u000a<p>If you use your variable <code>s</code> to hold something that is either a reference to the instance of a class or <code>None</code> (as long as your class does not define members <code>__nonzero__()</code> and <code>__len__()</code>), it is secure to use the same semantics as the null-coalescing operator.</p>\u000a\u000a<p>In fact, it may even be useful to have this side-effect of Python. Since you know what values evaluates to false, you can use this to trigger the default value without using <code>None</code> specifically (an error object, for example).</p>\u000a
p189
sVquestion_id
p190
I4978738
sVlast_activity_date
p191
I1470778627
sVcreation_date
p192
I1297523191
sVscore
p193
I193
sVowner
p194
(dp195
Vuser_id
p196
I55078
sVprofile_image
p197
Vhttps://www.gravatar.com/avatar/9292b6a9ad68eb52144d5b4b9d8d6ba0?s=128&d=identicon&r=PG
p198
sVuser_type
p199
Vregistered
p200
sVreputation
p201
I21317
sVlink
p202
Vhttp://stackoverflow.com/users/55078/juliano
p203
sVdisplay_name
p204
VJuliano
p205
ssVis_accepted
p206
I01
sVlast_edit_date
p207
I1470778627
sVanswer_id
p208
I4978745
sa(dp209
Vbody
p210
V<h1>Recent progress</h1>\u000a\u000a<p><strong>March 2014</strong>: Good news! <a href="https://docs.python.org/3/whatsnew/3.4.html" rel="noreferrer">Python 3.4</a> ships with Pip. Pip has long been Python's de-facto standard package manager. You can install <a href="https://pypi.python.org/pypi/httpie" rel="noreferrer">a package</a> like this:</p>\u000a\u000a<pre><code>pip install httpie\u000a</code></pre>\u000a\u000a<p>Wahey! This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup.</p>\u000a\u000a<p><strong>However</strong>, there remains a number of outstanding frustrations with the Python packaging experience. Cumulatively, they make Python very unwelcoming for newbies. Also, the long history of neglect (ie. not shipping with a package manager for 14 years from Python 2.0 to Python 3.3) did damage to the community. I describe both below.</p>\u000a\u000a<h1>Outstanding frustrations</h1>\u000a\u000a<p>It's important to understand that while experienced users are able to work around these frustrations, they are significant barriers to people new to Python. In fact, the difficulty and general user-unfriendliness is likely to deter many of them. </p>\u000a\u000a<h3>PyPI website is counter-helpful</h3>\u000a\u000a<p>Every language with a package manager has an official (or quasi-official) repository for the community to download and publish packages. Python has the Python Package Index, PyPI.  <a href="https://pypi.python.org/pypi" rel="noreferrer">https://pypi.python.org/pypi</a> </p>\u000a\u000a<p>Let's compare its pages with those of RubyGems and Npm (the Node package manager).</p>\u000a\u000a<ol>\u000a<li><a href="https://rubygems.org/gems/rails" rel="noreferrer">https://rubygems.org/gems/rails</a> RubyGems page for the package <code>rails</code> </li>\u000a<li><a href="https://www.npmjs.org/package/express" rel="noreferrer">https://www.npmjs.org/package/express</a> Npm page for the package <code>express</code></li>\u000a<li><a href="https://pypi.python.org/pypi/simplejson/" rel="noreferrer">https://pypi.python.org/pypi/simplejson/</a> PyPI page for the package <code>simplejson</code></li>\u000a</ol>\u000a\u000a<p>You'll see the RubyGems and Npm pages both begin with a one-line description of the package, then large friendly instructions how to install it.</p>\u000a\u000a<p>Meanwhile, woe to any hapless Python user who naively browses to PyPI. On <a href="https://pypi.python.org/pypi/simplejson/" rel="noreferrer">https://pypi.python.org/pypi/simplejson/</a> , they'll find no such helpful instructions. There is however, a large green 'Download' link. It's not unreasonable to follow it. Aha, they click! Their browser downloads a <code>.tar.gz</code> file. Many Windows users can't even open it, but if they persevere they may eventually extract it, then run <code>setup.py</code> and eventually with the help of Google <code>setup.py install</code>. Some will give up and reinvent the wheel..  </p>\u000a\u000a<p>Of course, all of this is wrong. The <em>easiest</em> way to install a package is with a Pip command. But PyPI didn't even mention Pip. Instead, it led them down an archaic and tedious path.</p>\u000a\u000a<h3>Error: Unable to find vcvarsall.bat</h3>\u000a\u000a<p>Numpy is one of Python's most popular libraries. Try to install it with Pip, you get this cryptic error message:</p>\u000a\u000a<blockquote>\u000a  <p>Error: Unable to find vcvarsall.bat</p>\u000a</blockquote>\u000a\u000a<p>Trying to fix that is one of the most popular questions on Stack Overflow: "<a href="http://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat">error: Unable to find vcvarsall.bat</a>"</p>\u000a\u000a<p>Few people succeed.</p>\u000a\u000a<p>For comparison, in the same situation, Ruby prints this message, which explains what's going on and how to fix it:</p>\u000a\u000a<blockquote>\u000a  <p>Please update your PATH to include build tools or download the DevKit from <a href="http://rubyinstaller.org/downloads" rel="noreferrer">http://rubyinstaller.org/downloads</a> and follow the instructions at <a href="http://github.com/oneclick/rubyinstaller/wiki/Development-Kit" rel="noreferrer">http://github.com/oneclick/rubyinstaller/wiki/Development-Kit</a></p>\u000a</blockquote>\u000a\u000a<h3>Publishing packages is hard</h3>\u000a\u000a<p>Ruby and Nodejs ship with full-featured package managers, Gem (since 2007) and Npm (since 2011), and have nurtured sharing communities centred around GitHub. Npm makes <a href="https://npmjs.org/doc/developers.html" rel="noreferrer">publishing packages</a> as easy as installing them, it already has <a href="https://npmjs.org/" rel="noreferrer">64k packages</a>. RubyGems lists <a href="http://rubygems.org/stats" rel="noreferrer">72k packages</a>. The venerable Python package index lists <a href="https://pypi.python.org/pypi" rel="noreferrer">only 41k</a>.</p>\u000a\u000a<h1>History</h1>\u000a\u000a<p>Flying in the face of its "<a href="http://www.python.org/about/" rel="noreferrer">batteries included</a>" motto, Python shipped without a package manager until 2014. </p>\u000a\u000a<p>Until Pip, the de facto standard was a command  <code>easy_install</code>. It was woefully inadequate. The was no command to uninstall packages.</p>\u000a\u000a<p>Pip was a massive improvement. It had most the features of Ruby's Gem. Unfortunately, Pip was--until recently--ironically difficult to install. In fact, the problem remains a top Python question on Stack Overflow: "<a href="http://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows">How do I install pip on Windows?</a>"</p>\u000a
p211
sVquestion_id
p212
I2436731
sVlast_activity_date
p213
I1470421898
sVcreation_date
p214
I1353281258
sVscore
p215
I185
sVowner
p216
(dp217
Vuser_id
p218
I284795
sVprofile_image
p219
Vhttps://www.gravatar.com/avatar/99f7ffd3d45dbcef0b3b6960dcfe81a2?s=128&d=identicon&r=PG
p220
sVuser_type
p221
Vregistered
p222
sVreputation
p223
I61391
sVlink
p224
Vhttp://stackoverflow.com/users/284795/colonel-panic
p225
sVaccept_rate
p226
I79
sVdisplay_name
p227
VColonel Panic
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1470421898
sVanswer_id
p231
I13445719
sa(dp232
Vbody
p233
V<p>You should always use <code>open()</code>.</p>\u000a\u000a<p>As the <a href="http://docs.python.org/2/library/functions.html#file" rel="noreferrer" title="BuiltinFuncs Doc">documentation</a> states:</p>\u000a\u000a<blockquote>\u000a  <p>When opening a file, it's preferable\u000a  to use open() instead of invoking this\u000a  constructor directly. file is more\u000a  suited to type testing (for example,\u000a  writing "isinstance(f, file)").</p>\u000a</blockquote>\u000a\u000a<p>Also, <code>file()</code> <a href="http://docs.python.org/release/3.0/whatsnew/3.0.html#builtins" rel="noreferrer">has been removed</a> since Python 3.0.</p>\u000a
p234
sVquestion_id
p235
I112970
sVlast_activity_date
p236
I1469984630
sVcreation_date
p237
I1222052864
sVscore
p238
I137
sVowner
p239
(dp240
Vuser_id
p241
I17160
sVprofile_image
p242
Vhttps://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=128&d=identicon&r=PG
p243
sVuser_type
p244
Vregistered
p245
sVreputation
p246
I118064
sVlink
p247
Vhttp://stackoverflow.com/users/17160/nosklo
p248
sVaccept_rate
p249
I78
sVdisplay_name
p250
Vnosklo
p251
ssVis_accepted
p252
I01
sVlast_edit_date
p253
I1469984630
sVanswer_id
p254
I112980
sa(dp255
Vbody
p256
V<p>From <a href="https://docs.python.org/3.5/reference/expressions.html#binary-arithmetic-operations" rel="noreferrer">the</a> <a href="https://docs.python.org/3.5/reference/simple_stmts.html#augmented-assignment-statements" rel="noreferrer">documentation</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The <code>@</code> (at) operator is intended to be used for matrix multiplication. No builtin Python types implement this operator.</p>\u000a</blockquote>\u000a\u000a<p>The <code>@</code> operator was introduced in Python 3.5. <code>@=</code> is matrix multiplication followed by assignment, as you would expect. They map to <code>__matmul__</code>, <code>__rmatmul__</code> or <code>__imatmul__</code> similar to how <code>+</code> and <code>+=</code> map to <code>__add__</code>, <code>__radd__</code> or <code>__iadd__</code>.</p>\u000a\u000a<p>The operator and the rationale behind it are discussed in detail in <a href="http://www.python.org/dev/peps/pep-0465/" rel="noreferrer">PEP 465</a>.</p>\u000a
p257
sVquestion_id
p258
I27385633
sVlast_activity_date
p259
I1467296923
sVcreation_date
p260
I1418148048
sVscore
p261
I137
sVowner
p262
(dp263
Vuser_id
p264
I1804599
sVprofile_image
p265
Vhttps://i.stack.imgur.com/v91P3.jpg?s=128&g=1
p266
sVuser_type
p267
Vregistered
p268
sVreputation
p269
I20374
sVlink
p270
Vhttp://stackoverflow.com/users/1804599/rightfold
p271
sVaccept_rate
p272
I84
sVdisplay_name
p273
Vrightfold
p274
ssVis_accepted
p275
I01
sVlast_edit_date
p276
I1467296923
sVanswer_id
p277
I27385659
sa(dp278
Vbody
p279
V<p>You'd use it in your own class, since no builtin class makes use of it.</p>\u000a\u000a<p>Numpy uses it, as stated in the <a href="http://wiki.scipy.org/Numpy_Example_List_With_Doc#head-490d781b49b68b300eedaef32369fae7d58627fb" rel="noreferrer">documentation</a>. Some examples <a href="http://wiki.scipy.org/Tentative_NumPy_Tutorial#head-864862d3f2bb4c32f04260fac61eb4ef34788c4c" rel="noreferrer">here</a>.</p>\u000a\u000a<p>In your own class, you'd use it like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class TestEllipsis(object):\u000a...     def __getitem__(self, item):\u000a...         if item is Ellipsis:\u000a...             return "Returning all items"\u000a...         else:\u000a...             return "return %r items" % item\u000a... \u000a&gt;&gt;&gt; x = TestEllipsis()\u000a&gt;&gt;&gt; print x[2]\u000areturn 2 items\u000a&gt;&gt;&gt; print x[...]\u000aReturning all items\u000a</code></pre>\u000a\u000a<p>Of course, there is the <a href="https://docs.python.org/library/constants.html#Ellipsis" rel="noreferrer" title="Ellipsis">python documentation</a>, and <a href="https://docs.python.org/reference/expressions.html#grammar-token-slicing" rel="noreferrer">language reference</a>. But those aren't very helpful. </p>\u000a
p280
sVquestion_id
p281
I118370
sVlast_activity_date
p282
I1467224730
sVcreation_date
p283
I1222129461
sVscore
p284
I74
sVowner
p285
(dp286
Vuser_id
p287
I17160
sVprofile_image
p288
Vhttps://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=128&d=identicon&r=PG
p289
sVuser_type
p290
Vregistered
p291
sVreputation
p292
I118064
sVlink
p293
Vhttp://stackoverflow.com/users/17160/nosklo
p294
sVaccept_rate
p295
I78
sVdisplay_name
p296
Vnosklo
p297
ssVis_accepted
p298
I01
sVlast_edit_date
p299
I1467224730
sVanswer_id
p300
I118395
sa(dp301
Vbody
p302
V<h1>Slicing a list</h1>\u000a\u000a<pre><code>top5 = array[:5]\u000a</code></pre>\u000a\u000a<ul>\u000a<li>To slice a list, there's a simple syntax: <code>array[start:stop:step]</code></li>\u000a<li>You can omit any parameter. These are all valid: <code>array[start:]</code>, <code>array[:stop]</code>, <code>array[::step]</code></li>\u000a</ul>\u000a\u000a<h1>Slicing a generator</h1>\u000a\u000a<pre><code> import itertools\u000a top5 = itertools.islice(my_list, 5) # grab the first five elements\u000a</code></pre>\u000a\u000a<ul>\u000a<li><p>You can't slice a generator directly in Python. <a href="http://docs.python.org/library/itertools.html#itertools.islice" rel="noreferrer"><code>itertools.islice()</code></a> will wrap an object in a new slicing generator using the syntax <code>itertools.islice(generator, start, stop, step)</code></p></li>\u000a<li><p>Remember, slicing a generator will exhaust it partially. If you want to keep the entire generator intact, perhaps turn it into a tuple or list first, like: <code>result = tuple(generator)</code></p></li>\u000a</ul>\u000a
p303
sVquestion_id
p304
I5234090
sVlast_activity_date
p305
I1465618677
sVcreation_date
p306
I1299596456
sVscore
p307
I198
sVowner
p308
(dp309
Vuser_id
p310
I293352
sVprofile_image
p311
Vhttps://www.gravatar.com/avatar/6a2aedf092fed3587aeddfd4a38ebaa5?s=128&d=identicon&r=PG
p312
sVuser_type
p313
Vregistered
p314
sVreputation
p315
I11700
sVlink
p316
Vhttp://stackoverflow.com/users/293352/lunixbochs
p317
sVdisplay_name
p318
Vlunixbochs
p319
ssVis_accepted
p320
I01
sVlast_edit_date
p321
I1465618677
sVanswer_id
p322
I5234170
sa(dp323
Vbody
p324
V<p><strong>Note: this post assumes Python 3.x syntax.</strong><sup>&dagger;</sup></p>\u000a\u000a<p>A <a href="http://www.python.org/dev/peps/pep-0255/" rel="noreferrer">generator</a> is simply a function which returns an object on which you can call <code>next</code>, such that for every call it returns some value, until it raises a <code>StopIteration</code> exception, signaling that all values have been generated. Such an object is called an <em>iterator</em>.</p>\u000a\u000a<p>Normal functions return a single value using <code>return</code>, just like in Java. In Python, however, there is an alternative, called <code>yield</code>. Using <code>yield</code> anywhere in a function makes it a generator. Observe this code:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def myGen(n):\u000a...     yield n\u000a...     yield n + 1\u000a... \u000a&gt;&gt;&gt; g = myGen(6)\u000a&gt;&gt;&gt; next(g)\u000a6\u000a&gt;&gt;&gt; next(g)\u000a7\u000a&gt;&gt;&gt; next(g)\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aStopIteration\u000a</code></pre>\u000a\u000a<p>As you can see, <code>myGen(n)</code> is a function which yields <code>n</code> and <code>n + 1</code>. Every call to <a href="http://docs.python.org/3/library/functions.html#next" rel="noreferrer"><code>next</code></a> yields a single value, until all values have been yielded. <code>for</code> loops call <code>next</code> in the background, thus:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; for n in myGen(6):\u000a...     print(n)\u000a... \u000a6\u000a7\u000a</code></pre>\u000a\u000a<p>Likewise there are <a href="http://www.python.org/dev/peps/pep-0289/" rel="noreferrer"><em>generator expressions</em></a>, which provide a means to succinctly describe certain common types of generators:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; g = (n for n in range(3, 5))\u000a&gt;&gt;&gt; next(g)\u000a3\u000a&gt;&gt;&gt; next(g)\u000a4\u000a&gt;&gt;&gt; next(g)\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aStopIteration\u000a</code></pre>\u000a\u000a<p>Note that generator expressions are much like <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer"><em>list comprehensions</em></a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; lc = [n for n in range(3, 5)]\u000a&gt;&gt;&gt; lc\u000a[3, 4]\u000a</code></pre>\u000a\u000a<p>Observe that a generator object is generated <em>once</em>, but its code is <em>not</em> run all at once. Only calls to <code>next</code> actually execute (part of) the code. Execution of the code in a generator stops once a <code>yield</code> statement has been reached, upon which it returns a value. The next call to <code>next</code> then causes execution to continue in the state in which the generator was left after the last <code>yield</code>. This is a fundamental difference with regular functions: those always start execution at the "top" and discard their state upon returning a value.</p>\u000a\u000a<p>There are more things to be said about this subject. It is e.g. possible to <code>send</code> data back into a generator (<a href="http://docs.python.org/3/reference/expressions.html#yield-expressions" rel="noreferrer">reference</a>). But that is something I suggest you do not look into until you understand the basic concept of a generator.</p>\u000a\u000a<p>Now you may ask: why use generators? There are a couple of good reasons:</p>\u000a\u000a<ul>\u000a<li>Certain concepts can be described much more succinctly using generators.</li>\u000a<li>Instead of creating a function which returns a list of values, one can write a generator which generates the values on the fly. This means that no list needs to be constructed, meaning that the resulting code is more memory efficient. In this way one can even describe data streams which would simply be too large to fit in memory.</li>\u000a<li><p>Generators allow for a natural way to describe <em>infinite</em> streams. Consider for example the <a href="http://en.wikipedia.org/wiki/Fibonacci_number" rel="noreferrer">Fibonacci numbers</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def fib():\u000a...     a, b = 0, 1\u000a...     while True:\u000a...         yield a\u000a...         a, b = b, a + b\u000a... \u000a&gt;&gt;&gt; import itertools\u000a&gt;&gt;&gt; list(itertools.islice(fib(), 10))\u000a[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\u000a</code></pre>\u000a\u000a<p>This code uses <a href="http://docs.python.org/3/library/itertools.html#itertools.islice" rel="noreferrer"><code>itertools.islice</code></a> to take a finite number of elements from an infinite stream. You are advised to have a good look at the functions in the <a href="http://docs.python.org/3/library/itertools.html" rel="noreferrer"><code>itertools</code></a> module, as they are essential tools for writing advanced generators with great ease.</p></li>\u000a</ul>\u000a\u000a<hr>\u000a\u000a<p>&nbsp;&nbsp;<sup>&dagger;</sup> <strong>About Python &lt;=2.6:</strong> in the above examples <code>next</code> is a function which calls the method <code>__next__</code> on the given object. In Python &lt;=2.6 one uses a slightly different technique, namely <code>o.next()</code> instead of <code>next(o)</code>. Python 2.7 has <code>next()</code> call <code>.next</code> so you need not use the following in 2.7:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; g = (n for n in range(3, 5))\u000a&gt;&gt;&gt; g.next()\u000a3\u000a</code></pre>\u000a
p325
sVquestion_id
p326
I1756096
sVlast_activity_date
p327
I1465266807
sVcreation_date
p328
I1258552447
sVscore
p329
I220
sVowner
p330
(dp331
Vuser_id
p332
I74939
sVprofile_image
p333
Vhttps://www.gravatar.com/avatar/05cc371af855f1b67886051cff4af8d4?s=128&d=identicon&r=PG
p334
sVuser_type
p335
Vregistered
p336
sVreputation
p337
I39795
sVlink
p338
Vhttp://stackoverflow.com/users/74939/stephan202
p339
sVdisplay_name
p340
VStephan202
p341
ssVis_accepted
p342
I01
sVlast_edit_date
p343
I1465266807
sVanswer_id
p344
I1756156
sa(dp345
Vbody
p346
V<p>You can use for in range with a step size of 2:</p>\u000a\u000a<p><strong>Python 2</strong></p>\u000a\u000a<pre><code>for i in xrange(0,10,2):\u000a  print(i)\u000a</code></pre>\u000a\u000a<p><strong>Python 3</strong></p>\u000a\u000a<pre><code>for i in range(0,10,2):\u000a  print(i)\u000a</code></pre>\u000a\u000a<p><strong>Note:</strong> Use xrange in Python 2 instead of range because it is more efficient as it generates an iterable object, and not the whole list.  </p>\u000a
p347
sVquestion_id
p348
I2990121
sVlast_activity_date
p349
I1462963712
sVcreation_date
p350
I1275919425
sVscore
p351
I173
sVowner
p352
(dp353
Vuser_id
p354
I3153
sVprofile_image
p355
Vhttps://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=128&d=identicon&r=PG
p356
sVuser_type
p357
Vregistered
p358
sVreputation
p359
I213096
sVlink
p360
Vhttp://stackoverflow.com/users/3153/brian-r-bondy
p361
sVaccept_rate
p362
I99
sVdisplay_name
p363
VBrian R. Bondy
p364
ssVis_accepted
p365
I01
sVlast_edit_date
p366
I1462963712
sVanswer_id
p367
I2990152
sa(dp368
Vbody
p369
V\u000a\u000a<p>This seems to be because multiplication of small numbers is optimized in CPython 3.5, in a way that left shifts by small numbers are not. Positive left shifts always create a larger integer object to store the result, as part of the calculation, while for multiplications of the sort you used in your test, a special optimization avoids this and creates an integer object of the correct size. This can be seen in <a href="https://hg.python.org/cpython/file/580ddeccd689/Objects/longobject.c">the source code of Python's integer implementation</a>.</p>\u000a\u000a<p>Because integers in Python are arbitrary-precision, they are stored as arrays of integer "digits", with a limit on the number of bits per integer digit. So in the general case, operations involving integers are not single operations, but instead need to handle the case of multiple "digits". In <em>pyport.h</em>, this bit limit <a href="https://hg.python.org/cpython/file/580ddeccd689/Include/pyport.h#l134">is defined as</a> 30 bits on 64-bit platform, or 15 bits otherwise. (I'll just call this 30 from here on to keep the explanation simple. But note that if you were using Python compiled for 32-bit, your benchmark's result would depend on if <code>x</code> were less than 32,768 or not.)</p>\u000a\u000a<p>When an operation's inputs and outputs stay within this 30-bit limit, the operation can be handled in an optimized way instead of the general way. The beginning of the <a href="https://hg.python.org/cpython/file/580ddeccd689/Objects/longobject.c#l3401">integer multiplication implementation</a> is as follows:</p>\u000a\u000a<pre class="lang-c prettyprint-override"><code>static PyObject *\u000along_mul(PyLongObject *a, PyLongObject *b)\u000a{\u000a    PyLongObject *z;\u000a\u000a    CHECK_BINOP(a, b);\u000a\u000a    /* fast path for single-digit multiplication */\u000a    if (Py_ABS(Py_SIZE(a)) &lt;= 1 &amp;&amp; Py_ABS(Py_SIZE(b)) &lt;= 1) {\u000a        stwodigits v = (stwodigits)(MEDIUM_VALUE(a)) * MEDIUM_VALUE(b);\u000a#ifdef HAVE_LONG_LONG\u000a        return PyLong_FromLongLong((PY_LONG_LONG)v);\u000a#else\u000a        /* if we don't have long long then we're almost certainly\u000a           using 15-bit digits, so v will fit in a long.  In the\u000a           unlikely event that we're using 30-bit digits on a platform\u000a           without long long, a large v will just cause us to fall\u000a           through to the general multiplication code below. */\u000a        if (v &gt;= LONG_MIN &amp;&amp; v &lt;= LONG_MAX)\u000a            return PyLong_FromLong((long)v);\u000a#endif\u000a    }\u000a</code></pre>\u000a\u000a<p>So when multiplying two integers where each fits in a 30-bit digit, this is done as a direct multiplication by the CPython interpreter, instead of working with the integers as arrays. (<a href="https://hg.python.org/cpython/file/580ddeccd689/Objects/longobject.c#l19"><code>MEDIUM_VALUE()</code></a> called on a positive integer object simply gets its first 30-bit digit.) If the result fits in a single 30-bit digit, <a href="https://hg.python.org/cpython/file/580ddeccd689/Objects/longobject.c#l1048"><code>PyLong_FromLongLong()</code></a> will notice this in a relatively small number of operations, and create a single-digit integer object to store it.</p>\u000a\u000a<p>In contrast, left shifts are not optimized this way, and every left shift deals with the integer being shifted as an array. In particular, if you look at the source code for <a href="https://hg.python.org/cpython/file/580ddeccd689/Objects/longobject.c#l4101"><code>long_lshift()</code></a>, in the case of a small but positive left shift, a 2-digit integer object is always created, if only to have its length truncated to 1 later: <em>(my comments in <code>/*** ***/</code>)</em></p>\u000a\u000a<pre class="lang-c prettyprint-override"><code>static PyObject *\u000along_lshift(PyObject *v, PyObject *w)\u000a{\u000a    /*** ... ***/\u000a\u000a    wordshift = shiftby / PyLong_SHIFT;   /*** zero for small w ***/\u000a    remshift  = shiftby - wordshift * PyLong_SHIFT;   /*** w for small w ***/\u000a\u000a    oldsize = Py_ABS(Py_SIZE(a));   /*** 1 for small v &gt; 0 ***/\u000a    newsize = oldsize + wordshift;\u000a    if (remshift)\u000a        ++newsize;   /*** here newsize becomes at least 2 for w &gt; 0, v &gt; 0 ***/\u000a    z = _PyLong_New(newsize);\u000a\u000a    /*** ... ***/\u000a}\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<h1>Integer division</h1>\u000a\u000a<p>You didn't ask about the worse performance of integer floor division compared to right shifts, because that fit your (and my) expectations. But dividing a small positive number by another small positive number is not as optimized as small multiplications, either. Every <code>//</code> computes both the quotient <em>and</em> the remainder using the function <a href="https://hg.python.org/cpython/file/580ddeccd689/Objects/longobject.c#l2376"><code>long_divrem()</code></a>. This remainder is computed for a small divisor with <a href="https://hg.python.org/cpython/file/580ddeccd689/Objects/longobject.c#l1537">a multiplication</a>, and <a href="https://hg.python.org/cpython/file/580ddeccd689/Objects/longobject.c#l2406">is stored in a newly-allocated integer object</a>, which in this situation is immediately discarded.</p>\u000a
p370
sVquestion_id
p371
I37053379
sVlast_activity_date
p372
I1462564162
sVcreation_date
p373
I1462462959
sVscore
p374
I126
sVowner
p375
(dp376
Vuser_id
p377
I3004881
sVprofile_image
p378
Vhttps://i.stack.imgur.com/lFgVw.jpg?s=128&g=1
p379
sVuser_type
p380
Vregistered
p381
sVreputation
p382
I5636
sVlink
p383
Vhttp://stackoverflow.com/users/3004881/dan-getz
p384
sVaccept_rate
p385
I100
sVdisplay_name
p386
VDan Getz
p387
ssVis_accepted
p388
I01
sVlast_edit_date
p389
I1462564162
sVanswer_id
p390
I37054723
sa(dp391
Vbody
p392
V<p>Right now, you can do what I do, which is kludgy but works perfectly well* (this usage assumes you're using virtualenvwrapper -- which you should be -- but you can easily substitute in the rather longer 'source' call you mentioned, if not):</p>\u000a\u000a<pre><code>def task():\u000a    workon = 'workon myvenv &amp;&amp; '\u000a    run(workon + 'git pull')\u000a    run(workon + 'do other stuff, etc')\u000a</code></pre>\u000a\u000a<p>Since version 1.0, Fabric has a <a href="http://docs.fabfile.org/en/1.11/api/core/context_managers.html?highlight=prefix#fabric.context_managers.prefix" rel="nofollow noreferrer"><code>prefix</code> context manager</a> which uses this technique so you can for example:</p>\u000a\u000a<pre><code>def task():\u000a    with prefix('workon myvenv'):\u000a        run('git pull')\u000a        run('do other stuff, etc')\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>* There are bound to be cases where using the <code>command1 &amp;&amp; command2</code> approach may blow up on you, such as when <code>command1</code> fails (<code>command2</code> will never run) or if <code>command1</code> isn't properly escaped and contains special shell characters, and so forth.</p>\u000a
p393
sVquestion_id
p394
I1180411
sVlast_activity_date
p395
I1461543706
sVcreation_date
p396
I1248478329
sVscore
p397
I92
sVowner
p398
(dp399
Vuser_id
p400
I144811
sVprofile_image
p401
Vhttps://www.gravatar.com/avatar/f1acc6318028fdba9874c77bc622a2fb?s=128&d=identicon&r=PG
p402
sVuser_type
p403
Vregistered
p404
sVreputation
p405
I1225
sVlink
p406
Vhttp://stackoverflow.com/users/144811/bitprophet
p407
sVdisplay_name
p408
Vbitprophet
p409
ssVis_accepted
p410
I01
sVlast_edit_date
p411
I1461543706
sVanswer_id
p412
I1180665
sa(dp413
Vbody
p414
V<p><strike>Yes, it is <a href="http://pypi.python.org/pypi/virtualenv" rel="noreferrer">virtualenv</a> along with <a href="http://www.doughellmann.com/projects/virtualenvwrapper/" rel="noreferrer">virtualenvwrapper</a>.</p>\u000a\u000a<p>update: you may install both at once with <a href="https://github.com/brainsik/virtualenv-burrito" rel="noreferrer">virtualenv burrito</a>.</strike></p>\u000a\u000a<p><strong>Update</strong>: the correct answer is now probably <a href="https://github.com/yyuu/pyenv" rel="noreferrer">pyenv</a>.</p>\u000a\u000a<p>For scientific computing, the corresponding tool is <a href="https://www.continuum.io/downloads" rel="noreferrer">anaconda</a>.</p>\u000a
p415
sVquestion_id
p416
I2812471
sVlast_activity_date
p417
I1455622129
sVcreation_date
p418
I1273595222
sVscore
p419
I67
sVowner
p420
(dp421
Vuser_id
p422
I262667
sVprofile_image
p423
Vhttps://www.gravatar.com/avatar/dd09cc9b40b956f93a00f5b464469d11?s=128&d=identicon&r=PG
p424
sVuser_type
p425
Vregistered
p426
sVreputation
p427
I22102
sVlink
p428
Vhttp://stackoverflow.com/users/262667/olivier-verdier
p429
sVaccept_rate
p430
I86
sVdisplay_name
p431
VOlivier Verdier
p432
ssVis_accepted
p433
I01
sVlast_edit_date
p434
I1455622129
sVanswer_id
p435
I2812484
sa(dp436
Vbody
p437
V<p><code>Popen.communicate</code> will set the <code>returncode</code> attribute when it's done(*). Here's the relevant documentation section:</p>\u000a\u000a<pre><code>Popen.returncode \u000a  The child return code, set by poll() and wait() (and indirectly by communicate()). \u000a  A None value indicates that the process hasn\u2019t terminated yet.\u000a\u000a  A negative value -N indicates that the child was terminated by signal N (Unix only).\u000a</code></pre>\u000a\u000a<p>So you can just do (I didn't test it but it should work):</p>\u000a\u000a<pre><code>import subprocess as sp\u000achild = sp.Popen(openRTSP + opts.split(), stdout=sp.PIPE)\u000astreamdata = child.communicate()[0]\u000arc = child.returncode\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>(*) This happens because of the way it's implemented: after setting up threads to read the child's streams, it just calls <code>wait</code>. </p>\u000a
p438
sVquestion_id
p439
I5631624
sVlast_activity_date
p440
I1452792701
sVcreation_date
p441
I1302593363
sVscore
p442
I157
sVowner
p443
(dp444
Vuser_id
p445
I8206
sVprofile_image
p446
Vhttps://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?s=128&d=identicon&r=PG
p447
sVuser_type
p448
Vregistered
p449
sVreputation
p450
I133054
sVlink
p451
Vhttp://stackoverflow.com/users/8206/eli-bendersky
p452
sVaccept_rate
p453
I94
sVdisplay_name
p454
VEli Bendersky
p455
ssVis_accepted
p456
I01
sVlast_edit_date
p457
I1452792701
sVanswer_id
p458
I5631819
sa(dp459
Vbody
p460
V<p>You can use <a href="http://docs.python.org/library/traceback.html#traceback.print_exc" rel="noreferrer">traceback.print_exc</a> to print the exceptions traceback. Then use <a href="http://docs.python.org/library/sys#sys.exc_info" rel="noreferrer">sys.exc_info</a> to extract the traceback and finally call <a href="http://docs.python.org/library/pdb#pdb.post_mortem" rel="noreferrer">pdb.post_mortem</a> with that traceback</p>\u000a\u000a<pre><code>import pdb, traceback, sys\u000a\u000adef bombs():\u000a    a = []\u000a    print a[0]\u000a\u000aif __name__ == '__main__':\u000a    try:\u000a        bombs()\u000a    except:\u000a        type, value, tb = sys.exc_info()\u000a        traceback.print_exc()\u000a        pdb.post_mortem(tb)\u000a</code></pre>\u000a\u000a<p>If you want to start an interactive command line with <a href="http://docs.python.org/library/code#code.interact" rel="noreferrer">code.interact</a> using the locals of the frame where the exception originated you can do</p>\u000a\u000a<pre><code>import traceback, sys, code\u000a\u000adef bombs():\u000a    a = []\u000a    print a[0]\u000a\u000aif __name__ == '__main__':\u000a    try:\u000a        bombs()\u000a    except:\u000a        type, value, tb = sys.exc_info()\u000a        traceback.print_exc()\u000a        last_frame = lambda tb=tb: last_frame(tb.tb_next) if tb.tb_next else tb\u000a        frame = last_frame().tb_frame\u000a        ns = dict(frame.f_globals)\u000a        ns.update(frame.f_locals)\u000a        code.interact(local=ns)\u000a</code></pre>\u000a
p461
sVquestion_id
p462
I242485
sVlast_activity_date
p463
I1452038544
sVcreation_date
p464
I1225180584
sVscore
p465
I75
sVowner
p466
(dp467
Vuser_id
p468
I19435
sVprofile_image
p469
Vhttps://www.gravatar.com/avatar/c193b9e5822e9c38cb8cf0781fb04820?s=128&d=identicon&r=PG
p470
sVuser_type
p471
Vregistered
p472
sVreputation
p473
I18629
sVlink
p474
Vhttp://stackoverflow.com/users/19435/florian-b%c3%b6sch
p475
sVaccept_rate
p476
I20
sVdisplay_name
p477
VFlorian B&#246;sch
p478
ssVis_accepted
p479
I01
sVlast_edit_date
p480
I1452038544
sVanswer_id
p481
I242514
sa(dp482
Vbody
p483
V<pre><code>pip install --ignore-installed six\u000a</code></pre>\u000a\u000a<p>Would do the trick.</p>\u000a\u000a<p>Source: <a href="https://github.com/pypa/pip/issues/3165">github.com/pypa/pip/issues/3165</a></p>\u000a
p484
sVquestion_id
p485
I31900008
sVlast_activity_date
p486
I1451262802
sVcreation_date
p487
I1444860745
sVscore
p488
I262
sVowner
p489
(dp490
Vuser_id
p491
I5447124
sVprofile_image
p492
Vhttps://www.gravatar.com/avatar/07869f97529c89a97793bc993e7fee15?s=128&d=identicon&r=PG
p493
sVuser_type
p494
Vunregistered
p495
sVreputation
p496
I2644
sVlink
p497
Vhttp://stackoverflow.com/users/5447124/sath
p498
sVdisplay_name
p499
VSath
p500
ssVis_accepted
p501
I01
sVlast_edit_date
p502
I1451262802
sVanswer_id
p503
I33136494
sa(dp504
Vbody
p505
V<p>You should use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iterrows.html"><code>df.iterrows()</code></a>. Though iterating row-by-row is not especially efficient since Series objects have to be created.</p>\u000a
p506
sVquestion_id
p507
I10729210
sVlast_activity_date
p508
I1445774819
sVcreation_date
p509
I1337869492
sVscore
p510
I163
sVowner
p511
(dp512
Vuser_id
p513
I776560
sVprofile_image
p514
Vhttps://www.gravatar.com/avatar/2c08a3eed709a9d1a2654cea45aa466f?s=128&d=identicon&r=PG
p515
sVuser_type
p516
Vregistered
p517
sVreputation
p518
I37562
sVlink
p519
Vhttp://stackoverflow.com/users/776560/wes-mckinney
p520
sVdisplay_name
p521
VWes McKinney
p522
ssVis_accepted
p523
I01
sVlast_edit_date
p524
I1445774819
sVanswer_id
p525
I10739432
sa(dp526
Vbody
p527
V<p>I suppose you're probably using the <a href="https://docs.python.org/2/library/decimal.html#decimal-objects" rel="noreferrer" title="Decimal objects"><code>Decimal()</code></a> objects from the <a href="https://docs.python.org/2/library/decimal.html" rel="noreferrer" title="decimal \u2014 Decimal fixed point and floating point arithmetic"><code>decimal</code></a> module? (If you need exactly two digits of precision beyond the decimal point with arbitrarily large numbers, you definitely should be, and that's what your question's title suggests...)</p>\u000a\u000a<p>If so, the <a href="https://docs.python.org/2/library/decimal.html#decimal-faq" rel="noreferrer" title="Decimal FAQ"><em>Decimal FAQ</em></a> section of the docs has a question/answer pair which may be useful for you:</p>\u000a\u000a<blockquote>\u000a  <p>Q. In a fixed-point application with two decimal places, some inputs have many places and need to be rounded. Others are not supposed to have excess digits and need to be validated. What methods should be used?</p>\u000a  \u000a  <p>A. The quantize() method rounds to a fixed number of decimal places. If the Inexact trap is set, it is also useful for validation:</p>\u000a</blockquote>\u000a\u000a<pre><code>&gt;&gt;&gt; TWOPLACES = Decimal(10) ** -2       # same as Decimal('0.01')\u000a&gt;&gt;&gt; # Round to two places\u000a&gt;&gt;&gt; Decimal('3.214').quantize(TWOPLACES)\u000aDecimal('3.21')\u000a&gt;&gt;&gt; # Validate that a number does not exceed two places\u000a&gt;&gt;&gt; Decimal('3.21').quantize(TWOPLACES, context=Context(traps=[Inexact]))\u000aDecimal('3.21')\u000a&gt;&gt;&gt; Decimal('3.214').quantize(TWOPLACES, context=Context(traps=[Inexact]))\u000aTraceback (most recent call last):\u000a   ...\u000aInexact: None\u000a</code></pre>\u000a\u000a<p>The next question reads</p>\u000a\u000a<blockquote>\u000a  <p>Q. Once I have valid two place inputs, how do I maintain that invariant throughout an application?</p>\u000a</blockquote>\u000a\u000a<p>If you need the answer to that (along with lots of other useful information), see <a href="https://docs.python.org/2/library/decimal.html#decimal-objects" rel="noreferrer" title="Decimal objects"><em>the aforementioned section of the docs</em></a>. Also, if you keep your <code>Decimal</code>s with two digits of precision beyond the decimal point (meaning as much precision as is necessary to keep all digits to the left of the decimal point and two to the right of it and no more...), then converting them to strings with <code>str</code> will work fine:</p>\u000a\u000a<pre><code>str(Decimal('10'))\u000a# -&gt; '10'\u000astr(Decimal('10.00'))\u000a# -&gt; '10.00'\u000astr(Decimal('10.000'))\u000a# -&gt; '10.000'\u000a</code></pre>\u000a
p528
sVquestion_id
p529
I1995615
sVlast_activity_date
p530
I1445073134
sVcreation_date
p531
I1262544232
sVscore
p532
I72
sVowner
p533
(dp534
Vuser_id
p535
I232707
sVprofile_image
p536
Vhttps://www.gravatar.com/avatar/bd08ebe63b175a3f2e11ae9edf796b2a?s=128&d=identicon&r=PG
p537
sVuser_type
p538
Vregistered
p539
sVreputation
p540
I70130
sVlink
p541
Vhttp://stackoverflow.com/users/232707/micha%c5%82-marczyk
p542
sVdisplay_name
p543
VMicha\u0142 Marczyk
p544
ssVis_accepted
p545
I01
sVlast_edit_date
p546
I1445073134
sVanswer_id
p547
I1995846
sa(dp548
Vbody
p549
V<p>You could use a test runner that would do this for you.  <a href="https://nose.readthedocs.org/en/latest/" rel="noreferrer">nose</a> is very good for example.  When run, it will find tests in the current tree and run them.</p>\u000a\u000a<p>Updated:</p>\u000a\u000a<p>Here's some code from my pre-nose days.  You probably don't want the explicit list of module names, but maybe the rest will be useful to you.</p>\u000a\u000a<pre><code>testmodules = [\u000a    'cogapp.test_makefiles',\u000a    'cogapp.test_whiteutils',\u000a    'cogapp.test_cogapp',\u000a    ]\u000a\u000asuite = unittest.TestSuite()\u000a\u000afor t in testmodules:\u000a    try:\u000a        # If the module defines a suite() function, call it to get the suite.\u000a        mod = __import__(t, globals(), locals(), ['suite'])\u000a        suitefn = getattr(mod, 'suite')\u000a        suite.addTest(suitefn())\u000a    except (ImportError, AttributeError):\u000a        # else, just load all the test cases from the module.\u000a        suite.addTest(unittest.defaultTestLoader.loadTestsFromName(t))\u000a\u000aunittest.TextTestRunner().run(suite)\u000a</code></pre>\u000a
p550
sVquestion_id
p551
I1732438
sVlast_activity_date
p552
I1441422817
sVcreation_date
p553
I1258153926
sVscore
p554
I67
sVowner
p555
(dp556
Vuser_id
p557
I14343
sVprofile_image
p558
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p559
sVuser_type
p560
Vregistered
p561
sVreputation
p562
I193903
sVlink
p563
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p564
sVaccept_rate
p565
I80
sVdisplay_name
p566
VNed Batchelder
p567
ssVis_accepted
p568
I01
sVlast_edit_date
p569
I1441422817
sVanswer_id
p570
I1732477
sa(dp571
Vbody
p572
V<p>Here is screenshot of my Pycharm. Required settings is in following path: <code>File -&gt; Settings -&gt; Editor -&gt; Code Style -&gt; General: Right margin (columns)</code></p>\u000a\u000a<p><a href="https://i.stack.imgur.com/V3BLg.png"><img src="https://i.stack.imgur.com/V3BLg.png" alt="Pycharm 4 Settings Screenshot"></a></p>\u000a
p573
sVquestion_id
p574
I17319422
sVlast_activity_date
p575
I1440855442
sVcreation_date
p576
I1372249013
sVscore
p577
I218
sVowner
p578
(dp579
Vuser_id
p580
I291372
sVprofile_image
p581
Vhttps://www.gravatar.com/avatar/b5c1a712772e2552bebc14a89bf9aeb1?s=128&d=identicon&r=PG
p582
sVuser_type
p583
Vregistered
p584
sVreputation
p585
I3789
sVlink
p586
Vhttp://stackoverflow.com/users/291372/alex-g-p
p587
sVaccept_rate
p588
I64
sVdisplay_name
p589
VAlex G.P.
p590
ssVis_accepted
p591
I01
sVlast_edit_date
p592
I1440855442
sVanswer_id
p593
I17319775
sa(dp594
Vbody
p595
V<p>For the special date of January 1, 1970 there are multiple options.</p>\u000a\u000a<p>For any other starting date you need to get the difference between the two dates in seconds. Subtracting two dates gives a <code>timedelta</code> object, which as of Python 2.7 has a <code>total_seconds()</code> function.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; (t-datetime.datetime(1970,1,1)).total_seconds()\u000a1256083200.0\u000a</code></pre>\u000a\u000a<p>The starting date is usually specified in UTC, so for proper results the <code>datetime</code> you feed into this formula should be in UTC as well. If your <code>datetime</code> isn't in UTC already, you'll need to convert it before you use it, or attach a <code>tzinfo</code> class that has the proper offset.</p>\u000a\u000a<p>As noted in the comments, if you have a <code>tzinfo</code> attached to your <code>datetime</code> then you'll need one on the starting date as well or the subtraction will fail; for the example above I would add <code>tzinfo=pytz.utc</code> if using Python 2 or <code>tzinfo=timezone.utc</code> if using Python 3.</p>\u000a
p596
sVquestion_id
p597
I7852855
sVlast_activity_date
p598
I1440458391
sVcreation_date
p599
I1319217696
sVscore
p600
I124
sVowner
p601
(dp602
Vuser_id
p603
I5987
sVprofile_image
p604
Vhttps://www.gravatar.com/avatar/2a1f9f4986b58015691eb2014e78869f?s=128&d=identicon&r=PG
p605
sVuser_type
p606
Vregistered
p607
sVreputation
p608
I192700
sVlink
p609
Vhttp://stackoverflow.com/users/5987/mark-ransom
p610
sVaccept_rate
p611
I56
sVdisplay_name
p612
VMark Ransom
p613
ssVis_accepted
p614
I01
sVlast_edit_date
p615
I1440458391
sVanswer_id
p616
I7852969
sa(dp617
Vbody
p618
V<p>Use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html">DataFrame.drop</a> and pass it a Series of index labels:</p>\u000a\u000a<pre><code>In [65]: df\u000aOut[65]: \u000a       one  two\u000aone      1    4\u000atwo      2    3\u000athree    3    2\u000afour     4    1\u000a\u000a\u000aIn [66]: df.drop(df.index[[1,3]])\u000aOut[66]: \u000a       one  two\u000aone      1    4\u000athree    3    2\u000a</code></pre>\u000a
p619
sVquestion_id
p620
I14661701
sVlast_activity_date
p621
I1438054732
sVcreation_date
p622
I1359807071
sVscore
p623
I184
sVowner
p624
(dp625
Vuser_id
p626
I733291
sVprofile_image
p627
Vhttps://i.stack.imgur.com/kzjgj.jpg?s=128&g=1
p628
sVuser_type
p629
Vregistered
p630
sVreputation
p631
I9028
sVlink
p632
Vhttp://stackoverflow.com/users/733291/theodros-zelleke
p633
sVdisplay_name
p634
VTheodros Zelleke
p635
ssVis_accepted
p636
I01
sVlast_edit_date
p637
I1438054732
sVanswer_id
p638
I14661768
sa(dp639
Vbody
p640
V<p>Using <code>order_by('?')</code> will kill the db server on the second day in production. A better way is something like what is described in <a href="http://web.archive.org/web/20110802060451/http://bolddream.com/2010/01/22/getting-a-random-row-from-a-relational-database/" rel="noreferrer">Getting a random row from a relational database</a>.</p>\u000a\u000a<pre><code>from django.db.models.aggregates import Count\u000afrom random import randint\u000a\u000aclass PaintingManager(models.Manager):\u000a    def random(self):\u000a        count = self.aggregate(count=Count('id'))['count']\u000a        random_index = randint(0, count - 1)\u000a        return self.all()[random_index]\u000a</code></pre>\u000a
p641
sVquestion_id
p642
I962619
sVlast_activity_date
p643
I1434501954
sVcreation_date
p644
I1264177628
sVscore
p645
I97
sVowner
p646
(dp647
Vuser_id
p648
I135665
sVprofile_image
p649
Vhttps://www.gravatar.com/avatar/73d6d07f2590212606d34c4ad45b3f78?s=128&d=identicon&r=PG
p650
sVuser_type
p651
Vregistered
p652
sVreputation
p653
I28233
sVlink
p654
Vhttp://stackoverflow.com/users/135665/emil-ivanov
p655
sVaccept_rate
p656
I95
sVdisplay_name
p657
VEmil Ivanov
p658
ssVis_accepted
p659
I01
sVlast_edit_date
p660
I1434501954
sVanswer_id
p661
I2118712
sa(dp662
Vbody
p663
V<p>As usual with Python, it's <a href="http://en.wikipedia.org/wiki/KISS_principle" rel="noreferrer">kiss</a> :</p>\u000a\u000a<pre><code>class Test(object):\u000a\u000a    def __init__(self, attr1, attr2):\u000a        self.attr1 = attr1\u000a        self.attr2 = attr2\u000a\u000a    def __str__(self):\u000a        return str(self.__dict__)\u000a\u000a    def __eq__(self, other): \u000a        return self.__dict__ == other.__dict__\u000a\u000at1 = Test("foo", 42)\u000at2 = Test("foo", 42)\u000at3 = Test("bar", 42)\u000a\u000aprint t1, t2, t3\u000aprint t1 == t2\u000aprint t2 == t3\u000a</code></pre>\u000a\u000a<p>It outputs:</p>\u000a\u000a<pre><code>{'attr2': 42, 'attr1': 'foo'} {'attr2': 42, 'attr1': 'foo'} {'attr2': 42, 'attr1': 'bar'}\u000aTrue\u000aFalse\u000a</code></pre>\u000a\u000a<p>N.B : be aware that before Python 3.0, you are more likely to use <code>__cmp__</code> instead of <code>__eq__</code>, working the same way.</p>\u000a
p664
sVquestion_id
p665
I1227121
sVlast_activity_date
p666
I1433879331
sVcreation_date
p667
I1249390054
sVscore
p668
I174
sVowner
p669
(dp670
Vuser_id
p671
I9951
sVprofile_image
p672
Vhttps://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1
p673
sVuser_type
p674
Vregistered
p675
sVreputation
p676
I277993
sVlink
p677
Vhttp://stackoverflow.com/users/9951/e-satis
p678
sVaccept_rate
p679
I79
sVdisplay_name
p680
Ve-satis
p681
ssVis_accepted
p682
I01
sVlast_edit_date
p683
I1433879331
sVanswer_id
p684
I1227325
sa(dp685
Vbody
p686
V<p><strong>There's no easy way to find out the memory size of a python object</strong>. One of the problems you may find is that Python objects - like lists and dicts - may have references to other python objects (in this case, what would your size be? The size containing the size of each object or not?). There are some pointers overhead and internal structures related to object types and garbage collection. Finally, some python objects have non-obvious behaviors. For instance, lists reserve space for more objects than they have, most of the time; dicts are even more complicated since they can operate in different ways (they have a different implementation for small number of keys and sometimes they over allocate entries).</p>\u000a\u000a<p>There is a <a href="http://code.activestate.com/recipes/544288/" rel="noreferrer">big chunk of code</a> (and an <a href="http://code.activestate.com/recipes/546530/" rel="noreferrer">updated big chunk of code</a>) out there to try to best approximate the size of a python object in memory. There's also some <a href="https://mail.python.org/pipermail/python-list/2008-January/483475.html" rel="noreferrer">simpler approximations</a>. But they will always be approximations.</p>\u000a\u000a<p>You may also want to check some <a href="http://mail.python.org/pipermail/python-list/2002-March/135223.html" rel="noreferrer">old description about PyObject</a> (the internal C struct that represents virtually all python objects).</p>\u000a
p687
sVquestion_id
p688
I33978
sVlast_activity_date
p689
I1430508439
sVcreation_date
p690
I1220066743
sVscore
p691
I73
sVowner
p692
(dp693
Vuser_id
p694
I3702
sVprofile_image
p695
Vhttps://www.gravatar.com/avatar/b85432ae24e81cf19c252185c7d16c43?s=128&d=identicon&r=PG
p696
sVuser_type
p697
Vregistered
p698
sVreputation
p699
I2529
sVlink
p700
Vhttp://stackoverflow.com/users/3702/fserb
p701
sVdisplay_name
p702
Vfserb
p703
ssVis_accepted
p704
I01
sVlast_edit_date
p705
I1430508439
sVanswer_id
p706
I35645
sa(dp707
Vbody
p708
V<p><a href="https://docs.python.org/2/library/sys.html#sys.exit" rel="noreferrer">sys.exit()</a> will do exactly what you want.</p>\u000a\u000a<pre><code>import sys\u000asys.exit("Error message")\u000a</code></pre>\u000a
p709
sVquestion_id
p710
I543309
sVlast_activity_date
p711
I1427765740
sVcreation_date
p712
I1234473620
sVscore
p713
I195
sVowner
p714
(dp715
Vuser_id
p716
I60900
sVprofile_image
p717
Vhttps://www.gravatar.com/avatar/f1c2d3a49d031298fece4e287898940d?s=128&d=identicon&r=PG
p718
sVuser_type
p719
Vregistered
p720
sVreputation
p721
I3084
sVlink
p722
Vhttp://stackoverflow.com/users/60900/moses-schwartz
p723
sVdisplay_name
p724
VMoses Schwartz
p725
ssVis_accepted
p726
I01
sVlast_edit_date
p727
I1427765740
sVanswer_id
p728
I543322
sa(dp729
Vbody
p730
V<p>An "entry point" is typically a function (or other callable function-like object) that a developer or user of your Python package might want to use, though a non-callable object can be supplied as an entry point as well (as correctly pointed out in the comments!).</p>\u000a\u000a<p>The most popular kind of entry point is the "console_script" entry point, which points to a function that you want made available as a command-line tool to whoever installs your package.  This goes into your setup.py like:</p>\u000a\u000a<pre><code>entry_points={\u000a    'console_scripts': [\u000a        'cursive = cursive.tools.cmd:cursive_command',\u000a    ],\u000a},\u000a</code></pre>\u000a\u000a<p>I have a package I've just deployed called "cursive.tools", and I wanted it to make available a "cursive" command that someone could run from the command line, like:</p>\u000a\u000a<pre><code>$ cursive --help\u000ausage: cursive ...\u000a</code></pre>\u000a\u000a<p>The way to do this is define a function, like maybe a "cursive_command" function in cursive/tools/cmd.py that looks like:</p>\u000a\u000a<pre><code>def cursive_command():\u000a    args = sys.argv[1:]\u000a    if len(args) &lt; 1:\u000a        print "usage: ..."\u000a</code></pre>\u000a\u000a<p>and so forth; it should assume that it's been called from the command line, parse the arguments that the user has provided, and ... well, do whatever the command is designed to do.</p>\u000a\u000a<p>Install the <a href="http://pypi.python.org/pypi/docutils/" rel="noreferrer">docutils</a> package for a great example of entry-point use: it will install something like a half-dozen useful commands for converting Python documentation to other formats.</p>\u000a
p731
sVquestion_id
p732
I774824
sVlast_activity_date
p733
I1426109439
sVcreation_date
p734
I1240511828
sVscore
p735
I105
sVowner
p736
(dp737
Vuser_id
p738
I85360
sVprofile_image
p739
Vhttps://www.gravatar.com/avatar/424a8f03889e3ffbf9ed57adb1fc41cc?s=128&d=identicon&r=PG
p740
sVuser_type
p741
Vregistered
p742
sVreputation
p743
I40098
sVlink
p744
Vhttp://stackoverflow.com/users/85360/brandon-rhodes
p745
sVaccept_rate
p746
I45
sVdisplay_name
p747
VBrandon Rhodes
p748
ssVis_accepted
p749
I01
sVlast_edit_date
p750
I1426109439
sVanswer_id
p751
I782984
sa(dp752
Vbody
p753
V<p>I think this is what you're looking for...</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dt = datetime.datetime.now()\u000a&gt;&gt;&gt; dt = dt.replace(hour=0, minute=0, second=0, microsecond=0) # Returns a copy\u000a&gt;&gt;&gt; dt\u000adatetime.datetime(2011, 3, 29, 0, 0)\u000a</code></pre>\u000a\u000a<p>But if you really don't care about the time aspect of things, then you should really only be passing around <code>date</code> objects...</p>\u000a\u000a<pre><code>&gt;&gt;&gt; d_truncated = datetime.date(dt.year, dt.month, dt.day)\u000a&gt;&gt;&gt; d_truncated\u000adatetime.date(2011, 3, 29)\u000a</code></pre>\u000a
p754
sVquestion_id
p755
I5476065
sVlast_activity_date
p756
I1422998309
sVcreation_date
p757
I1301418058
sVscore
p758
I201
sVowner
p759
(dp760
Vuser_id
p761
I273637
sVprofile_image
p762
Vhttps://www.gravatar.com/avatar/89b9c456e8b6945d1e5fd87addf4f739?s=128&d=identicon&r=PG
p763
sVuser_type
p764
Vregistered
p765
sVreputation
p766
I13723
sVlink
p767
Vhttp://stackoverflow.com/users/273637/chris-w
p768
sVaccept_rate
p769
I89
sVdisplay_name
p770
VChris W.
p771
ssVis_accepted
p772
I01
sVlast_edit_date
p773
I1422998309
sVanswer_id
p774
I5476166
sa(dp775
Vbody
p776
V<p>I would use <a href="http://docs.python.org/2/library/functools.html#functools.partial" rel="noreferrer">functools.partial</a> and <a href="http://docs.python.org/2/library/functools.html#functools.wraps" rel="noreferrer">functools.wraps</a>:</p>\u000a\u000a<pre><code>from functools import partial, wraps\u000afrom django.forms.formsets import formset_factory\u000a\u000aServiceFormSet = formset_factory(wraps(ServiceForm)(partial(ServiceForm, affiliate=request.affiliate)), extra=3)\u000a</code></pre>\u000a\u000a<p>I think this is the cleanest approach, and doesn't affect ServiceForm in any way (i.e. by making it difficult to subclass).</p>\u000a
p777
sVquestion_id
p778
I622982
sVlast_activity_date
p779
I1420649351
sVcreation_date
p780
I1236535226
sVscore
p781
I97
sVowner
p782
(dp783
Vuser_id
p784
I3207
sVprofile_image
p785
Vhttps://www.gravatar.com/avatar/b1f36e554be0e1ae19f9a74d6ece9107?s=128&d=identicon&r=PG
p786
sVuser_type
p787
Vregistered
p788
sVreputation
p789
I47592
sVlink
p790
Vhttp://stackoverflow.com/users/3207/carl-meyer
p791
sVaccept_rate
p792
I100
sVdisplay_name
p793
VCarl Meyer
p794
ssVis_accepted
p795
I01
sVlast_edit_date
p796
I1420649351
sVanswer_id
p797
I624013
sa(dp798
Vbody
p799
V<p>I find this problem in my MacBook, the reason is because as @Stephan said, I use <code>easy_install</code>  to install pip, and the mixture of both py package manage tools led to the <code>pkg_resources.DistributionNotFound</code> problem.\u000aThe resolve is:</p>\u000a\u000a<pre><code>easy_install --upgrade pip\u000a</code></pre>\u000a\u000a<p>Remember: just use <strong>one</strong> of the above tools to manage your Py packages.</p>\u000a
p800
sVquestion_id
p801
I6200056
sVlast_activity_date
p802
I1418354647
sVcreation_date
p803
I1343960306
sVscore
p804
I229
sVowner
p805
(dp806
Vuser_id
p807
I1082697
sVprofile_image
p808
Vhttps://www.gravatar.com/avatar/1fcf6edeb41c901f732e317999d242a9?s=128&d=identicon&r=PG
p809
sVuser_type
p810
Vregistered
p811
sVreputation
p812
I2589
sVlink
p813
Vhttp://stackoverflow.com/users/1082697/newptone
p814
sVdisplay_name
p815
VNewPtone
p816
ssVis_accepted
p817
I01
sVlast_edit_date
p818
I1418354647
sVanswer_id
p819
I11788373
sa(dp820
Vbody
p821
V<p><code>__all__</code> is very good - it helps guide import statements without automatically importing modules\u000a<a href="http://docs.python.org/tutorial/modules.html#importing-from-a-package" rel="noreferrer">http://docs.python.org/tutorial/modules.html#importing-from-a-package</a></p>\u000a\u000a<p>using <code>__all__</code> and <code>import *</code> is redundant, only <code>__all__</code> is needed</p>\u000a\u000a<p>I think one of the most powerful reasons to use <code>import *</code> in an <code>__init__.py</code> to import packages is to be able to refactor a script that has grown into multiple scripts without breaking an existing application. But if you're designing a package from the start. I think it's best to leave <code>__init__.py</code> files empty.</p>\u000a\u000a<p>for example:</p>\u000a\u000a<pre><code>foo.py - contains classes related to foo such as fooFactory, tallFoo, shortFoo\u000a</code></pre>\u000a\u000a<p>then the app grows and now it's a whole folder</p>\u000a\u000a<pre><code>foo/\u000a    __init__.py\u000a    foofactories.py\u000a    tallFoos.py\u000a    shortfoos.py\u000a    mediumfoos.py\u000a    santaslittlehelperfoo.py\u000a    superawsomefoo.py\u000a    anotherfoo.py\u000a</code></pre>\u000a\u000a<p>then the init script can say</p>\u000a\u000a<pre><code>__all__ = ['foofactories', 'tallFoos', 'shortfoos', 'medumfoos',\u000a           'santaslittlehelperfoo', 'superawsomefoo', 'anotherfoo']\u000a# deprecated to keep older scripts who import this from breaking\u000afrom foo.foofactories import fooFactory\u000afrom foo.tallfoos import tallFoo\u000afrom foo.shortfoos import shortFoo\u000a</code></pre>\u000a\u000a<p>so that a script written to do the following does not break during the change:</p>\u000a\u000a<pre><code>from foo import fooFactory, tallFoo, shortFoo\u000a</code></pre>\u000a
p822
sVquestion_id
p823
I1944569
sVlast_activity_date
p824
I1415911569
sVcreation_date
p825
I1261502174
sVscore
p826
I89
sVowner
p827
(dp828
Vuser_id
p829
I80479
sVprofile_image
p830
Vhttps://www.gravatar.com/avatar/c4ed0d0d703873026a53f0fbdf339555?s=128&d=identicon&r=PG
p831
sVuser_type
p832
Vregistered
p833
sVreputation
p834
I3607
sVlink
p835
Vhttp://stackoverflow.com/users/80479/fire-crow
p836
sVaccept_rate
p837
I93
sVdisplay_name
p838
VFire Crow
p839
ssVis_accepted
p840
I01
sVlast_edit_date
p841
I1415911569
sVanswer_id
p842
I1947834
sa(dp843
Vbody
p844
V<p>How about:</p>\u000a\u000a<pre><code>import copy\u000ad = { ... }\u000ad2 = copy.deepcopy(d)\u000a</code></pre>\u000a\u000a<p>Python 2 or 3:</p>\u000a\u000a<pre><code>Python 3.2 (r32:88445, Feb 20 2011, 21:30:00) [MSC v.1500 64 bit (AMD64)] on win32\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; import copy\u000a&gt;&gt;&gt; my_dict = {'a': [1, 2, 3], 'b': [4, 5, 6]}\u000a&gt;&gt;&gt; my_copy = copy.deepcopy(my_dict)\u000a&gt;&gt;&gt; my_dict['a'][2] = 7\u000a&gt;&gt;&gt; my_copy['a'][2]\u000a3\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a
p845
sVquestion_id
p846
I5105517
sVlast_activity_date
p847
I1414065283
sVcreation_date
p848
I1298555741
sVscore
p849
I192
sVowner
p850
(dp851
Vuser_id
p852
I267
sVprofile_image
p853
Vhttps://www.gravatar.com/avatar/1b11262da6d1cd26b1b0bc99a2620cee?s=128&d=identicon&r=PG
p854
sVuser_type
p855
Vregistered
p856
sVreputation
p857
I240091
sVlink
p858
Vhttp://stackoverflow.com/users/267/lasse-v-karlsen
p859
sVaccept_rate
p860
I87
sVdisplay_name
p861
VLasse V. Karlsen
p862
ssVis_accepted
p863
I01
sVlast_edit_date
p864
I1414065283
sVanswer_id
p865
I5105554
sa(dp866
Vbody
p867
V<p>Disclaimer: I'm not a Python programmer.</p>\u000a\u000a<p>I believe the problem is that <a href="https://docs.python.org/library/codecs.html#codecs.BOM_UTF8" rel="noreferrer"><code>codecs.BOM_UTF8</code></a> is a byte string, not a Unicode string. I suspect the file handler is trying to guess what you really mean based on "I'm meant to be writing Unicode as UTF-8-encoded text, but you've given me a byte string!"</p>\u000a\u000a<p>Try writing the Unicode string for the byte order mark (i.e. Unicode U+FEFF) directly, so that the file just encodes that as UTF-8:</p>\u000a\u000a<pre><code>import codecs\u000a\u000afile = codecs.open("lol", "w", "utf-8")\u000afile.write(u'\u005cufeff')\u000afile.close()\u000a</code></pre>\u000a\u000a<p>(That seems to give the right answer - a file with bytes EF BB BF.)</p>\u000a\u000a<p>EDIT: S. Lott's <a href="http://stackoverflow.com/a/934203/12892">suggestion</a> of using "utf-8-sig" as the encoding is a better one than explicitly writing the BOM yourself, but I'll leave this answer here as it explains what was going wrong before.</p>\u000a
p868
sVquestion_id
p869
I934160
sVlast_activity_date
p870
I1413405958
sVcreation_date
p871
I1243849618
sVscore
p872
I190
sVowner
p873
(dp874
Vuser_id
p875
I22656
sVprofile_image
p876
Vhttps://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG
p877
sVuser_type
p878
Vregistered
p879
sVreputation
p880
I947769
sVlink
p881
Vhttp://stackoverflow.com/users/22656/jon-skeet
p882
sVaccept_rate
p883
I90
sVdisplay_name
p884
VJon Skeet
p885
ssVis_accepted
p886
I01
sVlast_edit_date
p887
I1413405958
sVanswer_id
p888
I934173
sa(dp889
Vbody
p890
V<p>I usually use <code>sys.platform</code> to get the platform. <code>sys.platform</code> will distinguish between linux, other unixes, and OS X while <code>os.name</code> is "<code>posix</code>" for all of them.</p>\u000a\u000a<p>For much more detailed information, use the <a href="https://docs.python.org/2/library/platform.html" rel="noreferrer">platform module</a>. This has cross-platform functions that will give you information on the machine architecture, OS and OS version, version of Python, etc. Also it has os-specific functions to get things like the particular linux distribution.</p>\u000a
p891
sVquestion_id
p892
I110362
sVlast_activity_date
p893
I1407418195
sVcreation_date
p894
I1221997759
sVscore
p895
I162
sVowner
p896
(dp897
Vuser_id
p898
I3002
sVprofile_image
p899
Vhttps://www.gravatar.com/avatar/a9929763a96cad537d72c9eda8fe3741?s=128&d=identicon&r=PG
p900
sVuser_type
p901
Vregistered
p902
sVreputation
p903
I43484
sVlink
p904
Vhttp://stackoverflow.com/users/3002/df
p905
sVaccept_rate
p906
I100
sVdisplay_name
p907
VdF.
p908
ssVis_accepted
p909
I01
sVlast_edit_date
p910
I1407418195
sVanswer_id
p911
I110829
sa(dp912
Vbody
p913
V<p>In Python 2, open <code>outfile</code> with mode <code>'wb'</code> instead of <code>'w'</code>.  The <code>csv.writer</code> writes <code>\u005cr\u005cn</code> into the file directly.  If you don't open the file in <em>binary</em> mode, it will write <code>\u005cr\u005cr\u005cn</code> because on Windows <em>text</em> mode will translate each <code>\u005cn</code> into <code>\u005cr\u005cn</code>.</p>\u000a\u000a<p>In Python 3 the required syntax changed, so open <code>outfile</code> with the additional parameter <code>newline=''</code> instead.</p>\u000a\u000a<h3>Examples:</h3>\u000a\u000a<pre><code># Python 2\u000awith open('/pythonwork/thefile_subset11.csv', 'wb') as outfile:\u000a    writer = csv.writer(outfile)\u000a\u000a# Python 3\u000awith open('/pythonwork/thefile_subset11.csv', 'w', newline='') as outfile:\u000a    writer = csv.writer(outfile)\u000a</code></pre>\u000a\u000a<h3>Documentation Links</h3>\u000a\u000a<ul>\u000a<li><a href="https://docs.python.org/2/library/csv.html#csv.writer" rel="noreferrer">https://docs.python.org/2/library/csv.html#csv.writer</a></li>\u000a<li><a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="noreferrer">https://docs.python.org/3/library/csv.html#csv.writer</a></li>\u000a</ul>\u000a
p914
sVquestion_id
p915
I3348460
sVlast_activity_date
p916
I1405352931
sVcreation_date
p917
I1280271315
sVscore
p918
I226
sVowner
p919
(dp920
Vuser_id
p921
I235698
sVprofile_image
p922
Vhttps://i.stack.imgur.com/KjvlE.png?s=128&g=1
p923
sVuser_type
p924
Vregistered
p925
sVreputation
p926
I64562
sVlink
p927
Vhttp://stackoverflow.com/users/235698/mark-tolonen
p928
sVdisplay_name
p929
VMark Tolonen
p930
ssVis_accepted
p931
I01
sVlast_edit_date
p932
I1405352931
sVanswer_id
p933
I3348664
sa(dp934
Vbody
p935
V<p>You may use the <a href="http://docs.python.org/library/signal.html" rel="noreferrer">signal</a> package if you are running on UNIX:</p>\u000a\u000a<pre><code>In [1]: import signal\u000a\u000a# Register an handler for the timeout\u000aIn [2]: def handler(signum, frame):\u000a   ...:     print "Forever is over!"\u000a   ...:     raise Exception("end of time")\u000a   ...: \u000a\u000a# This function *may* run for an indetermined time...\u000aIn [3]: def loop_forever():\u000a   ...:     import time\u000a   ...:     while 1:\u000a   ...:         print "sec"\u000a   ...:         time.sleep(1)\u000a   ...:         \u000a   ...:         \u000a\u000a# Register the signal function handler\u000aIn [4]: signal.signal(signal.SIGALRM, handler)\u000aOut[4]: 0\u000a\u000a# Define a timeout for your function\u000aIn [5]: signal.alarm(10)\u000aOut[5]: 0\u000a\u000aIn [6]: try:\u000a   ...:     loop_forever()\u000a   ...: except Exception, exc: \u000a   ...:     print exc\u000a   ....: \u000asec\u000asec\u000asec\u000asec\u000asec\u000asec\u000asec\u000asec\u000aForever is over!\u000aend of time\u000a\u000a# Cancel the timer if the function returned before timeout\u000a# (ok, mine won't but yours maybe will :)\u000aIn [7]: signal.alarm(0)\u000aOut[7]: 0\u000a</code></pre>\u000a\u000a<p>10 seconds after the call <code>alarm.alarm(10)</code>, the handler is called. This raises an exception that you can intercept from the regular Python code.</p>\u000a\u000a<p>This module doesn't play well with threads (but then, who does?)</p>\u000a\u000a<p><strong>Note that</strong> since we raise an exception when timeout happens, it may end up caught and ignored inside the function, for example of one such function:</p>\u000a\u000a<pre><code>def loop_forever():\u000a    while 1:\u000a        print 'sec'\u000a        try:\u000a            time.sleep(10)\u000a        except:\u000a            continue\u000a</code></pre>\u000a
p936
sVquestion_id
p937
I492519
sVlast_activity_date
p938
I1399424941
sVcreation_date
p939
I1233281644
sVscore
p940
I121
sVowner
p941
(dp942
Vuser_id
p943
I10138
sVprofile_image
p944
Vhttps://www.gravatar.com/avatar/6819c2bab7a21ef6e1a8fcb982cc1459?s=128&d=identicon&r=PG
p945
sVuser_type
p946
Vregistered
p947
sVreputation
p948
I7349
sVlink
p949
Vhttp://stackoverflow.com/users/10138/piro
p950
sVdisplay_name
p951
Vpiro
p952
ssVis_accepted
p953
I01
sVlast_edit_date
p954
I1399424941
sVanswer_id
p955
I494273
sa(dp956
Vbody
p957
V<p>You need to create your own admin base_site.html template to do this. The easiest way is to create the file:</p>\u000a\u000a<pre><code>/&lt;projectdir&gt;/templates/admin/base_site.html\u000a</code></pre>\u000a\u000a<p>This should be a copy of <a href="https://github.com/django/django/blob/master/django/contrib/admin/templates/admin/base_site.html">https://github.com/django/django/blob/master/django/contrib/admin/templates/admin/base_site.html</a> - except putting in your custom title:</p>\u000a\u000a<pre><code>{% block branding %}\u000a&lt;h1 id="site-name"&gt;{% trans 'my cool admin console' %}&lt;/h1&gt;\u000a{% endblock %}\u000a</code></pre>\u000a\u000a<p>For this to work, you need to have the correct settings for your project, namely in settings.py:</p>\u000a\u000a<ul>\u000a<li>Make sure '/projectdir/templates/' is added into TEMPLATE_DIRS</li>\u000a<li>Make sure 'django.template.loaders.filesystem.Loader' is added into TEMPLATE_LOADERS</li>\u000a</ul>\u000a\u000a<p>See <a href="http://docs.djangoproject.com/en/dev/ref/settings/">http://docs.djangoproject.com/en/dev/ref/settings/</a> for more information on settings.py</p>\u000a
p958
sVquestion_id
p959
I4938491
sVlast_activity_date
p960
I1396388181
sVcreation_date
p961
I1297200420
sVscore
p962
I110
sVowner
p963
(dp964
Vuser_id
p965
I608133
sVprofile_image
p966
Vhttps://www.gravatar.com/avatar/7fee8d86395fedb142b99e4c35dca09b?s=128&d=identicon&r=PG
p967
sVuser_type
p968
Vregistered
p969
sVreputation
p970
I1349
sVlink
p971
Vhttp://stackoverflow.com/users/608133/user608133
p972
sVdisplay_name
p973
Vuser608133
p974
ssVis_accepted
p975
I01
sVlast_edit_date
p976
I1396388181
sVanswer_id
p977
I4938665
sa(dp978
Vbody
p979
V<p>The data is UTF-8 encoded bytes escaped with URL quoting, so you want to <strong>decode</strong>:</p>\u000a\u000a<pre><code>url=urllib.unquote(url).decode('utf8') \u000a</code></pre>\u000a\u000a<p>Demo:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import urllib \u000a&gt;&gt;&gt; url='example.com?title=%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D0%B2%D0%B0%D1%8F+%D0%B7%D0%B0%D1%89%D0%B8%D1%82%D0%B0'\u000a&gt;&gt;&gt; urllib.unquote(url).decode('utf8') \u000au'example.com?title=\u005cu043f\u005cu0440\u005cu0430\u005cu0432\u005cu043e\u005cu0432\u005cu0430\u005cu044f+\u005cu0437\u005cu0430\u005cu0449\u005cu0438\u005cu0442\u005cu0430'\u000a&gt;&gt;&gt; print urllib.unquote(url).decode('utf8')\u000aexample.com?title=\u043f\u0440\u0430\u0432\u043e\u0432\u0430\u044f+\u0437\u0430\u0449\u0438\u0442\u0430\u000a</code></pre>\u000a
p980
sVquestion_id
p981
I16566069
sVlast_activity_date
p982
I1395305774
sVcreation_date
p983
I1368623943
sVscore
p984
I192
sVowner
p985
(dp986
Vuser_id
p987
I100297
sVprofile_image
p988
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p989
sVuser_type
p990
Vmoderator
p991
sVreputation
p992
I554877
sVlink
p993
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p994
sVdisplay_name
p995
VMartijn Pieters
p996
ssVis_accepted
p997
I01
sVlast_edit_date
p998
I1395305774
sVanswer_id
p999
I16566128
sa(dp1000
Vbody
p1001
V<p>See the documentation on <a href="http://flask.pocoo.org/docs/quickstart/#accessing-request-data" rel="noreferrer">how to access the Request object</a> and then get from this same Request object, the attribute <code>remote_addr</code>.</p>\u000a\u000a<p><strong>Code example</strong></p>\u000a\u000a<pre><code>from flask import request\u000afrom flask import jsonify\u000a\u000a@app.route("/get_my_ip", methods=["GET"])\u000adef get_my_ip():\u000a    return jsonify({'ip': request.remote_addr}), 200\u000a</code></pre>\u000a\u000a<p>For more information see the <a href="http://werkzeug.pocoo.org/docs/wrappers/#werkzeug.wrappers.BaseRequest.remote_addr" rel="noreferrer">Werkzeug documentation</a>.</p>\u000a
p1002
sVquestion_id
p1003
I3759981
sVlast_activity_date
p1004
I1383323409
sVcreation_date
p1005
I1285072637
sVscore
p1006
I160
sVowner
p1007
(dp1008
Vuser_id
p1009
I179372
sVprofile_image
p1010
Vhttps://www.gravatar.com/avatar/7735d49d1b04ba5e18bbe107ad756b0d?s=128&d=identicon&r=PG
p1011
sVuser_type
p1012
Vregistered
p1013
sVreputation
p1014
I7424
sVlink
p1015
Vhttp://stackoverflow.com/users/179372/tarantula
p1016
sVaccept_rate
p1017
I86
sVdisplay_name
p1018
VTarantula
p1019
ssVis_accepted
p1020
I01
sVlast_edit_date
p1021
I1383323409
sVanswer_id
p1022
I3760309
sa(dp1023
Vbody
p1024
V<p>You can write an object that behaves like a dict quite easily with <a href="http://docs.python.org/library/abc.html" rel="noreferrer">ABC</a>s\u000a(Abstract Base Classes) from the <a href="http://docs.python.org/2/library/collections.html" rel="noreferrer">collections</a> module.  It even tells you\u000aif you missed a method, so below is the minimal version that shuts the ABC up.</p>\u000a\u000a<pre><code>import collections\u000a\u000a\u000aclass TransformedDict(collections.MutableMapping):\u000a    """A dictionary that applies an arbitrary key-altering\u000a       function before accessing the keys"""\u000a\u000a    def __init__(self, *args, **kwargs):\u000a        self.store = dict()\u000a        self.update(dict(*args, **kwargs))  # use the free update to set keys\u000a\u000a    def __getitem__(self, key):\u000a        return self.store[self.__keytransform__(key)]\u000a\u000a    def __setitem__(self, key, value):\u000a        self.store[self.__keytransform__(key)] = value\u000a\u000a    def __delitem__(self, key):\u000a        del self.store[self.__keytransform__(key)]\u000a\u000a    def __iter__(self):\u000a        return iter(self.store)\u000a\u000a    def __len__(self):\u000a        return len(self.store)\u000a\u000a    def __keytransform__(self, key):\u000a        return key\u000a</code></pre>\u000a\u000a<p>You get a few free methods from the ABC:</p>\u000a\u000a<pre><code>class MyTransformedDict(TransformedDict):\u000a\u000a    def __keytransform__(self, key):\u000a        return key.lower()\u000a\u000a\u000as = MyTransformedDict([('Test', 'test')])\u000a\u000aassert s.get('TEST') is s['test']   # free get\u000aassert 'TeSt' in s                  # free __contains__\u000a                                    # free setdefault, __eq__, and so on\u000a\u000aimport pickle\u000aassert pickle.loads(pickle.dumps(s)) == s\u000a                                    # works too since we just use a normal dict\u000a</code></pre>\u000a\u000a<p>I wouldn't subclass <code>dict</code> (or other builtins) directly. It often makes no sense, because what you actually want to do is <em>implement the interface of a dict</em>. And that is exactly what ABCs are for.</p>\u000a
p1025
sVquestion_id
p1026
I3387691
sVlast_activity_date
p1027
I1380714288
sVcreation_date
p1028
I1280754025
sVscore
p1029
I138
sVowner
p1030
(dp1031
Vuser_id
p1032
I95612
sVprofile_image
p1033
Vhttps://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=128&d=identicon&r=PG
p1034
sVuser_type
p1035
Vregistered
p1036
sVreputation
p1037
I63439
sVlink
p1038
Vhttp://stackoverflow.com/users/95612/jochen-ritzel
p1039
sVaccept_rate
p1040
I80
sVdisplay_name
p1041
VJochen Ritzel
p1042
ssVis_accepted
p1043
I01
sVlast_edit_date
p1044
I1380714288
sVanswer_id
p1045
I3387975
sa(dp1046
Vbody
p1047
V<p>It looks like Wes may have discovered a known issue in <code>data.table</code> when the number of unique strings (<em>levels</em>) is large: 10,000.</p>\u000a\u000a<p>Does <code>Rprof()</code> reveal most of the time spent in the call <code>sortedmatch(levels(i[[lc]]), levels(x[[rc]])</code>?  This isn't really the join itself (the algorithm), but a preliminary step.</p>\u000a\u000a<p>Recent efforts have gone into allowing character columns in keys, which should resolve that issue by integrating more closely with R's own global string hash table. Some benchmark results are already reported by <code>test.data.table()</code> but that code isn't hooked up yet to replace the levels to levels match.</p>\u000a\u000a<p>Are pandas merges faster than <code>data.table</code> for regular integer columns?  That should be a way to isolate the algorithm itself vs factor issues.</p>\u000a\u000a<p>Also, <code>data.table</code> has <em>time series merge</em> in mind. Two aspects to that: i) multi column <em>ordered</em> keys such as (id,datetime) ii) fast prevailing join (<code>roll=TRUE</code>) a.k.a. last observation carried forward.</p>\u000a\u000a<p>I'll need some time to confirm as it's the first I've seen of the comparison to <code>data.table</code> as presented.</p>\u000a\u000a<hr>\u000a\u000a<p><strong>UPDATE from data.table v1.8.0 released July 2012</strong></p>\u000a\u000a<ul>\u000a<li>Internal function sortedmatch() removed and replaced with chmatch()\u000a       when matching i levels to x levels for columns of type 'factor'. This\u000a       preliminary step was causing a (known) significant slowdown when the number\u000a       of levels of a factor column was large (e.g. >10,000). Exacerbated in\u000a       tests of joining four such columns, as demonstrated by Wes McKinney\u000a       (author of Python package Pandas). Matching 1 million strings of which\u000a       of which 600,000 are unique is now reduced from 16s to 0.5s, for example.</li>\u000a</ul>\u000a\u000a<p>also in that release was :</p>\u000a\u000a<ul>\u000a<li><p>character columns are now allowed in keys and are preferred to\u000afactor. data.table() and setkey() no longer coerce character to\u000afactor. Factors are still supported. Implements FR#1493, FR#1224\u000aand (partially) FR#951.</p></li>\u000a<li><p>New functions chmatch() and %chin%, faster versions of match()\u000aand %in% for character vectors. R's internal string cache is\u000autilised (no hash table is built). They are about 4 times faster\u000athan match() on the example in ?chmatch.</p></li>\u000a</ul>\u000a\u000a<p>As of Sep 2013 data.table is v1.8.10 on CRAN and we're working on v1.9.0. <strong><a href="https://r-forge.r-project.org/scm/viewvc.php/pkg/NEWS?view=markup&amp;root=datatable" rel="noreferrer">NEWS</a></strong> is updated live.</p>\u000a\u000a<hr>\u000a\u000a<p>But as I wrote originally, above :</p>\u000a\u000a<blockquote>\u000a  <p><code>data.table</code> has <em>time series merge</em> in mind. Two aspects to that: i)\u000a  multi column <em>ordered</em> keys such as (id,datetime) ii) fast prevailing\u000a  join (<code>roll=TRUE</code>) a.k.a. last observation carried forward.</p>\u000a</blockquote>\u000a\u000a<p>So the Pandas equi join of two character columns is probably still faster than data.table. Since it sounds like it hashes the combined two columns. data.table doesn't hash the key because it has prevailing ordered joins in mind. A "key" in data.table is literally just the sort order (similar to a clustered index in SQL; i.e., that's how the data is ordered in RAM). On the list is to add secondary keys, for example.</p>\u000a\u000a<p>In summary, the glaring speed difference highlighted by this particular two-character-column test with over 10,000 unique strings shouldn't be as bad now, since the known problem has been fixed.</p>\u000a
p1048
sVquestion_id
p1049
I8991709
sVlast_activity_date
p1050
I1380188805
sVcreation_date
p1051
I1327466562
sVscore
p1052
I90
sVowner
p1053
(dp1054
Vuser_id
p1055
I403310
sVprofile_image
p1056
Vhttps://i.stack.imgur.com/AdypU.jpg?s=128&g=1
p1057
sVuser_type
p1058
Vregistered
p1059
sVreputation
p1060
I38102
sVlink
p1061
Vhttp://stackoverflow.com/users/403310/matt-dowle
p1062
sVaccept_rate
p1063
I86
sVdisplay_name
p1064
VMatt Dowle
p1065
ssVis_accepted
p1066
I01
sVlast_edit_date
p1067
I1380188805
sVanswer_id
p1068
I8997908
sa(dp1069
Vbody
p1070
V<p>To answer this question, we have to look at how indexing a multidimensional array works in Numpy.  Let's first say you have the array <code>x</code> from your question.  The buffer assigned to <code>x</code> will contain 16 ascending integers from 0 to 15.  If you access one element, say <code>x[i,j]</code>, NumPy has to figure out the memory location of this element relative to the beginning of the buffer.  This is done by calculating in effect <code>i*x.shape[1]+j</code> (and multiplying with the size of an int to get an actual memory offset).</p>\u000a\u000a<p>If you extract a subarray by basic slicing like <code>y = x[0:2,0:2]</code>, the resulting object will share the underlying buffer with <code>x</code>.  But what happens if you acces <code>y[i,j]</code>?  NumPy can't use <code>i*y.shape[1]+j</code> to calculate the offset into the array, because the data belonging to <code>y</code> is not consecutive in memory.</p>\u000a\u000a<p>NumPy solves this problem by introducing <em>strides</em>.  When calculating the memory offset for accessing <code>x[i,j]</code>, what is actually calculated is <code>i*x.strides[0]+j*x.strides[1]</code> (and this already includes the factor for the size of an int):</p>\u000a\u000a<pre><code>x.strides\u000a(16, 4)\u000a</code></pre>\u000a\u000a<p>When <code>y</code> is extracted like above, NumPy does not create a new buffer, but it <em>does</em> create a new array object referencing the same buffer (otherwise <code>y</code> would just be equal to <code>x</code>.)   The new array object will have a different shape then <code>x</code> and maybe a different starting offset into the buffer, but will share the strides with <code>x</code> (in this case at least):</p>\u000a\u000a<pre><code>y.shape\u000a(2,2)\u000ay.strides\u000a(16, 4)\u000a</code></pre>\u000a\u000a<p>This way, computing the memory offset for <code>y[i,j]</code> will yield the correct result.</p>\u000a\u000a<p>But what should NumPy do for something like <code>z=x[[1,3]]</code>?  The strides mechanism won't allow correct indexing if the original buffer is used for <code>z</code>.  NumPy theoretically <em>could</em> add some more sophisticated mechanism than the strides, but this would make element access relatively expensive, somehow defying the whole idea of an array.  In addition, a view wouldn't be a really lightweight object anymore.</p>\u000a\u000a<p>This is covered in depth in <a href="http://docs.scipy.org/doc/numpy-1.5.x/reference/arrays.indexing.html" rel="noreferrer">the NumPy documentation on indexing</a>.</p>\u000a\u000a<p>Oh, and nearly forgot about your actual question:  Here is how to make the indexing with multiple lists work as expected:</p>\u000a\u000a<pre><code>x[[[1],[3]],[1,3]]\u000a</code></pre>\u000a\u000a<p>This is because the index arrays are <a href="http://docs.scipy.org/doc/numpy-1.5.x/reference/ufuncs.html#broadcasting" rel="noreferrer">broadcasted</a> to a common shape.\u000aOf course, for this particular example, you can also make do with basic slicing:</p>\u000a\u000a<pre><code>x[1::2, 1::2]\u000a</code></pre>\u000a
p1071
sVquestion_id
p1072
I4257394
sVlast_activity_date
p1073
I1377681285
sVcreation_date
p1074
I1290526273
sVscore
p1075
I88
sVowner
p1076
(dp1077
Vuser_id
p1078
I279627
sVprofile_image
p1079
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1080
sVuser_type
p1081
Vregistered
p1082
sVreputation
p1083
I252330
sVlink
p1084
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1085
sVaccept_rate
p1086
I78
sVdisplay_name
p1087
VSven Marnach
p1088
ssVis_accepted
p1089
I01
sVlast_edit_date
p1090
I1377681285
sVanswer_id
p1091
I4257708
sa(dp1092
Vbody
p1093
V<p>The <em>best</em> way of appending a string to a string variable is to use <code>+</code> or <code>+=</code>. This is because it's readable and fast. They are also just as fast, which one you choose is a matter of taste, the latter one is the most common. Here are timings with the timeit module:</p>\u000a\u000a<pre><code>a = a + b:\u000a0.11338996887207031\u000aa += b:\u000a0.11040496826171875\u000a</code></pre>\u000a\u000a<p>However, those who recommend having lists and appending to them and then joining those lists, do so because appending a string to a list is presumably very fast compared to extending a string. And this can be true, in some cases. Here for example is one\u000amillion appends of a one-character string, first to a string, then to a list:</p>\u000a\u000a<pre><code>a += b:\u000a0.10780501365661621\u000aa.append(b):\u000a0.1123361587524414\u000a</code></pre>\u000a\u000a<p>OK, turns out that even when the resulting string is a million characters long, appending was still faster.</p>\u000a\u000a<p>Now let's try with appending a thousand character long string a hundred thousand times:</p>\u000a\u000a<pre><code>a += b:\u000a0.41823482513427734\u000aa.append(b):\u000a0.010656118392944336\u000a</code></pre>\u000a\u000a<p>The end string therefore ends up being about 100MB long. That was pretty slow, appending to a list was much faster. That that timing doesn't include the final <code>a.join()</code>. So how long would that take? </p>\u000a\u000a<pre><code>a.join(a):\u000a0.43739795684814453\u000a</code></pre>\u000a\u000a<p>Oups. Turns out even in this case, append/join is slower.</p>\u000a\u000a<p>So where does this recommendation come from? Python 2?</p>\u000a\u000a<pre><code>a += b:\u000a0.165287017822\u000aa.append(b):\u000a0.0132720470428\u000aa.join(a):\u000a0.114929914474\u000a</code></pre>\u000a\u000a<p>Well, append/join is <em>marginally</em> faster there if you are using extremely long strings (which you usually aren't, what would you have a string that's 100MB in memory?)</p>\u000a\u000a<p>But the real clincher is Python 2.3. Where I won't even show you the timings, because it's so slow that it hasn't finished yet. These tests suddenly take <em>minutes</em>. Except for the append/join, which if just as fast as under later Pythons.</p>\u000a\u000a<p>Yup. String concatenation was very slow in Python back in the stone age. But on 2.4 it isn't anymore (or at least Python 2.4.7), so the recommendation to use append/join became outdated  in 2008, when Python 2.3 stopped being updated, and you should have stopped using it. :-)</p>\u000a\u000a<p><em>(Update: Turns out when I did the testing more carefully that using <code>+</code> and <code>+=</code> is faster for two strings on Python 2.3 as well. The recommendation to use <code>''.join()</code> must be a misunderstanding)</em></p>\u000a\u000a<p>However, this is CPython. Other implementations may have other concerns. And this is just yet another reason why premature optimization is the root of all evil. Don't use a technique that's supposed "faster" unless you first measure it.</p>\u000a\u000a<p><strong>Therefore the "best" version to do string concatenation is to use + or +=</strong>. And if that turns out to be slow for you, which is pretty unlikely, then do something else.</p>\u000a\u000a<p>So why do I use a lot of append/join in my code? Because sometimes it's actually clearer. Especially when whatever you should concatenate together should be separated by spaces or commas or newlines.</p>\u000a
p1094
sVquestion_id
p1095
I12169839
sVlast_activity_date
p1096
I1377239361
sVcreation_date
p1097
I1346217890
sVscore
p1098
I185
sVowner
p1099
(dp1100
Vuser_id
p1101
I126214
sVprofile_image
p1102
Vhttps://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=128&d=identicon&r=PG
p1103
sVuser_type
p1104
Vregistered
p1105
sVreputation
p1106
I82828
sVlink
p1107
Vhttp://stackoverflow.com/users/126214/lennart-regebro
p1108
sVaccept_rate
p1109
I100
sVdisplay_name
p1110
VLennart Regebro
p1111
ssVis_accepted
p1112
I01
sVlast_edit_date
p1113
I1377239361
sVanswer_id
p1114
I12171382
sa(dp1115
Vbody
p1116
V<p>The <code>&lt;&lt;</code> part is wrong, use <code>&lt;</code> instead:</p>\u000a\u000a<pre><code>$ ./manage.py shell &lt; myscript.py\u000a</code></pre>\u000a\u000a<p>You could also do:</p>\u000a\u000a<pre><code>$ ./manage.py shell\u000a...\u000a&gt;&gt;&gt; execfile('myscript.py')\u000a</code></pre>\u000a
p1117
sVquestion_id
p1118
I16853649
sVlast_activity_date
p1119
I1369991601
sVcreation_date
p1120
I1369991601
sVscore
p1121
I214
sVowner
p1122
(dp1123
Vuser_id
p1124
I3571
sVprofile_image
p1125
Vhttps://www.gravatar.com/avatar/b1d6ed6863a3b4aab3565f1f9625f156?s=128&d=identicon&r=PG
p1126
sVuser_type
p1127
Vregistered
p1128
sVreputation
p1129
I58092
sVlink
p1130
Vhttp://stackoverflow.com/users/3571/codeape
p1131
sVaccept_rate
p1132
I56
sVdisplay_name
p1133
Vcodeape
p1134
ssVis_accepted
p1135
I01
sVanswer_id
p1136
I16853799
sa(dp1137
Vbody
p1138
V<p><a href="http://docs.python.org/2/library/stdtypes.html#str.replace"><code>str.replace()</code></a> does not recognize regular expressions, to perform a substitution using regular expressions use <a href="http://docs.python.org/2/library/re.html#re.sub"><code>re.sub()</code></a>.</p>\u000a\u000a<p>For example:</p>\u000a\u000a<pre><code>import re\u000aline = re.sub(r"(?i)^.*interfaceOpDataFile.*$", "interfaceOpDataFile %s" % fileIn, line)\u000a</code></pre>\u000a\u000a<p>If you are doing this in a loop it would be better to compile the regular expression first:</p>\u000a\u000a<pre><code>import re\u000aregex = re.compile(r"^.*interfaceOpDataFile.*$", re.IGNORECASE)\u000afor line in some_file:\u000a    line = regex.sub("interfaceOpDataFile %s" % fileIn, line)\u000a    # do something with the updated line\u000a</code></pre>\u000a
p1139
sVquestion_id
p1140
I16720541
sVlast_activity_date
p1141
I1369331949
sVcreation_date
p1142
I1369331608
sVscore
p1143
I209
sVowner
p1144
(dp1145
Vuser_id
p1146
I505154
sVprofile_image
p1147
Vhttps://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=128&d=identicon&r=PG
p1148
sVuser_type
p1149
Vregistered
p1150
sVreputation
p1151
I114239
sVlink
p1152
Vhttp://stackoverflow.com/users/505154/andrew-clark
p1153
sVaccept_rate
p1154
I100
sVdisplay_name
p1155
VAndrew Clark
p1156
ssVis_accepted
p1157
I01
sVlast_edit_date
p1158
I1369331949
sVanswer_id
p1159
I16720705
sa(dp1160
Vbody
p1161
V<p>Just get a handle to the root logger and add the StreamHandler. The StreamHandler writes to stderr. Not sure if you really need stdout over stderr, but this is what I use when I setup the Python logger and I also add the FileHandler as well. Then all my logs go to both places (which is what it sounds like you want).</p>\u000a\u000a<pre><code>import logging\u000alogging.getLogger().addHandler(logging.StreamHandler())\u000a</code></pre>\u000a\u000a<p>You could also add a Formatter to it so all your log lines have a common header.</p>\u000a\u000a<p>ie:</p>\u000a\u000a<pre><code>import logging\u000alogFormatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")\u000arootLogger = logging.getLogger()\u000a\u000afileHandler = logging.FileHandler("{0}/{1}.log".format(logPath, fileName))\u000afileHandler.setFormatter(logFormatter)\u000arootLogger.addHandler(fileHandler)\u000a\u000aconsoleHandler = logging.StreamHandler()\u000aconsoleHandler.setFormatter(logFormatter)\u000arootLogger.addHandler(consoleHandler)\u000a</code></pre>\u000a\u000a<p>Prints to the format of:</p>\u000a\u000a<pre><code>2012-12-05 16:58:26,618 [MainThread  ] [INFO ]  my message\u000a</code></pre>\u000a
p1162
sVquestion_id
p1163
I13733552
sVlast_activity_date
p1164
I1354747380
sVcreation_date
p1165
I1354747380
sVscore
p1166
I165
sVowner
p1167
(dp1168
Vuser_id
p1169
I1537951
sVprofile_image
p1170
Vhttps://i.stack.imgur.com/70ib8.jpg?s=128&g=1
p1171
sVuser_type
p1172
Vregistered
p1173
sVreputation
p1174
I1836
sVlink
p1175
Vhttp://stackoverflow.com/users/1537951/waterboy
p1176
sVdisplay_name
p1177
VWaterboy
p1178
ssVis_accepted
p1179
I01
sVanswer_id
p1180
I13733863
sa(dp1181
Vbody
p1182
V<p>To convert <code>numpy.datetime64</code> to datetime object that represents time in UTC on <code>numpy-1.8</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from datetime import datetime\u000a&gt;&gt;&gt; import numpy as np\u000a&gt;&gt;&gt; dt = datetime.utcnow()\u000a&gt;&gt;&gt; dt\u000adatetime.datetime(2012, 12, 4, 19, 51, 25, 362455)\u000a&gt;&gt;&gt; dt64 = np.datetime64(dt)\u000a&gt;&gt;&gt; ts = (dt64 - np.datetime64('1970-01-01T00:00:00Z')) / np.timedelta64(1, 's')\u000a&gt;&gt;&gt; ts\u000a1354650685.3624549\u000a&gt;&gt;&gt; datetime.utcfromtimestamp(ts)\u000adatetime.datetime(2012, 12, 4, 19, 51, 25, 362455)\u000a&gt;&gt;&gt; np.__version__\u000a'1.8.0.dev-7b75899'\u000a</code></pre>\u000a\u000a<p>The above example assumes that a naive datetime object is interpreted by <code>np.datetime64</code> as time in UTC.</p>\u000a\u000a<hr>\u000a\u000a<p>To convert datetime to np.datetime64 and back (<code>numpy-1.6</code>):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; np.datetime64(datetime.utcnow()).astype(datetime)\u000adatetime.datetime(2012, 12, 4, 13, 34, 52, 827542)\u000a</code></pre>\u000a\u000a<p>It works both on a single np.datetime64 object and a numpy array of np.datetime64.</p>\u000a\u000a<p>Think of np.datetime64 the same way you would about np.int8, np.int16, etc and apply the same methods to convert beetween Python objects such as int, datetime and corresponding numpy objects.</p>\u000a\u000a<p>Your "nasty example" works correctly:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from datetime import datetime\u000a&gt;&gt;&gt; import numpy \u000a&gt;&gt;&gt; numpy.datetime64('2002-06-28T01:00:00.000000000+0100').astype(datetime)\u000adatetime.datetime(2002, 6, 28, 0, 0)\u000a&gt;&gt;&gt; numpy.__version__\u000a'1.6.2' # current version available via pip install numpy\u000a</code></pre>\u000a\u000a<p>I can reproduce the <code>long</code> value on <code>numpy-1.8.0</code> installed as:</p>\u000a\u000a<pre><code>pip install git+https://github.com/numpy/numpy.git#egg=numpy-dev\u000a</code></pre>\u000a\u000a<p>The same example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from datetime import datetime\u000a&gt;&gt;&gt; import numpy\u000a&gt;&gt;&gt; numpy.datetime64('2002-06-28T01:00:00.000000000+0100').astype(datetime)\u000a1025222400000000000L\u000a&gt;&gt;&gt; numpy.__version__\u000a'1.8.0.dev-7b75899'\u000a</code></pre>\u000a\u000a<p>It returns <code>long</code> because for <code>numpy.datetime64</code> type <code>.astype(datetime)</code> is equivalent to <code>.astype(object)</code> that returns Python integer (<code>long</code>) on <code>numpy-1.8</code>. </p>\u000a\u000a<p>To get datetime object you could:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dt64.dtype\u000adtype('&lt;M8[ns]')\u000a&gt;&gt;&gt; ns = 1e-9 # number of seconds in a nanosecond\u000a&gt;&gt;&gt; datetime.utcfromtimestamp(dt64.astype(int) * ns)\u000adatetime.datetime(2002, 6, 28, 0, 0)\u000a</code></pre>\u000a\u000a<p>To get datetime64 that uses seconds directly:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dt64 = numpy.datetime64('2002-06-28T01:00:00.000000000+0100', 's')\u000a&gt;&gt;&gt; dt64.dtype\u000adtype('&lt;M8[s]')\u000a&gt;&gt;&gt; datetime.utcfromtimestamp(dt64.astype(int))\u000adatetime.datetime(2002, 6, 28, 0, 0)\u000a</code></pre>\u000a\u000a<p>The <a href="http://docs.scipy.org/doc/numpy-dev/reference/arrays.datetime.html">numpy docs</a> say that the datetime API is experimental and may change in future numpy versions.</p>\u000a
p1183
sVquestion_id
p1184
I13703720
sVlast_activity_date
p1185
I1354653033
sVcreation_date
p1186
I1354628528
sVscore
p1187
I65
sVowner
p1188
(dp1189
Vuser_id
p1190
I4279
sVprofile_image
p1191
Vhttps://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG
p1192
sVuser_type
p1193
Vregistered
p1194
sVreputation
p1195
I203089
sVlink
p1196
Vhttp://stackoverflow.com/users/4279/j-f-sebastian
p1197
sVaccept_rate
p1198
I94
sVdisplay_name
p1199
VJ.F. Sebastian
p1200
ssVis_accepted
p1201
I01
sVlast_edit_date
p1202
I1354653033
sVanswer_id
p1203
I13704307
sa(dp1204
Vbody
p1205
V<p>To convert your time value (float or int) to a formatted string, use:</p>\u000a\u000a<pre><code>time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))\u000a</code></pre>\u000a
p1206
sVquestion_id
p1207
I12400256
sVlast_activity_date
p1208
I1347517623
sVcreation_date
p1209
I1347517623
sVscore
p1210
I133
sVowner
p1211
(dp1212
Vuser_id
p1213
I593047
sVprofile_image
p1214
Vhttps://i.stack.imgur.com/ZTl2D.jpg?s=128&g=1
p1215
sVuser_type
p1216
Vregistered
p1217
sVreputation
p1218
I6616
sVlink
p1219
Vhttp://stackoverflow.com/users/593047/ron-rothman
p1220
sVaccept_rate
p1221
I60
sVdisplay_name
p1222
Vron.rothman
p1223
ssVis_accepted
p1224
I01
sVanswer_id
p1225
I12400584
sa(dp1226
Vbody
p1227
V<pre><code>print("Hello, World!")\u000a</code></pre>\u000a\u000a<p>You are probably using Python 3.0, where <code>print</code> is <a href="http://docs.python.org/release/3.0.1/whatsnew/3.0.html#print-is-a-function" rel="noreferrer">now a function</a> (hence the parenthesis) instead of a statement.</p>\u000a
p1228
sVquestion_id
p1229
I1077347
sVlast_activity_date
p1230
I1346998762
sVcreation_date
p1231
I1246580918
sVscore
p1232
I173
sVowner
p1233
(dp1234
Vuser_id
p1235
I57757
sVprofile_image
p1236
Vhttps://www.gravatar.com/avatar/12d12320bb9a578802cfd9c8cb312e33?s=128&d=identicon&r=PG
p1237
sVuser_type
p1238
Vregistered
p1239
sVreputation
p1240
I31003
sVlink
p1241
Vhttp://stackoverflow.com/users/57757/unknown
p1242
sVaccept_rate
p1243
I79
sVdisplay_name
p1244
VUnknown
p1245
ssVis_accepted
p1246
I01
sVlast_edit_date
p1247
I1346998762
sVanswer_id
p1248
I1077349
sa(dp1249
Vbody
p1250
V<p>To echo / extend upon Jeff's comment, what I think you should aim for is simply a property in your Choice class that calculates the number of votes associated with that object: </p>\u000a\u000a<pre><code>    class Choice(models.Model):\u000a        text = models.CharField(max_length=200) \u000a\u000a        def calculateVotes(self):\u000a            return Vote.objects.filter(choice = self).count()\u000a\u000a        votes = property(calculateVotes)\u000a</code></pre>\u000a\u000a<p>And then in your template, you can do:</p>\u000a\u000a<pre><code>    {% for choice in choices %}\u000a            {{choice.choice}} - {{choice.votes}} &lt;br /&gt;\u000a    {% endfor %}\u000a</code></pre>\u000a\u000a<p>The template tag, is IMHO a bit overkill for this solution, but it's not a terrible solution either. The goal of templates in Django is to insulate you from code in your templates and vice-versa. </p>\u000a\u000a<p>I'd try the above method and see what SQL the ORM generates as I'm not sure off the top of my head if it will pre-cache the properties and just create a subselect for the property or if it will iteratively / on-demand run the query to calculate vote count. But if it generates atrocious queries, you could always populate the property in your view with data you've collected yourself.</p>\u000a
p1251
sVquestion_id
p1252
I1275735
sVlast_activity_date
p1253
I1346754777
sVcreation_date
p1254
I1250222867
sVscore
p1255
I42
sVowner
p1256
(dp1257
Vuser_id
p1258
I151548
sVprofile_image
p1259
Vhttps://www.gravatar.com/avatar/3314bceb0f51f016947c2f3ab2cf9275?s=128&d=identicon&r=PG
p1260
sVuser_type
p1261
Vregistered
p1262
sVreputation
p1263
I874
sVlink
p1264
Vhttp://stackoverflow.com/users/151548/john-ewart
p1265
sVdisplay_name
p1266
VJohn Ewart
p1267
ssVis_accepted
p1268
I01
sVlast_edit_date
p1269
I1346754777
sVanswer_id
p1270
I1275999
sa(dp1271
Vbody
p1272
V<p>Can we get the actual value used for <code>link</code>?</p>\u000a\u000a<p>In addition, we usually encounter this problem here when we are trying to <code>.encode()</code> an already encoded byte string. So you might try to decode it first as in</p>\u000a\u000a<pre><code>html = urllib.urlopen(link).read()\u000aunicode_str = html.decode(&lt;source encoding&gt;)\u000aencoded_str = unicode_str.encode("utf8")\u000a</code></pre>\u000a\u000a<p>As an example:</p>\u000a\u000a<pre><code>html = '\u005cxa0'\u000aencoded_str = html.encode("utf8")\u000a</code></pre>\u000a\u000a<p>Fails with</p>\u000a\u000a<pre><code>UnicodeDecodeError: 'ascii' codec can't decode byte 0xa0 in position 0: ordinal not in range(128)\u000a</code></pre>\u000a\u000a<p>While:</p>\u000a\u000a<pre><code>html = '\u005cxa0'\u000adecoded_str = html.decode("windows-1252")\u000aencoded_str = decoded_str.encode("utf8")\u000a</code></pre>\u000a\u000a<p>Succeeds without error. Do note that "windows-1252" is something I used as an <em>example</em>. I got this from chardet and it had 0.5 confidence that it is right! (well, as given with a 1-character-length string, what do you expect) You should change that to the encoding of the byte string returned from <code>.urlopen().read()</code> to what applies to the content you retrieved.</p>\u000a\u000a<p>Another problem I see there is that the <code>.encode()</code> string method returns the modified string and does not modify the source in place. So it's kind of useless to have <code>self.response.out.write(html)</code> as html is not the encoded string from html.encode (if that is what you were originally aiming for).</p>\u000a\u000a<p>As Ignacio suggested, check the source webpage for the actual encoding of the returned string from <code>read()</code>. It's either in one of the Meta tags or in the ContentType header in the response. Use that then as the parameter for <code>.decode()</code>.</p>\u000a\u000a<p>Do note however that it should not be assumed that other developers are responsible enough to make sure the header and/or meta character set declarations match the actual content. (Which is a PITA, yeah, I should know, I <em>was</em> one of those before).</p>\u000a
p1273
sVquestion_id
p1274
I2365411
sVlast_activity_date
p1275
I1343114419
sVcreation_date
p1276
I1267580533
sVscore
p1277
I77
sVowner
p1278
(dp1279
Vuser_id
p1280
I174830
sVprofile_image
p1281
Vhttps://www.gravatar.com/avatar/d33044818f63003b60a5eada8986f0cf?s=128&d=identicon&r=PG
p1282
sVuser_type
p1283
Vregistered
p1284
sVreputation
p1285
I3877
sVlink
p1286
Vhttp://stackoverflow.com/users/174830/vin-g
p1287
sVdisplay_name
p1288
VVin-G
p1289
ssVis_accepted
p1290
I01
sVlast_edit_date
p1291
I1343114419
sVanswer_id
p1292
I2368248
sa(dp1293
Vbody
p1294
V<p>All integers from -5 to 256 inclusive are cached as global objects sharing the same address with CPython, thus the <code>is</code> test passes.</p>\u000a\u000a<p>This artifact is explained in detail in <a href="http://www.laurentluce.com/posts/python-integer-objects-implementation/">http://www.laurentluce.com/posts/python-integer-objects-implementation/</a>, and we could check the current source code in <a href="http://hg.python.org/cpython/file/tip/Objects/longobject.c">http://hg.python.org/cpython/file/tip/Objects/longobject.c</a>.</p>\u000a\u000a<blockquote>\u000a  <p>A specific structure is used to refer small integers and share them so access is fast. It is an array of 262 pointers to integer objects. Those integer objects are allocated during initialization in a block of integer objects we saw above. The small integers range is from -5 to 257. Many Python programs spend a lot of time using integers in that range so this is a smart decision.</p>\u000a</blockquote>\u000a\u000a<p><em>This is only an implementation detail of CPython and you shouldn't rely on this.</em> For instance, <a href="http://doc.pypy.org/en/latest/interpreter-optimizations.html#caching-small-integers">PyPy</a> implemented the <code>id</code> of integer to return itself, so <code>(0-6) is -6</code> is always true even if they are "different objects" internally; it also allows you to configure whether to enable this integer caching, and even set the lower and upper bounds. But in general, objects retrieved from different origins will not be identical. If you want to compare equality, just use <code>==</code>.</p>\u000a
p1295
sVquestion_id
p1296
I11476190
sVlast_activity_date
p1297
I1342434932
sVcreation_date
p1298
I1342204178
sVscore
p1299
I146
sVowner
p1300
(dp1301
Vuser_id
p1302
I224671
sVprofile_image
p1303
Vhttps://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG
p1304
sVuser_type
p1305
Vregistered
p1306
sVreputation
p1307
I346163
sVlink
p1308
Vhttp://stackoverflow.com/users/224671/kennytm
p1309
sVaccept_rate
p1310
I67
sVdisplay_name
p1311
Vkennytm
p1312
ssVis_accepted
p1313
I01
sVlast_edit_date
p1314
I1342434932
sVanswer_id
p1315
I11476240
sa(dp1316
Vbody
p1317
V<p>Some ad-hoc code for Python 2.7:</p>\u000a\u000a<pre><code>row_format ="{:&gt;15}" * (len(teams_list) + 1)\u000aprint row_format.format("", *teams_list)\u000afor team, row in zip(teams_list, data):\u000a    print row_format.format(team, *row)\u000a</code></pre>\u000a\u000a<p>This relies on <a href="http://docs.python.org/py3k/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format()</code></a> and the <a href="http://docs.python.org/py3k/library/string.html#formatspec" rel="noreferrer">Format Specification Mini-Language</a>.</p>\u000a
p1318
sVquestion_id
p1319
I9535954
sVlast_activity_date
p1320
I1330702832
sVcreation_date
p1321
I1330702832
sVscore
p1322
I92
sVowner
p1323
(dp1324
Vuser_id
p1325
I279627
sVprofile_image
p1326
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1327
sVuser_type
p1328
Vregistered
p1329
sVreputation
p1330
I252330
sVlink
p1331
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1332
sVaccept_rate
p1333
I78
sVdisplay_name
p1334
VSven Marnach
p1335
ssVis_accepted
p1336
I01
sVanswer_id
p1337
I9536084
sa(dp1338
Vbody
p1339
V<p>The range of floating point numbers usually exceeds the range of integers. By returning a floating point value, the functions can return a sensible value for input values that lie outside the representable range of integers.</p>\u000a\u000a<p>Consider: If <code>floor()</code> returned an integer, what should <code>floor(1.0e30)</code> return?</p>\u000a\u000a<p>Now, while Python's integers are now arbitrary precision, it wasn't always this way. The standard library functions are thin wrappers around the equivalent C library functions.</p>\u000a
p1340
sVquestion_id
p1341
I8582741
sVlast_activity_date
p1342
I1324420089
sVcreation_date
p1343
I1324420089
sVscore
p1344
I73
sVowner
p1345
(dp1346
Vuser_id
p1347
I893
sVprofile_image
p1348
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p1349
sVuser_type
p1350
Vregistered
p1351
sVreputation
p1352
I552714
sVlink
p1353
Vhttp://stackoverflow.com/users/893/greg-hewgill
p1354
sVaccept_rate
p1355
I85
sVdisplay_name
p1356
VGreg Hewgill
p1357
ssVis_accepted
p1358
I01
sVanswer_id
p1359
I8582794
sa(dp1360
Vbody
p1361
V<pre><code>&gt;&gt;&gt; d = {'1': 'one', '3': 'three', '2': 'two', '5': 'five', '4': 'four'}\u000a&gt;&gt;&gt; 'one' in d.values()\u000aTrue\u000a</code></pre>\u000a\u000a<p>Out of curiosity, some comparative timing:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; T(lambda : 'one' in d.itervalues()).repeat()\u000a[0.28107285499572754, 0.29107213020324707, 0.27941107749938965]\u000a&gt;&gt;&gt; T(lambda : 'one' in d.values()).repeat()\u000a[0.38303399085998535, 0.37257885932922363, 0.37096405029296875]\u000a&gt;&gt;&gt; T(lambda : 'one' in d.viewvalues()).repeat()\u000a[0.32004380226135254, 0.31716084480285645, 0.3171098232269287]\u000a</code></pre>\u000a\u000a<p><strong>EDIT:</strong> And in case you wonder why... the reason is that each of the above returns a different type of object, which may or may not be well suited for lookup operations:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; type(d.viewvalues())\u000a&lt;type 'dict_values'&gt;\u000a&gt;&gt;&gt; type(d.values())\u000a&lt;type 'list'&gt;\u000a&gt;&gt;&gt; type(d.itervalues())\u000a&lt;type 'dictionary-valueiterator'&gt;\u000a</code></pre>\u000a\u000a<p><strong>EDIT2:</strong> As per request in comments...</p>\u000a\u000a<pre><code>&gt;&gt;&gt; T(lambda : 'four' in d.itervalues()).repeat()\u000a[0.41178202629089355, 0.3959040641784668, 0.3970959186553955]\u000a&gt;&gt;&gt; T(lambda : 'four' in d.values()).repeat()\u000a[0.4631338119506836, 0.43541407585144043, 0.4359898567199707]\u000a&gt;&gt;&gt; T(lambda : 'four' in d.viewvalues()).repeat()\u000a[0.43414998054504395, 0.4213531017303467, 0.41684913635253906]\u000a</code></pre>\u000a
p1362
sVquestion_id
p1363
I8214932
sVlast_activity_date
p1364
I1321894709
sVcreation_date
p1365
I1321892659
sVscore
p1366
I199
sVowner
p1367
(dp1368
Vuser_id
p1369
I146792
sVprofile_image
p1370
Vhttps://www.gravatar.com/avatar/d321b6a6a9c8aeb609111c4ceb516e42?s=128&d=identicon&r=PG
p1371
sVuser_type
p1372
Vregistered
p1373
sVreputation
p1374
I24033
sVlink
p1375
Vhttp://stackoverflow.com/users/146792/mac
p1376
sVaccept_rate
p1377
I88
sVdisplay_name
p1378
Vmac
p1379
ssVis_accepted
p1380
I01
sVlast_edit_date
p1381
I1321894709
sVanswer_id
p1382
I8214998
sa(dp1383
Vbody
p1384
V<p>You can use <a href="http://www.python.org/dev/peps/pep-0289/" rel="noreferrer">generator expressions</a> like this:</p>\u000a\u000a<pre><code>gen = (x for x in xyz if x not in a)\u000a\u000afor x in gen:\u000a    print x\u000a</code></pre>\u000a
p1385
sVquestion_id
p1386
I6981717
sVlast_activity_date
p1387
I1312805992
sVcreation_date
p1388
I1312804903
sVscore
p1389
I132
sVowner
p1390
(dp1391
Vuser_id
p1392
I177591
sVprofile_image
p1393
Vhttps://www.gravatar.com/avatar/0f96caf21e8d14e1062fde39db81ed66?s=128&d=identicon&r=PG
p1394
sVuser_type
p1395
Vregistered
p1396
sVreputation
p1397
I8333
sVlink
p1398
Vhttp://stackoverflow.com/users/177591/kugel
p1399
sVaccept_rate
p1400
I94
sVdisplay_name
p1401
VKugel
p1402
ssVis_accepted
p1403
I01
sVlast_edit_date
p1404
I1312805992
sVanswer_id
p1405
I6981771
sa(dp1406
Vbody
p1407
V<p>Python 2.6 added a new strftime/strptime macro <code>%f</code>, which does microseconds.  Not sure if this is documented anywhere.  But if you're using 2.6 or 3.0, you can do this:</p>\u000a\u000a<pre><code>time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')\u000a</code></pre>\u000a\u000a<p>Edit: I never really work with the <code>time</code> module, so I didn't notice this at first, but it appears that time.struct_time doesn't actually store milliseconds/microseconds.  You may be better off using <code>datetime</code>, like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from datetime import datetime\u000a&gt;&gt;&gt; a = datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')\u000a&gt;&gt;&gt; a.microsecond\u000a123000\u000a</code></pre>\u000a
p1408
sVquestion_id
p1409
I698223
sVlast_activity_date
p1410
I1312271949
sVcreation_date
p1411
I1238435373
sVscore
p1412
I176
sVowner
p1413
(dp1414
Vuser_id
p1415
I51025
sVprofile_image
p1416
Vhttps://www.gravatar.com/avatar/263fec125853f697e0ea89787a4731a6?s=128&d=identicon&r=PG
p1417
sVuser_type
p1418
Vregistered
p1419
sVreputation
p1420
I23952
sVlink
p1421
Vhttp://stackoverflow.com/users/51025/dns
p1422
sVaccept_rate
p1423
I94
sVdisplay_name
p1424
VDNS
p1425
ssVis_accepted
p1426
I01
sVlast_edit_date
p1427
I1312271949
sVanswer_id
p1428
I698279
sa(dp1429
Vbody
p1430
V<p>I also was annoyed by restrictions on what sort of functions pool.map could accept. I wrote the following to circumvent this. It appears to work, even for recursive use of parmap.</p>\u000a\u000a<pre><code>from multiprocessing import Process, Pipe\u000afrom itertools import izip\u000a\u000adef spawn(f):\u000a    def fun(pipe,x):\u000a        pipe.send(f(x))\u000a        pipe.close()\u000a    return fun\u000a\u000adef parmap(f,X):\u000a    pipe=[Pipe() for x in X]\u000a    proc=[Process(target=spawn(f),args=(c,x)) for x,(p,c) in izip(X,pipe)]\u000a    [p.start() for p in proc]\u000a    [p.join() for p in proc]\u000a    return [p.recv() for (p,c) in pipe]\u000a\u000aif __name__ == '__main__':\u000a    print parmap(lambda x:x**x,range(1,5))\u000a</code></pre>\u000a
p1431
sVquestion_id
p1432
I3288595
sVlast_activity_date
p1433
I1303830623
sVcreation_date
p1434
I1303830623
sVscore
p1435
I50
sVowner
p1436
(dp1437
Vuser_id
p1438
I725637
sVprofile_image
p1439
Vhttps://www.gravatar.com/avatar/cace5489f31b1ba898565c5c4f2f5ca6?s=128&d=identicon&r=PG
p1440
sVuser_type
p1441
Vunregistered
p1442
sVreputation
p1443
I532
sVlink
p1444
Vhttp://stackoverflow.com/users/725637/mrule
p1445
sVdisplay_name
p1446
Vmrule
p1447
ssVis_accepted
p1448
I01
sVanswer_id
p1449
I5792404
sa(dp1450
Vbody
p1451
V<p>You can easily add a second legend by adding the line:</p>\u000a\u000a<pre><code>ax2.legend(loc=0)\u000a</code></pre>\u000a\u000a<p>You'll get this:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/DLZkF.png" alt="enter image description here"></p>\u000a\u000a<p>But if you want all labels on one legend then you should do something like this:</p>\u000a\u000a<pre><code>import numpy as np\u000aimport matplotlib.pyplot as plt\u000afrom matplotlib import rc\u000arc('mathtext', default='regular')\u000a\u000atime = np.arange(10)\u000atemp = np.random.random(10)*30\u000aSwdown = np.random.random(10)*100-10\u000aRn = np.random.random(10)*100-10\u000a\u000afig = plt.figure()\u000aax = fig.add_subplot(111)\u000a\u000alns1 = ax.plot(time, Swdown, '-', label = 'Swdown')\u000alns2 = ax.plot(time, Rn, '-', label = 'Rn')\u000aax2 = ax.twinx()\u000alns3 = ax2.plot(time, temp, '-r', label = 'temp')\u000a\u000a# added these three lines\u000alns = lns1+lns2+lns3\u000alabs = [l.get_label() for l in lns]\u000aax.legend(lns, labs, loc=0)\u000a\u000aax.grid()\u000aax.set_xlabel("Time (h)")\u000aax.set_ylabel(r"Radiation ($MJ\u005c,m^{-2}\u005c,d^{-1}$)")\u000aax2.set_ylabel(r"Temperature ($^\u005ccirc$C)")\u000aax2.set_ylim(0, 35)\u000aax.set_ylim(-20,100)\u000aplt.show()\u000a</code></pre>\u000a\u000a<p>Which will give you this:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/Z8pg4.png" alt="enter image description here"></p>\u000a
p1452
sVquestion_id
p1453
I5484922
sVlast_activity_date
p1454
I1301491929
sVcreation_date
p1455
I1301491929
sVscore
p1456
I165
sVowner
p1457
(dp1458
Vuser_id
p1459
I31676
sVprofile_image
p1460
Vhttps://www.gravatar.com/avatar/1e5e14a22b27a69b3d9fd5c7b05126d8?s=128&d=identicon&r=PG
p1461
sVuser_type
p1462
Vregistered
p1463
sVreputation
p1464
I21920
sVlink
p1465
Vhttp://stackoverflow.com/users/31676/paul
p1466
sVaccept_rate
p1467
I78
sVdisplay_name
p1468
VPaul
p1469
ssVis_accepted
p1470
I01
sVanswer_id
p1471
I5487005
sa(dp1472
Vbody
p1473
V<p>Give this a try:</p>\u000a\u000a<pre><code>execfile('file.py')\u000a</code></pre>\u000a\u000a<p>Example usage:</p>\u000a\u000a<pre><code>C:\u005cjunk&gt;copy con execfile_example.py\u000aa = [9, 42, 888]\u000ab = len(a)\u000a^Z\u000a        1 file(s) copied.\u000a\u000aC:\u005cjunk&gt;\u005cpython27\u005cpython\u000aPython 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on win32\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; execfile('execfile_example.py')\u000a&gt;&gt;&gt; a\u000a[9, 42, 888]\u000a&gt;&gt;&gt; b\u000a3\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a
p1474
sVquestion_id
p1475
I5280178
sVlast_activity_date
p1476
I1299893666
sVcreation_date
p1477
I1299893666
sVscore
p1478
I150
sVowner
p1479
(dp1480
Vuser_id
p1481
I84270
sVprofile_image
p1482
Vhttps://www.gravatar.com/avatar/da2c0de47c3681c58f25b1eb821f7221?s=128&d=identicon&r=PG
p1483
sVuser_type
p1484
Vregistered
p1485
sVreputation
p1486
I55767
sVlink
p1487
Vhttp://stackoverflow.com/users/84270/john-machin
p1488
sVdisplay_name
p1489
VJohn Machin
p1490
ssVis_accepted
p1491
I01
sVanswer_id
p1492
I5280205
sa(dp1493
Vbody
p1494
V<pre><code>with open(fname) as f:\u000a    next(f)\u000a    for line in f:\u000a        #do something\u000a</code></pre>\u000a
p1495
sVquestion_id
p1496
I4796764
sVlast_activity_date
p1497
I1295976405
sVcreation_date
p1498
I1295976405
sVscore
p1499
I215
sVowner
p1500
(dp1501
Vuser_id
p1502
I12855
sVprofile_image
p1503
Vhttps://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG
p1504
sVuser_type
p1505
Vregistered
p1506
sVreputation
p1507
I142797
sVlink
p1508
Vhttp://stackoverflow.com/users/12855/silentghost
p1509
sVaccept_rate
p1510
I86
sVdisplay_name
p1511
VSilentGhost
p1512
ssVis_accepted
p1513
I01
sVanswer_id
p1514
I4796785
sa(dp1515
Vbody
p1516
V<p>As per comments, I've updated the code:</p>\u000a\u000a<pre><code>import time\u000aimport math\u000a\u000adef timeit1():\u000a    s = time.time()\u000a    for i in xrange(750000):\u000a        z=i**.5\u000a    print "Took %f seconds" % (time.time() - s)\u000a\u000adef timeit2(arg=math.sqrt):\u000a    s = time.time()\u000a    for i in xrange(750000):\u000a        z=arg(i)\u000a    print "Took %f seconds" % (time.time() - s)\u000a\u000atimeit1()\u000atimeit2()\u000a</code></pre>\u000a\u000a<p>Now the <code>math.sqrt</code> function is directly in a local argument, meaning it has the fastest lookup possible. </p>\u000a\u000a<p><strong>UPDATE:</strong> The python version seems to matter here. I used to think that <code>timeit1</code> would be faster, since when python parses "i**.5" it knows, syntactically, which method to call (<code>__pow__</code> or some variant), so it doesn't have to go through the overhead of lookup that the <code>math.sqrt</code> variant does. But I might be wrong:</p>\u000a\u000a<p><strong>Python 2.5:</strong> 0.191000 vs. 0.224000</p>\u000a\u000a<p><strong>Python 2.6:</strong> 0.195000 vs. 0.139000</p>\u000a\u000a<p>Also psyco seems to deal with <code>math.sqrt</code> better:</p>\u000a\u000a<p><strong>Python 2.5 + Psyco 2.0:</strong> 0.109000 vs. 0.043000</p>\u000a\u000a<p><strong>Python 2.6 + Psyco 2.0:</strong> 0.128000 vs. 0.067000</p>\u000a\u000a<hr>\u000a\u000a<pre><code>| Interpreter    |  x**.5, |   sqrt, | sqrt faster, % |\u000a|                | seconds | seconds |                |\u000a|----------------+---------+---------+----------------|\u000a| Python 3.2rc1+ |    0.32 |    0.27 |             19 |\u000a| Python 3.1.2   |   0.136 |   0.088 |             55 |\u000a| Python 3.0.1   |   0.155 |   0.102 |             52 |\u000a| Python 2.7     |   0.132 |   0.079 |             67 |\u000a| Python 2.6.6   |   0.121 |   0.075 |             61 |\u000a| PyPy 1.4.1     |   0.083 |  0.0159 |            422 |\u000a| Jython 2.5.1   |   0.132 |    0.22 |            -40 |\u000a| Python 2.5.5   |   0.129 |   0.125 |              3 |\u000a| Python 2.4.6   |   0.131 |   0.123 |              7 |\u000a#+TBLFM: $4=100*($2-$3)/$3;%.0f\u000a</code></pre>\u000a\u000a<p>Table results produced on machine:</p>\u000a\u000a<pre><code>$ uname -vms\u000aLinux #42-Ubuntu SMP Thu Dec 2 02:41:37 UTC 2010 x86_64\u000a$ cat /proc/cpuinfo | grep 'model name' | head -1\u000amodel name      : Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz\u000a</code></pre>\u000a\u000a<p>To reproduce results:</p>\u000a\u000a<ul>\u000a<li>get source: <a href="https://gist.github.com/783011" rel="noreferrer"><code>git clone git://gist.github.com/783011.git gist-783011</code></a></li>\u000a<li>install <a href="http://codespeak.net/tox/" rel="noreferrer"><code>tox</code></a>: <code>pip install tox</code></li>\u000a<li>run <code>tox</code> from the directory with <code>tox.ini</code> file.</li>\u000a</ul>\u000a
p1517
sVquestion_id
p1518
I327002
sVlast_activity_date
p1519
I1295281799
sVcreation_date
p1520
I1227922331
sVscore
p1521
I60
sVowner
p1522
(dp1523
Vuser_id
p1524
I15055
sVprofile_image
p1525
Vhttps://www.gravatar.com/avatar/7f71287b47b7189d11fe6d3fbc7ed2fe?s=128&d=identicon&r=PG
p1526
sVuser_type
p1527
Vregistered
p1528
sVreputation
p1529
I103520
sVlink
p1530
Vhttp://stackoverflow.com/users/15055/claudiu
p1531
sVaccept_rate
p1532
I80
sVdisplay_name
p1533
VClaudiu
p1534
ssVis_accepted
p1535
I01
sVlast_edit_date
p1536
I1295281799
sVanswer_id
p1537
I327011
sa(dp1538
Vbody
p1539
V<p>I have tried app engine for my small quake watch application\u000a<a href="http://quakewatch.appspot.com/" rel="noreferrer">http://quakewatch.appspot.com/</a></p>\u000a\u000a<p>My purpose was to see the capabilities of app engine, so here are the main points:</p>\u000a\u000a<ol>\u000a<li>it doesn't come by default with django, it has its own web framework which is pythonic has URL dispatcher like django and it uses django templates\u000aSo if you have django exp. you will find it easy to use\u000a\u000a<ul>\u000a<li>But you can use any pure python framework and django can be easily added see\u000a<a href="http://code.google.com/appengine/articles/django.html" rel="noreferrer">http://code.google.com/appengine/articles/django.html</a>\u000agoogle-app-engine-django (<a href="http://code.google.com/p/google-app-engine-django/" rel="noreferrer">http://code.google.com/p/google-app-engine-django/</a>) project is excellent and works almost like working on a django project</li>\u000a</ul></li>\u000a<li>You can not execute any long running process on server, what you do is reply to request and which should be quick otherwise appengine will kill it\u000aSo if your app needs lots of backend processing appengine is not the best way\u000aotherwise you will have to do processing on a server of your own</li>\u000a<li>My quakewatch app has a subscription feature, it means I had to email latest quakes as they happend, but I can not run a background process in app engine to monitor new quakes\u000asolution here is to use a third part service like pingablity.com which can connect to one of your page and which executes the subscription emailer\u000abut here also you will have to take care that you don't spend much time here\u000aor break task into several pieces</li>\u000a<li>It provides Django like modeling capabilities but backend is totally different but for a new project it should not matter.</li>\u000a</ol>\u000a\u000a<p>But overall I think it is excellent for creating apps which do not need lot of background processing.</p>\u000a\u000a<p>Edit:\u000aNow <a href="http://code.google.com/appengine/docs/python/taskqueue/" rel="noreferrer">task queues</a> can be used for running batch processing or scheduled tasks</p>\u000a\u000a<p>Edit:\u000aafter working/creating a real application on GAE for a year, now my opnion is that unless you are making a application which needs to scale to million and million of users, don't use GAE. Maintaining and doing trivial tasks in GAE is a headache due to distributed nature, to avoid deadline exceeded errors, count entities or do complex queries requires complex code, so small complex application should stick to LAMP.</p>\u000a\u000a<p>Edit:\u000aModels should be specially designed considering all the transactions you wish to have in future, because entities only in same entity group can be used in a transaction and it makes the process of updating two different groups a nightmare e.g. transfer money from user1 to user2 in transaction is impossible unless they are in same entity group, but making them same entity group may not be best for frequent update purposes....\u000aread this <a href="http://blog.notdot.net/2009/9/Distributed-Transactions-on-App-Engine" rel="noreferrer">http://blog.notdot.net/2009/9/Distributed-Transactions-on-App-Engine</a></p>\u000a
p1540
sVquestion_id
p1541
I110186
sVlast_activity_date
p1542
I1294993965
sVcreation_date
p1543
I1221972732
sVscore
p1544
I60
sVowner
p1545
(dp1546
Vuser_id
p1547
I6946
sVprofile_image
p1548
Vhttps://www.gravatar.com/avatar/766dcbbf898a4b10cfc1b34f70076f2a?s=128&d=identicon&r=PG
p1549
sVuser_type
p1550
Vregistered
p1551
sVreputation
p1552
I46374
sVlink
p1553
Vhttp://stackoverflow.com/users/6946/anurag-uniyal
p1554
sVaccept_rate
p1555
I89
sVdisplay_name
p1556
VAnurag Uniyal
p1557
ssVis_accepted
p1558
I01
sVlast_edit_date
p1559
I1294993965
sVanswer_id
p1560
I110275
sa(dp1561
Vbody
p1562
V<p>Something along these lines, using ABC</p>\u000a\u000a<pre><code>import abc\u000a\u000aclass Shape(object):\u000a    __metaclass__ = abc.ABCMeta\u000a\u000a    @abc.abstractmethod\u000a    def method_to_implement(self, input):\u000a        """Method documentation"""\u000a        return\u000a</code></pre>\u000a\u000a<p>Also read this good tutorial: <a href="http://www.doughellmann.com/PyMOTW/abc/">http://www.doughellmann.com/PyMOTW/abc/</a></p>\u000a\u000a<p>You can also check out <strong>zope.interface</strong> which was used prior to introduction of ABC in python.  </p>\u000a\u000a<ul>\u000a<li><a href="http://pypi.python.org/pypi/zope.interface">http://pypi.python.org/pypi/zope.interface</a></li>\u000a<li><a href="http://wiki.zope.org/Interfaces/FrontPage">http://wiki.zope.org/Interfaces/FrontPage</a></li>\u000a</ul>\u000a
p1563
sVquestion_id
p1564
I4382945
sVlast_activity_date
p1565
I1291768320
sVcreation_date
p1566
I1291766531
sVscore
p1567
I158
sVowner
p1568
(dp1569
Vuser_id
p1570
I432745
sVprofile_image
p1571
Vhttps://www.gravatar.com/avatar/61d5932d030d57eb9948756af74a357f?s=128&d=identicon&r=PG
p1572
sVuser_type
p1573
Vregistered
p1574
sVreputation
p1575
I44346
sVlink
p1576
Vhttp://stackoverflow.com/users/432745/pyfunc
p1577
sVdisplay_name
p1578
Vpyfunc
p1579
ssVis_accepted
p1580
I01
sVlast_edit_date
p1581
I1291768320
sVanswer_id
p1582
I4382964
sa(dp1583
Vbody
p1584
V<p>Thanks for all the comments!  I've ended up answering it myself with your help.  It feels dirty answering your own question, though.</p>\u000a\u000a<p><strong>Question 1: Why is printing to stdout slow?</strong></p>\u000a\u000a<p><strong>Answer:</strong> Printing to stdout is <em>not</em> inherently slow.  It is the terminal you work with that is slow.  And it has pretty much zero to do with I/O buffering on the application side (eg: python file buffering).  See below.</p>\u000a\u000a<p><strong>Question 2: Can it be sped up?</strong></p>\u000a\u000a<p><strong>Answer:</strong> Yes it can, but seemingly not from the program side (the side doing the 'printing' to stdout).  To speed it up, use a faster different terminal emulator.</p>\u000a\u000a<p>Explanation...</p>\u000a\u000a<p>I tried a self-described 'lightweight' terminal program called <code>wterm</code> and got <em>significantly</em> better results.  Below is the output of my test script (at the bottom of the question) when running in <code>wterm</code> at 1920x1200 in on the same system where the basic print option took 12s using gnome-terminal:</p>\u000a\u000a<pre>\u000a-----\u000atiming summary (100k lines each)\u000a-----\u000aprint                         : 0.261 s\u000awrite to file (+fsync)        : 0.110 s\u000aprint with stdout = /dev/null : 0.050 s\u000a</pre>\u000a\u000a<p>0.26s is MUCH better than 12s!  I don't know whether <code>wterm</code> is more intelligent about how it renders to screen along the lines of how I was suggesting (render the 'visible' tail at a reasonable frame rate), or whether it just "does less" than <code>gnome-terminal</code>.  For the purposes of my question I've got the answer, though.  <code>gnome-terminal</code> is slow.</p>\u000a\u000a<p>So - If you have a long running script that you feel is slow and it spews massive amounts of text to stdout... try a different terminal and see if it is any better!</p>\u000a\u000a<p>Note that I pretty much randomly pulled <code>wterm</code> from the ubuntu/debian repositories.  <a href="http://sourceforge.net/projects/wterm/" rel="noreferrer">This link</a> might be the same terminal, but I'm not sure.  I did not test any other terminal emulators.</p>\u000a\u000a<hr>\u000a\u000a<p>Update: Because I had to scratch the itch, I tested a whole pile of other terminal emulators with the same script and full screen (1920x1200).  My manually collected stats are here:</p>\u000a\u000a<pre>\u000awterm           0.3s\u000aaterm           0.3s\u000arxvt            0.3s\u000amrxvt           0.4s\u000akonsole         0.6s\u000ayakuake         0.7s\u000alxterminal        7s\u000axterm             9s\u000agnome-terminal   12s\u000axfce4-terminal   12s\u000avala-terminal    18s\u000axvt              48s\u000a</pre>\u000a\u000a<p>The recorded times are manually collected, but they were pretty consistent.  I recorded the best(ish) value.  YMMV, obviously.</p>\u000a\u000a<p>As a bonus, it was an interesting tour of some of the various terminal emulators available out there!  I'm amazed my first 'alternate' test turned out to be the best of the bunch.</p>\u000a
p1585
sVquestion_id
p1586
I3857052
sVlast_activity_date
p1587
I1286481933
sVcreation_date
p1588
I1286242546
sVscore
p1589
I60
sVowner
p1590
(dp1591
Vuser_id
p1592
I465838
sVprofile_image
p1593
Vhttps://www.gravatar.com/avatar/014c0ed9204e721a282ad5334f641ee4?s=128&d=identicon&r=PG
p1594
sVuser_type
p1595
Vregistered
p1596
sVreputation
p1597
I3822
sVlink
p1598
Vhttp://stackoverflow.com/users/465838/russ
p1599
sVaccept_rate
p1600
I64
sVdisplay_name
p1601
VRuss
p1602
ssVis_accepted
p1603
I01
sVlast_edit_date
p1604
I1286481933
sVanswer_id
p1605
I3860319
sa(dp1606
Vbody
p1607
V<p>For every python container C, the expectation is that</p>\u000a\u000a<pre><code>for item in C:\u000a    assert item in C\u000a</code></pre>\u000a\u000a<p>will pass just fine -- wouldn't <em>you</em> find it astonishing if one sense of <code>in</code> (the loop clause) had a completely different meaning from the other (the presence check)?  I sure would!  It naturally works that way for lists, sets, tuples, ...</p>\u000a\u000a<p>So, when <code>C</code> is a dictionary, if <code>in</code> were to yield key/value tuples in a <code>for</code> loop, then, by the principle of least astonishment, <code>in</code> would also have to take such a tuple as its left-hand operand in the containment check.</p>\u000a\u000a<p>How useful would that be?  Pretty useless indeed, basically making <code>if (key, value) in C</code> a synonym for <code>if C.get(key) == value</code> -- which is a check I believe I may have performed, or wanted to perform, 100 times more rarely than what <code>if k in C</code> actually <em>means</em>, checking the presence of the key <em>only</em> and completely ignoring the value.</p>\u000a\u000a<p>On the other hand, wanting to loop just on keys is quite common, e.g.:</p>\u000a\u000a<pre><code>for k in thedict:\u000a    thedict[k] += 1\u000a</code></pre>\u000a\u000a<p>having the value as well would not help particularly:</p>\u000a\u000a<pre><code>for k, v in thedict.items():\u000a    thedict[k] = v + 1\u000a</code></pre>\u000a\u000a<p>actually somewhat less clear and less concise.  (Note that <code>items</code> was the original spelling of the "proper" methods to use to get key/value pairs: unfortunately that was back in the days when such accessors returned whole lists, so to support "just iterating" an alternative spelling had to be introduced, and <code>iteritems</code>  it was -- in Python 3, where backwards compatibility constraints with previous Python versions were much weakened, it became <code>items</code> again).</p>\u000a
p1608
sVquestion_id
p1609
I3744568
sVlast_activity_date
p1610
I1284876783
sVcreation_date
p1611
I1284876783
sVscore
p1612
I167
sVowner
p1613
(dp1614
Vuser_id
p1615
I95810
sVprofile_image
p1616
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1617
sVuser_type
p1618
Vregistered
p1619
sVreputation
p1620
I516079
sVlink
p1621
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1622
sVaccept_rate
p1623
I80
sVdisplay_name
p1624
VAlex Martelli
p1625
ssVis_accepted
p1626
I01
sVanswer_id
p1627
I3744713
sa(dp1628
Vbody
p1629
V<p>Calling <code>str(...)</code> is the Pythonic way to convert something to a string.</p>\u000a\u000a<p>You might want to consider why you want a list of strings. You could instead keep it as a list of integers and only convert the integers to strings when you need to display them. For example, if you have a list of integers then you can do this:</p>\u000a\u000a<pre><code>print ', '.join(str(x) for x in list_of_ints)\u000a</code></pre>\u000a
p1630
sVquestion_id
p1631
I3590165
sVlast_activity_date
p1632
I1282986599
sVcreation_date
p1633
I1282986599
sVscore
p1634
I253
sVowner
p1635
(dp1636
Vuser_id
p1637
I61974
sVprofile_image
p1638
Vhttps://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=128&d=identicon&r=PG
p1639
sVuser_type
p1640
Vregistered
p1641
sVreputation
p1642
I484946
sVlink
p1643
Vhttp://stackoverflow.com/users/61974/mark-byers
p1644
sVdisplay_name
p1645
VMark Byers
p1646
ssVis_accepted
p1647
I01
sVanswer_id
p1648
I3590168
sa(dp1649
Vbody
p1650
V<p>it means 'nothing for the first argument, nothing for the second, and jump by three'. It gets every third item of the sequence sliced.\u000a<a href="http://docs.python.org/release/2.3.5/whatsnew/section-slices.html">Extended slices</a> is what you want. New in Python 2.3</p>\u000a
p1651
sVquestion_id
p1652
I3453085
sVlast_activity_date
p1653
I1281474306
sVcreation_date
p1654
I1281471860
sVscore
p1655
I104
sVowner
p1656
(dp1657
Vuser_id
p1658
I22184
sVprofile_image
p1659
Vhttps://i.stack.imgur.com/43H4k.jpg?s=128&g=1
p1660
sVuser_type
p1661
Vregistered
p1662
sVreputation
p1663
I3982
sVlink
p1664
Vhttp://stackoverflow.com/users/22184/adriano-varoli-piazza
p1665
sVaccept_rate
p1666
I93
sVdisplay_name
p1667
VAdriano Varoli Piazza
p1668
ssVis_accepted
p1669
I01
sVlast_edit_date
p1670
I1281474306
sVanswer_id
p1671
I3453103
sa(dp1672
Vbody
p1673
V<p>I ended up adapting a script (<a href="http://effbot.org/zone/python-register.htm" rel="nofollow noreferrer">http://effbot.org/zone/python-register.htm</a>) to register a Python installation in the registry.  I can pick the Python to be <em>the</em> Python in the registry, run the Windows installer, then set the registry back:</p>\u000a\u000a<pre><code># -*- encoding: utf-8 -*-\u000a#\u000a# script to register Python 2.0 or later for use with win32all\u000a# and other extensions that require Python registry settings\u000a#\u000a# Adapted by Ned Batchelder from a script\u000a# written by Joakim Löw for Secret Labs AB / PythonWare\u000a#\u000a# source:\u000a# http://www.pythonware.com/products/works/articles/regpy20.htm\u000a\u000aimport sys\u000a\u000afrom _winreg import *\u000a\u000a# tweak as necessary\u000aversion = sys.version[:3]\u000ainstallpath = sys.prefix\u000a\u000aregpath = "SOFTWARE\u005c\u005cPython\u005c\u005cPythoncore\u005c\u005c%s\u005c\u005c" % (version)\u000ainstallkey = "InstallPath"\u000apythonkey = "PythonPath"\u000apythonpath = "%s;%s\u005c\u005cLib\u005c\u005c;%s\u005c\u005cDLLs\u005c\u005c" % (\u000a    installpath, installpath, installpath\u000a)\u000a\u000adef RegisterPy():\u000a    try:\u000a        reg = OpenKey(HKEY_LOCAL_MACHINE, regpath)\u000a    except EnvironmentError:\u000a        try:\u000a            reg = CreateKey(HKEY_LOCAL_MACHINE, regpath)\u000a        except Exception, e:\u000a            print "*** Unable to register: %s" % e\u000a            return\u000a\u000a    SetValue(reg, installkey, REG_SZ, installpath)\u000a    SetValue(reg, pythonkey, REG_SZ, pythonpath)\u000a    CloseKey(reg)\u000a    print "--- Python %s at %s is now registered!" % (version, installpath)\u000a\u000aif __name__ == "__main__":\u000a    RegisterPy()\u000a</code></pre>\u000a\u000a<p>Run this script with the Python you want to be registered, and it will be entered into the registry. Note that on Windows 7 and Vista, you'll need Administrator privileges.</p>\u000a
p1674
sVquestion_id
p1675
I3271590
sVlast_activity_date
p1676
I1279399303
sVcreation_date
p1677
I1279399303
sVscore
p1678
I39
sVowner
p1679
(dp1680
Vuser_id
p1681
I14343
sVprofile_image
p1682
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p1683
sVuser_type
p1684
Vregistered
p1685
sVreputation
p1686
I193903
sVlink
p1687
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p1688
sVaccept_rate
p1689
I80
sVdisplay_name
p1690
VNed Batchelder
p1691
ssVis_accepted
p1692
I01
sVanswer_id
p1693
I3273193
sa(dp1694
Vbody
p1695
V<p>I'm not sure how exactly you want the formatting to look like, but you could start with a function like this:</p>\u000a\u000a<pre><code>def pretty(d, indent=0):\u000a   for key, value in d.iteritems():\u000a      print '\u005ct' * indent + str(key)\u000a      if isinstance(value, dict):\u000a         pretty(value, indent+1)\u000a      else:\u000a         print '\u005ct' * (indent+1) + str(value)\u000a</code></pre>\u000a
p1696
sVquestion_id
p1697
I3229419
sVlast_activity_date
p1698
I1278946165
sVcreation_date
p1699
I1278946165
sVscore
p1700
I61
sVowner
p1701
(dp1702
Vuser_id
p1703
I56338
sVprofile_image
p1704
Vhttps://www.gravatar.com/avatar/92fb4563ddc5ceeaa8b19b60a7a172f4?s=128&d=identicon&r=PG
p1705
sVuser_type
p1706
Vregistered
p1707
sVreputation
p1708
I137369
sVlink
p1709
Vhttp://stackoverflow.com/users/56338/sth
p1710
sVaccept_rate
p1711
I44
sVdisplay_name
p1712
Vsth
p1713
ssVis_accepted
p1714
I01
sVanswer_id
p1715
I3229493
sa(dp1716
Vcommunity_owned_date
p1717
I1272246856
sVbody
p1718
V<p>I have sports injuries, and I cannot type more than few characters without serious pain.</p>\u000a\u000a<p>Instead, I use emacs together with Dragon NaturallySpeaking.\u000aI have written macros and scripts to help it get by.  The system is not perfect, but it works.\u000aI program mostly in C++, but I also use python.</p>\u000a\u000a<p>If you want to, I will help you with that.\u000aI have to warn you, it takes few months to get used to speech to text software and train it.  moreover, I am not native English speaker, am sure that gets in the way</p>\u000a\u000a<p>Do not despair, there are solutions.</p>\u000a\u000a<p>here a link to emacs and Dragon files (unfortunately have not documented yet)</p>\u000a\u000a<p><a href="http://code.google.com/p/asadchev/source/browse/#svn/trunk/home/Dragon" rel="noreferrer">http://code.google.com/p/asadchev/source/browse/#svn/trunk/home/Dragon</a></p>\u000a\u000a<p><a href="http://code.google.com/p/asadchev/source/browse/#svn/trunk/emacs/elisp" rel="noreferrer">http://code.google.com/p/asadchev/source/browse/#svn/trunk/emacs/elisp</a></p>\u000a\u000a<p>also, if you need more info, my number is 515 230 9363 (United States, Iowa).\u000aI will be glad to help you if I can</p>\u000a
p1719
sVquestion_id
p1720
I2710537
sVlast_activity_date
p1721
I1272249961
sVcreation_date
p1722
I1272245849
sVscore
p1723
I92
sVowner
p1724
(dp1725
Vuser_id
p1726
I206328
sVprofile_image
p1727
Vhttps://www.gravatar.com/avatar/e002d9aebb899c1d4ed3ca5bb7d61704?s=128&d=identicon&r=PG
p1728
sVuser_type
p1729
Vregistered
p1730
sVreputation
p1731
I26189
sVlink
p1732
Vhttp://stackoverflow.com/users/206328/anycorn
p1733
sVaccept_rate
p1734
I77
sVdisplay_name
p1735
VAnycorn
p1736
ssVis_accepted
p1737
I01
sVlast_edit_date
p1738
I1272249961
sVanswer_id
p1739
I2710686
sa(dp1740
Vbody
p1741
V<p>You have the wrong mental model for using NumPy efficiently. NumPy arrays are stored in contiguous blocks of memory. If you want to add rows or columns to an existing array, the entire array needs to be copied to a new block of memory, creating gaps for the new elements to be stored. This is very inefficient if done repeatedly to build an array.</p>\u000a\u000a<p>In the case of adding rows, your best bet is to create an array that is as big as your data set will eventually be, and then add data to it row-by-row:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import numpy\u000a&gt;&gt;&gt; a = numpy.zeros(shape=(5,2))\u000a&gt;&gt;&gt; a\u000aarray([[ 0.,  0.],\u000a   [ 0.,  0.],\u000a   [ 0.,  0.],\u000a   [ 0.,  0.],\u000a   [ 0.,  0.]])\u000a&gt;&gt;&gt; a[0] = [1,2]\u000a&gt;&gt;&gt; a[1] = [2,3]\u000a&gt;&gt;&gt; a\u000aarray([[ 1.,  2.],\u000a   [ 2.,  3.],\u000a   [ 0.,  0.],\u000a   [ 0.,  0.],\u000a   [ 0.,  0.]])\u000a</code></pre>\u000a
p1742
sVquestion_id
p1743
I568962
sVlast_activity_date
p1744
I1270123807
sVcreation_date
p1745
I1235126206
sVscore
p1746
I203
sVowner
p1747
(dp1748
Vuser_id
p1749
I39965
sVprofile_image
p1750
Vhttps://www.gravatar.com/avatar/c5604334204d95a9c06da59e4f21ae02?s=128&d=identicon&r=PG
p1751
sVuser_type
p1752
Vregistered
p1753
sVreputation
p1754
I3574
sVlink
p1755
Vhttp://stackoverflow.com/users/39965/stephen-simmons
p1756
sVdisplay_name
p1757
VStephen Simmons
p1758
ssVis_accepted
p1759
I01
sVlast_edit_date
p1760
I1270123807
sVanswer_id
p1761
I569063
sa(dp1762
Vcommunity_owned_date
p1763
I1241416092
sVbody
p1764
V<p>Off the top of my head, no.</p>\u000a\u000a<p>I think the best you could do is something like this:</p>\u000a\u000a<pre><code>def loop(f,n):\u000a    for i in xrange(n): f()\u000a\u000aloop(lambda: &lt;insert expression here&gt;, 5)\u000a</code></pre>\u000a\u000a<p>But I think you can just live with the extra <code>i</code> variable.</p>\u000a\u000a<p>Here is the option to use the <code>_</code> variable, which in reality, is just another variable.</p>\u000a\u000a<pre><code>for _ in range(n):\u000a    do_something()\u000a</code></pre>\u000a\u000a<p>Note that <code>_</code> is assigned the last result that returned in an interactive python session:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 1+2\u000a3\u000a&gt;&gt;&gt; _\u000a3\u000a</code></pre>\u000a\u000a<p>For this reason, I would not use it in this manner. I am unaware of any idiom as mentioned by Ryan. It can mess up your interpreter.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; for _ in xrange(10): pass\u000a...\u000a&gt;&gt;&gt; _\u000a9\u000a&gt;&gt;&gt; 1+2\u000a3\u000a&gt;&gt;&gt; _\u000a9\u000a</code></pre>\u000a\u000a<p>And according to <a href="http://www.python.org/doc/2.4.3/ref/grammar.txt" rel="noreferrer">python grammar</a>, it is an acceptable variable name:</p>\u000a\u000a<blockquote>\u000a  <p>identifier ::= \u000a               (letter|"_") (letter | digit | "_")*</p>\u000a</blockquote>\u000a
p1765
sVquestion_id
p1766
I818828
sVlast_activity_date
p1767
I1258366915
sVcreation_date
p1768
I1241414075
sVscore
p1769
I63
sVowner
p1770
(dp1771
Vuser_id
p1772
I57757
sVprofile_image
p1773
Vhttps://www.gravatar.com/avatar/12d12320bb9a578802cfd9c8cb312e33?s=128&d=identicon&r=PG
p1774
sVuser_type
p1775
Vregistered
p1776
sVreputation
p1777
I31003
sVlink
p1778
Vhttp://stackoverflow.com/users/57757/unknown
p1779
sVaccept_rate
p1780
I79
sVdisplay_name
p1781
VUnknown
p1782
ssVis_accepted
p1783
I01
sVlast_edit_date
p1784
I1258366915
sVanswer_id
p1785
I818836
sa(dp1786
Vbody
p1787
V<p>In Python, "privacy" depends on "consenting adults'" levels of agreement - you can't <em>force</em> it (any more than you can in real life;-).  A single leading underscore means you're not <strong>supposed</strong> to access it "from the outside" -- <strong>two</strong> leading underscores (w/o trailing underscores) carry the message even more forcefully... but, in the end, it still depends on social convention and consensus: Python's introspection is forceful enough that you can't <strong>handcuff</strong> every other programmer in the world to respect you wish.</p>\u000a\u000a<p>((Btw, though it's a closely held secret, much the same holds for C++: with most compilers, a simple <code>#define private public</code> line before <code>#include</code>ing your <code>.h</code> file is all it takes for wily coders to make hash of your "privacy"...!-))</p>\u000a
p1788
sVquestion_id
p1789
I1547145
sVlast_activity_date
p1790
I1255153383
sVcreation_date
p1791
I1255153383
sVscore
p1792
I170
sVowner
p1793
(dp1794
Vuser_id
p1795
I95810
sVprofile_image
p1796
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1797
sVuser_type
p1798
Vregistered
p1799
sVreputation
p1800
I516079
sVlink
p1801
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1802
sVaccept_rate
p1803
I80
sVdisplay_name
p1804
VAlex Martelli
p1805
ssVis_accepted
p1806
I01
sVanswer_id
p1807
I1547163
sa(dp1808
Vbody
p1809
V<p><a href="http://docs.python.org/library/os.html#os.pathsep" rel="noreferrer"><code>os.pathsep</code></a></p>\u000a
p1810
sVquestion_id
p1811
I1499019
sVlast_activity_date
p1812
I1254326024
sVcreation_date
p1813
I1254326024
sVscore
p1814
I178
sVowner
p1815
(dp1816
Vuser_id
p1817
I12855
sVprofile_image
p1818
Vhttps://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG
p1819
sVuser_type
p1820
Vregistered
p1821
sVreputation
p1822
I142797
sVlink
p1823
Vhttp://stackoverflow.com/users/12855/silentghost
p1824
sVaccept_rate
p1825
I86
sVdisplay_name
p1826
VSilentGhost
p1827
ssVis_accepted
p1828
I01
sVanswer_id
p1829
I1499033
sa(dp1830
Vbody
p1831
V<p>have you tried to remove the timezone awareness?</p>\u000a\u000a<p>from <a href="http://pytz.sourceforge.net/" rel="noreferrer">http://pytz.sourceforge.net/</a></p>\u000a\u000a<pre><code>naive = dt.replace(tzinfo=None)\u000a</code></pre>\u000a\u000a<p>may have to add time zone conversion as well.</p>\u000a
p1832
sVquestion_id
p1833
I796008
sVlast_activity_date
p1834
I1240886167
sVcreation_date
p1835
I1240886167
sVscore
p1836
I155
sVowner
p1837
(dp1838
Vuser_id
p1839
I93380
sVprofile_image
p1840
Vhttps://www.gravatar.com/avatar/a378a027352ae0dc9c0bd249d06b46c3?s=128&d=identicon&r=PG
p1841
sVuser_type
p1842
Vregistered
p1843
sVreputation
p1844
I3864
sVlink
p1845
Vhttp://stackoverflow.com/users/93380/phillc
p1846
sVdisplay_name
p1847
Vphillc
p1848
ssVis_accepted
p1849
I01
sVanswer_id
p1850
I796019
sa(dp1851
Vbody
p1852
V<p>The easiest way would be not to pass <code>bars</code> through the different functions, but to access it directly from <code>maptest</code>:</p>\u000a\u000a<pre><code>foos = [1.0,2.0,3.0,4.0,5.0]\u000abars = [1,2,3]\u000a\u000adef maptest(foo):\u000a    print foo, bars\u000a\u000amap(maptest, foos)\u000a</code></pre>\u000a\u000a<p>With your original <code>maptest</code> function you could also use a lambda function in <code>map</code>:</p>\u000a\u000a<pre><code>map((lambda foo: maptest(foo, bars)), foos)\u000a</code></pre>\u000a
p1853
sVquestion_id
p1854
I672172
sVlast_activity_date
p1855
I1237780828
sVcreation_date
p1856
I1237780828
sVscore
p1857
I53
sVowner
p1858
(dp1859
Vuser_id
p1860
I56338
sVprofile_image
p1861
Vhttps://www.gravatar.com/avatar/92fb4563ddc5ceeaa8b19b60a7a172f4?s=128&d=identicon&r=PG
p1862
sVuser_type
p1863
Vregistered
p1864
sVreputation
p1865
I137369
sVlink
p1866
Vhttp://stackoverflow.com/users/56338/sth
p1867
sVaccept_rate
p1868
I44
sVdisplay_name
p1869
Vsth
p1870
ssVis_accepted
p1871
I01
sVanswer_id
p1872
I672198
sa(dp1873
Vbody
p1874
V<p>I typically use function attributes as storage for annotations. Suppose I want to write, in the style of C# (indicating that a certain method should be part of the web service interface)</p>\u000a\u000a<pre><code>class Foo(WebService):\u000a    @webmethod\u000a    def bar(self, arg1, arg2):\u000a         ...\u000a</code></pre>\u000a\u000a<p>then I can define</p>\u000a\u000a<pre><code>def webmethod(func):\u000a    func.is_webmethod = True\u000a    return func\u000a</code></pre>\u000a\u000a<p>Then, when a webservice call arrives, I look up the method, check whether the underlying function has the is_webmethod attribute (the actual value is irrelevant), and refuse the service if the method is absent or not meant to be called over the web.</p>\u000a
p1875
sVquestion_id
p1876
I338101
sVlast_activity_date
p1877
I1228327611
sVcreation_date
p1878
I1228327611
sVscore
p1879
I109
sVowner
p1880
(dp1881
Vuser_id
p1882
I33006
sVprofile_image
p1883
Vhttps://www.gravatar.com/avatar/3acb8bae5a2b5a28f6fe522a4ea9b873?s=128&d=identicon&r=PG
p1884
sVuser_type
p1885
Vregistered
p1886
sVreputation
p1887
I84348
sVlink
p1888
Vhttp://stackoverflow.com/users/33006/martin-v-l%c3%b6wis
p1889
sVaccept_rate
p1890
I88
sVdisplay_name
p1891
VMartin v. L&#246;wis
p1892
ssVis_accepted
p1893
I01
sVanswer_id
p1894
I338145
sa(dp1895
Vbody
p1896
V<pre><code>def doAppend( size=10000 ):\u000a    result = []\u000a    for i in range(size):\u000a        message= "some unique object %d" % ( i, )\u000a        result.append(message)\u000a    return result\u000a\u000adef doAllocate( size=10000 ):\u000a    result=size*[None]\u000a    for i in range(size):\u000a        message= "some unique object %d" % ( i, )\u000a        result[i]= message\u000a    return result\u000a</code></pre>\u000a\u000a<p><strong>Results</strong>. (evaluate each function 144 times and average the duration)</p>\u000a\u000a<pre><code>simple append 0.0102\u000apre-allocate  0.0098\u000a</code></pre>\u000a\u000a<p><strong>Conclusion</strong>.  It barely matters.  </p>\u000a\u000a<p>Premature optimization is the root of all evil.</p>\u000a
p1897
sVquestion_id
p1898
I311775
sVlast_activity_date
p1899
I1227391354
sVcreation_date
p1900
I1227391354
sVscore
p1901
I92
sVowner
p1902
(dp1903
Vuser_id
p1904
I10661
sVprofile_image
p1905
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1906
sVuser_type
p1907
Vregistered
p1908
sVreputation
p1909
I277525
sVlink
p1910
Vhttp://stackoverflow.com/users/10661/s-lott
p1911
sVaccept_rate
p1912
I92
sVdisplay_name
p1913
VS.Lott
p1914
ssVis_accepted
p1915
I01
sVanswer_id
p1916
I311833
sa(dp1917
Vbody
p1918
V<p>Some threads do background tasks, like sending keepalive packets, or performing periodic garbage collection, or whatever. These are only useful when the main program is running, and it's okay to kill them off once the other, non-daemon, threads have exited.</p>\u000a\u000a<p>Without daemon threads, you'd have to keep track of them, and tell them to exit, before your program can completely quit. By setting them as daemon threads, you can let them run and forget about them, and when your program quits, any daemon threads are killed automatically.</p>\u000a
p1919
sVquestion_id
p1920
I190010
sVlast_activity_date
p1921
I1223609256
sVcreation_date
p1922
I1223609256
sVscore
p1923
I256
sVowner
p1924
(dp1925
Vuser_id
p1926
I13
sVprofile_image
p1927
Vhttps://www.gravatar.com/avatar/b653b7151d55cded30759a5c35f95390?s=128&d=identicon&r=PG
p1928
sVuser_type
p1929
Vregistered
p1930
sVreputation
p1931
I160184
sVlink
p1932
Vhttp://stackoverflow.com/users/13/chris-jester-young
p1933
sVaccept_rate
p1934
I100
sVdisplay_name
p1935
VChris Jester-Young
p1936
ssVis_accepted
p1937
I01
sVanswer_id
p1938
I190017
sasVquota_max
p1939
I300
sVquota_remaining
p1940
I228
s.