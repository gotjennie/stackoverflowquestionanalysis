(dp0
Vhas_more
p1
I01
sVitems
p2
(lp3
(dp4
Vbody
p5
V<pre><code>In [5]: list(set(temp1) - set(temp2))\u000aOut[5]: ['Four', 'Three']\u000a</code></pre>\u000a\u000a<p>Beware that </p>\u000a\u000a<pre><code>In [5]: set([1, 2]) - set([2, 3])\u000aOut[5]: set([1]) \u000a</code></pre>\u000a\u000a<p>where you might expect/want it to equal <code>set([1, 3])</code>. If you do want <code>set([1, 3])</code> as your answer, you'll need to use <code>set([1, 2]).symmetric_difference(set([2, 3]))</code>.</p>\u000a
p6
sVquestion_id
p7
I3462143
sVlast_activity_date
p8
I1495194655
sVcreation_date
p9
I1281555600
sVscore
p10
I508
sVowner
p11
(dp12
Vuser_id
p13
I2611
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/3d9b2df0d1610c9418ba9e9013dbd418?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I64075
sVlink
p19
Vhttp://stackoverflow.com/users/2611/ars
p20
sVdisplay_name
p21
Vars
p22
ssVis_accepted
p23
I01
sVlast_edit_date
p24
I1495194655
sVanswer_id
p25
I3462160
sa(dp26
Vbody
p27
V<p>If you only have one reference to a string and you concatenate another string to the end, CPython now special cases this and tries to extend the string in place.</p>\u000a\u000a<p>The end result is that the operation is amortized O(n).</p>\u000a\u000a<p>e.g.</p>\u000a\u000a<pre><code>s = ""\u000afor i in range(n):\u000a    s+=str(i)\u000a</code></pre>\u000a\u000a<p>used to be O(n^2), but now it is O(n).</p>\u000a\u000a<p>From the source (bytesobject.c):</p>\u000a\u000a<pre class="lang-c prettyprint-override"><code>void\u000aPyBytes_ConcatAndDel(register PyObject **pv, register PyObject *w)\u000a{\u000a    PyBytes_Concat(pv, w);\u000a    Py_XDECREF(w);\u000a}\u000a\u000a\u000a/* The following function breaks the notion that strings are immutable:\u000a   it changes the size of a string.  We get away with this only if there\u000a   is only one module referencing the object.  You can also think of it\u000a   as creating a new string object and destroying the old one, only\u000a   more efficiently.  In any case, don't use this if the string may\u000a   already be known to some other part of the code...\u000a   Note that if there's not enough memory to resize the string, the original\u000a   string object at *pv is deallocated, *pv is set to NULL, an "out of\u000a   memory" exception is set, and -1 is returned.  Else (on success) 0 is\u000a   returned, and the value in *pv may or may not be the same as on input.\u000a   As always, an extra byte is allocated for a trailing \u005c0 byte (newsize\u000a   does *not* include that), and a trailing \u005c0 byte is stored.\u000a*/\u000a\u000aint\u000a_PyBytes_Resize(PyObject **pv, Py_ssize_t newsize)\u000a{\u000a    register PyObject *v;\u000a    register PyBytesObject *sv;\u000a    v = *pv;\u000a    if (!PyBytes_Check(v) || Py_REFCNT(v) != 1 || newsize &lt; 0) {\u000a        *pv = 0;\u000a        Py_DECREF(v);\u000a        PyErr_BadInternalCall();\u000a        return -1;\u000a    }\u000a    /* XXX UNREF/NEWREF interface should be more symmetrical */\u000a    _Py_DEC_REFTOTAL;\u000a    _Py_ForgetReference(v);\u000a    *pv = (PyObject *)\u000a        PyObject_REALLOC((char *)v, PyBytesObject_SIZE + newsize);\u000a    if (*pv == NULL) {\u000a        PyObject_Del(v);\u000a        PyErr_NoMemory();\u000a        return -1;\u000a    }\u000a    _Py_NewReference(*pv);\u000a    sv = (PyBytesObject *) *pv;\u000a    Py_SIZE(sv) = newsize;\u000a    sv-&gt;ob_sval[newsize] = '\u005c0';\u000a    sv-&gt;ob_shash = -1;          /* invalidate cached hash value */\u000a    return 0;\u000a}\u000a</code></pre>\u000a\u000a<p>It's easy enough to verify empirically.</p>\u000a\u000a<pre>\u000a$ python -m timeit -s"s=''" "for i in xrange(10):s+='a'"\u000a1000000 loops, best of 3: 1.85 usec per loop\u000a$ python -m timeit -s"s=''" "for i in xrange(100):s+='a'"\u000a10000 loops, best of 3: 16.8 usec per loop\u000a$ python -m timeit -s"s=''" "for i in xrange(1000):s+='a'"\u000a10000 loops, best of 3: 158 usec per loop\u000a$ python -m timeit -s"s=''" "for i in xrange(10000):s+='a'"\u000a1000 loops, best of 3: 1.71 msec per loop\u000a$ python -m timeit -s"s=''" "for i in xrange(100000):s+='a'"\u000a10 loops, best of 3: 14.6 msec per loop\u000a$ python -m timeit -s"s=''" "for i in xrange(1000000):s+='a'"\u000a10 loops, best of 3: 173 msec per loop\u000a</pre>\u000a\u000a<p><strong>It's important</strong> however to note that this optimisation isn't part of the Python spec. It's only in the cPython implementation as far as I know. The same empirical testing on pypy or jython for example might show the older O(n**2) performance .</p>\u000a\u000a<pre>\u000a$ pypy -m timeit -s"s=''" "for i in xrange(10):s+='a'"\u000a10000 loops, best of 3: 90.8 usec per loop\u000a$ pypy -m timeit -s"s=''" "for i in xrange(100):s+='a'"\u000a1000 loops, best of 3: 896 usec per loop\u000a$ pypy -m timeit -s"s=''" "for i in xrange(1000):s+='a'"\u000a100 loops, best of 3: 9.03 msec per loop\u000a$ pypy -m timeit -s"s=''" "for i in xrange(10000):s+='a'"\u000a10 loops, best of 3: 89.5 msec per loop\u000a</pre>\u000a\u000a<p>So far so good, but then,</p>\u000a\u000a<pre>\u000a$ pypy -m timeit -s"s=''" "for i in xrange(100000):s+='a'"\u000a10 loops, best of 3: 12.8 sec per loop\u000a</pre>\u000a\u000a<p>ouch even worse than quadratic. So pypy is doing something that works well with short strings, but performs poorly for larger strings.</p>\u000a
p28
sVquestion_id
p29
I4435169
sVlast_activity_date
p30
I1495155650
sVcreation_date
p31
I1292299312
sVscore
p32
I358
sVowner
p33
(dp34
Vuser_id
p35
I174728
sVprofile_image
p36
Vhttps://i.stack.imgur.com/eRO75.jpg?s=128&g=1
p37
sVuser_type
p38
Vregistered
p39
sVreputation
p40
I166935
sVlink
p41
Vhttp://stackoverflow.com/users/174728/john-la-rooy
p42
sVaccept_rate
p43
I100
sVdisplay_name
p44
VJohn La Rooy
p45
ssVis_accepted
p46
I01
sVlast_edit_date
p47
I1495155650
sVanswer_id
p48
I4435752
sa(dp49
Vbody
p50
V<p>You can also use the <a href="http://en.wikipedia.org/wiki/NumPy" rel="nofollow noreferrer">NumPy</a> library (which isn't part of standard library but is relatively easy to obtain) which has the <code>arange</code> function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import numpy as np\u000a&gt;&gt;&gt; np.arange(0.1, 1.0, 0.1)\u000aarray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\u000a</code></pre>\u000a\u000a<p>as well as the <code>linspace</code> function which lets you have control over what happens at the endpoint (non-trivial for floating point numbers when things won't always divide into the correct number of "slices"):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; np.linspace(0,1,11)\u000aarray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])\u000a&gt;&gt;&gt; np.linspace(0,1,10,endpoint=False)\u000aarray([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\u000a</code></pre>\u000a
p51
sVquestion_id
p52
I477486
sVlast_activity_date
p53
I1494512788
sVcreation_date
p54
I1232886368
sVscore
p55
I421
sVowner
p56
(dp57
Vuser_id
p58
I12266
sVprofile_image
p59
Vhttps://www.gravatar.com/avatar/6a2a454191fa75d4114ed05836a0b924?s=128&d=identicon&r=PG
p60
sVuser_type
p61
Vregistered
p62
sVreputation
p63
I14319
sVlink
p64
Vhttp://stackoverflow.com/users/12266/andrew-jaffe
p65
sVaccept_rate
p66
I43
sVdisplay_name
p67
VAndrew Jaffe
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1494512788
sVanswer_id
p71
I477635
sa(dp72
Vbody
p73
V<p><a href="http://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/4025909#4025909"><code>fcntl</code></a>, <a href="http://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/375511#375511"><code>select</code></a>, <a href="http://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/437888#437888"><code>asyncproc</code></a> won't help in this case.</p>\u000a\u000a<p>A reliable way to read a stream without blocking regardless of operating system is to use <a href="https://docs.python.org/3/library/queue.html#queue.Queue.get_nowait" rel="nofollow noreferrer"><code>Queue.get_nowait()</code></a>:</p>\u000a\u000a<pre><code>import sys\u000afrom subprocess import PIPE, Popen\u000afrom threading  import Thread\u000a\u000atry:\u000a    from Queue import Queue, Empty\u000aexcept ImportError:\u000a    from queue import Queue, Empty  # python 3.x\u000a\u000aON_POSIX = 'posix' in sys.builtin_module_names\u000a\u000adef enqueue_output(out, queue):\u000a    for line in iter(out.readline, b''):\u000a        queue.put(line)\u000a    out.close()\u000a\u000ap = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)\u000aq = Queue()\u000at = Thread(target=enqueue_output, args=(p.stdout, q))\u000at.daemon = True # thread dies with the program\u000at.start()\u000a\u000a# ... do other things here\u000a\u000a# read line without blocking\u000atry:  line = q.get_nowait() # or q.get(timeout=.1)\u000aexcept Empty:\u000a    print('no output yet')\u000aelse: # got line\u000a    # ... do something with line\u000a</code></pre>\u000a
p74
sVquestion_id
p75
I375427
sVlast_activity_date
p76
I1494311942
sVcreation_date
p77
I1296810878
sVscore
p78
I294
sVowner
p79
(dp80
Vuser_id
p81
I4279
sVprofile_image
p82
Vhttps://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I202958
sVlink
p87
Vhttp://stackoverflow.com/users/4279/j-f-sebastian
p88
sVaccept_rate
p89
I94
sVdisplay_name
p90
VJ.F. Sebastian
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1494311942
sVanswer_id
p94
I4896288
sa(dp95
Vbody
p96
V<p>There are a bunch of ways to do it, but the most straightforward is to simply \u000ause the <a href="https://docs.python.org/2/library/pdb.html" rel="nofollow noreferrer">Python debugger</a>. Just add following line in to a Django view function:</p>\u000a\u000a<pre><code>import pdb; pdb.set_trace()\u000a</code></pre>\u000a\u000a<p>If you try to load that page in your browser, the browser will hang and you get a prompt to carry on debugging on actual executing code.</p>\u000a\u000a<p>However there are other options suggested by others (I won't recommend them):</p>\u000a\u000a<pre><code>* return HttpResponse({variable to inspect})\u000a\u000a* print {variable to inspect}\u000a\u000a* raise Exception({variable to inspect})\u000a</code></pre>\u000a\u000a<p>But the Python Debugger (pdb) is highly recommended for all types of Python code. If you are already into pdb, you'd also want to have a look at <a href="http://pypi.python.org/pypi/ipdb/" rel="nofollow noreferrer"><strong>IPDB</strong></a> that uses <a href="http://ipython.org/" rel="nofollow noreferrer"><strong>ipython</strong></a> for debugging. Happy Coding.</p>\u000a\u000a<p>A useful reference provided by <a href="http://stackoverflow.com/users/884640/seafangs">Seafangs</a> : <a href="https://mike.tig.as/blog/2010/09/14/pdb/" rel="nofollow noreferrer">Using the Python debugger in Django</a></p>\u000a
p97
sVquestion_id
p98
I1118183
sVlast_activity_date
p99
I1494296480
sVcreation_date
p100
I1247473764
sVscore
p101
I386
sVowner
p102
(dp103
Vuser_id
p104
I63841
sVprofile_image
p105
Vhttps://www.gravatar.com/avatar/bd62b73ef97949be699e61da1d99d4a0?s=128&d=identicon&r=PG
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I18960
sVlink
p110
Vhttp://stackoverflow.com/users/63841/simplyharsh
p111
sVaccept_rate
p112
I100
sVdisplay_name
p113
Vsimplyharsh
p114
ssVis_accepted
p115
I01
sVlast_edit_date
p116
I1494296480
sVanswer_id
p117
I1118271
sa(dp118
Vbody
p119
V<p>Starting in Python 2.6 you can use the built-in <a href="https://docs.python.org/library/ast.html#ast.literal_eval" rel="noreferrer"><code>ast.literal_eval</code></a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import ast\u000a&gt;&gt;&gt; ast.literal_eval("{'muffin' : 'lolz', 'foo' : 'kitty'}")\u000a{'muffin': 'lolz', 'foo': 'kitty'}\u000a</code></pre>\u000a\u000a<p>This is safer than using <code>eval</code>.  As its own docs say:</p>\u000a\u000a<pre>\u000a>>> help(ast.literal_eval)\u000aHelp on function literal_eval in module ast:\u000a\u000aliteral_eval(node_or_string)\u000a    Safely evaluate an expression node or a string containing a Python\u000a    expression.  The string or node provided may only consist of the following\u000a    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,\u000a    and None.\u000a</pre>\u000a\u000a<p>For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; eval("shutil.rmtree('mongo')")\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "&lt;string&gt;", line 1, in &lt;module&gt;\u000a  File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 208, in rmtree\u000a    onerror(os.listdir, path, sys.exc_info())\u000a  File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 206, in rmtree\u000a    names = os.listdir(path)\u000aOSError: [Errno 2] No such file or directory: 'mongo'\u000a&gt;&gt;&gt; ast.literal_eval("shutil.rmtree('mongo')")\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 68, in literal_eval\u000a    return _convert(node_or_string)\u000a  File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 67, in _convert\u000a    raise ValueError('malformed string')\u000aValueError: malformed string\u000a</code></pre>\u000a
p120
sVquestion_id
p121
I988228
sVlast_activity_date
p122
I1493312072
sVcreation_date
p123
I1244831445
sVscore
p124
I644
sVowner
p125
(dp126
Vuser_id
p127
I68127
sVprofile_image
p128
Vhttps://i.stack.imgur.com/XSuO8.jpg?s=128&g=1
p129
sVuser_type
p130
Vregistered
p131
sVreputation
p132
I15186
sVlink
p133
Vhttp://stackoverflow.com/users/68127/jacob-gabrielson
p134
sVaccept_rate
p135
I82
sVdisplay_name
p136
VJacob Gabrielson
p137
ssVis_accepted
p138
I01
sVlast_edit_date
p139
I1493312072
sVanswer_id
p140
I988251
sa(dp141
Vbody
p142
V<p>The <code>threading</code> module uses threads, the <code>multiprocessing</code> module uses processes. The difference is that threads run in the same memory space, while processes have separate memory. This makes it a bit harder to share objects between processes with multiprocessing. Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. This is what the global interpreter lock is for.</p>\u000a\u000a<p>Spawning processes is a bit slower than spawning threads. Once they are running, there is not much difference.</p>\u000a
p143
sVquestion_id
p144
I3044580
sVlast_activity_date
p145
I1492456685
sVcreation_date
p146
I1276600765
sVscore
p147
I286
sVowner
p148
(dp149
Vuser_id
p150
I182971
sVprofile_image
p151
Vhttps://www.gravatar.com/avatar/bd5fd2236e22eac8e2cbc8eb2c81ea52?s=128&d=identicon&r=PG
p152
sVuser_type
p153
Vregistered
p154
sVreputation
p155
I49349
sVlink
p156
Vhttp://stackoverflow.com/users/182971/sjoerd
p157
sVaccept_rate
p158
I77
sVdisplay_name
p159
VSjoerd
p160
ssVis_accepted
p161
I01
sVlast_edit_date
p162
I1492456685
sVanswer_id
p163
I3044626
sa(dp164
Vbody
p165
V<p>You can totally do that, it's just an ordering issue:</p>\u000a\u000a<pre><code>[ unicode(x.strip()) if x is not None else '' for x in row ]\u000a</code></pre>\u000a\u000a<p>Note that this actually uses a different language construct, a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer">conditional expression</a>, which itself is not part of the <a href="https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="noreferrer">comprehension syntax</a>, while the <code>if</code> after the <code>for\u2026in</code> is part of list comprehensions and used to <em>filter</em> elements from the source iterable.</p>\u000a\u000a<p>Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="noreferrer">ternary operator <code>?:</code> that exists in other languages</a>. For example:</p>\u000a\u000a<pre><code>value = 123\u000aprint(value, 'is', 'even' if value % 2 == 0 else 'odd')\u000a</code></pre>\u000a
p166
sVquestion_id
p167
I4260280
sVlast_activity_date
p168
I1491323902
sVcreation_date
p169
I1290542357
sVscore
p170
I574
sVowner
p171
(dp172
Vuser_id
p173
I216074
sVprofile_image
p174
Vhttps://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG
p175
sVuser_type
p176
Vregistered
p177
sVreputation
p178
I145906
sVlink
p179
Vhttp://stackoverflow.com/users/216074/poke
p180
sVaccept_rate
p181
I91
sVdisplay_name
p182
Vpoke
p183
ssVis_accepted
p184
I01
sVlast_edit_date
p185
I1491323902
sVanswer_id
p186
I4260304
sa(dp187
Vbody
p188
V<p><a href="http://docs.python.org/tutorial/datastructures.html" rel="noreferrer">Python List</a></p>\u000a\u000a<p><strong>list.pop(index)</strong></p>\u000a\u000a<pre><code>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd']\u000a&gt;&gt;&gt; l.pop(0)\u000a'a'\u000a&gt;&gt;&gt; l\u000a['b', 'c', 'd']\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a\u000a<p><strong>del list[index]</strong></p>\u000a\u000a<pre><code>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd']\u000a&gt;&gt;&gt; del l[0]\u000a&gt;&gt;&gt; l\u000a['b', 'c', 'd']\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a\u000a<p>These both modify your original list.</p>\u000a\u000a<p>Others have suggested using slicing:</p>\u000a\u000a<ul>\u000a<li>Copies the list</li>\u000a<li>Can return a subset</li>\u000a</ul>\u000a\u000a<p>Also, if you are performing many pop(0), you should look at <a href="http://docs.python.org/library/collections.html#collections.deque" rel="noreferrer">collections.deque</a></p>\u000a\u000a<pre><code>from collections import deque\u000a&gt;&gt;&gt; l = deque(['a', 'b', 'c', 'd'])\u000a&gt;&gt;&gt; l.popleft()\u000a'a'\u000a&gt;&gt;&gt; l\u000adeque(['b', 'c', 'd'])\u000a</code></pre>\u000a\u000a<ul>\u000a<li>Provides higher performance popping from left end of the list</li>\u000a</ul>\u000a
p189
sVquestion_id
p190
I4426663
sVlast_activity_date
p191
I1488390443
sVcreation_date
p192
I1292226358
sVscore
p193
I557
sVowner
p194
(dp195
Vuser_id
p196
I335627
sVprofile_image
p197
Vhttps://www.gravatar.com/avatar/a5ae92171e80ebdd258752e6e42687c9?s=128&d=identicon&r=PG
p198
sVuser_type
p199
Vregistered
p200
sVreputation
p201
I11250
sVlink
p202
Vhttp://stackoverflow.com/users/335627/kevpie
p203
sVdisplay_name
p204
Vkevpie
p205
ssVis_accepted
p206
I01
sVlast_edit_date
p207
I1488390443
sVanswer_id
p208
I4426727
sa(dp209
Vbody
p210
V<p>That's more specifically a <a href="https://en.wikipedia.org/wiki/%3F:#Python" rel="noreferrer">ternary operator</a> expression than an if-then, here's the python syntax</p>\u000a\u000a<pre><code>value_when_true if condition else value_when_false\u000a</code></pre>\u000a\u000a<p><strong>Better Example:</strong> (thanks <a href="http://stackoverflow.com/users/253254/joshua-burns">Mr. Burns</a>)</p>\u000a\u000a<p><code>'Yes' if fruit == 'Apple' else 'No'</code> </p>\u000a\u000a<p><strong>Now with assignment and contrast with if syntax</strong></p>\u000a\u000a<pre><code>fruit = 'Apple'\u000aisApple = True if fruit == 'Apple' else False\u000a</code></pre>\u000a\u000a<p><strong>vs</strong></p>\u000a\u000a<pre><code>fruit = 'Apple'\u000aisApple = False\u000aif fruit == 'Apple' : isApple = True\u000a</code></pre>\u000a
p211
sVquestion_id
p212
I2802726
sVlast_activity_date
p213
I1487130036
sVcreation_date
p214
I1273496417
sVscore
p215
I684
sVowner
p216
(dp217
Vuser_id
p218
I23114
sVprofile_image
p219
Vhttps://www.gravatar.com/avatar/4f6035a1837e22c66099ae91968863f1?s=128&d=identicon&r=PG
p220
sVuser_type
p221
Vregistered
p222
sVreputation
p223
I29459
sVlink
p224
Vhttp://stackoverflow.com/users/23114/cmsjr
p225
sVaccept_rate
p226
I90
sVdisplay_name
p227
Vcmsjr
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1487130036
sVanswer_id
p231
I2802748
sa(dp232
Vbody
p233
V<p>You're technically trying to index an uninitialized array. You have to first initialize the outer list with lists before adding items; Python calls this\u000a"list comprehension".</p>\u000a\u000a<pre><code># Creates a list containing 5 lists, each of 8 items, all set to 0\u000aw, h = 8, 5;\u000aMatrix = [[0 for x in range(w)] for y in range(h)] \u000a</code></pre>\u000a\u000a<h1>You can now add items to the list:</h1>\u000a\u000a<pre><code>Matrix[0][0] = 1\u000aMatrix[6][0] = 3 # error! range... \u000aMatrix[0][6] = 3 # valid\u000a\u000aprint Matrix[0][0] # prints 1\u000ax, y = 0, 6 \u000aprint Matrix[x][y] # prints 3; be careful with indexing! \u000a</code></pre>\u000a\u000a<p>Although you can name them as you wish, I look at it this way to avoid some confusion that could arise with the indexing, if you use "x" for both the inner and outer lists, and want a non-square Matrix.</p>\u000a
p234
sVquestion_id
p235
I6667201
sVlast_activity_date
p236
I1486388641
sVcreation_date
p237
I1310486376
sVscore
p238
I508
sVowner
p239
(dp240
Vuser_id
p241
I771329
sVprofile_image
p242
Vhttps://www.gravatar.com/avatar/b9116eb1048f6fe7bc748f5164b80149?s=128&d=identicon&r=PG
p243
sVuser_type
p244
Vregistered
p245
sVreputation
p246
I9912
sVlink
p247
Vhttp://stackoverflow.com/users/771329/manny-d
p248
sVdisplay_name
p249
VManny D
p250
ssVis_accepted
p251
I01
sVlast_edit_date
p252
I1486388641
sVanswer_id
p253
I6667288
sa(dp254
Vbody
p255
V<p>It is strange how much beauty varies for different people. I find the list comprehension much clearer than the ugly <code>filter</code>+<code>lambda</code>, but use whichever you find easier. However, do stop giving your variables names already used for builtins, that's just ugly, and not open for discussion.</p>\u000a\u000a<p>There are two things that may slow down your use of <code>filter</code>.</p>\u000a\u000a<p>The first is the function call overhead: as soon as you use a Python function (whether created by <code>def</code> or <code>lambda</code>) it is likely that filter will be slower than the list comprehension. It almost certainly is not enough to matter, and you shouldn't think much about performance until you've timed your code and found it to be a bottleneck, but the difference will be there.</p>\u000a\u000a<p>The other overhead that might apply is that the lambda is being forced to access a scoped variable (<code>value</code>). That is slower than accessing a local variable and in Python 2.x the list comprehension only accesses local variables. If you are using Python 3.x the list comprehension runs in a separate function so it will also be accessing <code>value</code> through a closure and this difference won't apply.</p>\u000a\u000a<p>The other option to consider is to use a generator instead of a list comprehension:</p>\u000a\u000a<pre><code>def filterbyvalue(seq, value):\u000a   for el in seq:\u000a       if el.attribute==value: yield el\u000a</code></pre>\u000a\u000a<p>Then in your main code (which is where readability really matters) you've replaced both list comprehension and filter with a hopefully meaningful function name.</p>\u000a
p256
sVquestion_id
p257
I3013449
sVlast_activity_date
p258
I1483659982
sVcreation_date
p259
I1276167169
sVscore
p260
I279
sVowner
p261
(dp262
Vuser_id
p263
I107660
sVprofile_image
p264
Vhttps://www.gravatar.com/avatar/0167bade38130f13a5fc468c10388d9d?s=128&d=identicon&r=PG
p265
sVuser_type
p266
Vregistered
p267
sVreputation
p268
I46091
sVlink
p269
Vhttp://stackoverflow.com/users/107660/duncan
p270
sVdisplay_name
p271
VDuncan
p272
ssVis_accepted
p273
I01
sVlast_edit_date
p274
I1483659982
sVanswer_id
p275
I3013686
sa(dp276
Vbody
p277
V<p>Use <a href="http://docs.python.org/2/library/argparse.html#nargs" rel="noreferrer"><code>nargs='?'</code></a> (or <code>nargs='*'</code>  if you will need more than one dir)</p>\u000a\u000a<pre><code>parser.add_argument('dir', nargs='?', default=os.getcwd())\u000a</code></pre>\u000a\u000a<p>extended example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import os, argparse\u000a&gt;&gt;&gt; parser = argparse.ArgumentParser()\u000a&gt;&gt;&gt; parser.add_argument('-v', action='store_true')\u000a_StoreTrueAction(option_strings=['-v'], dest='v', nargs=0, const=True, default=False, type=None, choices=None, help=None, metavar=None)\u000a&gt;&gt;&gt; parser.add_argument('dir', nargs='?', default=os.getcwd())\u000a_StoreAction(option_strings=[], dest='dir', nargs='?', const=None, default='/home/vinay', type=None, choices=None, help=None, metavar=None)\u000a&gt;&gt;&gt; parser.parse_args('somedir -v'.split())\u000aNamespace(dir='somedir', v=True)\u000a&gt;&gt;&gt; parser.parse_args('-v'.split())\u000aNamespace(dir='/home/vinay', v=True)\u000a&gt;&gt;&gt; parser.parse_args(''.split())\u000aNamespace(dir='/home/vinay', v=False)\u000a&gt;&gt;&gt; parser.parse_args(['somedir'])\u000aNamespace(dir='somedir', v=False)\u000a&gt;&gt;&gt; parser.parse_args('somedir -h -v'.split())\u000ausage: [-h] [-v] [dir]\u000a\u000apositional arguments:\u000a  dir\u000a\u000aoptional arguments:\u000a  -h, --help  show this help message and exit\u000a  -v\u000a</code></pre>\u000a
p278
sVquestion_id
p279
I4480075
sVlast_activity_date
p280
I1483345805
sVcreation_date
p281
I1292706947
sVscore
p282
I499
sVowner
p283
(dp284
Vuser_id
p285
I118903
sVprofile_image
p286
Vhttps://www.gravatar.com/avatar/7094252405dd3dd5f798b132834d39b2?s=128&d=identicon&r=PG
p287
sVuser_type
p288
Vregistered
p289
sVreputation
p290
I58493
sVlink
p291
Vhttp://stackoverflow.com/users/118903/vinay-sajip
p292
sVdisplay_name
p293
VVinay Sajip
p294
ssVis_accepted
p295
I01
sVlast_edit_date
p296
I1483345805
sVanswer_id
p297
I4480202
sa(dp298
Vbody
p299
V<p><strong>Update:</strong> In Python 2.6 and onwards, consider whether the <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="noreferrer"><code>namedtuple</code></a> data structure suits your needs:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from collections import namedtuple\u000a&gt;&gt;&gt; MyStruct = namedtuple('MyStruct', 'a b d')\u000a&gt;&gt;&gt; s = MyStruct(a=1, b={'c': 2}, d=['hi'])\u000a&gt;&gt;&gt; s\u000aMyStruct(a=1, b={'c': 2}, d=['hi'])\u000a&gt;&gt;&gt; s.a\u000a1\u000a&gt;&gt;&gt; s.b\u000a{'c': 2}\u000a&gt;&gt;&gt; s.c\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aAttributeError: 'MyStruct' object has no attribute 'c'\u000a&gt;&gt;&gt; s.d\u000a['hi']\u000a</code></pre>\u000a\u000a<p>The alternative (original answer contents) is:</p>\u000a\u000a<pre><code>class Struct:\u000a    def __init__(self, **entries):\u000a        self.__dict__.update(entries)\u000a</code></pre>\u000a\u000a<p>Then, you can use:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; args = {'a': 1, 'b': 2}\u000a&gt;&gt;&gt; s = Struct(**args)\u000a&gt;&gt;&gt; s\u000a&lt;__main__.Struct instance at 0x01D6A738&gt;\u000a&gt;&gt;&gt; s.a\u000a1\u000a&gt;&gt;&gt; s.b\u000a2\u000a</code></pre>\u000a
p300
sVquestion_id
p301
I1305532
sVlast_activity_date
p302
I1480305146
sVcreation_date
p303
I1250769339
sVscore
p304
I520
sVowner
p305
(dp306
Vuser_id
p307
I8206
sVprofile_image
p308
Vhttps://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?s=128&d=identicon&r=PG
p309
sVuser_type
p310
Vregistered
p311
sVreputation
p312
I132984
sVlink
p313
Vhttp://stackoverflow.com/users/8206/eli-bendersky
p314
sVaccept_rate
p315
I94
sVdisplay_name
p316
VEli Bendersky
p317
ssVis_accepted
p318
I01
sVlast_edit_date
p319
I1480305146
sVanswer_id
p320
I1305663
sa(dp321
Vbody
p322
V<p>If you want to remove leading and ending spaces, use <a href="http://docs.python.org/2/library/stdtypes.html#str.strip" rel="noreferrer"><code>str.strip()</code></a>: </p>\u000a\u000a<pre><code>sentence = ' hello  apple'\u000asentence.strip()\u000a&gt;&gt;&gt; 'hello  apple'\u000a</code></pre>\u000a\u000a<p>If you want to remove all spaces, use <a href="http://docs.python.org/2/library/stdtypes.html#str.replace" rel="noreferrer"><code>str.replace()</code></a>:</p>\u000a\u000a<pre><code>sentence = ' hello  apple'\u000asentence.replace(" ", "")\u000a&gt;&gt;&gt; 'helloapple'\u000a</code></pre>\u000a\u000a<p>If you want to remove duplicated spaces, use <a href="http://docs.python.org/2/library/stdtypes.html#str.split" rel="noreferrer"><code>str.split()</code></a>:</p>\u000a\u000a<pre><code>sentence = ' hello  apple'\u000a" ".join(sentence.split())\u000a&gt;&gt;&gt; 'hello apple'\u000a</code></pre>\u000a
p323
sVquestion_id
p324
I8270092
sVlast_activity_date
p325
I1479904351
sVcreation_date
p326
I1322229390
sVscore
p327
I758
sVowner
p328
(dp329
Vuser_id
p330
I718618
sVprofile_image
p331
Vhttps://www.gravatar.com/avatar/9878e99dc2bbd256050b7dc4ffea820b?s=128&d=identicon&r=PG
p332
sVuser_type
p333
Vregistered
p334
sVreputation
p335
I40150
sVlink
p336
Vhttp://stackoverflow.com/users/718618/c%c3%a9dric-julien
p337
sVdisplay_name
p338
VC&#233;dric Julien
p339
ssVis_accepted
p340
I01
sVlast_edit_date
p341
I1479904351
sVanswer_id
p342
I8270146
sa(dp343
Vbody
p344
V<blockquote>\u000a  <h1>In Python, what is the purpose of <code>__slots__</code> and what are the cases one should avoid this?</h1>\u000a</blockquote>\u000a\u000a<h2>TLDR:</h2>\u000a\u000a<p>The special attribute <code>__slots__</code> allows you to explicitly state in your code which instance attributes you expect your object instances to have, with the expected results:</p>\u000a\u000a<ol>\u000a<li><strong>faster</strong> attribute access.</li>\u000a<li>potential <strong>space savings</strong> in memory. </li>\u000a</ol>\u000a\u000a<p>And the biggest caveat for multiple inheritance - multiple "parent classes with nonempty slots" cannot be combined. (Solution? Factor out all but one (or just all) parents' abstraction which they respectively and you collectively will inherit from - giving the abstraction(s) empty slots.)</p>\u000a\u000a<h3>Requirements:</h3>\u000a\u000a<ul>\u000a<li><p>To have attributes named in <code>__slots__</code> to actually be stored in slots instead of a <code>__dict__</code>, a class must inherit from <code>object</code>.</p></li>\u000a<li><p>To prevent the creation of a <code>__dict__</code>, you must inherit from <code>object</code> and all classes in the inheritance must declare <code>__slots__</code> and none of them can have a <code>'__dict__'</code> entry - and they cannot use multiple inheritance. </p></li>\u000a</ul>\u000a\u000a<p>There are a lot of details if you wish to keep reading.</p>\u000a\u000a<h2>Why use <code>__slots__</code>: Faster attribute access.</h2>\u000a\u000a<p>The creator of Python, Guido van Rossum, <a href="http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html">states</a> that he actually created <code>__slots__</code> for faster attribute access.  </p>\u000a\u000a<p>It is trivial to demonstrate measurably significant faster access:</p>\u000a\u000a<pre><code>import timeit\u000a\u000aclass Foo(object): __slots__ = 'foo',\u000a\u000aclass Bar(object): pass\u000a\u000aslotted = Foo()\u000anot_slotted = Bar()\u000a\u000adef get_set_delete_fn(obj):\u000a    def get_set_delete():\u000a        obj.foo = 'foo'\u000a        obj.foo\u000a        del obj.foo\u000a    return get_set_delete\u000a</code></pre>\u000a\u000a<p>and</p>\u000a\u000a<pre><code>&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(slotted)))\u000a0.2846834529991611\u000a&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(not_slotted)))\u000a0.3664822799983085\u000a</code></pre>\u000a\u000a<p>The slotted access is almost 30% faster in Python 3.5 on Ubuntu.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 0.3664822799983085 / 0.2846834529991611\u000a1.2873325658284342\u000a</code></pre>\u000a\u000a<p>In Python 2 on Windows I have measured it about 15% faster.</p>\u000a\u000a<h2>Why use <code>__slots__</code>:  Memory Savings</h2>\u000a\u000a<p>Another purpose of <code>__slots__</code> is to reduce the space in memory that each object instance takes up.  </p>\u000a\u000a<p><a href="https://docs.python.org/2/reference/datamodel.html#slots">The documentation clearly states the reasons behind this</a>: </p>\u000a\u000a<blockquote>\u000a  <p>By default, instances of both old and new-style classes have a dictionary for attribute storage. This wastes space for objects having very few instance variables. The space consumption can become acute when creating large numbers of instances.</p>\u000a  \u000a  <p>The default can be overridden by defining <code>__slots__</code> in a new-style class definition. The <code>__slots__</code> declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because <code>__dict__</code> is not created for each instance.</p>\u000a</blockquote>\u000a\u000a<p><a href="http://docs.sqlalchemy.org/en/rel_1_0/changelog/migration_10.html#significant-improvements-in-structural-memory-use">SQLAlchemy attributes</a> a lot of memory savings with <code>__slots__</code>.</p>\u000a\u000a<p>To verify this, using the Anaconda distribution of Python 2.7 on Ubuntu Linux, with <code>guppy.hpy</code> (aka heapy) and <code>sys.getsizeof</code>, the size of a class instance without <code>__slots__</code> declared, and nothing else, is 64 bytes. That does <em>not</em> include the <code>__dict__</code>. Thank you Python for lazy evaluation again, the <code>__dict__</code> is apparently not called into existence until it is referenced, but classes without data are usually useless. When called into existence, the <code>__dict__</code> attribute is a minimum of 280 bytes additionally. </p>\u000a\u000a<p>In contrast, a class instance with <code>__slots__</code> declared to be <code>()</code> (no data) is only 16 bytes, and 56 total bytes with one item in slots, 64 with two.</p>\u000a\u000a<p>I tested when my particular implementation of dicts size up by enumerating alphabet characters into a dict, and on the sixth item it climbs to 1048, 22 to 3352, then 85 to 12568 (rather impractical to put that many attributes on a single class, probably violating the single responsibility principle there.)</p>\u000a\u000a<pre><code>attrs  __slots__    no slots declared + __dict__\u000anone       16        64 (+ 280 if __dict__ referenced)\u000aone        56        64 + 280\u000atwo        64        64 + 280\u000asix        96        64 + 1048\u000a22        224        64 + 3352\u000a</code></pre>\u000a\u000a<p>So we see how nicely <code>__slots__</code> scale for instances to save us memory, and that is the reason you would want to use <code>__slots__</code>. </p>\u000a\u000a<h2>Demonstration of <code>__slots__</code>:</h2>\u000a\u000a<p>To prevent the creation of a <code>__dict__</code>, you must subclass <code>object</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Base(object): __slots__ = ()\u000a&gt;&gt;&gt; b = Base()\u000a&gt;&gt;&gt; b.a = 'a'\u000aTraceback (most recent call last):\u000a  File "&lt;pyshell#38&gt;", line 1, in &lt;module&gt;\u000a    b.a = 'a'\u000aAttributeError: 'Base' object has no attribute 'a'\u000a</code></pre>\u000a\u000a<p>Or another class that defines <code>__slots__</code></p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Child(Base): __slots__ = ('a',)\u000a&gt;&gt;&gt; c = Child()\u000a&gt;&gt;&gt; c.a = 'a'\u000a&gt;&gt;&gt; c.b = 'b'\u000aTraceback (most recent call last):\u000a  File "&lt;pyshell#42&gt;", line 1, in &lt;module&gt;\u000a    c.b = 'b'\u000aAttributeError: 'Child' object has no attribute 'b'\u000a</code></pre>\u000a\u000a<p>To allow <code>__dict__</code> creation while subclassing slotted objects, just add <code>'__dict__'</code> to the <code>__slots__</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class SlottedWithDict(Child): __slots__ = ('__dict__', 'b')\u000a&gt;&gt;&gt; swd = SlottedWithDict()\u000a&gt;&gt;&gt; swd.a = 'a'\u000a&gt;&gt;&gt; swd.b = 'b'\u000a&gt;&gt;&gt; swd.c = 'c'\u000a&gt;&gt;&gt; swd.__dict__\u000a{'c': 'c'}\u000a</code></pre>\u000a\u000a<p>Or you don't even need to declare <code>__slots__</code> in your subclass, and you will still use slots from the parents, but not restrict the creation of a <code>__dict__</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class NoSlots(Child): pass\u000a&gt;&gt;&gt; ns = NoSlots()\u000a&gt;&gt;&gt; ns.a = 'a'\u000a&gt;&gt;&gt; ns.b = 'b'\u000a&gt;&gt;&gt; ns.__dict__\u000a{'b': 'b'}\u000a</code></pre>\u000a\u000a<p>However, <code>__slots__</code> may cause problems for multiple inheritance:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class BaseA(object): __slots__ = ('a',)\u000a&gt;&gt;&gt; class BaseB(object): __slots__ = ('b',)\u000a&gt;&gt;&gt; class Child(BaseA, BaseB): __slots__ = ()\u000aTraceback (most recent call last):\u000a  File "&lt;pyshell#68&gt;", line 1, in &lt;module&gt;\u000a    class Child(BaseA, BaseB): __slots__ = ()\u000aTypeError: Error when calling the metaclass bases\u000a    multiple bases have instance lay-out conflict\u000a</code></pre>\u000a\u000a<p>If you run into this problem, just remove <code>__slots__</code>, and put it back in where you have a lot of instances.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class BaseA(object): __slots__ = ()\u000a&gt;&gt;&gt; class BaseB(object): __slots__ = ()\u000a&gt;&gt;&gt; class Child(BaseA, BaseB): __slots__ = ('a', 'b')\u000a&gt;&gt;&gt; c = Child\u000a&gt;&gt;&gt; c.a = 'a'\u000a&gt;&gt;&gt; c.b = 'b'\u000a&gt;&gt;&gt; c.c = 'c'\u000a&gt;&gt;&gt; c.__dict__\u000a&lt;dictproxy object at 0x10C944B0&gt;\u000a&gt;&gt;&gt; c.__dict__['c']\u000a'c'\u000a</code></pre>\u000a\u000a<h3>Add <code>'__dict__'</code> to <code>__slots__</code> to get dynamic assignment:</h3>\u000a\u000a<pre><code>class Foo(object):\u000a    __slots__ = 'bar', 'baz', '__dict__'\u000a</code></pre>\u000a\u000a<p>and now:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; foo = Foo()\u000a&gt;&gt;&gt; foo.boink = 'boink'\u000a</code></pre>\u000a\u000a<p>So with <code>'__dict__'</code> in slots we lose some of the size benefits with the upside of having dynamic assignment and still having slots for the names we do expect.</p>\u000a\u000a<p>When you inherit from an object that isn't slotted, you get the same sort of semantics when you use <code>__slots__</code> - names that are in <code>__slots__</code> point to  slotted values, while any other values are put in the instance's <code>__dict__</code>.</p>\u000a\u000a<p>Avoiding <code>__slots__</code> because you want to be able to add attributes on the fly is actually not a good reason - just add <code>"__dict__"</code> to your <code>__slots__</code> if this is required.</p>\u000a\u000a<h3>Set to empty tuple when subclassing a namedtuple:</h3>\u000a\u000a<p>The namedtuple builtin make immutable instances that are very lightweight (essentially, the size of tuples) but to get the benefits, you need to do it yourself if you subclass them:</p>\u000a\u000a<pre><code>from collections import namedtuple\u000aclass MyNT(namedtuple('MyNT', 'bar baz')):\u000a    """MyNT is an immutable and lightweight object"""\u000a    __slots__ = ()\u000a</code></pre>\u000a\u000a<p>usage:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; nt = MyNT('bar', 'baz')\u000a&gt;&gt;&gt; nt.bar\u000a'bar'\u000a&gt;&gt;&gt; nt.baz\u000a'baz'\u000a</code></pre>\u000a\u000a<h2>Biggest Caveat: Multiple inheritance</h2>\u000a\u000a<p>Even when non-empty slots are the same for multiple parents, they cannot be used together:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Foo(object): __slots__ = 'foo', 'bar'\u000a&gt;&gt;&gt; class Bar(object): __slots__ = 'foo', 'bar' # alas, would work if empty, i.e. ()\u000a&gt;&gt;&gt; class Baz(Foo, Bar): pass\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: Error when calling the metaclass bases\u000a    multiple bases have instance lay-out conflict\u000a</code></pre>\u000a\u000a<p>Using an empty <code>__slots__</code> in the parent seems to provide the most flexibility, <strong>allowing the child to choose to prevent or allow</strong> (by adding <code>'__dict__'</code> to get dynamic assignment, see section above) <strong>the creation of a <code>__dict__</code></strong>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Foo(object): __slots__ = ()\u000a&gt;&gt;&gt; class Bar(object): __slots__ = ()\u000a&gt;&gt;&gt; class Baz(Foo, Bar): __slots__ = ('foo', 'bar')\u000a&gt;&gt;&gt; b = Baz()\u000a&gt;&gt;&gt; b.foo, b.bar = 'foo', 'bar'\u000a</code></pre>\u000a\u000a<p>You don't <em>have</em> to have slots - so if you add them, and remove them later, it shouldn't cause any problems.</p>\u000a\u000a<p><strong>Going out on a limb here</strong>: If you're composing <a href="http://stackoverflow.com/questions/860245/mixin-vs-inheritance/27907511#27907511">mixins</a> or using <a href="http://stackoverflow.com/questions/372042/difference-between-abstract-class-and-interface-in-python/31439126#31439126">abstract base classes</a>, which aren't intended to be instantiated, an empty <code>__slots__</code> in those parents seems to be the best way to go in terms of flexibility for subclassers.</p>\u000a\u000a<h2>Other cases to avoid slots:</h2>\u000a\u000a<ul>\u000a<li>Avoid them when you want to perform <code>__class__</code> assignment with another class that doesn't have them (and you can't add them).</li>\u000a<li>Avoid them if you want to subclass variable length builtins like long, tuple, or str, and you want to add attributes to them.</li>\u000a<li>Avoid them if you insist on providing default values via class attributes for instance variables. </li>\u000a<li>Avoid them for parent classes in the case of multiple inheritance - you can reinsert them for a child where you have a lot of instances (see previous section for recommendation).</li>\u000a</ul>\u000a\u000a<p>You may be able to tease out further caveats from the rest of the <code>__slots__</code> <a href="https://docs.python.org/3/reference/datamodel.html#slots">documentation</a>, which follows:</p>\u000a\u000a<blockquote>\u000a  <p><strong><code>__slots__</code></strong></p>\u000a  \u000a  <blockquote>\u000a    <p>This class variable can be assigned a string, iterable, or sequence of strings with variable names used by instances. If defined in a new-style class, <code>__slots__</code> reserves space for the declared variables and prevents the automatic creation of <code>__dict__</code> and <code>__weakref__</code> for each instance.</p>\u000a  </blockquote>\u000a  \u000a  <p>Notes on using <code>__slots__</code></p>\u000a  \u000a  <ul>\u000a  <li><p>When inheriting from a class without <code>__slots__</code>, the <code>__dict__</code> attribute of that class will always be accessible, so a <code>__slots__</code> definition in the subclass is meaningless.</p></li>\u000a  <li><p>Without a <code>__dict__</code> variable, instances cannot be assigned new variables not listed in the <code>__slots__</code> definition. Attempts to assign to an unlisted variable name raises <code>AttributeError</code>. If dynamic assignment of new variables is desired, then add <code>'__dict__'</code> to the sequence of strings in the <code>__slots__</code> declaration.</p>\u000a  \u000a  <p><em>Changed in version 2.3:</em> Previously, adding <code>'__dict__'</code> to the <code>__slots__</code> declaration would not enable the assignment of new attributes not specifically listed in the sequence of instance variable names.</p></li>\u000a  <li><p>Without a <code>__weakref__</code> variable for each instance, classes defining <code>__slots__</code> do not support weak references to its instances. If weak reference support is needed, then add <code>'__weakref__'</code> to the sequence of strings in the <code>__slots__</code> declaration.</p>\u000a  \u000a  <p><em>Changed in version 2.3:</em> Previously, adding <code>'__weakref__'</code> to the <code>__slots__</code> declaration would not enable support for weak references.</p></li>\u000a  <li><p><code>__slots__</code> are implemented at the class level by creating descriptors (<a href="https://docs.python.org/2/reference/datamodel.html#implementing-descriptors">Implementing Descriptors</a>) for each variable name. As a result, class attributes cannot be used to set default values for instance variables defined by <code>__slots__</code>; otherwise, the class attribute would overwrite the descriptor assignment.</p></li>\u000a  <li><p>The action of a <code>__slots__</code> declaration is limited to the class where it is defined. As a result, subclasses will have a <code>__dict__</code> unless they also define <code>__slots__</code> (which must only contain names of any additional slots).</p></li>\u000a  <li><p>If a class defines a slot also defined in a base class, the instance variable defined by the base class slot is inaccessible (except by retrieving its descriptor directly from the base class). This renders the meaning of the program undefined. In the future, a check may be added to prevent this.</p></li>\u000a  <li><p>Nonempty <code>__slots__</code> does not work for classes derived from \u201cvariable-length\u201d built-in types such as long, str and tuple.</p></li>\u000a  <li><p>Any non-string iterable may be assigned to <code>__slots__</code>. Mappings may also be used; however, in the future, special meaning may be assigned to the values corresponding to each key.</p></li>\u000a  <li><p><code>__class__</code> assignment works only if both classes have the same <code>__slots__</code>.</p>\u000a  \u000a  <p><em>Changed in version 2.6:</em> Previously, <code>__class__</code> assignment raised an error if either new or old class had <code>__slots__</code>.</p></li>\u000a  </ul>\u000a</blockquote>\u000a\u000a<h2>Critiques of other answers</h2>\u000a\u000a<p>The current top answers cite outdated information and are quite hand-wavy and miss the mark in some important ways.</p>\u000a\u000a<h3><code>__slots__</code> doesn't break pickling</h3>\u000a\u000a<p>When pickling a slotted object, you may find it complains with a misleading <code>TypeError</code>: </p>\u000a\u000a<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f))\u000aTypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled\u000a</code></pre>\u000a\u000a<p>This is actually incorrect. This message comes from the oldest protocol, which is the default. You can select the latest protocol with the <code>-1</code> argument. In Python 2.7 this would be <code>2</code> (which was introduced in 2.3), and in 3.6 it is <code>4</code>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, -1))\u000a&lt;__main__.Foo object at 0x1129C770&gt;\u000a</code></pre>\u000a\u000a<p>in Python 2.7:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 2))\u000a&lt;__main__.Foo object at 0x1129C770&gt;\u000a</code></pre>\u000a\u000a<p>in Python 3.6</p>\u000a\u000a<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 4))\u000a&lt;__main__.Foo object at 0x1129C770&gt;\u000a</code></pre>\u000a\u000a<p>So I would keep this in mind, as it is a solved problem.</p>\u000a\u000a<h2>Critique of the (until Oct 2, 2016) accepted answer</h2>\u000a\u000a<p>The first paragraph is half short explanation, half predictive. Here's the only part that actually answers the question</p>\u000a\u000a<blockquote>\u000a  <p>The proper use of <code>__slots__</code> is to save space in objects. Instead of having a dynamic dict that allows adding attributes to objects at anytime, there is a static structure which does not allow additions after creation. This saves the overhead of one dict for every object that uses slots</p>\u000a</blockquote>\u000a\u000a<p>The second half is wishful thinking, and off the mark:</p>\u000a\u000a<blockquote>\u000a  <p>While this is sometimes a useful optimization, it would be completely unnecessary if the Python interpreter was dynamic enough so that it would only require the dict when there actually were additions to the object.</p>\u000a</blockquote>\u000a\u000a<p>Python actually does something similar to this, only creating the <code>__dict__</code> when it is accessed, but creating lots of objects with no data is fairly ridiculous.</p>\u000a\u000a<p>The second paragraph oversimplifies and misses actual reasons to avoid <code>__slots__</code>. The below is <em>not</em> a real reason to avoid slots (for <em>actual</em> reasons, see the rest of my answer above.):</p>\u000a\u000a<blockquote>\u000a  <p>They change the behavior of the objects that have slots in a way that can be abused by control freaks and static typing weenies.</p>\u000a</blockquote>\u000a\u000a<p>It then goes on to discuss other ways of accomplishing that perverse goal with Python, not discussing anything to do with <code>__slots__</code>.</p>\u000a\u000a<p>The third paragraph is more wishful thinking. Together it is mostly off-the-mark content that the answerer didn't even author and contributes to ammunition for critics of the site.</p>\u000a\u000a<h1>Memory usage evidence</h1>\u000a\u000a<p>Create some normal objects and slotted objects:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Foo(object): pass\u000a&gt;&gt;&gt; class Bar(object): __slots__ = ()\u000a</code></pre>\u000a\u000a<p>Instantiate a million of them:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; foos = [Foo() for f in xrange(1000000)]\u000a&gt;&gt;&gt; bars = [Bar() for b in xrange(1000000)]\u000a</code></pre>\u000a\u000a<p>Inspect with <code>guppy.hpy().heap()</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; guppy.hpy().heap()\u000aPartition of a set of 2028259 objects. Total size = 99763360 bytes.\u000a Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)\u000a     0 1000000  49 64000000  64  64000000  64 __main__.Foo\u000a     1     169   0 16281480  16  80281480  80 list\u000a     2 1000000  49 16000000  16  96281480  97 __main__.Bar\u000a     3   12284   1   987472   1  97268952  97 str\u000a...\u000a</code></pre>\u000a\u000a<p>Access the regular objects and their <code>__dict__</code> and inspect again:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; for f in foos:\u000a...     f.__dict__\u000a&gt;&gt;&gt; guppy.hpy().heap()\u000aPartition of a set of 3028258 objects. Total size = 379763480 bytes.\u000a Index  Count   %      Size    % Cumulative  % Kind (class / dict of class)\u000a     0 1000000  33 280000000  74 280000000  74 dict of __main__.Foo\u000a     1 1000000  33  64000000  17 344000000  91 __main__.Foo\u000a     2     169   0  16281480   4 360281480  95 list\u000a     3 1000000  33  16000000   4 376281480  99 __main__.Bar\u000a     4   12284   0    987472   0 377268952  99 str\u000a...\u000a</code></pre>\u000a\u000a<p>This is consistent with the history of Python, from <a href="https://www.python.org/download/releases/2.2.2/descrintro/">Unifying types and classes in Python 2.2</a></p>\u000a\u000a<blockquote>\u000a  <p>If you subclass a built-in type, extra space is automatically added to the instances to accomodate <code>__dict__</code> and <code>__weakrefs__</code>. (The <code>__dict__</code> is not initialized until you use it though, so you shouldn't worry about the space occupied by an empty dictionary for each instance you create.) If you don't need this extra space, you can add the phrase "<code>__slots__ = []</code>" to your class.</p>\u000a</blockquote>\u000a
p345
sVquestion_id
p346
I472000
sVlast_activity_date
p347
I1479158890
sVcreation_date
p348
I1421815602
sVscore
p349
I240
sVowner
p350
(dp351
Vuser_id
p352
I541136
sVprofile_image
p353
Vhttps://i.stack.imgur.com/wftMn.jpg?s=128&g=1
p354
sVuser_type
p355
Vmoderator
p356
sVreputation
p357
I82078
sVlink
p358
Vhttp://stackoverflow.com/users/541136/aaron-hall
p359
sVaccept_rate
p360
I96
sVdisplay_name
p361
VAaron Hall
p362
ssVis_accepted
p363
I01
sVlast_edit_date
p364
I1479158890
sVanswer_id
p365
I28059785
sa(dp366
Vbody
p367
V<p>From an efficiency perspective, you're not going to beat </p>\u000a\u000a<pre><code>s.translate(None, string.punctuation)\u000a</code></pre>\u000a\u000a<p>It's performing raw string operations in C with a lookup table - there's not much that will beat that but writing your own C code.</p>\u000a\u000a<p>If speed isn't a worry, another option though is:</p>\u000a\u000a<pre><code>exclude = set(string.punctuation)\u000as = ''.join(ch for ch in s if ch not in exclude)\u000a</code></pre>\u000a\u000a<p>This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings.  For this type of problem, doing it at as low a level as possible pays off.</p>\u000a\u000a<p>Timing code:</p>\u000a\u000a<pre><code>import re, string, timeit\u000a\u000as = "string. With. Punctuation"\u000aexclude = set(string.punctuation)\u000atable = string.maketrans("","")\u000aregex = re.compile('[%s]' % re.escape(string.punctuation))\u000a\u000adef test_set(s):\u000a    return ''.join(ch for ch in s if ch not in exclude)\u000a\u000adef test_re(s):  # From Vinko's solution, with fix.\u000a    return regex.sub('', s)\u000a\u000adef test_trans(s):\u000a    return s.translate(table, string.punctuation)\u000a\u000adef test_repl(s):  # From S.Lott's solution\u000a    for c in string.punctuation:\u000a        s=s.replace(c,"")\u000a    return s\u000a\u000aprint "sets      :",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)\u000aprint "regex     :",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)\u000aprint "translate :",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)\u000aprint "replace   :",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)\u000a</code></pre>\u000a\u000a<p>This gives the following results:</p>\u000a\u000a<pre><code>sets      : 19.8566138744\u000aregex     : 6.86155414581\u000atranslate : 2.12455511093\u000areplace   : 28.4436721802\u000a</code></pre>\u000a
p368
sVquestion_id
p369
I265960
sVlast_activity_date
p370
I1478736962
sVcreation_date
p371
I1225910171
sVscore
p372
I462
sVowner
p373
(dp374
Vuser_id
p375
I9493
sVprofile_image
p376
Vhttps://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=128&d=identicon&r=PG
p377
sVuser_type
p378
Vregistered
p379
sVreputation
p380
I73391
sVlink
p381
Vhttp://stackoverflow.com/users/9493/brian
p382
sVdisplay_name
p383
VBrian
p384
ssVis_accepted
p385
I01
sVlast_edit_date
p386
I1478736962
sVanswer_id
p387
I266162
sa(dp388
Vbody
p389
V<p>Getting the name of the file without the extension :</p>\u000a\u000a<pre><code>import os\u000aprint(os.path.splitext("path_to_file")[0])\u000a</code></pre>\u000a\u000a<p>As for your import problem, you solve it this way :</p>\u000a\u000a<pre><code>from os.path import basename\u000a\u000a# now you can call it directly with basename\u000aprint(basename("/a/b/c.txt"))\u000a</code></pre>\u000a
p390
sVquestion_id
p391
I678236
sVlast_activity_date
p392
I1476174877
sVcreation_date
p393
I1237912995
sVscore
p394
I548
sVowner
p395
(dp396
Vuser_id
p397
I31610
sVprofile_image
p398
Vhttps://www.gravatar.com/avatar/20571f32acd27d2cf5f1b1f42ea1a75b?s=128&d=identicon&r=PG
p399
sVuser_type
p400
Vregistered
p401
sVreputation
p402
I37249
sVlink
p403
Vhttp://stackoverflow.com/users/31610/geo
p404
sVaccept_rate
p405
I87
sVdisplay_name
p406
VGeo
p407
ssVis_accepted
p408
I01
sVlast_edit_date
p409
I1476174877
sVanswer_id
p410
I678242
sa(dp411
Vbody
p412
V<p>I would use <a href="http://docs.python.org/library/functions.html#filter" rel="noreferrer"><code>filter</code></a>:</p>\u000a\u000a<pre><code>str_list = filter(None, str_list) # fastest\u000astr_list = filter(bool, str_list) # fastest\u000astr_list = filter(len, str_list)  # a bit of slower\u000astr_list = filter(lambda item: item, str_list) # slower than list comprehension\u000a</code></pre>\u000a\u000a<p>Python 3 returns an iterator from <code>filter</code>, so should be wrapped in a call to <code>list()</code></p>\u000a\u000a<pre><code>str_list = list(filter(None, str_list)) # fastest\u000a</code></pre>\u000a\u000a<p>(<em>etc.</em>)</p>\u000a\u000a<p>Tests:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; timeit('filter(None, str_list)', 'str_list=["a"]*1000', number=100000)\u000a2.4797441959381104\u000a&gt;&gt;&gt; timeit('filter(bool, str_list)', 'str_list=["a"]*1000', number=100000)\u000a2.4788150787353516\u000a&gt;&gt;&gt; timeit('filter(len, str_list)', 'str_list=["a"]*1000', number=100000)\u000a5.2126238346099854\u000a&gt;&gt;&gt; timeit('[x for x in str_list if x]', 'str_list=["a"]*1000', number=100000)\u000a13.354584932327271\u000a&gt;&gt;&gt; timeit('filter(lambda item: item, str_list)', 'str_list=["a"]*1000', number=100000)\u000a17.427681922912598\u000a</code></pre>\u000a
p413
sVquestion_id
p414
I3845423
sVlast_activity_date
p415
I1475847915
sVcreation_date
p416
I1286018930
sVscore
p417
I620
sVowner
p418
(dp419
Vuser_id
p420
I242583
sVprofile_image
p421
Vhttps://www.gravatar.com/avatar/9c8425c85f81798109d48e30fb1d28e4?s=128&d=identicon&r=PG
p422
sVuser_type
p423
Vregistered
p424
sVreputation
p425
I8654
sVlink
p426
Vhttp://stackoverflow.com/users/242583/livibetter
p427
sVdisplay_name
p428
Vlivibetter
p429
ssVis_accepted
p430
I01
sVlast_edit_date
p431
I1475847915
sVanswer_id
p432
I3845453
sa(dp433
Vbody
p434
V<p>If this is for Python 2.x or for Python 3.2+, you can also use <code>callable()</code>. It used to be deprecated, but is now undeprecated, so you can use it again. You can read the discussion here: <a href="http://bugs.python.org/issue10518" rel="noreferrer">http://bugs.python.org/issue10518</a>. You can do this with:</p>\u000a\u000a<pre><code>callable(obj)\u000a</code></pre>\u000a\u000a<p>If this is for Python 3.x but before 3.2, check if the object has a <code>__call__</code> attribute. You can do this with:</p>\u000a\u000a<pre><code>hasattr(obj, '__call__')\u000a</code></pre>\u000a\u000a<p>The oft-suggested <code>types.FunctionTypes</code> approach is not correct because it fails to cover many cases that you would presumably want it to pass, like with builtins:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; isinstance(open, types.FunctionType)\u000aFalse\u000a\u000a&gt;&gt;&gt; callable(open)\u000aTrue\u000a</code></pre>\u000a\u000a<p>The proper way to check properties of duck-typed objects is to ask them if they quack, not to see if they fit in a duck-sized container. Don't use <code>types.FunctionType</code> unless you have a very specific idea of what a function is.</p>\u000a
p435
sVquestion_id
p436
I624926
sVlast_activity_date
p437
I1472806094
sVcreation_date
p438
I1236569942
sVscore
p439
I480
sVowner
p440
(dp441
Vuser_id
p442
I75170
sVprofile_image
p443
Vhttps://www.gravatar.com/avatar/dee3c76d4bb3d44677c839ef281e52f9?s=128&d=identicon&r=PG
p444
sVuser_type
p445
Vregistered
p446
sVreputation
p447
I191828
sVlink
p448
Vhttp://stackoverflow.com/users/75170/john-feminella
p449
sVaccept_rate
p450
I72
sVdisplay_name
p451
VJohn Feminella
p452
ssVis_accepted
p453
I01
sVlast_edit_date
p454
I1472806094
sVanswer_id
p455
I624939
sa(dp456
Vbody
p457
V<p>You can use a <a href="http://docs.python.org/3.3/library/datetime.html?highlight=datetime#timedelta-objects" rel="noreferrer">timedelta</a> object:</p>\u000a\u000a<pre><code>from datetime import datetime, timedelta\u000a\u000ad = datetime.today() - timedelta(days=days_to_subtract)\u000a</code></pre>\u000a
p458
sVquestion_id
p459
I441147
sVlast_activity_date
p460
I1472224064
sVcreation_date
p461
I1231886499
sVscore
p462
I632
sVowner
p463
(dp464
Vuser_id
p465
I19479
sVprofile_image
p466
Vhttps://www.gravatar.com/avatar/8c3227175520ab65a0a24d75e3317150?s=128&d=identicon&r=PG
p467
sVuser_type
p468
Vregistered
p469
sVreputation
p470
I32962
sVlink
p471
Vhttp://stackoverflow.com/users/19479/steve-b
p472
sVaccept_rate
p473
I70
sVdisplay_name
p474
VSteve B.
p475
ssVis_accepted
p476
I01
sVlast_edit_date
p477
I1472224064
sVanswer_id
p478
I441152
sa(dp479
Vbody
p480
V<p>It's part of an evolution. </p>\u000a\u000a<p>Originally, Python <code>items()</code> built a real list of tuples and returned that. That could potentially take a lot of extra memory. </p>\u000a\u000a<p>Then, generators were introduced to the language in general, and that method was reimplemented as an iterator-generator method named <code>iteritems()</code>. The original remains for backwards compatibility. </p>\u000a\u000a<p>One of Python 3\u2019s changes is that  <code>items()</code> now return iterators, and a list is never fully built. The <code>iteritems()</code> method is also gone, since <code>items()</code> in Python 3 works like <code>viewitems()</code> in Python 2.7. </p>\u000a
p481
sVquestion_id
p482
I10458437
sVlast_activity_date
p483
I1469576186
sVcreation_date
p484
I1336188387
sVscore
p485
I505
sVowner
p486
(dp487
Vuser_id
p488
I521034
sVprofile_image
p489
Vhttps://www.gravatar.com/avatar/1d1e92d5a4154a59c4dfb3217067fa74?s=128&d=identicon&r=PG
p490
sVuser_type
p491
Vregistered
p492
sVreputation
p493
I23619
sVlink
p494
Vhttp://stackoverflow.com/users/521034/keith
p495
sVdisplay_name
p496
VKeith
p497
ssVis_accepted
p498
I01
sVlast_edit_date
p499
I1469576186
sVanswer_id
p500
I10458567
sa(dp501
Vbody
p502
V<p>Use <a href="https://docs.python.org/2/library/os.html#os.stat" rel="noreferrer"><code>os.stat</code></a>, and use the <code>st_size</code> member of the resulting object:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import os\u000a&gt;&gt;&gt; statinfo = os.stat('somefile.txt')\u000a&gt;&gt;&gt; statinfo\u000a(33188, 422511L, 769L, 1, 1032, 100, 926L, 1105022698,1105022732, 1105022732)\u000a&gt;&gt;&gt; statinfo.st_size\u000a926L\u000a</code></pre>\u000a\u000a<p>Output is in bytes.</p>\u000a
p503
sVquestion_id
p504
I2104080
sVlast_activity_date
p505
I1469107061
sVcreation_date
p506
I1264014113
sVscore
p507
I382
sVowner
p508
(dp509
Vuser_id
p510
I9530
sVprofile_image
p511
Vhttps://www.gravatar.com/avatar/924800e76876546c5c575c0175e1f434?s=128&d=identicon&r=PG
p512
sVuser_type
p513
Vregistered
p514
sVreputation
p515
I259111
sVlink
p516
Vhttp://stackoverflow.com/users/9530/adam-rosenfield
p517
sVaccept_rate
p518
I78
sVdisplay_name
p519
VAdam Rosenfield
p520
ssVis_accepted
p521
I01
sVlast_edit_date
p522
I1469107061
sVanswer_id
p523
I2104107
sa(dp524
Vbody
p525
V<pre><code>for f, b in zip(foo, bar):\u000a    print(f, b)\u000a</code></pre>\u000a\u000a<p><code>zip</code> stops when the shorter of <code>foo</code> or <code>bar</code> stops.</p>\u000a\u000a<p>In <strong>Python 2</strong>, <a href="https://docs.python.org/2/library/functions.html#zip" rel="noreferrer"><code>zip</code></a>\u000areturns a list of tuples. This is fine when <code>foo</code> and <code>bar</code> are not massive. If\u000athey are both massive then forming <code>zip(foo,bar)</code> is an unnecessarily massive\u000atemporary variable, and should be replaced by <code>itertools.izip</code> or\u000a<code>itertools.izip_longest</code>, which returns an iterator instead of a list.</p>\u000a\u000a<pre><code>import itertools\u000afor f,b in itertools.izip(foo,bar):\u000a    print(f,b)\u000afor f,b in itertools.izip_longest(foo,bar):\u000a    print(f,b)\u000a</code></pre>\u000a\u000a<p><code>izip</code> stops when either <code>foo</code> or <code>bar</code> is exhausted.\u000a<code>izip_longest</code> stops when both <code>foo</code> and <code>bar</code> are exhausted.\u000aWhen the shorter iterator(s) are exhausted, <code>izip_longest</code> yields a tuple with <code>None</code> in the position corresponding to that iterator. You can also set a different <code>fillvalue</code> besides <code>None</code> if you wish. See here for the <a href="http://docs.python.org/library/itertools.html#itertools.izip_longest" rel="noreferrer">full story</a>.</p>\u000a\u000a<p>In <strong>Python 3</strong>, <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip</code></a>\u000areturns an iterator of tuples, like <code>itertools.izip</code> in Python2.  To get a list\u000aof tuples, use <code>list(zip(foo, bar))</code>. And to zip until both iterators are\u000aexhausted, you would use\u000a<a href="https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest" rel="noreferrer">itertools.zip_longest</a>.</p>\u000a\u000a<hr>\u000a\u000a<p>Note also that <code>zip</code> and its <code>zip</code>-like brethen can accept an arbitrary number of iterables as arguments. For example,</p>\u000a\u000a<pre><code>for num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], \u000a                              ['red', 'blue', 'green']):\u000a    print('{} {} {}'.format(num, color, cheese))\u000a</code></pre>\u000a\u000a<p>prints</p>\u000a\u000a<pre><code>1 red manchego\u000a2 blue stilton\u000a3 green brie\u000a</code></pre>\u000a
p526
sVquestion_id
p527
I1663807
sVlast_activity_date
p528
I1468257228
sVcreation_date
p529
I1257197307
sVscore
p530
I594
sVowner
p531
(dp532
Vuser_id
p533
I190597
sVprofile_image
p534
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p535
sVuser_type
p536
Vregistered
p537
sVreputation
p538
I424924
sVlink
p539
Vhttp://stackoverflow.com/users/190597/unutbu
p540
sVaccept_rate
p541
I88
sVdisplay_name
p542
Vunutbu
p543
ssVis_accepted
p544
I01
sVlast_edit_date
p545
I1468257228
sVanswer_id
p546
I1663826
sa(dp547
Vbody
p548
V<h1>Formats</h1>\u000a\u000a<p>Python docstrings can be written following several formats as the other posts showed. However the default Sphinx docstring format was not mentioned and is based on <strong>reStructuredText (reST)</strong>. You can get some information about the main formats in <a href="http://daouzli.com/blog/docstring.html">that tuto</a>.</p>\u000a\u000a<p>Note that the reST is recommended by the <a href="https://www.python.org/dev/peps/pep-0287">PEP 287</a></p>\u000a\u000a<p>There follows the main used formats for docstrings.</p>\u000a\u000a<h2>- Epytext</h2>\u000a\u000a<p>Historically a <strong>javadoc</strong> like style was prevalent, so it was taken as a base for <a href="http://epydoc.sourceforge.net">Epydoc</a> (with the called <code>Epytext</code> format) to generate documentation.</p>\u000a\u000a<p>Example:</p>\u000a\u000a<pre><code>"""\u000aThis is a javadoc style.\u000a\u000a@param param1: this is a first param\u000a@param param2: this is a second param\u000a@return: this is a description of what is returned\u000a@raise keyError: raises an exception\u000a"""\u000a</code></pre>\u000a\u000a<h2>- reST</h2>\u000a\u000a<p>Nowadays, the probably more prevalent format is the <strong>reStructuredText</strong> (reST) format that is used by <a href="http://sphinx-doc.org">Sphinx</a> to generate documentation.\u000aNote: it is used by default in JetBrains PyCharm (type triple quotes after defining a method and hit enter). It is also used by default as output format in Pyment.</p>\u000a\u000a<p>Example:</p>\u000a\u000a<pre><code>"""\u000aThis is a reST style.\u000a\u000a:param param1: this is a first param\u000a:param param2: this is a second param\u000a:returns: this is a description of what is returned\u000a:raises keyError: raises an exception\u000a"""\u000a</code></pre>\u000a\u000a<h2>- Google</h2>\u000a\u000a<p>Google has their own <a href="https://google.github.io/styleguide/pyguide.html?showone=Comments#Comments">format</a> that is often used. It also can be interpreted by Sphinx. </p>\u000a\u000a<p>Example:</p>\u000a\u000a<pre><code>"""\u000aThis is an example of Google style.\u000a\u000aArgs:\u000a    param1: This is the first param.\u000a    param2: This is a second param.\u000a\u000aReturns:\u000a    This is a description of what is returned.\u000a\u000aRaises:\u000a    KeyError: Raises an exception.\u000a"""\u000a</code></pre>\u000a\u000a<p>Even <a href="http://www.sphinx-doc.org/en/stable/ext/example_google.html">more examples</a></p>\u000a\u000a<h2>- Numpydoc</h2>\u000a\u000a<p>Note that Numpy recommend to follow their own <a href="https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt">numpydoc</a> based on Google format and usable by Sphinx.</p>\u000a\u000a<pre><code>"""\u000aMy numpydoc description of a kind\u000aof very exhautive numpydoc format docstring.\u000a\u000aParameters\u000a----------\u000afirst : array_like\u000a    the 1st param name `first`\u000asecond :\u000a    the 2nd param\u000athird : {'value', 'other'}, optional\u000a    the 3rd param, by default 'value'\u000a\u000aReturns\u000a-------\u000astring\u000a    a value in a string\u000a\u000aRaises\u000a------\u000aKeyError\u000a    when a key error\u000aOtherError\u000a    when an other error\u000a"""\u000a</code></pre>\u000a\u000a<h1>Converting/Generating</h1>\u000a\u000a<p>It is possible to use a tool like <a href="https://github.com/dadadel/pyment">Pyment</a> to automatically generate docstrings to a Python project not yet documented, or to convert existing docstrings (can be mixing several formats) from a format to an other one.</p>\u000a\u000a<p>Note: The examples are taken from the <a href="https://github.com/dadadel/pyment/blob/master/doc/pyment.rst">Pyment documentation</a></p>\u000a
p549
sVquestion_id
p550
I3898572
sVlast_activity_date
p551
I1467891297
sVcreation_date
p552
I1403608221
sVscore
p553
I359
sVowner
p554
(dp555
Vuser_id
p556
I1676127
sVprofile_image
p557
Vhttps://i.stack.imgur.com/sV31A.png?s=128&g=1
p558
sVuser_type
p559
Vregistered
p560
sVreputation
p561
I4580
sVlink
p562
Vhttp://stackoverflow.com/users/1676127/daouzli
p563
sVdisplay_name
p564
Vdaouzli
p565
ssVis_accepted
p566
I01
sVlast_edit_date
p567
I1467891297
sVanswer_id
p568
I24385103
sa(dp569
Vbody
p570
V<p><a href="http://docs.python.org/library/os.html#os.rename" rel="noreferrer"><code>os.rename()</code></a> or <a href="http://docs.python.org/library/shutil.html#shutil.move" rel="noreferrer"><code>shutil.move()</code></a></p>\u000a\u000a<p>Both employ the same syntax:</p>\u000a\u000a<pre><code>os.rename("path/to/current/file.foo", "path/to/new/desination/for/file.foo")\u000ashutil.move("path/to/current/file.foo", "path/to/new/destination/for/file.foo")\u000a</code></pre>\u000a\u000a<p>Note that in both cases the directory in which the new file is being created must already exist, (but, on Windows, a file with that name must not or an exception will be raised). Note also, you must include the file name (<code>file.foo</code>) in both the source and destination arguments. If it is changed, the file will be renamed as well as moved.</p>\u000a\u000a<p>As has been noted in comments on other answers, <code>shutil.move</code> simply calls <code>os.rename</code> in most cases. However, if the destination is on a different disk than the source, it will instead copy and then delete the source file.</p>\u000a
p571
sVquestion_id
p572
I8858008
sVlast_activity_date
p573
I1467671941
sVcreation_date
p574
I1326493198
sVscore
p575
I477
sVowner
p576
(dp577
Vuser_id
p578
I274466
sVprofile_image
p579
Vhttps://www.gravatar.com/avatar/268c241170c7a112bbc104a8809e293c?s=128&d=identicon&r=PG
p580
sVuser_type
p581
Vregistered
p582
sVreputation
p583
I17989
sVlink
p584
Vhttp://stackoverflow.com/users/274466/ig0774
p585
sVdisplay_name
p586
Vig0774
p587
ssVis_accepted
p588
I01
sVlast_edit_date
p589
I1467671941
sVanswer_id
p590
I8858026
sa(dp591
Vbody
p592
V<p>The <code>assert</code> statement exists in almost every programming language. When you do...</p>\u000a\u000a<pre><code>assert condition\u000a</code></pre>\u000a\u000a<p>... you're telling the program to test that condition, and trigger an error if the condition is false.</p>\u000a\u000a<p>In Python, it's roughly equivalent to this:</p>\u000a\u000a<pre><code>if not condition:\u000a    raise AssertionError()\u000a</code></pre>\u000a\u000a<p>Try it in the Python shell:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; assert True\u000a&gt;&gt;&gt; assert False\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aAssertionError\u000a</code></pre>\u000a\u000a<p>Assertions can include an optional message, and you can disable them when you're done debugging. See <a href="http://docs.python.org/reference/simple_stmts.html#assert" rel="noreferrer">here</a> for the relevant documentation.</p>\u000a
p593
sVquestion_id
p594
I5142418
sVlast_activity_date
p595
I1467389128
sVcreation_date
p596
I1298898933
sVscore
p597
I407
sVowner
p598
(dp599
Vuser_id
p600
I469300
sVprofile_image
p601
Vhttps://www.gravatar.com/avatar/f8256aabf1f8938bc2356b1fbeb227f4?s=128&d=identicon&r=PG
p602
sVuser_type
p603
Vregistered
p604
sVreputation
p605
I32210
sVlink
p606
Vhttp://stackoverflow.com/users/469300/slezica
p607
sVaccept_rate
p608
I74
sVdisplay_name
p609
Vslezica
p610
ssVis_accepted
p611
I01
sVlast_edit_date
p612
I1467389128
sVanswer_id
p613
I5142453
sa(dp614
Vcommunity_owned_date
p615
I1395470504
sVbody
p616
V<h2>The WHY: dates are objects</h2>\u000a\u000a<p>In Python, dates are objects. Therefore, when you manipulate them, you manipulate objects, not strings, not timestamps nor anything.</p>\u000a\u000a<p>Any object in Python have TWO string representations:</p>\u000a\u000a<ul>\u000a<li><p>The regular representation that is used by "print", can be get using the <code>str()</code> function. It is most of the time the most common human readable format and is used to ease display. So <code>str(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'2008-11-22 19:53:42'</code>. </p></li>\u000a<li><p>The alternative representation that is used to represent the object nature (as a data). It can be get using the <code>repr()</code> function and is handy to know what kind of data your manipulating while you are developing or debugging. <code>repr(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'datetime.datetime(2008, 11, 22, 19, 53, 42)'</code>.</p></li>\u000a</ul>\u000a\u000a<p>What happened is that when you have printed the date using "print", it used <code>str()</code> so you could see a nice date string. But when you have printed <code>mylist</code>, you have printed a list of objects and Python tried to represent the set of data, using <code>repr()</code>.</p>\u000a\u000a<h2>The How: what do you want to do with that?</h2>\u000a\u000a<p>Well, when you manipulate dates, keep using the date objects all long the way. They got thousand of useful methods and most of the Python API expect dates to be objects.</p>\u000a\u000a<p>When you want to display them, just use <code>str()</code>. In Python, the good practice is to explicitly cast everything. So just when it's time to print, get a string representation of your date using <code>str(date)</code>.</p>\u000a\u000a<p>One last thing. When you tried to print the dates, you printed <code>mylist</code>. If you want to print a date, you must print the date objects, not their container (the list).</p>\u000a\u000a<p>E.G, you want to print all the date in a list :</p>\u000a\u000a<pre><code>for date in mylist :\u000a    print str(date)\u000a</code></pre>\u000a\u000a<p>Note that <strong><em>in that specific case</em></strong>, you can even omit <code>str()</code> because print will use it for you. But it should not become a habit :-)</p>\u000a\u000a<h2>Practical case, using your code</h2>\u000a\u000a<pre><code>import datetime\u000amylist = []\u000atoday = datetime.date.today()\u000amylist.append(today)\u000aprint mylist[0] # print the date object, not the container ;-)\u000a2008-11-22\u000a\u000a# It's better to always use str() because :\u000a\u000aprint "This is a new day : ", mylist[0] # will work\u000aThis is a new day : 2008-11-22\u000a\u000aprint "This is a new day : " + mylist[0] # will crash\u000acannot concatenate 'str' and 'datetime.date' objects\u000a\u000aprint "This is a new day : " + str(mylist[0]) \u000aThis is a new day : 2008-11-22\u000a</code></pre>\u000a\u000a<h2>Advanced date formatting</h2>\u000a\u000a<p>Dates have a default representation, but you may want to print them in a specific format. In that case, you can get a custom string representation using the <code>strftime()</code> method.</p>\u000a\u000a<p><code>strftime()</code> expects a string pattern explaining how you want to format your date.</p>\u000a\u000a<p>E.G : </p>\u000a\u000a<pre><code>print today.strftime('We are the %d, %b %Y')\u000a'We are the 22, Nov 2008'\u000a</code></pre>\u000a\u000a<p>All the letter after a <code>"%"</code> represent a format for something :</p>\u000a\u000a<ul>\u000a<li><code>%d</code> is the day number</li>\u000a<li><code>%m</code> is the month number</li>\u000a<li><code>%b</code> is the month abbreviation</li>\u000a<li><code>%y</code> is the year last two digits</li>\u000a<li><code>%Y</code> is the all year</li>\u000a</ul>\u000a\u000a<p>etc</p>\u000a\u000a<p><a href="http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">Have a look at the official documentation</a>, or <a href="http://strftime.org" rel="noreferrer">McCutchen's quick reference</a> you can't know them all.</p>\u000a\u000a<p>Since <a href="http://www.python.org/dev/peps/pep-3101/" rel="noreferrer">PEP3101</a>, every object can have its own format used automatically by the method format of any string. In the case of the datetime, the format is the same used in\u000astrftime. So you can do the same as above like this:</p>\u000a\u000a<pre><code>print "We are the {:%d, %b %Y}".format(today)\u000a'We are the 22, Nov 2008'\u000a</code></pre>\u000a\u000a<p>The advantage of this form is that you can also convert other objects at the same time.</p>\u000a\u000a<h2>Localization</h2>\u000a\u000a<p>Dates can automatically adapt to the local language and culture if you use them the right way, but it's a bit complicated. Maybe for another question on SO(Stack Overflow) ;-)</p>\u000a
p617
sVquestion_id
p618
I311627
sVlast_activity_date
p619
I1467296877
sVcreation_date
p620
I1227380827
sVscore
p621
I574
sVowner
p622
(dp623
Vuser_id
p624
I9951
sVprofile_image
p625
Vhttps://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1
p626
sVuser_type
p627
Vregistered
p628
sVreputation
p629
I277803
sVlink
p630
Vhttp://stackoverflow.com/users/9951/e-satis
p631
sVaccept_rate
p632
I79
sVdisplay_name
p633
Ve-satis
p634
ssVis_accepted
p635
I01
sVlast_edit_date
p636
I1467296877
sVanswer_id
p637
I311655
sa(dp638
Vbody
p639
V<p>Look at <a href="http://docs.python.org/library/getpass.html" rel="noreferrer">getpass</a> module</p>\u000a\u000a<pre><code>import getpass\u000agetpass.getuser()\u000a'kostya'\u000a</code></pre>\u000a\u000a<p>Availability: Unix, Windows</p>\u000a\u000a<hr>\u000a\u000a<p>p.s. Per comment below "<em>this function looks at the values of various environment variables to determine the user name. Therefore, this function should not be relied on for access control purposes (or possibly any other purpose, since it allows any user to impersonate any other).</em>"</p>\u000a
p640
sVquestion_id
p641
I842059
sVlast_activity_date
p642
I1467269103
sVcreation_date
p643
I1241821851
sVscore
p644
I540
sVowner
p645
(dp646
Vuser_id
p647
I102243
sVprofile_image
p648
Vhttps://www.gravatar.com/avatar/058b4cef4e88c51213406ae6ed1eae73?s=128&d=identicon&r=PG
p649
sVuser_type
p650
Vregistered
p651
sVreputation
p652
I6976
sVlink
p653
Vhttp://stackoverflow.com/users/102243/konstantin-tenzin
p654
sVaccept_rate
p655
I80
sVdisplay_name
p656
VKonstantin Tenzin
p657
ssVis_accepted
p658
I01
sVlast_edit_date
p659
I1467269103
sVanswer_id
p660
I842096
sa(dp661
Vbody
p662
V<p><strong>If you want:</strong></p>\u000a\u000a<pre><code>c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\u000ac2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\u000ac3 = [[13, 32], [7, 13, 28], [1,6]]\u000a</code></pre>\u000a\u000a<p><strong>Then here is your solution for Python 2:</strong></p>\u000a\u000a<pre><code>c3 = [filter(lambda x: x in c1, sublist) for sublist in c2]\u000a</code></pre>\u000a\u000a<p><strong>In Python 3 <code>filter</code> returns an iterable instead of <code>list</code>, so you need to wrap <code>filter</code> calls with <code>list()</code>:</strong></p>\u000a\u000a<pre><code>c3 = [list(filter(lambda x: x in c1, sublist)) for sublist in c2]\u000a</code></pre>\u000a\u000a<p><strong>Explanation:</strong> </p>\u000a\u000a<p>The filter part takes each sublist's item and checks to see if it is in the source list c1. \u000aThe list comprehension is executed for each sublist in c2. </p>\u000a
p663
sVquestion_id
p664
I642763
sVlast_activity_date
p665
I1464498030
sVcreation_date
p666
I1236953473
sVscore
p667
I133
sVowner
p668
(dp669
Vuser_id
p670
I3153
sVprofile_image
p671
Vhttps://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=128&d=identicon&r=PG
p672
sVuser_type
p673
Vregistered
p674
sVreputation
p675
I212999
sVlink
p676
Vhttp://stackoverflow.com/users/3153/brian-r-bondy
p677
sVaccept_rate
p678
I99
sVdisplay_name
p679
VBrian R. Bondy
p680
ssVis_accepted
p681
I01
sVlast_edit_date
p682
I1464498030
sVanswer_id
p683
I642895
sasVquota_max
p684
I300
sVquota_remaining
p685
I257
s.