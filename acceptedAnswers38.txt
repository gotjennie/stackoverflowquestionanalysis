(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>You could use <code>scipy.interpolate.spline</code> to smooth out your data yourself:</p>\u000a\u000a<pre><code>from scipy.interpolate import spline\u000a\u000axnew = np.linspace(T.min(),T.max(),300) #300 represents number of points to make between T.min and T.max\u000a\u000apower_smooth = spline(T,power,xnew)\u000a\u000aplt.plot(xnew,power_smooth)\u000aplt.show()\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Before:\u000a<a href="https://i.stack.imgur.com/dSLtt.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/dSLtt.png" alt="screenshot 1"></a></p>\u000a\u000a<p>After:\u000a<a href="https://i.stack.imgur.com/olGAh.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/olGAh.png" alt="screenshot 2"></a></p>\u000a
p6
sVquestion_id
p7
I5283649
sVlast_activity_date
p8
I1493843734
sVcreation_date
p9
I1299949764
sVscore
p10
I63
sVowner
p11
(dp12
Vuser_id
p13
I262667
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/dd09cc9b40b956f93a00f5b464469d11?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I22102
sVlink
p19
Vhttp://stackoverflow.com/users/262667/olivier-verdier
p20
sVaccept_rate
p21
I86
sVdisplay_name
p22
VOlivier Verdier
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1493843734
sVanswer_id
p26
I5284038
sa(dp27
Vbody
p28
V<p>I have tried all suggestions and found my own simple solution.</p>\u000a\u000a<p>The problem is that codes written in external environment like <code>C</code> need compiler. Look for its own VS environment, i.e. VS 2008.</p>\u000a\u000a<p>Currently my machine runs VS 2012 and faces <code>Unable to find vcvarsall.bat</code>.\u000aI studied codes that i want to install to find the VS version. It was VS 2008. i have add to system variable <code>VS90COMNTOOLS</code> as variable name and gave the value of <code>VS120COMNTOOLS</code>.</p>\u000a\u000a<p>You can find my step by step solution below:</p>\u000a\u000a<ol>\u000a<li>Right click on My Computer.</li>\u000a<li>Click Properties </li>\u000a<li>Advanced system settings</li>\u000a<li>Environment variables</li>\u000a<li>Add New system variable</li>\u000a<li>Enter VS90COMNTOOLS to the variable name</li>\u000a<li>Enter the value of current version to the new variable.</li>\u000a<li>Close all windows</li>\u000a</ol>\u000a\u000a<p>Now open a new session and <code>pip install your-package</code></p>\u000a
p29
sVquestion_id
p30
I27670365
sVlast_activity_date
p31
I1491737714
sVcreation_date
p32
I1432583491
sVscore
p33
I43
sVowner
p34
(dp35
Vuser_id
p36
I4197348
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/94708b92f1b336d75c2552c00a570d11?s=128&d=identicon&r=PG&f=1
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I704
sVlink
p42
Vhttp://stackoverflow.com/users/4197348/fatih1923
p43
sVaccept_rate
p44
I75
sVdisplay_name
p45
VFatih1923
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1491737714
sVanswer_id
p49
I30445151
sa(dp50
Vbody
p51
V<p>Yes -- use <code>float('nan')</code> or <code>float('NaN')</code>. As of Python 3.5, you can also use <a href="https://docs.python.org/3.5/library/math.html#math.nan" rel="noreferrer"><code>math.nan</code></a>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = float('nan')\u000a&gt;&gt;&gt; print(a)\u000anan\u000a&gt;&gt;&gt; print(a + 2)\u000anan\u000a&gt;&gt;&gt; a == a\u000aFalse\u000a&gt;&gt;&gt; import math\u000a&gt;&gt;&gt; math.isnan(a)\u000aTrue\u000a&gt;&gt;&gt; # Python 3.5+\u000a&gt;&gt;&gt; math.isnan(math.nan)\u000aTrue\u000a</code></pre>\u000a\u000a<p>Note that checking to see if two things that are NaN are equal to one another will always return false. This is in part because two things that are "not a number" cannot (strictly speaking) be said to be equal to one another -- see <a href="http://stackoverflow.com/q/1565164/646543">What is the rationale for all comparisons returning false for IEEE754 NaN values?</a> for more details and information.</p>\u000a\u000a<p>Instead, use <a href="https://docs.python.org/3/library/math.html#math.isnan" rel="noreferrer"><code>math.isnan</code></a> if you need to determine if a value is NaN or not.</p>\u000a\u000a<hr>\u000a\u000a<p>You can also construct NaN numbers using Python's <a href="https://docs.python.org/3/library/decimal.html" rel="noreferrer">decimal</a> module:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from decimal import Decimal\u000a&gt;&gt;&gt; b = Decimal('nan')\u000a&gt;&gt;&gt; print(b)\u000aNaN\u000a&gt;&gt;&gt; print(repr(b))\u000aDecimal('NaN')\u000a&gt;&gt;&gt;\u000a&gt;&gt;&gt; Decimal(float('nan'))\u000aDecimal('NaN')\u000a&gt;&gt;&gt; \u000a&gt;&gt;&gt; import math\u000a&gt;&gt;&gt; math.isnan(b)\u000aTrue\u000a</code></pre>\u000a\u000a<p><code>math.isnan</code> will also work with Decimal objects.</p>\u000a\u000a<hr>\u000a\u000a<p>However, you <em>cannot</em> construct NaN numbers in Python's <a href="https://docs.python.org/3/library/fractions.html" rel="noreferrer">fractions</a> module:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from fractions import Fraction\u000a&gt;&gt;&gt; Fraction('nan')\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "C:\u005cPython35\u005clib\u005cfractions.py", line 146, in __new__\u000a    numerator)\u000aValueError: Invalid literal for Fraction: 'nan'\u000a&gt;&gt;&gt;\u000a&gt;&gt;&gt; Fraction(float('nan'))\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000a  File "C:\u005cPython35\u005clib\u005cfractions.py", line 130, in __new__\u000a    value = Fraction.from_float(numerator)\u000a  File "C:\u005cPython35\u005clib\u005cfractions.py", line 214, in from_float\u000a    raise ValueError("Cannot convert %r to %s." % (f, cls.__name__))\u000aValueError: Cannot convert nan to Fraction.\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Incidentally, you can also do <code>float('Inf')</code>, <code>Decimal('Inf')</code>, or <a href="https://docs.python.org/3.5/library/math.html#math.inf" rel="noreferrer"><code>math.inf</code></a> (3.5+) to assign infinite numbers. (And also see <a href="https://docs.python.org/3/library/math.html#math.isinf" rel="noreferrer"><code>math.isinf</code></a>)</p>\u000a\u000a<p>However doing <code>Fraction('Inf')</code> or <code>Fraction(float('inf'))</code> isn't permitted and will throw an exception, just like NaN.</p>\u000a\u000a<p>If you want a quick and easy way to check if a number is neither NaN nor infinite, you can use <a href="https://docs.python.org/3.5/library/math.html#math.isfinite" rel="noreferrer"><code>math.isfinite</code></a> as of Python 3.2+.</p>\u000a
p52
sVquestion_id
p53
I19374254
sVlast_activity_date
p54
I1485547249
sVcreation_date
p55
I1381817127
sVscore
p56
I69
sVowner
p57
(dp58
Vuser_id
p59
I646543
sVprofile_image
p60
Vhttps://i.stack.imgur.com/a6xF2.jpg?s=128&g=1
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I13996
sVlink
p65
Vhttp://stackoverflow.com/users/646543/michael0x2a
p66
sVaccept_rate
p67
I86
sVdisplay_name
p68
VMichael0x2a
p69
ssVis_accepted
p70
I01
sVlast_edit_date
p71
I1485547249
sVanswer_id
p72
I19374296
sa(dp73
Vbody
p74
V<p>No it doesn't work that way in <code>json</code> module. The module provides you with a default encoder: <code>json.JSONEncoder</code>. You need to extend this to provide your implementation of <code>default</code> method to serialize objects. Something like this:</p>\u000a\u000a<pre><code>import json\u000aimport datetime\u000afrom time import mktime\u000a\u000aclass MyEncoder(json.JSONEncoder):\u000a\u000a    def default(self, obj):\u000a        if isinstance(obj, datetime.datetime):\u000a            return int(mktime(obj.timetuple()))\u000a\u000a        return json.JSONEncoder.default(self, obj)\u000a\u000aprint json.dumps(obj, cls=MyEncoder)\u000a</code></pre>\u000a\u000a<p>As others correctly pointed out, the reason is that the <a href="http://www.json.org/" rel="noreferrer">standard for json</a> does not specify how date time can be represented.</p>\u000a
p75
sVquestion_id
p76
I10721409
sVlast_activity_date
p77
I1483435522
sVcreation_date
p78
I1337781665
sVscore
p79
I85
sVowner
p80
(dp81
Vuser_id
p82
I446386
sVprofile_image
p83
Vhttps://www.gravatar.com/avatar/9863b59f56c43dbbdd6df89379b11eea?s=128&d=identicon&r=PG
p84
sVuser_type
p85
Vregistered
p86
sVreputation
p87
I5398
sVlink
p88
Vhttp://stackoverflow.com/users/446386/vikas
p89
sVaccept_rate
p90
I77
sVdisplay_name
p91
VVikas
p92
ssVis_accepted
p93
I01
sVlast_edit_date
p94
I1483435522
sVanswer_id
p95
I10721564
sa(dp96
Vbody
p97
V<p>Retrieve an object using the <a href="http://flask-sqlalchemy.pocoo.org/2.1/queries/#querying-records" rel="noreferrer">tutorial shown in the Flask-SQLAlchemy documentation</a>. Once you have the entity that you want to change, change the entity itself. Then, <code>db.session.commit()</code>.</p>\u000a\u000a<p>For example:</p>\u000a\u000a<pre><code>admin = User.query.filter_by(username='admin').first()\u000aadmin.email = 'my_new_email@example.com'\u000adb.session.commit()\u000a\u000auser = User.query.get(5)\u000auser.name = 'New Name'\u000adb.session.commit()\u000a</code></pre>\u000a\u000a<p>Flask-SQLAlchemy is based on SQLAlchemy, so be sure to check out the <a href="http://www.sqlalchemy.org/docs/" rel="noreferrer">SQLAlchemy Docs</a> as well.</p>\u000a
p98
sVquestion_id
p99
I6699360
sVlast_activity_date
p100
I1480027512
sVcreation_date
p101
I1310686376
sVscore
p102
I82
sVowner
p103
(dp104
Vuser_id
p105
I272520
sVprofile_image
p106
Vhttps://i.stack.imgur.com/SZ2YT.jpg?s=128&g=1
p107
sVuser_type
p108
Vregistered
p109
sVreputation
p110
I20810
sVlink
p111
Vhttp://stackoverflow.com/users/272520/mark-hildreth
p112
sVaccept_rate
p113
I86
sVdisplay_name
p114
VMark Hildreth
p115
ssVis_accepted
p116
I01
sVlast_edit_date
p117
I1480027512
sVanswer_id
p118
I6701188
sa(dp119
Vbody
p120
V<p>Sets test for equality, and until there are new Python releases, the order in which they do this can differ based on the form you hand the values to the set being constructed, as I'll show below.</p>\u000a\u000a<p>Since <code>0 == x</code> is true <em>and</em> <code>0 == y</code> is true, but <code>x == y</code> is <em>false</em>, the behaviour here is really <em>undefined</em>, as the set assumes that <code>x == y</code> must be true if the first two tests were true too.</p>\u000a\u000a<p>If you <em>reverse</em> the list passed to <code>set()</code>, then you get the same output as using a literal, because the order of equality tests changes:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; set([y, x, 0])\u000aset([0j, Decimal('0')])\u000a</code></pre>\u000a\u000a<p>and the same for reversing the literal:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; {y, x, 0}\u000aset([0])\u000a</code></pre>\u000a\u000a<p>What's happening is that the set <em>literal</em> loads the values onto the stack and then the stack values are added to the new set object in reverse order.</p>\u000a\u000a<p>As long as <code>0</code> is loaded <em>first</em>, the other two objects are then tested against <code>0</code> already in the set. The moment one of the other two objects is loaded first, the equality test fails and you get two objects added:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; {y, 0, x}\u000aset([Decimal('0'), 0j])\u000a&gt;&gt;&gt; {x, 0, y}\u000aset([0j, Decimal('0')])\u000a</code></pre>\u000a\u000a<p>That set literals add elements in reverse is a bug present in all versions of Python that support the syntax, all the way until Python 2.7.12 and 3.5.2. It was recently fixed, see <a href="http://bugs.python.org/issue26020">issue 26020</a> (part of 2.7.13, 3.5.3 and 3.6, none of which have been released yet). If you look at 2.7.12, you can see that <a href="https://hg.python.org/cpython/file/v2.7.12/Python/ceval.c#l2478"><code>BUILD_SET</code> in <code>ceval.c</code></a> reads the stack from the top down:</p>\u000a\u000a<pre class="lang-c prettyprint-override"><code># oparg is the number of elements to take from the stack to add\u000afor (; --oparg &gt;= 0;) {\u000a    w = POP();\u000a    if (err == 0)\u000a        err = PySet_Add(x, w);\u000a    Py_DECREF(w);\u000a}\u000a</code></pre>\u000a\u000a<p>while the bytecode adds elements to the stack in reverse order (pushing <code>0</code> on the stack first):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from dis import dis\u000a&gt;&gt;&gt; dis(compile('{0, x, y}', '', 'eval'))\u000a  2           0 LOAD_CONST               1 (0)\u000a              3 LOAD_GLOBAL              0 (x)\u000a              6 LOAD_GLOBAL              1 (y)\u000a              9 BUILD_SET                3\u000a             12 RETURN_VALUE\u000a</code></pre>\u000a\u000a<p>The fix is to read the elements from the stack in reverse order; the <a href="https://hg.python.org/cpython/file/a8d504600c18/Python/ceval.c#l2478">Python 2.7.13 version</a> uses <code>PEEK()</code> instead of <code>POP()</code> (and a <code>STACKADJ()</code> to remove the elements from the stack afterwards):</p>\u000a\u000a<pre class="lang-c prettyprint-override"><code>for (i = oparg; i &gt; 0; i--) {\u000a    w = PEEK(i);\u000a    if (err == 0)\u000a        err = PySet_Add(x, w);\u000a    Py_DECREF(w);\u000a}\u000aSTACKADJ(-oparg);\u000a</code></pre>\u000a\u000a<p>The equality testing issue has the same root cause as the other question; the <code>Decimal()</code> class is having some equality issues with <code>complex</code> here, which was fixed in Python 3.2 (by making <a href="https://hg.python.org/cpython/rev/26685311d313/"><code>Decimal()</code> support comparisons to <code>complex</code> and a few other numeric types it didn't support before</a>).</p>\u000a
p121
sVquestion_id
p122
I40226063
sVlast_activity_date
p123
I1477376856
sVcreation_date
p124
I1477337828
sVscore
p125
I50
sVowner
p126
(dp127
Vuser_id
p128
I100297
sVprofile_image
p129
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p130
sVuser_type
p131
Vmoderator
p132
sVreputation
p133
I554897
sVlink
p134
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p135
sVdisplay_name
p136
VMartijn Pieters
p137
ssVis_accepted
p138
I01
sVlast_edit_date
p139
I1477376856
sVanswer_id
p140
I40226183
sa(dp141
Vbody
p142
V<p>In your <code>save</code> you have to have the argument <code>commit</code>. If anything overrides your form, or wants to modify what it's saving, it will do <code>save(commit=False)</code>, modify the output, and then save it itself.</p>\u000a\u000a<p>Also, your ModelForm should return the model it's saving. Usually a ModelForm's <code>save</code> will look something like:</p>\u000a\u000a<pre><code>def save(self, commit=True):\u000a    m = super(CallResultTypeForm, self).save(commit=False)\u000a    # do custom stuff\u000a    if commit:\u000a        m.save()\u000a    return m\u000a</code></pre>\u000a\u000a<p>Read up on <a href="http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#the-save-method" rel="nofollow noreferrer">the <code>save</code> method</a>.</p>\u000a\u000a<p>Finally, a lot of this ModelForm won't work just because of the way you are accessing things. Instead of <code>self.callResult</code>, you need to use <code>self.fields['callResult']</code>.</p>\u000a\u000a<p><em>UPDATE</em>: In response to your answer:</p>\u000a\u000a<p><em>Aside:</em> Why not just use <code>ManyToManyField</code>s in the Model so you don't have to do this? Seems like you're storing redundant data and making more work for yourself (and me <code>:P</code>).</p>\u000a\u000a<pre><code>from django.db.models import AutoField  \u000adef copy_model_instance(obj):  \u000a    """\u000a    Create a copy of a model instance. \u000a    M2M relationships are currently not handled, i.e. they are not copied. (Fortunately, you don't have any in this case)\u000a    See also Django #4027. From http://blog.elsdoerfer.name/2008/09/09/making-a-copy-of-a-model-instance/\u000a    """  \u000a    initial = dict([(f.name, getattr(obj, f.name)) for f in obj._meta.fields if not isinstance(f, AutoField) and not f in obj._meta.parents.values()])  \u000a    return obj.__class__(**initial)  \u000a\u000aclass CallResultTypeForm(ModelForm):\u000a    callResult = ModelMultipleChoiceField(queryset=CallResult.objects.all())\u000a    campaign = ModelMultipleChoiceField(queryset=Campaign.objects.all())\u000a    callType = ModelMultipleChoiceField(queryset=CallType.objects.all())\u000a\u000a    def save(self, commit=True, *args, **kwargs):\u000a        m = super(CallResultTypeForm, self).save(commit=False, *args, **kwargs)\u000a        results = []\u000a        for cr in self.callResult:\u000a            for c in self.campain:\u000a                for ct in self.callType:\u000a                    m_new = copy_model_instance(m)\u000a                    m_new.callResult = cr\u000a                    m_new.campaign = c\u000a                    m_new.calltype = ct\u000a                    if commit:\u000a                        m_new.save()\u000a                    results.append(m_new)\u000a         return results\u000a</code></pre>\u000a\u000a<p>This allows for inheritance of <code>CallResultTypeForm</code>, just in case that's ever necessary.</p>\u000a
p143
sVquestion_id
p144
I817284
sVlast_activity_date
p145
I1473347798
sVcreation_date
p146
I1241366050
sVscore
p147
I117
sVowner
p148
(dp149
Vuser_id
p150
I2363
sVprofile_image
p151
Vhttps://www.gravatar.com/avatar/3b9d20e6e9c3fac02471ba541ebecfaa?s=128&d=identicon&r=PG
p152
sVuser_type
p153
Vregistered
p154
sVreputation
p155
I19123
sVlink
p156
Vhttp://stackoverflow.com/users/2363/tghw
p157
sVaccept_rate
p158
I92
sVdisplay_name
p159
Vtghw
p160
ssVis_accepted
p161
I01
sVlast_edit_date
p162
I1473347798
sVanswer_id
p163
I817364
sa(dp164
Vbody
p165
V<p>You have made many correct observations already!</p>\u000a\u000a<p>Unless you'd like to seed both of the random generators, it's probably simpler in the long run to choose one generator or the other. </p>\u000a\u000a<p>For <code>numpy.random.seed()</code>, the main difficulty is that it is not thread-safe - that is, it's not safe to use if you have <a href="http://www.prasannatech.net/2008/08/introduction-to-thread-programming.html" rel="noreferrer">many different threads of execution</a>, because it's not guaranteed to work if two different threads are executing the function at the same time. If you're not using threads, and if you can reasonably expect that you won't need to rewrite your program this way in the future, <code>numpy.random.seed()</code> should be fine. If there's any reason to suspect that you may need threads in the future, it's much safer in the long run to do as suggested, and to <a href="http://stackoverflow.com/questions/5836335/consistenly-create-same-random-numpy-array/5837352#5837352">make a local instance of the <code>numpy.random.Random</code> class</a>. As far as I can tell, <code>random.random.seed()</code> is thread-safe (or at least, I haven't found any evidence to the contrary).</p>\u000a\u000a<p>The <code>numpy.random</code> library contains a few extra probability distributions commonly used in scientific research, as well as a couple of convenience functions for generating arrays of random data. The <code>random.random</code> library is a little more lightweight, and should be fine if you're not doing scientific research or other kinds of work in statistics.</p>\u000a\u000a<p>Otherwise, they both use the <a href="http://en.wikipedia.org/wiki/Mersenne_twister" rel="noreferrer">Mersenne twister sequence</a> to generate their random numbers, and they're both completely deterministic - that is, if you know a few key bits of information, it's possible to predict with absolute certainty <a href="https://jazzy.id.au/2010/09/22/cracking_random_number_generators_part_3.html" rel="noreferrer">what number will come next</a>. For this reason, neither is suitable for any serious cryptographic uses (for which you would probably want to look at something like <a href="https://www.dlitz.net/software/pycrypto/api/current/Crypto.Random.random-module.html" rel="noreferrer">Crypto.Random</a> instead). But because the sequence is so very very long, both are fine for generating random numbers in everyday programs. This is also the reason for the necessity to seed the random value - if you start in the same place each time, you'll always get the same sequence of random numbers!</p>\u000a
p166
sVquestion_id
p167
I7029993
sVlast_activity_date
p168
I1471153357
sVcreation_date
p169
I1313085367
sVscore
p170
I66
sVowner
p171
(dp172
Vuser_id
p173
I832136
sVprofile_image
p174
Vhttps://www.gravatar.com/avatar/9ecfef9f1b5ebea99b34acee52d63296?s=128&d=identicon&r=PG
p175
sVuser_type
p176
Vregistered
p177
sVreputation
p178
I4423
sVlink
p179
Vhttp://stackoverflow.com/users/832136/hannele
p180
sVaccept_rate
p181
I55
sVdisplay_name
p182
VHannele
p183
ssVis_accepted
p184
I01
sVlast_edit_date
p185
I1471153357
sVanswer_id
p186
I7030595
sa(dp187
Vbody
p188
V<p>Complete walkthrough of writing <code>setup.py</code> scripts <a href="http://docs.python.org/distutils/setupscript.html" rel="noreferrer">here</a>. (with some examples)</p>\u000a\u000a<p>If you'd like a real-world example, I could point you towards the <code>setup.py</code> scripts of a couple major projects. Django's is <a href="http://code.djangoproject.com/browser/django/trunk/setup.py" rel="noreferrer">here</a>, pyglet's is <a href="https://bitbucket.org/pyglet/pyglet/src/f48574e6c61ce5f6780608e75b72e9dd8733ec7e/setup.py" rel="noreferrer">here</a>. You can just browse the source of other projects for a file named setup.py for more examples.</p>\u000a\u000a<p>These aren't simple examples; the tutorial link I gave has those. These are more complex, but also more practical.</p>\u000a
p189
sVquestion_id
p190
I4740473
sVlast_activity_date
p191
I1469352133
sVcreation_date
p192
I1295470451
sVscore
p193
I37
sVowner
p194
(dp195
Vuser_id
p196
I399815
sVprofile_image
p197
Vhttps://www.gravatar.com/avatar/45aaf2885832e62ad4864782daa914f9?s=128&d=identicon&r=PG
p198
sVuser_type
p199
Vregistered
p200
sVreputation
p201
I44854
sVlink
p202
Vhttp://stackoverflow.com/users/399815/rafe-kettler
p203
sVaccept_rate
p204
I97
sVdisplay_name
p205
VRafe Kettler
p206
ssVis_accepted
p207
I01
sVlast_edit_date
p208
I1469352133
sVanswer_id
p209
I4740640
sa(dp210
Vbody
p211
V<p>If you need the device name and mount point associated with the file, you should call an external program to get this information. <code>df</code> will provide all the information you need -- when called as <code>df filename</code> it prints a line about the partition that contains the file.</p>\u000a\u000a<p>To give an example:</p>\u000a\u000a<pre><code>import subprocess\u000adf = subprocess.Popen(["df", "filename"], stdout=subprocess.PIPE)\u000aoutput = df.communicate()[0]\u000adevice, size, used, available, percent, mountpoint = \u005c\u000a    output.split("\u005cn")[1].split()\u000a</code></pre>\u000a\u000a<p>If you don't need device name and mount point, going with <code>os.statvfs()</code> will be better (see other answers).</p>\u000a
p212
sVquestion_id
p213
I4260116
sVlast_activity_date
p214
I1462446451
sVcreation_date
p215
I1290542025
sVscore
p216
I27
sVowner
p217
(dp218
Vuser_id
p219
I279627
sVprofile_image
p220
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p221
sVuser_type
p222
Vregistered
p223
sVreputation
p224
I252330
sVlink
p225
Vhttp://stackoverflow.com/users/279627/sven-marnach
p226
sVaccept_rate
p227
I78
sVdisplay_name
p228
VSven Marnach
p229
ssVis_accepted
p230
I01
sVlast_edit_date
p231
I1462446451
sVanswer_id
p232
I4260249
sa(dp233
Vbody
p234
V<p>Depending on the context here it could different things:</p>\u000a\u000a<h1>indexing/slicing with <code>Ellipsis</code></h1>\u000a\u000a<p>I think it's not implemented for any python class but it <em>should</em> represent an arbitary number of data structure nestings (<em>as much needed</em>). \u000aSo for example: <code>a[..., 1]</code> should return all the second elements of the innermost nested structure:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import numpy as np\u000a&gt;&gt;&gt; a = np.arange(27).reshape(3,3,3)  # 3dimensional array\u000a&gt;&gt;&gt; a[..., 1]  # this returns a slice through the array in the third dimension\u000aarray([[ 1,  4,  7],\u000a       [10, 13, 16],\u000a       [19, 22, 25]])\u000a&gt;&gt;&gt; a[0, ...]  # This returns a slice through the first dimension\u000aarray([[0, 1, 2],\u000a       [3, 4, 5],\u000a       [6, 7, 8]])\u000a</code></pre>\u000a\u000a<p>and to check for this <code>...</code> you compare it to an <code>Ellipsis</code> (this is a singleton so recommended is using <code>is</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; ... is Ellipsis\u000aTrue\u000a&gt;&gt;&gt; Ellipsis in [...]\u000aTrue\u000a# Another (more or less) equivalent alternative to the previous line:\u000a&gt;&gt;&gt; any(i is Ellipsis for i in [1, ..., 2]) \u000aTrue\u000a</code></pre>\u000a\u000a<h1>Recursive Datastructures</h1>\u000a\u000a<p>The other case in which you see an <code>[...]</code> in <strong>your output</strong> is if you have the sequence inside the sequence itself. Here it stands for an <em>infinite</em> deeply nested sequence (that's not printable). For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; alist = ['a', 'b', 'c']\u000a&gt;&gt;&gt; alist[0] = alist\u000a&gt;&gt;&gt; alist\u000a[[...], 'b', 'c']\u000a\u000a# Infinite deeply nested so you can use as many leading [0] as you want\u000a&gt;&gt;&gt; alist[0][1] \u000a'b'\u000a&gt;&gt;&gt; alist[0][0][0][0][0][1] \u000a'b'\u000a&gt;&gt;&gt; alist[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][1] \u000a'b'\u000a</code></pre>\u000a\u000a<p>You can even replace it several times:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; alist[2] = alist\u000a&gt;&gt;&gt; alist\u000a[[...], 'b', [...]]\u000a&gt;&gt;&gt; alist[1] = alist\u000a&gt;&gt;&gt; alist\u000a[[...], [...], [...]]\u000a</code></pre>\u000a\u000a<p>To test if you have any such recursion in your output you need to check if the data-structure itself is also one of the elements:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; alist in alist\u000aTrue\u000a&gt;&gt;&gt; any(i is alist for i in alist)\u000aTrue\u000a</code></pre>\u000a\u000a<p>Another way to get a more meaningful output is using <code>pprint.pprint</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import pprint\u000a&gt;&gt;&gt; pprint.pprint(alist)  # Assuming you only replaced the first element:\u000a[&lt;Recursion on list with id=1628861250120&gt;, 'b', 'c']\u000a</code></pre>\u000a
p235
sVquestion_id
p236
I36904351
sVlast_activity_date
p237
I1461870558
sVcreation_date
p238
I1461812626
sVscore
p239
I32
sVowner
p240
(dp241
Vuser_id
p242
I5393381
sVprofile_image
p243
Vhttps://www.gravatar.com/avatar/308ffa6266fda6d94bc56fbd9e9798f9?s=128&d=identicon&r=PG&f=1
p244
sVuser_type
p245
Vregistered
p246
sVreputation
p247
I28808
sVlink
p248
Vhttp://stackoverflow.com/users/5393381/mseifert
p249
sVaccept_rate
p250
I92
sVdisplay_name
p251
VMSeifert
p252
ssVis_accepted
p253
I01
sVlast_edit_date
p254
I1461870558
sVanswer_id
p255
I36904517
sa(dp256
Vbody
p257
V<p>Functions of particular interest are <code>django.utils.translation.get_language()</code> which returns the language used in the current thread. See <a href="https://docs.djangoproject.com/en/1.9/ref/utils/#django.utils.translation.get_language" rel="noreferrer">documentation</a>.</p>\u000a
p258
sVquestion_id
p259
I3356964
sVlast_activity_date
p260
I1460166421
sVcreation_date
p261
I1280348383
sVscore
p262
I85
sVowner
p263
(dp264
Vuser_id
p265
I401639
sVprofile_image
p266
Vhttps://www.gravatar.com/avatar/cc8901d091cf4f2bd2761e76f8a1eda7?s=128&d=identicon&r=PG
p267
sVuser_type
p268
Vregistered
p269
sVreputation
p270
I987
sVlink
p271
Vhttp://stackoverflow.com/users/401639/micha480
p272
sVdisplay_name
p273
Vmicha480
p274
ssVis_accepted
p275
I01
sVlast_edit_date
p276
I1460166421
sVanswer_id
p277
I3357141
sa(dp278
Vbody
p279
V<p>You want to have a look at <a href="https://docs.djangoproject.com/en/1.9/ref/models/fields/#filefield-and-fieldfile">FileField and FieldFile</a> in the Django docs, and especially <a href="https://docs.djangoproject.com/en/1.9/ref/models/fields/#django.db.models.fields.files.FieldFile.save">FieldFile.save()</a>.</p>\u000a\u000a<p>Basically, a field declared as a <code>FileField</code>, when accessed, gives you an instance of class <code>FieldFile</code>, which gives you several methods to interact with the underlying file. So, what you need to do is:</p>\u000a\u000a<pre><code>self.license_file.save(new_name, new_contents)\u000a</code></pre>\u000a\u000a<p>where <code>new_name</code> is the filename you wish assigned and <code>new_contents</code> is the content of the file. Note that <code>new_contents</code> must be an instance of either <code>django.core.files.File</code> or <code>django.core.files.base.ContentFile</code> (see given links to manual for the details). The two choices boil down to:</p>\u000a\u000a<pre><code># Using File\u000af = open('/path/to/file')\u000aself.license_file.save(new_name, File(f))\u000a# Using ContentFile\u000aself.license_file.save(new_name, ContentFile('A string with the file content'))\u000a</code></pre>\u000a
p280
sVquestion_id
p281
I7514964
sVlast_activity_date
p282
I1457084201
sVcreation_date
p283
I1316696860
sVscore
p284
I65
sVowner
p285
(dp286
Vuser_id
p287
I644655
sVprofile_image
p288
Vhttps://www.gravatar.com/avatar/28806db5fe8098d11a8a69cc3464fd8e?s=128&d=identicon&r=PG
p289
sVuser_type
p290
Vregistered
p291
sVreputation
p292
I2545
sVlink
p293
Vhttp://stackoverflow.com/users/644655/tawmas
p294
sVdisplay_name
p295
Vtawmas
p296
ssVis_accepted
p297
I01
sVlast_edit_date
p298
I1457084201
sVanswer_id
p299
I7515224
sa(dp300
Vbody
p301
V<p>I guess you would have here to add a new <code>ModelMultipleChoiceField</code> to your <code>PizzaForm</code>, and manually link that form field with the model field, as Django won't do that automatically for you.</p>\u000a\u000a<p>The following snippet might be helpful :</p>\u000a\u000a<pre><code>class PizzaForm(forms.ModelForm):\u000a    class Meta:\u000a        model = Pizza\u000a\u000a    # Representing the many to many related field in Pizza\u000a    toppings = forms.ModelMultipleChoiceField(queryset=Topping.objects.all())\u000a\u000a    # Overriding __init__ here allows us to provide initial\u000a    # data for 'toppings' field\u000a    def __init__(self, *args, **kwargs):\u000a        # Only in case we build the form from an instance\u000a        # (otherwise, 'toppings' list should be empty)\u000a        if kwargs.get('instance'):\u000a            # We get the 'initial' keyword argument or initialize it\u000a            # as a dict if it didn't exist.                \u000a            initial = kwargs.setdefault('initial', {})\u000a            # The widget for a ModelMultipleChoiceField expects\u000a            # a list of primary key for the selected data.\u000a            initial['toppings'] = [t.pk for t in kwargs['instance'].topping_set.all()]\u000a\u000a        forms.ModelForm.__init__(self, *args, **kwargs)\u000a\u000a    # Overriding save allows us to process the value of 'toppings' field    \u000a    def save(self, commit=True):\u000a        # Get the unsave Pizza instance\u000a        instance = forms.ModelForm.save(self, False)\u000a\u000a        # Prepare a 'save_m2m' method for the form,\u000a        old_save_m2m = self.save_m2m\u000a        def save_m2m():\u000a           old_save_m2m()\u000a           # This is where we actually link the pizza with toppings\u000a           instance.topping_set.clear()\u000a           for topping in self.cleaned_data['toppings']:\u000a               instance.topping_set.add(topping)\u000a        self.save_m2m = save_m2m\u000a\u000a        # Do we need to save all changes now?\u000a        if commit:\u000a            instance.save()\u000a            self.save_m2m()\u000a\u000a        return instance\u000a</code></pre>\u000a\u000a<p>This <code>PizzaForm</code> can then be used everywhere, even in the admin :</p>\u000a\u000a<pre><code># yourapp/admin.py\u000afrom django.contrib.admin import site, ModelAdmin\u000afrom yourapp.models import Pizza\u000afrom yourapp.forms import PizzaForm\u000a\u000aclass PizzaAdmin(ModelAdmin):\u000a  form = PizzaForm\u000a\u000asite.register(Pizza, PizzaAdmin)\u000a</code></pre>\u000a\u000a<h3>Note</h3>\u000a\u000a<p>The <code>save()</code> method might be a bit too verbose, but you can simplify it if you don't need to support the <code>commit=False</code> situation, it will then be like that :</p>\u000a\u000a<pre><code>def save(self):\u000a  instance = forms.ModelForm.save(self)\u000a  instance.topping_set.clear()\u000a  for topping in self.cleaned_data['toppings']:\u000a    instance.topping_set.add(topping)\u000a</code></pre>\u000a
p302
sVquestion_id
p303
I2216974
sVlast_activity_date
p304
I1456950889
sVcreation_date
p305
I1266222669
sVscore
p306
I88
sVowner
p307
(dp308
Vuser_id
p309
I260677
sVprofile_image
p310
Vhttps://www.gravatar.com/avatar/c2f120b3733e385fcced68d4831c2eb6?s=128&d=identicon&r=PG
p311
sVuser_type
p312
Vregistered
p313
sVreputation
p314
I5243
sVlink
p315
Vhttp://stackoverflow.com/users/260677/cl%c3%a9ment
p316
sVdisplay_name
p317
VCl&#233;ment
p318
ssVis_accepted
p319
I01
sVlast_edit_date
p320
I1456950889
sVanswer_id
p321
I2264722
sa(dp322
Vbody
p323
V<p>When in doubt, leave it "public" - I mean, do not add anything to obscure the name of your attribute. If you have a class with some internal value, do not bother about it. Instead of writing:</p>\u000a\u000a<pre><code>class Stack(object):\u000a\u000a    def __init__(self):\u000a        self.__storage = [] # Too uptight\u000a\u000a    def push(self, value):\u000a        self.__storage.append(value)\u000a</code></pre>\u000a\u000a<p>write this by default:</p>\u000a\u000a<pre><code>class Stack(object):\u000a\u000a    def __init__(self):\u000a        self.storage = [] # No mangling\u000a\u000a    def push(self, value):\u000a        self.storage.append(value)\u000a</code></pre>\u000a\u000a<p>This is for sure a controversial way of doing things. Python newbies just hate it and even some old Python guys despise this default - but it is the default anyway, so I really recommend you to follow it, even if you feel uncomfortable.</p>\u000a\u000a<p>If you <em>really</em> want to send the message to your users saying "Can't touch this!", the usual way is to precede the variable with <em>one</em> underscore. This is just a convention, but people understand it and take double care when dealing with such stuff:</p>\u000a\u000a<pre><code>class Stack(object):\u000a\u000a    def __init__(self):\u000a        self._storage = [] # This is ok but pythonistas use to be relaxed about it\u000a\u000a    def push(self, value):\u000a        self._storage.append(value)\u000a</code></pre>\u000a\u000a<p>This can be useful, too, for avoiding conflict between properties names and attribute names:</p>\u000a\u000a<pre><code> class Person(object):\u000a     def __init__(self, name, age):\u000a         self.name = name\u000a         self._age = age if age &gt;= 0 else 0\u000a\u000a     @property\u000a     def age(self):\u000a         return self._age\u000a\u000a     @age.setter\u000a     def age(self, age):\u000a         if age &gt;= 0:\u000a             self._age = age\u000a         else:\u000a             self._age  = 0\u000a</code></pre>\u000a\u000a<p>What about the double underscore? Well, the double underscore magic is used mainly <a href="http://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private/70900#70900">to avoid accidental overloading of methods and name conflicts with superclasses attributes</a>. It can be quite useful if you write a class that is expected to be extended many times.</p>\u000a\u000a<p>If you want to use it for other purposes, you can, but it is neither usual nor recommended.</p>\u000a\u000a<p><strong>EDIT</strong>: Why is this so? Well, the usual Python style does not emphasize making things private - on the contrary! There is a lot of reasons for that - most of them controversial... Let us see some of them.</p>\u000a\u000a<h1>Python has properties</h1>\u000a\u000a<p>Most OO languages today use the opposite approach: what should not be used should not be visible, so attributes should be private. Theoretically, this would yield more manageable, less coupled classes, because no one would change values inside the objects recklessly.</p>\u000a\u000a<p>However, this is not so simple. For example, Java classes do have a lot attributes <em>and</em> getters that just <em>get</em> the values <em>and</em> setters that just <em>set</em> the values. You need, let us say, seven lines of code to declare a single attribute - which a Python programmer would say is needless complex. Also, in practice you just write this lot of code to get one public field, since you can change its value using the getters and setters.</p>\u000a\u000a<p>So why to follow this private-by-default policy? Just make your attributes public by default. Of course, it is problematic in Java, because if you decide to add some validation to your attribute, it would require you to change all</p>\u000a\u000a<pre><code>person.age = age;\u000a</code></pre>\u000a\u000a<p>in your code to, let us say,</p>\u000a\u000a<pre><code>person.setAge(age);\u000a</code></pre>\u000a\u000a<p>being <code>setAge()</code>:</p>\u000a\u000a<pre><code>public void setAge(int age) {\u000a    if (age &gt;= 0) {\u000a        this.age = age;\u000a    } else {\u000a        this.age = 0;\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<p>So in Java (and other languages) the default is to use getters and setters anyway, because they can be annoying to write but can spare you a lot of time if you find yourself in the situation I've described.</p>\u000a\u000a<p>However, you do not need to do it in Python, since Python have properties. If you had this class:</p>\u000a\u000a<pre><code> class Person(object):\u000a     def __init__(self, name, age):\u000a         self.name = name\u000a         self.age = age\u000a</code></pre>\u000a\u000a<p>and then you decide to validate ages, you do not need to change the <code>person.age = age</code> pieces of your code. Just add a property (as shown below)</p>\u000a\u000a<pre><code> class Person(object):\u000a     def __init__(self, name, age):\u000a         self.name = name\u000a         self._age = age if age &gt;= 0 else 0\u000a\u000a     @property\u000a     def age(self):\u000a         return self._age\u000a\u000a     @age.setter\u000a     def age(self, age):\u000a         if age &gt;= 0:\u000a             self._age = age\u000a         else:\u000a             self._age  = 0\u000a</code></pre>\u000a\u000a<p>If you can do it and still use  <code>person.age = age</code>, why would you add private fields and getters and setters?</p>\u000a\u000a<p>(Also, see <a href="http://dirtsimple.org/2004/12/python-is-not-java.html">Python is not Java</a> and <a href="http://www.javaworld.com/javaworld/jw-09-2003/jw-0905-toolbox.html?page=1">this article about the harms of using getters and setters</a>.).</p>\u000a\u000a<h1>Everything is visible anyway - and trying to hide just complicates your work</h1>\u000a\u000a<p>Even in languages where there are private attributes, you can access them through some kind of reflection/introspection library. And people do it a lot of times, in frameworks and for solving urgent needs. The problem is that introspection libraries are just a hard way of doing what you could do with public attributes.</p>\u000a\u000a<p>Since Python is a very dynamic language, it is just counterproductive to add this burden to your classes.</p>\u000a\u000a<h1>The problem is not to be possible to see - is to be <em>required</em> to see</h1>\u000a\u000a<p>For a Pythonista, encapsulation is not the inability of seeing internals of classes, but the possibility of avoiding to look at it. I mean, encapsulation is the property of a component which allows it to be used without the user being concerned about the internal details. If you can use a component without bothering yourself about its implementation, then it is encapsulated (in the opinion of a Python programmer).</p>\u000a\u000a<p>Now, if you wrote your class in such a way you can use it without having to think about implementation details, there is no problem if you <em>want</em> to look inside the class for some reason. The question is: your API should be good and the rest is detail.</p>\u000a\u000a<h1>Guido said so</h1>\u000a\u000a<p>Well, this is not controversial: <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=211430">he said so, actually</a>. (Look for "open kimono.")</p>\u000a\u000a<h1>This is culture</h1>\u000a\u000a<p>Yes, there are some reasons, but no killing reason. This is mostly a cultural aspect of programming in Python. Frankly, it could be the other way, too - but it is not. Also, you could just ask the other way around: why do some languages use private attributes by default? For the same main reason for the Python practice: because it is the culture of these languages, and each choice has advantages and disadvantages.</p>\u000a\u000a<p>Since this culture grew up, you are well advised to follow it. Otherwise, you will get annoyed by Python programmers saying to you to remove the <code>__</code> of your code when you asked a question in Stack Overflow :)</p>\u000a
p324
sVquestion_id
p325
I7456807
sVlast_activity_date
p326
I1454328396
sVcreation_date
p327
I1316283414
sVscore
p328
I102
sVowner
p329
(dp330
Vuser_id
p331
I287976
sVprofile_image
p332
Vhttps://www.gravatar.com/avatar/8cf3090cda1c829f3f8df0a3796fc60c?s=128&d=identicon&r=PG
p333
sVuser_type
p334
Vregistered
p335
sVreputation
p336
I15739
sVlink
p337
Vhttp://stackoverflow.com/users/287976/brandizzi
p338
sVaccept_rate
p339
I91
sVdisplay_name
p340
Vbrandizzi
p341
ssVis_accepted
p342
I01
sVlast_edit_date
p343
I1454328396
sVanswer_id
p344
I7456865
sa(dp345
Vbody
p346
V<p>Soviut's advice for lxml objectify is good. With a specially subclassed simplejson, you can turn an lxml objectify result into json.</p>\u000a\u000a<pre><code>import simplejson as json\u000aimport lxml\u000a\u000aclass objectJSONEncoder(json.JSONEncoder):\u000a  """A specialized JSON encoder that can handle simple lxml objectify types\u000a      &gt;&gt;&gt; from lxml import objectify\u000a      &gt;&gt;&gt; obj = objectify.fromstring("&lt;Book&gt;&lt;price&gt;1.50&lt;/price&gt;&lt;author&gt;W. Shakespeare&lt;/author&gt;&lt;/Book&gt;")       \u000a      &gt;&gt;&gt; objectJSONEncoder().encode(obj)\u000a      '{"price": 1.5, "author": "W. Shakespeare"}'       \u000a """\u000a\u000a\u000a    def default(self,o):\u000a        if isinstance(o, lxml.objectify.IntElement):\u000a            return int(o)\u000a        if isinstance(o, lxml.objectify.NumberElement) or isinstance(o, lxml.objectify.FloatElement):\u000a            return float(o)\u000a        if isinstance(o, lxml.objectify.ObjectifiedDataElement):\u000a            return str(o)\u000a        if hasattr(o, '__dict__'):\u000a            #For objects with a __dict__, return the encoding of the __dict__\u000a            return o.__dict__\u000a        return json.JSONEncoder.default(self, o)\u000a</code></pre>\u000a\u000a<p>See the docstring for example of usage, essentially you pass the result of lxml <code>objectify</code> to the encode method of an instance of <code>objectJSONEncoder</code></p>\u000a\u000a<p>Note that Koen's point is very valid here, the solution above only works for simply nested xml and doesn't include the name of root elements. This could be fixed.</p>\u000a\u000a<p>I've included this class in a gist here: <a href="http://gist.github.com/345559" rel="nofollow noreferrer">http://gist.github.com/345559</a></p>\u000a
p347
sVquestion_id
p348
I471946
sVlast_activity_date
p349
I1446103993
sVcreation_date
p350
I1269649018
sVscore
p351
I20
sVowner
p352
(dp353
Vuser_id
p354
I149416
sVprofile_image
p355
Vhttps://www.gravatar.com/avatar/48bd02a706b80b9c5ebf737ee020c247?s=128&d=identicon&r=PG
p356
sVuser_type
p357
Vregistered
p358
sVreputation
p359
I1608
sVlink
p360
Vhttp://stackoverflow.com/users/149416/anton-i-sipos
p361
sVaccept_rate
p362
I73
sVdisplay_name
p363
VAnton I. Sipos
p364
ssVis_accepted
p365
I01
sVlast_edit_date
p366
I1446103993
sVanswer_id
p367
I2527623
sa(dp368
Vbody
p369
V<p>Header injection isn't a factor in how you send the mail, it's a factor in how you construct the mail.  Check the <a href="https://docs.python.org/2/library/email.html" rel="noreferrer">email</a> package, construct the mail with that, serialise it, and send it to <code>/usr/sbin/sendmail</code> using the <a href="https://docs.python.org/2/library/subprocess.html" rel="noreferrer">subprocess</a> module:</p>\u000a\u000a<pre><code>from email.mime.text import MIMEText\u000afrom subprocess import Popen, PIPE\u000a\u000amsg = MIMEText("Here is the body of my message")\u000amsg["From"] = "me@example.com"\u000amsg["To"] = "you@example.com"\u000amsg["Subject"] = "This is the subject."\u000ap = Popen(["/usr/sbin/sendmail", "-t", "-oi"], stdin=PIPE)\u000ap.communicate(msg.as_string())\u000a</code></pre>\u000a
p370
sVquestion_id
p371
I73781
sVlast_activity_date
p372
I1434004844
sVcreation_date
p373
I1221581557
sVscore
p374
I87
sVowner
p375
(dp376
Vuser_id
p377
I8427
sVprofile_image
p378
Vhttps://i.stack.imgur.com/BwTs7.jpg?s=128&g=1
p379
sVuser_type
p380
Vregistered
p381
sVreputation
p382
I54916
sVlink
p383
Vhttp://stackoverflow.com/users/8427/jim
p384
sVdisplay_name
p385
VJim
p386
ssVis_accepted
p387
I01
sVlast_edit_date
p388
I1434004844
sVanswer_id
p389
I74084
sa(dp390
Vbody
p391
V<p><a href="http://www.python.org/dev/peps/pep-3134/">Exception chaining</a> is only available in Python 3, where you can write:</p>\u000a\u000a<pre><code>try:\u000a    v = {}['a']\u000aexcept KeyError as e:\u000a    raise ValueError('failed') from e\u000a</code></pre>\u000a\u000a<p>which yields an output like</p>\u000a\u000a<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):\u000a  File "t.py", line 2, in &lt;module&gt;\u000a    v = {}['a']\u000aKeyError: 'a'\u000a\u000aThe above exception was the direct cause of the following exception:\u000a\u000aTraceback (most recent call last):\u000a  File "t.py", line 4, in &lt;module&gt;\u000a    raise ValueError('failed') from e\u000aValueError: failed\u000a</code></pre>\u000a\u000a<p>In most cases, you don't even need the <code>from</code>; Python 3 will by default show all exceptions that occured during exception handling, like this:</p>\u000a\u000a<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):\u000a  File "t.py", line 2, in &lt;module&gt;\u000a    v = {}['a']\u000aKeyError: 'a'\u000a\u000aDuring handling of the above exception, another exception occurred:\u000a\u000aTraceback (most recent call last):\u000a  File "t.py", line 4, in &lt;module&gt;\u000a    raise ValueError('failed')\u000aValueError: failed\u000a</code></pre>\u000a\u000a<p>What you can do in <strong>Python 2</strong> is adding custom attributes to your exception class, like:</p>\u000a\u000a<pre><code>class MyError(Exception):\u000a    def __init__(self, message, cause):\u000a        super(MyError, self).__init__(message + u', caused by ' + repr(cause))\u000a        self.cause = cause\u000a\u000atry:\u000a    v = {}['a']\u000aexcept KeyError as e:\u000a    raise MyError('failed', e)\u000a</code></pre>\u000a
p392
sVquestion_id
p393
I16414744
sVlast_activity_date
p394
I1432942809
sVcreation_date
p395
I1367916482
sVscore
p396
I65
sVowner
p397
(dp398
Vuser_id
p399
I35070
sVprofile_image
p400
Vhttps://www.gravatar.com/avatar/6f92354195e8874dbee44d5c8714d506?s=128&d=identicon&r=PG
p401
sVuser_type
p402
Vregistered
p403
sVreputation
p404
I151504
sVlink
p405
Vhttp://stackoverflow.com/users/35070/phihag
p406
sVaccept_rate
p407
I77
sVdisplay_name
p408
Vphihag
p409
ssVis_accepted
p410
I01
sVlast_edit_date
p411
I1432942809
sVanswer_id
p412
I16414892
sa(dp413
Vbody
p414
V<p>It turns out there are three options (including the two already answered earlier):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import platform\u000a&gt;&gt;&gt; import socket\u000a&gt;&gt;&gt; import os\u000a&gt;&gt;&gt; platform.node()\u000a'DARK-TOWER'\u000a&gt;&gt;&gt; socket.gethostname()\u000a'DARK-TOWER'\u000a&gt;&gt;&gt; os.environ['COMPUTERNAME']\u000a'DARK-TOWER'\u000a</code></pre>\u000a
p415
sVquestion_id
p416
I799767
sVlast_activity_date
p417
I1428848284
sVcreation_date
p418
I1240952242
sVscore
p419
I93
sVowner
p420
(dp421
Vuser_id
p422
I52509
sVprofile_image
p423
Vhttps://www.gravatar.com/avatar/006567b1a71d2990a70ce61bc0baadb3?s=128&d=identicon&r=PG
p424
sVuser_type
p425
Vregistered
p426
sVreputation
p427
I12180
sVlink
p428
Vhttp://stackoverflow.com/users/52509/eric-palakovich-carr
p429
sVaccept_rate
p430
I95
sVdisplay_name
p431
VEric Palakovich Carr
p432
ssVis_accepted
p433
I01
sVlast_edit_date
p434
I1428848284
sVanswer_id
p435
I799799
sa(dp436
Vbody
p437
V<p>This looks like what you actually want. It applies the same approach of <a href="http://stackoverflow.com/questions/6963035/">this answer</a> to your specific case:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000a\u000afig, ax = plt.subplots(nrows=3, ncols=3, sharex=True, sharey=True, figsize=(6, 6))\u000a\u000afig.text(0.5, 0.04, 'common X', ha='center')\u000afig.text(0.04, 0.5, 'common Y', va='center', rotation='vertical')\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/IrJNO.png" alt="Multiple plots with common axes label"></p>\u000a
p438
sVquestion_id
p439
I16150819
sVlast_activity_date
p440
I1415872718
sVcreation_date
p441
I1415811418
sVscore
p442
I67
sVowner
p443
(dp444
Vuser_id
p445
I3753826
sVprofile_image
p446
Vhttps://i.stack.imgur.com/lWm7m.jpg?s=128&g=1
p447
sVuser_type
p448
Vregistered
p449
sVreputation
p450
I2205
sVlink
p451
Vhttp://stackoverflow.com/users/3753826/divenex
p452
sVaccept_rate
p453
I75
sVdisplay_name
p454
Vdivenex
p455
ssVis_accepted
p456
I01
sVlast_edit_date
p457
I1415872718
sVanswer_id
p458
I26892326
sa(dp459
Vbody
p460
V<p><strong>EDIT 2: To answer the OP new requirement</strong></p>\u000a\u000a<pre><code>ranges = []\u000afor key, group in groupby(enumerate(data), lambda (index, item): index - item):\u000a    group = map(itemgetter(1), group)\u000a    if len(group) &gt; 1:\u000a        ranges.append(xrange(group[0], group[-1]))\u000a    else:\u000a        ranges.append(group[0])\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre><code>[xrange(2, 5), xrange(12, 17), 20]\u000a</code></pre>\u000a\u000a<p>You can replace xrange with range or any other custom class.</p>\u000a\u000a<hr>\u000a\u000a<p>Python docs have a very neat <a href="https://docs.python.org/2.6/library/itertools.html#examples" rel="noreferrer">recipe</a> for this:</p>\u000a\u000a<pre><code>from operator import itemgetter\u000afrom itertools import groupby\u000adata = [2, 3, 4, 5, 12, 13, 14, 15, 16, 17]\u000afor k, g in groupby(enumerate(data), lambda (i,x):i-x):\u000a    print map(itemgetter(1), g)\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre><code>[2, 3, 4, 5]\u000a[12, 13, 14, 15, 16, 17]\u000a</code></pre>\u000a\u000a<p>If you want to get the exact same output, you can do this:</p>\u000a\u000a<pre><code>ranges = []\u000afor k, g in groupby(enumerate(data), lambda (i,x):i-x):\u000a    group = map(itemgetter(1), g)\u000a    ranges.append((group[0], group[-1]))\u000a</code></pre>\u000a\u000a<p>output:</p>\u000a\u000a<pre><code>[(2, 5), (12, 17)]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>EDIT:</strong> The example is already explained in the documentation but maybe I should explain it more:</p>\u000a\u000a<blockquote>\u000a  <p>The key to the solution is\u000a  differencing with a range so that\u000a  consecutive numbers all appear in same\u000a  group.</p>\u000a</blockquote>\u000a\u000a<p>If the data was: <code>[2, 3, 4, 5, 12, 13, 14, 15, 16, 17]</code>\u000aThen <code>groupby(enumerate(data), lambda (i,x):i-x)</code> is equivalent of the following:</p>\u000a\u000a<pre><code>groupby(\u000a    [(0, 2), (1, 3), (2, 4), (3, 5), (4, 12),\u000a    (5, 13), (6, 14), (7, 15), (8, 16), (9, 17)],\u000a    lambda (i,x):i-x\u000a)\u000a</code></pre>\u000a\u000a<p>The lambda function subtracts the element index from the element value. So when you apply the lambda on each item. You'll get the following keys for groupby:</p>\u000a\u000a<pre><code>[-2, -2, -2, -2, -8, -8, -8, -8, -8, -8]\u000a</code></pre>\u000a\u000a<p>groupby groups elements by equal key value, so the first 4 elements will be grouped together and so forth.</p>\u000a\u000a<p>I hope this makes it more readable. </p>\u000a
p461
sVquestion_id
p462
I2154249
sVlast_activity_date
p463
I1411597661
sVcreation_date
p464
I1264681572
sVscore
p465
I85
sVowner
p466
(dp467
Vuser_id
p468
I97828
sVprofile_image
p469
Vhttps://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG
p470
sVuser_type
p471
Vregistered
p472
sVreputation
p473
I64017
sVlink
p474
Vhttp://stackoverflow.com/users/97828/nadia-alramli
p475
sVdisplay_name
p476
VNadia Alramli
p477
ssVis_accepted
p478
I01
sVlast_edit_date
p479
I1411597661
sVanswer_id
p480
I2154437
sa(dp481
Vbody
p482
V<p>Import seaborn like this:</p>\u000a\u000a<pre><code>import seaborn.apionly as sns\u000a</code></pre>\u000a\u000a<p>and then you should be able to use <code>sns.distplot</code> but maintain the default matplotlib styling + your personal rc configuration.</p>\u000a
p483
sVquestion_id
p484
I25393936
sVlast_activity_date
p485
I1408487256
sVcreation_date
p486
I1408487256
sVscore
p487
I62
sVowner
p488
(dp489
Vuser_id
p490
I1533576
sVprofile_image
p491
Vhttps://www.gravatar.com/avatar/7cd43cc3fa88edc6f2dbdad5fcbc85c1?s=128&d=identicon&r=PG
p492
sVuser_type
p493
Vregistered
p494
sVreputation
p495
I15110
sVlink
p496
Vhttp://stackoverflow.com/users/1533576/mwaskom
p497
sVaccept_rate
p498
I63
sVdisplay_name
p499
Vmwaskom
p500
ssVis_accepted
p501
I01
sVanswer_id
p502
I25393997
sa(dp503
Vbody
p504
V<p>If I had to guess, you did this:</p>\u000a\u000a<pre><code>import datetime\u000a</code></pre>\u000a\u000a<p>at the top of your code.  This means that you have to do this:</p>\u000a\u000a<pre><code>datetime.datetime.strptime(date, "%Y-%m-%d")\u000a</code></pre>\u000a\u000a<p>to access the <code>strptime</code> method.  Or, you could change the import statement to this:</p>\u000a\u000a<pre><code>from datetime import datetime\u000a</code></pre>\u000a\u000a<p>and access it as you are.</p>\u000a\u000a<p>The people who made the <a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer"><code>datetime</code> module</a> also named their <a href="https://docs.python.org/3/library/datetime.html#available-types" rel="noreferrer">class <code>datetime</code></a>:</p>\u000a\u000a<pre><code>#module  class    method\u000adatetime.datetime.strptime(date, "%Y-%m-%d")\u000a</code></pre>\u000a
p505
sVquestion_id
p506
I19480028
sVlast_activity_date
p507
I1405266254
sVcreation_date
p508
I1382287597
sVscore
p509
I120
sVowner
p510
(dp511
Vuser_id
p512
I2555451
sVprofile_image
p513
Vhttps://i.stack.imgur.com/d8F3H.jpg?s=128&g=1
p514
sVuser_type
p515
Vregistered
p516
sVreputation
p517
I83342
sVlink
p518
Vhttp://stackoverflow.com/users/2555451/icodez
p519
sVaccept_rate
p520
I100
sVdisplay_name
p521
ViCodez
p522
ssVis_accepted
p523
I01
sVlast_edit_date
p524
I1405266254
sVanswer_id
p525
I19480045
sa(dp526
Vbody
p527
V<p>The standard approach is to use the <a href="https://docs.python.org/2/library/select.html" rel="noreferrer">select</a> module.</p>\u000a\u000a<p>However, this doesn't work on Windows.  For that, you can use the <a href="https://docs.python.org/2/library/msvcrt.html#console-i-o" rel="noreferrer">msvcrt</a> module's keyboard polling.</p>\u000a\u000a<p>Often, this is done with multiple threads -- one per device being "watched" plus the background processes that might need to be interrupted by the device.</p>\u000a
p528
sVquestion_id
p529
I292095
sVlast_activity_date
p530
I1402998874
sVcreation_date
p531
I1226768940
sVscore
p532
I22
sVowner
p533
(dp534
Vuser_id
p535
I10661
sVprofile_image
p536
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p537
sVuser_type
p538
Vregistered
p539
sVreputation
p540
I277525
sVlink
p541
Vhttp://stackoverflow.com/users/10661/s-lott
p542
sVaccept_rate
p543
I92
sVdisplay_name
p544
VS.Lott
p545
ssVis_accepted
p546
I01
sVlast_edit_date
p547
I1402998874
sVanswer_id
p548
I292770
sa(dp549
Vbody
p550
V<p>It looks like <code>get-pip.py</code> has been updated to use the environment variables <code>http_proxy</code> and <code>https_proxy</code>.</p>\u000a\u000a<p>Windows:</p>\u000a\u000a<pre><code>set http_proxy=http://proxy.myproxy.com\u000aset https_proxy=https://proxy.myproxy.com\u000apython get-pip.py\u000a</code></pre>\u000a\u000a<p>Linux/OS X:</p>\u000a\u000a<pre><code>export http_proxy=http://proxy.myproxy.com\u000aexport https_proxy=https://proxy.myproxy.com\u000asudo -E python get-pip.py\u000a</code></pre>\u000a\u000a<p>However if this still doesn't work for you, you can always install pip through a proxy using <a href="https://pypi.python.org/pypi/setuptools">setuptools</a>' <code>easy_install</code> by setting the same environment variables.</p>\u000a\u000a<p>Windows:</p>\u000a\u000a<pre><code>set http_proxy=http://proxy.myproxy.com\u000aset https_proxy=https://proxy.myproxy.com\u000aeasy_install pip\u000a</code></pre>\u000a\u000a<p>Linux/OS X:</p>\u000a\u000a<pre><code>export http_proxy=http://proxy.myproxy.com\u000aexport https_proxy=https://proxy.myproxy.com\u000asudo -E easy_install pip\u000a</code></pre>\u000a\u000a<p>Then once it's installed, use:</p>\u000a\u000a<pre><code>pip install --proxy="user:password@server:port" packagename\u000a</code></pre>\u000a\u000a<p>From the <a href="http://manpages.ubuntu.com/manpages/lucid/man1/pip.1.html">pip man page</a>:</p>\u000a\u000a<blockquote>\u000a  <p>--proxy<br>\u000a             Have pip use a proxy server to access sites. This can be specified\u000a             using "user:password@proxy.server:port" notation. If the password\u000a             is left out, pip will ask for it.</p>\u000a</blockquote>\u000a
p551
sVquestion_id
p552
I11726881
sVlast_activity_date
p553
I1402468137
sVcreation_date
p554
I1343671433
sVscore
p555
I94
sVowner
p556
(dp557
Vuser_id
p558
I203705
sVprofile_image
p559
Vhttps://www.gravatar.com/avatar/ef847bdde7b4a6e07b874da7c59f287b?s=128&d=identicon&r=PG
p560
sVuser_type
p561
Vregistered
p562
sVreputation
p563
I10835
sVlink
p564
Vhttp://stackoverflow.com/users/203705/ben-burns
p565
sVaccept_rate
p566
I69
sVdisplay_name
p567
VBen Burns
p568
ssVis_accepted
p569
I01
sVlast_edit_date
p570
I1402468137
sVanswer_id
p571
I11727032
sa(dp572
Vbody
p573
V<p>In Python, this:</p>\u000a\u000a<pre><code>my_object.method("foo")\u000a</code></pre>\u000a\u000a<p>... is <a href="http://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a>, which the interpreter translates behind the scenes into:</p>\u000a\u000a<pre><code>MyClass.method(my_object, "foo")\u000a</code></pre>\u000a\u000a<p>... which, as you can see, does indeed have two arguments - it's just that the first one is implicit, from the point of view of the caller.</p>\u000a\u000a<p>This is because most methods do some work with the object they're called on, so there needs to be some way for that object to be referred to inside the method. By convention, this first argument is called <code>self</code> inside the method definition:</p>\u000a\u000a<pre><code>class MyNewClass:\u000a\u000a    def method(self, arg):\u000a        print(self)\u000a        print(arg)\u000a</code></pre>\u000a\u000a<p>If you call <code>method("foo")</code> on an instance of <code>MyNewClass</code>, it works as expected:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; my_new_object = MyNewClass()\u000a&gt;&gt;&gt; my_new_object.method("foo")\u000a&lt;__main__.MyNewClass object at 0x29045d0&gt;\u000afoo\u000a</code></pre>\u000a\u000a<p>Occasionally (but not often), you really <em>don't</em> care about the object that your method is bound to, and in that circumstance, you can <a href="https://docs.python.org/3/glossary.html#term-decorator">decorate</a> the method with the builtin <a href="https://docs.python.org/3/library/functions.html#staticmethod"><code>staticmethod()</code></a> function to say so:</p>\u000a\u000a<pre><code>class MyOtherClass:\u000a\u000a    @staticmethod\u000a    def method(arg):\u000a        print(arg)\u000a</code></pre>\u000a\u000a<p>... in which case you don't need to add a <code>self</code> argument to the method definition, and it still works:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; my_other_object = MyOtherClass()\u000a&gt;&gt;&gt; my_other_object.method("foo")\u000afoo\u000a</code></pre>\u000a
p574
sVquestion_id
p575
I23944657
sVlast_activity_date
p576
I1401406052
sVcreation_date
p577
I1401406052
sVscore
p578
I87
sVowner
p579
(dp580
Vuser_id
p581
I1014938
sVprofile_image
p582
Vhttps://i.stack.imgur.com/KHowT.png?s=128&g=1
p583
sVuser_type
p584
Vregistered
p585
sVreputation
p586
I21671
sVlink
p587
Vhttp://stackoverflow.com/users/1014938/zero-piraeus
p588
sVaccept_rate
p589
I100
sVdisplay_name
p590
VZero Piraeus
p591
ssVis_accepted
p592
I01
sVanswer_id
p593
I23944658
sa(dp594
Vbody
p595
V<p>Got an answer from the Scipy user group:</p>\u000a\u000a<blockquote>\u000a  <p>A csr_matrix has 3 data attributes that matter: <code>.data</code>, <code>.indices</code>, and <code>.indptr</code>. All are simple ndarrays, so <code>numpy.save</code> will work on them. Save the three arrays with <code>numpy.save</code> or <code>numpy.savez</code>, load them back with <code>numpy.load</code>, and then recreate the sparse matrix object with:</p>\u000a\u000a<pre><code>new_csr = csr_matrix((data, indices, indptr), shape=(M, N))\u000a</code></pre>\u000a</blockquote>\u000a\u000a<p>So for example:</p>\u000a\u000a<pre><code>def save_sparse_csr(filename,array):\u000a    np.savez(filename,data = array.data ,indices=array.indices,\u000a             indptr =array.indptr, shape=array.shape )\u000a\u000adef load_sparse_csr(filename):\u000a    loader = np.load(filename)\u000a    return csr_matrix((  loader['data'], loader['indices'], loader['indptr']),\u000a                         shape = loader['shape'])\u000a</code></pre>\u000a
p596
sVquestion_id
p597
I8955448
sVlast_activity_date
p598
I1401118441
sVcreation_date
p599
I1327361589
sVscore
p600
I63
sVowner
p601
(dp602
Vuser_id
p603
I1736294
sVprofile_image
p604
Vhttps://www.gravatar.com/avatar/e9ba173af9420bda3010f9c2405847f8?s=128&d=identicon&r=PG
p605
sVuser_type
p606
Vregistered
p607
sVreputation
p608
I1441
sVlink
p609
Vhttp://stackoverflow.com/users/1736294/henry-thornton
p610
sVaccept_rate
p611
I86
sVdisplay_name
p612
VHenry Thornton
p613
ssVis_accepted
p614
I01
sVlast_edit_date
p615
I1401118441
sVanswer_id
p616
I8980156
sa(dp617
Vbody
p618
V<p>On Ubuntu you may need to install the package manager <code>pip</code> first:</p>\u000a\u000a<pre><code>sudo apt-get install python-pip\u000a</code></pre>\u000a\u000a<p>Then install the <code>python-dateutil</code> package with:</p>\u000a\u000a<pre><code>sudo pip install python-dateutil\u000a</code></pre>\u000a
p619
sVquestion_id
p620
I20853474
sVlast_activity_date
p621
I1398850390
sVcreation_date
p622
I1396897310
sVscore
p623
I104
sVowner
p624
(dp625
Vuser_id
p626
I2026317
sVprofile_image
p627
Vhttps://www.gravatar.com/avatar/8a7929e95411e79420f3a681de2ae49d?s=128&d=identicon&r=PG
p628
sVuser_type
p629
Vregistered
p630
sVreputation
p631
I1201
sVlink
p632
Vhttp://stackoverflow.com/users/2026317/angel
p633
sVdisplay_name
p634
VAngel
p635
ssVis_accepted
p636
I01
sVlast_edit_date
p637
I1398850390
sVanswer_id
p638
I22920808
sa(dp639
Vbody
p640
V<p>I'll always use <a href="http://lxml.de/" rel="noreferrer">lxml</a> for such tasks. You could use <a href="http://www.crummy.com/software/BeautifulSoup/" rel="noreferrer">beautifulsoup</a> as well.</p>\u000a\u000a<pre><code>import lxml.html\u000at = lxml.html.parse(url)\u000aprint t.find(".//title").text\u000a</code></pre>\u000a
p641
sVquestion_id
p642
I51233
sVlast_activity_date
p643
I1380794226
sVcreation_date
p644
I1220935778
sVscore
p645
I46
sVowner
p646
(dp647
Vuser_id
p648
I720
sVprofile_image
p649
Vhttps://www.gravatar.com/avatar/3c57f2a468f2fc945f1e5c47d1afee66?s=128&d=identicon&r=PG
p650
sVuser_type
p651
Vregistered
p652
sVreputation
p653
I25613
sVlink
p654
Vhttp://stackoverflow.com/users/720/peter-hoffmann
p655
sVaccept_rate
p656
I69
sVdisplay_name
p657
VPeter Hoffmann
p658
ssVis_accepted
p659
I01
sVlast_edit_date
p660
I1380794226
sVanswer_id
p661
I51240
sa(dp662
Vbody
p663
V<p>how about adding an <code>autocmd</code>, when <code>FileType python</code>, create a mapping:</p>\u000a\u000a<pre><code>nnoremap &lt;buffer&gt; &lt;F9&gt; :exec '!python' shellescape(@%, 1)&lt;cr&gt;\u000a</code></pre>\u000a\u000a<p>then you could press <code>&lt;F9&gt;</code> to execute the current buffer with <code>python</code></p>\u000a
p664
sVquestion_id
p665
I18948491
sVlast_activity_date
p666
I1379882329
sVcreation_date
p667
I1379882329
sVscore
p668
I60
sVowner
p669
(dp670
Vuser_id
p671
I164835
sVprofile_image
p672
Vhttps://i.stack.imgur.com/ayYoh.jpg?s=128&g=1
p673
sVuser_type
p674
Vregistered
p675
sVreputation
p676
I120640
sVlink
p677
Vhttp://stackoverflow.com/users/164835/kent
p678
sVaccept_rate
p679
I80
sVdisplay_name
p680
VKent
p681
ssVis_accepted
p682
I01
sVanswer_id
p683
I18948530
sa(dp684
Vbody
p685
V<p>The problem with your approach is that you are trying to interpret bash scripts. First you just try to interpret the export statement. Then you notice people are using variable expansion. Later people will put conditionals in their files, or process substitutions. In the end you will have a full blown bash script interpreter with a gazillion bugs. Don't do that.</p>\u000a\u000a<p>Let Bash interpret the file for you and then collect the results.</p>\u000a\u000a<p>You can do it like this:</p>\u000a\u000a<pre><code>#! /usr/bin/env python\u000a\u000aimport os\u000aimport pprint\u000aimport subprocess\u000a\u000acommand = ['bash', '-c', 'source init_env &amp;&amp; env']\u000a\u000aproc = subprocess.Popen(command, stdout = subprocess.PIPE)\u000a\u000afor line in proc.stdout:\u000a  (key, _, value) = line.partition("=")\u000a  os.environ[key] = value\u000a\u000aproc.communicate()\u000a\u000apprint.pprint(dict(os.environ))\u000a</code></pre>\u000a\u000a<p>Make sure that you handle errors in case bash fails to <code>source init_env</code>, or bash itself fails to execute, or subprocess fails to execute bash, or any other errors.</p>\u000a\u000a<p>Read the documentation on <a href="http://docs.python.org/library/subprocess.html" rel="noreferrer">subprocess</a> for more details.</p>\u000a\u000a<p>Note: this will only capture variables set with the <code>export</code> statement, as <code>env</code> only prints exported variables.</p>\u000a\u000a<p>Enjoy.</p>\u000a\u000a<p>Note that the <a href="http://docs.python.org/library/os.html#os.environ" rel="noreferrer">Python documentation</a> says that if you want to manipulate the environment you should manipulate <code>os.environ</code> directly instead of using <code>os.putenv()</code>. I consider that a bug, but I digress.</p>\u000a
p686
sVquestion_id
p687
I3503719
sVlast_activity_date
p688
I1379603028
sVcreation_date
p689
I1282070752
sVscore
p690
I59
sVowner
p691
(dp692
Vuser_id
p693
I360899
sVprofile_image
p694
Vhttps://www.gravatar.com/avatar/aed1b37bc11c126adfcfb028d8bd9916?s=128&d=identicon&r=PG
p695
sVuser_type
p696
Vregistered
p697
sVreputation
p698
I14067
sVlink
p699
Vhttp://stackoverflow.com/users/360899/lesmana
p700
sVaccept_rate
p701
I91
sVdisplay_name
p702
Vlesmana
p703
ssVis_accepted
p704
I01
sVlast_edit_date
p705
I1379603028
sVanswer_id
p706
I3505826
sa(dp707
Vbody
p708
V<p>Use <a href="http://docs.python.org/2/library/glob#glob.glob" rel="noreferrer">glob.glob</a>:</p>\u000a\u000a<pre><code>import os\u000aimport glob\u000anewest = max(glob.iglob('*.[Mm][Pp]3'), key=os.path.getctime)\u000a</code></pre>\u000a
p709
sVquestion_id
p710
I18279063
sVlast_activity_date
p711
I1376676021
sVcreation_date
p712
I1376674979
sVscore
p713
I80
sVowner
p714
(dp715
Vuser_id
p716
I2225682
sVprofile_image
p717
Vhttps://www.gravatar.com/avatar/4958f4712d94ab82fe55fa471308e4b5?s=128&d=identicon&r=PG
p718
sVuser_type
p719
Vregistered
p720
sVreputation
p721
I195484
sVlink
p722
Vhttp://stackoverflow.com/users/2225682/falsetru
p723
sVdisplay_name
p724
Vfalsetru
p725
ssVis_accepted
p726
I01
sVlast_edit_date
p727
I1376676021
sVanswer_id
p728
I18279182
sa(dp729
Vbody
p730
V<p>Yes, this way:</p>\u000a\u000a<pre><code>im = Image.open('image.gif')\u000argb_im = im.convert('RGB')\u000ar, g, b = rgb_im.getpixel((1, 1))\u000a\u000aprint r, g, b\u000a(65, 100, 137)\u000a</code></pre>\u000a\u000a<p>The reason you were getting a single value before with <code>pix[1, 1]</code> is because GIF pixels refer to one of the 256 values in the GIF color palette.</p>\u000a\u000a<p>See also this SO post: <a href="http://stackoverflow.com/questions/5800009/python-and-pil-pixel-values-different-for-gif-and-jpeg">Python and PIL pixel values different for GIF and JPEG</a> and this <a href="http://effbot.org/imagingbook/image.htm">PIL Reference page</a>  contains more information on the <code>convert()</code> function.</p>\u000a\u000a<p>By the way, your code would work just fine for <code>.jpg</code> images.</p>\u000a
p731
sVquestion_id
p732
I11064786
sVlast_activity_date
p733
I1376244175
sVcreation_date
p734
I1339861929
sVscore
p735
I70
sVowner
p736
(dp737
Vuser_id
p738
I1209279
sVprofile_image
p739
Vhttps://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=128&d=identicon&r=PG
p740
sVuser_type
p741
Vregistered
p742
sVreputation
p743
I60869
sVlink
p744
Vhttp://stackoverflow.com/users/1209279/levon
p745
sVaccept_rate
p746
I91
sVdisplay_name
p747
VLevon
p748
ssVis_accepted
p749
I01
sVlast_edit_date
p750
I1376244175
sVanswer_id
p751
I11064935
sa(dp752
Vbody
p753
V<p>You can use the <code>find</code> command to search for a file:</p>\u000a\u000a<p><code>find / -name virtualenvwrapper.sh</code></p>\u000a\u000a<p>This will search all directories from the root for the file.</p>\u000a\u000a<hr>\u000a\u000a<p>on ubuntu 12.04 LTS, installing through pip, it is installed to</p>\u000a\u000a<p><code>/usr/local/bin/virtualenvwrapper.sh</code></p>\u000a
p754
sVquestion_id
p755
I12647266
sVlast_activity_date
p756
I1372612789
sVcreation_date
p757
I1348870283
sVscore
p758
I47
sVowner
p759
(dp760
Vuser_id
p761
I594589
sVprofile_image
p762
Vhttps://i.stack.imgur.com/tkMbA.jpg?s=128&g=1
p763
sVuser_type
p764
Vregistered
p765
sVreputation
p766
I31642
sVlink
p767
Vhttp://stackoverflow.com/users/594589/dm03514
p768
sVaccept_rate
p769
I96
sVdisplay_name
p770
Vdm03514
p771
ssVis_accepted
p772
I01
sVlast_edit_date
p773
I1372612789
sVanswer_id
p774
I12648034
sa(dp775
Vbody
p776
V<p>Reportlab is great if you're generating very dynamic PDFs and need to programmatically control all of it: data and layout. </p>\u000a\u000a<p>To just fill out forms in existing PDFs, reportlab is overkill and you'll basically have to rebuild the PDF from scratch in reportlab instead of just taking a PDF with a form that's already been made. </p>\u000a\u000a<p>PDF forms work with <a href="http://www.citationsoftware.com/faqFDF.htm" rel="noreferrer">FDF</a> data. I ported a PHP FDF library to Python a while back when I had to do this and released it as <a href="http://pypi.python.org/pypi/fdfgen/" rel="noreferrer">fdfgen</a>. I use that to generate an fdf file with the data for the form, then use <a href="http://www.accesspdf.com/pdftk/" rel="noreferrer">pdftk</a> to push the fdf into a PDF form and generate the output. </p>\u000a\u000a<p>The whole process works like this:</p>\u000a\u000a<ol>\u000a<li>You (or a designer) design the PDF in Acrobat or whatever and mark the form fields and take note of the field names (I'm not sure exactly how this is done; our designer does this step). Let's say your form has fields "name" and "telephone". </li>\u000a<li><p>Use fdfgen to create a FDF file:</p>\u000a\u000a<pre><code>from fdfgen import forge_fdf\u000afields = [('name','John Smith'),('telephone','555-1234')]\u000afdf = forge_fdf("",fields,[],[],[])\u000afdf_file = open("data.fdf","w")\u000afdf_file.write(fdf)\u000afdf_file.close()\u000a</code></pre></li>\u000a<li><p>Then you run pdftk to merge and flatten:</p>\u000a\u000a<pre><code>pdftk form.pdf fill_form data.fdf output output.pdf flatten\u000a</code></pre>\u000a\u000a<p>and a filled out, flattened (meaning that there are no longer editable form fields) pdf will be in output.pdf.</p></li>\u000a</ol>\u000a\u000a<p>It's a bit complicated, and pdftk can be a pain to install (requires a java stack and there are bugs on Ubuntu 9.10 that have to be worked around) but it's the simplest process I've been able to come up with yet and the workflow is convenient (ie, our designers can make all the layout changes to the PDF they want and as long as they don't change the names of the fields, I can drop the new one in and everything keeps working). </p>\u000a\u000a<p>I apologize for the lack of docs on fdfgen. forge_fdf() is really the only function you should need and it has a docstrings to explain the arguments. I've just never quite gotten around to doing more with it.</p>\u000a
p777
sVquestion_id
p778
I1890570
sVlast_activity_date
p779
I1371553505
sVcreation_date
p780
I1260565215
sVscore
p781
I67
sVowner
p782
(dp783
Vuser_id
p784
I156633
sVprofile_image
p785
Vhttps://www.gravatar.com/avatar/a40a8c82858563d739317ec77a5c36ce?s=128&d=identicon&r=PG
p786
sVuser_type
p787
Vregistered
p788
sVreputation
p789
I2641
sVlink
p790
Vhttp://stackoverflow.com/users/156633/thraxil
p791
sVdisplay_name
p792
Vthraxil
p793
ssVis_accepted
p794
I01
sVlast_edit_date
p795
I1371553505
sVanswer_id
p796
I1890835
sa(dp797
Vbody
p798
V<p>Close: first you call <code>ExcelFile</code>, but then you call the <code>.parse</code> method and pass it the sheet name.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; xl = pd.ExcelFile("dummydata.xlsx")\u000a&gt;&gt;&gt; xl.sheet_names\u000a[u'Sheet1', u'Sheet2', u'Sheet3']\u000a&gt;&gt;&gt; df = xl.parse("Sheet1")\u000a&gt;&gt;&gt; df.head()\u000a                  Tid  dummy1    dummy2    dummy3    dummy4    dummy5  \u005c\u000a0 2006-09-01 00:00:00       0  5.894611  0.605211  3.842871  8.265307   \u000a1 2006-09-01 01:00:00       0  5.712107  0.605211  3.416617  8.301360   \u000a2 2006-09-01 02:00:00       0  5.105300  0.605211  3.090865  8.335395   \u000a3 2006-09-01 03:00:00       0  4.098209  0.605211  3.198452  8.170187   \u000a4 2006-09-01 04:00:00       0  3.338196  0.605211  2.970015  7.765058   \u000a\u000a     dummy6  dummy7    dummy8    dummy9  \u000a0  0.623354       0  2.579108  2.681728  \u000a1  0.554211       0  7.210000  3.028614  \u000a2  0.567841       0  6.940000  3.644147  \u000a3  0.581470       0  6.630000  4.016155  \u000a4  0.595100       0  6.350000  3.974442  \u000a</code></pre>\u000a\u000a<p>What you're doing is calling the method which lives on the class itself, rather than the instance, which is okay (although not very idiomatic), but if you're doing that you would also need to pass the sheet name:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; parsed = pd.io.parsers.ExcelFile.parse(xl, "Sheet1")\u000a&gt;&gt;&gt; parsed.columns\u000aIndex([u'Tid', u'dummy1', u'dummy2', u'dummy3', u'dummy4', u'dummy5', u'dummy6', u'dummy7', u'dummy8', u'dummy9'], dtype=object)\u000a</code></pre>\u000a
p799
sVquestion_id
p800
I17063458
sVlast_activity_date
p801
I1371034370
sVcreation_date
p802
I1371034370
sVscore
p803
I91
sVowner
p804
(dp805
Vuser_id
p806
I487339
sVprofile_image
p807
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p808
sVuser_type
p809
Vregistered
p810
sVreputation
p811
I147176
sVlink
p812
Vhttp://stackoverflow.com/users/487339/dsm
p813
sVdisplay_name
p814
VDSM
p815
ssVis_accepted
p816
I01
sVanswer_id
p817
I17063653
sa(dp818
Vbody
p819
V<p>There are very few cases where you want to use <code>except:</code>. Doing this captures <em>any</em> exception, which can be hard to debug, and it captures exceptions including <code>SystemExit</code> and <code>KeyboardInterupt</code>, which can make your program annoying to use..</p>\u000a\u000a<p>At the very simplest, you would catch <a href="http://docs.python.org/library/urllib2.html#urllib2.URLError" rel="noreferrer"><code>urllib2.URLError</code></a>:</p>\u000a\u000a<pre><code>try:\u000a    urllib2.urlopen("http://example.com", timeout = 1)\u000aexcept urllib2.URLError, e:\u000a    raise MyException("There was an error: %r" % e)\u000a</code></pre>\u000a\u000a<p>The following should capture the specific error raised when the connection times out:</p>\u000a\u000a<pre><code>import urllib2\u000aimport socket\u000a\u000aclass MyException(Exception):\u000a    pass\u000a\u000atry:\u000a    urllib2.urlopen("http://example.com", timeout = 1)\u000aexcept urllib2.URLError, e:\u000a    # For Python 2.6\u000a    if isinstance(e.reason, socket.timeout):\u000a        raise MyException("There was an error: %r" % e)\u000a    else:\u000a        # reraise the original error\u000a        raise\u000aexcept socket.timeout, e:\u000a    # For Python 2.7\u000a    raise MyException("There was an error: %r" % e)\u000a</code></pre>\u000a
p820
sVquestion_id
p821
I2712524
sVlast_activity_date
p822
I1368538400
sVcreation_date
p823
I1272277846
sVscore
p824
I81
sVowner
p825
(dp826
Vuser_id
p827
I745
sVprofile_image
p828
Vhttps://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=128&d=identicon&r=PG
p829
sVuser_type
p830
Vregistered
p831
sVreputation
p832
I100294
sVlink
p833
Vhttp://stackoverflow.com/users/745/dbr
p834
sVaccept_rate
p835
I90
sVdisplay_name
p836
Vdbr
p837
ssVis_accepted
p838
I01
sVlast_edit_date
p839
I1368538400
sVanswer_id
p840
I2712686
sa(dp841
Vbody
p842
V<p>Unless your click is firing some kind of ajax call to populate your list, you don't actually need to execute the click.</p>\u000a\u000a<p>Just find the element and then enumerate the options, selecting the option(s) you want.</p>\u000a\u000a<p>Here is an example:</p>\u000a\u000a<pre><code>from selenium import webdriver\u000ab = webdriver.Firefox()\u000ab.find_element_by_xpath("//select[@name='element_name']/option[text()='option_text']").click()\u000a</code></pre>\u000a\u000a<p>You can read more in: <br />\u000a<a href="https://sqa.stackexchange.com/questions/1355/unable-to-select-an-option-using-seleniums-python-webdriver">https://sqa.stackexchange.com/questions/1355/unable-to-select-an-option-using-seleniums-python-webdriver</a></p>\u000a
p843
sVquestion_id
p844
I7867537
sVlast_activity_date
p845
I1368293126
sVcreation_date
p846
I1320177949
sVscore
p847
I39
sVowner
p848
(dp849
Vuser_id
p850
I219238
sVprofile_image
p851
Vhttps://www.gravatar.com/avatar/3fd1159032302aebd73873a7dbf5de61?s=128&d=identicon&r=PG
p852
sVuser_type
p853
Vregistered
p854
sVreputation
p855
I3079
sVlink
p856
Vhttp://stackoverflow.com/users/219238/alanning
p857
sVdisplay_name
p858
Valanning
p859
ssVis_accepted
p860
I01
sVlast_edit_date
p861
I1492087305
sVanswer_id
p862
I7972225
sa(dp863
Vbody
p864
V<p>I would suggest using the <a href="http://pypi.python.org/pypi/Flask-Login"><code>flask-login</code></a> extension, it makes session management really easy to add to your <code>flask</code> application, and provides a nice <a href="https://flask-login.readthedocs.org/en/latest/">documentation</a> which covers in details every aspect of the extension.</p>\u000a
p865
sVquestion_id
p866
I6972999
sVlast_activity_date
p867
I1366903918
sVcreation_date
p868
I1312732848
sVscore
p869
I54
sVowner
p870
(dp871
Vuser_id
p872
I293050
sVprofile_image
p873
Vhttps://www.gravatar.com/avatar/e82816a51578772c55dae3470c822ff2?s=128&d=identicon&r=PG
p874
sVuser_type
p875
Vregistered
p876
sVreputation
p877
I9865
sVlink
p878
Vhttp://stackoverflow.com/users/293050/mattoufoutu
p879
sVaccept_rate
p880
I88
sVdisplay_name
p881
VMatToufoutu
p882
ssVis_accepted
p883
I01
sVlast_edit_date
p884
I1366903918
sVanswer_id
p885
I6973887
sa(dp886
Vbody
p887
V<p>From the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.polyfit.html" rel="noreferrer">numpy.polyfit</a> documentation, it is fitting linear regression.  Specifically, numpy.polyfit with degree 'd' fits a linear regression with the mean function</p>\u000a\u000a<p>E(y|x) =  p_d * x**d + p_{d-1} * x **(d-1) + ... + p_1 * x + p_0</p>\u000a\u000a<p>So you just need to calculate the R-squared for that fit.  The wikipedia page on <a href="http://en.wikipedia.org/wiki/Linear_regression" rel="noreferrer">linear regression</a> gives full details.  You are interested in R^2 which you can calculate in a couple of ways, the easisest probably being</p>\u000a\u000a<pre><code>SST = Sum(i=1..n) (y_i - y_bar)^2\u000aSSReg = Sum(i=1..n) (y_ihat - y_bar)^2\u000aRsquared = SSReg/SST\u000a</code></pre>\u000a\u000a<p>Where I use 'y_bar' for the mean of the y's, and 'y_ihat' to be the fit value for each point.</p>\u000a\u000a<p>I'm not terribly familiar with numpy (I usually work in R), so there is probably a tidier way to calculate your R-squared, but the following should be correct</p>\u000a\u000a<pre><code>import numpy\u000a\u000a# Polynomial Regression\u000adef polyfit(x, y, degree):\u000a    results = {}\u000a\u000a    coeffs = numpy.polyfit(x, y, degree)\u000a\u000a     # Polynomial Coefficients\u000a    results['polynomial'] = coeffs.tolist()\u000a\u000a    # r-squared\u000a    p = numpy.poly1d(coeffs)\u000a    # fit values, and mean\u000a    yhat = p(x)                         # or [p(z) for z in x]\u000a    ybar = numpy.sum(y)/len(y)          # or sum(y)/len(y)\u000a    ssreg = numpy.sum((yhat-ybar)**2)   # or sum([ (yihat - ybar)**2 for yihat in yhat])\u000a    sstot = numpy.sum((y - ybar)**2)    # or sum([ (yi - ybar)**2 for yi in y])\u000a    results['determination'] = ssreg / sstot\u000a\u000a    return results\u000a</code></pre>\u000a
p888
sVquestion_id
p889
I893657
sVlast_activity_date
p890
I1366129653
sVcreation_date
p891
I1242938915
sVscore
p892
I33
sVowner
p893
(dp894
Vuser_id
p895
I14257
sVprofile_image
p896
Vhttps://www.gravatar.com/avatar/256801cf45a79fc41b929b1365fb14d4?s=128&d=identicon&r=PG
p897
sVuser_type
p898
Vregistered
p899
sVreputation
p900
I1505
sVlink
p901
Vhttp://stackoverflow.com/users/14257/leif
p902
sVdisplay_name
p903
Vleif
p904
ssVis_accepted
p905
I01
sVlast_edit_date
p906
I1366129653
sVanswer_id
p907
I895063
sa(dp908
Vbody
p909
V<p>This is implementation-specific, but your interpreter is probably interning compile-time constants but not the results of run-time expressions.</p>\u000a\u000a<p>In what follows I use CPython 2.7.3.</p>\u000a\u000a<p>In the second example, the expression <code>"strin"+"g"</code> is evaluated at compile time, and is replaced with <code>"string"</code>. This makes the first two examples behave the same.</p>\u000a\u000a<p>If we examine the bytecodes, we'll see that they are exactly the same:</p>\u000a\u000a<pre><code>  # s1 = "string"\u000a  2           0 LOAD_CONST               1 ('string')\u000a              3 STORE_FAST               0 (s1)\u000a\u000a  # s2 = "strin" + "g"\u000a  3           6 LOAD_CONST               4 ('string')\u000a              9 STORE_FAST               1 (s2)\u000a</code></pre>\u000a\u000a<p>The third example involves a run-time concatenation, the result of which is not automatically interned:</p>\u000a\u000a<pre><code>  # s3a = "strin"\u000a  # s3 = s3a + "g"\u000a  4          12 LOAD_CONST               2 ('strin')\u000a             15 STORE_FAST               2 (s3a)\u000a\u000a  5          18 LOAD_FAST                2 (s3a)\u000a             21 LOAD_CONST               3 ('g')\u000a             24 BINARY_ADD          \u000a             25 STORE_FAST               3 (s3)\u000a             28 LOAD_CONST               0 (None)\u000a             31 RETURN_VALUE        \u000a</code></pre>\u000a\u000a<p>If you were to manually <code>intern()</code> the result of the third expression, you'd get the same object as before:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; s3a = "strin"\u000a&gt;&gt;&gt; s3 = s3a + "g"\u000a&gt;&gt;&gt; s3 is "string"\u000aFalse\u000a&gt;&gt;&gt; intern(s3) is "string"\u000aTrue\u000a</code></pre>\u000a
p910
sVquestion_id
p911
I15541404
sVlast_activity_date
p912
I1363854647
sVcreation_date
p913
I1363850155
sVscore
p914
I56
sVowner
p915
(dp916
Vuser_id
p917
I367273
sVprofile_image
p918
Vhttps://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=128&d=identicon&r=PG
p919
sVuser_type
p920
Vregistered
p921
sVreputation
p922
I279603
sVlink
p923
Vhttp://stackoverflow.com/users/367273/npe
p924
sVaccept_rate
p925
I96
sVdisplay_name
p926
VNPE
p927
ssVis_accepted
p928
I01
sVlast_edit_date
p929
I1363854647
sVanswer_id
p930
I15541556
sa(dp931
Vbody
p932
V<pre><code>&gt;&gt;&gt; import pandas as pd\u000a&gt;&gt;&gt; df = pd.DataFrame({'x' : [1, 2, 3, 4], 'y' : [4, 5, 6, 7]})\u000a&gt;&gt;&gt; df\u000a   x  y\u000a0  1  4\u000a1  2  5\u000a2  3  6\u000a3  4  7\u000a&gt;&gt;&gt; s = df.ix[:,0]\u000a&gt;&gt;&gt; type(s)\u000a&lt;class 'pandas.core.series.Series'&gt;\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a
p933
sVquestion_id
p934
I15360925
sVlast_activity_date
p935
I1363095219
sVcreation_date
p936
I1363095219
sVscore
p937
I59
sVowner
p938
(dp939
Vuser_id
p940
I567989
sVprofile_image
p941
Vhttps://www.gravatar.com/avatar/a38c844d28ce38a2085afdad949c2ac3?s=128&d=identicon&r=PG
p942
sVuser_type
p943
Vregistered
p944
sVreputation
p945
I2465
sVlink
p946
Vhttp://stackoverflow.com/users/567989/herrfz
p947
sVaccept_rate
p948
I86
sVdisplay_name
p949
Vherrfz
p950
ssVis_accepted
p951
I01
sVanswer_id
p952
I15362700
sa(dp953
Vbody
p954
V<p>For Mac/Linux;</p>\u000a\u000a<pre><code>PYTHONPATH=/foo/bar/baz python somescript.py somecommand\u000a</code></pre>\u000a\u000a<p>For Windows, setup a wrapper <code>pythonpath.bat</code>;</p>\u000a\u000a<pre><code>@ECHO OFF\u000asetlocal\u000aset PYTHONPATH=%1\u000apython %2 %3\u000aendlocal\u000a</code></pre>\u000a\u000a<p>and call <code>pythonpath.bat</code> script file like;</p>\u000a\u000a<pre><code>pythonpath.bat /foo/bar/baz somescript.py somecommand\u000a</code></pre>\u000a
p955
sVquestion_id
p956
I4580101
sVlast_activity_date
p957
I1358628319
sVcreation_date
p958
I1293997126
sVscore
p959
I80
sVowner
p960
(dp961
Vuser_id
p962
I35060
sVprofile_image
p963
Vhttps://www.gravatar.com/avatar/020f31e7b5e91deacae737386ced9842?s=128&d=identicon&r=PG
p964
sVuser_type
p965
Vregistered
p966
sVreputation
p967
I28480
sVlink
p968
Vhttp://stackoverflow.com/users/35060/ismail
p969
sVdisplay_name
p970
Vismail
p971
ssVis_accepted
p972
I01
sVlast_edit_date
p973
I1358628319
sVanswer_id
p974
I4580120
sa(dp975
Vbody
p976
V<p>I know this question is old, but some of the comments are new, and while all of the viable solutions are essentially the same, most of them aren't very clean or easy to read.</p>\u000a\u000a<p>Like thobe's answer says, the only way to handle both cases is to check for both scenarios.  The easiest way is simply to check to see if there is a single argument and it is callabe (NOTE: extra checks will be necessary if your decorator only takes 1 argument and it happens to be a callable object):</p>\u000a\u000a<pre><code>def decorator(*args, **kwargs):\u000a    if len(args) == 1 and len(kwargs) == 0 and callable(args[0]):\u000a        # called as @decorator\u000a    else:\u000a        # called as @decorator(*args, **kwargs)\u000a</code></pre>\u000a\u000a<p>In the first case, you do what any normal decorator does, return a modified or wrapped version of the passed in function.</p>\u000a\u000a<p>In the second case, you return a 'new' decorator that somehow uses the information passed in with *args, **kwargs.</p>\u000a\u000a<p>This is fine and all, but having to write it out for every decorator you make can be pretty annoying and not as clean.  Instead, it would be nice to be able to automagically modify our decorators without having to re-write them... but that's what decorators are for!  </p>\u000a\u000a<p>Using the following decorator decorator, we can deocrate our decorators so that they can be used with or without arguments:</p>\u000a\u000a<pre><code>def doublewrap(f):\u000a    '''\u000a    a decorator decorator, allowing the decorator to be used as:\u000a    @decorator(with, arguments, and=kwargs)\u000a    or\u000a    @decorator\u000a    '''\u000a    @wraps(f)\u000a    def new_dec(*args, **kwargs):\u000a        if len(args) == 1 and len(kwargs) == 0 and callable(args[0]):\u000a            # actual decorated function\u000a            return f(args[0])\u000a        else:\u000a            # decorator arguments\u000a            return lambda realf: f(realf, *args, **kwargs)\u000a\u000a    return new_dec\u000a</code></pre>\u000a\u000a<p>Now, we can decorate our decorators with @doublewrap, and they will work with and without arguments, with one caveat:</p>\u000a\u000a<p>I noted above but should repeat here, the check in this decorator makes an assumption about the arguments that a decorator can receive (namely that it can't receive a single, callable argument).  Since we are making it applicable to any generator now, it needs to be kept in mind, or modified if it will be contradicted.</p>\u000a\u000a<p>The following demonstrates its use:</p>\u000a\u000a<pre><code>def test_doublewrap():\u000a    from util import doublewrap\u000a    from functools import wraps    \u000a\u000a    @doublewrap\u000a    def mult(f, factor=2):\u000a        '''multiply a function's return value'''\u000a        @wraps(f)\u000a        def wrap(*args, **kwargs):\u000a            return factor*f(*args,**kwargs)\u000a        return wrap\u000a\u000a    # try normal\u000a    @mult\u000a    def f(x, y):\u000a        return x + y\u000a\u000a    # try args\u000a    @mult(3)\u000a    def f2(x, y):\u000a        return x*y\u000a\u000a    # try kwargs\u000a    @mult(factor=5)\u000a    def f3(x, y):\u000a        return x - y\u000a\u000a    assert f(2,3) == 10\u000a    assert f2(2,5) == 30\u000a    assert f3(8,1) == 5*7\u000a</code></pre>\u000a
p977
sVquestion_id
p978
I653368
sVlast_activity_date
p979
I1358587441
sVcreation_date
p980
I1358587441
sVscore
p981
I25
sVowner
p982
(dp983
Vuser_id
p984
I618895
sVprofile_image
p985
Vhttps://www.gravatar.com/avatar/bb58ac95332a6e8d0cdc03397f5da9b0?s=128&d=identicon&r=PG
p986
sVuser_type
p987
Vregistered
p988
sVreputation
p989
I3136
sVlink
p990
Vhttp://stackoverflow.com/users/618895/bj0
p991
sVaccept_rate
p992
I58
sVdisplay_name
p993
Vbj0
p994
ssVis_accepted
p995
I01
sVanswer_id
p996
I14412901
sa(dp997
Vbody
p998
V<p>The warning</p>\u000a\u000a<blockquote>\u000a  <p>(WARNING/2) Duplicate explicit target name:foo</p>\u000a</blockquote>\u000a\u000a<p>occurs when you use the same text for two different links in "Named hyperlink references":</p>\u000a\u000a<pre><code>`Foo &lt;http://example.org&gt;`_\u000a`Foo &lt;http://example.com&gt;`_\u000a</code></pre>\u000a\u000a<p>To circumvent it, use <em>anonymous</em> <a href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#hyperlink-references" rel="noreferrer">hyperlink references</a> with double underscores:</p>\u000a\u000a<pre><code>`Foo &lt;http://example.org&gt;`__\u000a`Foo &lt;http://example.com&gt;`__\u000a</code></pre>\u000a\u000a<p>This works without a warning on docutils 0.8.1.</p>\u000a
p999
sVquestion_id
p1000
I5464627
sVlast_activity_date
p1001
I1356688768
sVcreation_date
p1002
I1356688768
sVscore
p1003
I83
sVowner
p1004
(dp1005
Vuser_id
p1006
I282601
sVprofile_image
p1007
Vhttps://www.gravatar.com/avatar/9e263681488308e5e5d5e548b2f9bc99?s=128&d=identicon&r=PG
p1008
sVuser_type
p1009
Vregistered
p1010
sVreputation
p1011
I19393
sVlink
p1012
Vhttp://stackoverflow.com/users/282601/cweiske
p1013
sVaccept_rate
p1014
I82
sVdisplay_name
p1015
Vcweiske
p1016
ssVis_accepted
p1017
I01
sVanswer_id
p1018
I14067756
sa(dp1019
Vbody
p1020
V<p>This can be something to start with:</p>\u000a\u000a<pre><code>import configparser\u000a\u000aconfig = configparser.ConfigParser()\u000aconfig.read('FILE.INI')\u000aprint(config['DEFAULT']['path'])     # -&gt; "/path/name/"\u000aconfig['DEFAULT']['path'] = '/var/shared/'    # update\u000aconfig['DEFAULT']['default_message'] = 'Hey! help me!!'   # create\u000a\u000awith open('FILE.INI', 'w') as configfile:    # save\u000a    config.write(configfile)\u000a</code></pre>\u000a\u000a<p>You can find more at the <a href="http://docs.python.org/py3k/library/configparser.html" rel="noreferrer">official configparser documentation</a>.</p>\u000a
p1021
sVquestion_id
p1022
I8884188
sVlast_activity_date
p1023
I1356322064
sVcreation_date
p1024
I1326738849
sVscore
p1025
I74
sVowner
p1026
(dp1027
Vuser_id
p1028
I1132524
sVprofile_image
p1029
Vhttps://www.gravatar.com/avatar/608c31bfe42ac44615a4b99692e309fa?s=128&d=identicon&r=PG
p1030
sVuser_type
p1031
Vregistered
p1032
sVreputation
p1033
I15008
sVlink
p1034
Vhttp://stackoverflow.com/users/1132524/rik-poggi
p1035
sVaccept_rate
p1036
I100
sVdisplay_name
p1037
VRik Poggi
p1038
ssVis_accepted
p1039
I01
sVlast_edit_date
p1040
I1356322064
sVanswer_id
p1041
I8884638
sa(dp1042
Vbody
p1043
V<p>The exact code will vary for each of the columns you want to do, but it's likely you'll want to use the <code>map</code> and <code>apply</code> functions.  In some cases you can just compute using the existing columns directly, since the columns are Pandas Series objects, which also work as Numpy arrays, which automatically work element-wise for usual mathematical operations.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; d\u000a    A   B  C\u000a0  11  13  5\u000a1   6   7  4\u000a2   8   3  6\u000a3   4   8  7\u000a4   0   1  7\u000a&gt;&gt;&gt; (d.A + d.B) / d.C\u000a0    4.800000\u000a1    3.250000\u000a2    1.833333\u000a3    1.714286\u000a4    0.142857\u000a&gt;&gt;&gt; d.A &gt; d.C\u000a0     True\u000a1     True\u000a2     True\u000a3    False\u000a4    False\u000a</code></pre>\u000a\u000a<p>If you need to use operations like max and min within a row, you can use <code>apply</code> with <code>axis=1</code> to apply any function you like to each row.  Here's an example that computes <code>min(A, B)-C</code>, which seems to be like your "lower wick":</p>\u000a\u000a<pre><code>&gt;&gt;&gt; d.apply(lambda row: min([row['A'], row['B']])-row['C'], axis=1)\u000a0    6\u000a1    2\u000a2   -3\u000a3   -3\u000a4   -7\u000a</code></pre>\u000a\u000a<p>Hopefully that gives you some idea of how to proceed.</p>\u000a\u000a<p>Edit: to compare rows against neighboring rows, the simplest approach is to slice the columns you want to compare, leaving off the beginning/end, and then compare the resulting slices.  For instance, this will tell you for which rows the element in column A is less than the next row's element in column C:</p>\u000a\u000a<pre><code>d['A'][:-1] &lt; d['C'][1:]\u000a</code></pre>\u000a\u000a<p>and this does it the other way, telling you which rows have A less than the preceding row's C:</p>\u000a\u000a<pre><code>d['A'][1:] &lt; d['C'][:-1]\u000a</code></pre>\u000a\u000a<p>Doing <code>['A"][:-1]</code> slices off the last element of column A, and doing <code>['C'][1:]</code> slices off the first element of column C, so when you line these two up and compare them, you're comparing each element in A with the C from the following row.</p>\u000a
p1044
sVquestion_id
p1045
I12376863
sVlast_activity_date
p1046
I1347397000
sVcreation_date
p1047
I1347393896
sVscore
p1048
I48
sVowner
p1049
(dp1050
Vuser_id
p1051
I1427416
sVprofile_image
p1052
Vhttps://i.stack.imgur.com/QWHKg.png?s=128&g=1
p1053
sVuser_type
p1054
Vregistered
p1055
sVreputation
p1056
I123766
sVlink
p1057
Vhttp://stackoverflow.com/users/1427416/brenbarn
p1058
sVaccept_rate
p1059
I50
sVdisplay_name
p1060
VBrenBarn
p1061
ssVis_accepted
p1062
I01
sVlast_edit_date
p1063
I1347397000
sVanswer_id
p1064
I12377083
sa(dp1065
Vbody
p1066
V<p>While not using <code>datetime</code>, this solves your problem (answers your question) of getting a string with the current time and date format you specify:</p>\u000a\u000a<pre><code>import time\u000atimestr = time.strftime("%Y%m%d-%H%M%S")\u000aprint timestr\u000a</code></pre>\u000a\u000a<p>yields:</p>\u000a\u000a<pre><code>20120515-155045\u000a</code></pre>\u000a\u000a<p>so your filename could append or use this string.</p>\u000a
p1067
sVquestion_id
p1068
I10607688
sVlast_activity_date
p1069
I1337120534
sVcreation_date
p1070
I1337111287
sVscore
p1071
I104
sVowner
p1072
(dp1073
Vuser_id
p1074
I1209279
sVprofile_image
p1075
Vhttps://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=128&d=identicon&r=PG
p1076
sVuser_type
p1077
Vregistered
p1078
sVreputation
p1079
I60869
sVlink
p1080
Vhttp://stackoverflow.com/users/1209279/levon
p1081
sVaccept_rate
p1082
I91
sVdisplay_name
p1083
VLevon
p1084
ssVis_accepted
p1085
I01
sVlast_edit_date
p1086
I1337120534
sVanswer_id
p1087
I10607768
sa(dp1088
Vbody
p1089
V<p>You can use a specific environment variable <strong>PIP_DOWNLOAD_CACHE</strong> and make it point to a directory where your packages will be stored. If they are to be installed again, they will be taken from this directory.</p>\u000a\u000a<p>There seems to be also an additional option for PIP <code>pip --download-cache</code> which ought to do something similar, but I have never tried it myself. For your example, to avoid re-downloading <code>matplotlib</code> every time, you would do the following:</p>\u000a\u000a<pre><code>pip install --download-cache /path/to/pip/cache matplotlib\u000a</code></pre>\u000a\u000a<p>Does that answer your question?</p>\u000a
p1090
sVquestion_id
p1091
I10336308
sVlast_activity_date
p1092
I1335457091
sVcreation_date
p1093
I1335453395
sVscore
p1094
I52
sVowner
p1095
(dp1096
Vuser_id
p1097
I1332690
sVprofile_image
p1098
Vhttps://www.gravatar.com/avatar/0b4f9f4b1d7072ae18d9dc3a9bf0ac7a?s=128&d=identicon&r=PG
p1099
sVuser_type
p1100
Vregistered
p1101
sVreputation
p1102
I22252
sVlink
p1103
Vhttp://stackoverflow.com/users/1332690/charles-menguy
p1104
sVaccept_rate
p1105
I91
sVdisplay_name
p1106
VCharles Menguy
p1107
ssVis_accepted
p1108
I01
sVlast_edit_date
p1109
I1335457091
sVanswer_id
p1110
I10336348
sa(dp1111
Vbody
p1112
V<p>Two easy ways to accomplish just the filtering are:</p>\u000a\u000a<ol>\u000a<li><p>Using <code>filter</code>:</p>\u000a\u000a<p><code>names = filter(lambda name: name[-5:] != "Smith", names)</code></p></li>\u000a<li><p>Using list comprehensions:</p>\u000a\u000a<p><code>names = [name for name in names if name[-5:] != "Smith"]</code></p></li>\u000a</ol>\u000a\u000a<p>Note that both cases keep the values for which the predicate function evaluates to <code>True</code>, so you have to reverse the logic (i.e. you say "keep the people who do not have the last name Smith" instead of "remove the people who have the last name Smith").</p>\u000a\u000a<p><strong>Edit</strong> Funny... two people individually posted both of the answers I suggested as I was posting mine.</p>\u000a
p1113
sVquestion_id
p1114
I18418
sVlast_activity_date
p1115
I1334035940
sVcreation_date
p1116
I1219254647
sVscore
p1117
I51
sVowner
p1118
(dp1119
Vuser_id
p1120
I2168
sVprofile_image
p1121
Vhttps://www.gravatar.com/avatar/5e7e68e1cdaea224d93da209afb28e9d?s=128&d=identicon&r=PG
p1122
sVuser_type
p1123
Vregistered
p1124
sVreputation
p1125
I7583
sVlink
p1126
Vhttp://stackoverflow.com/users/2168/john
p1127
sVaccept_rate
p1128
I59
sVdisplay_name
p1129
VJohn
p1130
ssVis_accepted
p1131
I01
sVlast_edit_date
p1132
I1334035940
sVanswer_id
p1133
I18435
sa(dp1134
Vbody
p1135
V<p>Here's a version that's much simpler - not sure how performant it is. Heavily based on some django snippet I found while building <code>RGBA -&gt; JPG + BG</code> support for sorl thumbnails. </p>\u000a\u000a<pre><code>from PIL import Image\u000a\u000apng = Image.open(object.logo.path)\u000apng.load() # required for png.split()\u000a\u000abackground = Image.new("RGB", png.size, (255, 255, 255))\u000abackground.paste(png, mask=png.split()[3]) # 3 is the alpha channel\u000a\u000abackground.save('foo.jpg', 'JPEG', quality=80)\u000a</code></pre>\u000a\u000a<p>Result @80%</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/jaVG7.jpg" alt="enter image description here"></p>\u000a\u000a<p>Result @ 50%<br>\u000a<img src="https://i.stack.imgur.com/9IsAI.jpg" alt="enter image description here"></p>\u000a
p1136
sVquestion_id
p1137
I9166400
sVlast_activity_date
p1138
I1330366825
sVcreation_date
p1139
I1330308187
sVscore
p1140
I60
sVowner
p1141
(dp1142
Vuser_id
p1143
I267887
sVprofile_image
p1144
Vhttps://i.stack.imgur.com/MzpbS.png?s=128&g=1
p1145
sVuser_type
p1146
Vregistered
p1147
sVreputation
p1148
I72118
sVlink
p1149
Vhttp://stackoverflow.com/users/267887/yuji-tomita-tomita
p1150
sVaccept_rate
p1151
I63
sVdisplay_name
p1152
VYuji &#39;Tomita&#39; Tomita
p1153
ssVis_accepted
p1154
I01
sVlast_edit_date
p1155
I1330366825
sVanswer_id
p1156
I9459208
sa(dp1157
Vbody
p1158
V<p>I guess that it is because a keyword parameter is essentially different than a variable assignment.</p>\u000a\u000a<p>For example, there is plenty of code like this:</p>\u000a\u000a<pre><code>kw1 = some calculation here\u000akw2 = some calculation here\u000akw3 = some calculation here\u000asome_func(1,\u000a    2,\u000a    kw1=kw1,\u000a    kw2=kw2,\u000a    kw3=kw3)\u000a</code></pre>\u000a\u000a<p>As you see, it makes completely sense to assign a variable to a keyword argument named exactly the same, so it improves readability to see them without spaces. It is easier to recognize that we are using keyword arguments and not assigning a variable to itself.</p>\u000a\u000a<p>Also, parameters tend to go in the same line whereas assignments usually are each one in their own line, so saving space is likely to be an important matter there.</p>\u000a
p1159
sVquestion_id
p1160
I8853063
sVlast_activity_date
p1161
I1326470988
sVcreation_date
p1162
I1326469243
sVscore
p1163
I35
sVowner
p1164
(dp1165
Vuser_id
p1166
I106979
sVprofile_image
p1167
Vhttps://i.stack.imgur.com/XUWge.gif?s=128&g=1
p1168
sVuser_type
p1169
Vregistered
p1170
sVreputation
p1171
I42397
sVlink
p1172
Vhttp://stackoverflow.com/users/106979/fortran
p1173
sVaccept_rate
p1174
I83
sVdisplay_name
p1175
Vfortran
p1176
ssVis_accepted
p1177
I01
sVlast_edit_date
p1178
I1326470988
sVanswer_id
p1179
I8853111
sa(dp1180
Vbody
p1181
V<p>You need to create a custom <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#form" rel="noreferrer">form</a> and <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#template" rel="noreferrer">template</a> for the <code>LinkSectionInline</code>.</p>\u000a\u000a<p>Something like this should work for the form:</p>\u000a\u000a<pre><code>LinkFormset = forms.modelformset_factory(Link)\u000aclass LinkSectionForm(forms.ModelForm):\u000a    def __init__(self, **kwargs):\u000a        super(LinkSectionForm, self).__init__(**kwargs)\u000a        self.link_formset = LinkFormset(instance=self.instance, \u000a                                        data=self.data or None,\u000a                                        prefix=self.prefix)\u000a\u000a    def is_valid(self):\u000a        return (super(LinkSectionForm, self).is_valid() and \u000a                    self.link_formset.is_valid())\u000a\u000a    def save(self, commit=True):\u000a        # Supporting commit=False is another can of worms.  No use dealing\u000a        # it before it's needed. (YAGNI)\u000a        assert commit == True \u000a        res = super(LinkSectionForm, self).save(commit=commit)\u000a        self.link_formset.save()\u000a        return res\u000a</code></pre>\u000a\u000a<p>(That just came off the top of my head and isn't tested, but it should get you going in the right direction.)</p>\u000a\u000a<p>Your template just needs to render the form and form.link_formset appropriately. </p>\u000a
p1182
sVquestion_id
p1183
I702637
sVlast_activity_date
p1184
I1323258141
sVcreation_date
p1185
I1251263895
sVscore
p1186
I20
sVowner
p1187
(dp1188
Vuser_id
p1189
I39856
sVprofile_image
p1190
Vhttps://www.gravatar.com/avatar/1a8734bfb9d9cad92755ce6d68ee4a8a?s=128&d=identicon&r=PG
p1191
sVuser_type
p1192
Vregistered
p1193
sVreputation
p1194
I3935
sVlink
p1195
Vhttp://stackoverflow.com/users/39856/matthew-marshall
p1196
sVdisplay_name
p1197
VMatthew Marshall
p1198
ssVis_accepted
p1199
I01
sVlast_edit_date
p1200
I1323258141
sVanswer_id
p1201
I1332476
sa(dp1202
Vbody
p1203
V<p><code>len</code> is a function to get the length of a collection. It works by calling an object's <code>__len__</code> method. <code>__something__</code> attributes are special and usually more than meets the eye, and generally should not be called directly.</p>\u000a\u000a<p>It was decided at some point long ago getting the length of something should be a function and not a method code, reasoning that <code>len(a)</code>'s meaning would be clear to beginners but <code>a.len()</code> would not be as clear. When Python started <code>__len__</code> didn't even exist and <code>len</code> was a special thing that worked with a few types of objects. Whether or not the situation this leaves us makes total sense, it's here to stay.</p>\u000a
p1204
sVquestion_id
p1205
I2481421
sVlast_activity_date
p1206
I1319742424
sVcreation_date
p1207
I1269046621
sVscore
p1208
I49
sVowner
p1209
(dp1210
Vuser_id
p1211
I192839
sVprofile_image
p1212
Vhttps://i.stack.imgur.com/GNPsv.jpg?s=128&g=1
p1213
sVuser_type
p1214
Vregistered
p1215
sVreputation
p1216
I38635
sVlink
p1217
Vhttp://stackoverflow.com/users/192839/mike-graham
p1218
sVaccept_rate
p1219
I71
sVdisplay_name
p1220
VMike Graham
p1221
ssVis_accepted
p1222
I01
sVlast_edit_date
p1223
I1319742424
sVanswer_id
p1224
I2481433
sa(dp1225
Vbody
p1226
V<p>Python sets don't have an implementation for the <code>+</code> operator.</p>\u000a\u000a<p>You can use <code>|</code> for set union and <code>&amp;</code> for set intersection.</p>\u000a\u000a<p>Sets do implement <code>-</code> as set difference. You can also use <code>^</code> for symmetric set difference (i.e., it will return a new set with only the objects that appear in one set but do not appear in both sets).</p>\u000a
p1227
sVquestion_id
p1228
I7692324
sVlast_activity_date
p1229
I1318017961
sVcreation_date
p1230
I1318017961
sVscore
p1231
I64
sVowner
p1232
(dp1233
Vuser_id
p1234
I129655
sVprofile_image
p1235
Vhttps://www.gravatar.com/avatar/aa81588f4aa842d08c9539f9313df4cc?s=128&d=identicon&r=PG
p1236
sVuser_type
p1237
Vregistered
p1238
sVreputation
p1239
I30202
sVlink
p1240
Vhttp://stackoverflow.com/users/129655/platinum-azure
p1241
sVaccept_rate
p1242
I92
sVdisplay_name
p1243
VPlatinum Azure
p1244
ssVis_accepted
p1245
I01
sVanswer_id
p1246
I7692347
sa(dp1247
Vbody
p1248
V<p>If you are using zeromq >= 3.0, then you can set the RCVTIMEO socket option:</p>\u000a\u000a<pre><code>client_receiver.RCVTIMEO = 1000 # in milliseconds\u000a</code></pre>\u000a\u000a<p>But in general, you can use pollers:</p>\u000a\u000a<pre><code>poller = zmq.Poller()\u000apoller.register(client_receiver, zmq.POLLIN) # POLLIN for recv, POLLOUT for send\u000a</code></pre>\u000a\u000a<p>And <code>poller.poll()</code> takes a timeout:</p>\u000a\u000a<pre><code>evts = poller.poll(1000) # wait *up to* one second for a message to arrive.\u000a</code></pre>\u000a\u000a<p><code>evts</code> will be an empty list if there is nothing to receive.</p>\u000a\u000a<p>You can poll with <code>zmq.POLLOUT</code>, to check if a send will succeed.</p>\u000a\u000a<p>Or, to handle the case of a peer that might have failed, a:</p>\u000a\u000a<pre><code>worker.send(msg, zmq.NOBLOCK)\u000a</code></pre>\u000a\u000a<p>might suffice, which will always return immediately - raising a ZMQError(zmq.EAGAIN) if the send could not complete.</p>\u000a
p1249
sVquestion_id
p1250
I7538988
sVlast_activity_date
p1251
I1316882001
sVcreation_date
p1252
I1316882001
sVscore
p1253
I58
sVowner
p1254
(dp1255
Vuser_id
p1256
I938949
sVprofile_image
p1257
Vhttps://www.gravatar.com/avatar/d5b897c37001627c2e3ad3c1e8a7e6fb?s=128&d=identicon&r=PG
p1258
sVuser_type
p1259
Vregistered
p1260
sVreputation
p1261
I20107
sVlink
p1262
Vhttp://stackoverflow.com/users/938949/minrk
p1263
sVdisplay_name
p1264
Vminrk
p1265
ssVis_accepted
p1266
I01
sVanswer_id
p1267
I7540299
sa(dp1268
Vbody
p1269
V<p>Most DBAPI implementations fully buffer rows as they are fetched - so usually, before the SQLAlchemy ORM even gets a hold of one result, the whole result set is in memory.</p>\u000a\u000a<p>But then, the way Query works is that it fully loads the given result set by default before returning to you your objects.  The rationale here regards queries that are against more than just simple SELECT statements - joins to other tables which may return the same object identity multiple times in one result set (common with eager loading), the full set of rows needs to be in memory so that the correct results can be returned - otherwise collections and such might be only partially populated.</p>\u000a\u000a<p>So Query offers an option to change this behavior, which is the yield_per() call <a href="http://www.sqlalchemy.org/docs/orm/query.html?highlight=yield_per#sqlalchemy.orm.query.Query.yield_per" rel="noreferrer">http://www.sqlalchemy.org/docs/orm/query.html?highlight=yield_per#sqlalchemy.orm.query.Query.yield_per</a> .   This call will cause the Query to yield rows in batches, where you give it the batch size.  As the docs state, this is only appropriate if you aren't doing any kind of eager loading of collections - so it's basically if you really know what you're doing.   And also, if the underlying DBAPI pre-buffers rows , there will still be that memory overhead so the approach only scales slightly better than not using it.</p>\u000a\u000a<p>I hardly ever use yield_per() - instead, I use a better version of the LIMIT approach you suggest above using window functions.   LIMIT and OFFSET have a huge problem that very large OFFSET values cause the query to get slower and slower, as an OFFSET of N causes it to page through N rows - it's like doing the same query fifty times instead of one, each time reading a larger and larger number of rows.   With a window-function approach, I pre-fetch a set of "window" values that refer to chunks of the table I want to select.  I then emit individual SELECT statements that each pull from one of those windows at a time.</p>\u000a\u000a<p>The window function approach is on the wiki at <a href="http://www.sqlalchemy.org/trac/wiki/UsageRecipes/WindowedRangeQuery" rel="noreferrer">http://www.sqlalchemy.org/trac/wiki/UsageRecipes/WindowedRangeQuery</a> and I use it with great success.</p>\u000a\u000a<p>Also note, not all databases support window functions - you need PG, Oracle, or SQL Server.  IMHO using at least Postgresql is definitely worth it - if you're using a relational database, you might as well use the best.</p>\u000a
p1270
sVquestion_id
p1271
I7389759
sVlast_activity_date
p1272
I1315843083
sVcreation_date
p1273
I1315843083
sVscore
p1274
I75
sVowner
p1275
(dp1276
Vuser_id
p1277
I34549
sVprofile_image
p1278
Vhttps://www.gravatar.com/avatar/7c63a03cc45f763a06149d6c99cef46c?s=128&d=identicon&r=PG
p1279
sVuser_type
p1280
Vregistered
p1281
sVreputation
p1282
I38836
sVlink
p1283
Vhttp://stackoverflow.com/users/34549/zzzeek
p1284
sVaccept_rate
p1285
I80
sVdisplay_name
p1286
Vzzzeek
p1287
ssVis_accepted
p1288
I01
sVanswer_id
p1289
I7390660
sa(dp1290
Vbody
p1291
V<p>If <code>key</code> isn't an <code>int</code> or <code>float</code> but a <code>str</code>ing, you need to convert it to an <code>int</code> first by doing</p>\u000a\u000a<pre><code>key = int(key)\u000a</code></pre>\u000a\u000a<p>or to a <code>float</code> by doing</p>\u000a\u000a<pre><code>key = float(key)\u000a</code></pre>\u000a\u000a<p>Otherwise, what you have in your question should work, but</p>\u000a\u000a<pre><code>if (key &lt; 1) or (key &gt; 34):\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>if not (1 &lt;= key &lt;= 34):\u000a</code></pre>\u000a\u000a<p>would be a bit clearer.</p>\u000a
p1292
sVquestion_id
p1293
I7141208
sVlast_activity_date
p1294
I1313961843
sVcreation_date
p1295
I1313961207
sVscore
p1296
I96
sVowner
p1297
(dp1298
Vuser_id
p1299
I500584
sVprofile_image
p1300
Vhttps://www.gravatar.com/avatar/02cbc0104ac1794c222b2d3e11d325e4?s=128&d=identicon&r=PG
p1301
sVuser_type
p1302
Vregistered
p1303
sVreputation
p1304
I82963
sVlink
p1305
Vhttp://stackoverflow.com/users/500584/agf
p1306
sVdisplay_name
p1307
Vagf
p1308
ssVis_accepted
p1309
I01
sVlast_edit_date
p1310
I1313961843
sVanswer_id
p1311
I7141226
sa(dp1312
Vbody
p1313
V<p>I believe the syntax you were looking for is as follows:</p>\u000a\u000a<pre><code>with open('coors.csv', mode='r') as infile:\u000a    reader = csv.reader(infile)\u000a    with open('coors_new.csv', mode='w') as outfile:\u000a        writer = csv.writer(outfile)\u000a        mydict = {rows[0]:rows[1] for rows in reader}\u000a</code></pre>\u000a\u000a<p>Alternately, for python &lt;= 2.7.1, you want:</p>\u000a\u000a<pre><code>mydict = dict((rows[0],rows[1]) for rows in reader)\u000a</code></pre>\u000a
p1314
sVquestion_id
p1315
I6740918
sVlast_activity_date
p1316
I1311034604
sVcreation_date
p1317
I1311034604
sVscore
p1318
I71
sVowner
p1319
(dp1320
Vuser_id
p1321
I286340
sVprofile_image
p1322
Vhttps://www.gravatar.com/avatar/bd79db38b077342f501463815b8b9813?s=128&d=identicon&r=PG
p1323
sVuser_type
p1324
Vregistered
p1325
sVreputation
p1326
I8283
sVlink
p1327
Vhttp://stackoverflow.com/users/286340/nate
p1328
sVaccept_rate
p1329
I100
sVdisplay_name
p1330
VNate
p1331
ssVis_accepted
p1332
I01
sVanswer_id
p1333
I6740968
sa(dp1334
Vbody
p1335
V<pre><code>if not (args.process or args.upload):\u000a    parser.error('No action requested, add -process or -upload')\u000a</code></pre>\u000a
p1336
sVquestion_id
p1337
I6722936
sVlast_activity_date
p1338
I1310896297
sVcreation_date
p1339
I1310896297
sVscore
p1340
I50
sVowner
p1341
(dp1342
Vuser_id
p1343
I35070
sVprofile_image
p1344
Vhttps://www.gravatar.com/avatar/6f92354195e8874dbee44d5c8714d506?s=128&d=identicon&r=PG
p1345
sVuser_type
p1346
Vregistered
p1347
sVreputation
p1348
I151504
sVlink
p1349
Vhttp://stackoverflow.com/users/35070/phihag
p1350
sVaccept_rate
p1351
I77
sVdisplay_name
p1352
Vphihag
p1353
ssVis_accepted
p1354
I01
sVanswer_id
p1355
I6723066
sa(dp1356
Vbody
p1357
V<p>This is based on <a href="http://stackoverflow.com/questions/6629876/how-to-make-an-anonymous-function-in-python-without-christening-it/6630179#6630179">Udi's nice answer</a>.</p>\u000a\u000a<p>I think that the difficulty of creating anonymous functions is a bit of a red herring. What you really want to do is to keep related code together, and make the code neat. So I think decorators may work for you.</p>\u000a\u000a<pre><code>import re\u000a\u000a# List of pairs (regexp, handler)\u000ahandlers = []\u000a\u000adef handler_for(regexp):\u000a    """Declare a function as handler for a regular expression."""\u000a    def gethandler(f):\u000a        handlers.append((re.compile(regexp), f))\u000a        return f\u000a    return gethandler\u000a\u000a@handler_for(r'^&lt;\u005cw+&gt; (.*)')\u000adef handle_message(msg):\u000a    print msg\u000a\u000a@handler_for(r'^\u005c*{3} (.*)')\u000adef handle_warning(msg):\u000a    global num_warnings, num_fatals\u000a    num_warnings += 1\u000a    if is_fatal(msg):\u000a        num_fatals += 1\u000a</code></pre>\u000a
p1358
sVquestion_id
p1359
I6629876
sVlast_activity_date
p1360
I1310163105
sVcreation_date
p1361
I1310163105
sVscore
p1362
I37
sVowner
p1363
(dp1364
Vuser_id
p1365
I68063
sVprofile_image
p1366
Vhttps://www.gravatar.com/avatar/093d6dc5c8295d32bcb8e76c7c66455a?s=128&d=identicon&r=PG
p1367
sVuser_type
p1368
Vregistered
p1369
sVreputation
p1370
I45045
sVlink
p1371
Vhttp://stackoverflow.com/users/68063/gareth-rees
p1372
sVdisplay_name
p1373
VGareth Rees
p1374
ssVis_accepted
p1375
I01
sVanswer_id
p1376
I6631098
sa(dp1377
Vbody
p1378
V<p>Update for mysql 5.5 and config-win.h not visible issue</p>\u000a\u000a<p>In 5.5 config-win. has actually moved to Connector separate folder in windows. i.e. smth like:</p>\u000a\u000a<p>C:\u005cProgram Files\u005cMySQL\u005cConnector C 6.0.2\u005cinclude</p>\u000a\u000a<p>To overcome the problem one need not only to download "dev bits" (which actually connects the <em>connector</em>) but also to modify mysqldb install scripts to add the include folder. I've done a quick dirty fix as that. </p>\u000a\u000a<p>site.cfg:</p>\u000a\u000a<pre><code># Windows connector libs for MySQL.\u000aconnector = C:\u005cProgram Files\u005cMySQL\u005cConnector C 6.0.2\u000a</code></pre>\u000a\u000a<p>in setup_windows.py locate the line </p>\u000a\u000a<pre><code>include_dirs = [ os.path.join(mysql_root, r'include') ]:\u000a</code></pre>\u000a\u000a<p>and add:</p>\u000a\u000a<pre><code>include_dirs = [ os.path.join(options['connector'], r'include') ]\u000a</code></pre>\u000a\u000a<p>after it.</p>\u000a\u000a<p>Ugly but works until mysqldb authors will change the behaviour.</p>\u000a\u000a<hr>\u000a\u000a<p>Almost forgot to mention. In the same manner one needs to add similar additional entry for libs:</p>\u000a\u000a<pre><code>library_dirs = [ os.path.join(options['connector'], r'lib\u005copt') ]\u000a</code></pre>\u000a\u000a<p>i.e. your setup_windows.py looks pretty much like:</p>\u000a\u000a<pre><code>...\u000alibrary_dirs = [ os.path.join(mysql_root, r'lib\u005copt') ]\u000alibrary_dirs = [ os.path.join(options['connector'], r'lib\u005copt') ]\u000alibraries = [ 'kernel32', 'advapi32', 'wsock32', client ]\u000ainclude_dirs = [ os.path.join(mysql_root, r'include') ]\u000ainclude_dirs = [ os.path.join(options['connector'], r'include') ]\u000aextra_compile_args = [ '/Zl' ]\u000a...\u000a</code></pre>\u000a
p1379
sVquestion_id
p1380
I1972259
sVlast_activity_date
p1381
I1302940414
sVcreation_date
p1382
I1302940107
sVscore
p1383
I16
sVowner
p1384
(dp1385
Vuser_id
p1386
I650878
sVprofile_image
p1387
Vhttps://www.gravatar.com/avatar/e11ba7d2edf557a3109957641b10987b?s=128&d=identicon&r=PG
p1388
sVuser_type
p1389
Vregistered
p1390
sVreputation
p1391
I200
sVlink
p1392
Vhttp://stackoverflow.com/users/650878/bugagotti
p1393
sVdisplay_name
p1394
VBugagotti
p1395
ssVis_accepted
p1396
I01
sVlast_edit_date
p1397
I1302940414
sVanswer_id
p1398
I5685209
sa(dp1399
Vbody
p1400
V<pre><code>&gt;&gt;&gt; soup = BeautifulSoup('&lt;script&gt;a&lt;/script&gt;baba&lt;script&gt;b&lt;/script&gt;')\u000a&gt;&gt;&gt; [s.extract() for s in soup('script')]\u000a&gt;&gt;&gt; soup\u000ababa\u000a</code></pre>\u000a
p1401
sVquestion_id
p1402
I5598524
sVlast_activity_date
p1403
I1302283871
sVcreation_date
p1404
I1302283871
sVscore
p1405
I94
sVowner
p1406
(dp1407
Vuser_id
p1408
I541842
sVprofile_image
p1409
Vhttps://www.gravatar.com/avatar/8f7f40878fd90c71f8ec6abfcafeb20c?s=128&d=identicon&r=PG
p1410
sVuser_type
p1411
Vregistered
p1412
sVreputation
p1413
I6175
sVlink
p1414
Vhttp://stackoverflow.com/users/541842/f%c3%a1bio-diniz
p1415
sVaccept_rate
p1416
I75
sVdisplay_name
p1417
VF&#225;bio Diniz
p1418
ssVis_accepted
p1419
I01
sVanswer_id
p1420
I5598678
sa(dp1421
Vbody
p1422
V<blockquote>\u000a  <p>I read several times in books that\u000a  exceptions should never ever hold a\u000a  string, because strings themselves can\u000a  throw exceptions. Any real truth to\u000a  this?</p>\u000a</blockquote>\u000a\u000a<p>What?</p>\u000a\u000a<p>Please provide a reference or a link to this.  It's totally untrue.</p>\u000a\u000a<p>Since all objects can throw exceptions, no object could be contained in an exception by that logic.</p>\u000a\u000a<p>No, the "no strings" is simply crazy in a Python context.  Perhaps you read it in a C++ context.</p>\u000a\u000a<hr>\u000a\u000a<p><strong>Edit</strong></p>\u000a\u000a<p>Once upon a time (back in the olden days) you could raise a Python exception by name instead of by the actual class.</p>\u000a\u000a<pre><code>raise "SomeNameOfAnExceptionClass"\u000a</code></pre>\u000a\u000a<p>This is bad.  But this is <em>not</em> including a string inside an exception.  This is naming the exception with a string instead of the actual class object.  In 2.5, this can still work, but gets a deprecation warning.</p>\u000a\u000a<p>Perhaps this is what you read "Do not raise an exception with a string name"</p>\u000a
p1423
sVquestion_id
p1424
I839636
sVlast_activity_date
p1425
I1301050837
sVcreation_date
p1426
I1241787279
sVscore
p1427
I27
sVowner
p1428
(dp1429
Vuser_id
p1430
I10661
sVprofile_image
p1431
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1432
sVuser_type
p1433
Vregistered
p1434
sVreputation
p1435
I277525
sVlink
p1436
Vhttp://stackoverflow.com/users/10661/s-lott
p1437
sVaccept_rate
p1438
I92
sVdisplay_name
p1439
VS.Lott
p1440
ssVis_accepted
p1441
I01
sVlast_edit_date
p1442
I1301050837
sVanswer_id
p1443
I839662
sa(dp1444
Vbody
p1445
V<p>Yes, that's perfectly fine.  In fact, <a href="http://docs.python.org/reference/datamodel.html#object.__ne__" rel="noreferrer">the documentation</a> urges you to define <code>__ne__</code> when you define <code>__eq__</code>:</p>\u000a\u000a<blockquote>\u000a  <p>There are no implied relationships\u000a  among the comparison operators. The\u000a  truth of <code>x==y</code> does not imply that <code>x!=y</code>\u000a  is false. Accordingly, when defining\u000a  <code>__eq__()</code>, one should also define <code>__ne__()</code> so that the operators will behave as expected.</p>\u000a</blockquote>\u000a\u000a<p>In a lot of cases (such as this one), it will be as simple as negating the result of <code>__eq__</code>, but not always.</p>\u000a
p1446
sVquestion_id
p1447
I4352244
sVlast_activity_date
p1448
I1291443982
sVcreation_date
p1449
I1291443982
sVscore
p1450
I42
sVowner
p1451
(dp1452
Vuser_id
p1453
I9453
sVprofile_image
p1454
Vhttps://www.gravatar.com/avatar/5548ce8747dd83e1ff1159dcf2d07ff0?s=128&d=identicon&r=PG
p1455
sVuser_type
p1456
Vregistered
p1457
sVreputation
p1458
I36195
sVlink
p1459
Vhttp://stackoverflow.com/users/9453/daniel-dipaolo
p1460
sVdisplay_name
p1461
VDaniel DiPaolo
p1462
ssVis_accepted
p1463
I01
sVanswer_id
p1464
I4352272
sa(dp1465
Vbody
p1466
V<p>According to the <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.META" rel="noreferrer">documentation</a> <code>request.META</code> is a "standard Python dictionary containing all available HTTP headers". If you want to get <em>all</em> the headers you can simply iterate through the dictionary. </p>\u000a\u000a<p>Which part of your code to do this depends on your exact requirement. Anyplace that has access to <code>request</code> should do.</p>\u000a\u000a<p><strong>Update</strong></p>\u000a\u000a<blockquote>\u000a  <p>I need to access it in a Middleware class but when i iterate over it, I get a lot of values apart from HTTP headers.</p>\u000a</blockquote>\u000a\u000a<p>From the documentation:</p>\u000a\u000a<blockquote>\u000a  <p>With the exception of <code>CONTENT_LENGTH</code> and <code>CONTENT_TYPE</code>, as given above, any <code>HTTP</code> headers in the request are converted to <code>META</code> keys by converting all characters to uppercase, replacing any hyphens with underscores and <strong><em>adding an <code>HTTP_</code> prefix to the name</em></strong>. </p>\u000a</blockquote>\u000a\u000a<p>(Emphasis added)</p>\u000a\u000a<p>To get the <code>HTTP</code> headers alone, just filter by keys prefixed with <code>HTTP_</code>. </p>\u000a\u000a<p><strong>Update 2</strong></p>\u000a\u000a<blockquote>\u000a  <p>could you show me how I could build a dictionary of headers by filtering out all the keys from the request.META variable which begin with a HTTP_ and strip out the leading HTTP_ part.</p>\u000a</blockquote>\u000a\u000a<p>Sure. Here is one way to do it.</p>\u000a\u000a<pre><code>import re\u000aregex = re.compile('^HTTP_')\u000adict((regex.sub('', header), value) for (header, value) \u000a       in request.META.items() if header.startswith('HTTP_'))\u000a</code></pre>\u000a
p1467
sVquestion_id
p1468
I3889769
sVlast_activity_date
p1469
I1286541460
sVcreation_date
p1470
I1286535113
sVscore
p1471
I72
sVowner
p1472
(dp1473
Vuser_id
p1474
I140185
sVprofile_image
p1475
Vhttps://www.gravatar.com/avatar/3d8fead2a83893fb2f03eec42ece2de3?s=128&d=identicon&r=PG
p1476
sVuser_type
p1477
Vregistered
p1478
sVreputation
p1479
I38497
sVlink
p1480
Vhttp://stackoverflow.com/users/140185/manoj-govindan
p1481
sVaccept_rate
p1482
I93
sVdisplay_name
p1483
VManoj Govindan
p1484
ssVis_accepted
p1485
I01
sVlast_edit_date
p1486
I1286541460
sVanswer_id
p1487
I3889790
sa(dp1488
Vbody
p1489
V<p>First off, I think mplot3D worked a bit differently in matplotlib version 0.99 than it does in the current version of matplotlib.</p>\u000a\u000a<p>Which version are you using? (Try running: <code>python -c 'import matplotlib; print matplotlib.__version__'</code>)</p>\u000a\u000a<p>I'm guessing you're running version 0.99, in which case you'll need to either use a slightly different syntax or update to a more recent version of matplotlib.</p>\u000a\u000a<p>If you're running version 0.99, try doing this instead of using using the <code>projection</code> keyword argument:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000afrom mpl_toolkits.mplot3d import axes3d, Axes3D #&lt;-- Note the capitalization! \u000afig = plt.figure()\u000a\u000aax = Axes3D(fig) #&lt;-- Note the difference from your original code...\u000a\u000aX, Y, Z = axes3d.get_test_data(0.05)\u000acset = ax.contour(X, Y, Z, 16, extend3d=True)\u000aax.clabel(cset, fontsize=9, inline=1)\u000aplt.show()\u000a</code></pre>\u000a\u000a<p>This should work in matplotlib 1.0.x, as well, not just 0.99.</p>\u000a
p1490
sVquestion_id
p1491
I3810865
sVlast_activity_date
p1492
I1285874385
sVcreation_date
p1493
I1285674135
sVscore
p1494
I57
sVowner
p1495
(dp1496
Vuser_id
p1497
I325565
sVprofile_image
p1498
Vhttps://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=128&d=identicon&r=PG
p1499
sVuser_type
p1500
Vregistered
p1501
sVreputation
p1502
I136691
sVlink
p1503
Vhttp://stackoverflow.com/users/325565/joe-kington
p1504
sVdisplay_name
p1505
VJoe Kington
p1506
ssVis_accepted
p1507
I01
sVlast_edit_date
p1508
I1285874385
sVanswer_id
p1509
I3812324
sa(dp1510
Vbody
p1511
V<p>People seem to be over complicating this.. Just combine the two lists, then sort them:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; l1 = [1, 3, 4, 7]\u000a&gt;&gt;&gt; l2 = [0, 2, 5, 6, 8, 9]\u000a&gt;&gt;&gt; l1.extend(l2)\u000a&gt;&gt;&gt; sorted(l1)\u000a[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\u000a</code></pre>\u000a\u000a<p>..or shorter (and without modifying <code>l1</code>):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sorted(l1 + l2)\u000a[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\u000a</code></pre>\u000a\u000a<p>..easy! Plus, it's using only two built-in functions, so assuming the lists are of a reasonable size, it should be quicker than implementing the sorting/merging in a loop. More importantly, the above is much less code, and very readable.</p>\u000a\u000a<p>If your lists are large (over a few hundred thousand, I would guess), it may be quicker to use an alternative/custom sorting method, but there are likely other optimisations to be made first (e.g not storing millions of <code>datetime</code> objects)</p>\u000a\u000a<p>Using the <code>timeit.Timer().repeat()</code> (which repeats the functions 1000000 times), I loosely benchmarked it against <a href="http://stackoverflow.com/questions/464342/combining-two-sorted-lists-in-python#464454">ghoseb's</a> solution, and <code>sorted(l1+l2)</code> is substantially quicker:</p>\u000a\u000a<p><code>merge_sorted_lists</code> took..</p>\u000a\u000a<pre><code>[9.7439379692077637, 9.8844599723815918, 9.552299976348877]\u000a</code></pre>\u000a\u000a<p><code>sorted(l1+l2)</code> took..</p>\u000a\u000a<pre><code>[2.860386848449707, 2.7589840888977051, 2.7682540416717529]\u000a</code></pre>\u000a
p1512
sVquestion_id
p1513
I464342
sVlast_activity_date
p1514
I1283766963
sVcreation_date
p1515
I1232529248
sVscore
p1516
I87
sVowner
p1517
(dp1518
Vuser_id
p1519
I745
sVprofile_image
p1520
Vhttps://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=128&d=identicon&r=PG
p1521
sVuser_type
p1522
Vregistered
p1523
sVreputation
p1524
I100294
sVlink
p1525
Vhttp://stackoverflow.com/users/745/dbr
p1526
sVaccept_rate
p1527
I90
sVdisplay_name
p1528
Vdbr
p1529
ssVis_accepted
p1530
I01
sVlast_edit_date
p1531
I1283766963
sVanswer_id
p1532
I464538
sa(dp1533
Vbody
p1534
V<p>Celery does set some default keyword arguments if the task accepts them.\u000a(you can accept them by either using **kwargs, or list them specifically)</p>\u000a\u000a<pre><code>@task\u000adef do_job(path, task_id=None):\u000a    cache.set(task_id, operation_results)\u000a</code></pre>\u000a\u000a<p>The list of default keyword arguments is documented here:\u000a<a href="http://ask.github.com/celery/userguide/tasks.html#default-keyword-arguments" rel="noreferrer">http://ask.github.com/celery/userguide/tasks.html#default-keyword-arguments</a></p>\u000a
p1535
sVquestion_id
p1536
I3302320
sVlast_activity_date
p1537
I1279743437
sVcreation_date
p1538
I1279743437
sVscore
p1539
I7
sVowner
p1540
(dp1541
Vuser_id
p1542
I5577
sVprofile_image
p1543
Vhttps://www.gravatar.com/avatar/7e8b501f7f579c66ddac7e65cb7962b4?s=128&d=identicon&r=PG
p1544
sVuser_type
p1545
Vregistered
p1546
sVreputation
p1547
I14317
sVlink
p1548
Vhttp://stackoverflow.com/users/5577/asksol
p1549
sVdisplay_name
p1550
Vasksol
p1551
ssVis_accepted
p1552
I01
sVanswer_id
p1553
I3303443
sa(dp1554
Vbody
p1555
V<p>Here's the general plan for Twisted.  I was originally going to blog this, but then I thought: why blog about it when I could get <em>points</em> for it?</p>\u000a\u000a<ol>\u000a<li><p><strong>Wait until somebody cares.</strong></p>\u000a\u000a<p>Right now, nobody has Python 3.  We're not going to spend a bunch of effort until at least one actual user has come forth and said "I need Python 3.0 support", and has a good reason for it aside from the fact that 3.0 looks shiny.</p></li>\u000a<li><p><strong>Wait until our dependencies have migrated.</strong></p>\u000a\u000a<p>A large system like Twisted has a number of dependencies.  For starters, ours include:</p>\u000a\u000a<ul>\u000a<li><a href="http://www.zope.org/Products/%5AopeInterface" rel="noreferrer">Zope Interface</a></li>\u000a<li><a href="http://www.dlitz.net/software/pycrypto/" rel="noreferrer">PyCrypto</a></li>\u000a<li><a href="https://launchpad.net/pyopenssl/" rel="noreferrer">PyOpenSSL</a></li>\u000a<li><a href="http://sourceforge.net/projects/pywin32/" rel="noreferrer">pywin32</a></li>\u000a<li><a href="http://www.pygtk.org/" rel="noreferrer">PyGTK</a> (though this dependency is sadly very light right now, by the time migration rolls around, I hope Twisted will have more GUI tools)</li>\u000a<li><a href="http://pyasn1.sourceforge.net/" rel="noreferrer">pyasn1</a></li>\u000a<li><a href="http://www.pangalactic.org/PyPAM/" rel="noreferrer">PyPAM</a></li>\u000a<li><a href="http://gmpy.sourceforge.net/" rel="noreferrer">gmpy</a></li>\u000a</ul>\u000a\u000a<p>Some of these projects have their own array of dependencies so we'll have to wait for those as well.</p></li>\u000a<li><p><strong>Wait until somebody cares enough <em>to help</em>.</strong></p>\u000a\u000a<p>There are, charitably, 5 people who work on Twisted - and I say "charitably" because that's counting me, and I haven't committed in months.  We have <a href="http://twistedmatrix.com/trac/report/1" rel="noreferrer">over 1000 open tickets</a> right now, and it would be nice to actually fix some of those \u2014 fix bugs, add features, and generally make Twisted a better product in its own right \u2014 before spending time on getting it ported over to a substantially new version of the language.</p>\u000a\u000a<p>This potentially includes <a href="http://twistedmatrix.com/trac/wiki/TwistedSoftwareFoundation" rel="noreferrer">sponsors</a> caring enough to pay for us to do it, but I hope that there will be an influx of volunteers who care about 3.0 support and want to help move the community forward.</p></li>\u000a<li><p><strong>Follow Guido's advice.</strong></p>\u000a\u000a<p>This means <strong><em><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=227041" rel="noreferrer">we will not change our API incompatibly</a></em></strong>, and we will follow the <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=208549" rel="noreferrer">transitional development guidelines</a> that Guido posted last year.  That starts with having unit tests, and running <a href="http://docs.python.org/library/2to3.html" rel="noreferrer">the 2to3 conversion tool</a> over the Twisted codebase.</p></li>\u000a<li><p><strong>Report bugs against, and file patches for, the 2to3 tool</strong>.</p>\u000a\u000a<p>When we get to the point where we're actually using it, I anticipate that there will be a lot of problems with running <code>2to3</code> in the future.  Running it over Twisted right now takes an extremely long time and (last I checked, which was quite a while ago) can't parse a few of the files in the Twisted repository, so the resulting output won't import.  I think there will have to be a fair amount of success stories from small projects and a lot of hammering on the tool before it will actually work for us.</p>\u000a\u000a<p>However, the Python development team has been very helpful in responding to our bug reports, and early responses to these problems have been encouraging, so I expect that all of these issues will be fixed in time.</p></li>\u000a<li><p><strong>Maintain 2.x compatibility for several years.</strong></p>\u000a\u000a<p>Right now, Twisted supports python 2.3 to 2.5.  Currently, we're working on 2.6 support (which we'll obviously have to finish before 3.0!).  Our plan is to we revise our supported versions of Python based on the long-term supported versions of <a href="http://en.wikipedia.org/wiki/Ubuntu" rel="noreferrer">Ubuntu</a> - release 8.04, which includes Python 2.5, will be supported until 2013.  According to Guido's advice we will need to drop support for 2.5 in order to support 3.0, but I am hoping we can find a way around that (we are pretty creative with version-compatibility hacks).</p>\u000a\u000a<p>So, we are planning to support Python 2.5 until at least 2013.  In two years, Ubuntu will release another long-term supported version of Ubuntu: if they still exist, and stay on schedule, that will be 10.04.  Personally I am guessing that this will ship with Python 2.x, perhaps python 2.8, as <code>/usr/bin/python</code>, because there is a huge amount of Python software packaged with the distribution and it will take a long time to update it all.  So, five years from <em>then</em>, in 2015, we can start looking at dropping 2.x support.</p>\u000a\u000a<p>During this period, we will continue to follow Guido's advice about migration: running 2to3 over our 2.x codebase, and modifying the 2.x codebase to keep its tests passing in both versions.</p>\u000a\u000a<p>The upshot of this is that Python 3.x will not be a <em>source</em> language for Twisted until well after my 35th birthday \u2014 it will be a target runtime (and a set of guidelines and restrictions) for my python 2.x code.  I expect to be writing programs in Python 2.x for the next ten years or so.</p></li>\u000a</ol>\u000a\u000a<p>So, that's the plan.  I'm hoping that it ends up looking laughably conservative in a year or so; that the 3.x transition is easy as pie, and everyone rapidly upgrades.  Other things could happen, too: the 2.x and 3.x branches could converge, someone might end up writing a <code>3to2</code>, or another runtime (PyPy comes to mind) might allow for running 2.x and 3.x code in the same process directly, making our conversion process easier.</p>\u000a\u000a<p>For the time being, however, we're assuming that, for many years, we will have people with large codebases they're maintaining (or people writing new code who want to use <em>other</em> libraries which have not yet been migrated) who still want new features and bug fixes in Twisted.  Pretty soon I expect we will also have bleeding-edge users that want to use Twisted on python 3.  I'd like to provide all of those people with a positive experience for as long as possible.</p>\u000a
p1556
sVquestion_id
p1557
I172306
sVlast_activity_date
p1558
I1278506722
sVcreation_date
p1559
I1224305997
sVscore
p1560
I88
sVowner
p1561
(dp1562
Vuser_id
p1563
I13564
sVprofile_image
p1564
Vhttps://www.gravatar.com/avatar/e1554622707bedd9202884900430b838?s=128&d=identicon&r=PG
p1565
sVuser_type
p1566
Vregistered
p1567
sVreputation
p1568
I24940
sVlink
p1569
Vhttp://stackoverflow.com/users/13564/glyph
p1570
sVaccept_rate
p1571
I52
sVdisplay_name
p1572
VGlyph
p1573
ssVis_accepted
p1574
I01
sVlast_edit_date
p1575
I1278506722
sVanswer_id
p1576
I214601
sa(dp1577
Vbody
p1578
V<p>First, any time you run a script using the interpreter explicitly, as in</p>\u000a\u000a<pre><code>$ python ./my_script.py\u000a$ ksh ~/bin/redouble.sh\u000a$ lua5.1 /usr/local/bin/osbf3\u000a</code></pre>\u000a\u000a<p>the <code>#!</code> line is always ignored.  The <code>#!</code> line is a Unix feature of <em>executable</em> scripts only, and you can see it documented in full on the <a href="http://linux.die.net/man/2/execve" rel="noreferrer">man page for <code>execve(2)</code></a>.  There you will find that the word following <code>#!</code> must be the pathname of a valid executable.  So</p>\u000a\u000a<pre><code>#!/usr/bin/env python\u000a</code></pre>\u000a\u000a<p>executes whatever <code>python</code> is on the users <code>$PATH</code>.  This form is resilient to the Python interpreter being moved around, which makes it somewhat more portable, but it also means that the user can override the standard Python interpreter by putting something ahead of it in <code>$PATH</code>.  Depending on your goals, this behavior may or may not be OK.</p>\u000a\u000a<p>Next,</p>\u000a\u000a<pre><code>#!/usr/bin/python\u000a</code></pre>\u000a\u000a<p>deals with the common case that a Python interpreter is installed in <code>/usr/bin</code>.  If it's installed somewhere else, you lose.  But this is a good way to ensure you get exactly the version you want or else nothing at all ("fail-stop" behavior), as in </p>\u000a\u000a<pre><code>#!/usr/bin/python2.5\u000a</code></pre>\u000a\u000a<p>Finally,</p>\u000a\u000a<pre><code>#!python\u000a</code></pre>\u000a\u000a<p>works only if there is a <code>python</code> executable in the current directory when the script is run.  Not recommended.</p>\u000a
p1579
sVquestion_id
p1580
I3128669
sVlast_activity_date
p1581
I1277688814
sVcreation_date
p1582
I1277688814
sVscore
p1583
I57
sVowner
p1584
(dp1585
Vuser_id
p1586
I41661
sVprofile_image
p1587
Vhttps://www.gravatar.com/avatar/7dd45a27a5616b8a5608b84007e4e08f?s=128&d=identicon&r=PG
p1588
sVuser_type
p1589
Vregistered
p1590
sVreputation
p1591
I148280
sVlink
p1592
Vhttp://stackoverflow.com/users/41661/norman-ramsey
p1593
sVaccept_rate
p1594
I64
sVdisplay_name
p1595
VNorman Ramsey
p1596
ssVis_accepted
p1597
I01
sVanswer_id
p1598
I3129622
sa(dp1599
Vbody
p1600
V<p>If you are fluent with <a href="http://www.crummy.com/software/BeautifulSoup" rel="noreferrer">BeautifulSoup</a>, you could just add <a href="http://code.google.com/p/soupselect/" rel="noreferrer">soupselect</a> to your libs.<br>\u000aSoupselect is a CSS selector extension for BeautifulSoup.</p>\u000a\u000a<p>Usage:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as Soup\u000a&gt;&gt;&gt; from soupselect import select\u000a&gt;&gt;&gt; import urllib\u000a&gt;&gt;&gt; soup = Soup(urllib.urlopen('http://slashdot.org/'))\u000a&gt;&gt;&gt; select(soup, 'div.title h3')\u000a[&lt;h3&gt;&lt;span&gt;&lt;a href='//science.slashdot.org/'&gt;Science&lt;/a&gt;:&lt;/span&gt;&lt;/h3&gt;,\u000a &lt;h3&gt;&lt;a href='//slashdot.org/articles/07/02/28/0120220.shtml'&gt;Star Trek&lt;/h3&gt;,\u000a..]\u000a</code></pre>\u000a
p1601
sVquestion_id
p1602
I3051295
sVlast_activity_date
p1603
I1276674174
sVcreation_date
p1604
I1276673521
sVscore
p1605
I45
sVowner
p1606
(dp1607
Vuser_id
p1608
I130929
sVprofile_image
p1609
Vhttps://www.gravatar.com/avatar/0db359dc9dcb63067f6d7c8ad856e019?s=128&d=identicon&r=PG
p1610
sVuser_type
p1611
Vregistered
p1612
sVreputation
p1613
I37239
sVlink
p1614
Vhttp://stackoverflow.com/users/130929/systempuntoout
p1615
sVaccept_rate
p1616
I93
sVdisplay_name
p1617
Vsystempuntoout
p1618
ssVis_accepted
p1619
I01
sVlast_edit_date
p1620
I1276674174
sVanswer_id
p1621
I3051389
sa(dp1622
Vbody
p1623
V<p>Testing strings with <code>is</code> only works when the strings are interned. Unless you really know what you're doing and explicitly <a href="http://en.wikipedia.org/wiki/String_interning" rel="noreferrer">interned</a> the strings you should <em>never</em> use <code>is</code> on strings. </p>\u000a\u000a<p><code>is</code> tests for <em>identity</em>, not <em>equality</em>. That means Python simply compares the memory address a object resides in. <code>is</code> basically answers the question "Do I have two names for the same object?" - overloading that would make no sense.</p>\u000a\u000a<p>For example, <code>("a" * 100) is ("a" * 100)</code> is <strong>False</strong>. Usually Python writes each string into a different memory location, interning mostly happens for string literals.</p>\u000a
p1624
sVquestion_id
p1625
I2987958
sVlast_activity_date
p1626
I1275900087
sVcreation_date
p1627
I1275898904
sVscore
p1628
I98
sVowner
p1629
(dp1630
Vuser_id
p1631
I95612
sVprofile_image
p1632
Vhttps://www.gravatar.com/avatar/e2166d0ea599ad4b0c57054b55f0600f?s=128&d=identicon&r=PG
p1633
sVuser_type
p1634
Vregistered
p1635
sVreputation
p1636
I63439
sVlink
p1637
Vhttp://stackoverflow.com/users/95612/jochen-ritzel
p1638
sVaccept_rate
p1639
I80
sVdisplay_name
p1640
VJochen Ritzel
p1641
ssVis_accepted
p1642
I01
sVlast_edit_date
p1643
I1275900087
sVanswer_id
p1644
I2987975
sa(dp1645
Vbody
p1646
V<p>I suppose you have <code>set smartindent</code> in your .vimrc</p>\u000a\u000a<p>See <code>:h smartindent</code></p>\u000a\u000a<pre><code>When typing '#' as the first character in a new line, the indent for\u000athat line is removed, the '#' is put in the first column.  The indent\u000ais restored for the next line.  If you don't want this, use this\u000amapping: ":inoremap # X^H#", where ^H is entered with CTRL-V CTRL-H.\u000aWhen using the "&gt;&gt;" command, lines starting with '#' are not shifted\u000aright.\u000a</code></pre>\u000a\u000a<p>I believe you don't need smartindenting while coding python. So just remove it from your settings or add the following to your .vimrc:</p>\u000a\u000a<pre><code>au! FileType python setl nosmartindent\u000a</code></pre>\u000a
p1647
sVquestion_id
p1648
I2063175
sVlast_activity_date
p1649
I1263475605
sVcreation_date
p1650
I1263475605
sVscore
p1651
I49
sVowner
p1652
(dp1653
Vuser_id
p1654
I86634
sVprofile_image
p1655
Vhttps://www.gravatar.com/avatar/d870fe710d301adff10c9042f43e0373?s=128&d=identicon&r=PG
p1656
sVuser_type
p1657
Vregistered
p1658
sVreputation
p1659
I4286
sVlink
p1660
Vhttp://stackoverflow.com/users/86634/maxim-kim
p1661
sVdisplay_name
p1662
VMaxim Kim
p1663
ssVis_accepted
p1664
I01
sVanswer_id
p1665
I2064318
sa(dp1666
Vbody
p1667
V<p>If the only reason to modify the path is for developers working from their working tree, then you should use an installation tool to set up your environment for you.  virtualenv is very popular, and if you are using setuptools, you can simply run <code>setup.py develop</code> to semi-install the working tree in your current Python installation.</p>\u000a
p1668
sVquestion_id
p1669
I1893598
sVlast_activity_date
p1670
I1260628746
sVcreation_date
p1671
I1260628746
sVscore
p1672
I30
sVowner
p1673
(dp1674
Vuser_id
p1675
I14343
sVprofile_image
p1676
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p1677
sVuser_type
p1678
Vregistered
p1679
sVreputation
p1680
I193903
sVlink
p1681
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p1682
sVaccept_rate
p1683
I80
sVdisplay_name
p1684
VNed Batchelder
p1685
ssVis_accepted
p1686
I01
sVanswer_id
p1687
I1893622
sa(dp1688
Vbody
p1689
V<p>OK, well since I had to find a way forward I improvised.  I've internally created a git repository with a hacked-together version of pywin32 that will install within a virtualenv using the standard <code>setup.py</code> script.  It took a lot of fiddling to make it work right but I managed to get it to load and the dependent code now works as I need it to.  If people feel this would be of benefit to the community please post a comment: if I get enough I'll try and put something up on my github account.</p>\u000a
p1690
sVquestion_id
p1691
I1830304
sVlast_activity_date
p1692
I1259741593
sVcreation_date
p1693
I1259741593
sVscore
p1694
I4
sVowner
p1695
(dp1696
Vuser_id
p1697
I912
sVprofile_image
p1698
Vhttps://www.gravatar.com/avatar/62c795f7890d6c5b889b665f457320ee?s=128&d=identicon&r=PG
p1699
sVuser_type
p1700
Vregistered
p1701
sVreputation
p1702
I36301
sVlink
p1703
Vhttp://stackoverflow.com/users/912/jkp
p1704
sVaccept_rate
p1705
I75
sVdisplay_name
p1706
Vjkp
p1707
ssVis_accepted
p1708
I01
sVanswer_id
p1709
I1831370
sa(dp1710
Vbody
p1711
V<p>When built with --enable-unicode=ucs4:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import sys\u000a&gt;&gt;&gt; print sys.maxunicode\u000a1114111\u000a</code></pre>\u000a\u000a<p>When built with --enable-unicode=ucs2:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import sys\u000a&gt;&gt;&gt; print sys.maxunicode\u000a65535\u000a</code></pre>\u000a
p1712
sVquestion_id
p1713
I1446347
sVlast_activity_date
p1714
I1253302425
sVcreation_date
p1715
I1253302425
sVscore
p1716
I84
sVowner
p1717
(dp1718
Vuser_id
p1719
I131414
sVprofile_image
p1720
Vhttps://www.gravatar.com/avatar/45fd329b5f827be87edcc98eb1a2301a?s=128&d=identicon&r=PG
p1721
sVuser_type
p1722
Vregistered
p1723
sVreputation
p1724
I3977
sVlink
p1725
Vhttp://stackoverflow.com/users/131414/stef
p1726
sVdisplay_name
p1727
VStef
p1728
ssVis_accepted
p1729
I01
sVanswer_id
p1730
I1446456
sa(dp1731
Vbody
p1732
V<p>Nope.  Django filters operate at the database level, generating SQL.  To filter based on Python properties, you have to load the object into Python to evaluate the property--and at that point, you've already done all the work to load it.</p>\u000a
p1733
sVquestion_id
p1734
I1205375
sVlast_activity_date
p1735
I1248944985
sVcreation_date
p1736
I1248944985
sVscore
p1737
I44
sVowner
p1738
(dp1739
Vuser_id
p1740
I136829
sVprofile_image
p1741
Vhttps://www.gravatar.com/avatar/e92146e270ae11efac6405927b6439af?s=128&d=identicon&r=PG
p1742
sVuser_type
p1743
Vregistered
p1744
sVreputation
p1745
I35840
sVlink
p1746
Vhttp://stackoverflow.com/users/136829/glenn-maynard
p1747
sVdisplay_name
p1748
VGlenn Maynard
p1749
ssVis_accepted
p1750
I01
sVanswer_id
p1751
I1205389
sa(dp1752
Vbody
p1753
V<p>Here's something, a Python wrapper around the SeaMonkey Javascript interpreter... <a href="http://pypi.python.org/pypi/python-spidermonkey" rel="noreferrer">http://pypi.python.org/pypi/python-spidermonkey</a></p>\u000a
p1754
sVquestion_id
p1755
I683462
sVlast_activity_date
p1756
I1238015589
sVcreation_date
p1757
I1238015589
sVscore
p1758
I18
sVowner
p1759
(dp1760
Vuser_id
p1761
I56541
sVprofile_image
p1762
Vhttps://i.stack.imgur.com/C6rHm.png?s=128&g=1
p1763
sVuser_type
p1764
Vregistered
p1765
sVreputation
p1766
I76997
sVlink
p1767
Vhttp://stackoverflow.com/users/56541/david-z
p1768
sVaccept_rate
p1769
I81
sVdisplay_name
p1770
VDavid Z
p1771
ssVis_accepted
p1772
I01
sVanswer_id
p1773
I683481
sa(dp1774
Vbody
p1775
V<p>Don't conflate Language and Run-Time.</p>\u000a\u000a<p>Python (the language) has many run-time implementations.</p>\u000a\u000a<ul>\u000a<li><p>CPython is usually interpreted, and will be slower than native-code C#.  It might be slower than Java, depending on the Java JIT compiler.</p></li>\u000a<li><p>JYthon is interpreted in the JVM and has the same performance profile as Java.</p></li>\u000a<li><p>IronPython is relies on the same .NET libraries and IL as C#, so the performance difference will be relatively small.</p></li>\u000a<li><p>Python can be translated to native code via PyREX, PyToC, and others.  In this case, it will generally perform as well as C++.  You can -- to an extent -- further optimize C++ and perhaps squeeze out a little bit better performance than unoptimized output from PyREX. </p>\u000a\u000a<p>For more information, see <a href="http://arcriley.blogspot.com/2009/03/so-long-pyrex.html" rel="noreferrer">http://arcriley.blogspot.com/2009/03/so-long-pyrex.html</a></p></li>\u000a</ul>\u000a\u000a<p>Note that Python (the language) is not slow.  Some Python run-times (CPython, for example) will be slower than native-code C++.</p>\u000a
p1776
sVquestion_id
p1777
I672857
sVlast_activity_date
p1778
I1237823278
sVcreation_date
p1779
I1237807508
sVscore
p1780
I93
sVowner
p1781
(dp1782
Vuser_id
p1783
I10661
sVprofile_image
p1784
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1785
sVuser_type
p1786
Vregistered
p1787
sVreputation
p1788
I277525
sVlink
p1789
Vhttp://stackoverflow.com/users/10661/s-lott
p1790
sVaccept_rate
p1791
I92
sVdisplay_name
p1792
VS.Lott
p1793
ssVis_accepted
p1794
I01
sVlast_edit_date
p1795
I1237823278
sVanswer_id
p1796
I673019
sa(dp1797
Vbody
p1798
V<p>It automatically sorts a list of tuples by the first elements in the tuples, then by the second elements and so on tuple([1,2,3]) will go before tuple([1,2,4]). If you want to override this behaviour pass a callable as the second argument to the sort method. This callable should return 1, -1, 0.</p>\u000a
p1799
sVquestion_id
p1800
I644170
sVlast_activity_date
p1801
I1236971930
sVcreation_date
p1802
I1236971629
sVscore
p1803
I62
sVowner
p1804
(dp1805
Vuser_id
p1806
I7883
sVprofile_image
p1807
Vhttps://www.gravatar.com/avatar/e2e0b96391e9e1b741114fa507247995?s=128&d=identicon&r=PG
p1808
sVuser_type
p1809
Vregistered
p1810
sVreputation
p1811
I14548
sVlink
p1812
Vhttp://stackoverflow.com/users/7883/vasil
p1813
sVaccept_rate
p1814
I50
sVdisplay_name
p1815
VVasil
p1816
ssVis_accepted
p1817
I01
sVlast_edit_date
p1818
I1236971930
sVanswer_id
p1819
I644189
sa(dp1820
Vbody
p1821
V<p>Besides the Jeff Hardy blog post on <a href="http://jdhardy.blogspot.com/2008/12/django-ironpython.html" rel="noreferrer">Django + IronPython</a> mentioned by Tony Meyer, it might be useful to also read Jeff's two other posts in the same series on his struggles with IronPython, easy_install and zlib. The first is <a href="http://jdhardy.blogspot.com/2008/12/solving-zlib-problem-ironpythonzlib.html" rel="noreferrer">Solving the zlib problem</a> which discusses the absence of zlib for IronPython; hence, no easyinstall. Jeff reimplemented zlib based on ComponentAce's zlib.net. And finally, in <a href="http://jdhardy.blogspot.com/2008/12/easyinstall-on-ironpython-part-deux.html" rel="noreferrer">easy_install on IronPython, Part Deux</a> Jeff discusses some final tweaks that are needed before easy_install can be used with IronPython.</p>\u000a
p1822
sVquestion_id
p1823
I425990
sVlast_activity_date
p1824
I1233873919
sVcreation_date
p1825
I1233873608
sVscore
p1826
I25
sVowner
p1827
(dp1828
Vuser_id
p1829
I62957
sVprofile_image
p1830
Vhttps://www.gravatar.com/avatar/94811cc920ed9faa9774033ab5c170a9?s=128&d=identicon&r=PG
p1831
sVuser_type
p1832
Vregistered
p1833
sVreputation
p1834
I1296
sVlink
p1835
Vhttp://stackoverflow.com/users/62957/serx
p1836
sVdisplay_name
p1837
VSerx
p1838
ssVis_accepted
p1839
I01
sVlast_edit_date
p1840
I1233873919
sVanswer_id
p1841
I518317
sa(dp1842
Vbody
p1843
V<p>Not quite.  Creating a <code>Request</code> object does not actually send the request, and Request objects have no <code>Read()</code> method.  (Also: <code>read()</code> is lowercase.)  All you need to do is pass the <code>Request</code> as the first argument to <code>urlopen()</code> and that will give you your response.</p>\u000a\u000a<pre><code>import urllib2\u000arequest = urllib2.Request("http://www.google.com", headers={"Accept" : "text/html"})\u000acontents = urllib2.urlopen(request).read()\u000a</code></pre>\u000a
p1844
sVquestion_id
p1845
I385262
sVlast_activity_date
p1846
I1229912941
sVcreation_date
p1847
I1229912941
sVscore
p1848
I103
sVowner
p1849
(dp1850
Vuser_id
p1851
I9261
sVprofile_image
p1852
Vhttps://www.gravatar.com/avatar/77c411ab35c7f360201e032054f1c6ae?s=128&d=identicon&r=PG
p1853
sVuser_type
p1854
Vregistered
p1855
sVreputation
p1856
I1932
sVlink
p1857
Vhttp://stackoverflow.com/users/9261/pantsgolem
p1858
sVdisplay_name
p1859
Vpantsgolem
p1860
ssVis_accepted
p1861
I01
sVanswer_id
p1862
I385411
sa(dp1863
Vbody
p1864
V<p>In response to your clarification...</p>\u000a\u000a<p>You could use <a href="http://docs.python.org/lib/ctypes-ctypes-tutorial.html" rel="nofollow noreferrer">ctypes</a> to execute the c function "strcasecmp".  Ctypes is included in Python 2.5.  It provides the ability to call out to dll and shared libraries such as libc. Here is a quick example (Python on Linux; see link for Win32 help):</p>\u000a\u000a<pre><code>from ctypes import *\u000alibc = CDLL("libc.so.6")  // see link above for Win32 help\u000alibc.strcasecmp("THIS", "this") // returns 0\u000alibc.strcasecmp("THIS", "THAT") // returns 8\u000a</code></pre>\u000a\u000a<p>may also want to reference <a href="http://linux.die.net/man/3/strcasecmp" rel="nofollow noreferrer">strcasecmp documentation</a></p>\u000a\u000a<p>Not really sure this is any faster or slower (have not tested), but it's a way to use a C function to do case insensitive string comparisons. </p>\u000a\u000a<p>~~~~~~~~~~~~~~</p>\u000a\u000a<p><a href="http://code.activestate.com/recipes/194371/" rel="nofollow noreferrer" title="ActiveState Code">ActiveState Code - Recipe 194371: Case Insensitive Strings</a>\u000ais a recipe for creating a case insensitive string class.  It might be a bit over kill for something quick, but could provide you with a common way of handling case insensitive strings if you plan on using them often.</p>\u000a
p1865
sVquestion_id
p1866
I62567
sVlast_activity_date
p1867
I1221515688
sVcreation_date
p1868
I1221510053
sVscore
p1869
I-11
sVowner
p1870
(dp1871
Vuser_id
p1872
I3701
sVprofile_image
p1873
Vhttps://www.gravatar.com/avatar/89fc7cde1e98504e38a92359ab8673c4?s=128&d=identicon&r=PG
p1874
sVuser_type
p1875
Vregistered
p1876
sVreputation
p1877
I118
sVlink
p1878
Vhttp://stackoverflow.com/users/3701/patrickyoung
p1879
sVdisplay_name
p1880
Vpatrickyoung
p1881
ssVis_accepted
p1882
I01
sVlast_edit_date
p1883
I1221515688
sVanswer_id
p1884
I66547
sasVquota_max
p1885
I300
sVquota_remaining
p1886
I141
s.