(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p><strong>Python 3</strong> introduced <strong>exception chaining</strong> (as described in <a href="http://www.python.org/dev/peps/pep-3134/" rel="nofollow noreferrer">PEP 3134</a>). This allows raising an exception, citing an existing exception as the \u201ccause\u201d:</p>\u000a\u000a<pre class="lang-python prettyprint-override"><code>try:\u000a    frobnicate()\u000aexcept KeyError as exc:\u000a    raise ValueError("Bad grape") from exc\u000a</code></pre>\u000a\u000a<p>The caught exception thereby becomes part of (is the \u201ccause of\u201d) the new exception, and is available to whatever code catches the new exception.</p>\u000a\u000a<hr>\u000a\u000a<p>In <strong>Python 2</strong>, it appears this use case has no good answer (as described by <a href="http://blog.ianbicking.org/2007/09/12/re-raising-exceptions/" rel="nofollow noreferrer">Ian Bicking</a> and <a href="http://nedbatchelder.com/blog/200711/rethrowing_exceptions_in_python.html" rel="nofollow noreferrer">Ned Batchelder</a>). Bummer.</p>\u000a
p6
sVquestion_id
p7
I696047
sVlast_activity_date
p8
I1495150341
sVcreation_date
p9
I1240802742
sVscore
p10
I52
sVowner
p11
(dp12
Vuser_id
p13
I70157
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/da0a70a59c1e428c7780aa1cdc7a26d2?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I11443
sVlink
p19
Vhttp://stackoverflow.com/users/70157/bignose
p20
sVaccept_rate
p21
I55
sVdisplay_name
p22
Vbignose
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1495150341
sVanswer_id
p26
I792163
sa(dp27
Vbody
p28
V<pre><code>import inspect\u000a\u000adef foo(a, b, x='blah'):\u000a    pass\u000a\u000aprint(inspect.getargspec(foo))\u000a# ArgSpec(args=['a', 'b', 'x'], varargs=None, keywords=None, defaults=('blah',))\u000a</code></pre>\u000a\u000a<p>However, note that <code>inspect.getargspec()</code> is deprecated since Python 3.0.</p>\u000a\u000a<p>3.0 - 3.4 recommends <code>inspect.getfullargspec()</code>. See: <a href="https://docs.python.org/3.4/library/inspect.html#inspect.getargspec" rel="nofollow noreferrer">https://docs.python.org/3.4/library/inspect.html#inspect.getargspec</a></p>\u000a\u000a<p>3.5+ recommends <code>inspect.signature()</code>. See: <a href="https://docs.python.org/3.5/library/inspect.html#inspect.getargspec" rel="nofollow noreferrer">https://docs.python.org/3.5/library/inspect.html#inspect.getargspec</a> </p>\u000a
p29
sVquestion_id
p30
I2677185
sVlast_activity_date
p31
I1490853604
sVcreation_date
p32
I1271784544
sVscore
p33
I81
sVowner
p34
(dp35
Vuser_id
p36
I190597
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I425294
sVlink
p42
Vhttp://stackoverflow.com/users/190597/unutbu
p43
sVaccept_rate
p44
I88
sVdisplay_name
p45
Vunutbu
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1490853604
sVanswer_id
p49
I2677263
sa(dp50
Vbody
p51
V<p>Your sample code should have worked as it is. Sqlalchemy should be providing a value for <code>f.id</code>, assuming its an autogenerating primary key column.  primary key attributes are populated immediately within the flush() process as they are generated and no call to commit() should be required.  So the answer here lies in the details of your mapping, if there are any odd quirks of the backend in use (such as, SQLite doesn't generate integer values for a composite primary key) and/or what the emitted SQL says when you turn on echo.</p>\u000a
p52
sVquestion_id
p53
I1316952
sVlast_activity_date
p54
I1484180946
sVcreation_date
p55
I1251162393
sVscore
p56
I28
sVowner
p57
(dp58
Vuser_id
p59
I34549
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/7c63a03cc45f763a06149d6c99cef46c?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I38836
sVlink
p65
Vhttp://stackoverflow.com/users/34549/zzzeek
p66
sVaccept_rate
p67
I80
sVdisplay_name
p68
Vzzzeek
p69
ssVis_accepted
p70
I01
sVlast_edit_date
p71
I1484180946
sVanswer_id
p72
I1325560
sa(dp73
Vbody
p74
V<pre><code>from decimal import Decimal\u000a\u000a'%.2E' % Decimal('40800000000.00000000000000')\u000a\u000a# returns '4.08E+10'\u000a</code></pre>\u000a\u000a<p>In your '40800000000.00000000000000' there are many more significant zeros that have the same meaning as any other digit. That's why you have to tell explicitly where you want to stop.</p>\u000a\u000a<p>If you want to remove all trailing zeros automatically, you can try:</p>\u000a\u000a<pre><code>def format_e(n):\u000a    a = '%E' % n\u000a    return a.split('E')[0].rstrip('0').rstrip('.') + 'E' + a.split('E')[1]\u000a\u000aformat_e(Decimal('40800000000.00000000000000'))\u000a# '4.08E+10'\u000a\u000aformat_e(Decimal('40000000000.00000000000000'))\u000a# '4E+10'\u000a\u000aformat_e(Decimal('40812300000.00000000000000'))\u000a# '4.08123E+10'\u000a</code></pre>\u000a
p75
sVquestion_id
p76
I6913532
sVlast_activity_date
p77
I1479925364
sVcreation_date
p78
I1312294797
sVscore
p79
I52
sVowner
p80
(dp81
Vuser_id
p82
I449449
sVprofile_image
p83
Vhttps://www.gravatar.com/avatar/b52c27e86c87d931e654d6a2d2cdf974?s=128&d=identicon&r=PG
p84
sVuser_type
p85
Vregistered
p86
sVreputation
p87
I94835
sVlink
p88
Vhttp://stackoverflow.com/users/449449/eumiro
p89
sVaccept_rate
p90
I100
sVdisplay_name
p91
Veumiro
p92
ssVis_accepted
p93
I01
sVlast_edit_date
p94
I1479925364
sVanswer_id
p95
I6913576
sa(dp96
Vbody
p97
V<pre><code>&gt;&gt;&gt; A = np.random.randint(5, size=(10,3))\u000a&gt;&gt;&gt; A\u000aarray([[1, 3, 0],\u000a       [3, 2, 0],\u000a       [0, 2, 1],\u000a       [1, 1, 4],\u000a       [3, 2, 2],\u000a       [0, 1, 0],\u000a       [1, 3, 1],\u000a       [0, 4, 1],\u000a       [2, 4, 2],\u000a       [3, 3, 1]])\u000a&gt;&gt;&gt; idx = np.random.randint(10, size=2)\u000a&gt;&gt;&gt; idx\u000aarray([7, 6])\u000a&gt;&gt;&gt; A[idx,:]\u000aarray([[0, 4, 1],\u000a       [1, 3, 1]])\u000a</code></pre>\u000a\u000a<p>Putting it together for a general case:</p>\u000a\u000a<pre><code>A[np.random.randint(A.shape[0], size=2), :]\u000a</code></pre>\u000a\u000a<p>For non replacement (numpy 1.7.0+):</p>\u000a\u000a<pre><code>A[np.random.choice(A.shape[0], 2, replace=False), :]\u000a</code></pre>\u000a\u000a<p>I do not believe there is a good way to generate random list without replacement before 1.7. Perhaps you can setup a small definition that ensures the two values are not the same.</p>\u000a
p98
sVquestion_id
p99
I14262654
sVlast_activity_date
p100
I1477880378
sVcreation_date
p101
I1357835709
sVscore
p102
I56
sVowner
p103
(dp104
Vuser_id
p105
I975477
sVprofile_image
p106
Vhttps://www.gravatar.com/avatar/4a90245d2d9469ccbc9bc7892c79d100?s=128&d=identicon&r=PG
p107
sVuser_type
p108
Vregistered
p109
sVreputation
p110
I10535
sVlink
p111
Vhttp://stackoverflow.com/users/975477/daniel
p112
sVaccept_rate
p113
I82
sVdisplay_name
p114
VDaniel
p115
ssVis_accepted
p116
I01
sVlast_edit_date
p117
I1477880378
sVanswer_id
p118
I14262743
sa(dp119
Vbody
p120
V<p>The easiest way is probably just to split on your target word</p>\u000a\u000a<pre><code>my_string="hello python world , i'm a beginner "\u000aprint my_string.split("world",1)[1] \u000a</code></pre>\u000a\u000a<p>split takes the word(or character) to split on and optionally a limit to the number of splits.</p>\u000a\u000a<p>In this example split on "world" and limit it to only one split.</p>\u000a\u000a<p>Or you could do this:</p>\u000a\u000a<pre><code>In [5]: print my_string.split(", ",1)[1]\u000ai'm a beginner \u000a</code></pre>\u000a
p121
sVquestion_id
p122
I12572362
sVlast_activity_date
p123
I1476129906
sVcreation_date
p124
I1348518427
sVscore
p125
I109
sVowner
p126
(dp127
Vuser_id
p128
I541038
sVprofile_image
p129
Vhttps://www.gravatar.com/avatar/a3a82559ae1ee7ec304fdbae095f063c?s=128&d=identicon&r=PG
p130
sVuser_type
p131
Vregistered
p132
sVreputation
p133
I58828
sVlink
p134
Vhttp://stackoverflow.com/users/541038/joran-beasley
p135
sVaccept_rate
p136
I94
sVdisplay_name
p137
VJoran Beasley
p138
ssVis_accepted
p139
I01
sVlast_edit_date
p140
I1476129906
sVanswer_id
p141
I12572391
sa(dp142
Vbody
p143
V<p>Actually the simplest way is :</p>\u000a\u000a<pre><code>import urllib2  # the lib that handles the url stuff\u000a\u000adata = urllib2.urlopen(target_url) # it's a file like object and works just like a file\u000afor line in data: # files are iterable\u000a    print line\u000a</code></pre>\u000a\u000a<p>You don't even need "readlines", as Will suggested. You could even shorten it to </p>\u000a\u000a<pre><code>import urllib2\u000a\u000afor line in urllib2.urlopen(target_url):\u000a    print line\u000a</code></pre>\u000a\u000a<p>But remember in Python, readability matters.</p>\u000a\u000a<p>However, this is the simplest way but not the safe way because most of the time with network programming, you don't know if the amount of data to expect will be respected. So you'd generally better read a fixed and reasonable amount of data, something you know to be enough for the data you expect but will prevent your script from been flooded :</p>\u000a\u000a<pre><code>import urllib2\u000a\u000adata = urllib2.urlopen("http://www.google.com").read(20000) # read only 20 000 chars\u000adata = data.split("\u005cn") # then split it into lines\u000a\u000afor line in data:\u000a    print line\u000a</code></pre>\u000a\u000a<blockquote>\u000a  <p>Edit 09/2016: In python 3 and up use <a href="https://docs.python.org/2/library/urllib.html" rel="noreferrer">urllib.request</a> instead of urllib2</p>\u000a</blockquote>\u000a
p144
sVquestion_id
p145
I1393324
sVlast_activity_date
p146
I1475352839
sVcreation_date
p147
I1252407868
sVscore
p148
I67
sVowner
p149
(dp150
Vuser_id
p151
I9951
sVprofile_image
p152
Vhttps://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1
p153
sVuser_type
p154
Vregistered
p155
sVreputation
p156
I277993
sVlink
p157
Vhttp://stackoverflow.com/users/9951/e-satis
p158
sVaccept_rate
p159
I79
sVdisplay_name
p160
Ve-satis
p161
ssVis_accepted
p162
I01
sVlast_edit_date
p163
I1475352839
sVanswer_id
p164
I1393367
sa(dp165
Vbody
p166
V<p><strong>O(n)</strong>:  The <em><a href="https://docs.python.org/3.5/library/collections.html#collections.Counter" rel="noreferrer">Counter()</a></em> method is best (if your objects are hashable):</p>\u000a\u000a<pre><code>def compare(s, t):\u000a    return Counter(s) == Counter(t)\u000a</code></pre>\u000a\u000a<p><strong>O(n log n)</strong>:  The <em><a href="https://docs.python.org/3.5/library/functions.html#sorted" rel="noreferrer">sorted()</a></em> method is next best (if your objects are orderable):</p>\u000a\u000a<pre><code>def compare(s, t):\u000a    return sorted(s) == sorted(t)\u000a</code></pre>\u000a\u000a<p><strong>O(n * n)</strong>: If the objects are neither hashable, nor orderable, you can use equality:</p>\u000a\u000a<pre><code>def compare(s, t):\u000a    t = list(t)   # make a mutable copy\u000a    try:\u000a        for elem in s:\u000a            t.remove(elem)\u000a    except ValueError:\u000a        return False\u000a    return not t\u000a</code></pre>\u000a
p167
sVquestion_id
p168
I7828867
sVlast_activity_date
p169
I1472026629
sVcreation_date
p170
I1319066437
sVscore
p171
I94
sVowner
p172
(dp173
Vuser_id
p174
I1001643
sVprofile_image
p175
Vhttps://www.gravatar.com/avatar/60cac87fb9e2b5689242622999656cb0?s=128&d=identicon&r=PG
p176
sVuser_type
p177
Vregistered
p178
sVreputation
p179
I94640
sVlink
p180
Vhttp://stackoverflow.com/users/1001643/raymond-hettinger
p181
sVaccept_rate
p182
I75
sVdisplay_name
p183
VRaymond Hettinger
p184
ssVis_accepted
p185
I01
sVlast_edit_date
p186
I1472026629
sVanswer_id
p187
I7829388
sa(dp188
Vbody
p189
V<p><strong>Update July 2016</strong>  The easiest way to use batch normalization in TensorFlow is through the higher-level interfaces provided in either <a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/layers/python/layers/layers.py" rel="noreferrer">contrib/layers</a>, <a href="http://tflearn.org/layers/normalization/" rel="noreferrer">tflearn</a>, or <a href="https://github.com/tensorflow/models/blob/master/inception/inception/slim/ops.py" rel="noreferrer">slim</a>.</p>\u000a\u000a<p><strong>Previous answer if you want to DIY</strong>:\u000aThe documentation string for this has improved since the release - see the <a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/nn_ops.cc#L65" rel="noreferrer">docs comment in the master branch</a> instead of the one you found.  It clarifies, in particular, that it's the output from <code>tf.nn.moments</code>.</p>\u000a\u000a<p>You can see a very simple example of its use in the <a href="https://github.com/tensorflow/tensorflow/blob/3972c791b9f4d9a61b9ad6399b481df396f359ff/tensorflow/python/ops/nn_test.py#L518" rel="noreferrer">batch_norm test code</a>.  For a more real-world use example, I've included below the helper class and use notes that I scribbled up for my own use (no warranty provided!):</p>\u000a\u000a<pre class="lang-py prettyprint-override"><code>"""A helper class for managing batch normalization state.                   \u000a\u000aThis class is designed to simplify adding batch normalization               \u000a(http://arxiv.org/pdf/1502.03167v3.pdf) to your model by                    \u000amanaging the state variables associated with it.                            \u000a\u000aImportant use note:  The function get_assigner() returns                    \u000aan op that must be executed to save the updated state.                      \u000aA suggested way to do this is to make execution of the                      \u000amodel optimizer force it, e.g., by:                                         \u000a\u000a  update_assignments = tf.group(bn1.get_assigner(),                         \u000a                                bn2.get_assigner())                         \u000a  with tf.control_dependencies([optimizer]):                                \u000a    optimizer = tf.group(update_assignments)                                \u000a\u000a"""\u000a\u000aimport tensorflow as tf\u000a\u000a\u000aclass ConvolutionalBatchNormalizer(object):\u000a  """Helper class that groups the normalization logic and variables.        \u000a\u000a  Use:                                                                      \u000a      ewma = tf.train.ExponentialMovingAverage(decay=0.99)                  \u000a      bn = ConvolutionalBatchNormalizer(depth, 0.001, ewma, True)           \u000a      update_assignments = bn.get_assigner()                                \u000a      x = bn.normalize(y, train=training?)                                  \u000a      (the output x will be batch-normalized).                              \u000a  """\u000a\u000a  def __init__(self, depth, epsilon, ewma_trainer, scale_after_norm):\u000a    self.mean = tf.Variable(tf.constant(0.0, shape=[depth]),\u000a                            trainable=False)\u000a    self.variance = tf.Variable(tf.constant(1.0, shape=[depth]),\u000a                                trainable=False)\u000a    self.beta = tf.Variable(tf.constant(0.0, shape=[depth]))\u000a    self.gamma = tf.Variable(tf.constant(1.0, shape=[depth]))\u000a    self.ewma_trainer = ewma_trainer\u000a    self.epsilon = epsilon\u000a    self.scale_after_norm = scale_after_norm\u000a\u000a  def get_assigner(self):\u000a    """Returns an EWMA apply op that must be invoked after optimization."""\u000a    return self.ewma_trainer.apply([self.mean, self.variance])\u000a\u000a  def normalize(self, x, train=True):\u000a    """Returns a batch-normalized version of x."""\u000a    if train:\u000a      mean, variance = tf.nn.moments(x, [0, 1, 2])\u000a      assign_mean = self.mean.assign(mean)\u000a      assign_variance = self.variance.assign(variance)\u000a      with tf.control_dependencies([assign_mean, assign_variance]):\u000a        return tf.nn.batch_norm_with_global_normalization(\u000a            x, mean, variance, self.beta, self.gamma,\u000a            self.epsilon, self.scale_after_norm)\u000a    else:\u000a      mean = self.ewma_trainer.average(self.mean)\u000a      variance = self.ewma_trainer.average(self.variance)\u000a      local_beta = tf.identity(self.beta)\u000a      local_gamma = tf.identity(self.gamma)\u000a      return tf.nn.batch_norm_with_global_normalization(\u000a          x, mean, variance, local_beta, local_gamma,\u000a          self.epsilon, self.scale_after_norm)\u000a</code></pre>\u000a\u000a<p>Note that I called it a <code>ConvolutionalBatchNormalizer</code> because it pins the use of <code>tf.nn.moments</code> to sum across axes 0, 1, and 2, whereas for non-convolutional use you might only want axis 0.</p>\u000a\u000a<p>Feedback appreciated if you use it.</p>\u000a
p190
sVquestion_id
p191
I33949786
sVlast_activity_date
p192
I1468531261
sVcreation_date
p193
I1448597771
sVscore
p194
I42
sVowner
p195
(dp196
Vuser_id
p197
I5545260
sVprofile_image
p198
Vhttps://lh3.googleusercontent.com/-bKB2xg1RkdE/AAAAAAAAAAI/AAAAAAAAgnM/sdLgfXnDtwM/photo.jpg?sz=128
p199
sVuser_type
p200
Vregistered
p201
sVreputation
p202
I10599
sVlink
p203
Vhttp://stackoverflow.com/users/5545260/dga
p204
sVdisplay_name
p205
Vdga
p206
ssVis_accepted
p207
I01
sVlast_edit_date
p208
I1468531261
sVanswer_id
p209
I33950177
sa(dp210
Vbody
p211
V<p>In Python 2 list comprehension 'leaks' the variables to outer scope:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [i for i in xrange(3)]\u000a[0, 1, 2]\u000a&gt;&gt;&gt; i\u000a2\u000a</code></pre>\u000a\u000a<p>Note that the behavior is different on Python 3:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [i for i in range(3)]\u000a[0, 1, 2]\u000a&gt;&gt;&gt; i\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aNameError: name 'i' is not defined\u000a</code></pre>\u000a\u000a<p>When you define lambda it's bound to variable <code>i</code>, not its' current value as your second example shows. \u000aNow when you assign new value to <code>i</code> the lambda will return whatever is the current value:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = [lambda: i for i in range(5)]\u000a&gt;&gt;&gt; a[0]()\u000a4\u000a&gt;&gt;&gt; i = 'foobar'\u000a&gt;&gt;&gt; a[0]()\u000a'foobar'\u000a</code></pre>\u000a\u000a<p>Since the value of <code>i</code> within the loop is the lambda itself you'll get it as a return value:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; i = a[0]\u000a&gt;&gt;&gt; i()\u000a&lt;function &lt;lambda&gt; at 0x01D689F0&gt;\u000a&gt;&gt;&gt; i()()()()\u000a&lt;function &lt;lambda&gt; at 0x01D689F0&gt;\u000a</code></pre>\u000a\u000a<p><strong>UPDATE</strong>: Example on Python 2.7:</p>\u000a\u000a<pre><code>Python 2.7.6 (default, Jun 22 2015, 17:58:13) \u000a[GCC 4.8.2] on linux2\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; a = [lambda: i for i in range(5)]\u000a&gt;&gt;&gt; for i in a:\u000a...     print i()\u000a... \u000a&lt;function &lt;lambda&gt; at 0x7f1eae7f15f0&gt;\u000a&lt;function &lt;lambda&gt; at 0x7f1eae7f1668&gt;\u000a&lt;function &lt;lambda&gt; at 0x7f1eae7f16e0&gt;\u000a&lt;function &lt;lambda&gt; at 0x7f1eae7f1758&gt;\u000a&lt;function &lt;lambda&gt; at 0x7f1eae7f17d0&gt;\u000a</code></pre>\u000a\u000a<p>Same on Python 3.4:</p>\u000a\u000a<pre><code>Python 3.4.3 (default, Oct 14 2015, 20:28:29) \u000a[GCC 4.8.4] on linux\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; a = [lambda: i for i in range(5)]\u000a&gt;&gt;&gt; for i in a:\u000a...     print(i())\u000a... \u000a4\u000a4\u000a4\u000a4\u000a4\u000a</code></pre>\u000a\u000a<p>For details about the change regarding the variable scope with list comprehension see Guido's <a href="http://python-history.blogspot.my/2010/06/from-list-comprehensions-to-generator.html">blogpost from 2010</a>.</p>\u000a\u000a<blockquote>\u000a  <p>We also made another change in Python 3, to improve equivalence between list comprehensions and generator expressions. In Python 2, the list comprehension "leaks" the loop control variable into the surrounding scope:</p>\u000a</blockquote>\u000a\u000a<pre><code>x = 'before'\u000aa = [x for x in 1, 2, 3]\u000aprint x # this prints '3', not 'before'\u000a</code></pre>\u000a\u000a<blockquote>\u000a  <p>However, in Python 3, we decided to fix the "dirty little secret" of list comprehensions by using the same implementation strategy as for generator expressions. Thus, in Python 3, the above example (after modification to use print(x) :-) will print 'before', proving that the 'x' in the list comprehension temporarily shadows but does not override the 'x' in the surrounding scope.</p>\u000a</blockquote>\u000a
p212
sVquestion_id
p213
I38369470
sVlast_activity_date
p214
I1468497017
sVcreation_date
p215
I1468487915
sVscore
p216
I47
sVowner
p217
(dp218
Vuser_id
p219
I5043793
sVprofile_image
p220
Vhttps://www.gravatar.com/avatar/4f1f00f1698fb26cd39dc876d0a3fa0c?s=128&d=identicon&r=PG&f=1
p221
sVuser_type
p222
Vregistered
p223
sVreputation
p224
I13480
sVlink
p225
Vhttp://stackoverflow.com/users/5043793/niemmi
p226
sVdisplay_name
p227
Vniemmi
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1468497017
sVanswer_id
p231
I38370271
sa(dp232
Vbody
p233
V<p>Try this:</p>\u000a\u000a<pre><code>import PIL.Image\u000aimg = PIL.Image.open('img.jpg')\u000aexif_data = img._getexif()\u000a</code></pre>\u000a\u000a<p>This should give you a dictionary indexed by EXIF numeric tags.  If you want the dictionary indexed by the actual EXIF tag name strings, try something like:</p>\u000a\u000a<pre><code>import PIL.ExifTags\u000aexif = {\u000a    PIL.ExifTags.TAGS[k]: v\u000a    for k, v in img._getexif().items()\u000a    if k in PIL.ExifTags.TAGS\u000a}\u000a</code></pre>\u000a
p234
sVquestion_id
p235
I4764932
sVlast_activity_date
p236
I1457551181
sVcreation_date
p237
I1295655694
sVscore
p238
I88
sVowner
p239
(dp240
Vuser_id
p241
I584597
sVprofile_image
p242
Vhttps://www.gravatar.com/avatar/3d519ba6b69a89cc8ec99001eea2059b?s=128&d=identicon&r=PG
p243
sVuser_type
p244
Vregistered
p245
sVreputation
p246
I8342
sVlink
p247
Vhttp://stackoverflow.com/users/584597/payne
p248
sVaccept_rate
p249
I83
sVdisplay_name
p250
Vpayne
p251
ssVis_accepted
p252
I01
sVlast_edit_date
p253
I1457551181
sVanswer_id
p254
I4765242
sa(dp255
Vbody
p256
V<p><a href="http://docs.python.org/library/functions.html#property" rel="noreferrer">The documentation says the following</a> about using decorator form of <code>property</code>:</p>\u000a\u000a<blockquote>\u000a  <p>Be sure to give the additional functions the same name as the original property (x in this case.)</p>\u000a</blockquote>\u000a\u000a<p>I have no idea why this is since if you use <code>property</code> as function to return an attribute the methods can be called whatever you like.</p>\u000a\u000a<p>So you need to change your code to the following:</p>\u000a\u000a<pre><code>@x.setter\u000adef x(self, value):\u000a    'setting'\u000a    self._x = value\u000a</code></pre>\u000a
p257
sVquestion_id
p258
I4183432
sVlast_activity_date
p259
I1453154694
sVcreation_date
p260
I1289817511
sVscore
p261
I71
sVowner
p262
(dp263
Vuser_id
p264
I3171
sVprofile_image
p265
Vhttps://www.gravatar.com/avatar/a780bab849bc39176f044f5effbba7da?s=128&d=identicon&r=PG
p266
sVuser_type
p267
Vregistered
p268
sVreputation
p269
I133854
sVlink
p270
Vhttp://stackoverflow.com/users/3171/dave-webb
p271
sVaccept_rate
p272
I92
sVdisplay_name
p273
VDave Webb
p274
ssVis_accepted
p275
I01
sVlast_edit_date
p276
I1453154694
sVanswer_id
p277
I4183512
sa(dp278
Vbody
p279
V<p>It's used when you have some API that only takes files, but you need to use a string. For example, to compress a string using the <a href="http://docs.python.org/library/gzip.html" rel="noreferrer">gzip</a> module in Python 2:</p>\u000a\u000a<pre><code>import gzip\u000aimport StringIO\u000a\u000astringio = StringIO.StringIO()\u000agzip_file = gzip.GzipFile(fileobj=stringio, mode='w')\u000agzip_file.write('Hello World')\u000agzip_file.close()\u000a\u000astringio.getvalue()\u000a</code></pre>\u000a
p280
sVquestion_id
p281
I7996479
sVlast_activity_date
p282
I1452267079
sVcreation_date
p283
I1320330628
sVscore
p284
I71
sVowner
p285
(dp286
Vuser_id
p287
I99057
sVprofile_image
p288
Vhttps://www.gravatar.com/avatar/c50e5892d79fb240b2c870d458505eea?s=128&d=identicon&r=PG
p289
sVuser_type
p290
Vregistered
p291
sVreputation
p292
I29855
sVlink
p293
Vhttp://stackoverflow.com/users/99057/petr-viktorin
p294
sVdisplay_name
p295
VPetr Viktorin
p296
ssVis_accepted
p297
I01
sVlast_edit_date
p298
I1452267079
sVanswer_id
p299
I7996613
sa(dp300
Vbody
p301
V<p><strong>This issue arises due to the ways in which the command line IPython interpreter uses your current path vs. the way a separate process does</strong> (be it an IPython notebook, external process, etc). IPython will look for modules to import that are not only found in your sys.path, but also on your current working directory. When starting an interpreter from the command line, the current directory you're operating in is the same one you started ipython in. If you run</p>\u000a\u000a<pre><code>import os\u000aos.getcwd() \u000a</code></pre>\u000a\u000a<p>you'll see this is true.</p>\u000a\u000a<p>However, let's say you're using an ipython notebook, run <code>os.getcwd()</code> and your current working directory is instead the folder in which you told the notebook to operate from in your ipython_notebook_config.py file (typically using the <code>c.NotebookManager.notebook_dir</code> setting).</p>\u000a\u000a<p>The solution is to provide the python interpreter with the path-to-your-module. The simplest solution is to append that path to your sys.path list. In your notebook, first try:</p>\u000a\u000a<pre><code>import sys\u000asys.path.append('my/path/to/module/folder')\u000a\u000aimport module-of-interest\u000a</code></pre>\u000a\u000a<p>If that doesn't work, you've got a different problem on your hands unrelated to path-to-import and you should provide more info about your problem.</p>\u000a\u000a<p>The better (and more permanent) way to solve this is to set your <strong>PYTHONPATH</strong>, which provides the interpreter with additional directories look in for python packages/modules. Editing or setting the PYTHONPATH as a global var is os dependent, and is discussed in detail here for <a href="http://scipher.wordpress.com/2010/05/10/setting-your-pythonpath-environment-variable-linuxunixosx/">Unix</a> or <a href="http://stackoverflow.com/questions/3701646/how-to-add-to-the-pythonpath-in-windows-7">Windows</a>.</p>\u000a
p302
sVquestion_id
p303
I15514593
sVlast_activity_date
p304
I1448824371
sVcreation_date
p305
I1364235882
sVscore
p306
I73
sVowner
p307
(dp308
Vuser_id
p309
I1766755
sVprofile_image
p310
Vhttps://i.stack.imgur.com/gv5Cj.jpg?s=128&g=1
p311
sVuser_type
p312
Vregistered
p313
sVreputation
p314
I1371
sVlink
p315
Vhttp://stackoverflow.com/users/1766755/tyleha
p316
sVdisplay_name
p317
Vtyleha
p318
ssVis_accepted
p319
I01
sVlast_edit_date
p320
I1448824371
sVanswer_id
p321
I15622021
sa(dp322
Vbody
p323
V<p>It looks like <a href="http://pypi.python.org/pypi/stdeb" rel="nofollow">stdeb</a> will do what you want.</p>\u000a\u000a<p>Also, for installing scripts, I strongly recommend <a href="http://pythonhosted.org/setuptools/setuptools.html#automatic-script-creation" rel="nofollow">distribute's console_scripts</a> entry point support.</p>\u000a
p324
sVquestion_id
p325
I7110604
sVlast_activity_date
p326
I1444159729
sVcreation_date
p327
I1313691770
sVscore
p328
I17
sVowner
p329
(dp330
Vuser_id
p331
I624787
sVprofile_image
p332
Vhttps://www.gravatar.com/avatar/10d0082f6312bba553f5907677370bf5?s=128&d=identicon&r=PG
p333
sVuser_type
p334
Vregistered
p335
sVreputation
p336
I4740
sVlink
p337
Vhttp://stackoverflow.com/users/624787/ross-patterson
p338
sVaccept_rate
p339
I89
sVdisplay_name
p340
VRoss Patterson
p341
ssVis_accepted
p342
I01
sVlast_edit_date
p343
I1444159729
sVanswer_id
p344
I7112197
sa(dp345
Vbody
p346
V<p>As already mentioned in the comments, if you use <code>s.__contains__("XYZ")</code> you get a result that is more similar to <code>s.startswith("XYZ")</code> because it needs to take the same route: Member lookup on the string object, followed by a function call. This is usually somewhat expensive (not enough that you should worry about of course). On the other hand, when you do <code>"XYZ" in s</code>, the parser interprets the operator and can short-cut the member access to the <code>__contains__</code> (or rather the implementation behind it, because <code>__contains__</code> itself is just one way to access the implementation).</p>\u000a\u000a<p>You can get an idea about this by looking at the bytecode:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dis.dis('"XYZ" in s')\u000a  1           0 LOAD_CONST               0 ('XYZ')\u000a              3 LOAD_NAME                0 (s)\u000a              6 COMPARE_OP               6 (in)\u000a              9 RETURN_VALUE\u000a&gt;&gt;&gt; dis.dis('s.__contains__("XYZ")')\u000a  1           0 LOAD_NAME                0 (s)\u000a              3 LOAD_ATTR                1 (__contains__)\u000a              6 LOAD_CONST               0 ('XYZ')\u000a              9 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\u000a             12 RETURN_VALUE\u000a</code></pre>\u000a\u000a<p>So comparing <code>s.__contains__("XYZ")</code> with <code>s.startswith("XYZ")</code> will produce a more similar result, however for your example string <code>s</code>, the <code>startswith</code> will still be slower.</p>\u000a\u000a<p>To get to that, you could check the implementation of both. Interesting to see for the <a href="https://hg.python.org/cpython/file/e39c4373b83f/Objects/unicodeobject.c#l10889">contains implementation</a> is that it is statically typed, and just assumes that the argument is a unicode object itself. So this is quite efficient.</p>\u000a\u000a<p>The <a href="https://hg.python.org/cpython/file/e39c4373b83f/Objects/unicodeobject.c#l13124"><code>startswith</code> implementation</a> however is a \u201cdynamic\u201d Python method which requires the implementation to actually parse the arguments. <code>startswith</code> also supports a tuple as an argument, which makes the whole start-up of the method a bit slower: (shortened by me, with my comments):</p>\u000a\u000a<pre class="lang-c prettyprint-override"><code>static PyObject * unicode_startswith(PyObject *self, PyObject *args)\u000a{\u000a    // argument parsing\u000a    PyObject *subobj;\u000a    PyObject *substring;\u000a    Py_ssize_t start = 0;\u000a    Py_ssize_t end = PY_SSIZE_T_MAX;\u000a    int result;\u000a    if (!stringlib_parse_args_finds("startswith", args, &amp;subobj, &amp;start, &amp;end))\u000a        return NULL;\u000a\u000a    // tuple handling\u000a    if (PyTuple_Check(subobj)) {}\u000a\u000a    // unicode conversion\u000a    substring = PyUnicode_FromObject(subobj);\u000a    if (substring == NULL) {}\u000a\u000a    // actual implementation\u000a    result = tailmatch(self, substring, start, end, -1);\u000a    Py_DECREF(substring);\u000a    if (result == -1)\u000a        return NULL;\u000a    return PyBool_FromLong(result);\u000a}\u000a</code></pre>\u000a\u000a<p>This is likely a big reason why <code>startswith</code> is slower for strings for which a <code>contains</code> is fast because of its simplicity.</p>\u000a
p347
sVquestion_id
p348
I31917372
sVlast_activity_date
p349
I1439204498
sVcreation_date
p350
I1439203930
sVscore
p351
I38
sVowner
p352
(dp353
Vuser_id
p354
I216074
sVprofile_image
p355
Vhttps://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG
p356
sVuser_type
p357
Vregistered
p358
sVreputation
p359
I145981
sVlink
p360
Vhttp://stackoverflow.com/users/216074/poke
p361
sVaccept_rate
p362
I91
sVdisplay_name
p363
Vpoke
p364
ssVis_accepted
p365
I01
sVlast_edit_date
p366
I1439204498
sVanswer_id
p367
I31917646
sa(dp368
Vbody
p369
V<p>You can do the same with Django 1.7 also.</p>\u000a\u000a<pre><code>python manage.py migrate &lt;app&gt; zero\u000a</code></pre>\u000a\u000a<p>This clears <code>&lt;app&gt;</code> from migration history and drops all tables of <code>&lt;app&gt;</code></p>\u000a\u000a<p>See <a href="https://docs.djangoproject.com/en/1.7/ref/django-admin/#django-admin-migrate">django docs</a> for more info.</p>\u000a
p370
sVquestion_id
p371
I25606879
sVlast_activity_date
p372
I1438322299
sVcreation_date
p373
I1409581550
sVscore
p374
I86
sVowner
p375
(dp376
Vuser_id
p377
I2698552
sVprofile_image
p378
Vhttps://i.stack.imgur.com/aHLqN.jpg?s=128&g=1
p379
sVuser_type
p380
Vregistered
p381
sVreputation
p382
I7843
sVlink
p383
Vhttp://stackoverflow.com/users/2698552/chillaranand
p384
sVaccept_rate
p385
I100
sVdisplay_name
p386
VChillarAnand
p387
ssVis_accepted
p388
I01
sVlast_edit_date
p389
I1438322299
sVanswer_id
p390
I25607968
sa(dp391
Vbody
p392
V<p>The best current techniques for distributing your Python files in a jar are detailed in this article on Jython's wiki: <a href="http://wiki.python.org/jython/JythonFaq/DistributingJythonScripts" rel="noreferrer">http://wiki.python.org/jython/JythonFaq/DistributingJythonScripts</a></p>\u000a\u000a<p>For your case, I think you would want to take the jython.jar file that you get when you install Jython and zip the Jython Lib directory into it, then zip your .py files in, and then add a <code>__run__.py</code> file with your startup logic (this file is treated specially by Jython and will be the file executed when you call the jar with "java -jar").</p>\u000a\u000a<p>This process is definitely more complicated then in ought to be, and so we (the Jython developers) need to come up with a nice tool that will automate these tasks, but for now these are the best methods.  Below I'm copying the recipe at the bottom of the above article (modified slightly to fit your problem description) to give you a sense of the solution.</p>\u000a\u000a<p>Create the basic jar:</p>\u000a\u000a<pre><code>$ cd $JYTHON_HOME\u000a$ cp jython.jar jythonlib.jar\u000a$ zip -r jythonlib.jar Lib\u000a</code></pre>\u000a\u000a<p>Add other modules to the jar:</p>\u000a\u000a<pre><code>$ cd $MY_APP_DIRECTORY\u000a$ cp $JYTHON_HOME/jythonlib.jar myapp.jar\u000a$ zip myapp.jar Lib/showobjs.py\u000a# Add path to additional jar file.\u000a$ jar ufm myapp.jar othermanifest.mf\u000a</code></pre>\u000a\u000a<p>Add the <code>__run__.py</code> module:</p>\u000a\u000a<pre><code># Copy or rename your start-up script, removing the "__name__  == '__main__'" check.\u000a$ cp mymainscript.py __run__.py\u000a# Add your start-up script (__run__.py) to the jar.\u000a$ zip myapp.jar __run__.py\u000a# Add path to main jar to the CLASSPATH environment variable.\u000a$ export CLASSPATH=/path/to/my/app/myapp.jar:$CLASSPATH\u000a</code></pre>\u000a\u000a<p>On MS Windows, that last line, setting the CLASSPATH environment variable, would look something like this:</p>\u000a\u000a<pre><code>set CLASSPATH=C:\u005cpath\u005cto\u005cmy\u005capp\u005cmyapp.jar;%CLASSPATH%\u000a</code></pre>\u000a\u000a<p>Or, again on MS Windows, use the Control Panel and the System properties to set the CLASSPATH environment variable.</p>\u000a\u000a<p>Run the application:</p>\u000a\u000a<pre><code>$ java -jar myapp.jar mymainscript.py arg1 arg2\u000a</code></pre>\u000a\u000a<p>Or, if you have added your start-up script to the jar, use one of the following:</p>\u000a\u000a<pre><code>$ java org.python.util.jython -jar myapp.jar arg1 arg2\u000a$ java -cp myapp.jar org.python.util.jython -jar myapp.jar arg1 arg2\u000a$ java -jar myapp.jar -jar myapp.jar arg1 arg2\u000a</code></pre>\u000a\u000a<p>The double -jar is kind of annoying, so if you want to avoid that and get the more pleasing:</p>\u000a\u000a<pre><code>$ java -jar myapp.jar arg1\u000a</code></pre>\u000a\u000a<p>You'll have to do a bit more work until we get something like this into a future Jython [Update: JarRunner is part of Jython 2.5.1].  Here is some Java code that looks for the <code>__run__.py</code> automatically, and runs it.  Note that this is my first try at this class.  Let me know if it needs improvement!</p>\u000a\u000a<pre><code>package org.python.util;\u000a\u000aimport org.python.core.imp;\u000aimport org.python.core.PySystemState;\u000a\u000apublic class JarRunner {\u000a\u000a    public static void run(String[] args) {\u000a        final String runner = "__run__";\u000a        String[] argv = new String[args.length + 1];\u000a        argv[0] = runner;\u000a        System.arraycopy(args, 0, argv, 1, args.length);\u000a        PySystemState.initialize(PySystemState.getBaseProperties(), null, argv);\u000a        imp.load(runner);\u000a    }\u000a\u000a    public static void main(String[] args) {\u000a        run(args);\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<p>I put this code into the org.python.util package, since that's where it would go if we decide to include it in a future Jython.  To compile it, you'll need to put jython.jar (or your myapp.jar) into the classpath like:</p>\u000a\u000a<pre><code>$ javac -classpath myapp.jar org/python/util/JarRunner.java\u000a</code></pre>\u000a\u000a<p>Then you'll need to add JarRunner.class to your jar (the class file will need to be in org/python/util/JarRunner.class) calling jar on the "org" directory will get the whole path into your jar.</p>\u000a\u000a<pre><code>$ jar uf org\u000a</code></pre>\u000a\u000a<p>Add this to a file that you will use to update the manifest, a good name is manifest.txt:</p>\u000a\u000a<pre><code>Main-Class: org.python.util.JarRunner\u000a</code></pre>\u000a\u000a<p>Then update the jar's manifest:</p>\u000a\u000a<pre><code>$ jar ufm myapp.jar manifest.txt\u000a</code></pre>\u000a\u000a<p>Now you should be able to run your app like this:</p>\u000a\u000a<pre><code>$ java -jar myapp.jar\u000a</code></pre>\u000a
p393
sVquestion_id
p394
I1252965
sVlast_activity_date
p395
I1430216699
sVcreation_date
p396
I1249913575
sVscore
p397
I59
sVowner
p398
(dp399
Vuser_id
p400
I78599
sVprofile_image
p401
Vhttps://www.gravatar.com/avatar/e0c0cccce9855b7f4a942bc94b142f7b?s=128&d=identicon&r=PG
p402
sVuser_type
p403
Vregistered
p404
sVreputation
p405
I1366
sVlink
p406
Vhttp://stackoverflow.com/users/78599/frank-wierzbicki
p407
sVdisplay_name
p408
VFrank Wierzbicki
p409
ssVis_accepted
p410
I01
sVlast_edit_date
p411
I1430216699
sVanswer_id
p412
I1255113
sa(dp413
Vbody
p414
V<p>If its an <code>OrderedDict()</code> you can easily access the elements by indexing by getting the tuples of (key,value) pairs as follows</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import collections\u000a&gt;&gt;&gt; d = collections.OrderedDict()\u000a&gt;&gt;&gt; d['foo'] = 'python'\u000a&gt;&gt;&gt; d['bar'] = 'spam'\u000a&gt;&gt;&gt; d.items()\u000a[('foo', 'python'), ('bar', 'spam')]\u000a&gt;&gt;&gt; d.items()[0]\u000a('foo', 'python')\u000a&gt;&gt;&gt; d.items()[1]\u000a('bar', 'spam')\u000a</code></pre>\u000a\u000a<p><strong>Note for Python 3.X</strong></p>\u000a\u000a<p><code>dict.items</code> would return an <a href="http://docs.python.org/3.3/library/stdtypes.html#dict-views">iterable dict view object</a> rather than a list. We need to wrap the call onto a list in order to make the indexing possible</p>\u000a\u000a<pre><code>&gt;&gt;&gt; items = list(d.items())\u000a&gt;&gt;&gt; items\u000a[('foo', 'python'), ('bar', 'spam')]\u000a&gt;&gt;&gt; items[0]\u000a('foo', 'python')\u000a&gt;&gt;&gt; items[1]\u000a('bar', 'spam')\u000a</code></pre>\u000a
p415
sVquestion_id
p416
I10058140
sVlast_activity_date
p417
I1428117686
sVcreation_date
p418
I1333831589
sVscore
p419
I69
sVowner
p420
(dp421
Vuser_id
p422
I977038
sVprofile_image
p423
Vhttps://www.gravatar.com/avatar/f3004677e3b024b4b1944dfd93fb9849?s=128&d=identicon&r=PG
p424
sVuser_type
p425
Vregistered
p426
sVreputation
p427
I38263
sVlink
p428
Vhttp://stackoverflow.com/users/977038/abhijit
p429
sVaccept_rate
p430
I67
sVdisplay_name
p431
VAbhijit
p432
ssVis_accepted
p433
I01
sVlast_edit_date
p434
I1428117686
sVanswer_id
p435
I10058239
sa(dp436
Vbody
p437
V<p>You'll want to use the <code>isdigit</code> method on your <code>str</code> object:</p>\u000a\u000a<pre><code>if len(isbn) == 10 and isbn.isdigit():\u000a</code></pre>\u000a\u000a<p>From the <a href="http://docs.python.org/2/library/stdtypes.html#str.isdigit" rel="noreferrer"><code>isdigit</code> documentation:</a></p>\u000a\u000a<blockquote>\u000a<pre><code>str.isdigit()\u000a</code></pre>\u000a  \u000a  <p>Return true if all characters in the string are digits\u000a  and there is at least one character, false otherwise.</p>\u000a  \u000a  <p>For 8-bit strings, this method is locale-dependent.</p>\u000a</blockquote>\u000a
p438
sVquestion_id
p439
I21388541
sVlast_activity_date
p440
I1427223729
sVcreation_date
p441
I1390846860
sVscore
p442
I103
sVowner
p443
(dp444
Vuser_id
p445
I3130539
sVprofile_image
p446
Vhttps://i.stack.imgur.com/SJpwp.jpg?s=128&g=1
p447
sVuser_type
p448
Vregistered
p449
sVreputation
p450
I15997
sVlink
p451
Vhttp://stackoverflow.com/users/3130539/mhlester
p452
sVaccept_rate
p453
I75
sVdisplay_name
p454
Vmhlester
p455
ssVis_accepted
p456
I01
sVlast_edit_date
p457
I1427223729
sVanswer_id
p458
I21388567
sa(dp459
Vbody
p460
V<p>Ok, again, this is not something you should normally do, this is for informational purposes only.  </p>\u000a\u000a<p>Where Python looks for a method on an instance object is determined by the <code>__mro__</code> attribute of the class which defines that object (the <strong>M</strong> ethod <strong>R</strong> esolution <strong>O</strong> rder attribute).  Thus, if we could modify the <code>__mro__</code> of <code>Person</code>, we'd get the desired behaviour.  Something like:</p>\u000a\u000a<pre><code>setattr(Person, '__mro__', (Person, Friendly, object))\u000a</code></pre>\u000a\u000a<p>The problem is that <code>__mro__</code> is a readonly attribute, and thus setattr won't work.  Maybe if you're a Python guru there's a way around that, but clearly I fall short of guru status as I cannot think of one.</p>\u000a\u000a<p>A possible workaround is to simply redefine the class:</p>\u000a\u000a<pre><code>def modify_Person_to_be_friendly():\u000a    # so that we're modifying the global identifier 'Person'\u000a    global Person\u000a\u000a    # now just redefine the class using type(), specifying that the new\u000a    # class should inherit from Friendly and have all attributes from\u000a    # our old Person class\u000a    Person = type('Person', (Friendly,), dict(Person.__dict__)) \u000a\u000adef main():\u000a    modify_Person_to_be_friendly()\u000a    p = Person()\u000a    p.hello()  # works!\u000a</code></pre>\u000a\u000a<p>What this doesn't do is modify any previously created <code>Person</code> instances to have the <code>hello()</code> method.  For example (just modifying <code>main()</code>):</p>\u000a\u000a<pre><code>def main():\u000a    oldperson = Person()\u000a    ModifyPersonToBeFriendly()\u000a    p = Person()\u000a    p.hello()  \u000a    # works!  But:\u000a    oldperson.hello()\u000a    # does not\u000a</code></pre>\u000a\u000a<p>If the details of the <code>type</code> call aren't clear, then read <a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">e-satis' excellent answer on 'What is a metaclass in Python?'</a>.</p>\u000a
p461
sVquestion_id
p462
I9539052
sVlast_activity_date
p463
I1421830097
sVcreation_date
p464
I1330729181
sVscore
p465
I26
sVowner
p466
(dp467
Vuser_id
p468
I808804
sVprofile_image
p469
Vhttps://www.gravatar.com/avatar/cc54ae5944af5810788795c32ebc815b?s=128&d=identicon&r=PG
p470
sVuser_type
p471
Vregistered
p472
sVreputation
p473
I5503
sVlink
p474
Vhttp://stackoverflow.com/users/808804/adam-parkin
p475
sVaccept_rate
p476
I81
sVdisplay_name
p477
VAdam Parkin
p478
ssVis_accepted
p479
I01
sVlast_edit_date
p480
I1421830097
sVanswer_id
p481
I9541560
sa(dp482
Vbody
p483
V<p>It's used to send values into a generator that just yielded. Here is an artificial (non-useful) explanatory example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def double_inputs():\u000a...     while True:\u000a...         x = yield\u000a...         yield x * 2\u000a...\u000a&gt;&gt;&gt; gen = double_inputs()\u000a&gt;&gt;&gt; gen.next() #run up to the first yield\u000a&gt;&gt;&gt; gen.send(10) #goes into 'x' variable\u000a20\u000a&gt;&gt;&gt; gen.next() #run up to the next yield\u000a&gt;&gt;&gt; gen.send(6) #goes into 'x' again\u000a12\u000a&gt;&gt;&gt; gen.next() #run up to the next yield\u000a&gt;&gt;&gt; gen.send(94.3) #goes into 'x' again\u000a188.5999999999999\u000a</code></pre>\u000a\u000a<p>You can't do this just with <code>yield</code>.</p>\u000a\u000a<p>As to why it's useful, one of the best use cases I've seen is Twisted's <code>@defer.inlineCallbacks</code>. Essentially it allows you to write a function like this:</p>\u000a\u000a<pre><code>@defer.inlineCallbacks\u000adef doStuff():\u000a    result = yield takesTwoSeconds()\u000a    nextResult = yield takesTenSeconds(result * 10)\u000a    defer.returnValue(nextResult / 10)\u000a</code></pre>\u000a\u000a<p>What happens is that <code>takesTwoSeconds()</code> returns a <code>Deferred</code>, which is a value promising a value will be computed later. Twisted can run the computation in another thread. When the computation is done, it passes it into the deferred, and the value then gets sent back to the <code>doStuff()</code> function. Thus the <code>doStuff()</code> can end up looking more or less like a normal procedural function, except it can be doing all sorts of computations &amp; callbacks etc. The alternative before this functionality would be to do something like:</p>\u000a\u000a<pre><code>def doStuff():\u000a    returnDeferred = defer.Deferred()\u000a    def gotNextResult(nextResult):\u000a        returnDeferred.callback(nextResult / 10)\u000a    def gotResult(result):\u000a        takesTenSeconds(result * 10).addCallback(gotNextResult)\u000a    takesTwoSeconds().addCallback(gotResult)\u000a    return returnDeferred\u000a</code></pre>\u000a\u000a<p>It's a lot more convoluted and unwieldy.</p>\u000a
p484
sVquestion_id
p485
I19302530
sVlast_activity_date
p486
I1418313800
sVcreation_date
p487
I1381427221
sVscore
p488
I50
sVowner
p489
(dp490
Vuser_id
p491
I15055
sVprofile_image
p492
Vhttps://www.gravatar.com/avatar/7f71287b47b7189d11fe6d3fbc7ed2fe?s=128&d=identicon&r=PG
p493
sVuser_type
p494
Vregistered
p495
sVreputation
p496
I103525
sVlink
p497
Vhttp://stackoverflow.com/users/15055/claudiu
p498
sVaccept_rate
p499
I80
sVdisplay_name
p500
VClaudiu
p501
ssVis_accepted
p502
I01
sVlast_edit_date
p503
I1418313800
sVanswer_id
p504
I19302694
sa(dp505
Vbody
p506
V<p>This is a little faster (and looks nicer)</p>\u000a\u000a<pre><code>np.argmax(aa&gt;5)\u000a</code></pre>\u000a\u000a<p>Since <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html" rel="noreferrer"><code>argmax</code></a> will stop at the first <code>True</code> ("In case of multiple occurrences of the maximum values, the indices corresponding to the first occurrence are returned.") and doesn't save another list.</p>\u000a\u000a<pre><code>In [2]: N = 10000\u000a\u000aIn [3]: aa = np.arange(-N,N)\u000a\u000aIn [4]: timeit np.argmax(aa&gt;N/2)\u000a100000 loops, best of 3: 52.3 us per loop\u000a\u000aIn [5]: timeit np.where(aa&gt;N/2)[0][0]\u000a10000 loops, best of 3: 141 us per loop\u000a\u000aIn [6]: timeit np.nonzero(aa&gt;N/2)[0][0]\u000a10000 loops, best of 3: 142 us per loop\u000a</code></pre>\u000a
p507
sVquestion_id
p508
I16243955
sVlast_activity_date
p509
I1412778399
sVcreation_date
p510
I1367005337
sVscore
p511
I64
sVowner
p512
(dp513
Vuser_id
p514
I1730674
sVprofile_image
p515
Vhttps://www.gravatar.com/avatar/8744355c48ff471fda6fe94f603e8a0e?s=128&d=identicon&r=PG
p516
sVuser_type
p517
Vregistered
p518
sVreputation
p519
I21024
sVlink
p520
Vhttp://stackoverflow.com/users/1730674/askewchan
p521
sVaccept_rate
p522
I69
sVdisplay_name
p523
Vaskewchan
p524
ssVis_accepted
p525
I01
sVlast_edit_date
p526
I1412778399
sVanswer_id
p527
I16244044
sa(dp528
Vbody
p529
V<p><code>None</code> is always less than any datatype in Python 2 (see <a href="http://hg.python.org/cpython/file/ab05e7dd2788/Objects/object.c#l778" rel="noreferrer"><code>object.c</code></a>).</p>\u000a\u000a<p>In Python 3, this was changed; now doing comparisons on things without a sensible natural ordering results in a <code>TypeError</code>. From the <strong><a href="https://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons" rel="noreferrer">3.0 "what's new" updates</a></strong>:</p>\u000a\u000a<blockquote>\u000a  <p>Python 3.0 has simplified the rules for ordering comparisons:</p>\u000a  \u000a  <p>The ordering comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) raise a <code>TypeError</code> exception when the operands don\u2019t have a meaningful natural ordering. Thus, expressions like: <code>1 &lt; ''</code>, <code>0 &gt; None</code> or <code>len &lt;= len</code> are no longer valid, and e.g. <code>None &lt; None</code> raises <code>TypeError</code> instead of returning <code>False</code>. A corollary is that sorting a heterogeneous list no longer makes sense \u2013 all the elements must be comparable to each other. Note that this does not apply to the <code>==</code> and <code>!=</code> operators: objects of different incomparable types always compare unequal to each other.</p>\u000a</blockquote>\u000a\u000a<p>This upset some people since it was often handy to do things like sort a list that had some <code>None</code> values in it, and have the <code>None</code> values appear clustered together at the beginning or end. <strong><a href="http://markmail.org/message/qztbun75kcsewzuk#query:none%20comparability%20python+page:1+mid:tmxfw326w3efme7w+state:results" rel="noreferrer">There was a thread on the mailing list about this</a></strong> a while back, but the ultimate point is that Python 3 tries to avoid making arbitrary decisions about ordering (which is what happened a lot in Python 2).</p>\u000a
p530
sVquestion_id
p531
I2214194
sVlast_activity_date
p532
I1406054962
sVcreation_date
p533
I1265481509
sVscore
p534
I64
sVowner
p535
(dp536
Vuser_id
p537
I75170
sVprofile_image
p538
Vhttps://www.gravatar.com/avatar/dee3c76d4bb3d44677c839ef281e52f9?s=128&d=identicon&r=PG
p539
sVuser_type
p540
Vregistered
p541
sVreputation
p542
I191988
sVlink
p543
Vhttp://stackoverflow.com/users/75170/john-feminella
p544
sVaccept_rate
p545
I72
sVdisplay_name
p546
VJohn Feminella
p547
ssVis_accepted
p548
I01
sVlast_edit_date
p549
I1406054962
sVanswer_id
p550
I2214223
sa(dp551
Vbody
p552
V<p>If you're having issues compiling the binary extension, or on a platform where you cant, you can try using the pure python <a href="https://github.com/PyMySQL/PyMySQL"><code>PyMySQL</code></a> bindings.</p>\u000a\u000a<p>Simply <code>pip install pymysql</code> and switch your SQLAlchemy URI to start like this:</p>\u000a\u000a<pre><code>SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://.....'\u000a</code></pre>\u000a\u000a<p>There are some <a href="http://docs.sqlalchemy.org/en/rel_0_9/dialects/mysql.html#module-sqlalchemy.dialects.mysql.pymysql">other drivers</a> you could also try.</p>\u000a
p553
sVquestion_id
p554
I22252397
sVlast_activity_date
p555
I1394202973
sVcreation_date
p556
I1394202973
sVscore
p557
I85
sVowner
p558
(dp559
Vuser_id
p560
I1949092
sVprofile_image
p561
Vhttps://www.gravatar.com/avatar/8e7673d78843844948a27d9b788cb295?s=128&d=identicon&r=PG
p562
sVuser_type
p563
Vregistered
p564
sVreputation
p565
I5634
sVlink
p566
Vhttp://stackoverflow.com/users/1949092/dazworrall
p567
sVdisplay_name
p568
VDazWorrall
p569
ssVis_accepted
p570
I01
sVanswer_id
p571
I22252975
sa(dp572
Vbody
p573
V<p>Make sure you have <code>rest_framework</code> listed in your <code>settings.py</code> <code>INSTALLED_APPS</code>.</p>\u000a
p574
sVquestion_id
p575
I21408344
sVlast_activity_date
p576
I1391178460
sVcreation_date
p577
I1391178460
sVscore
p578
I132
sVowner
p579
(dp580
Vuser_id
p581
I631348
sVprofile_image
p582
Vhttps://www.gravatar.com/avatar/80c474d28563cf2fd51e4d14768d3efa?s=128&d=identicon&r=PG
p583
sVuser_type
p584
Vregistered
p585
sVreputation
p586
I5340
sVlink
p587
Vhttp://stackoverflow.com/users/631348/scott-woodall
p588
sVdisplay_name
p589
VScott Woodall
p590
ssVis_accepted
p591
I01
sVanswer_id
p592
I21482412
sa(dp593
Vbody
p594
V<pre><code>def f(in_str):\u000a    out_str = in_str.upper()\u000a    return True, out_str # Creates tuple automatically\u000a\u000asucceeded, b = f("a") # Automatic tuple unpacking\u000a</code></pre>\u000a
p595
sVquestion_id
p596
I38508
sVlast_activity_date
p597
I1389507690
sVcreation_date
p598
I1220306642
sVscore
p599
I108
sVowner
p600
(dp601
Vuser_id
p602
I3560
sVprofile_image
p603
Vhttps://www.gravatar.com/avatar/4acd21acc7b1f605466f2f48189a7177?s=128&d=identicon&r=PG
p604
sVuser_type
p605
Vregistered
p606
sVreputation
p607
I133151
sVlink
p608
Vhttp://stackoverflow.com/users/3560/john-millikin
p609
sVaccept_rate
p610
I83
sVdisplay_name
p611
VJohn Millikin
p612
ssVis_accepted
p613
I01
sVlast_edit_date
p614
I1389507690
sVanswer_id
p615
I38516
sa(dp616
Vbody
p617
V<p>Since PyYAML's <code>yaml.load()</code> function maps YAML documents to native Python data structures, you can just access items by key or index. Using the example from the question you linked: </p>\u000a\u000a<pre><code>import yaml\u000awith open('tree.yaml', 'r') as f:\u000a    doc = yaml.load(f)\u000a</code></pre>\u000a\u000a<p>To access "branch1 text" you would use:</p>\u000a\u000a<pre><code>txt = doc["treeroot"]["branch1"]\u000aprint txt\u000a"branch1 text"\u000a</code></pre>\u000a\u000a<p>because, in your YAML document, the value of the <code>branch 1</code> key is under the <code>treeroot</code> key.</p>\u000a
p618
sVquestion_id
p619
I8127686
sVlast_activity_date
p620
I1387861277
sVcreation_date
p621
I1321303133
sVscore
p622
I103
sVowner
p623
(dp624
Vuser_id
p625
I456568
sVprofile_image
p626
Vhttps://i.stack.imgur.com/zJMQF.png?s=128&g=1
p627
sVuser_type
p628
Vregistered
p629
sVreputation
p630
I4964
sVlink
p631
Vhttp://stackoverflow.com/users/456568/aphex
p632
sVaccept_rate
p633
I69
sVdisplay_name
p634
VAphex
p635
ssVis_accepted
p636
I01
sVlast_edit_date
p637
I1387861277
sVanswer_id
p638
I8127777
sa(dp639
Vbody
p640
V<p>Yes, use <a href="http://docs.python.org/2/library/functions.html#any" rel="noreferrer"><code>any()</code></a>:</p>\u000a\u000a<pre><code>if any(s in item for item in L):\u000a    print 'string was found!'\u000a</code></pre>\u000a\u000a<p>As the docs mention, this is pretty much equivalent to your function, but <code>any()</code> can take generator expressions instead of just a string and a list, and <code>any()</code> short-circuits. Once <code>s in item</code> is True, the function breaks (you can simply do this with your function if you just change <code>retVal = True</code> to <code>return True</code>. Remember that functions break when it returns a value).</p>\u000a\u000a<hr>\u000a\u000a<p>You should avoid naming strings <code>str</code> and lists <code>list</code>. That will override the built-in types.</p>\u000a
p641
sVquestion_id
p642
I19727088
sVlast_activity_date
p643
I1383684795
sVcreation_date
p644
I1383310275
sVscore
p645
I77
sVowner
p646
(dp647
Vuser_id
p648
I1971805
sVprofile_image
p649
Vhttps://i.stack.imgur.com/KzjmY.jpg?s=128&g=1
p650
sVuser_type
p651
Vregistered
p652
sVreputation
p653
I34272
sVlink
p654
Vhttp://stackoverflow.com/users/1971805/terrya
p655
sVaccept_rate
p656
I83
sVdisplay_name
p657
VTerryA
p658
ssVis_accepted
p659
I01
sVlast_edit_date
p660
I1383684795
sVanswer_id
p661
I19727115
sa(dp662
Vbody
p663
V<p>The error message says that if you're passing scalar values, you have to pass an index.  So you can either not use scalar values for the columns -- e.g. use a list:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'A': [a], 'B': [b]})\u000a&gt;&gt;&gt; df\u000a   A  B\u000a0  2  3\u000a</code></pre>\u000a\u000a<p>or use scalar values and pass an index:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'A': a, 'B': b}, index=[0])\u000a&gt;&gt;&gt; df\u000a   A  B\u000a0  2  3\u000a</code></pre>\u000a
p664
sVquestion_id
p665
I17839973
sVlast_activity_date
p666
I1374684588
sVcreation_date
p667
I1374684588
sVscore
p668
I90
sVowner
p669
(dp670
Vuser_id
p671
I487339
sVprofile_image
p672
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p673
sVuser_type
p674
Vregistered
p675
sVreputation
p676
I147176
sVlink
p677
Vhttp://stackoverflow.com/users/487339/dsm
p678
sVdisplay_name
p679
VDSM
p680
ssVis_accepted
p681
I01
sVanswer_id
p682
I17840195
sa(dp683
Vbody
p684
V<pre><code>&gt;&gt;&gt; arr = numpy.array(((2,2),(2,-2)))\u000a&gt;&gt;&gt; tuple(map(tuple, arr))\u000a((2, 2), (2, -2))\u000a</code></pre>\u000a
p685
sVquestion_id
p686
I10016352
sVlast_activity_date
p687
I1374186864
sVcreation_date
p688
I1333560941
sVscore
p689
I60
sVowner
p690
(dp691
Vuser_id
p692
I916657
sVprofile_image
p693
Vhttps://www.gravatar.com/avatar/75bf31b48e75eedfebaa411a76a85155?s=128&d=identicon&r=PG
p694
sVuser_type
p695
Vregistered
p696
sVreputation
p697
I59401
sVlink
p698
Vhttp://stackoverflow.com/users/916657/niklas-b
p699
sVaccept_rate
p700
I95
sVdisplay_name
p701
VNiklas B.
p702
ssVis_accepted
p703
I01
sVlast_edit_date
p704
I1374186864
sVanswer_id
p705
I10016379
sa(dp706
Vbody
p707
V<p>The simplest way would be to first <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html"><code>replace</code></a> infs to NaN:</p>\u000a\u000a<pre><code>df.replace([np.inf, -np.inf], np.nan)\u000a</code></pre>\u000a\u000a<p>and then use the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html"><code>dropna</code></a>:</p>\u000a\u000a<pre><code>df.replace([np.inf, -np.inf], np.nan).dropna(subset=["col1", "col2"], how="all")\u000a</code></pre>\u000a\u000a<p>For example:</p>\u000a\u000a<pre><code>In [11]: df = pd.DataFrame([1, 2, np.inf, -np.inf])\u000a\u000aIn [12]: df.replace([np.inf, -np.inf], np.nan)\u000aOut[12]:\u000a    0\u000a0   1\u000a1   2\u000a2 NaN\u000a3 NaN\u000a</code></pre>\u000a\u000a<p><em>The same method would work for a Series.</em></p>\u000a
p708
sVquestion_id
p709
I17477979
sVlast_activity_date
p710
I1372974651
sVcreation_date
p711
I1372974651
sVscore
p712
I101
sVowner
p713
(dp714
Vuser_id
p715
I1240268
sVprofile_image
p716
Vhttps://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1
p717
sVuser_type
p718
Vregistered
p719
sVreputation
p720
I108899
sVlink
p721
Vhttp://stackoverflow.com/users/1240268/andy-hayden
p722
sVaccept_rate
p723
I90
sVdisplay_name
p724
VAndy Hayden
p725
ssVis_accepted
p726
I01
sVanswer_id
p727
I17478495
sa(dp728
Vbody
p729
V<pre><code>from file1 import *  \u000a</code></pre>\u000a\u000a<p>will import all objects and methods in file1</p>\u000a
p730
sVquestion_id
p731
I17255737
sVlast_activity_date
p732
I1371939131
sVcreation_date
p733
I1371938992
sVscore
p734
I65
sVowner
p735
(dp736
Vuser_id
p737
I86837
sVprofile_image
p738
Vhttps://i.stack.imgur.com/lWW13.jpg?s=128&g=1
p739
sVuser_type
p740
Vregistered
p741
sVreputation
p742
I34659
sVlink
p743
Vhttp://stackoverflow.com/users/86837/ennuikiller
p744
sVaccept_rate
p745
I89
sVdisplay_name
p746
Vennuikiller
p747
ssVis_accepted
p748
I01
sVlast_edit_date
p749
I1371939131
sVanswer_id
p750
I17255770
sa(dp751
Vbody
p752
V<p>To build a <code>.tar.gz</code> for an entire directory tree:</p>\u000a\u000a<pre><code>def make_tarfile(output_filename, source_dir):\u000a    with tarfile.open(output_filename, "w:gz") as tar:\u000a        tar.add(source_dir, arcname=os.path.basename(source_dir))\u000a</code></pre>\u000a
p753
sVquestion_id
p754
I2032403
sVlast_activity_date
p755
I1371168040
sVcreation_date
p756
I1371106725
sVscore
p757
I79
sVowner
p758
(dp759
Vuser_id
p760
I6364
sVprofile_image
p761
Vhttps://i.stack.imgur.com/YhLJF.jpg?s=128&g=1
p762
sVuser_type
p763
Vregistered
p764
sVreputation
p765
I9068
sVlink
p766
Vhttp://stackoverflow.com/users/6364/george-v-reilly
p767
sVdisplay_name
p768
VGeorge V. Reilly
p769
ssVis_accepted
p770
I01
sVlast_edit_date
p771
I1371168040
sVanswer_id
p772
I17081026
sa(dp773
Vbody
p774
V<p>Beware of using string interpolation for SQL queries, since it won't escape the input parameters correctly and will leave your application open to SQL injection vulnerabilities. <strong>The difference might seem trivial, but in reality it's huge</strong>.</p>\u000a\u000a<h3>Incorrect (with security issues)</h3>\u000a\u000a<pre><code>c.execute("SELECT * FROM foo WHERE bar = %s AND baz = %s" % (param1, param2))\u000a</code></pre>\u000a\u000a<h3>Correct (with escaping)</h3>\u000a\u000a<pre><code>c.execute("SELECT * FROM foo WHERE bar = %s AND baz = %s", (param1, param2))\u000a</code></pre>\u000a\u000a<p>It adds to the confusion that the modifiers used to bind parameters in a SQL statement varies between different DB API implementations and that the mysql client library uses <code>printf</code> style syntax instead of the more commonly accepted '?' marker (used by eg. <code>python-sqlite</code>).</p>\u000a
p775
sVquestion_id
p776
I775296
sVlast_activity_date
p777
I1369150911
sVcreation_date
p778
I1240364126
sVscore
p779
I178
sVowner
p780
(dp781
Vuser_id
p782
I73772
sVprofile_image
p783
Vhttps://www.gravatar.com/avatar/b4a74d63b7e37a68f94a3425ae7e1900?s=128&d=identicon&r=PG&f=1
p784
sVuser_type
p785
Vregistered
p786
sVreputation
p787
I30678
sVlink
p788
Vhttp://stackoverflow.com/users/73772/emil-h
p789
sVaccept_rate
p790
I80
sVdisplay_name
p791
VEmil H
p792
ssVis_accepted
p793
I01
sVlast_edit_date
p794
I1369150911
sVanswer_id
p795
I775399
sa(dp796
Vbody
p797
V<p><strong>Summary:</strong></p>\u000a\u000a<p>One option is, as suggested by jpic and sgallen in the comments, to add <code>.filter()</code> for each category. Each additional <code>filter</code> adds more joins, which should not be a problem for small set of categories.</p>\u000a\u000a<p>There is the <a href="https://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="noreferrer">aggregation</a> <a href="http://groups.google.com/group/django-users/msg/0659acee8c128f20" rel="noreferrer">approach</a>. This query would be shorter and perhaps quicker for a large set of categories.</p>\u000a\u000a<p>You also have the option of using <a href="https://docs.djangoproject.com/en/dev/topics/db/sql/" rel="noreferrer">custom queries</a>.</p>\u000a\u000a<hr>\u000a\u000a<p><strong>Some examples</strong></p>\u000a\u000a<p>Test setup:</p>\u000a\u000a<pre><code>class Photo(models.Model):\u000a    tags = models.ManyToManyField('Tag')\u000a\u000aclass Tag(models.Model):\u000a    name = models.CharField(max_length=50)\u000a\u000a    def __unicode__(self):\u000a        return self.name\u000a\u000aIn [2]: t1 = Tag.objects.create(name='holiday')\u000aIn [3]: t2 = Tag.objects.create(name='summer')\u000aIn [4]: p = Photo.objects.create()\u000aIn [5]: p.tags.add(t1)\u000aIn [6]: p.tags.add(t2)\u000aIn [7]: p.tags.all()\u000aOut[7]: [&lt;Tag: holiday&gt;, &lt;Tag: summer&gt;]\u000a</code></pre>\u000a\u000a<h2>Using <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#spanning-multi-valued-relationships" rel="noreferrer">chained filters</a> approach:</h2>\u000a\u000a<pre><code>In [8]: Photo.objects.filter(tags=t1).filter(tags=t2)\u000aOut[8]: [&lt;Photo: Photo object&gt;]\u000a</code></pre>\u000a\u000a<p>Resulting query:</p>\u000a\u000a<pre><code>In [17]: print Photo.objects.filter(tags=t1).filter(tags=t2).query\u000aSELECT "test_photo"."id"\u000aFROM "test_photo"\u000aINNER JOIN "test_photo_tags" ON ("test_photo"."id" = "test_photo_tags"."photo_id")\u000aINNER JOIN "test_photo_tags" T4 ON ("test_photo"."id" = T4."photo_id")\u000aWHERE ("test_photo_tags"."tag_id" = 3  AND T4."tag_id" = 4 )\u000a</code></pre>\u000a\u000a<p>Note that each <code>filter</code> adds more <code>JOINS</code> to the query.</p>\u000a\u000a<h2>Using <a href="https://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="noreferrer">annotation</a> <a href="http://groups.google.com/group/django-users/msg/0659acee8c128f20" rel="noreferrer">approach</a>:</h2>\u000a\u000a<pre><code>In [29]: from django.db.models import Count\u000aIn [30]: Photo.objects.filter(tags__in=[t1, t2]).annotate(num_tags=Count('tags')).filter(num_tags=2)\u000aOut[30]: [&lt;Photo: Photo object&gt;]\u000a</code></pre>\u000a\u000a<p>Resulting query:</p>\u000a\u000a<pre><code>In [32]: print Photo.objects.filter(tags__in=[t1, t2]).annotate(num_tags=Count('tags')).filter(num_tags=2).query\u000aSELECT "test_photo"."id", COUNT("test_photo_tags"."tag_id") AS "num_tags"\u000aFROM "test_photo"\u000aLEFT OUTER JOIN "test_photo_tags" ON ("test_photo"."id" = "test_photo_tags"."photo_id")\u000aWHERE ("test_photo_tags"."tag_id" IN (3, 4))\u000aGROUP BY "test_photo"."id", "test_photo"."id"\u000aHAVING COUNT("test_photo_tags"."tag_id") = 2\u000a</code></pre>\u000a\u000a<h2><code>AND</code>ed <code>Q</code> objects would not work:</h2>\u000a\u000a<pre><code>In [9]: from django.db.models import Q\u000aIn [10]: Photo.objects.filter(Q(tags__name='holiday') &amp; Q(tags__name='summer'))\u000aOut[10]: []\u000aIn [11]: from operator import and_\u000aIn [12]: Photo.objects.filter(reduce(and_, [Q(tags__name='holiday'), Q(tags__name='summer')]))\u000aOut[12]: []\u000a</code></pre>\u000a\u000a<p>Resulting query:</p>\u000a\u000a<pre><code>In [25]: print Photo.objects.filter(Q(tags__name='holiday') &amp; Q(tags__name='summer')).query\u000aSELECT "test_photo"."id"\u000aFROM "test_photo"\u000aINNER JOIN "test_photo_tags" ON ("test_photo"."id" = "test_photo_tags"."photo_id")\u000aINNER JOIN "test_tag" ON ("test_photo_tags"."tag_id" = "test_tag"."id")\u000aWHERE ("test_tag"."name" = holiday  AND "test_tag"."name" = summer )\u000a</code></pre>\u000a
p798
sVquestion_id
p799
I8618068
sVlast_activity_date
p800
I1367573199
sVcreation_date
p801
I1324922091
sVscore
p802
I65
sVowner
p803
(dp804
Vuser_id
p805
I327317
sVprofile_image
p806
Vhttps://www.gravatar.com/avatar/0e197deaf223bdc0b552256da57c2ad5?s=128&d=identicon&r=PG
p807
sVuser_type
p808
Vregistered
p809
sVreputation
p810
I18120
sVlink
p811
Vhttp://stackoverflow.com/users/327317/davor-lucic
p812
sVdisplay_name
p813
VDavor Lucic
p814
ssVis_accepted
p815
I01
sVlast_edit_date
p816
I1367573199
sVanswer_id
p817
I8637972
sa(dp818
Vbody
p819
V<p>You can use <a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.text"><code>text</code></a>. </p>\u000a\u000a<pre><code>text(x, y, s, fontsize=12)\u000a</code></pre>\u000a\u000a<p><code>text</code> coordinates can be given relative to the axis, so the position of your text will be independent of the size of the plot:</p>\u000a\u000a<blockquote>\u000a  <p>The default transform specifies that text is in data coords,\u000a  alternatively, you can specify text in axis coords (0,0 is lower-left\u000a  and 1,1 is upper-right).  The example below places text in the center\u000a  of the axes::</p>\u000a</blockquote>\u000a\u000a<pre><code>text(0.5, 0.5,'matplotlib',\u000a     horizontalalignment='center',\u000a     verticalalignment='center',\u000a     transform = ax.transAxes)\u000a</code></pre>\u000a\u000a<p>To prevent the text to interfere with any point of your scatter is more difficult afaik. The easier method is to set y_axis (ymax in <code>ylim((ymin,ymax))</code>) to a value a bit higher than the max y-coordinate of your points. In this way you will always have this free space for the text.</p>\u000a\u000a<p>EDIT: here you have an example:</p>\u000a\u000a<pre><code>In [18]: f = figure()\u000aIn [19]: ax = f.add_subplot(111)\u000aIn [20]: scatter([3,5,2,6,8],[5,3,2,1,5])\u000aOut[20]: &lt;matplotlib.collections.CircleCollection object at 0x0000000007439A90&gt;\u000aIn [21]: text(0.1, 0.9,'matplotlib', ha='center', va='center', transform=ax.transAxes)\u000aOut[21]: &lt;matplotlib.text.Text object at 0x0000000007415B38&gt;\u000aIn [22]:\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/WJhW8.png" alt="enter image description here"></p>\u000a\u000a<p>The ha and va parameters set the alignment of your text relative to the insertion point. ie. ha='left' is a good set to prevent a long text to go out of the left axis when the frame is reduced (made narrower) manually.</p>\u000a
p820
sVquestion_id
p821
I8482588
sVlast_activity_date
p822
I1364189276
sVcreation_date
p823
I1323734373
sVscore
p824
I78
sVowner
p825
(dp826
Vuser_id
p827
I308903
sVprofile_image
p828
Vhttps://www.gravatar.com/avatar/712ac24edc67b5e789ed86dcc11ca6b9?s=128&d=identicon&r=PG
p829
sVuser_type
p830
Vregistered
p831
sVreputation
p832
I39587
sVlink
p833
Vhttp://stackoverflow.com/users/308903/joaquin
p834
sVaccept_rate
p835
I89
sVdisplay_name
p836
Vjoaquin
p837
ssVis_accepted
p838
I01
sVlast_edit_date
p839
I1364189276
sVanswer_id
p840
I8482667
sa(dp841
Vbody
p842
V<p>This is by far the fastest, several times faster than even <code>count()</code>, just time it with that excellent <a href="http://stackoverflow.com/a/14320949/866022">mgilson's timing suite</a>:</p>\u000a\u000a<pre><code>s == len(s) * s[0]\u000a</code></pre>\u000a\u000a<p>Here all the checking is done inside the Python C code which just:</p>\u000a\u000a<ul>\u000a<li>allocates len(s) characters;</li>\u000a<li>fills the space with the first character;</li>\u000a<li>compares two strings.</li>\u000a</ul>\u000a\u000a<p>The longer the string is, the greater is time bonus. However, as mgilson writes, it creates a copy of the string, so if your string length is many millions of symbols, it may become a problem.</p>\u000a\u000a<p>As we can see from timing results, generally the fastest ways to solve the task do not execute any Python code for each symbol. However, the <code>set()</code> solution also does all the job inside C code of the Python library, but it is still slow, probably because of operating string through Python object interface.</p>\u000a\u000a<p><strong>UPD:</strong> Concerning the empty string case. What to do with it strongly depends on the task. If the task is "check if all the symbols in a string are the same", <code>s == len(s) * s[0]</code> is a valid answer (no symbols mean an error, and exception is ok). If the task is "check if there is exactly one unique symbol", empty string should give us False, and the answer is <code>s and s == len(s) * s[0]</code>, or <code>bool(s) and s == len(s) * s[0]</code> if you prefer receiving boolean values. Finally, if we understand the task as "check if there are no different symbols", the result for empty string is True, and the answer is <code>not s or s == len(s) * s[0]</code>.</p>\u000a
p843
sVquestion_id
p844
I14320909
sVlast_activity_date
p845
I1359175694
sVcreation_date
p846
I1358178409
sVscore
p847
I92
sVowner
p848
(dp849
Vuser_id
p850
I1818868
sVprofile_image
p851
Vhttps://i.stack.imgur.com/Xv16g.jpg?s=128&g=1
p852
sVuser_type
p853
Vregistered
p854
sVreputation
p855
I3396
sVlink
p856
Vhttp://stackoverflow.com/users/1818868/ellioh
p857
sVdisplay_name
p858
VEllioh
p859
ssVis_accepted
p860
I01
sVlast_edit_date
p861
I1359175694
sVanswer_id
p862
I14321721
sa(dp863
Vbody
p864
V<p>I am not sure why but, on my windows machine I had to add a 'shell=True' to the call.</p>\u000a\u000a<p>E.g. for <code>dir</code> you would type:</p>\u000a\u000a<pre><code>import subprocess\u000asubprocess.call('dir', shell=True)\u000a</code></pre>\u000a\u000a<p>Hope this helps,</p>\u000a\u000a<p>Douglas</p>\u000a\u000a<p>To quote from the documentation:\u000aThe only time you need to specify shell=True on Windows is when the command you wish to execute is built into the shell (e.g. dir or copy). You do not need shell=True to run a batch file or console-based executable.</p>\u000a
p865
sVquestion_id
p866
I3022013
sVlast_activity_date
p867
I1357446505
sVcreation_date
p868
I1294329629
sVscore
p869
I89
sVowner
p870
(dp871
Vuser_id
p872
I565694
sVprofile_image
p873
Vhttps://www.gravatar.com/avatar/7a1a36e0904199fc18d784046b2e9692?s=128&d=identicon&r=PG
p874
sVuser_type
p875
Vunregistered
p876
sVreputation
p877
I914
sVlink
p878
Vhttp://stackoverflow.com/users/565694/douglas-macdonald
p879
sVdisplay_name
p880
VDouglas Macdonald
p881
ssVis_accepted
p882
I01
sVlast_edit_date
p883
I1357446505
sVanswer_id
p884
I4616867
sa(dp885
Vbody
p886
V<p>This should work: <code>myDict = dict(queryDict.iterlists())</code></p>\u000a
p887
sVquestion_id
p888
I13349573
sVlast_activity_date
p889
I1352746667
sVcreation_date
p890
I1352746667
sVscore
p891
I67
sVowner
p892
(dp893
Vuser_id
p894
I688136
sVprofile_image
p895
Vhttps://www.gravatar.com/avatar/58d8ae91168405fb7b1e2dbfdfe266f7?s=128&d=identicon&r=PG
p896
sVuser_type
p897
Vregistered
p898
sVreputation
p899
I1140
sVlink
p900
Vhttp://stackoverflow.com/users/688136/alexandre-vassalotti
p901
sVdisplay_name
p902
VAlexandre Vassalotti
p903
ssVis_accepted
p904
I01
sVanswer_id
p905
I13349753
sa(dp906
Vbody
p907
V<p>Maybe <code>.value_counts()</code>?</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import pandas\u000a&gt;&gt;&gt; my_series = pandas.Series([1,2,2,3,3,3, "fred", 1.8, 1.8])\u000a&gt;&gt;&gt; my_series\u000a0       1\u000a1       2\u000a2       2\u000a3       3\u000a4       3\u000a5       3\u000a6    fred\u000a7     1.8\u000a8     1.8\u000a&gt;&gt;&gt; counts = my_series.value_counts()\u000a&gt;&gt;&gt; counts\u000a3       3\u000a2       2\u000a1.8     2\u000afred    1\u000a1       1\u000a&gt;&gt;&gt; len(counts)\u000a5\u000a&gt;&gt;&gt; sum(counts)\u000a9\u000a&gt;&gt;&gt; counts["fred"]\u000a1\u000a&gt;&gt;&gt; dict(counts)\u000a{1.8: 2, 2: 2, 3: 3, 1: 1, 'fred': 1}\u000a</code></pre>\u000a
p908
sVquestion_id
p909
I12207326
sVlast_activity_date
p910
I1348691010
sVcreation_date
p911
I1346372086
sVscore
p912
I90
sVowner
p913
(dp914
Vuser_id
p915
I487339
sVprofile_image
p916
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p917
sVuser_type
p918
Vregistered
p919
sVreputation
p920
I147176
sVlink
p921
Vhttp://stackoverflow.com/users/487339/dsm
p922
sVdisplay_name
p923
VDSM
p924
ssVis_accepted
p925
I01
sVlast_edit_date
p926
I1348691010
sVanswer_id
p927
I12207352
sa(dp928
Vbody
p929
V<p><code>writelines</code> expects a list of strings, while <code>write</code> expects a single string. </p>\u000a\u000a<p><code>line1 + "\u005cn" + line2</code> merges those strings together into a single string before passing it to <code>write</code>.</p>\u000a\u000a<p>Note that if you have many lines, you may want to use <code>"\u005cn".join(list_of_lines)</code>.</p>\u000a
p930
sVquestion_id
p931
I12377473
sVlast_activity_date
p932
I1347396143
sVcreation_date
p933
I1347395807
sVscore
p934
I58
sVowner
p935
(dp936
Vuser_id
p937
I309472
sVprofile_image
p938
Vhttps://www.gravatar.com/avatar/295aeecf6a73d58bca291c36b3a6abaa?s=128&d=identicon&r=PG
p939
sVuser_type
p940
Vregistered
p941
sVreputation
p942
I5370
sVlink
p943
Vhttp://stackoverflow.com/users/309472/dgh
p944
sVaccept_rate
p945
I80
sVdisplay_name
p946
VDGH
p947
ssVis_accepted
p948
I01
sVlast_edit_date
p949
I1347396143
sVanswer_id
p950
I12377541
sa(dp951
Vbody
p952
V<p>You can use the usual Python package structure to divide your App into multiple modules, <a href="http://flask.pocoo.org/docs/patterns/packages/">see the Flask docs.</a></p>\u000a\u000a<p>However,</p>\u000a\u000a<blockquote>\u000a  <p>Flask uses a concept of blueprints for making application components and supporting common patterns within an application or across applications.</p>\u000a</blockquote>\u000a\u000a<p>You can create a sub-component of your app as a Blueprint in a separate file:</p>\u000a\u000a<pre><code>simple_page = Blueprint('simple_page', __name__, template_folder='templates')\u000a@simple_page.route('/&lt;page&gt;')\u000adef show(page):\u000a    # stuff\u000a</code></pre>\u000a\u000a<p>And then use it in the main part:</p>\u000a\u000a<pre><code>from yourapplication.simple_page import simple_page\u000a\u000aapp = Flask(__name__)\u000aapp.register_blueprint(simple_page)\u000a</code></pre>\u000a\u000a<p>Blueprints can also bundle specific resources: templates or static files. Please refer to the <a href="http://flask.pocoo.org/docs/blueprints/#blueprints">Flask docs</a> for all the details.</p>\u000a
p953
sVquestion_id
p954
I11994325
sVlast_activity_date
p955
I1345150598
sVcreation_date
p956
I1345147777
sVscore
p957
I57
sVowner
p958
(dp959
Vuser_id
p960
I376138
sVprofile_image
p961
Vhttps://www.gravatar.com/avatar/2ff45dcc3874524bc53094d03fbb1f2c?s=128&d=identicon&r=PG
p962
sVuser_type
p963
Vregistered
p964
sVreputation
p965
I4352
sVlink
p966
Vhttp://stackoverflow.com/users/376138/pixelistik
p967
sVaccept_rate
p968
I75
sVdisplay_name
p969
Vpixelistik
p970
ssVis_accepted
p971
I01
sVlast_edit_date
p972
I1345150598
sVanswer_id
p973
I11994728
sa(dp974
Vbody
p975
V<pre><code>&gt;&gt;&gt; 'lipsum'[3:]\u000a'sum'\u000a</code></pre>\u000a\u000a<p>See the official documentation on <a href="http://docs.python.org/tutorial/introduction.html#strings">strings</a> for more information and <a href="http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation">this</a> SO answer for a concise summary of the notation.</p>\u000a
p976
sVquestion_id
p977
I11806559
sVlast_activity_date
p978
I1344083518
sVcreation_date
p979
I1344062757
sVscore
p980
I103
sVowner
p981
(dp982
Vuser_id
p983
I1219006
sVprofile_image
p984
Vhttps://i.stack.imgur.com/M1ZlR.jpg?s=128&g=1
p985
sVuser_type
p986
Vregistered
p987
sVreputation
p988
I62408
sVlink
p989
Vhttp://stackoverflow.com/users/1219006/jamylak
p990
sVaccept_rate
p991
I100
sVdisplay_name
p992
Vjamylak
p993
ssVis_accepted
p994
I01
sVlast_edit_date
p995
I1344083518
sVanswer_id
p996
I11806564
sa(dp997
Vbody
p998
V<p>A naive algorithm won't give good results when applied to real-world data. Here is a 20-line algorithm that exploits relative word frequency to give accurate results for real-word text.</p>\u000a\u000a<p><em>(If you want an answer to your original question which does not use word frequency, you need to refine what exactly is meant by "longest word": is it better to have a 20-letter word and ten 3-letter words, or is it better to have five 10-letter words? Once you settle on a precise definition, you just have to change the line defining <code>wordcost</code> to reflect the intended meaning.)</em></p>\u000a\u000a<h2>The idea</h2>\u000a\u000a<p>The best way to proceed is to <em>model</em> the distribution of the output. A good first approximation is to assume all words are independently distributed. Then you only need to know the relative frequency of all words. It is reasonable to assume that they follow Zipf's law, that is the word with rank <em>n</em> in the list of words has probability roughly 1/(<em>n</em> log <em>N</em>) where <em>N</em> is the number of words in the dictionary.</p>\u000a\u000a<p>Once you have fixed the model, you can use dynamic programming to infer the position of the spaces. The most likely sentence is the one that maximizes the product of the probability of each individual word, and it's easy to compute it with dynamic programming. Instead of directly using the probability we use a cost defined as the logarithm of the inverse of the probability to avoid overflows.</p>\u000a\u000a<h2>The code</h2>\u000a\u000a<pre><code>from math import log\u000a\u000a# Build a cost dictionary, assuming Zipf's law and cost = -math.log(probability).\u000awords = open("words-by-frequency.txt").read().split()\u000awordcost = dict((k, log((i+1)*log(len(words)))) for i,k in enumerate(words))\u000amaxword = max(len(x) for x in words)\u000a\u000adef infer_spaces(s):\u000a    """Uses dynamic programming to infer the location of spaces in a string\u000a    without spaces."""\u000a\u000a    # Find the best match for the i first characters, assuming cost has\u000a    # been built for the i-1 first characters.\u000a    # Returns a pair (match_cost, match_length).\u000a    def best_match(i):\u000a        candidates = enumerate(reversed(cost[max(0, i-maxword):i]))\u000a        return min((c + wordcost.get(s[i-k-1:i], 9e999), k+1) for k,c in candidates)\u000a\u000a    # Build the cost array.\u000a    cost = [0]\u000a    for i in range(1,len(s)+1):\u000a        c,k = best_match(i)\u000a        cost.append(c)\u000a\u000a    # Backtrack to recover the minimal-cost string.\u000a    out = []\u000a    i = len(s)\u000a    while i&gt;0:\u000a        c,k = best_match(i)\u000a        assert c == cost[i]\u000a        out.append(s[i-k:i])\u000a        i -= k\u000a\u000a    return " ".join(reversed(out))\u000a</code></pre>\u000a\u000a<p>which you can use with</p>\u000a\u000a<pre><code>s = 'thumbgreenappleactiveassignmentweeklymetaphor'\u000aprint(infer_spaces(s))\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<h2>The results</h2>\u000a\u000a<p>I am using <a href="http://tinypaste.com/c1666a6b">this quick-and-dirty 125k-word dictionary I put together</a> from a small subset of Wikipedia.</p>\u000a\u000a<blockquote>\u000a  <p><strong>Before:</strong> thumbgreenappleactiveassignmentweeklymetaphor.<br>\u000a  <strong>After:</strong> thumb green apple active assignment weekly metaphor.</p>\u000a</blockquote>\u000a\u000a<p><b></b></p>\u000a\u000a<blockquote>\u000a  <p><strong>Before:</strong> thereismassesoftextinformationofpeoplescommentswhichisparsedfromhtmlbuttherearen\u000a  odelimitedcharactersinthemforexamplethumbgreenappleactiveassignmentweeklymetapho\u000a  rapparentlytherearethumbgreenappleetcinthestringialsohavealargedictionarytoquery\u000a  whetherthewordisreasonablesowhatsthefastestwayofextractionthxalot.</p>\u000a  \u000a  <p><strong>After:</strong> there is masses of text information of peoples comments which is parsed from html but there are no delimited characters in them for example thumb green apple active assignment weekly metaphor apparently there are thumb green apple etc in the string i also have a large dictionary to query whether the word is reasonable so what s the fastest way of extraction thx a lot.</p>\u000a</blockquote>\u000a\u000a<p><b></b></p>\u000a\u000a<blockquote>\u000a  <p><strong>Before:</strong> itwasadarkandstormynighttherainfellintorrentsexceptatoccasionalintervalswhenitwascheckedbyaviolentgustofwindwhichsweptupthestreetsforitisinlondonthatoursceneliesrattlingalongthehousetopsandfiercelyagitatingthescantyflameofthelampsthatstruggledagainstthedarkness.</p>\u000a  \u000a  <p><strong>After:</strong> it was a dark and stormy night the rain fell in torrents except at occasional intervals when it was checked by a violent gust of wind which swept up the streets for it is in london that our scene lies rattling along the housetops and fiercely agitating the scanty flame of the lamps that struggled against the darkness.</p>\u000a</blockquote>\u000a\u000a<p>As you can see it is essentially flawless. The most important part is to make sure your word list was trained to a corpus similar to what you will actually encounter, otherwise the results will be very bad.</p>\u000a\u000a<hr>\u000a\u000a<h2>Optimization</h2>\u000a\u000a<p>The implementation consumes a linear amount of time and memory, so it is reasonably efficient. If you need further speedups, you can build a suffix tree from the word list to reduce the size of the set of candidates.</p>\u000a\u000a<p>If you need to process a very large consecutive string it would be reasonable to split the string to avoid excessive memory usage. For example you could process the text in blocks of 10000 characters plus a margin of 1000 characters on either side to avoid boundary effects. This will keep memory usage to a minimum and will have almost certainly no effect on the quality.</p>\u000a
p999
sVquestion_id
p1000
I8870261
sVlast_activity_date
p1001
I1343190198
sVcreation_date
p1002
I1343190198
sVscore
p1003
I73
sVowner
p1004
(dp1005
Vuser_id
p1006
I1515832
sVprofile_image
p1007
Vhttps://www.gravatar.com/avatar/66772089b22de95687a9ba0b354ab6ee?s=128&d=identicon&r=PG
p1008
sVuser_type
p1009
Vregistered
p1010
sVreputation
p1011
I3506
sVlink
p1012
Vhttp://stackoverflow.com/users/1515832/generic-human
p1013
sVdisplay_name
p1014
VGeneric Human
p1015
ssVis_accepted
p1016
I01
sVanswer_id
p1017
I11642687
sa(dp1018
Vbody
p1019
V<p>\u2026there's a reason they're called "encodings"\u2026</p>\u000a\u000a<p>A little preamble: think of unicode as the norm, or the ideal state. Unicode is just a table of characters. \u211665 is latin capital A. \u2116937 is greek capital omega. Just that.</p>\u000a\u000a<p>In order for a computer to store and-or manipulate Unicode, it has to <em>encode</em> it into bytes. The most straightforward <em>encoding</em> of Unicode is UCS-4; every character occupies 4 bytes, and all ~1000000 characters are available. The 4 bytes contain the number of the character in the Unicode tables as a 4-byte integer. Another very useful encoding is UTF-8, which can encode any Unicode character with one to four bytes. But there also are some limited encodings, like "latin1", which include a very limited range of characters, mostly used by Western countries. Such <em>encodings</em> use only one byte per character.</p>\u000a\u000a<p>Basically, Unicode can be <em>encoded</em> with many encodings, and encoded strings can be <em>decoded</em> to Unicode. The thing is, Unicode came quite late, so all of us that grew up using an 8-bit <em>character set</em> learned too late that all this time we worked with <em>encoded</em> strings. The encoding could be ISO8859-1, or windows CP437, or CP850, or, or, or, depending on our system default.</p>\u000a\u000a<p>So when, in your source code, you enter the string "add \u201cMonitoring\u201c to list" (and I think you wanted the string "add \u201cMonitoring\u201d to list", note the second quote), you actually are using a string already <em>encoded</em> according to your system's default codepage (by the byte \u005cx93 I assume you use Windows codepage 1252, \u201cWestern\u201d). If you want to get Unicode from that, you need to <em>decode</em> the string from the "cp1252" encoding.</p>\u000a\u000a<p>So, what you meant to do, was:</p>\u000a\u000a<pre><code>"add \u005cx93Monitoring\u005cx94 to list".decode("cp1252", "ignore")\u000a</code></pre>\u000a\u000a<p>It's unfortunate that Python 2.x includes an <code>.encode</code> method for strings too; this is a convenience function for "special" encodings, like the "zip" or "rot13" or "base64" ones, which have nothing to do with Unicode.</p>\u000a\u000a<p>Anyway, all you have to remember for your to-and-fro Unicode conversions is:</p>\u000a\u000a<ul>\u000a<li>a Unicode string gets <em>encoded</em> to a Python 2.x string (actually, a sequence of bytes)</li>\u000a<li>a Python 2.x string gets <em>decoded</em> to a Unicode string</li>\u000a</ul>\u000a\u000a<p>In both cases, you need to specify the <em>encoding</em> that will be used.</p>\u000a\u000a<p>I'm not very clear, I'm sleepy, but I sure hope I help.</p>\u000a\u000a<p>PS A humorous side note: Mayans didn't have Unicode; ancient Romans, ancient Greeks, ancient Egyptians didn't too. They all had their own "encodings", and had little to no respect for other cultures. All these civilizations crumbled to dust. Think about it people! Make your apps Unicode-aware, for the good of mankind. :)</p>\u000a\u000a<p>PS2 Please don't spoil the previous message by saying "But the Chinese\u2026". If you feel inclined or obligated to do so, though, delay it by thinking that the Unicode BMP is populated mostly by chinese ideograms, ergo Chinese is the basis of Unicode. I can go on inventing outrageous lies, as long as people develop Unicode-aware applications. Cheers!</p>\u000a
p1020
sVquestion_id
p1021
I368805
sVlast_activity_date
p1022
I1340799229
sVcreation_date
p1023
I1229388311
sVscore
p1024
I196
sVowner
p1025
(dp1026
Vuser_id
p1027
I6899
sVprofile_image
p1028
Vhttps://www.gravatar.com/avatar/132aeb33251a1eddee3efc87633c0af1?s=128&d=identicon&r=PG
p1029
sVuser_type
p1030
Vregistered
p1031
sVreputation
p1032
I51023
sVlink
p1033
Vhttp://stackoverflow.com/users/6899/tzot
p1034
sVaccept_rate
p1035
I83
sVdisplay_name
p1036
Vtzot
p1037
ssVis_accepted
p1038
I01
sVlast_edit_date
p1039
I1340799229
sVanswer_id
p1040
I370199
sa(dp1041
Vbody
p1042
V<p>Under Python 3.x, you can do this nicely:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; head, *tail = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\u000a&gt;&gt;&gt; head\u000a1\u000a&gt;&gt;&gt; tail\u000a[1, 2, 3, 5, 8, 13, 21, 34, 55]\u000a</code></pre>\u000a\u000a<p>A new feature in 3.x is to use the <code>*</code> operator in unpacking, to mean any extra values. It is described in <a href="http://www.python.org/dev/peps/pep-3132/" rel="noreferrer">PEP 3132 - Extended Iterable Unpacking</a>. This also has the advantage of working on any iterable, not just sequences.</p>\u000a\u000a<p>It's also <em>really</em> readable.</p>\u000a\u000a<p>As described in the PEP, if you want to do the equivalent under 2.x (without potentially making a temporary list), you have to do this:</p>\u000a\u000a<pre><code>it = iter(iterable)\u000ahead = it.next()\u000atail = list(it)\u000a</code></pre>\u000a\u000a<p>Naturally, if you are working on a list, the easiest way without the 3.x syntax is:</p>\u000a\u000a<pre><code>head, tail = seq[0], seq[1:]\u000a</code></pre>\u000a
p1043
sVquestion_id
p1044
I10532473
sVlast_activity_date
p1045
I1336647927
sVcreation_date
p1046
I1336647200
sVscore
p1047
I108
sVowner
p1048
(dp1049
Vuser_id
p1050
I722121
sVprofile_image
p1051
Vhttps://www.gravatar.com/avatar/c494fd4b406a2c066054ad17d30ae73b?s=128&d=identicon&r=PG
p1052
sVuser_type
p1053
Vregistered
p1054
sVreputation
p1055
I51344
sVlink
p1056
Vhttp://stackoverflow.com/users/722121/gareth-latty
p1057
sVaccept_rate
p1058
I100
sVdisplay_name
p1059
VGareth Latty
p1060
ssVis_accepted
p1061
I01
sVlast_edit_date
p1062
I1336647927
sVanswer_id
p1063
I10532492
sa(dp1064
Vbody
p1065
V<p><a href="http://php.net/manual/en/function.mysql-set-charset.php" rel="noreferrer"><code>mysql_set_charset()</code></a> would be an option - but an option limited to the <a href="http://www.php.net/manual/en/book.mysql.php" rel="noreferrer"><code>ext/mysql</code></a>. For <a href="http://www.php.net/manual/en/book.mysqli.php" rel="noreferrer"><code>ext/mysqli</code></a> it is <a href="http://php.net/manual/mysqli.set-charset.php" rel="noreferrer"><code>mysqli_set_charset</code></a> and for <a href="http://www.php.net/manual/en/book.pdo.php" rel="noreferrer"><code>PDO</code></a><code>::mysql</code> you need to specify a connection parameter.</p>\u000a\u000a<p>As using this function results in a MySQL API call, it should be considered much faster than issuing a query.</p>\u000a\u000a<p>In respect of performance the fastest way to ensure a UTF-8-based communiction between your script and the MySQL server is setting up the MySQL server correctly. As <code>SET NAMES x</code> is <a href="http://dev.mysql.com/doc/refman/5.0/en/charset-connection.html" rel="noreferrer">equivalent</a> to </p>\u000a\u000a<pre><code>SET character_set_client = x;\u000aSET character_set_results = x;\u000aSET character_set_connection = x;\u000a</code></pre>\u000a\u000a<p>whereas <code>SET character_set_connection = x</code> internally also executes <code>SET collation_connection = &lt;&lt;default_collation_of_character_set_x&gt;&gt;</code> you can also set <a href="http://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html" rel="noreferrer">these server variables</a> statically in your <code>my.ini/cnf</code>.</p>\u000a\u000a<p>Please be aware of possible problems with other applications running on the same MySQL server instance and requiring some other character set.</p>\u000a
p1066
sVquestion_id
p1067
I1650591
sVlast_activity_date
p1068
I1334528275
sVcreation_date
p1069
I1256919522
sVscore
p1070
I28
sVowner
p1071
(dp1072
Vuser_id
p1073
I11354
sVprofile_image
p1074
Vhttps://www.gravatar.com/avatar/4a8422bd788cc87f1c77af22bcf733bf?s=128&d=identicon&r=PG
p1075
sVuser_type
p1076
Vregistered
p1077
sVreputation
p1078
I64855
sVlink
p1079
Vhttp://stackoverflow.com/users/11354/stefan-gehrig
p1080
sVaccept_rate
p1081
I86
sVdisplay_name
p1082
VStefan Gehrig
p1083
ssVis_accepted
p1084
I01
sVlast_edit_date
p1085
I1334528275
sVanswer_id
p1086
I1650834
sa(dp1087
Vbody
p1088
V<p>Chances are that you're running an old Python version, and not 3.1. In Python 2.6, you need indices in the format specs, like this:</p>\u000a\u000a<pre><code>"{0} {1}\u005cn".format(x,y)\u000a</code></pre>\u000a\u000a<p>Update your Python version to a recent one, preferably 2.7 or 3.2, to fix the problem. According to the documentation, leaving out the numeric indices <a href="http://docs.python.org/dev/library/string.html#format-string-syntax" rel="noreferrer">should work in Python 3.1</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Changed in version 3.1: The positional argument specifiers can be omitted, so '{} {}' is equivalent to '{0} {1}'.</p>\u000a</blockquote>\u000a
p1089
sVquestion_id
p1090
I10054122
sVlast_activity_date
p1091
I1333799607
sVcreation_date
p1092
I1333799607
sVscore
p1093
I121
sVowner
p1094
(dp1095
Vuser_id
p1096
I35070
sVprofile_image
p1097
Vhttps://www.gravatar.com/avatar/6f92354195e8874dbee44d5c8714d506?s=128&d=identicon&r=PG
p1098
sVuser_type
p1099
Vregistered
p1100
sVreputation
p1101
I151504
sVlink
p1102
Vhttp://stackoverflow.com/users/35070/phihag
p1103
sVaccept_rate
p1104
I77
sVdisplay_name
p1105
Vphihag
p1106
ssVis_accepted
p1107
I01
sVanswer_id
p1108
I10054232
sa(dp1109
Vbody
p1110
V<p>I've also had "... and link flags for Python are sane... no: PYTHON DISABLED"</p>\u000a\u000a<p>On Ubuntu 10.04 you have to install '<strong>python2.6-dev</strong>'. The flags for ./configure are:</p>\u000a\u000a<pre><code>--enable-pythoninterp\u000a\u000a--with-python-config-dir=/usr/lib/python2.6/config\u000a</code></pre>\u000a\u000a<p>Make sure you got a path to directory, which contains '<strong>config.c</strong>' file. Also no '<strong>/</strong>' at the end of the path! That caused me problems.</p>\u000a
p1111
sVquestion_id
p1112
I3373914
sVlast_activity_date
p1113
I1329153962
sVcreation_date
p1114
I1300062398
sVscore
p1115
I73
sVowner
p1116
(dp1117
Vuser_id
p1118
I523157
sVprofile_image
p1119
Vhttps://www.gravatar.com/avatar/fce8e97a4f558dcdd7d6a64f02c493a6?s=128&d=identicon&r=PG
p1120
sVuser_type
p1121
Vregistered
p1122
sVreputation
p1123
I1475
sVlink
p1124
Vhttp://stackoverflow.com/users/523157/vrybas
p1125
sVdisplay_name
p1126
Vvrybas
p1127
ssVis_accepted
p1128
I01
sVlast_edit_date
p1129
I1329153962
sVanswer_id
p1130
I5293524
sa(dp1131
Vbody
p1132
V<p>Since the <code>return</code> statement terminates the execution of the current function, the two forms are equivalent (although the second one is arguably more readable than the first).</p>\u000a\u000a<p>The efficiency of both forms is comparable, the underlying machine code has to perform a jump if the <code>if</code> condition is false anyway.</p>\u000a\u000a<p>Note that Python supports a syntax that allows you to use only one <code>return</code> statement in your case:</p>\u000a\u000a<pre><code>return A+1 if A &gt; B else A-1\u000a</code></pre>\u000a
p1133
sVquestion_id
p1134
I9191388
sVlast_activity_date
p1135
I1328696756
sVcreation_date
p1136
I1328696756
sVscore
p1137
I73
sVowner
p1138
(dp1139
Vuser_id
p1140
I464709
sVprofile_image
p1141
Vhttps://www.gravatar.com/avatar/0ab3363d257d780bd4c1f0c844b020a2?s=128&d=identicon&r=PG
p1142
sVuser_type
p1143
Vregistered
p1144
sVreputation
p1145
I179050
sVlink
p1146
Vhttp://stackoverflow.com/users/464709/fr%c3%a9d%c3%a9ric-hamidi
p1147
sVdisplay_name
p1148
VFr&#233;d&#233;ric Hamidi
p1149
ssVis_accepted
p1150
I01
sVanswer_id
p1151
I9191474
sa(dp1152
Vbody
p1153
V<p>You need to open the file in <em>binary mode</em> i.e. <code>wb</code> instead of <code>w</code>. If you don't, the end of line characters are auto-converted to OS specific ones. </p>\u000a\u000a<p>Here is an excerpt from Python reference about <a href="http://docs.python.org/library/functions.html#open" rel="noreferrer"><code>open()</code></a>. </p>\u000a\u000a<blockquote>\u000a  <p>The default is to use text mode, which may convert '\u005cn' characters to a platform-specific representation on writing and back on reading. </p>\u000a</blockquote>\u000a
p1154
sVquestion_id
p1155
I9184107
sVlast_activity_date
p1156
I1328650045
sVcreation_date
p1157
I1328649709
sVscore
p1158
I83
sVowner
p1159
(dp1160
Vuser_id
p1161
I553995
sVprofile_image
p1162
Vhttps://www.gravatar.com/avatar/e8d0550cee4d39f864182776f2b256c2?s=128&d=identicon&r=PG
p1163
sVuser_type
p1164
Vregistered
p1165
sVreputation
p1166
I16900
sVlink
p1167
Vhttp://stackoverflow.com/users/553995/praveen-gollakota
p1168
sVaccept_rate
p1169
I100
sVdisplay_name
p1170
VPraveen Gollakota
p1171
ssVis_accepted
p1172
I01
sVlast_edit_date
p1173
I1328650045
sVanswer_id
p1174
I9184137
sa(dp1175
Vbody
p1176
V<p>For surfaces it's a bit different than a list of 3-tuples, you should pass in a grid for the domain in 2d arrays. </p>\u000a\u000a<p>If all you have is a list of 3d points, rather than some function <code>f(x, y) -&gt; z</code>, then you will have a problem because there are multiple ways to triangulate that 3d point cloud into a surface.  </p>\u000a\u000a<p>Here's a smooth surface example:</p>\u000a\u000a<pre><code>import numpy as np\u000afrom mpl_toolkits.mplot3d import Axes3D\u000aimport matplotlib.pyplot as plt\u000aimport random\u000a\u000adef fun(x, y):\u000a  return x**2 + y\u000a\u000afig = plt.figure()\u000aax = fig.add_subplot(111, projection='3d')\u000ax = y = np.arange(-3.0, 3.0, 0.05)\u000aX, Y = np.meshgrid(x, y)\u000azs = np.array([fun(x,y) for x,y in zip(np.ravel(X), np.ravel(Y))])\u000aZ = zs.reshape(X.shape)\u000a\u000aax.plot_surface(X, Y, Z)\u000a\u000aax.set_xlabel('X Label')\u000aax.set_ylabel('Y Label')\u000aax.set_zlabel('Z Label')\u000a\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/OsVns.png" alt="enter image description here"></p>\u000a
p1177
sVquestion_id
p1178
I9170838
sVlast_activity_date
p1179
I1328588122
sVcreation_date
p1180
I1328587764
sVscore
p1181
I55
sVowner
p1182
(dp1183
Vuser_id
p1184
I674039
sVprofile_image
p1185
Vhttps://i.stack.imgur.com/leoFi.gif?s=128&g=1
p1186
sVuser_type
p1187
Vregistered
p1188
sVreputation
p1189
I97604
sVlink
p1190
Vhttp://stackoverflow.com/users/674039/wim
p1191
sVaccept_rate
p1192
I95
sVdisplay_name
p1193
Vwim
p1194
ssVis_accepted
p1195
I01
sVlast_edit_date
p1196
I1328588122
sVanswer_id
p1197
I9170879
sa(dp1198
Vbody
p1199
V<p>Try adding the line <code>c = cv.WaitKey(10)</code> at the bottom of your <code>repeat()</code> method.</p>\u000a\u000a<p>This waits for 10 ms for the user to enter a key.  Even if you're not using the key at all, put this in.  I think there just needed to be some delay, so <code>time.sleep(10)</code> may also work.</p>\u000a\u000a<p>In regards to the camera index, you could do something like this:</p>\u000a\u000a<pre><code>for i in range(3):\u000a    capture = cv.CaptureFromCAM(i)\u000a    if capture: break\u000a</code></pre>\u000a\u000a<p>This will find the index of the first "working" capture device, at least for indices from 0-2.  It's possible there are multiple devices in your computer recognized as a proper capture device.  The only way I know of to confirm you have the right one is manually looking at your light.  Maybe get an image and check its properties?</p>\u000a\u000a<p>To add a user prompt to the process, you could bind a key to switching cameras in your repeat loop:</p>\u000a\u000a<pre><code>import cv\u000a\u000acv.NamedWindow("w1", cv.CV_WINDOW_AUTOSIZE)\u000acamera_index = 0\u000acapture = cv.CaptureFromCAM(camera_index)\u000a\u000adef repeat():\u000a    global capture #declare as globals since we are assigning to them now\u000a    global camera_index\u000a    frame = cv.QueryFrame(capture)\u000a    cv.ShowImage("w1", frame)\u000a    c = cv.WaitKey(10)\u000a    if(c=="n"): #in "n" key is pressed while the popup window is in focus\u000a        camera_index += 1 #try the next camera index\u000a        capture = cv.CaptureFromCAM(camera_index)\u000a        if not capture: #if the next camera index didn't work, reset to 0.\u000a            camera_index = 0\u000a            capture = cv.CaptureFromCAM(camera_index)\u000a\u000awhile True:\u000a    repeat()\u000a</code></pre>\u000a\u000a<p>disclaimer: I haven't tested this so it may have bugs or just not work, but might give you at least an idea of a workaround.</p>\u000a
p1200
sVquestion_id
p1201
I2601194
sVlast_activity_date
p1202
I1328137449
sVcreation_date
p1203
I1270750953
sVscore
p1204
I40
sVowner
p1205
(dp1206
Vuser_id
p1207
I53646
sVprofile_image
p1208
Vhttps://www.gravatar.com/avatar/176aa7774853497078afa7e41cdcf729?s=128&d=identicon&r=PG
p1209
sVuser_type
p1210
Vregistered
p1211
sVreputation
p1212
I1358
sVlink
p1213
Vhttp://stackoverflow.com/users/53646/matt-boehm
p1214
sVaccept_rate
p1215
I100
sVdisplay_name
p1216
VMatt Boehm
p1217
ssVis_accepted
p1218
I01
sVlast_edit_date
p1219
I1328137449
sVanswer_id
p1220
I2602410
sa(dp1221
Vbody
p1222
V<p>Broadcasting is really good for this:</p>\u000a\u000a<pre><code>row_sums = a.sum(axis=1)\u000anew_matrix = a / row_sums[:, numpy.newaxis]\u000a</code></pre>\u000a\u000a<p><code>row_sums[:, numpy.newaxis]</code> reshapes row_sums from being <code>(3,)</code> to being <code>(3, 1)</code>. When you do <code>a / b</code>, <code>a</code> and <code>b</code> are broadcast against each other.</p>\u000a\u000a<p>You can learn more about <strong>broadcasting</strong> <a href="http://docs.scipy.org/doc/numpy/reference/ufuncs.html#broadcasting"><strong>here</strong></a> or even better <a href="http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html?highlight=broadcasting#numpy.doc.broadcasting"><strong>here</strong></a>.</p>\u000a
p1223
sVquestion_id
p1224
I8904694
sVlast_activity_date
p1225
I1326860837
sVcreation_date
p1226
I1326856918
sVscore
p1227
I73
sVowner
p1228
(dp1229
Vuser_id
p1230
I1004096
sVprofile_image
p1231
Vhttps://www.gravatar.com/avatar/d0bd5ec4d97233e5f9f5f74bd6f02357?s=128&d=identicon&r=PG
p1232
sVuser_type
p1233
Vregistered
p1234
sVreputation
p1235
I15501
sVlink
p1236
Vhttp://stackoverflow.com/users/1004096/bi-rico
p1237
sVaccept_rate
p1238
I73
sVdisplay_name
p1239
VBi Rico
p1240
ssVis_accepted
p1241
I01
sVlast_edit_date
p1242
I1326860837
sVanswer_id
p1243
I8904762
sa(dp1244
Vbody
p1245
V<p>This is how I do it:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import traceback\u000a&gt;&gt;&gt; try:\u000a...   int('k')\u000a... except:\u000a...   var = traceback.format_exc()\u000a... \u000a&gt;&gt;&gt; print var\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 2, in &lt;module&gt;\u000aValueError: invalid literal for int() with base 10: 'k'\u000a</code></pre>\u000a\u000a<p>You should however take a look at the <a href="http://docs.python.org/library/traceback.html">traceback documentation</a>, as you might find there more suitable methods, depending to how you want to process your variable afterwards...</p>\u000a
p1246
sVquestion_id
p1247
I8238360
sVlast_activity_date
p1248
I1322033118
sVcreation_date
p1249
I1322033118
sVscore
p1250
I74
sVowner
p1251
(dp1252
Vuser_id
p1253
I146792
sVprofile_image
p1254
Vhttps://www.gravatar.com/avatar/d321b6a6a9c8aeb609111c4ceb516e42?s=128&d=identicon&r=PG
p1255
sVuser_type
p1256
Vregistered
p1257
sVreputation
p1258
I24033
sVlink
p1259
Vhttp://stackoverflow.com/users/146792/mac
p1260
sVaccept_rate
p1261
I88
sVdisplay_name
p1262
Vmac
p1263
ssVis_accepted
p1264
I01
sVanswer_id
p1265
I8238552
sa(dp1266
Vbody
p1267
V<p>The short answer is: <strong>yes, you are correct in your understanding</strong>.</p>\u000a\u000a<p>There's only a catch: the way you normally use nested list comprehension in python code is to operate on multidimensional arrays.</p>\u000a\u000a<p>A typical example is when you operate on matrices:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\u000a&gt;&gt;&gt; [[el - 1 for el in row] for row in matrix]\u000a[[0, 1, 2], [3, 4, 5], [6, 7, 8]]\u000a</code></pre>\u000a\u000a<p>As you can see the "nesting" works by operating on each dimension of the matrix.</p>\u000a\u000a<p>In the examples you provided, it seems that <code>ySet</code> [unfortunate name btw, as <em><a href="http://docs.python.org/library/stdtypes.html#set-types-set-frozenset" rel="noreferrer">sets</a></em> are one of the types provided with python] is just a generic counter, which makes a bit harder to follow what is going on under the hood.</p>\u000a\u000a<p>As for your first example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; rows = ([1, 2, 3], [10, 20, 30])\u000a&gt;&gt;&gt; [(min([row[i] for row in rows]),max([row[i] for row in rows])) for i in range(len(rows[0]))]\u000a[(1, 10), (2, 20), (3, 30)]\u000a</code></pre>\u000a\u000a<p>You might wish to look into the <a href="http://docs.python.org/library/functions.html#zip" rel="noreferrer">zip</a> built-in function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; zip(rows[0], rows[1])\u000a[(1, 10), (2, 20), (3, 30)]\u000a</code></pre>\u000a\u000a<p>or for maximum brevity and elegance:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; zip(*rows)\u000a[(1, 10), (2, 20), (3, 30)]\u000a</code></pre>\u000a\u000a<p>HTH!</p>\u000a
p1268
sVquestion_id
p1269
I8049798
sVlast_activity_date
p1270
I1320755233
sVcreation_date
p1271
I1320754760
sVscore
p1272
I48
sVowner
p1273
(dp1274
Vuser_id
p1275
I146792
sVprofile_image
p1276
Vhttps://www.gravatar.com/avatar/d321b6a6a9c8aeb609111c4ceb516e42?s=128&d=identicon&r=PG
p1277
sVuser_type
p1278
Vregistered
p1279
sVreputation
p1280
I24033
sVlink
p1281
Vhttp://stackoverflow.com/users/146792/mac
p1282
sVaccept_rate
p1283
I88
sVdisplay_name
p1284
Vmac
p1285
ssVis_accepted
p1286
I01
sVlast_edit_date
p1287
I1320755233
sVanswer_id
p1288
I8050243
sa(dp1289
Vbody
p1290
V<p>That's the new syntax for explicit <a href="http://www.python.org/dev/peps/pep-0328/" rel="noreferrer">relative imports</a>. It means import from the current package.</p>\u000a
p1291
sVquestion_id
p1292
I7279810
sVlast_activity_date
p1293
I1314944221
sVcreation_date
p1294
I1314944221
sVscore
p1295
I45
sVowner
p1296
(dp1297
Vuser_id
p1298
I521034
sVprofile_image
p1299
Vhttps://www.gravatar.com/avatar/1d1e92d5a4154a59c4dfb3217067fa74?s=128&d=identicon&r=PG
p1300
sVuser_type
p1301
Vregistered
p1302
sVreputation
p1303
I23659
sVlink
p1304
Vhttp://stackoverflow.com/users/521034/keith
p1305
sVdisplay_name
p1306
VKeith
p1307
ssVis_accepted
p1308
I01
sVanswer_id
p1309
I7279834
sa(dp1310
Vbody
p1311
V<p>There's a good article on the topic in the Python wiki: <a href="http://wiki.python.org/moin/DictionaryKeys">Why Lists Can't Be Dictionary Keys</a>. As explained there:</p>\u000a\u000a<blockquote>\u000a  <p>What would go wrong if you tried to use lists as keys, with the hash as, say, their memory location?</p>\u000a</blockquote>\u000a\u000a<p>It can be done without really breaking any of the requirements, but it leads to unexpected behavior. Lists are generally treated as if their value was derived from their content's values, for instance when checking (in-)equality. Many would - understandably - expect that you can use any list <code>[1, 2]</code> to get the same key, where you'd have to keep around exactly the same list object. But lookup by value breaks as soon as a list used as key is modified, and for lookup by identity requires you to keep around exactly the same list - which isn't requires for any other common list operation (at least none I can think of).</p>\u000a\u000a<p>Other objects such as modules and <code>object</code> make a much bigger deal out of their object identity anyway (when was the last time you had two distinct module objects called <code>sys</code>?), and are compared by that anyway. Therefore, it's less surprising - or even expected - that they, when used as dict keys, compare by identity in that case as well.</p>\u000a
p1312
sVquestion_id
p1313
I7257588
sVlast_activity_date
p1314
I1314798166
sVcreation_date
p1315
I1314797783
sVscore
p1316
I18
sVowner
p1317
(dp1318
Vuser_id
p1319
I395760
sVprofile_image
p1320
Vhttps://www.gravatar.com/avatar/ce3278f4dfbb7287c89d749c95d6f805?s=128&d=identicon&r=PG
p1321
sVuser_type
p1322
Vregistered
p1323
sVreputation
p1324
I75808
sVlink
p1325
Vhttp://stackoverflow.com/users/395760/delnan
p1326
sVaccept_rate
p1327
I75
sVdisplay_name
p1328
Vdelnan
p1329
ssVis_accepted
p1330
I01
sVlast_edit_date
p1331
I1314798166
sVanswer_id
p1332
I7257711
sa(dp1333
Vbody
p1334
V<pre><code>import re\u000a\u000aurl = '&lt;p&gt;Hello World&lt;/p&gt;&lt;a href="http://example.com"&gt;More Examples&lt;/a&gt;&lt;a href="http://example2.com"&gt;Even More Examples&lt;/a&gt;'\u000a\u000aurls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\u005c(\u005c),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', url)\u000a\u000a&gt;&gt;&gt; print urls\u000a['http://example.com', 'http://example2.com']\u000a</code></pre>\u000a
p1335
sVquestion_id
p1336
I6883049
sVlast_activity_date
p1337
I1312029149
sVcreation_date
p1338
I1312028814
sVscore
p1339
I124
sVowner
p1340
(dp1341
Vuser_id
p1342
I324853
sVprofile_image
p1343
Vhttps://www.gravatar.com/avatar/592776162b1ca67b8a69f2c403d3da7b?s=128&d=identicon&r=PG
p1344
sVuser_type
p1345
Vregistered
p1346
sVreputation
p1347
I7357
sVlink
p1348
Vhttp://stackoverflow.com/users/324853/johnjohnga
p1349
sVaccept_rate
p1350
I68
sVdisplay_name
p1351
VJohnJohnGa
p1352
ssVis_accepted
p1353
I01
sVlast_edit_date
p1354
I1312029149
sVanswer_id
p1355
I6883094
sa(dp1356
Vbody
p1357
V<p>Everytime you create a virtualenv with --no-site-packages it installs <code>setuptools</code> or <code>distribute</code>. And the reason <code>wsgiref</code> appears is because python 2.5+ standard library provides egg info to <code>wsgiref</code> lib (and <code>pip</code> does not know if it stdlib or 3rd party package).</p>\u000a\u000a<p>It seems to be solved on Python3.3+: <a href="http://bugs.python.org/issue12218" rel="noreferrer">http://bugs.python.org/issue12218</a></p>\u000a
p1358
sVquestion_id
p1359
I6627035
sVlast_activity_date
p1360
I1310168136
sVcreation_date
p1361
I1310168136
sVscore
p1362
I44
sVowner
p1363
(dp1364
Vuser_id
p1365
I565999
sVprofile_image
p1366
Vhttps://www.gravatar.com/avatar/df1f24dcadec85faaa16c9dc541c0006?s=128&d=identicon&r=PG
p1367
sVuser_type
p1368
Vregistered
p1369
sVreputation
p1370
I11084
sVlink
p1371
Vhttp://stackoverflow.com/users/565999/hugo-tavares
p1372
sVdisplay_name
p1373
VHugo Tavares
p1374
ssVis_accepted
p1375
I01
sVanswer_id
p1376
I6631635
sa(dp1377
Vbody
p1378
V<p>use labelpad parameter:</p>\u000a\u000a<pre><code>pl.xlabel("...", labelpad=20)\u000a</code></pre>\u000a\u000a<p>or set it after:</p>\u000a\u000a<pre><code>ax.xaxis.labelpad = 20\u000a</code></pre>\u000a
p1379
sVquestion_id
p1380
I6406368
sVlast_activity_date
p1381
I1308543216
sVcreation_date
p1382
I1308543216
sVscore
p1383
I95
sVowner
p1384
(dp1385
Vuser_id
p1386
I772649
sVprofile_image
p1387
Vhttps://www.gravatar.com/avatar/03ad01df45fef92e267641197ad00e36?s=128&d=identicon&r=PG
p1388
sVuser_type
p1389
Vregistered
p1390
sVreputation
p1391
I49502
sVlink
p1392
Vhttp://stackoverflow.com/users/772649/hyry
p1393
sVaccept_rate
p1394
I56
sVdisplay_name
p1395
VHYRY
p1396
ssVis_accepted
p1397
I01
sVanswer_id
p1398
I6406750
sa(dp1399
Vbody
p1400
V<p>From the code you showed us, the only thing we can tell is that you trying to create an array from a list that isn't shaped like a multi-dimensional array.  For example</p>\u000a\u000a<pre><code>numpy.array([[1,2], [2, 3, 4]])\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>numpy.array([[1,2], [2, [3, 4]]])\u000a</code></pre>\u000a\u000a<p>will yield this error message, because the shape of the input list isn't a (generalised) "box" that can be turned into a multidimensional array.  So probably <code>UnFilteredDuringExSummaryOfMeansArray</code> contains sequences of different lengths.</p>\u000a\u000a<p><strong>Edit</strong>: Another possible cause for this error message is trying to use a string as an element in an array of type <code>float</code>:</p>\u000a\u000a<pre><code>numpy.array([1.2, "abc"], dtype=float)\u000a</code></pre>\u000a\u000a<p>That is what you are trying according to your edit.  If you really want to have a NumPy array containing both strings and floats, you could use the dtype <code>object</code>, which enables the array to hold arbitrary Python objects:</p>\u000a\u000a<pre><code>numpy.array([1.2, "abc"], dtype=object)\u000a</code></pre>\u000a\u000a<p>Without knowing what your code shall accomplish, I can't judge if this is what you want.</p>\u000a
p1401
sVquestion_id
p1402
I4674473
sVlast_activity_date
p1403
I1294957875
sVcreation_date
p1404
I1294876287
sVscore
p1405
I86
sVowner
p1406
(dp1407
Vuser_id
p1408
I279627
sVprofile_image
p1409
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1410
sVuser_type
p1411
Vregistered
p1412
sVreputation
p1413
I252330
sVlink
p1414
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1415
sVaccept_rate
p1416
I78
sVdisplay_name
p1417
VSven Marnach
p1418
ssVis_accepted
p1419
I01
sVlast_edit_date
p1420
I1294957875
sVanswer_id
p1421
I4675383
sa(dp1422
Vbody
p1423
V<p>You need to install jpeg library first and reinstall your PIL.  For example, I'm using CentOS, to install libjpeg, I run</p>\u000a\u000a<pre><code>sudo yum install -y libjpeg-devel\u000a</code></pre>\u000a\u000a<p>It depends on what kind of linux you are using. And here you have to remove the old PIL</p>\u000a\u000a<pre><code>rm -rf /usr/lib/python2.6/site-packages/PIL-1.1.7-py2.6-linux-x86_64.egg/\u000a</code></pre>\u000a\u000a<p>Then install the PIL</p>\u000a\u000a<pre><code>sudo easy_install PIL\u000a</code></pre>\u000a
p1424
sVquestion_id
p1425
I4632261
sVlast_activity_date
p1426
I1294724886
sVcreation_date
p1427
I1294470335
sVscore
p1428
I54
sVowner
p1429
(dp1430
Vuser_id
p1431
I25077
sVprofile_image
p1432
Vhttps://www.gravatar.com/avatar/3887ea2aae7123801192a4724bf78a96?s=128&d=identicon&r=PG
p1433
sVuser_type
p1434
Vregistered
p1435
sVreputation
p1436
I4644
sVlink
p1437
Vhttp://stackoverflow.com/users/25077/fang-pen-lin
p1438
sVaccept_rate
p1439
I86
sVdisplay_name
p1440
VFang-Pen Lin
p1441
ssVis_accepted
p1442
I01
sVlast_edit_date
p1443
I1294724886
sVanswer_id
p1444
I4632835
sa(dp1445
Vbody
p1446
V<p>Try this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; zip(*[[1,2], [3,4], [5,6]])\u000a[(1, 3, 5), (2, 4, 6)]\u000a</code></pre>\u000a\u000a<p>See <a href="http://docs.python.org/tutorial/controlflow.html#tut-unpacking-arguments">Unpacking Argument Lists</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple:</p>\u000a</blockquote>\u000a\u000a<pre><code>&gt;&gt;&gt; range(3, 6)             # normal call with separate arguments\u000a[3, 4, 5]\u000a&gt;&gt;&gt; args = [3, 6]\u000a&gt;&gt;&gt; range(*args)            # call with arguments unpacked from a list\u000a[3, 4, 5]\u000a</code></pre>\u000a
p1447
sVquestion_id
p1448
I4112265
sVlast_activity_date
p1449
I1289026895
sVcreation_date
p1450
I1289026895
sVscore
p1451
I81
sVowner
p1452
(dp1453
Vuser_id
p1454
I61974
sVprofile_image
p1455
Vhttps://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=128&d=identicon&r=PG
p1456
sVuser_type
p1457
Vregistered
p1458
sVreputation
p1459
I484956
sVlink
p1460
Vhttp://stackoverflow.com/users/61974/mark-byers
p1461
sVdisplay_name
p1462
VMark Byers
p1463
ssVis_accepted
p1464
I01
sVanswer_id
p1465
I4112271
sa(dp1466
Vbody
p1467
V<p>A part answer to your question, including scgi.</p>\u000a\u000a<ul>\u000a<li><a href="http://stackoverflow.com/questions/257481/whats-the-difference-between-scgi-and-wsgi">http://stackoverflow.com/questions/257481/whats-the-difference-between-scgi-and-wsgi</a></li>\u000a<li><a href="http://stackoverflow.com/questions/1747266/is-there-a-speed-difference-between-wsgi-and-fcgi">http://stackoverflow.com/questions/1747266/is-there-a-speed-difference-between-wsgi-and-fcgi</a></li>\u000a<li><a href="http://stackoverflow.com/questions/219110/how-python-web-frameworks-wsgi-and-cgi-fit-together">http://stackoverflow.com/questions/219110/how-python-web-frameworks-wsgi-and-cgi-fit-together</a></li>\u000a</ul>\u000a\u000a<blockquote>\u000a  <p>CGI vs FCGI</p>\u000a</blockquote>\u000a\u000a<p>Lazy and not writing it on my own. From the wikipedia: <a href="http://en.wikipedia.org/wiki/FastCGI">http://en.wikipedia.org/wiki/FastCGI</a></p>\u000a\u000a<p><em>Instead of creating a new process for each request, FastCGI uses persistent processes to handle such requests. Multiple processes can configured, increasing stability and scalability. Each individual FastCGI process can handle many requests over its lifetime, thereby avoiding the overhead of per-request process creation and termination</em></p>\u000a
p1468
sVquestion_id
p1469
I3937224
sVlast_activity_date
p1470
I1287088689
sVcreation_date
p1471
I1287087879
sVscore
p1472
I32
sVowner
p1473
(dp1474
Vuser_id
p1475
I432745
sVprofile_image
p1476
Vhttps://www.gravatar.com/avatar/61d5932d030d57eb9948756af74a357f?s=128&d=identicon&r=PG
p1477
sVuser_type
p1478
Vregistered
p1479
sVreputation
p1480
I44346
sVlink
p1481
Vhttp://stackoverflow.com/users/432745/pyfunc
p1482
sVdisplay_name
p1483
Vpyfunc
p1484
ssVis_accepted
p1485
I01
sVlast_edit_date
p1486
I1287088689
sVanswer_id
p1487
I3937236
sa(dp1488
Vbody
p1489
V<p>You can write</p>\u000a\u000a<pre><code>i = 5 + Tup()[0]\u000a</code></pre>\u000a\u000a<p>Tuples can be indexed just like lists.</p>\u000a\u000a<p>The main difference between tuples and lists is that tuples are immutable - you can't set the elements of a tuple to different values, or add or remove elements like you can from a list. But other than that, in most situations, they work pretty much the same.</p>\u000a
p1490
sVquestion_id
p1491
I3136059
sVlast_activity_date
p1492
I1277758610
sVcreation_date
p1493
I1277758610
sVscore
p1494
I81
sVowner
p1495
(dp1496
Vuser_id
p1497
I56541
sVprofile_image
p1498
Vhttps://i.stack.imgur.com/C6rHm.png?s=128&g=1
p1499
sVuser_type
p1500
Vregistered
p1501
sVreputation
p1502
I76997
sVlink
p1503
Vhttp://stackoverflow.com/users/56541/david-z
p1504
sVaccept_rate
p1505
I81
sVdisplay_name
p1506
VDavid Z
p1507
ssVis_accepted
p1508
I01
sVanswer_id
p1509
I3136069
sa(dp1510
Vbody
p1511
V<p>You cannot query against model methods or properties. Either use the criteria within it in the query, or filter in Python using a list comprehension or genex.</p>\u000a
p1512
sVquestion_id
p1513
I2276768
sVlast_activity_date
p1514
I1266358923
sVcreation_date
p1515
I1266358923
sVscore
p1516
I26
sVowner
p1517
(dp1518
Vuser_id
p1519
I20862
sVprofile_image
p1520
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p1521
sVuser_type
p1522
Vregistered
p1523
sVreputation
p1524
I481018
sVlink
p1525
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p1526
sVaccept_rate
p1527
I60
sVdisplay_name
p1528
VIgnacio Vazquez-Abrams
p1529
ssVis_accepted
p1530
I01
sVanswer_id
p1531
I2276826
sa(dp1532
Vbody
p1533
V<p>This is why you should always import the base <code>datetime</code> module: <code>import datetime</code>, rather than the <code>datetime</code> class within that module: <code>from datetime import datetime</code>. </p>\u000a\u000a<p>The other mistake you have made is to actually call the function in the default, with the <code>()</code>. This means that all models will get the date <em>at the time the class is first defined</em> - so if your server stays up for days or weeks without restarting Apache, all elements will get same the initial date.</p>\u000a\u000a<p>So the field should be:</p>\u000a\u000a<pre><code>date = models.DateField(_("Date"), default=datetime.date.today)\u000a</code></pre>\u000a
p1534
sVquestion_id
p1535
I2029295
sVlast_activity_date
p1536
I1262978962
sVcreation_date
p1537
I1262978962
sVscore
p1538
I92
sVowner
p1539
(dp1540
Vuser_id
p1541
I104349
sVprofile_image
p1542
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p1543
sVuser_type
p1544
Vregistered
p1545
sVreputation
p1546
I356767
sVlink
p1547
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p1548
sVaccept_rate
p1549
I86
sVdisplay_name
p1550
VDaniel Roseman
p1551
ssVis_accepted
p1552
I01
sVanswer_id
p1553
I2030142
sa(dp1554
Vbody
p1555
V<p>It should be enough to create an empty virtualenv and then copy the contents of the <code>.../site-packages/PyQt4</code> directories into it.</p>\u000a\u000a<p>I suggest to install PyQt4 once globally, make a copy of the directory, uninstall it and then use this trick to create VEs.</p>\u000a
p1556
sVquestion_id
p1557
I1961997
sVlast_activity_date
p1558
I1261779460
sVcreation_date
p1559
I1261779460
sVscore
p1560
I44
sVowner
p1561
(dp1562
Vuser_id
p1563
I34088
sVprofile_image
p1564
Vhttps://www.gravatar.com/avatar/8a4d6f03a8879432d8563aefbf48e787?s=128&d=identicon&r=PG
p1565
sVuser_type
p1566
Vregistered
p1567
sVreputation
p1568
I215588
sVlink
p1569
Vhttp://stackoverflow.com/users/34088/aaron-digulla
p1570
sVaccept_rate
p1571
I76
sVdisplay_name
p1572
VAaron Digulla
p1573
ssVis_accepted
p1574
I01
sVanswer_id
p1575
I1962076
sa(dp1576
Vbody
p1577
V<pre><code>import locale\u000alocale.setlocale( locale.LC_ALL, 'en_US.UTF-8' ) \u000alocale.atoi('1,000,000')\u000a# 1000000\u000alocale.atof('1,000,000.53')\u000a# 1000000.53\u000a</code></pre>\u000a
p1578
sVquestion_id
p1579
I1779288
sVlast_activity_date
p1580
I1258912641
sVcreation_date
p1581
I1258910411
sVscore
p1582
I69
sVowner
p1583
(dp1584
Vuser_id
p1585
I190597
sVprofile_image
p1586
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p1587
sVuser_type
p1588
Vregistered
p1589
sVreputation
p1590
I425294
sVlink
p1591
Vhttp://stackoverflow.com/users/190597/unutbu
p1592
sVaccept_rate
p1593
I88
sVdisplay_name
p1594
Vunutbu
p1595
ssVis_accepted
p1596
I01
sVlast_edit_date
p1597
I1258912641
sVanswer_id
p1598
I1779324
sa(dp1599
Vbody
p1600
V<pre><code>audio /= np.max(np.abs(audio),axis=0)\u000aimage *= (255.0/image.max())\u000a</code></pre>\u000a\u000a<p>Using <code>/=</code> and <code>*=</code> allows you to eliminate an intermediate temporary array, thus saving some memory.  Multiplication is less expensive than division, so </p>\u000a\u000a<pre><code>image *= 255.0/image.max()    # Uses 1 division and image.size multiplications\u000a</code></pre>\u000a\u000a<p>is marginally faster than </p>\u000a\u000a<pre><code>image /= image.max()/255.0    # Uses 1+image.size divisions\u000a</code></pre>\u000a\u000a<p>Since we are using basic numpy methods here, I think this is about as efficient a solution in numpy as can be.</p>\u000a
p1601
sVquestion_id
p1602
I1735025
sVlast_activity_date
p1603
I1258252340
sVcreation_date
p1604
I1258222978
sVscore
p1605
I59
sVowner
p1606
(dp1607
Vuser_id
p1608
I190597
sVprofile_image
p1609
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p1610
sVuser_type
p1611
Vregistered
p1612
sVreputation
p1613
I425294
sVlink
p1614
Vhttp://stackoverflow.com/users/190597/unutbu
p1615
sVaccept_rate
p1616
I88
sVdisplay_name
p1617
Vunutbu
p1618
ssVis_accepted
p1619
I01
sVlast_edit_date
p1620
I1258252340
sVanswer_id
p1621
I1735122
sa(dp1622
Vbody
p1623
V<p>If you are importing the function, you can use <a href="http://docs.python.org/library/inspect.html#inspect.getsource" rel="noreferrer"><code>inspect.getsource</code></a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import re\u000a&gt;&gt;&gt; import inspect\u000a&gt;&gt;&gt; print inspect.getsource(re.compile)\u000adef compile(pattern, flags=0):\u000a    "Compile a regular expression pattern, returning a pattern object."\u000a    return _compile(pattern, flags)\u000a</code></pre>\u000a\u000a<p>This <em>will</em> work  in the interactive prompt, but apparently only on objects that are imported (not objects defined within the interactive prompt). And of course it will only work if Python can find the source code (so not on built-in objects, C libs, .pyc files, etc)</p>\u000a
p1624
sVquestion_id
p1625
I1562759
sVlast_activity_date
p1626
I1255466478
sVcreation_date
p1627
I1255466478
sVscore
p1628
I70
sVowner
p1629
(dp1630
Vuser_id
p1631
I43089
sVprofile_image
p1632
Vhttps://www.gravatar.com/avatar/cbdcba7870660c048cf9d6db74a3ef29?s=128&d=identicon&r=PG
p1633
sVuser_type
p1634
Vregistered
p1635
sVreputation
p1636
I124007
sVlink
p1637
Vhttp://stackoverflow.com/users/43089/triptych
p1638
sVaccept_rate
p1639
I57
sVdisplay_name
p1640
VTriptych
p1641
ssVis_accepted
p1642
I01
sVanswer_id
p1643
I1562795
sa(dp1644
Vbody
p1645
V<p>Yes. You do it like this:</p>\u000a\u000a<pre><code>def method(**kwargs):\u000a  print kwargs\u000a\u000akeywords = {'keyword1': 'foo', 'keyword2': 'bar'}\u000amethod(keyword1='foo', keyword2='bar')\u000amethod(**keywords)\u000a</code></pre>\u000a\u000a<p>Running this in Python confirms these produce identical results:</p>\u000a\u000a<pre><code>{'keyword2': 'bar', 'keyword1': 'foo'}\u000a{'keyword2': 'bar', 'keyword1': 'foo'}\u000a</code></pre>\u000a
p1646
sVquestion_id
p1647
I1496346
sVlast_activity_date
p1648
I1254291101
sVcreation_date
p1649
I1254291101
sVscore
p1650
I86
sVowner
p1651
(dp1652
Vuser_id
p1653
I157237
sVprofile_image
p1654
Vhttps://www.gravatar.com/avatar/7c6b50948624b1ccfba1872bc82ecaed?s=128&d=identicon&r=PG
p1655
sVuser_type
p1656
Vregistered
p1657
sVreputation
p1658
I65911
sVlink
p1659
Vhttp://stackoverflow.com/users/157237/peter
p1660
sVaccept_rate
p1661
I97
sVdisplay_name
p1662
VPeter
p1663
ssVis_accepted
p1664
I01
sVanswer_id
p1665
I1496355
sa(dp1666
Vbody
p1667
V<p>Actually pprint seems to sort the keys for you under python2.5</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from pprint import pprint\u000a&gt;&gt;&gt; mydict = {'a':1, 'b':2, 'c':3}\u000a&gt;&gt;&gt; pprint(mydict)\u000a{'a': 1, 'b': 2, 'c': 3}\u000a&gt;&gt;&gt; mydict = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\u000a&gt;&gt;&gt; pprint(mydict)\u000a{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\u000a&gt;&gt;&gt; d = dict(zip("kjihgfedcba",range(11)))\u000a&gt;&gt;&gt; pprint(d)\u000a{'a': 10,\u000a 'b': 9,\u000a 'c': 8,\u000a 'd': 7,\u000a 'e': 6,\u000a 'f': 5,\u000a 'g': 4,\u000a 'h': 3,\u000a 'i': 2,\u000a 'j': 1,\u000a 'k': 0}\u000a</code></pre>\u000a\u000a<p>But not always under python 2.4</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from pprint import pprint\u000a&gt;&gt;&gt; mydict = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}\u000a&gt;&gt;&gt; pprint(mydict)\u000a{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}\u000a&gt;&gt;&gt; d = dict(zip("kjihgfedcba",range(11)))\u000a&gt;&gt;&gt; pprint(d)\u000a{'a': 10,\u000a 'b': 9,\u000a 'c': 8,\u000a 'd': 7,\u000a 'e': 6,\u000a 'f': 5,\u000a 'g': 4,\u000a 'h': 3,\u000a 'i': 2,\u000a 'j': 1,\u000a 'k': 0}\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a\u000a<p>Reading the source code of pprint.py (2.5) it does sort the dictionary using</p>\u000a\u000a<pre><code>items = object.items()\u000aitems.sort()\u000a</code></pre>\u000a\u000a<p>for multiline or this for single line</p>\u000a\u000a<pre><code>for k, v in sorted(object.items()):\u000a</code></pre>\u000a\u000a<p>before it attempts to print anything, so if your dictionary sorts properly like that then it should pprint properly.  In 2.4 the second sorted() is missing (didn't exist then) so objects printed on a single line won't be sorted.</p>\u000a\u000a<p>So the answer appears to be use python2.5, though this doesn't quite explain your output in the question.</p>\u000a
p1668
sVquestion_id
p1669
I1479649
sVlast_activity_date
p1670
I1253915727
sVcreation_date
p1671
I1253915727
sVscore
p1672
I61
sVowner
p1673
(dp1674
Vuser_id
p1675
I164234
sVprofile_image
p1676
Vhttps://www.gravatar.com/avatar/6b34a2a81515583dc95e5c0809db06bb?s=128&d=identicon&r=PG
p1677
sVuser_type
p1678
Vregistered
p1679
sVreputation
p1680
I32409
sVlink
p1681
Vhttp://stackoverflow.com/users/164234/nick-craig-wood
p1682
sVaccept_rate
p1683
I80
sVdisplay_name
p1684
VNick Craig-Wood
p1685
ssVis_accepted
p1686
I01
sVanswer_id
p1687
I1479748
sa(dp1688
Vbody
p1689
V<p>Python (like Java, C, C++, .NET) uses string pooling / interning. The interpreter realises that "hello" is the same as "hello", so it optimizes and uses the same location in memory.</p>\u000a\u000a<p>Another goodie: "hell" + "o" is "hello" ==> True</p>\u000a
p1690
sVquestion_id
p1691
I1392433
sVlast_activity_date
p1692
I1252397892
sVcreation_date
p1693
I1252394109
sVscore
p1694
I80
sVowner
p1695
(dp1696
Vuser_id
p1697
I82322
sVprofile_image
p1698
Vhttps://www.gravatar.com/avatar/200b3a948797197905fb4c1d492ca2f7?s=128&d=identicon&r=PG
p1699
sVuser_type
p1700
Vregistered
p1701
sVreputation
p1702
I35090
sVlink
p1703
Vhttp://stackoverflow.com/users/82322/carl
p1704
sVaccept_rate
p1705
I100
sVdisplay_name
p1706
Vcarl
p1707
ssVis_accepted
p1708
I01
sVlast_edit_date
p1709
I1252397892
sVanswer_id
p1710
I1392440
sa(dp1711
Vbody
p1712
V<p>After weeks of testing and reading the Django source code, I've found the answer to my own question:</p>\u000a\u000a<p><strong>Transactions</strong></p>\u000a\u000a<p>Django's default autocommit behavior still holds true for my threaded function. However, it states in the Django docs:</p>\u000a\u000a<blockquote>\u000a  <p>As soon as you perform an action that needs to write to the database, Django produces the INSERT/UPDATE/DELETE statements and then does the COMMIT. There\u2019s no implicit ROLLBACK.</p>\u000a</blockquote>\u000a\u000a<p>That last sentence is very literal. It DOES NOT issue a ROLLBACK command unless something in Django has set the dirty flag. Since my function was only doing SELECT statements it never set the dirty flag and didn't trigger a COMMIT.</p>\u000a\u000a<p>This goes against the fact that PostgreSQL thinks the transaction requires a ROLLBACK because Django issued a SET command for the timezone. In reviewing the logs, I threw myself off because I kept seeing these ROLLBACK statements and assumed Django's transaction management was the source. Turns out it's not, and that's OK.</p>\u000a\u000a<p><strong>Connections</strong></p>\u000a\u000a<p>The connection management is where things do get tricky. It turns out Django uses <code>signals.request_finished.connect(close_connection)</code> to close the database connection it normally uses. Since nothing normally happens in Django that doesn't involve a request, you take this behavior for granted.</p>\u000a\u000a<p>In my case, though, there was no request because the job was scheduled. No request means no signal. No signal means the database connection was never closed.</p>\u000a\u000a<p>Going back to transactions, it turns out that simply issuing a call to <code>connection.close()</code> in the absence of any changes to the transaction management issues the ROLLBACK statement in the PostgreSQL log that I'd been looking for.</p>\u000a\u000a<p><strong>Solution</strong></p>\u000a\u000a<p>The solution is to allow the normal Django transaction management to proceed as normal and to simply close the connection one of three ways:</p>\u000a\u000a<ol>\u000a<li>Write a decorator that closes the connection and wrap the necessary functions in it.</li>\u000a<li>Hook into the existing request signals to have Django close the connection.</li>\u000a<li>Close the connection manually at the end of the function.</li>\u000a</ol>\u000a\u000a<p>Any of those three will (and do) work.</p>\u000a\u000a<p>This has driven me crazy for weeks. I hope this helps someone else in the future!</p>\u000a
p1713
sVquestion_id
p1714
I1303654
sVlast_activity_date
p1715
I1251458525
sVcreation_date
p1716
I1251458525
sVscore
p1717
I91
sVowner
p1718
(dp1719
Vuser_id
p1720
I114672
sVprofile_image
p1721
Vhttps://www.gravatar.com/avatar/ff53dd3a5ebae199beb6e0269c93f70e?s=128&d=identicon&r=PG
p1722
sVuser_type
p1723
Vregistered
p1724
sVreputation
p1725
I27106
sVlink
p1726
Vhttp://stackoverflow.com/users/114672/gabriel-hurley
p1727
sVaccept_rate
p1728
I92
sVdisplay_name
p1729
VGabriel Hurley
p1730
ssVis_accepted
p1731
I01
sVanswer_id
p1732
I1346401
sa(dp1733
Vbody
p1734
V<p>Some form of rounding is often unavoidable when dealing with floating point numbers.  This is because numbers that you can express exactly in base 10 cannot always be expressed exactly in base 2 (which your computer uses).</p>\u000a\u000a<p>For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; .1\u000a0.10000000000000001\u000a</code></pre>\u000a\u000a<p>In this case, you're seeing .1 converted to a string using <code>repr</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; repr(.1)\u000a'0.10000000000000001'\u000a</code></pre>\u000a\u000a<p>I believe python chops off the last few digits when you use str() in order to work around this problem, but it's a partial workaround that doesn't substitute for understanding what's going on.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; str(.1)\u000a'0.1'\u000a</code></pre>\u000a\u000a<p>I'm not sure exactly what problems "rounding" is causing you.  Perhaps you would do better with string formatting as a way to more precisely control your output?</p>\u000a\u000a<p>e.g.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; '%.5f' % .1\u000a'0.10000'\u000a&gt;&gt;&gt; '%.5f' % .12345678\u000a'0.12346'\u000a</code></pre>\u000a\u000a<p><a href="http://docs.python.org/library/string.html#formatstrings" rel="noreferrer">Documentation here</a>.</p>\u000a
p1735
sVquestion_id
p1736
I1317558
sVlast_activity_date
p1737
I1250993413
sVcreation_date
p1738
I1250993413
sVscore
p1739
I79
sVowner
p1740
(dp1741
Vuser_id
p1742
I15154
sVprofile_image
p1743
Vhttps://www.gravatar.com/avatar/cdca0dc45085388c1b753104ce4c8648?s=128&d=identicon&r=PG
p1744
sVuser_type
p1745
Vregistered
p1746
sVreputation
p1747
I24695
sVlink
p1748
Vhttp://stackoverflow.com/users/15154/john-fouhy
p1749
sVaccept_rate
p1750
I88
sVdisplay_name
p1751
VJohn Fouhy
p1752
ssVis_accepted
p1753
I01
sVanswer_id
p1754
I1317578
sa(dp1755
Vbody
p1756
V<p>There are several different answers I can give here, from your specific question to more general concerns. so from most specific to most general:</p>\u000a\u000a<p><strong>Q.</strong> Can you put multiple statements in a lambda?</p>\u000a\u000a<p><strong>A.</strong> No.  But you don't actually need to use a lambda.  You can put the statements in a <code>def</code> instead. ie:</p>\u000a\u000a<pre><code>def second_lowest(l):\u000a    l.sort()\u000a    return l[1]\u000a\u000amap(second_lowest, lst)\u000a</code></pre>\u000a\u000a<p><strong>Q.</strong> Can you get the second lowest item from a lambda by sorting the list?</p>\u000a\u000a<p><strong>A.</strong> Yes.  As <a href="http://stackoverflow.com/questions/862412/is-it-possible-to-have-multiple-statements-in-a-python-lambda-expression/862430#862430">alex's answer</a> poinst out, <code>sorted()</code> is a version of sort that creates a new list, rather than sorting in-place, and can be chained.  Note that this is probably what you should be using - it's bad practice for your map to have side effects on the original list.</p>\u000a\u000a<p><strong>Q.</strong> How should I get the second lowest item from each list in a sequence of lists.</p>\u000a\u000a<p><strong>A.</strong> <code>sorted(l)[1]</code> is not actually the best way for this.  It has O(N log(N)) complexity, while an O(n) solution exists.  This can be found in the heapq module.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import  heapq\u000a&gt;&gt;&gt; l = [5,2,6,8,3,5]\u000a&gt;&gt;&gt; heapq.nsmallest(l, 2)\u000a[2, 3]\u000a</code></pre>\u000a\u000a<p>So just use:</p>\u000a\u000a<pre><code>map(lambda x: heapq.nsmallest(x,2)[1],  list_of_lists)\u000a</code></pre>\u000a\u000a<p>It's also usually considered clearer to use a list comprehension, which avoids the lambda altogether:</p>\u000a\u000a<pre><code>[heapq.nsmallest(x,2)[1] for x in list_of_lists]\u000a</code></pre>\u000a
p1757
sVquestion_id
p1758
I862412
sVlast_activity_date
p1759
I1242295351
sVcreation_date
p1760
I1242294937
sVscore
p1761
I76
sVowner
p1762
(dp1763
Vuser_id
p1764
I9493
sVprofile_image
p1765
Vhttps://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=128&d=identicon&r=PG
p1766
sVuser_type
p1767
Vregistered
p1768
sVreputation
p1769
I73471
sVlink
p1770
Vhttp://stackoverflow.com/users/9493/brian
p1771
sVdisplay_name
p1772
VBrian
p1773
ssVis_accepted
p1774
I01
sVlast_edit_date
p1775
I1242295351
sVanswer_id
p1776
I862498
sa(dp1777
Vbody
p1778
V<p>you can use <a href="http://docs.python.org/library/stdtypes.html?highlight=index#str.index" rel="noreferrer"><code>str.index</code></a> too:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 'sdfasdf'.index('cc')\u000aTraceback (most recent call last):\u000a  File "&lt;pyshell#144&gt;", line 1, in &lt;module&gt;\u000a    'sdfasdf'.index('cc')\u000aValueError: substring not found\u000a&gt;&gt;&gt; 'sdfasdf'.index('df')\u000a1\u000a</code></pre>\u000a
p1779
sVquestion_id
p1780
I674764
sVlast_activity_date
p1781
I1237834824
sVcreation_date
p1782
I1237834824
sVscore
p1783
I39
sVowner
p1784
(dp1785
Vuser_id
p1786
I12855
sVprofile_image
p1787
Vhttps://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG
p1788
sVuser_type
p1789
Vregistered
p1790
sVreputation
p1791
I142797
sVlink
p1792
Vhttp://stackoverflow.com/users/12855/silentghost
p1793
sVaccept_rate
p1794
I86
sVdisplay_name
p1795
VSilentGhost
p1796
ssVis_accepted
p1797
I01
sVanswer_id
p1798
I674775
sa(dp1799
Vbody
p1800
V<p>In any of your vim windows, type something like this:</p>\u000a\u000a<pre><code>for x in range(1,10):\u000a    print '-&gt; %d' % x\u000a</code></pre>\u000a\u000a<p>Visually select both of those lines (V to start visual mode), and type the following:</p>\u000a\u000a<pre><code>:!python\u000a</code></pre>\u000a\u000a<p>Because you pressed ':' in visual mode, that will end up looking like:</p>\u000a\u000a<pre><code>:'&lt;,'&gt;!python\u000a</code></pre>\u000a\u000a<p>Hit enter and the selection is replaced by the output of the <code>print</code> statements. You could easily turn it into a mapping:</p>\u000a\u000a<pre><code>:vnoremap &lt;f5&gt; :!python&lt;CR&gt;\u000a</code></pre>\u000a
p1801
sVquestion_id
p1802
I501585
sVlast_activity_date
p1803
I1233526632
sVcreation_date
p1804
I1233526632
sVscore
p1805
I158
sVowner
p1806
(dp1807
Vuser_id
p1808
I28835
sVprofile_image
p1809
Vhttps://www.gravatar.com/avatar/34a7a029578b79cf4afa596ad4e3e72b?s=128&d=identicon&r=PG
p1810
sVuser_type
p1811
Vregistered
p1812
sVreputation
p1813
I45642
sVlink
p1814
Vhttp://stackoverflow.com/users/28835/too-much-php
p1815
sVaccept_rate
p1816
I59
sVdisplay_name
p1817
Vtoo much php
p1818
ssVis_accepted
p1819
I01
sVanswer_id
p1820
I501698
sa(dp1821
Vbody
p1822
V<p>Focus on <code>urllib2</code> for this, it works quite well.  Don't mess with <code>httplib</code>, it's not the top-level API.</p>\u000a\u000a<p>What you're noting is that <code>urllib2</code> doesn't follow the redirect.</p>\u000a\u000a<p>You need to fold in an instance of <code>HTTPRedirectHandler</code> that will catch and follow the redirects.</p>\u000a\u000a<p>Further, you may want to subclass the default <code>HTTPRedirectHandler</code> to capture information that you'll then check as part of your unit testing.</p>\u000a\u000a<pre><code>cookie_handler= urllib2.HTTPCookieProcessor( self.cookies )\u000aredirect_handler= HTTPRedirectHandler()\u000aopener = urllib2.build_opener(redirect_handler,cookie_handler)\u000a</code></pre>\u000a\u000a<p>You can then use this <code>opener</code> object to POST and GET, handling redirects and cookies properly.</p>\u000a\u000a<p>You may want to add your own subclass of <code>HTTPHandler</code> to capture and log various error codes, also.</p>\u000a
p1823
sVquestion_id
p1824
I301924
sVlast_activity_date
p1825
I1227106367
sVcreation_date
p1826
I1227106367
sVscore
p1827
I31
sVowner
p1828
(dp1829
Vuser_id
p1830
I10661
sVprofile_image
p1831
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1832
sVuser_type
p1833
Vregistered
p1834
sVreputation
p1835
I277525
sVlink
p1836
Vhttp://stackoverflow.com/users/10661/s-lott
p1837
sVaccept_rate
p1838
I92
sVdisplay_name
p1839
VS.Lott
p1840
ssVis_accepted
p1841
I01
sVanswer_id
p1842
I302099
sa(dp1843
Vbody
p1844
V<p>Since nobody pointed out pychecker, pylint and similar tools, I will: pychecker and pylint are tools that can help you find incorrect assumptions (about function signatures, object attributes, etc.) They won't find everything that a compiler might find in a statically typed language -- but they can find problems that such compilers for such languages can't find, too.</p>\u000a\u000a<p>Python (and any dynamically typed language) is fundamentally different in terms of the errors you're likely to cause and how you would detect and fix them. It has definite downsides as well as upsides, but many (including me) would argue that in Python's case, the ease of writing code (and the ease of making it structurally sound) and of modifying code <em>without</em> breaking API compatibility (adding new optional arguments, providing different objects that have the same set of methods and attributes) make it suitable just fine for large codebases.</p>\u000a
p1845
sVquestion_id
p1846
I236407
sVlast_activity_date
p1847
I1224947110
sVcreation_date
p1848
I1224947110
sVscore
p1849
I21
sVowner
p1850
(dp1851
Vuser_id
p1852
I17624
sVprofile_image
p1853
Vhttps://www.gravatar.com/avatar/90285a816eda046ff55a0dcacc0c5ee8?s=128&d=identicon&r=PG
p1854
sVuser_type
p1855
Vregistered
p1856
sVreputation
p1857
I69283
sVlink
p1858
Vhttp://stackoverflow.com/users/17624/thomas-wouters
p1859
sVdisplay_name
p1860
VThomas Wouters
p1861
ssVis_accepted
p1862
I01
sVanswer_id
p1863
I236537
sa(dp1864
Vbody
p1865
V<p>As Guido says in his <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="noreferrer">The fate of reduce() in Python 3000</a> post:</p>\u000a\u000a<blockquote>\u000a  <p>So now reduce(). This is actually the one I've always hated most, because, apart from a few examples involving + or *, almost every time I see a reduce() call with a non-trivial function argument, I need to grab pen and paper to diagram what's actually being fed into that function before I understand what the reduce() is supposed to do. So in my mind, the applicability of reduce() is pretty much limited to associative operators, and in all other cases it's better to write out the accumulation loop explicitly. </p>\u000a</blockquote>\u000a\u000a<p>There is an excellent example of a confusing <code>reduce</code> in the <a href="http://www.amk.ca/python/writing/functional" rel="noreferrer">Functional Programming HOWTO</a> article:</p>\u000a\u000a<blockquote>\u000a  <p>Quick, what's the following code doing?</p>\u000a\u000a<pre><code>total = reduce(lambda a, b: (0, a[1] + b[1]), items)[1]\u000a</code></pre>\u000a  \u000a  <p>You can figure it out, but it takes time to disentangle the expression to figure out \u000a  what's going on. Using a short nested def statements makes things a little bit better:</p>\u000a\u000a<pre><code>def combine (a, b):\u000a    return 0, a[1] + b[1]\u000a\u000atotal = reduce(combine, items)[1]\u000a</code></pre>\u000a  \u000a  <p>But it would be best of all if I had simply used a for loop:</p>\u000a\u000a<pre><code>total = 0\u000afor a, b in items:\u000a    total += b\u000a</code></pre>\u000a  \u000a  <p>Or the sum() built-in and a generator expression:</p>\u000a\u000a<pre><code>total = sum(b for a,b in items)\u000a</code></pre>\u000a  \u000a  <p>Many uses of reduce() are clearer when written as for loops.</p>\u000a</blockquote>\u000a
p1866
sVquestion_id
p1867
I181543
sVlast_activity_date
p1868
I1223454065
sVcreation_date
p1869
I1223451732
sVscore
p1870
I60
sVowner
p1871
(dp1872
Vuser_id
p1873
I18745
sVprofile_image
p1874
Vhttps://www.gravatar.com/avatar/8ba0489ea90652c08d1406f2afe2e0e2?s=128&d=identicon&r=PG
p1875
sVuser_type
p1876
Vregistered
p1877
sVreputation
p1878
I25309
sVlink
p1879
Vhttp://stackoverflow.com/users/18745/dzinx
p1880
sVaccept_rate
p1881
I80
sVdisplay_name
p1882
VDzinX
p1883
ssVis_accepted
p1884
I01
sVlast_edit_date
p1885
I1223454065
sVanswer_id
p1886
I181706
sa(dp1887
Vbody
p1888
V<p>Personally, I've played with several of the built-in options on an XML-heavy project and have settled on <a href="http://docs.python.org/lib/module-xml.dom.pulldom.html" rel="noreferrer">pulldom</a> as the best choice for less complex documents.</p>\u000a\u000a<p>Especially for small simple stuff, I like the event-driven theory of parsing rather than setting up a whole slew of callbacks for a relatively simple structure.  <a href="http://www.prescod.net/python/pulldom.html" rel="noreferrer">Here is a good quick discussion of how to use the API</a>.</p>\u000a\u000a<p>What I like: you can handle the parsing in a <code>for</code> loop rather than using callbacks.  You also delay full parsing (the "pull" part) and only get additional detail when you call <code>expandNode()</code>.  This satisfies my general requirement for "responsible" efficiency without sacrificing ease of use and simplicity.</p>\u000a
p1889
sVquestion_id
p1890
I337
sVlast_activity_date
p1891
I1217649694
sVcreation_date
p1892
I1217649694
sVscore
p1893
I18
sVowner
p1894
(dp1895
Vuser_id
p1896
I59
sVprofile_image
p1897
Vhttps://www.gravatar.com/avatar/3d5932182385c3cceb7b48a6ebf25d83?s=128&d=identicon&r=PG
p1898
sVuser_type
p1899
Vregistered
p1900
sVreputation
p1901
I3607
sVlink
p1902
Vhttp://stackoverflow.com/users/59/saint-groceon
p1903
sVdisplay_name
p1904
Vsaint_groceon
p1905
ssVis_accepted
p1906
I01
sVanswer_id
p1907
I342
sasVquota_max
p1908
I300
sVquota_remaining
p1909
I143
s.