(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p><code>df.iloc[i]</code> returns the <code>ith</code> row of <code>df</code>. <code>i</code> does not refer to the index label, <code>i</code> is a 0-based index.</p>\u000a\u000a<p>In contrast, <strong>the attribute <code>index</code> returns actual index labels</strong>, not numeric row-indices:</p>\u000a\u000a<pre><code>df[df['BoolCol'] == True].index.tolist()\u000a</code></pre>\u000a\u000a<p>or equivalently,</p>\u000a\u000a<pre><code>df[df['BoolCol']].index.tolist()\u000a</code></pre>\u000a\u000a<p>You can see the difference quite clearly by playing with a DataFrame with\u000aan "unusual" index:</p>\u000a\u000a<pre><code>df = pd.DataFrame({'BoolCol': [True, False, False, True, True]},\u000a       index=[10,20,30,40,50])\u000a\u000aIn [53]: df\u000aOut[53]: \u000a   BoolCol\u000a10    True\u000a20   False\u000a30   False\u000a40    True\u000a50    True\u000a\u000a[5 rows x 1 columns]\u000a\u000aIn [54]: df[df['BoolCol']].index.tolist()\u000aOut[54]: [10, 40, 50]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>If you want to use the index labels</strong>, </p>\u000a\u000a<pre><code>In [56]: idx = df[df['BoolCol']].index.tolist()\u000a\u000aIn [57]: idx\u000aOut[57]: [10, 40, 50]\u000a</code></pre>\u000a\u000a<p><strong>then you can select the rows using <code>loc</code> instead of <code>iloc</code></strong>:</p>\u000a\u000a<pre><code>In [58]: df.loc[idx]\u000aOut[58]: \u000a   BoolCol\u000a10    True\u000a40    True\u000a50    True\u000a\u000a[3 rows x 1 columns]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Note that <strong><code>loc</code> can also accept boolean arrays</strong>:</p>\u000a\u000a<pre><code>In [55]: df.loc[df['BoolCol']]\u000aOut[55]: \u000a   BoolCol\u000a10    True\u000a40    True\u000a50    True\u000a\u000a[3 rows x 1 columns]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>If you have a boolean array, <code>mask</code>, and need ordinal index values, you can compute them using <code>np.flatnonzero</code></strong>:</p>\u000a\u000a<pre><code>In [110]: np.flatnonzero(df['BoolCol'])\u000aOut[112]: array([0, 3, 4])\u000a</code></pre>\u000a\u000a<p>Use <code>df.iloc</code> to select rows by ordinal index:</p>\u000a\u000a<pre><code>In [113]: df.iloc[np.flatnonzero(df['BoolCol'])]\u000aOut[113]: \u000a   BoolCol\u000a10    True\u000a40    True\u000a50    True\u000a</code></pre>\u000a
p6
sVquestion_id
p7
I21800169
sVlast_activity_date
p8
I1492196713
sVcreation_date
p9
I1392481726
sVscore
p10
I90
sVowner
p11
(dp12
Vuser_id
p13
I190597
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I425294
sVlink
p19
Vhttp://stackoverflow.com/users/190597/unutbu
p20
sVaccept_rate
p21
I88
sVdisplay_name
p22
Vunutbu
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1492196713
sVanswer_id
p26
I21800319
sa(dp27
Vbody
p28
V<p>To support arbitrary attribute assignment, an object needs a <code>__dict__</code>: a dict associated with the object, where arbitrary attributes can be stored. Otherwise, there's nowhere to <em>put</em> new attributes.</p>\u000a\u000a<p>An instance of <code>object</code> does <strong>not</strong> carry around a <code>__dict__</code> -- if it did, before the horrible circular dependence problem (since <code>dict</code>, like most everything else, inherits from <code>object</code>;-), this would saddle <em>every</em> object in Python with a dict, which would mean an overhead of <em>many</em> bytes per object that currently doesn't have or need a dict (essentially, all objects that don't have arbitrarily assignable attributes don't have or need a dict).</p>\u000a\u000a<p>For example, using the excellent <code>pympler</code> project (you can get it via svn from <a href="http://code.google.com/p/pympler/source/checkout" rel="nofollow noreferrer">here</a>), we can do some measurements...:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from pympler import asizeof\u000a&gt;&gt;&gt; asizeof.asizeof({})\u000a144\u000a&gt;&gt;&gt; asizeof.asizeof(23)\u000a16\u000a</code></pre>\u000a\u000a<p>You wouldn't want every <code>int</code> to take up 144 bytes instead of just 16, right?-)</p>\u000a\u000a<p>Now, when you make a class (inheriting from whatever), things change...:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class dint(int): pass\u000a... \u000a&gt;&gt;&gt; asizeof.asizeof(dint(23))\u000a184\u000a</code></pre>\u000a\u000a<p>...the <code>__dict__</code> <em>is</em> now added (plus, a little more overhead) -- so a <code>dint</code> instance can have arbitrary attributes, but you pay quite a space cost for that flexibility.</p>\u000a\u000a<p>So what if you wanted <code>int</code>s with just <em>one</em> extra attribute <code>foobar</code>...? It's a rare need, but Python does offer a special mechanism for the purpose...</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class fint(int):\u000a...   __slots__ = 'foobar',\u000a...   def __init__(self, x): self.foobar=x+100\u000a... \u000a&gt;&gt;&gt; asizeof.asizeof(fint(23))\u000a80\u000a</code></pre>\u000a\u000a<p>...not <em>quite</em> as tiny as an <code>int</code>, mind you! (or even the two <code>int</code>s, one the <code>self</code> and one the <code>self.foobar</code> -- the second one can be reassigned), but surely much better than a <code>dint</code>.</p>\u000a\u000a<p>When the class has the <code>__slots__</code> special attribute (a sequence of strings), then the <code>class</code> statement (more precisely, the default metaclass, <code>type</code>) does <strong>not</strong> equip every instance of that class with a <code>__dict__</code> (and therefore the ability to have arbitrary attributes), just a finite, rigid set of "slots" (basically places which can each hold one reference to some object) with the given names.</p>\u000a\u000a<p>In exchange for the lost flexibility, you gain a lot of bytes per instance (probably meaningful only if you have zillions of instances gallivanting around, but, there <em>are</em> use cases for that).</p>\u000a
p29
sVquestion_id
p30
I1529002
sVlast_activity_date
p31
I1490901532
sVcreation_date
p32
I1254880046
sVscore
p33
I93
sVowner
p34
(dp35
Vuser_id
p36
I95810
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I516089
sVlink
p42
Vhttp://stackoverflow.com/users/95810/alex-martelli
p43
sVaccept_rate
p44
I80
sVdisplay_name
p45
VAlex Martelli
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1490901532
sVanswer_id
p49
I1529099
sa(dp50
Vbody
p51
V<p>The most obvious way to do this would be to print to a file object:</p>\u000a\u000a<pre><code>f = open('out.txt', 'w')\u000aprint &gt;&gt; f, 'Filename:', filename  # or f.write('...\u005cn')\u000af.close()\u000a</code></pre>\u000a\u000a<p>However, redirecting stdout also works for me.  It is probably fine for a one-off script such as this:</p>\u000a\u000a<pre><code>import sys\u000a\u000aorig_stdout = sys.stdout\u000af = open('out.txt', 'w')\u000asys.stdout = f\u000a\u000afor i in range(2):\u000a    print 'i = ', i\u000a\u000asys.stdout = orig_stdout\u000af.close()\u000a</code></pre>\u000a\u000a<p>What is the first filename in your script?  I don't see it initialized.</p>\u000a\u000a<p>My first guess is that glob doesn't find any bamfiles, and therefore the for loop doesn't run.  Check that the folder exists, and print out bamfiles in your script.</p>\u000a\u000a<p>Also, use <a href="http://docs.python.org/library/os.path.html" rel="noreferrer">os.path.join and os.path.basename</a> to manipulate paths and filenames.</p>\u000a
p52
sVquestion_id
p53
I7152762
sVlast_activity_date
p54
I1488374775
sVcreation_date
p55
I1314043219
sVscore
p56
I79
sVowner
p57
(dp58
Vuser_id
p59
I450917
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/e09fd547c9c17163d34a1e97ed744639?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I12946
sVlink
p65
Vhttp://stackoverflow.com/users/450917/gringo-suave
p66
sVaccept_rate
p67
I60
sVdisplay_name
p68
VGringo Suave
p69
ssVis_accepted
p70
I01
sVlast_edit_date
p71
I1488374775
sVanswer_id
p72
I7152903
sa(dp73
Vbody
p74
V<p>I will refer you to <a href="http://www.paramiko.org/" rel="noreferrer">paramiko</a></p>\u000a\u000a<p>see <a href="http://stackoverflow.com/questions/373639/running-interactive-commands-in-paramiko">this question</a></p>\u000a\u000a<pre><code>ssh = paramiko.SSHClient()\u000assh.connect(server, username=username, password=password)\u000assh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd_to_execute)\u000a</code></pre>\u000a
p75
sVquestion_id
p76
I3586106
sVlast_activity_date
p77
I1487660811
sVcreation_date
p78
I1282925883
sVscore
p79
I92
sVowner
p80
(dp81
Vuser_id
p82
I144408
sVprofile_image
p83
Vhttps://www.gravatar.com/avatar/82b8a175360c38f03c2720547bafc4cf?s=128&d=identicon&r=PG
p84
sVuser_type
p85
Vregistered
p86
sVreputation
p87
I5572
sVlink
p88
Vhttp://stackoverflow.com/users/144408/shahjapan
p89
sVaccept_rate
p90
I73
sVdisplay_name
p91
Vshahjapan
p92
ssVis_accepted
p93
I01
sVlast_edit_date
p94
I1487660811
sVanswer_id
p95
I3586168
sa(dp96
Vbody
p97
V<p><em>Note: This answer is outdated as of Celery 3.0, where you now use <a href="http://docs.celeryproject.org/en/latest/userguide/tasks.html#logging" rel="nofollow noreferrer"><code>get_task_logger()</code></a> to get your per-task logger set up. Please see <a href="http://docs.celeryproject.org/en/3.0/history/whatsnew-3.0.html#logging-improvements" rel="nofollow noreferrer">the Logging section of the What's new in Celery 3.0 document</a> for details.</em></p>\u000a\u000a<hr>\u000a\u000a<p>Celery has dedicated support for logging, per task. See the <a href="http://docs.celeryproject.org/en/2.5-archived/userguide/tasks.html#logging" rel="nofollow noreferrer">Task documentation on the subject</a>:</p>\u000a\u000a<blockquote>\u000a  <p>You can use the workers logger to add diagnostic output to the worker log:</p>\u000a  \u000a  <pre class="lang-py prettyprint-override"><code>@celery.task()\u000adef add(x, y):\u000a    logger = add.get_logger()\u000a    logger.info("Adding %s + %s" % (x, y))\u000a    return x + y\u000a</code></pre>\u000a  \u000a  <p>There are several logging levels available, and the workers loglevel setting decides \u000a  whether or not they will be written to the log file.</p>\u000a  \u000a  <p>Of course, you can also simply use print as anything written to standard out/-err will be \u000a  written to the log file as well.</p>\u000a</blockquote>\u000a\u000a<p>Under the hood this is all still the standard python logging module. You can set the <a href="http://docs.celeryproject.org/en/2.5-archived/configuration.html#celeryd-hijack-root-logger" rel="nofollow noreferrer"><code>CELERYD_HIJACK_ROOT_LOGGER</code> option</a> to False to allow your own logging setup to work, otherwise Celery will configure the handling for you.</p>\u000a\u000a<p>However, for tasks, the <code>.get_logger()</code> call does allow you to set up a separate log file per individual task. Simply pass in a <code>logfile</code> argument and it'll route log messages to that separate file:</p>\u000a\u000a<pre><code>@celery.task()\u000adef add(x, y):\u000a    logger = add.get_logger(logfile='tasks.log')\u000a    logger.info("Adding %s + %s" % (x, y))\u000a    return x + y \u000a</code></pre>\u000a\u000a<p>Last but not least, you can just configure your top-level package in the <a href="http://docs.python.org/library/logging.html" rel="nofollow noreferrer">python logging module</a> and give it a file handler of it's own. I'd set this up using the <code>celery.signals.after_setup_task_logger</code> signal; here I assume all your modules live in a package called <code>foo.tasks</code> (as in <code>foo.tasks.email</code> and <code>foo.tasks.scaling</code>):</p>\u000a\u000a<pre><code>from celery.signals import after_setup_task_logger\u000aimport logging\u000a\u000adef foo_tasks_setup_logging(**kw):\u000a    logger = logging.getLogger('foo.tasks')\u000a    if not logger.handlers:\u000a        handler = logging.FileHandler('tasks.log')\u000a        formatter = logging.Formatter(logging.BASIC_FORMAT) # you may want to customize this.\u000a        handler.setFormatter(formatter)\u000a        logger.addHandler(handler)\u000a        logger.propagate = False\u000a\u000aafter_setup_task_logger.connect(foo_tasks_setup_logging)\u000a</code></pre>\u000a\u000a<p>Now any logger whose name starts with <code>foo.tasks</code> will have all it's messages sent to <code>tasks.log</code> instead of to the root logger (which doesn't see any of these messages because <code>.propagate</code> is False).</p>\u000a
p98
sVquestion_id
p99
I6192265
sVlast_activity_date
p100
I1485952296
sVcreation_date
p101
I1306873144
sVscore
p102
I91
sVowner
p103
(dp104
Vuser_id
p105
I100297
sVprofile_image
p106
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p107
sVuser_type
p108
Vmoderator
p109
sVreputation
p110
I554897
sVlink
p111
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p112
sVdisplay_name
p113
VMartijn Pieters
p114
ssVis_accepted
p115
I01
sVlast_edit_date
p116
I1485952296
sVanswer_id
p117
I6193082
sa(dp118
Vbody
p119
V<p>By what you wrote, you are missing a critical piece of understanding: the difference between a class and an object. <code>__init__</code> doesn't initialize a class, it initializes an instance of a class or an object. Each dog has colour, but dogs as a class don't. Each dog has four or fewer feet, but the class of dogs doesn't. The class is a concept of an object. When you see Fido and Spot, you recognise their similarity, their doghood. That's the class.</p>\u000a\u000a<p>When you say</p>\u000a\u000a<pre><code>class Dog:\u000a    def __init__(self, legs, colour):\u000a        self.legs = legs\u000a        self.colour = colour\u000a\u000afido = Dog(4, "brown")\u000aspot = Dog(3, "mostly yellow")\u000a</code></pre>\u000a\u000a<p>You're saying, Fido is a brown dog with 4 legs while Spot is a bit of a cripple and is mostly yellow. The <code>__init__</code> function is called a constructor, or initializer, and is automatically called when you create a new instance of a class. Within that function, the newly created object is assigned to the parameter <code>self</code>. The notation <code>self.legs</code> is an attribute called <code>legs</code> of the object in the variable <code>self</code>. Attributes are kind of like variables, but they describe the state of an object, or particular actions (functions) available to the object.</p>\u000a\u000a<p>However, notice that you don't set <code>colour</code> for the doghood itself - it's an abstract concept. There are attributes that make sense on classes. For instance, <code>population_size</code> is one such - it doesn't make sense to count the Fido because Fido is always one. It does make sense to count dogs. Let us say there're 200 million dogs in the world. It's the property of the Dog class. Fido has nothing to do with the number 200 million, nor does Spot. It's called a "class attribute", as opposed to "instance attributes" that are <code>colour</code> or <code>legs</code> above.</p>\u000a\u000a<p>Now, to something less canine and more programming-related. As I write below, class to add things is not sensible - what is it a class of? Classes in Python make up of collections of different data, that behave similarly. Class of dogs consists of Fido and Spot and 199999999998 other animals similar to them, all of them peeing on lampposts. What does the class for adding things consist of? By what data inherent to them do they differ? And what actions do they share?</p>\u000a\u000a<p>However, numbers... those are more interesting subjects. Say, Integers. There's a lot of them, a lot more than dogs. I know that Python already has integers, but let's play dumb and "implement" them again (by cheating and using Python's integers).</p>\u000a\u000a<p>So, Integers are a class. They have some data (value), and some behaviours ("add me to this other number"). Let's show this:</p>\u000a\u000a<pre><code>class MyInteger:\u000a    def __init__(self, newvalue)\u000a        # imagine self as an index card.\u000a        # under the heading of "value", we will write\u000a        # the contents of the variable newvalue.\u000a        self.value = newvalue\u000a    def add(self, other):\u000a        # when an integer wants to add itself to another integer,\u000a        # we'll take their values and add them together,\u000a        # then make a new integer with the result value.\u000a        return MyInteger(self.value + other.value)\u000a\u000athree = MyInteger(3)\u000a# three now contains an object of class MyInteger\u000a# three.value is now 3\u000afive = MyInteger(5)\u000a# five now contains an object of class MyInteger\u000a# five.value is now 5\u000aeight = three.add(five)\u000a# here, we invoked the three's behaviour of adding another integer\u000a# now, eight.value is three.value + five.value = 3 + 5 = 8\u000aprint eight.value\u000a# ==&gt; 8\u000a</code></pre>\u000a\u000a<p>This is a bit fragile (we're assuming <code>other</code> will be a MyInteger), but we'll ignore now. In real code, we wouldn't; we'd test it to make sure, and maybe even coerce it ("you're not an integer? by golly, you have 10 nanoseconds to become one! 9... 8....")</p>\u000a\u000a<p>We could even define fractions. Fractions also know how to add themselves.</p>\u000a\u000a<pre><code>class MyFraction:\u000a    def __init__(self, newnumerator, newdenominator)\u000a        self.numerator = newnumerator\u000a        self.denominator = newdenominator\u000a        # because every fraction is described by these two things\u000a    def add(self, other):\u000a        newdenominator = self.denominator * other.denominator\u000a        newnumerator = self.numerator * other.denominator + self.denominator * other.numerator\u000a        return MyFraction(newnumerator, newdenominator)\u000a</code></pre>\u000a\u000a<p>There's even more fractions than integers (not really, but computers don't know that). Let's make two:</p>\u000a\u000a<pre><code>half = MyFraction(1, 2)\u000athird = MyFraction(1, 3)\u000afive_sixths = half.add(third)\u000aprint five_sixths.numerator\u000a# ==&gt; 5\u000aprint five_sixths.denominator\u000a# ==&gt; 6\u000a</code></pre>\u000a\u000a<p>You're not actually declaring anything here. Attributes are like a new kind of variable. Normal variables only have one value. Let us say you write <code>colour = "grey"</code>. You can't have another variable named <code>colour</code> that is <code>"fuchsia"</code> - not in the same place in the code.</p>\u000a\u000a<p>Arrays solve that to a degree. If you say <code>colour = ["grey", "fuchsia"]</code>, you have stacked two colours into the variable, but you distinguish them by their position (0, or 1, in this case).</p>\u000a\u000a<p>Attributes are variables that are bound to an object. Like with arrays, we can have plenty <code>colour</code> variables, <em>on different dogs</em>. So, <code>fido.colour</code> is one variable, but <code>spot.colour</code> is another. The first one is bound to the object within the variable <code>fido</code>; the second, <code>spot</code>. Now, when you call <code>Dog(4, "brown")</code>, or <code>three.add(five)</code>, there will always be an invisible parameter, which will be assigned to the dangling extra one at the front of the parameter list. It is conventionally called <code>self</code>, and will get the value of the object in front of the dot. Thus, within the Dog's <code>__init__</code> (constructor), <code>self</code> will be whatever the new Dog will turn out to be; within <code>MyInteger</code>'s <code>add</code>, <code>self</code> will be bound to the object in the variable <code>three</code>. Thus, <code>three.value</code> will be the same variable outside the <code>add</code>, as <code>self.value</code> within the <code>add</code>.</p>\u000a\u000a<p>If I say <code>the_mangy_one = fido</code>, I will start referring to the object known as <code>fido</code> with yet another name. From now on, <code>fido.colour</code> is exactly the same variable as <code>the_mangy_one.colour</code>.</p>\u000a\u000a<p>So, the things inside the <code>__init__</code>. You can think of them as noting things into the Dog's birth certificate. <code>colour</code> by itself is a random variable, could contain anything. <code>fido.colour</code> or <code>self.colour</code> is like a form field on the Dog's identity sheet; and <code>__init__</code> is the clerk filling it out for the first time.</p>\u000a\u000a<p>Any clearer?</p>\u000a\u000a<p><strong>EDIT</strong>: Expanding on the comment below:</p>\u000a\u000a<p>You mean a list of <strong>objects</strong>, don't you?</p>\u000a\u000a<p>First of all, <code>fido</code> is actually not an object. It is a variable, which is currently containing an object, just like when you say <code>x = 5</code>, <code>x</code> is a variable currently containing the number five. If you later change your mind, you can do <code>fido = Cat(4, "pleasing")</code> (as long as you've created a class <code>Cat</code>), and <code>fido</code> would from then on "contain" a cat object. If you do <code>fido = x</code>, it will then contain the number five, and not an animal object at all.</p>\u000a\u000a<p>A class by itself doesn't know its instances unless you specifically write code to keep track of them. For instance:</p>\u000a\u000a<pre><code>class Cat:\u000a    census = [] #define census array\u000a\u000a    def __init__(self, legs, colour):\u000a        self.colour = colour\u000a        self.legs = legs\u000a        Cat.census.append(self)\u000a</code></pre>\u000a\u000a<p>Here, <code>census</code> is a class-level attribute of <code>Cat</code> class.</p>\u000a\u000a<pre><code>fluffy = Cat(4, "white")\u000aspark = Cat(4, "fiery")\u000aCat.census\u000a# ==&gt; [&lt;__main__.Cat instance at 0x108982cb0&gt;, &lt;__main__.Cat instance at 0x108982e18&gt;]\u000a# or something like that\u000a</code></pre>\u000a\u000a<p>Note that you won't get <code>[fluffy, sparky]</code>. Those are just variable names. If you want cats themselves to have names, you have to make a separate attribute for the name, and then override the <code>__str__</code> method to return this name. This method's (i.e. class-bound function, just like <code>add</code> or <code>__init__</code>) purpose is to describe how to convert the object to a string, like when you print it out.              </p>\u000a
p120
sVquestion_id
p121
I8609153
sVlast_activity_date
p122
I1485178057
sVcreation_date
p123
I1324584905
sVscore
p124
I160
sVowner
p125
(dp126
Vuser_id
p127
I240443
sVprofile_image
p128
Vhttps://www.gravatar.com/avatar/495d675e3bc42ed1dee469e2ce701f1b?s=128&d=identicon&r=PG
p129
sVuser_type
p130
Vregistered
p131
sVreputation
p132
I101473
sVlink
p133
Vhttp://stackoverflow.com/users/240443/amadan
p134
sVaccept_rate
p135
I83
sVdisplay_name
p136
VAmadan
p137
ssVis_accepted
p138
I01
sVlast_edit_date
p139
I1485178057
sVanswer_id
p140
I8609238
sa(dp141
Vbody
p142
V<p>Please go to File | Settings | Tools | Python Integrated Tools and change the default test runner to py.test. Then you'll get the py.test option to create tests instead of the unittest one.</p>\u000a
p143
sVquestion_id
p144
I6397063
sVlast_activity_date
p145
I1480420246
sVcreation_date
p146
I1308414230
sVscore
p147
I87
sVowner
p148
(dp149
Vuser_id
p150
I147024
sVprofile_image
p151
Vhttps://www.gravatar.com/avatar/b35432f97606c0a31da17084d2414966?s=128&d=identicon&r=PG
p152
sVuser_type
p153
Vregistered
p154
sVreputation
p155
I32812
sVlink
p156
Vhttp://stackoverflow.com/users/147024/yole
p157
sVdisplay_name
p158
Vyole
p159
ssVis_accepted
p160
I01
sVlast_edit_date
p161
I1480420246
sVanswer_id
p162
I6397315
sa(dp163
Vbody
p164
V<p>I know this is an old question, but here is a solution that doesn't use any extra data structures or libraries. It is linear in the number of elements of the input list and I cannot think of any other way to make it more efficient (actually if anyone knows of a better way to allocate the result, please let me know).</p>\u000a\u000a<p><strong>NOTE:</strong> this would be much faster using a numpy array instead of a list, but I wanted to eliminate all dependencies. It would also be possible to improve performance by multi-threaded execution</p>\u000a\u000a<p>The function assumes that the input list is one dimensional, so be careful.</p>\u000a\u000a<pre><code>### Running mean/Moving average\u000adef running_mean(l, N):\u000a    sum = 0\u000a    result = list( 0 for x in l)\u000a\u000a    for i in range( 0, N ):\u000a        sum = sum + l[i]\u000a        result[i] = sum / (i+1)\u000a\u000a    for i in range( N, len(l) ):\u000a        sum = sum - l[i-N] + l[i]\u000a        result[i] = sum / N\u000a\u000a    return result\u000a</code></pre>\u000a
p165
sVquestion_id
p166
I13728392
sVlast_activity_date
p167
I1479270897
sVcreation_date
p168
I1479268670
sVscore
p169
I8
sVowner
p170
(dp171
Vuser_id
p172
I213541
sVprofile_image
p173
Vhttps://www.gravatar.com/avatar/95e21bca2295395632439482c95976b6?s=128&d=identicon&r=PG
p174
sVuser_type
p175
Vregistered
p176
sVreputation
p177
I1284
sVlink
p178
Vhttp://stackoverflow.com/users/213541/nexus
p179
sVdisplay_name
p180
VNeXuS
p181
ssVis_accepted
p182
I01
sVlast_edit_date
p183
I1479270897
sVanswer_id
p184
I40623822
sa(dp185
Vbody
p186
V<p>I believe that this answer is more correct than the other answers here:</p>\u000a\u000a<pre><code>from sklearn.tree import _tree\u000a\u000adef tree_to_code(tree, feature_names):\u000a    tree_ = tree.tree_\u000a    feature_name = [\u000a        feature_names[i] if i != _tree.TREE_UNDEFINED else "undefined!"\u000a        for i in tree_.feature\u000a    ]\u000a    print "def tree({}):".format(", ".join(feature_names))\u000a\u000a    def recurse(node, depth):\u000a        indent = "  " * depth\u000a        if tree_.feature[node] != _tree.TREE_UNDEFINED:\u000a            name = feature_name[node]\u000a            threshold = tree_.threshold[node]\u000a            print "{}if {} &lt;= {}:".format(indent, name, threshold)\u000a            recurse(tree_.children_left[node], depth + 1)\u000a            print "{}else:  # if {} &gt; {}".format(indent, name, threshold)\u000a            recurse(tree_.children_right[node], depth + 1)\u000a        else:\u000a            print "{}return {}".format(indent, tree_.value[node])\u000a\u000a    recurse(0, 1)\u000a</code></pre>\u000a\u000a<p>This prints out a valid Python function. Here's an example output for a tree that is trying to return its input, a number between 0 and 10.</p>\u000a\u000a<pre><code>def tree(f0):\u000a  if f0 &lt;= 6.0:\u000a    if f0 &lt;= 1.5:\u000a      return [[ 0.]]\u000a    else:  # if f0 &gt; 1.5\u000a      if f0 &lt;= 4.5:\u000a        if f0 &lt;= 3.5:\u000a          return [[ 3.]]\u000a        else:  # if f0 &gt; 3.5\u000a          return [[ 4.]]\u000a      else:  # if f0 &gt; 4.5\u000a        return [[ 5.]]\u000a  else:  # if f0 &gt; 6.0\u000a    if f0 &lt;= 8.5:\u000a      if f0 &lt;= 7.5:\u000a        return [[ 7.]]\u000a      else:  # if f0 &gt; 7.5\u000a        return [[ 8.]]\u000a    else:  # if f0 &gt; 8.5\u000a      return [[ 9.]]\u000a</code></pre>\u000a\u000a<p>Here are some stumbling blocks that I see in other answers:</p>\u000a\u000a<ol>\u000a<li>Using <code>tree_.threshold == -2</code> to decide whether a node is a leaf isn't a good idea. What if it's a real decision node with a threshold of -2? Instead, you should look at <code>tree.feature</code> or <code>tree.children_*</code>.</li>\u000a<li>The line <code>features = [feature_names[i] for i in tree_.feature]</code> crashes with my version of sklearn, because some values of <code>tree.tree_.feature</code> are -2 (specifically for leaf nodes).</li>\u000a<li>There is no need to have multiple if statements in the recursive function, just one is fine.</li>\u000a</ol>\u000a
p187
sVquestion_id
p188
I20224526
sVlast_activity_date
p189
I1477370436
sVcreation_date
p190
I1475156950
sVscore
p191
I28
sVowner
p192
(dp193
Vuser_id
p194
I695561
sVprofile_image
p195
Vhttps://www.gravatar.com/avatar/f94ac428bccaa954a8bc11577d2c474f?s=128&d=identicon&r=PG
p196
sVuser_type
p197
Vregistered
p198
sVreputation
p199
I423
sVlink
p200
Vhttp://stackoverflow.com/users/695561/paulkernfeld
p201
sVdisplay_name
p202
Vpaulkernfeld
p203
ssVis_accepted
p204
I01
sVlast_edit_date
p205
I1477370436
sVanswer_id
p206
I39772170
sa(dp207
Vbody
p208
V<p>Alex Martelli <a href="http://stackoverflow.com/questions/2819696/module-to-use-when-parsing-properties-file-in-python/2819788#2819788">provided a solution</a> for using <code>ConfigParser</code> to parse <code>.properties</code> files (which are apparently section-less config files).</p>\u000a\u000a<p><a href="http://stackoverflow.com/a/25493615/3462319">His solution</a> is a file-like wrapper that will automagically insert a dummy section heading to satisfy <code>ConfigParser</code>'s requirements.</p>\u000a
p209
sVquestion_id
p210
I2885190
sVlast_activity_date
p211
I1476986499
sVcreation_date
p212
I1274477822
sVscore
p213
I29
sVowner
p214
(dp215
Vuser_id
p216
I151221
sVprofile_image
p217
Vhttps://www.gravatar.com/avatar/cf3135c258d42f857b0c7d0ff9e26858?s=128&d=identicon&r=PG
p218
sVuser_type
p219
Vregistered
p220
sVreputation
p221
I10426
sVlink
p222
Vhttp://stackoverflow.com/users/151221/will-mccutchen
p223
sVaccept_rate
p224
I90
sVdisplay_name
p225
VWill McCutchen
p226
ssVis_accepted
p227
I01
sVlast_edit_date
p228
I1476986499
sVanswer_id
p229
I2885753
sa(dp230
Vbody
p231
V<p>The <code>zip</code> function is useful here, used with a list comprehension.</p>\u000a\u000a<pre><code>[x + y for x, y in zip(first, second)]\u000a</code></pre>\u000a\u000a<p>If you have a list of lists (instead of just two lists):</p>\u000a\u000a<pre><code>lists_of_lists = [[1, 2, 3], [4, 5, 6]]\u000a[sum(x) for x in zip(*lists_of_lists)]\u000a# -&gt; [5, 7, 9]\u000a</code></pre>\u000a
p232
sVquestion_id
p233
I14050824
sVlast_activity_date
p234
I1476728826
sVcreation_date
p235
I1356592354
sVscore
p236
I81
sVowner
p237
(dp238
Vuser_id
p239
I665575
sVprofile_image
p240
Vhttps://www.gravatar.com/avatar/5b71ac3add821b6699ffe23dc7a592c1?s=128&d=identicon&r=PG
p241
sVuser_type
p242
Vregistered
p243
sVreputation
p244
I9413
sVlink
p245
Vhttp://stackoverflow.com/users/665575/tom
p246
sVdisplay_name
p247
Vtom
p248
ssVis_accepted
p249
I01
sVlast_edit_date
p250
I1476728826
sVanswer_id
p251
I14050853
sa(dp252
Vbody
p253
V<p>Add the ALLOWED_HOSTS setting to your settings.py like so...</p>\u000a\u000a<pre><code>ALLOWED_HOSTS = [\u000a    '.example.com', # Allow domain and subdomains\u000a    '.example.com.', # Also allow FQDN and subdomains\u000a]\u000a</code></pre>\u000a\u000a<p>I had this same problem and found the answer <a href="https://docs.djangoproject.com/en/1.7/ref/settings/#allowed-hosts" rel="noreferrer">here in the docs</a></p>\u000a\u000a<p>update: django 1.6 docs are no longer online, I updated the link to go to the django 1.7 docs for <code>ALLOWED_HOSTS</code> setting.</p>\u000a
p254
sVquestion_id
p255
I20321673
sVlast_activity_date
p256
I1473700086
sVcreation_date
p257
I1387220583
sVscore
p258
I95
sVowner
p259
(dp260
Vuser_id
p261
I495679
sVprofile_image
p262
Vhttps://www.gravatar.com/avatar/dff23b6ae0f1dba0873927d2263e9350?s=128&d=identicon&r=PG
p263
sVuser_type
p264
Vregistered
p265
sVreputation
p266
I2956
sVlink
p267
Vhttp://stackoverflow.com/users/495679/teewuane
p268
sVaccept_rate
p269
I84
sVdisplay_name
p270
Vteewuane
p271
ssVis_accepted
p272
I01
sVlast_edit_date
p273
I1473700086
sVanswer_id
p274
I20618753
sa(dp275
Vbody
p276
V\u000a\u000a<pre class="lang-py prettyprint-override"><code>import csv, sqlite3\u000a\u000acon = sqlite3.connect(":memory:")\u000acur = con.cursor()\u000acur.execute("CREATE TABLE t (col1, col2);") # use your column names here\u000a\u000awith open('data.csv','rb') as fin: # `with` statement available in 2.5+\u000a    # csv.DictReader uses first line in file for column headings by default\u000a    dr = csv.DictReader(fin) # comma is default delimiter\u000a    to_db = [(i['col1'], i['col2']) for i in dr]\u000a\u000acur.executemany("INSERT INTO t (col1, col2) VALUES (?, ?);", to_db)\u000acon.commit()\u000acon.close()\u000a</code></pre>\u000a
p277
sVquestion_id
p278
I2887878
sVlast_activity_date
p279
I1470692274
sVcreation_date
p280
I1274530804
sVscore
p281
I82
sVowner
p282
(dp283
Vuser_id
p284
I42346
sVprofile_image
p285
Vhttps://i.stack.imgur.com/ZikEw.jpg?s=128&g=1
p286
sVuser_type
p287
Vregistered
p288
sVreputation
p289
I84007
sVlink
p290
Vhttp://stackoverflow.com/users/42346/bernie
p291
sVdisplay_name
p292
Vbernie
p293
ssVis_accepted
p294
I01
sVlast_edit_date
p295
I1470692274
sVanswer_id
p296
I2888042
sa(dp297
Vbody
p298
V<p>The <code>scrapy</code> command is a python script which means you can start it from inside PyCharm.</p>\u000a\u000a<p>When you examine the scrapy binary (<code>which scrapy</code>) you will notice that this is actually a python script:</p>\u000a\u000a<pre><code>#!/usr/bin/python\u000a\u000afrom scrapy.cmdline import execute\u000aexecute()\u000a</code></pre>\u000a\u000a<p>This means that a command like \u000a<code>scrapy crawl IcecatCrawler</code> can also be executed like this: <code>python /Library/Python/2.7/site-packages/scrapy/cmdline.py crawl IcecatCrawler</code></p>\u000a\u000a<p>Try to find the scrapy.cmdline package.\u000aIn my case the location was here: <code>/Library/Python/2.7/site-packages/scrapy/cmdline.py</code></p>\u000a\u000a<p>Create a run/debug configuration inside PyCharm with that script as script. Fill the script parameters with the scrapy command and spider. In this case <code>crawl IcecatCrawler</code>. </p>\u000a\u000a<p>Like this:\u000a<img src="https://i.stack.imgur.com/bcDQH.png" alt="PyCharm Run/Debug Configuration"></p>\u000a\u000a<p>Put your breakpoints anywhere in your crawling code and it should work\u2122.</p>\u000a
p299
sVquestion_id
p300
I21788939
sVlast_activity_date
p301
I1461705346
sVcreation_date
p302
I1394208268
sVscore
p303
I92
sVowner
p304
(dp305
Vuser_id
p306
I5749
sVprofile_image
p307
Vhttps://www.gravatar.com/avatar/561387d0c0c3fc3d68c109499fa468e6?s=128&d=identicon&r=PG
p308
sVuser_type
p309
Vregistered
p310
sVreputation
p311
I1179
sVlink
p312
Vhttp://stackoverflow.com/users/5749/pullie
p313
sVaccept_rate
p314
I71
sVdisplay_name
p315
VPullie
p316
ssVis_accepted
p317
I01
sVlast_edit_date
p318
I1461705346
sVanswer_id
p319
I22254926
sa(dp320
Vbody
p321
V<p>The actual walk through the directories works as you have coded it. If you replace the contents of the inner loop with a simple <code>print</code> statement you can see that each file is found:</p>\u000a\u000a<pre><code>import os\u000arootdir = 'C:/Users/sid/Desktop/test'\u000a\u000afor subdir, dirs, files in os.walk(rootdir):\u000a    for file in files:\u000a        print os.path.join(subdir, file)\u000a</code></pre>\u000a\u000a<p>If you still get errors when running the above, please provide the error message.</p>\u000a
p322
sVquestion_id
p323
I19587118
sVlast_activity_date
p324
I1461251988
sVcreation_date
p325
I1382697542
sVscore
p326
I122
sVowner
p327
(dp328
Vuser_id
p329
I2012446
sVprofile_image
p330
Vhttps://www.gravatar.com/avatar/0de140736f28e6b0e33234cdc1b92c6d?s=128&d=identicon&r=PG
p331
sVuser_type
p332
Vregistered
p333
sVreputation
p334
I6429
sVlink
p335
Vhttp://stackoverflow.com/users/2012446/chrisprosser
p336
sVaccept_rate
p337
I80
sVdisplay_name
p338
VChrisProsser
p339
ssVis_accepted
p340
I01
sVlast_edit_date
p341
I1461251988
sVanswer_id
p342
I19587581
sa(dp343
Vbody
p344
V<p>The <a href="http://docs.python.org/library/logging.html"><code>logging</code></a> module has everything you could want. It may seem excessive at first, but only use the parts you need. I'd recommend using <a href="http://docs.python.org/library/logging.html#logging.basicConfig"><code>logging.basicConfig</code></a> to toggle the logging level to <code>stderr</code> and the <a href="http://docs.python.org/library/logging.html#logging.debug">simple log methods</a>, <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code> and <code>critical</code>.</p>\u000a\u000a<pre><code>import logging, sys\u000alogging.basicConfig(stream=sys.stderr, level=logging.DEBUG)\u000alogging.debug('A debug message!')\u000alogging.info('We processed %d records', len(processed_records))\u000a</code></pre>\u000a
p345
sVquestion_id
p346
I6579496
sVlast_activity_date
p347
I1459468234
sVcreation_date
p348
I1309852772
sVscore
p349
I80
sVowner
p350
(dp351
Vuser_id
p352
I149482
sVprofile_image
p353
Vhttps://www.gravatar.com/avatar/cb6a2b464b7190c48e4f148a0e51d13a?s=128&d=identicon&r=PG
p354
sVuser_type
p355
Vregistered
p356
sVreputation
p357
I45182
sVlink
p358
Vhttp://stackoverflow.com/users/149482/matt-joiner
p359
sVaccept_rate
p360
I77
sVdisplay_name
p361
VMatt Joiner
p362
ssVis_accepted
p363
I01
sVlast_edit_date
p364
I1459468234
sVanswer_id
p365
I6579522
sa(dp366
Vbody
p367
V<p>You are running into initialization issues based around mutability.</p>\u000a\u000a<p><strong>First</strong>, the fix. <code>skills</code> and <code>energy</code> are class attributes. \u000aIt is a good practice to consider them as read only, as initial values for instance attributes. The classic way to build your class is:  </p>\u000a\u000a<pre><code>class Animal(object):\u000a    energy = 10\u000a    skills = []\u000a    def __init__(self,en=energy,sk=skills):\u000a        self.energy=en\u000a        self.skills=sk\u000a   ....\u000a</code></pre>\u000a\u000a<p>Then each instance will have its own attributes, all your problems will disappear.</p>\u000a\u000a<p><strong>Second</strong>, what's happening with this code? \u000aWhy is <code>skills</code> shared, when <code>energy</code> is per-instance? </p>\u000a\u000a<p>The <code>-=</code> operator is subtle. it is for <em>in-place</em> assignation <em>if</em> possible. The difference here is that <code>list</code> types are mutable so in-place modification often occurs:</p>\u000a\u000a<pre><code>In [6]: \u000a   b=[]\u000a   print(b,id(b))\u000a   b+=['strong']\u000a   print(b,id(b))\u000a\u000a[] 201781512\u000a['strong'] 201781512\u000a</code></pre>\u000a\u000a<p>So <code>a1.skills</code> and <code>a2.skills</code> are the same list, which is also accessible as <code>Animal.skills</code>. But <code>energy</code> is a non-mutable <code>int</code>, so modification is impossible. In this case a new <code>int</code> object is created, so each instance manages its own copy of the <code>energy</code> variable:</p>\u000a\u000a<pre><code>In [7]: \u000a     a=10\u000a     print(a,id(a))\u000a     a-=1\u000a     print(a,id(a))\u000a\u000a10 1360251232\u000a9 1360251200\u000a</code></pre>\u000a
p368
sVquestion_id
p369
I35766834
sVlast_activity_date
p370
I1458239555
sVcreation_date
p371
I1457023325
sVscore
p372
I32
sVowner
p373
(dp374
Vuser_id
p375
I4016285
sVprofile_image
p376
Vhttps://i.stack.imgur.com/SvSVV.png?s=128&g=1
p377
sVuser_type
p378
Vregistered
p379
sVreputation
p380
I7450
sVlink
p381
Vhttp://stackoverflow.com/users/4016285/b-m
p382
sVaccept_rate
p383
I100
sVdisplay_name
p384
VB. M.
p385
ssVis_accepted
p386
I01
sVlast_edit_date
p387
I1458239555
sVanswer_id
p388
I35777981
sa(dp389
Vbody
p390
V<p>Save/delete signals are generally favourable in situations where you need to make changes which aren't completely specific to the model in question, or could be applied to models which have something in common, or could be configured for use across models.</p>\u000a\u000a<p>One common task in overridden <code>save</code> methods is automated generation of slugs from some text field in a model. That's an example of something which, if you needed to implement it for a number of models, would benefit from using a <code>pre_save</code> signal, where the signal handler could take the name of the slug field and the name of the field to generate the slug from. Once you have something like that in place, any enhanced functionality you put in place will also apply to all models - e.g. looking up the slug you're about to add for the type of model in question, to ensure uniqueness.</p>\u000a\u000a<p>Reusable applications often benefit from the use of signals - if the functionality they provide can be applied to any model, they generally (unless it's unavoidable) won't want users to have to directly modify their models in order to benefit from it.</p>\u000a\u000a<p>With <a href="https://github.com/django-mptt/django-mptt/" rel="noreferrer">django-mptt</a>, for example, I used the <code>pre_save</code> signal to manage a set of fields which describe a tree structure for the model which is about to be created or updated and the <code>pre_delete</code> signal to remove tree structure details for the object being deleted and its entire sub-tree of objects before it and they are deleted. Due to the use of signals, users don't have to add or modify <code>save</code> or <code>delete</code> methods on their models to have this management done for them, they just have to let django-mptt know which models they want it to manage.</p>\u000a
p391
sVquestion_id
p392
I170337
sVlast_activity_date
p393
I1457550207
sVcreation_date
p394
I1223195919
sVscore
p395
I62
sVowner
p396
(dp397
Vuser_id
p398
I6760
sVprofile_image
p399
Vhttps://www.gravatar.com/avatar/98d0816016ba9c3bfafbd9cf433aeaa4?s=128&d=identicon&r=PG
p400
sVuser_type
p401
Vregistered
p402
sVreputation
p403
I38415
sVlink
p404
Vhttp://stackoverflow.com/users/6760/jonny-buchanan
p405
sVdisplay_name
p406
VJonny Buchanan
p407
ssVis_accepted
p408
I01
sVlast_edit_date
p409
I1457550207
sVanswer_id
p410
I171703
sa(dp411
Vbody
p412
V<p>@Eric S.</p>\u000a\u000a<p>Eric S.'s answer is excellent, but I learned by experimentation that this will always cause messages logged at the new debug level to be printed -- regardless of what the log level is set to. So if you make a new level number of 9, if you call setLevel(50), the lower level messages will erroneously be printed. To prevent that from happening, you need another line inside the "debugv" function to check if the logging level in question is actually enabled.</p>\u000a\u000a<p>Fixed example that checks if the logging level is enabled:</p>\u000a\u000a<pre><code>import logging\u000aDEBUG_LEVELV_NUM = 9 \u000alogging.addLevelName(DEBUG_LEVELV_NUM, "DEBUGV")\u000adef debugv(self, message, *args, **kws):\u000a    # Yes, logger takes its '*args' as 'args'.\u000a    if self.isEnabledFor(DEBUG_LEVELV_NUM):\u000a        self._log(DEBUG_LEVELV_NUM, message, args, **kws) \u000alogging.Logger.debugv = debugv\u000a</code></pre>\u000a\u000a<p>If you look at the code for <code>class Logger</code> in <code>logging.__init__.py</code> for Python 2.7, this is what all the standard log functions do (.critical, .debug, etc.).</p>\u000a\u000a<p>I apparently can't post replies to others' answers for lack of reputation... hopefully Eric will update his post if he sees this. =)</p>\u000a
p413
sVquestion_id
p414
I2183233
sVlast_activity_date
p415
I1456763382
sVcreation_date
p416
I1354241826
sVscore
p417
I91
sVowner
p418
(dp419
Vuser_id
p420
I1691778
sVprofile_image
p421
Vhttps://www.gravatar.com/avatar/2b41eba0a43939259f94363269ef95bb?s=128&d=identicon&r=PG
p422
sVuser_type
p423
Vregistered
p424
sVreputation
p425
I1114
sVlink
p426
Vhttp://stackoverflow.com/users/1691778/pfa
p427
sVdisplay_name
p428
Vpfa
p429
ssVis_accepted
p430
I01
sVlast_edit_date
p431
I1456763382
sVanswer_id
p432
I13638084
sa(dp433
Vbody
p434
V<p>Through some trial and error, I found the cause of this problem.  Test names should match module names.  If there is a "foo_test.py" test, there needs to be a corresponding module foo.py. </p>\u000a\u000a<p>I found some <a href="http://python-packaging-user-guide.readthedocs.org" rel="noreferrer">guidelines on organizing package structure</a>, which helped me reorganize my package into a structure I was confident in.</p>\u000a
p435
sVquestion_id
p436
I6164004
sVlast_activity_date
p437
I1454147005
sVcreation_date
p438
I1306626153
sVscore
p439
I42
sVowner
p440
(dp441
Vuser_id
p442
I479490
sVprofile_image
p443
Vhttps://www.gravatar.com/avatar/59bb043810ee72608c62ee69fc2818b8?s=128&d=identicon&r=PG
p444
sVuser_type
p445
Vregistered
p446
sVreputation
p447
I2052
sVlink
p448
Vhttp://stackoverflow.com/users/479490/nate-reed
p449
sVaccept_rate
p450
I44
sVdisplay_name
p451
VNate Reed
p452
ssVis_accepted
p453
I01
sVlast_edit_date
p454
I1454147005
sVanswer_id
p455
I6165054
sa(dp456
Vbody
p457
V<p><code>embedding_lookup</code> function retrieves rows of the <code>params</code> tensor. The behavior is similar to using indexing with arrays in numpy. E.g.</p>\u000a\u000a<pre><code>matrix = np.random.random([1024, 64])  # 64-dimensional embeddings\u000aids = np.array([0, 5, 17, 33])\u000aprint matrix[ids]  # prints a matrix of shape [4, 64] \u000a</code></pre>\u000a\u000a<p><code>params</code> argument can be also a list of tensors in which case the ids will be distributed among the tensors. E.g. given a list of 3 [2, 64] tensors the default behavior is that they will represent ids: [0, 3], [1, 4], [2, 5]. <code>partition_strategy</code> controls the way how the ids are distributed among the list. The partitioning is useful for larger scale problems when the matrix might be too large to keep in one piece.</p>\u000a
p458
sVquestion_id
p459
I34870614
sVlast_activity_date
p460
I1453208706
sVcreation_date
p461
I1453208706
sVscore
p462
I71
sVowner
p463
(dp464
Vuser_id
p465
I5543198
sVprofile_image
p466
Vhttps://lh3.googleusercontent.com/-w8QH5HwZv-c/AAAAAAAAAAI/AAAAAAAAA6c/BUg7enrJUeU/photo.jpg?sz=128
p467
sVuser_type
p468
Vregistered
p469
sVreputation
p470
I2914
sVlink
p471
Vhttp://stackoverflow.com/users/5543198/rafa%c5%82-j%c3%b3zefowicz
p472
sVdisplay_name
p473
VRafa\u0142 J&#243;zefowicz
p474
ssVis_accepted
p475
I01
sVanswer_id
p476
I34877590
sa(dp477
Vbody
p478
V<p>UPDATE: os.system is discouraged, albeit still available in Python 3.</p>\u000a\u000a<hr>\u000a\u000a<p>Use <code>os.system</code>:</p>\u000a\u000a<pre><code>os.system(my_cmd)\u000a</code></pre>\u000a\u000a<p>If you really want to use subprocess, here's the solution (mostly lifted from the documentation for subprocess):</p>\u000a\u000a<pre><code>p = subprocess.Popen(my_cmd, shell=True)\u000aos.waitpid(p.pid, 0)\u000a</code></pre>\u000a\u000a<p>OTOH, you can avoid system calls entirely:</p>\u000a\u000a<pre><code>import shutil\u000a\u000awith open('myfile', 'w') as outfile:\u000a    for infile in ('file1', 'file2', 'file3'):\u000a        shutil.copyfileobj(open(infile), outfile)\u000a</code></pre>\u000a
p479
sVquestion_id
p480
I4965159
sVlast_activity_date
p481
I1445043728
sVcreation_date
p482
I1297392677
sVscore
p483
I21
sVowner
p484
(dp485
Vuser_id
p486
I9990
sVprofile_image
p487
Vhttps://www.gravatar.com/avatar/2ef86667e42fe07c2bab670357a57fc5?s=128&d=identicon&r=PG
p488
sVuser_type
p489
Vregistered
p490
sVreputation
p491
I125205
sVlink
p492
Vhttp://stackoverflow.com/users/9990/marcelo-cantos
p493
sVaccept_rate
p494
I81
sVdisplay_name
p495
VMarcelo Cantos
p496
ssVis_accepted
p497
I01
sVlast_edit_date
p498
I1445043728
sVanswer_id
p499
I4965176
sa(dp500
Vbody
p501
V<p>You might think you could call the base class function which is called by property:</p>\u000a\u000a<pre><code>class FooBar(Foo):\u000a\u000a    @property\u000a    def bar(self):\u000a        # return the same value\u000a        # as in the base class\u000a        return Foo.bar(self)\u000a</code></pre>\u000a\u000a<p>Though this is the most obvious thing to try I think - <strong>it does not work because bar is a property, not a callable.</strong> </p>\u000a\u000a<p>But a property is just an object, with a getter method to find the corresponding attribute:</p>\u000a\u000a<pre><code>class FooBar(Foo):\u000a\u000a    @property\u000a    def bar(self):\u000a        # return the same value\u000a        # as in the base class\u000a        return Foo.bar.fget(self)\u000a</code></pre>\u000a
p502
sVquestion_id
p503
I1021464
sVlast_activity_date
p504
I1441824784
sVcreation_date
p505
I1245498698
sVscore
p506
I62
sVowner
p507
(dp508
Vuser_id
p509
I11465
sVprofile_image
p510
Vhttps://www.gravatar.com/avatar/9820b5956634e5bbad7f4ed91a232822?s=128&d=identicon&r=PG
p511
sVuser_type
p512
Vregistered
p513
sVreputation
p514
I41819
sVlink
p515
Vhttp://stackoverflow.com/users/11465/david-cournapeau
p516
sVaccept_rate
p517
I65
sVdisplay_name
p518
VDavid Cournapeau
p519
ssVis_accepted
p520
I01
sVlast_edit_date
p521
I1441824784
sVanswer_id
p522
I1021484
sa(dp523
Vbody
p524
V<p><code>arange</code> <em>generates</em> lists (well, numpy arrays); type <code>help(np.arange)</code> for the details.  You don't need to call it on existing lists.</p>\u000a\u000a\u000a\u000a<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; x = [1,2,3,4]\u000a&gt;&gt;&gt; y = [3,5,7,9] \u000a&gt;&gt;&gt; \u000a&gt;&gt;&gt; m,b = np.polyfit(x, y, 1)\u000a&gt;&gt;&gt; m\u000a2.0000000000000009\u000a&gt;&gt;&gt; b\u000a0.99999999999999833\u000a</code></pre>\u000a\u000a<p>I should add that I tend to use <code>poly1d</code> here rather than write out "m*x+b" and the higher-order equivalents, so my version of your code would look something like this:</p>\u000a\u000a<pre class="lang-py prettyprint-override"><code>import numpy as np\u000aimport matplotlib.pyplot as plt\u000a\u000ax = [1,2,3,4]\u000ay = [3,5,7,10] # 10, not 9, so the fit isn't perfect\u000a\u000afit = np.polyfit(x,y,1)\u000afit_fn = np.poly1d(fit) \u000a# fit_fn is now a function which takes in x and returns an estimate for y\u000a\u000aplt.plot(x,y, 'yo', x, fit_fn(x), '--k')\u000aplt.xlim(0, 5)\u000aplt.ylim(0, 12)\u000a</code></pre>\u000a
p525
sVquestion_id
p526
I6148207
sVlast_activity_date
p527
I1434639857
sVcreation_date
p528
I1306475246
sVscore
p529
I103
sVowner
p530
(dp531
Vuser_id
p532
I487339
sVprofile_image
p533
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p534
sVuser_type
p535
Vregistered
p536
sVreputation
p537
I147176
sVlink
p538
Vhttp://stackoverflow.com/users/487339/dsm
p539
sVdisplay_name
p540
VDSM
p541
ssVis_accepted
p542
I01
sVlast_edit_date
p543
I1434639857
sVanswer_id
p544
I6148315
sa(dp545
Vbody
p546
V<pre><code>p.pattern\u000a</code></pre>\u000a\u000a<p>Read more about re module here:\u000a<a href="http://docs.python.org/library/re.html" rel="noreferrer">http://docs.python.org/library/re.html</a></p>\u000a
p547
sVquestion_id
p548
I1415924
sVlast_activity_date
p549
I1434024210
sVcreation_date
p550
I1252784310
sVscore
p551
I60
sVowner
p552
(dp553
Vuser_id
p554
I135237
sVprofile_image
p555
Vhttps://www.gravatar.com/avatar/39fd944926ba18b00705b66f8e96e188?s=128&d=identicon&r=PG
p556
sVuser_type
p557
Vregistered
p558
sVreputation
p559
I2696
sVlink
p560
Vhttp://stackoverflow.com/users/135237/mikhail-churbanov
p561
sVaccept_rate
p562
I100
sVdisplay_name
p563
VMikhail Churbanov
p564
ssVis_accepted
p565
I01
sVlast_edit_date
p566
I1434024210
sVanswer_id
p567
I1415932
sa(dp568
Vbody
p569
V<p>When you pass a <code>lambda</code> to <code>sort</code>, you need to return an integer, not a boolean.  So your code should instead read as follows:</p>\u000a\u000a<pre><code>xs.sort(lambda x,y: cmp(len(x), len(y)))\u000a</code></pre>\u000a\u000a<p>Note that <a href="http://docs.python.org/library/functions.html#cmp" rel="noreferrer">cmp</a> is a builtin function such that <code>cmp(x, y)</code> returns -1 if <code>x</code> is less than <code>y</code>, 0 if <code>x</code> is equal to <code>y</code>, and 1 if <code>x</code> is greater than <code>y</code>.</p>\u000a\u000a<p>Of course, you can instead use the <code>key</code> parameter:</p>\u000a\u000a<pre><code>xs.sort(key = lambda s: len(s))\u000a</code></pre>\u000a\u000a<p>This tells the <code>sort</code> method to order based on whatever the key function returns.</p>\u000a\u000a<p>EDIT: Thanks to balpha and Ruslan below for pointing out that you can just pass <code>len</code> directly as the key parameter to the function, thus eliminating the need for a <code>lambda</code>:</p>\u000a\u000a<pre><code>xs.sort(key = len)\u000a</code></pre>\u000a\u000a<p>And as Ruslan points out below, you can also use the built-in <a href="http://docs.python.org/library/functions.html#sorted" rel="noreferrer">sorted</a> function rather than the <code>list.sort</code> method, which creates a new list rather than sorting the existing one in-place:</p>\u000a\u000a<pre><code>print sorted(xs, key=len)\u000a</code></pre>\u000a
p570
sVquestion_id
p571
I2587402
sVlast_activity_date
p572
I1433207690
sVcreation_date
p573
I1270579663
sVscore
p574
I101
sVowner
p575
(dp576
Vuser_id
p577
I1694
sVprofile_image
p578
Vhttps://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=128&d=identicon&r=PG
p579
sVuser_type
p580
Vregistered
p581
sVreputation
p582
I93134
sVlink
p583
Vhttp://stackoverflow.com/users/1694/eli-courtwright
p584
sVaccept_rate
p585
I94
sVdisplay_name
p586
VEli Courtwright
p587
ssVis_accepted
p588
I01
sVlast_edit_date
p589
I1433207690
sVanswer_id
p590
I2587419
sa(dp591
Vbody
p592
V<p>You could use the<code>csv</code>module's <a href="https://docs.python.org/2/library/csv.html?highlight=sniffer#csv.Sniffer"><strong><code>Sniffer</code></strong></a> class to detect whether a header row is present and the built-in<code>next()</code>function to skip over it if necessary:</p>\u000a\u000a<pre><code>import csv\u000a\u000awith open('all16.csv', 'rb') as inf:\u000a    has_header = csv.Sniffer().has_header(inf.read(1024))\u000a    inf.seek(0)  # rewind\u000a    incsv = csv.reader(inf)\u000a    if has_header:\u000a        next(incsv)  # skip header row\u000a    column = 1\u000a    datatype = float\u000a    data = (datatype(row[column]) for row in incsv)\u000a    least_value = min(data)\u000a\u000aprint least_value\u000a</code></pre>\u000a\u000a<p>You can also skip rows with a <code>incsv.next()</code> call if you're using Python 2.x.</p>\u000a\u000a<p>Since <code>datatype</code> and <code>column</code> are hardcoded in your example, it would be slightly faster to read <code>data</code> this way:</p>\u000a\u000a<pre><code>    data = (float(row[1]) for row in incsv)\u000a</code></pre>\u000a
p593
sVquestion_id
p594
I11349333
sVlast_activity_date
p595
I1433073828
sVcreation_date
p596
I1341511883
sVscore
p597
I57
sVowner
p598
(dp599
Vuser_id
p600
I355230
sVprofile_image
p601
Vhttps://i.stack.imgur.com/VjcbL.jpg?s=128&g=1
p602
sVuser_type
p603
Vregistered
p604
sVreputation
p605
I46990
sVlink
p606
Vhttp://stackoverflow.com/users/355230/martineau
p607
sVaccept_rate
p608
I100
sVdisplay_name
p609
Vmartineau
p610
ssVis_accepted
p611
I01
sVlast_edit_date
p612
I1433073828
sVanswer_id
p613
I11350095
sa(dp614
Vbody
p615
V<p>If you just plan on doing Python dev, I'd just go with <a href="http://download.eclipse.org/eclipse/downloads/" rel="nofollow noreferrer">Platform Runtime Binary</a>.</p>\u000a\u000a<p>After that, I'd follow the instructions <a href="http://pydev.org/download.html" rel="nofollow noreferrer">http://pydev.org/download.html</a> and <a href="http://pydev.org/manual_101_root.html" rel="nofollow noreferrer">http://pydev.org/manual_101_root.html</a> to install PyDev.</p>\u000a\u000a<p>I use the same setup for Python development.  I also have the RadRails plugin for Ruby on Rails development.</p>\u000a
p616
sVquestion_id
p617
I243962
sVlast_activity_date
p618
I1430396227
sVcreation_date
p619
I1225211983
sVscore
p620
I27
sVowner
p621
(dp622
Vuser_id
p623
I2109
sVprofile_image
p624
Vhttps://www.gravatar.com/avatar/efb96383652fd8d26517086d4dbb9703?s=128&d=identicon&r=PG
p625
sVuser_type
p626
Vregistered
p627
sVreputation
p628
I9027
sVlink
p629
Vhttp://stackoverflow.com/users/2109/owen
p630
sVaccept_rate
p631
I100
sVdisplay_name
p632
VOwen
p633
ssVis_accepted
p634
I01
sVlast_edit_date
p635
I1430396227
sVanswer_id
p636
I243981
sa(dp637
Vbody
p638
V<p>The SQLAlchemy ORM uses the <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html" rel="noreferrer">unit of work</a> pattern when synchronizing changes to the database.  This pattern goes far beyond simple "inserts" of data.   It includes that attributes which are assigned on objects are received using an attribute instrumentation system which tracks changes on objects as they are made, includes that all rows inserted are tracked in an <a href="http://martinfowler.com/eaaCatalog/identityMap.html" rel="noreferrer">identity map</a> which has the effect that for each row SQLAlchemy must retrieve its "last inserted id" if not already given, and also involves that rows to be inserted are scanned and sorted for dependencies as needed.  Objects are also subject to a fair degree of bookkeeping in order to keep all of this running, which for a very large number of rows at once can create an inordinate amount of time spent with large data structures, hence it's best to chunk these.</p>\u000a\u000a<p>Basically, unit of work is a large degree of automation in order to automate the task of persisting a complex object graph into a relational database with no explicit persistence code, and this automation has a price.</p>\u000a\u000a<p>So ORMs are basically not intended for high-performance bulk inserts.   This is the whole reason why SQLAlchemy has <em>two</em> separate libraries, which you'll note if you look at <a href="http://docs.sqlalchemy.org/en/latest/index.html" rel="noreferrer">http://docs.sqlalchemy.org/en/latest/index.html</a> you'll see two distinct halves to the index page - one for the ORM and one for the Core.  You cannot use SQLAlchemy effectively without understanding both.</p>\u000a\u000a<p>For the use case of fast bulk inserts, SQLAlchemy provides the <a href="http://docs.sqlalchemy.org/en/latest/core/tutorial.html" rel="noreferrer">core</a>, which is the SQL generation and execution system that the ORM builds on top of.   Using this system effectively we can produce an INSERT that is competitive with the raw SQLite version.    The script below illustrates this, as well as an ORM version that pre-assigns primary key identifiers so that the ORM can use executemany() to insert rows.  Both ORM versions chunk the flushes at 1000 records at a time as well which has a significant performance impact.</p>\u000a\u000a<p>Runtimes observed here are:</p>\u000a\u000a<pre><code>SqlAlchemy ORM: Total time for 100000 records 16.4133379459 secs\u000aSqlAlchemy ORM pk given: Total time for 100000 records 9.77570986748 secs\u000aSqlAlchemy Core: Total time for 100000 records 0.568737983704 secs\u000asqlite3: Total time for 100000 records 0.595796823502 sec\u000a</code></pre>\u000a\u000a<p>script:</p>\u000a\u000a<pre><code>import time\u000aimport sqlite3\u000a\u000afrom sqlalchemy.ext.declarative import declarative_base\u000afrom sqlalchemy import Column, Integer, String,  create_engine\u000afrom sqlalchemy.orm import scoped_session, sessionmaker\u000a\u000aBase = declarative_base()\u000aDBSession = scoped_session(sessionmaker())\u000a\u000aclass Customer(Base):\u000a    __tablename__ = "customer"\u000a    id = Column(Integer, primary_key=True)\u000a    name = Column(String(255))\u000a\u000adef init_sqlalchemy(dbname = 'sqlite:///sqlalchemy.db'):\u000a    global engine\u000a    engine = create_engine(dbname, echo=False)\u000a    DBSession.remove()\u000a    DBSession.configure(bind=engine, autoflush=False, expire_on_commit=False)\u000a    Base.metadata.drop_all(engine)\u000a    Base.metadata.create_all(engine)\u000a\u000adef test_sqlalchemy_orm(n=100000):\u000a    init_sqlalchemy()\u000a    t0 = time.time()\u000a    for i in range(n):\u000a        customer = Customer()\u000a        customer.name = 'NAME ' + str(i)\u000a        DBSession.add(customer)\u000a        if i % 1000 == 0:\u000a            DBSession.flush()\u000a    DBSession.commit()\u000a    print "SqlAlchemy ORM: Total time for " + str(n) + " records " + str(time.time() - t0) + " secs"\u000a\u000adef test_sqlalchemy_orm_pk_given(n=100000):\u000a    init_sqlalchemy()\u000a    t0 = time.time()\u000a    for i in range(n):\u000a        customer = Customer(id=i+1, name="NAME " + str(i))\u000a        DBSession.add(customer)\u000a        if i % 1000 == 0:\u000a            DBSession.flush()\u000a    DBSession.commit()\u000a    print "SqlAlchemy ORM pk given: Total time for " + str(n) + " records " + str(time.time() - t0) + " secs"\u000a\u000adef test_sqlalchemy_core(n=100000):\u000a    init_sqlalchemy()\u000a    t0 = time.time()\u000a    engine.execute(\u000a        Customer.__table__.insert(),\u000a        [{"name":'NAME ' + str(i)} for i in range(n)]\u000a    )\u000a    print "SqlAlchemy Core: Total time for " + str(n) + " records " + str(time.time() - t0) + " secs"\u000a\u000adef init_sqlite3(dbname):\u000a    conn = sqlite3.connect(dbname)\u000a    c = conn.cursor()\u000a    c.execute("DROP TABLE IF EXISTS customer")\u000a    c.execute("CREATE TABLE customer (id INTEGER NOT NULL, name VARCHAR(255), PRIMARY KEY(id))")\u000a    conn.commit()\u000a    return conn\u000a\u000adef test_sqlite3(n=100000, dbname = 'sqlite3.db'):\u000a    conn = init_sqlite3(dbname)\u000a    c = conn.cursor()\u000a    t0 = time.time()\u000a    for i in range(n):\u000a        row = ('NAME ' + str(i),)\u000a        c.execute("INSERT INTO customer (name) VALUES (?)", row)\u000a    conn.commit()\u000a    print "sqlite3: Total time for " + str(n) + " records " + str(time.time() - t0) + " sec"\u000a\u000aif __name__ == '__main__':\u000a    test_sqlalchemy_orm(100000)\u000a    test_sqlalchemy_orm_pk_given(100000)\u000a    test_sqlalchemy_core(100000)\u000a    test_sqlite3(100000)\u000a</code></pre>\u000a\u000a<p>See also:  <a href="http://docs.sqlalchemy.org/en/latest/faq/performance.html" rel="noreferrer">http://docs.sqlalchemy.org/en/latest/faq/performance.html</a></p>\u000a
p639
sVquestion_id
p640
I11769366
sVlast_activity_date
p641
I1429813882
sVcreation_date
p642
I1343870247
sVscore
p643
I145
sVowner
p644
(dp645
Vuser_id
p646
I34549
sVprofile_image
p647
Vhttps://www.gravatar.com/avatar/7c63a03cc45f763a06149d6c99cef46c?s=128&d=identicon&r=PG
p648
sVuser_type
p649
Vregistered
p650
sVreputation
p651
I38836
sVlink
p652
Vhttp://stackoverflow.com/users/34549/zzzeek
p653
sVaccept_rate
p654
I80
sVdisplay_name
p655
Vzzzeek
p656
ssVis_accepted
p657
I01
sVlast_edit_date
p658
I1429813882
sVanswer_id
p659
I11769768
sa(dp660
Vbody
p661
V<p>It's perhaps simplest to remember it as <em>0=down</em> and <em>1=across</em>. </p>\u000a\u000a<p>This means:</p>\u000a\u000a<ul>\u000a<li>Use <code>axis=0</code> to apply a method down each column, or to the row labels (the index).</li>\u000a<li>Use <code>axis=1</code> to apply a method across each row, or to the column labels.</li>\u000a</ul>\u000a\u000a<p>Here's a picture to show the parts of a DataFrame that each axis refers to:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/DL0iQ.jpg" width="410" height="210"></p>\u000a\u000a<p>It's also useful to remember that Pandas follows NumPy's use of the word <code>axis</code>. The usage is explained in NumPy's <a href="http://docs.scipy.org/doc/numpy/glossary.html">glossary of terms</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Axes are defined for arrays with more than one dimension. A 2-dimensional array has two corresponding axes: the first running vertically <strong>downwards across rows (axis 0)</strong>, and the second running <strong>horizontally across columns (axis 1)</strong>. [<em>my emphasis</em>] </p>\u000a</blockquote>\u000a\u000a<p>So, concerning the method in the question, <code>df.mean(axis=1)</code>, seems to be correctly defined. It takes the mean of entries <em>horizontally across columns</em>, that is, along each individual row. On the other hand, <code>df.mean(axis=0)</code> would be an operation acting vertically <em>downwards across rows</em>.</p>\u000a\u000a<p>Similarly, <code>df.drop(name, axis=1)</code> refers to an action on column labels, because they intuitively go across the horizontal axis. Specifying <code>axis=0</code> would make the method act on rows instead.</p>\u000a
p662
sVquestion_id
p663
I25773245
sVlast_activity_date
p664
I1424991652
sVcreation_date
p665
I1410380445
sVscore
p666
I97
sVowner
p667
(dp668
Vuser_id
p669
I3923281
sVprofile_image
p670
Vhttps://i.stack.imgur.com/CNpoa.jpg?s=128&g=1
p671
sVuser_type
p672
Vregistered
p673
sVreputation
p674
I47212
sVlink
p675
Vhttp://stackoverflow.com/users/3923281/alex-riley
p676
sVdisplay_name
p677
VAlex Riley
p678
ssVis_accepted
p679
I01
sVlast_edit_date
p680
I1424991652
sVanswer_id
p681
I25774395
sa(dp682
Vbody
p683
V<pre class="lang-py prettyprint-override"><code>import csv\u000atoCSV = [{'name':'bob','age':25,'weight':200},\u000a         {'name':'jim','age':31,'weight':180}]\u000akeys = toCSV[0].keys()\u000awith open('people.csv', 'wb') as output_file:\u000a    dict_writer = csv.DictWriter(output_file, keys)\u000a    dict_writer.writeheader()\u000a    dict_writer.writerows(toCSV)\u000a</code></pre>\u000a\u000a<p>EDIT: My prior solution doesn't handle the order.  As noted by Wilduck, DictWriter is more appropriate here.</p>\u000a
p684
sVquestion_id
p685
I3086973
sVlast_activity_date
p686
I1421802278
sVcreation_date
p687
I1277142068
sVscore
p688
I108
sVowner
p689
(dp690
Vuser_id
p691
I47773
sVprofile_image
p692
Vhttps://www.gravatar.com/avatar/e72946d7c81ee170b322f6e6abae3442?s=128&d=identicon&r=PG
p693
sVuser_type
p694
Vregistered
p695
sVreputation
p696
I188293
sVlink
p697
Vhttp://stackoverflow.com/users/47773/matthew-flaschen
p698
sVaccept_rate
p699
I52
sVdisplay_name
p700
VMatthew Flaschen
p701
ssVis_accepted
p702
I01
sVlast_edit_date
p703
I1421802278
sVanswer_id
p704
I3087011
sa(dp705
Vbody
p706
V<p><strong>requests</strong></p>\u000a\u000a<p><a href="https://github.com/kennethreitz/requests/">https://github.com/kennethreitz/requests/</a></p>\u000a\u000a<p>Here's a few common ways to use it:</p>\u000a\u000a<pre><code>import requests\u000aurl = 'https://...'\u000apayload = {'key1': 'value1', 'key2': 'value2'}\u000a\u000a# GET\u000ar = requests.get(url)\u000a\u000a# GET with params in URL\u000ar = requests.get(url, params=payload)\u000a\u000a# POST with form-encoded data\u000ar = requests.post(url, data=payload)\u000a\u000a# POST with JSON \u000aimport json\u000ar = requests.post(url, data=json.dumps(payload))\u000a\u000a# Response, status etc\u000ar.text\u000ar.status_code\u000a</code></pre>\u000a\u000a<p><strong>httplib2</strong></p>\u000a\u000a<p><a href="https://github.com/jcgregorio/httplib2">https://github.com/jcgregorio/httplib2</a></p>\u000a\u000a<pre><code>&gt;&gt;&gt; from httplib2 import Http\u000a&gt;&gt;&gt; from urllib import urlencode\u000a&gt;&gt;&gt; h = Http()\u000a&gt;&gt;&gt; data = dict(name="Joe", comment="A test comment")\u000a&gt;&gt;&gt; resp, content = h.request("http://bitworking.org/news/223/Meet-Ares", "POST", urlencode(data))\u000a&gt;&gt;&gt; resp\u000a{'status': '200', 'transfer-encoding': 'chunked', 'vary': 'Accept-Encoding,User-Agent',\u000a 'server': 'Apache', 'connection': 'close', 'date': 'Tue, 31 Jul 2007 15:29:52 GMT', \u000a 'content-type': 'text/html'}\u000a</code></pre>\u000a
p707
sVquestion_id
p708
I4476373
sVlast_activity_date
p709
I1421661386
sVcreation_date
p710
I1292641724
sVscore
p711
I69
sVowner
p712
(dp713
Vuser_id
p714
I238639
sVprofile_image
p715
Vhttps://www.gravatar.com/avatar/3d4fdae18c7202ed91e2cbaf7600a746?s=128&d=identicon&r=PG
p716
sVuser_type
p717
Vregistered
p718
sVreputation
p719
I33276
sVlink
p720
Vhttp://stackoverflow.com/users/238639/bakkal
p721
sVdisplay_name
p722
Vbakkal
p723
ssVis_accepted
p724
I01
sVlast_edit_date
p725
I1421661386
sVanswer_id
p726
I4476389
sa(dp727
Vbody
p728
V<p>Firstly, do you want to support creating new book instances, or only updating existing ones?</p>\u000a\u000a<p>If you only ever wanted to create new book instances you could do something like this...</p>\u000a\u000a<pre><code>class PageSerializer(serializers.Serializer):\u000a    text = serializers.CharField(max_length=500)\u000a\u000aclass BookSerializer(serializers.Serializer):\u000a    page = PageSerializer(many=True)\u000a    title = serializers.CharField(max_length=50)\u000a\u000a    def create(self, validated_data):\u000a        # Create the book instance\u000a        book = Book.objects.create(title=validated_data['title'])\u000a\u000a        # Create or update each page instance\u000a        for item in validated_data['pages']:\u000a            page = Page(id=item['page_id'], text=item['text'], book=book)\u000a            page.save()\u000a\u000a        return book\u000a</code></pre>\u000a\u000a<p>Note that I <em>haven't</em> included the <code>book_id</code> here. When we're creating book instances we won't be including a book id. When we're updating book instances we'll typically include the book id as part of the URL, rather than in the request data.</p>\u000a\u000a<p>If you want to support both create and update of book instances then you need to think about how you want to handle pages that are not included in the request, but <em>are</em> currently associated with the book instance.</p>\u000a\u000a<p>You might choose to silently ignore those pages and leave them as they are, you might want to raise a validation error, or you might want to delete them.</p>\u000a\u000a<p>Let's assume that you want to delete any pages not included in the request.</p>\u000a\u000a<pre><code>def create(self, validated_data):\u000a    # As before.\u000a    ...\u000a\u000adef update(self, instance, validated_data):\u000a    # Update the book instance\u000a    instance.title = validated_data['title']\u000a    instance.save()\u000a\u000a    # Delete any pages not included in the request\u000a    page_ids = [item['page_id'] for item in validated_data['pages']]\u000a    for page in instance.books:\u000a        if page.id not in page_ids:\u000a            page.delete()\u000a\u000a    # Create or update page instances that are in the request\u000a    for item in validated_data['pages']:\u000a        page = Page(id=item['page_id'], text=item['text'], book=instance)\u000a        page.save()\u000a\u000a    return instance\u000a</code></pre>\u000a\u000a<p>It's also possible that you might want to <em>only</em> support book updates, and not support creation, in which case, <em>only</em> include the <code>update()</code> method.</p>\u000a\u000a<p>There are also various ways you could reduce the number of queries eg. using bulk create/deletion, but the above would do the job in a fairly straightforward way.</p>\u000a\u000a<p>As you can see there are subtleties in the types of behavior you might want when dealing with nested data, so think carefully about exactly what behavior you're expecting in various cases.</p>\u000a\u000a<p>Also note that I've been using <code>Serializer</code> in the above example rather than <code>ModelSerializer</code>. In this case it's simpler just to include all the fields in the serializer class explicitly, rather than relying on the automatic set of fields that <code>ModelSerializer</code> generates by default.</p>\u000a
p729
sVquestion_id
p730
I27434593
sVlast_activity_date
p731
I1419115739
sVcreation_date
p732
I1419115739
sVscore
p733
I75
sVowner
p734
(dp735
Vuser_id
p736
I596689
sVprofile_image
p737
Vhttps://www.gravatar.com/avatar/c498214bc28f28b61212169dcc372fbf?s=128&d=identicon&r=PG
p738
sVuser_type
p739
Vregistered
p740
sVreputation
p741
I19788
sVlink
p742
Vhttp://stackoverflow.com/users/596689/tom-christie
p743
sVaccept_rate
p744
I77
sVdisplay_name
p745
VTom Christie
p746
ssVis_accepted
p747
I01
sVanswer_id
p748
I27585066
sa(dp749
Vbody
p750
V<p>On Ubuntu it is advised to use the distributions repository. So installing python-mysqldb should be straight forward:</p>\u000a\u000a<pre><code>sudo apt-get install python-mysqldb\u000a</code></pre>\u000a\u000a<p>If you actually want to use pip to install, which is as mentioned before not the suggested path but possible, please have a look at this previously asked question and answer: <a href="http://stackoverflow.com/questions/5178292/pip-install-mysql-python-show-error">pip install mysql-python fails with EnvironmentError: mysql_config not found</a></p>\u000a\u000a<p>Here is a very comprehensive guide by the developer: <a href="http://mysql-python.blogspot.no/2012/11/is-mysqldb-hard-to-install.html" rel="noreferrer">http://mysql-python.blogspot.no/2012/11/is-mysqldb-hard-to-install.html</a></p>\u000a\u000a<p>To get all the prerequisites for python-mysqld to install it using pip (which you will want to do if you are using virtualenv), run this:</p>\u000a\u000a<pre><code>sudo apt-get install build-essential python-dev libmysqlclient-dev\u000a</code></pre>\u000a
p751
sVquestion_id
p752
I7459766
sVlast_activity_date
p753
I1415273206
sVcreation_date
p754
I1316351037
sVscore
p755
I129
sVowner
p756
(dp757
Vuser_id
p758
I948369
sVprofile_image
p759
Vhttps://www.gravatar.com/avatar/d4ef98bb6b9fa36ebde9b7fc2b333bbb?s=128&d=identicon&r=PG
p760
sVuser_type
p761
Vregistered
p762
sVreputation
p763
I1694
sVlink
p764
Vhttp://stackoverflow.com/users/948369/glaslos
p765
sVaccept_rate
p766
I100
sVdisplay_name
p767
VGlaslos
p768
ssVis_accepted
p769
I01
sVlast_edit_date
p770
I1415273206
sVanswer_id
p771
I7461662
sa(dp772
Vbody
p773
V<p>No, <a href="https://docs.djangoproject.com/en/dev/topics/db/models/#field-name-hiding-is-not-permitted" rel="noreferrer">it is not</a>:</p>\u000a\u000a<blockquote>\u000a  <h3>Field name \u201chiding\u201d is not permitted</h3>\u000a  \u000a  <p>In normal Python class inheritance, it is permissible for a child\u000a  class to override any attribute from the parent class. In Django, this\u000a  is not permitted for attributes that are <code>Field</code> instances (at least,\u000a  not at the moment). If a base class has a field called <code>author</code>, you\u000a  cannot create another model field called <code>author</code> in any class that\u000a  inherits from that base class.</p>\u000a</blockquote>\u000a
p774
sVquestion_id
p775
I2344751
sVlast_activity_date
p776
I1410307618
sVcreation_date
p777
I1267466900
sVscore
p778
I43
sVowner
p779
(dp780
Vuser_id
p781
I76199
sVprofile_image
p782
Vhttps://www.gravatar.com/avatar/d38343994d650e09acf2861e4b5db41a?s=128&d=identicon&r=PG
p783
sVuser_type
p784
Vregistered
p785
sVreputation
p786
I494
sVlink
p787
Vhttp://stackoverflow.com/users/76199/ptone
p788
sVdisplay_name
p789
Vptone
p790
ssVis_accepted
p791
I01
sVlast_edit_date
p792
I1410307618
sVanswer_id
p793
I2357942
sa(dp794
Vbody
p795
V<p>Nope, BeautifulSoup, by itself, does not support XPath expressions.</p>\u000a\u000a<p>An alternative library, <a href="http://lxml.de/">lxml</a>, <em>does</em> support XPath 1.0. It has a <a href="http://lxml.de/elementsoup.html">BeautifulSoup compatible mode</a> where it'll try and parse broken HTML the way Soup does. However, the <a href="http://lxml.de/parsing.html">default lxml HTML parser</a> does just as good a job of parsing broken HTML, and I believe is faster.</p>\u000a\u000a<p>Once you've parsed your document into an lxml tree, you can use the <code>.xpath()</code> method to search for elements.</p>\u000a\u000a<pre><code>import urllib2\u000afrom lxml import etree\u000a\u000aurl =  "http://www.example.com/servlet/av/ResultTemplate=AVResult.html"\u000aresponse = urllib2.urlopen(url)\u000ahtmlparser = etree.HTMLParser()\u000atree = etree.parse(response, htmlparser)\u000atree.xpath(xpathselector)\u000a</code></pre>\u000a\u000a<p>Of possible interest to you is the <a href="http://lxml.de/cssselect.html">CSS Selector support</a>; the <code>CSSSelector</code> class translates CSS statements into XPath expressions, making your search for <code>td.empformbody</code> that much easier:</p>\u000a\u000a<pre><code>from lxml.cssselect import CSSSelector\u000a\u000atd_empformbody = CSSSelector('td.empformbody')\u000afor elem in td_empformbody(tree):\u000a    # Do something with these table cells.\u000a</code></pre>\u000a\u000a<p>Coming full circle: BeautifulSoup itself <em>does</em> have pretty decent <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors">CSS selector support</a>:</p>\u000a\u000a<pre><code>for cell in soup.select('table#foobar td.empformbody'):\u000a    # Do something with these table cells.\u000a</code></pre>\u000a
p796
sVquestion_id
p797
I11465555
sVlast_activity_date
p798
I1399940844
sVcreation_date
p799
I1342164701
sVscore
p800
I89
sVowner
p801
(dp802
Vuser_id
p803
I100297
sVprofile_image
p804
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p805
sVuser_type
p806
Vmoderator
p807
sVreputation
p808
I554897
sVlink
p809
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p810
sVdisplay_name
p811
VMartijn Pieters
p812
ssVis_accepted
p813
I01
sVlast_edit_date
p814
I1399940844
sVanswer_id
p815
I11466033
sa(dp816
Vbody
p817
V<p>Loop over the file to read lines:</p>\u000a\u000a<pre><code>with open('somefile') as openfileobject:\u000a    for line in openfileobject:\u000a        do_something()\u000a</code></pre>\u000a\u000a<p>File objects are iterable and yield lines until EOF. Using the file object as an iterable uses  a buffer to ensure performant reads.</p>\u000a\u000a<p>You can do the same with the stdin (no need to use <code>raw_input()</code>:</p>\u000a\u000a<pre><code>import sys\u000a\u000afor line in sys.stdin:\u000a    do_something()\u000a</code></pre>\u000a\u000a<p>To complete the picture, binary reads can be done with:</p>\u000a\u000a<pre><code>from functools import partial\u000a\u000awith open('somefile', 'rb') as openfileobject:\u000a    for chunk in iter(partial(openfileobject.read, 1024), ''):\u000a        do_something()\u000a</code></pre>\u000a\u000a<p>where <code>chunk</code> will contain up to 1024 bytes at a time from the file.</p>\u000a
p818
sVquestion_id
p819
I15599639
sVlast_activity_date
p820
I1396339126
sVcreation_date
p821
I1364135183
sVscore
p822
I101
sVowner
p823
(dp824
Vuser_id
p825
I100297
sVprofile_image
p826
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p827
sVuser_type
p828
Vmoderator
p829
sVreputation
p830
I554897
sVlink
p831
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p832
sVdisplay_name
p833
VMartijn Pieters
p834
ssVis_accepted
p835
I01
sVlast_edit_date
p836
I1396339126
sVanswer_id
p837
I15599648
sa(dp838
Vbody
p839
V<p>You can use the python sorting functions' <code>key</code> parameter to sort the index array instead.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; s = [2, 3, 1, 4, 5]\u000a&gt;&gt;&gt; sorted(range(len(s)), key=lambda k: s[k])\u000a[2, 0, 1, 3, 4]\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a
p840
sVquestion_id
p841
I7851077
sVlast_activity_date
p842
I1394919394
sVcreation_date
p843
I1319208639
sVscore
p844
I106
sVowner
p845
(dp846
Vuser_id
p847
I53850
sVprofile_image
p848
Vhttps://www.gravatar.com/avatar/26b8c45762e996c0de755eb3c7f421a8?s=128&d=identicon&r=PG
p849
sVuser_type
p850
Vregistered
p851
sVreputation
p852
I46647
sVlink
p853
Vhttp://stackoverflow.com/users/53850/sykora
p854
sVdisplay_name
p855
Vsykora
p856
ssVis_accepted
p857
I01
sVlast_edit_date
p858
I1394919394
sVanswer_id
p859
I7851166
sa(dp860
Vbody
p861
V<p>I had the same problem (though on Linux). The solution was quite simple - add:</p>\u000a\u000a<pre><code>libraries:\u000a- name: pycrypto\u000a  version: "2.6"\u000a</code></pre>\u000a\u000a<p>to my app.yaml file. Since this worked correctly in the past, I assume this is a new requirement.</p>\u000a
p862
sVquestion_id
p863
I19623267
sVlast_activity_date
p864
I1384572532
sVcreation_date
p865
I1384572532
sVscore
p866
I27
sVowner
p867
(dp868
Vuser_id
p869
I2998519
sVprofile_image
p870
Vhttps://www.gravatar.com/avatar/89492f0083bbba8f88eb4360bcda824b?s=128&d=identicon&r=PG&f=1
p871
sVuser_type
p872
Vregistered
p873
sVreputation
p874
I294
sVlink
p875
Vhttp://stackoverflow.com/users/2998519/patrick-jordan
p876
sVdisplay_name
p877
VPatrick Jordan
p878
ssVis_accepted
p879
I01
sVanswer_id
p880
I20014293
sa(dp881
Vbody
p882
V<p>The following gives what you want:</p>\u000a\u000a<pre><code>df = DataFrame(table, columns=headers)\u000adf\u000a</code></pre>\u000a\u000a<p>outputs</p>\u000a\u000a<pre><code>Out[7]:\u000a   Heading1  Heading2\u000a0         1         2\u000a1         3         4\u000a</code></pre>\u000a
p883
sVquestion_id
p884
I19112398
sVlast_activity_date
p885
I1380620472
sVcreation_date
p886
I1380620472
sVscore
p887
I96
sVowner
p888
(dp889
Vuser_id
p890
I704848
sVprofile_image
p891
Vhttps://www.gravatar.com/avatar/3f9be2c2958e208c8d9b629ac43c9c42?s=128&d=identicon&r=PG
p892
sVuser_type
p893
Vregistered
p894
sVreputation
p895
I103173
sVlink
p896
Vhttp://stackoverflow.com/users/704848/edchum
p897
sVdisplay_name
p898
VEdChum
p899
ssVis_accepted
p900
I01
sVanswer_id
p901
I19112890
sa(dp902
Vbody
p903
V<p>Why not like this:</p>\u000a\u000a<pre><code>entries = ('a', 'b', 'c')\u000athe_dict = {'b': 'foo'}\u000a\u000adef entries_to_remove(entries, the_dict):\u000a    for key in entries:\u000a        if key in the_dict:\u000a            del the_dict[key]\u000a</code></pre>\u000a
p904
sVquestion_id
p905
I8995611
sVlast_activity_date
p906
I1380104662
sVcreation_date
p907
I1327447223
sVscore
p908
I22
sVowner
p909
(dp910
Vuser_id
p911
I948369
sVprofile_image
p912
Vhttps://www.gravatar.com/avatar/d4ef98bb6b9fa36ebde9b7fc2b333bbb?s=128&d=identicon&r=PG
p913
sVuser_type
p914
Vregistered
p915
sVreputation
p916
I1694
sVlink
p917
Vhttp://stackoverflow.com/users/948369/glaslos
p918
sVaccept_rate
p919
I100
sVdisplay_name
p920
VGlaslos
p921
ssVis_accepted
p922
I01
sVlast_edit_date
p923
I1380104662
sVanswer_id
p924
I8995760
sa(dp925
Vbody
p926
V<p>Using <a href="http://lxml.de/" rel="noreferrer">lxml</a>:</p>\u000a\u000a<pre><code>from lxml import etree\u000a\u000a# create XML \u000aroot = etree.Element('root')\u000aroot.append(etree.Element('child'))\u000a# another child with text\u000achild = etree.Element('child')\u000achild.text = 'some text'\u000aroot.append(child)\u000a\u000a# pretty string\u000as = etree.tostring(root, pretty_print=True)\u000aprint s\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre><code>&lt;root&gt;\u000a  &lt;child/&gt;\u000a  &lt;child&gt;some text&lt;/child&gt;\u000a&lt;/root&gt;\u000a</code></pre>\u000a\u000a<p>See the <a href="http://lxml.de/tutorial.html" rel="noreferrer">tutorial</a> for more information.</p>\u000a
p927
sVquestion_id
p928
I3844360
sVlast_activity_date
p929
I1377680570
sVcreation_date
p930
I1285994991
sVscore
p931
I67
sVowner
p932
(dp933
Vuser_id
p934
I2611
sVprofile_image
p935
Vhttps://www.gravatar.com/avatar/3d9b2df0d1610c9418ba9e9013dbd418?s=128&d=identicon&r=PG
p936
sVuser_type
p937
Vregistered
p938
sVreputation
p939
I64105
sVlink
p940
Vhttp://stackoverflow.com/users/2611/ars
p941
sVdisplay_name
p942
Vars
p943
ssVis_accepted
p944
I01
sVlast_edit_date
p945
I1377680570
sVanswer_id
p946
I3844432
sa(dp947
Vbody
p948
V<p>This functionality is now (at least as of 1.2.0, maybe 1.1) baked into matplotlib via the <code>MovieWriter</code> class and it's sub-classes in the <code>animation</code> module.   </p>\u000a\u000a<pre><code>import matplotlib.animation as animation\u000aimport numpy as np\u000afrom pylab import *\u000a\u000a\u000adpi = 100\u000a\u000adef ani_frame():\u000a    fig = plt.figure()\u000a    ax = fig.add_subplot(111)\u000a    ax.set_aspect('equal')\u000a    ax.get_xaxis().set_visible(False)\u000a    ax.get_yaxis().set_visible(False)\u000a\u000a    im = ax.imshow(rand(300,300),cmap='gray',interpolation='nearest')\u000a    im.set_clim([0,1])\u000a    fig.set_size_inches([5,5])\u000a\u000a\u000a    tight_layout()\u000a\u000a\u000a    def update_img(n):\u000a        tmp = rand(300,300)\u000a        im.set_data(tmp)\u000a        return im\u000a\u000a    #legend(loc=0)\u000a    ani = animation.FuncAnimation(fig,update_img,300,interval=30)\u000a    writer = animation.writers['ffmpeg'](fps=30)\u000a\u000a    ani.save('demo.mp4',writer=writer,dpi=dpi)\u000a    return ani\u000a</code></pre>\u000a\u000a<p><a href="http://matplotlib.org/api/animation_api.html#animation" rel="noreferrer">Documentation for <code>animation</code></a></p>\u000a
p949
sVquestion_id
p950
I4092927
sVlast_activity_date
p951
I1376419551
sVcreation_date
p952
I1356059617
sVscore
p953
I35
sVowner
p954
(dp955
Vuser_id
p956
I380231
sVprofile_image
p957
Vhttps://www.gravatar.com/avatar/8744048060e5931c500d3c9d1ecb997e?s=128&d=identicon&r=PG
p958
sVuser_type
p959
Vregistered
p960
sVreputation
p961
I41379
sVlink
p962
Vhttp://stackoverflow.com/users/380231/tacaswell
p963
sVaccept_rate
p964
I100
sVdisplay_name
p965
Vtacaswell
p966
ssVis_accepted
p967
I01
sVlast_edit_date
p968
I1376419551
sVanswer_id
p969
I13983801
sa(dp970
Vbody
p971
V<pre><code>DATA = { u'spam': u'eggs', u'foo': frozenset([u'Gah!']), u'bar': { u'baz': 97 },\u000a         u'list': [u'list', (True, u'Maybe'), set([u'and', u'a', u'set', 1])]}\u000a\u000adef convert(data):\u000a    if isinstance(data, basestring):\u000a        return str(data)\u000a    elif isinstance(data, collections.Mapping):\u000a        return dict(map(convert, data.iteritems()))\u000a    elif isinstance(data, collections.Iterable):\u000a        return type(data)(map(convert, data))\u000a    else:\u000a        return data\u000a\u000aprint DATA\u000aprint convert(DATA)\u000a# Prints:\u000a# {u'list': [u'list', (True, u'Maybe'), set([u'and', u'a', u'set', 1])], u'foo': frozenset([u'Gah!']), u'bar': {u'baz': 97}, u'spam': u'eggs'}\u000a# {'bar': {'baz': 97}, 'foo': frozenset(['Gah!']), 'list': ['list', (True, 'Maybe'), set(['and', 'a', 'set', 1])], 'spam': 'eggs'}\u000a</code></pre>\u000a\u000a<p>Assumptions:</p>\u000a\u000a<ul>\u000a<li>You've imported the collections module and can make use of the abstract base classes it provides</li>\u000a<li>You're happy to convert using the default encoding (use <code>data.encode('utf-8')</code> rather than <code>str(data)</code> if you need an explicit encoding).</li>\u000a</ul>\u000a\u000a<p>If you need to support other container types, hopefully it's obvious how to follow the pattern and add cases for them.</p>\u000a
p972
sVquestion_id
p973
I1254454
sVlast_activity_date
p974
I1373237246
sVcreation_date
p975
I1249905834
sVscore
p976
I116
sVowner
p977
(dp978
Vuser_id
p979
I21886
sVprofile_image
p980
Vhttps://www.gravatar.com/avatar/38750c50c11e6054c2123073b17b18fc?s=128&d=identicon&r=PG
p981
sVuser_type
p982
Vregistered
p983
sVreputation
p984
I160529
sVlink
p985
Vhttp://stackoverflow.com/users/21886/richiehindle
p986
sVaccept_rate
p987
I87
sVdisplay_name
p988
VRichieHindle
p989
ssVis_accepted
p990
I01
sVlast_edit_date
p991
I1373237246
sVanswer_id
p992
I1254499
sa(dp993
Vbody
p994
V<p><code>reset</code> has been replaced by <code>flush</code> with Django 1.5, see:\u000a</p>\u000a\u000a<pre><code>python manage.py help flush\u000a</code></pre>\u000a
p995
sVquestion_id
p996
I15454008
sVlast_activity_date
p997
I1363464052
sVcreation_date
p998
I1363464052
sVscore
p999
I92
sVowner
p1000
(dp1001
Vuser_id
p1002
I893780
sVprofile_image
p1003
Vhttps://i.stack.imgur.com/3j1db.jpg?s=128&g=1
p1004
sVuser_type
p1005
Vregistered
p1006
sVreputation
p1007
I93055
sVlink
p1008
Vhttp://stackoverflow.com/users/893780/robertklep
p1009
sVdisplay_name
p1010
Vrobertklep
p1011
ssVis_accepted
p1012
I01
sVanswer_id
p1013
I15454063
sa(dp1014
Vbody
p1015
V<p>This is very much a database-specific issue.</p>\u000a\u000a<p>I know that PostgreSQL and MySQL have the ability to order by a random function, so you can use this in SQLAlchemy:</p>\u000a\u000a<pre><code>from  sqlalchemy.sql.expression import func, select\u000a\u000aselect.order_by(func.random()) # for PostgreSQL, SQLite\u000a\u000aselect.order_by(func.rand()) # for MySQL\u000a\u000aselect.order_by('dbms_random.value') # For Oracle\u000a</code></pre>\u000a\u000a<p>Next, you need to limit the query by the number of records you need (for example using <code>.limit()</code>).</p>\u000a\u000a<p>Bear in mind that at least in PostgreSQL, selecting random record has severe perfomance issues; <a href="http://www.depesz.com/index.php/2007/09/16/my-thoughts-on-getting-random-row/" rel="noreferrer">here</a> is good article about it.</p>\u000a
p1016
sVquestion_id
p1017
I60805
sVlast_activity_date
p1018
I1348345865
sVcreation_date
p1019
I1221336568
sVscore
p1020
I68
sVowner
p1021
(dp1022
Vuser_id
p1023
I4999
sVprofile_image
p1024
Vhttps://www.gravatar.com/avatar/ae995fa03b218e7c27a608b5f14e68ae?s=128&d=identicon&r=PG
p1025
sVuser_type
p1026
Vregistered
p1027
sVreputation
p1028
I15812
sVlink
p1029
Vhttp://stackoverflow.com/users/4999/%c5%81ukasz
p1030
sVdisplay_name
p1031
V\u0141ukasz
p1032
ssVis_accepted
p1033
I01
sVlast_edit_date
p1034
I1348345865
sVanswer_id
p1035
I60815
sa(dp1036
Vbody
p1037
V<pre><code>In [92]: df\u000aOut[92]:\u000a           a         b          c         d\u000aA  -0.488816  0.863769   4.325608 -4.721202\u000aB -11.937097  2.993993 -12.916784 -1.086236\u000aC  -5.569493  4.672679  -2.168464 -9.315900\u000aD   8.892368  0.932785   4.535396  0.598124\u000a\u000aIn [93]: df_norm = (df - df.mean()) / (df.max() - df.min())\u000a\u000aIn [94]: df_norm\u000aOut[94]:\u000a          a         b         c         d\u000aA  0.085789 -0.394348  0.337016 -0.109935\u000aB -0.463830  0.164926 -0.650963  0.256714\u000aC -0.158129  0.605652 -0.035090 -0.573389\u000aD  0.536170 -0.376229  0.349037  0.426611\u000a\u000aIn [95]: df_norm.mean()\u000aOut[95]:\u000aa   -2.081668e-17\u000ab    4.857226e-17\u000ac    1.734723e-17\u000ad   -1.040834e-17\u000a\u000aIn [96]: df_norm.max() - df_norm.min()\u000aOut[96]:\u000aa    1\u000ab    1\u000ac    1\u000ad    1\u000a</code></pre>\u000a
p1038
sVquestion_id
p1039
I12525722
sVlast_activity_date
p1040
I1348211655
sVcreation_date
p1041
I1348211655
sVscore
p1042
I102
sVowner
p1043
(dp1044
Vuser_id
p1045
I1548051
sVprofile_image
p1046
Vhttps://www.gravatar.com/avatar/468f540caebe33dee286d9e09603e462?s=128&d=identicon&r=PG
p1047
sVuser_type
p1048
Vregistered
p1049
sVreputation
p1050
I16612
sVlink
p1051
Vhttp://stackoverflow.com/users/1548051/wouter-overmeire
p1052
sVdisplay_name
p1053
VWouter Overmeire
p1054
ssVis_accepted
p1055
I01
sVanswer_id
p1056
I12525836
sa(dp1057
Vbody
p1058
V<p>In support of Stallman's position, Python does not do the same thing as typical Lisp systems in the following areas:</p>\u000a\u000a<ul>\u000a<li><p>The <code>read</code> function in Lisp reads an S-expression, which represents an arbitrary data structure that can either be treated as data, or evaluated as code. The closest thing in Python reads a single string, which you would have to parse yourself if you want it to mean anything.</p></li>\u000a<li><p>The <code>eval</code> function in Lisp can execute any Lisp code. The <code>eval</code> function in Python evaluates <em>only</em> expressions, and needs the <code>exec</code> statement to run statements. But both these work with Python source code represented as text, and you have to jump through a bunch of hoops to "eval" a Python AST.</p></li>\u000a<li><p>The <code>print</code> function in Lisp writes out an S-expression in exactly the same form that <code>read</code> accepts. <code>print</code> in Python prints out something defined by the data you're trying to print, which is certainly not always reversible.</p></li>\u000a</ul>\u000a\u000a<p>Stallman's statement is a bit disingenuous, because clearly Python <em>does</em> have functions named exactly <code>eval</code> and <code>print</code>, but they do something different (and inferior) to what he expects.</p>\u000a\u000a<p>In my opinion, Python <em>does</em> have some aspects similar to Lisp, and I can understand why people might have recommended that Stallman look into Python. However, as <a href="http://www.paulgraham.com/diff.html">Paul Graham argues in What Made Lisp Different</a>, any programming language that includes all the capabilities of Lisp, must also <em>be</em> Lisp.</p>\u000a
p1059
sVquestion_id
p1060
I12253200
sVlast_activity_date
p1061
I1346702029
sVcreation_date
p1062
I1346701557
sVscore
p1063
I52
sVowner
p1064
(dp1065
Vuser_id
p1066
I893
sVprofile_image
p1067
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p1068
sVuser_type
p1069
Vregistered
p1070
sVreputation
p1071
I552714
sVlink
p1072
Vhttp://stackoverflow.com/users/893/greg-hewgill
p1073
sVaccept_rate
p1074
I85
sVdisplay_name
p1075
VGreg Hewgill
p1076
ssVis_accepted
p1077
I01
sVlast_edit_date
p1078
I1346702029
sVanswer_id
p1079
I12253272
sa(dp1080
Vbody
p1081
V<p>Use <a href="http://docs.python.org/library/os.html#os.rename" rel="noreferrer"><code>os.rename</code></a><code>('a.txt','b.kml')</code></p>\u000a
p1082
sVquestion_id
p1083
I2491222
sVlast_activity_date
p1084
I1343588560
sVcreation_date
p1085
I1269252052
sVscore
p1086
I94
sVowner
p1087
(dp1088
Vuser_id
p1089
I213464
sVprofile_image
p1090
Vhttps://www.gravatar.com/avatar/7f7ff8ab69ce836df0bf9af5acc689af?s=128&d=identicon&r=PG
p1091
sVuser_type
p1092
Vregistered
p1093
sVreputation
p1094
I67371
sVlink
p1095
Vhttp://stackoverflow.com/users/213464/you
p1096
sVaccept_rate
p1097
I100
sVdisplay_name
p1098
VYOU
p1099
ssVis_accepted
p1100
I01
sVlast_edit_date
p1101
I1343588560
sVanswer_id
p1102
I2491232
sa(dp1103
Vbody
p1104
V<p>If you check out the <a href="http://docs.python.org/library/subprocess.html#replacing-os-system" rel="noreferrer">subprocess section of the Python docs</a>, you'll notice there is an example of how to replace <code>os.system()</code> with <code>subprocess.Popen()</code>:</p>\u000a\u000a<pre><code>sts = os.system("mycmd" + " myarg")\u000a</code></pre>\u000a\u000a<p>...does the same thing as...</p>\u000a\u000a<pre><code>sts = Popen("mycmd" + " myarg", shell=True).wait()\u000a</code></pre>\u000a\u000a<p>The "improved" code looks more complicated, but it's better because once you know <code>subprocess.Popen()</code>, you don't need anything else. <code>subprocess.Popen()</code> replaces several other tools (<code>os.system()</code> is just one of those) that were scattered throughout three other Python modules.</p>\u000a\u000a<p>If it helps, think of <code>subprocess.Popen()</code> as a very flexible <code>os.system()</code>.</p>\u000a
p1105
sVquestion_id
p1106
I4813238
sVlast_activity_date
p1107
I1341427208
sVcreation_date
p1108
I1296111372
sVscore
p1109
I44
sVowner
p1110
(dp1111
Vuser_id
p1112
I110358
sVprofile_image
p1113
Vhttps://www.gravatar.com/avatar/13c7ad63eb27047a7ff869d27e40c1ad?s=128&d=identicon&r=PG
p1114
sVuser_type
p1115
Vregistered
p1116
sVreputation
p1117
I13395
sVlink
p1118
Vhttp://stackoverflow.com/users/110358/jacob-marble
p1119
sVaccept_rate
p1120
I90
sVdisplay_name
p1121
VJacob Marble
p1122
ssVis_accepted
p1123
I01
sVlast_edit_date
p1124
I1341427208
sVanswer_id
p1125
I4813571
sa(dp1126
Vbody
p1127
V<p>Is this your problem?</p>\u000a\u000a<p><a href="https://bugs.launchpad.net/ubuntu/+source/python-defaults/+bug/989856" rel="noreferrer">https://bugs.launchpad.net/ubuntu/+source/python-defaults/+bug/989856</a></p>\u000a\u000a<p>Seems to be caused by running it in a virtual environment, and there is a work around.</p>\u000a\u000a<p>BTW this was the top result in google.</p>\u000a
p1128
sVquestion_id
p1129
I10366821
sVlast_activity_date
p1130
I1335642136
sVcreation_date
p1131
I1335642136
sVscore
p1132
I45
sVowner
p1133
(dp1134
Vuser_id
p1135
I1304137
sVprofile_image
p1136
Vhttps://www.gravatar.com/avatar/9eeb345f05e9556f552993dca2b1b60d?s=128&d=identicon&r=PG
p1137
sVuser_type
p1138
Vregistered
p1139
sVreputation
p1140
I1022
sVlink
p1141
Vhttp://stackoverflow.com/users/1304137/adam-cadien
p1142
sVdisplay_name
p1143
VAdam Cadien
p1144
ssVis_accepted
p1145
I01
sVanswer_id
p1146
I10366919
sa(dp1147
Vbody
p1148
V<p>Use a list comprehension mixed with <code>zip()</code>:.</p>\u000a\u000a<pre><code>[a*b for a,b in zip(lista,listb)]\u000a</code></pre>\u000a
p1149
sVquestion_id
p1150
I10271484
sVlast_activity_date
p1151
I1335124114
sVcreation_date
p1152
I1335124114
sVscore
p1153
I149
sVowner
p1154
(dp1155
Vuser_id
p1156
I64004
sVprofile_image
p1157
Vhttps://www.gravatar.com/avatar/0ea88709c4b9bda3bc66c62237e12812?s=128&d=identicon&r=PG
p1158
sVuser_type
p1159
Vregistered
p1160
sVreputation
p1161
I69085
sVlink
p1162
Vhttp://stackoverflow.com/users/64004/gahooa
p1163
sVaccept_rate
p1164
I62
sVdisplay_name
p1165
Vgahooa
p1166
ssVis_accepted
p1167
I01
sVanswer_id
p1168
I10271504
sa(dp1169
Vbody
p1170
V<pre><code>import os\u000a## first file in current dir (with full path)\u000afile = os.path.join(os.getcwd(), os.listdir(os.getcwd())[0])\u000afile\u000aos.path.dirname(file) ## directory of file\u000aos.path.dirname(os.path.dirname(file)) ## directory of directory of file\u000a...\u000a</code></pre>\u000a\u000a<p>And you can continue doing this as many times as necessary...</p>\u000a\u000a<p><strong>Edit:</strong> from <a href="http://docs.python.org/library/os.path.html" rel="noreferrer">os.path</a>, you can use either os.path.split or os.path.basename:</p>\u000a\u000a<pre><code>dir = os.path.dirname(os.path.dirname(file)) ## dir of dir of file\u000a## once you're at the directory level you want, with the desired directory as the final path node:\u000adirname1 = os.path.basename(dir) \u000adirname2 = os.path.split(dir)[1] ## if you look at the documentation, this is exactly what os.path.basename does.\u000a</code></pre>\u000a
p1171
sVquestion_id
p1172
I10149263
sVlast_activity_date
p1173
I1334593754
sVcreation_date
p1174
I1334358071
sVscore
p1175
I75
sVowner
p1176
(dp1177
Vuser_id
p1178
I841337
sVprofile_image
p1179
Vhttps://www.gravatar.com/avatar/2a1ea0126994ecec85f5a71a5d04577e?s=128&d=identicon&r=PG
p1180
sVuser_type
p1181
Vregistered
p1182
sVreputation
p1183
I2875
sVlink
p1184
Vhttp://stackoverflow.com/users/841337/nisan-h
p1185
sVdisplay_name
p1186
VNisan.H
p1187
ssVis_accepted
p1188
I01
sVlast_edit_date
p1189
I1334593754
sVanswer_id
p1190
I10149358
sa(dp1191
Vbody
p1192
V<p>Every <code>Task</code> object has a <code>.request</code> property, which contains it <code>AsyncRequest</code> object. Accordingly, the following line gives the state of a Task <code>task</code>:</p>\u000a\u000a<pre><code>task.AsyncResult(task.request.id).state\u000a</code></pre>\u000a
p1193
sVquestion_id
p1194
I9034091
sVlast_activity_date
p1195
I1327762797
sVcreation_date
p1196
I1327762797
sVscore
p1197
I44
sVowner
p1198
(dp1199
Vuser_id
p1200
I21640
sVprofile_image
p1201
Vhttps://www.gravatar.com/avatar/492a3c5c13fb44d27229364e0993fa11?s=128&d=identicon&r=PG
p1202
sVuser_type
p1203
Vregistered
p1204
sVreputation
p1205
I31683
sVlink
p1206
Vhttp://stackoverflow.com/users/21640/marcin
p1207
sVaccept_rate
p1208
I73
sVdisplay_name
p1209
VMarcin
p1210
ssVis_accepted
p1211
I01
sVanswer_id
p1212
I9046208
sa(dp1213
Vbody
p1214
V<p>This is a case where a line continuation character is preferred to open parentheses.</p>\u000a\u000a<pre><code>ShortName.objects.distinct() \u005c\u000a         .filter().values()      # looks better\u000a</code></pre>\u000a\u000a<p>The need for this style becomes more obvious as method names get longer and as methods start taking arguments:</p>\u000a\u000a<pre><code>return some_collection.get_objects(locator=l5) \u005c\u000a                      .get_distinct(case_insensitive=True) \u005c\u000a                      .filter(predicate=query(q5)) \u005c\u000a                      .values()\u000a</code></pre>\u000a\u000a<p>PEP 8 is intend to be interpreted with a measure of common-sense and an eye for both the practical and the beautiful.  Happily violate any PEP 8 guideline that results in ugly or hard to read code.</p>\u000a\u000a<p>That being said, if you frequently find yourself at odds with PEP 8, it may be a sign that there are readability issues that transcend your choice of whitespace :-)</p>\u000a
p1215
sVquestion_id
p1216
I8683178
sVlast_activity_date
p1217
I1325829403
sVcreation_date
p1218
I1325273394
sVscore
p1219
I81
sVowner
p1220
(dp1221
Vuser_id
p1222
I1001643
sVprofile_image
p1223
Vhttps://www.gravatar.com/avatar/60cac87fb9e2b5689242622999656cb0?s=128&d=identicon&r=PG
p1224
sVuser_type
p1225
Vregistered
p1226
sVreputation
p1227
I94640
sVlink
p1228
Vhttp://stackoverflow.com/users/1001643/raymond-hettinger
p1229
sVaccept_rate
p1230
I75
sVdisplay_name
p1231
VRaymond Hettinger
p1232
ssVis_accepted
p1233
I01
sVlast_edit_date
p1234
I1325829403
sVanswer_id
p1235
I8683240
sa(dp1236
Vbody
p1237
V<p><a href="http://docs.python.org/library/stdtypes.html#dict" rel="noreferrer">Python dictionary</a> is a built-in type that supports key-value pairs.</p>\u000a\u000a<pre><code>streetno = {"1":"Sachine Tendulkar", "2":"Dravid", "3":"Sehwag", "4":"Laxman","5":"Kohli"}\u000a</code></pre>\u000a\u000a<p>as well as using the dict keyword:</p>\u000a\u000a<pre><code>streetno = dict({"1":"Sachine Tendulkar", "2":"Dravid"}) \u000a</code></pre>\u000a\u000a<p>or:</p>\u000a\u000a<pre><code>streetno = {}\u000astreetno["1"] = "Sachine Tendulkar" \u000a</code></pre>\u000a
p1238
sVquestion_id
p1239
I8703496
sVlast_activity_date
p1240
I1325528686
sVcreation_date
p1241
I1325524732
sVscore
p1242
I108
sVowner
p1243
(dp1244
Vuser_id
p1245
I37843
sVprofile_image
p1246
Vhttps://www.gravatar.com/avatar/1eae44bed3fd091a94a20782cc235434?s=128&d=identicon&r=PG
p1247
sVuser_type
p1248
Vregistered
p1249
sVreputation
p1250
I28498
sVlink
p1251
Vhttp://stackoverflow.com/users/37843/alan
p1252
sVaccept_rate
p1253
I96
sVdisplay_name
p1254
VAlan
p1255
ssVis_accepted
p1256
I01
sVlast_edit_date
p1257
I1325528686
sVanswer_id
p1258
I8703509
sa(dp1259
Vbody
p1260
V<p>You can use the parse function from dateutil:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from dateutil.parser import parse\u000a&gt;&gt;&gt; d = parse('2009/05/13 19:19:30 -0400')\u000a&gt;&gt;&gt; d\u000adatetime.datetime(2009, 5, 13, 19, 19, 30, tzinfo=tzoffset(None, -14400))\u000a</code></pre>\u000a\u000a<p>This way you obtain a datetime object you can then use.</p>\u000a\u000a<p><strong>UPDATE:</strong> As <a href="http://stackoverflow.com/questions/7804505/dateutil-parser-parse-gives-error-initial-value-must-be-unicode-or-none-not/7804999#7804999">answered</a> dateutil2.0 is written for python3.0 and does not work with python2.x. For python2.x dateutil1.5 needs to be used.</p>\u000a
p1261
sVquestion_id
p1262
I1101508
sVlast_activity_date
p1263
I1320801210
sVcreation_date
p1264
I1247107634
sVscore
p1265
I84
sVowner
p1266
(dp1267
Vuser_id
p1268
I135172
sVprofile_image
p1269
Vhttps://www.gravatar.com/avatar/4d2d9514d8c1d2fc1f3f5e16a0d5eb41?s=128&d=identicon&r=PG
p1270
sVuser_type
p1271
Vregistered
p1272
sVreputation
p1273
I2264
sVlink
p1274
Vhttp://stackoverflow.com/users/135172/txwikinger
p1275
sVaccept_rate
p1276
I73
sVdisplay_name
p1277
Vtxwikinger
p1278
ssVis_accepted
p1279
I01
sVlast_edit_date
p1280
I1320801210
sVanswer_id
p1281
I1101597
sa(dp1282
Vbody
p1283
V<p>While there isn't a certified standard, if you must use SOAP, Suds is your best choice. Suds can be slow on large WSDLs, and that is something they are working on. </p>\u000a\u000a<p>In the meantime, if you don't expect your WSDL to change often, you have two options that can buy you a lot of speed:</p>\u000a\u000a<ol>\u000a<li>Downloading your WSDL to localhost</li>\u000a<li>Using caching </li>\u000a</ol>\u000a\u000a<p><strong>Downloading your WSDL</strong></p>\u000a\u000a<p>With large WSDLs part of the problem is that first you must download the WSDL every time, which can add overhead. Suds will take the time to download and parse the entire WSDL on startup to make sure that it hasn't changed.</p>\u000a\u000a<p>If you can download it to the local system and then pass it to the <code>Client</code> constructor using a <code>file://</code> scheme in the URL. Since Suds uses <code>urllib2</code> for the HTTP transport, this is perfectly legit.</p>\u000a\u000a<p>Now, because you're not providing a hostname in your WSDL URL, you will also have to pass a <code>location</code> argument specifying the actual URL of the SOAP application.  </p>\u000a\u000a<p>Here is an example:</p>\u000a\u000a<pre><code>from suds.client import Client\u000a\u000a# The service URL\u000asoap_url = 'http://myapp.example.notreal/path/to/soap'\u000a\u000a# The WSDL URL, we wont' use this but just illustrating for example. This \u000a# would be the file you download to your system and save as wsdl_file\u000awsdl_url = 'http://myapp.example.notreal/path/to/soap?wsdl' \u000a\u000a# The full path to the downloaded WSDL file on your local system\u000awsdl_file = '/path/to/myapp.wsdl'\u000awsdl_url = 'file://' + wsdl_file # Override original wsdl_url\u000a\u000aclient = Client(url=wsdl_url, location=soap_url)\u000a</code></pre>\u000a\u000a<p>If you're interested, I have used this approach in my work and have <a href="https://github.com/jathanism/netscaler-api/">open sourced the code</a>.</p>\u000a\u000a<p><strong>Caching your WSDL</strong></p>\u000a\u000a<p>The other option is to use Suds' <a href="https://fedorahosted.org/suds/wiki/Documentation#PERFORMANCE">excellent caching feature</a>. You must explicitly create a cache object and then pass that to the constructor using the <code>cache</code> argument. Otherwise it defaults to an <code>ObjectCache</code> with a duration of 1 day.</p>\u000a\u000a<p>You might also consider using both of these approaches.</p>\u000a
p1284
sVquestion_id
p1285
I7739613
sVlast_activity_date
p1286
I1319217808
sVcreation_date
p1287
I1319217808
sVscore
p1288
I43
sVowner
p1289
(dp1290
Vuser_id
p1291
I194311
sVprofile_image
p1292
Vhttps://www.gravatar.com/avatar/a7cec1f75a06a5f8ab53139515da5d99?s=128&d=identicon&r=PG
p1293
sVuser_type
p1294
Vregistered
p1295
sVreputation
p1296
I21431
sVlink
p1297
Vhttp://stackoverflow.com/users/194311/jathanism
p1298
sVaccept_rate
p1299
I100
sVdisplay_name
p1300
Vjathanism
p1301
ssVis_accepted
p1302
I01
sVanswer_id
p1303
I7852994
sa(dp1304
Vbody
p1305
V<p>One thing to bear in mind is that namedtuples are optimised for access as tuples.  If you change your accessor to be <code>a[2]</code> instead of <code>a.c</code>, you'll see similar performance to the tuples.  The reason is that the name accessors are effectively translating into calls to self[idx], so pay both the indexing <em>and</em> the name lookup price.</p>\u000a\u000a<p>If your usage pattern is such that access by name is common, but access as tuple isn't, you <em>could</em> write a quick equivalent to namedtuple that does things the opposite way: defers index lookups to access by-name.  However, you'll pay the price on the index lookups then.  Eg here's a quick implementation:</p>\u000a\u000a<pre><code>def makestruct(name, fields):\u000a    fields = fields.split()\u000a    import textwrap\u000a    template = textwrap.dedent("""\u005c\u000a    class {name}(object):\u000a        __slots__ = {fields!r}\u000a        def __init__(self, {args}):\u000a            {self_fields} = {args}\u000a        def __getitem__(self, idx): \u000a            return getattr(self, fields[idx])\u000a    """).format(\u000a        name=name,\u000a        fields=fields,\u000a        args=','.join(fields), \u000a        self_fields=','.join('self.' + f for f in fields))\u000a    d = {'fields': fields}\u000a    exec template in d\u000a    return d[name]\u000a</code></pre>\u000a\u000a<p>But the timings are very bad when <code>__getitem__</code> must be called:</p>\u000a\u000a<pre><code>namedtuple.a  :  0.473686933517 \u000anamedtuple[0] :  0.180409193039\u000astruct.a      :  0.180846214294\u000astruct[0]     :  1.32191514969\u000a</code></pre>\u000a\u000a<p>ie, the same performance as a <code>__slots__</code> class for attribute access (unsurprisingly - that's what it is), but huge penalties due to the double lookup in index-based accesses.  (Noteworthy is that <code>__slots__</code> doesn't actually help much speed-wise.  It saves memory, but the access time is about the same without them.)</p>\u000a\u000a<p>One third option would be to duplicate the data, eg. subclass from list and store the values both in the attributes and listdata.  However you don't actually get list-equivalent performance.  There's a big speed hit just in having subclassed (bringing in checks for pure-python overloads).  Thus struct[0] still takes around 0.5s (compared with 0.18 for raw list) in this case, and you do double the memory usage, so this may not be worth it.</p>\u000a
p1306
sVquestion_id
p1307
I2646157
sVlast_activity_date
p1308
I1317628099
sVcreation_date
p1309
I1271358260
sVscore
p1310
I33
sVowner
p1311
(dp1312
Vuser_id
p1313
I9493
sVprofile_image
p1314
Vhttps://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=128&d=identicon&r=PG
p1315
sVuser_type
p1316
Vregistered
p1317
sVreputation
p1318
I73471
sVlink
p1319
Vhttp://stackoverflow.com/users/9493/brian
p1320
sVdisplay_name
p1321
VBrian
p1322
ssVis_accepted
p1323
I01
sVlast_edit_date
p1324
I1317628099
sVanswer_id
p1325
I2648186
sa(dp1326
Vbody
p1327
V<p>You have answered your question pretty well already..\u000aD (install to system location) is preferred for distributable code. I usually use C (modify sys.path) because I don't want system-wide installs of my hundreds of custom libs. In theory A (relative import) seems nicer, but there are cases where it fails. \u000aB (PYTHONPATH) is right out, really only for testing purposes in my opinion.</p>\u000a\u000a<p>That pretty much sums up all of the options. The option you prefer (Python magically knows where to look) is really not a workable solution because it can lead to unpredictable results, such as automagically finding libraries from unrelated projects. </p>\u000a\u000a<p>In my opinion, the best thing to do is put this at the entry point(s) to your program:</p>\u000a\u000a<pre><code>import sys, os\u000asys.path = [os.path.abspath(os.path.dirname(__file__))] + sys.path\u000a</code></pre>\u000a
p1328
sVquestion_id
p1329
I6670275
sVlast_activity_date
p1330
I1310503063
sVcreation_date
p1331
I1310503063
sVscore
p1332
I7
sVowner
p1333
(dp1334
Vuser_id
p1335
I643629
sVprofile_image
p1336
Vhttps://www.gravatar.com/avatar/0b702578d1cde726a755e822fbc96d2a?s=128&d=identicon&r=PG
p1337
sVuser_type
p1338
Vregistered
p1339
sVreputation
p1340
I7015
sVlink
p1341
Vhttp://stackoverflow.com/users/643629/luke
p1342
sVaccept_rate
p1343
I75
sVdisplay_name
p1344
VLuke
p1345
ssVis_accepted
p1346
I01
sVanswer_id
p1347
I6670812
sa(dp1348
Vbody
p1349
V<p>My suggestion is to use a function. But rather than putting the <code>if</code> in the function, which you might be tempted to do, do it like this:</p>\u000a\u000a<pre><code>if verbose:\u000a    def verboseprint(*args):\u000a        # Print each argument separately so caller doesn't need to\u000a        # stuff everything to be printed into a single string\u000a        for arg in args:\u000a           print arg,\u000a        print\u000aelse:   \u000a    verboseprint = lambda *a: None      # do-nothing function\u000a</code></pre>\u000a\u000a<p>(Yes, you can define a function in an <code>if</code> statement, and it'll only get defined if the condition is true!)</p>\u000a\u000a<p>If you're using Python 3, where <code>print</code> is already a function (or if you're willing to use <code>print</code> as a function in 2.x using <code>from __future__ import print_function</code>) it's even simpler:</p>\u000a\u000a<pre><code>verboseprint = print if verbose else lambda *a, **k: None\u000a</code></pre>\u000a\u000a<p>This way, the function is defined as a do-nothing if verbose mode is off (using a lambda), instead of constantly testing the <code>verbose</code> flag. </p>\u000a\u000a<p>If the user could change the verbosity mode <em>during the run</em> of your program, this would be the wrong approach (you'd need the <code>if</code> in the function), but since you're setting it with a command-line flag, you only need to make the decision once.</p>\u000a\u000a<p>You then use e.g. <code>verboseprint("look at all my verbosity!", object(), 3)</code> whenever you want to print a "verbose" message.</p>\u000a
p1350
sVquestion_id
p1351
I5980042
sVlast_activity_date
p1352
I1305218113
sVcreation_date
p1353
I1305212971
sVscore
p1354
I57
sVowner
p1355
(dp1356
Vuser_id
p1357
I416467
sVprofile_image
p1358
Vhttps://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=128&d=identicon&r=PG
p1359
sVuser_type
p1360
Vregistered
p1361
sVreputation
p1362
I102771
sVlink
p1363
Vhttp://stackoverflow.com/users/416467/kindall
p1364
sVaccept_rate
p1365
I100
sVdisplay_name
p1366
Vkindall
p1367
ssVis_accepted
p1368
I01
sVlast_edit_date
p1369
I1305218113
sVanswer_id
p1370
I5980173
sa(dp1371
Vbody
p1372
V<p>The accuracy of the time.sleep function depends on the accuracy of your underlying OS's sleep accuracy.  For non-realtime OS's like a stock Windows the smallest interval you can sleep for is about 10-13ms.  I have seen accurate sleeps within several milliseconds of that time when above the minimum 10-13ms.</p>\u000a\u000a<p>Update:\u000aLike mentioned in the docs sited below, it's common to do the sleep in a loop that will make sure to go back to sleep if the wakes you up the early.</p>\u000a\u000a<p>I should also mention that if you are running Ubuntu you can try out a pseudo real-time kernel (with the RT_PREEMPT patch set) by installing the rt kernel package (at least in Ubuntu 10.04 LTS).</p>\u000a\u000a<p>EDIT: Correction non-realtime Linux kernels have minimum sleep interval much closer to 1ms then 10ms but it varies in a non-deterministic manner.</p>\u000a
p1373
sVquestion_id
p1374
I1133857
sVlast_activity_date
p1375
I1305068175
sVcreation_date
p1376
I1247690324
sVscore
p1377
I48
sVowner
p1378
(dp1379
Vuser_id
p1380
I138948
sVprofile_image
p1381
Vhttps://www.gravatar.com/avatar/3d94d4abc6802f57dc456171d9f85d51?s=128&d=identicon&r=PG
p1382
sVuser_type
p1383
Vregistered
p1384
sVreputation
p1385
I2093
sVlink
p1386
Vhttp://stackoverflow.com/users/138948/joseph-lisee
p1387
sVdisplay_name
p1388
VJoseph Lisee
p1389
ssVis_accepted
p1390
I01
sVlast_edit_date
p1391
I1305068175
sVanswer_id
p1392
I1133888
sa(dp1393
Vbody
p1394
V<p>Use a variable.</p>\u000a\u000a<pre><code>{% extends base_template %}\u000a</code></pre>\u000a\u000a<p>and in your view, set it to "base.html" in your view, or a new "ajax.html" file which just provides the block and nothing else.</p>\u000a
p1395
sVquestion_id
p1396
I5380984
sVlast_activity_date
p1397
I1300726936
sVcreation_date
p1398
I1300726936
sVscore
p1399
I64
sVowner
p1400
(dp1401
Vuser_id
p1402
I104349
sVprofile_image
p1403
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p1404
sVuser_type
p1405
Vregistered
p1406
sVreputation
p1407
I356767
sVlink
p1408
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p1409
sVaccept_rate
p1410
I86
sVdisplay_name
p1411
VDaniel Roseman
p1412
ssVis_accepted
p1413
I01
sVanswer_id
p1414
I5381015
sa(dp1415
Vbody
p1416
V<p>generic case using <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map">Array.map</a>, requires javascript 1.6 (that means, works on every browser but IE &lt; 9) <em>or</em> with an object augmenting framework like MooTools works on every browser:</p>\u000a\u000a<pre><code>var list_of_names = document.getElementsByTagName('input').map(\u000a  function(element) { return element.getAttribute('name'); }\u000a);\u000a</code></pre>\u000a\u000a<p>jQuery specific example, works on every browser:  </p>\u000a\u000a<pre><code>var list_of_names = jQuery.map(jQuery('input'), function(element) { return jQuery(element).attr('name'); });\u000a</code></pre>\u000a\u000a<p>the other answers using <code>.each</code> are wrong; not the code itself, but the implementations are sub-optimal.  </p>\u000a\u000a<p><strong>Edit:</strong> there's also <a href="https://developer.mozilla.org/en/JavaScript/Guide/Predefined_Core_Objects#Array_comprehensions">Array comprehensions</a> introduced in Javascript 1.7, but this is purely dependant on syntax and cannot be emulated on browsers that lack it natively. This is the closest thing you can get in Javascript to the Python snippet you posted.</p>\u000a
p1417
sVquestion_id
p1418
I4964456
sVlast_activity_date
p1419
I1297386654
sVcreation_date
p1420
I1297386102
sVscore
p1421
I46
sVowner
p1422
(dp1423
Vuser_id
p1424
I387002
sVprofile_image
p1425
Vhttps://www.gravatar.com/avatar/66b7903817232d9d42357a269ad48043?s=128&d=identicon&r=PG
p1426
sVuser_type
p1427
Vregistered
p1428
sVreputation
p1429
I3030
sVlink
p1430
Vhttp://stackoverflow.com/users/387002/gonchuki
p1431
sVdisplay_name
p1432
Vgonchuki
p1433
ssVis_accepted
p1434
I01
sVlast_edit_date
p1435
I1297386654
sVanswer_id
p1436
I4964550
sa(dp1437
Vbody
p1438
V<p>I think the <code>PlaintextCorpusReader</code> already segments the input with a punkt tokenizer, at least if your input language is english.</p>\u000a\u000a<p><a href="http://nltk.googlecode.com/svn/trunk/doc/api/nltk.corpus.reader.plaintext.PlaintextCorpusReader-class.html#__init__" rel="noreferrer">Documentation of PlainTextCorpusReader's <code>__init__</code></a></p>\u000a\u000a<pre><code>__init__(\u000a    self,\u000a    root,\u000a    fileids,\u000a    word_tokenizer=WordPunctTokenizer(pattern='\u005c\u005cw+|[^\u005c\u005cw\u005c\u005cs]+', gaps=False, disc...,  \u000a    sent_tokenizer=nltk.data.LazyLoader('tokenizers/punkt/english.pickle'),\u000a    para_block_reader=&lt;function read_blankline_block at 0x1836d30&gt;,\u000a    encoding=None\u000a)\u000a</code></pre>\u000a\u000a<p>You can pass the reader a word and sentence tokenizer, but for the latter the default already is <code>nltk.data.LazyLoader('tokenizers/punkt/english.pickle')</code>.</p>\u000a\u000a<p>For a single string, a tokenizer would be used as follows (explained <a href="http://www.opendocs.net/nltk/0.9.5/guides/tokenize.html" rel="noreferrer">here</a>, see section 5 for punkt tokenizer).</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import nltk.data\u000a&gt;&gt;&gt; text = """\u000a... Punkt knows that the periods in Mr. Smith and Johann S. Bach\u000a... do not mark sentence boundaries.  And sometimes sentences\u000a... can start with non-capitalized words.  i is a good variable\u000a... name.\u000a... """\u000a&gt;&gt;&gt; tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')\u000a&gt;&gt;&gt; tokenizer.tokenize(text.strip())\u000a</code></pre>\u000a
p1439
sVquestion_id
p1440
I4951751
sVlast_activity_date
p1441
I1297298562
sVcreation_date
p1442
I1297298562
sVscore
p1443
I31
sVowner
p1444
(dp1445
Vuser_id
p1446
I556536
sVprofile_image
p1447
Vhttps://www.gravatar.com/avatar/238e4c13faa4377d2142cfa92a00228a?s=128&d=identicon&r=PG
p1448
sVuser_type
p1449
Vregistered
p1450
sVreputation
p1451
I7934
sVlink
p1452
Vhttp://stackoverflow.com/users/556536/reiner-gerecke
p1453
sVdisplay_name
p1454
VReiner Gerecke
p1455
ssVis_accepted
p1456
I01
sVanswer_id
p1457
I4952238
sa(dp1458
Vbody
p1459
V<p>In Python 2.x both will give you the same result. The difference between them is that <code>items</code> constructs a list containing the entire contents of the dictionary whereas <code>iteritems</code> gives you an iterator that fetches the items one at a time. In general <code>iteritems</code> is a better choice because it doesn't require so much memory. But here you are sorting the result so it probably won't make any significant difference in this situation. If you are in doubt <code>iteritems</code> is a safe bet. If performance really matters then measure both and see which is faster. </p>\u000a\u000a<p>In Python 3.x <code>iteritems</code> has been removed and <code>items</code> now does what <code>iteritems</code> used to do, solving the problem of programmers wasting their time worrying about which is better. :)</p>\u000a\u000a<p>As a side note: if you are counting occurrences of words you may want to consider using <a href="http://docs.python.org/library/collections.html#collections.Counter"><code>collections.Counter</code></a> instead of a plain dict (requires Python 2.7 or newer).</p>\u000a
p1460
sVquestion_id
p1461
I4550645
sVlast_activity_date
p1462
I1293583729
sVcreation_date
p1463
I1293582870
sVscore
p1464
I75
sVowner
p1465
(dp1466
Vuser_id
p1467
I61974
sVprofile_image
p1468
Vhttps://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=128&d=identicon&r=PG
p1469
sVuser_type
p1470
Vregistered
p1471
sVreputation
p1472
I484956
sVlink
p1473
Vhttp://stackoverflow.com/users/61974/mark-byers
p1474
sVdisplay_name
p1475
VMark Byers
p1476
ssVis_accepted
p1477
I01
sVlast_edit_date
p1478
I1293583729
sVanswer_id
p1479
I4550652
sa(dp1480
Vbody
p1481
V<p>Well, if you're reading the data in as a list, just do <code>np.array(map(float, list_of_strings))</code> (or equivalently, use a list comprehension).</p>\u000a\u000a<p>However, if it's already a numpy array of strings, there's a better way.  Use <code>astype()</code>.</p>\u000a\u000a<pre><code>import numpy as np\u000ax = np.array(['1.1', '2.2', '3.3'], dtype='|S4')\u000ay = x.astype(np.float)\u000a</code></pre>\u000a
p1482
sVquestion_id
p1483
I3877209
sVlast_activity_date
p1484
I1286402651
sVcreation_date
p1485
I1286402651
sVscore
p1486
I82
sVowner
p1487
(dp1488
Vuser_id
p1489
I325565
sVprofile_image
p1490
Vhttps://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=128&d=identicon&r=PG
p1491
sVuser_type
p1492
Vregistered
p1493
sVreputation
p1494
I136691
sVlink
p1495
Vhttp://stackoverflow.com/users/325565/joe-kington
p1496
sVdisplay_name
p1497
VJoe Kington
p1498
ssVis_accepted
p1499
I01
sVanswer_id
p1500
I3877247
sa(dp1501
Vbody
p1502
V<p>Writing an implementation of a regular expression engine is indeed a quite complex task.</p>\u000a\u000a<p>But if you are interested in how to do it, even if you can't understand enough of the details to actually implement it, I would recommend that you at least look at this article:</p>\u000a\u000a<p><a href="http://swtch.com/~rsc/regexp/regexp1.html" rel="noreferrer"><strong>Regular Expression Matching Can Be Simple And Fast</strong>\u000a(but is slow in Java, Perl, PHP, Python, Ruby, ...) </a></p>\u000a\u000a<p>It explains how many of the popular programming languages implement regular expressions in a way that can be very slow for some regular expressions, and explains a slightly different method that is faster. The article includes some details of how the proposed implementation works, including some source code in C. It may be a bit heavy reading if you are just starting to learn regular expressions, but I think it is well worth knowing about the difference between the two approaches.</p>\u000a
p1503
sVquestion_id
p1504
I3639574
sVlast_activity_date
p1505
I1283549561
sVcreation_date
p1506
I1283548380
sVscore
p1507
I34
sVowner
p1508
(dp1509
Vuser_id
p1510
I61974
sVprofile_image
p1511
Vhttps://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=128&d=identicon&r=PG
p1512
sVuser_type
p1513
Vregistered
p1514
sVreputation
p1515
I484956
sVlink
p1516
Vhttp://stackoverflow.com/users/61974/mark-byers
p1517
sVdisplay_name
p1518
VMark Byers
p1519
ssVis_accepted
p1520
I01
sVlast_edit_date
p1521
I1283549561
sVanswer_id
p1522
I3639610
sa(dp1523
Vbody
p1524
V<p>Edit easy-install.pth in your site-packages directory and remove the line that points to your development version of that package.</p>\u000a
p1525
sVquestion_id
p1526
I3606457
sVlast_activity_date
p1527
I1283296208
sVcreation_date
p1528
I1283296208
sVscore
p1529
I9
sVowner
p1530
(dp1531
Vuser_id
p1532
I550378
sVprofile_image
p1533
Vhttps://www.gravatar.com/avatar/8ebdb2638dbd7849787b9edb6e3f3509?s=128&d=identicon&r=PG
p1534
sVuser_type
p1535
Vregistered
p1536
sVreputation
p1537
I1206
sVlink
p1538
Vhttp://stackoverflow.com/users/550378/zooko
p1539
sVdisplay_name
p1540
VZooko
p1541
ssVis_accepted
p1542
I01
sVanswer_id
p1543
I3613880
sa(dp1544
Vbody
p1545
V<p>Actually, you could still use the round function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print round(1123.456789, -1)\u000a1120.0\u000a</code></pre>\u000a\u000a<p>This would round to the closest multiple of 10. To 100 would be -2 as the second argument and so forth.</p>\u000a
p1546
sVquestion_id
p1547
I3348825
sVlast_activity_date
p1548
I1280274498
sVcreation_date
p1549
I1280274498
sVscore
p1550
I105
sVowner
p1551
(dp1552
Vuser_id
p1553
I188441
sVprofile_image
p1554
Vhttps://www.gravatar.com/avatar/d45bd0d38367b5294c280c169b7199fc?s=128&d=identicon&r=PG&f=1
p1555
sVuser_type
p1556
Vregistered
p1557
sVreputation
p1558
I1634
sVlink
p1559
Vhttp://stackoverflow.com/users/188441/data
p1560
sVaccept_rate
p1561
I89
sVdisplay_name
p1562
Vdata
p1563
ssVis_accepted
p1564
I01
sVanswer_id
p1565
I3348866
sa(dp1566
Vbody
p1567
V<p>Assuming you're on a Unix-like platform (so that <code>ps -A</code> exists),</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import subprocess, signal\u000a&gt;&gt;&gt; p = subprocess.Popen(['ps', '-A'], stdout=subprocess.PIPE)\u000a&gt;&gt;&gt; out, err = p.communicate()\u000a</code></pre>\u000a\u000a<p>gives you <code>ps -A</code>'s output in the <code>out</code> variable (a string).  You can break it down into lines and loop on them...:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; for line in out.splitlines():\u000a...   if 'iChat' in line:\u000a...     pid = int(line.split(None, 1)[0])\u000a...     os.kill(pid, signal.SIGKILL)\u000a... \u000a</code></pre>\u000a\u000a<p>(you could avoid importing <code>signal</code>, and use <code>9</code> instead of <code>signal.SIGKILL</code>, but I just don't particularly like that style, so I'd rather used the named constant this way).</p>\u000a\u000a<p>Of course you could do much more sophisticated processing on these lines, but this mimics what you're doing in shell.</p>\u000a\u000a<p>If what you're after is avoiding <code>ps</code>, that's hard to do across different Unix-like systems (<code>ps</code> is their common API to get a process list, in a sense).  But if you have a specific Unix-like system in mind, only (not requiring any cross-platform portability), it may be possible; in particular, on Linux, the <code>/proc</code> pseudo-filesystem is very helpful.  But you'll need to clarify your exact requirements before we can help on this latter part.</p>\u000a
p1568
sVquestion_id
p1569
I2940858
sVlast_activity_date
p1570
I1275267004
sVcreation_date
p1571
I1275267004
sVscore
p1572
I53
sVowner
p1573
(dp1574
Vuser_id
p1575
I95810
sVprofile_image
p1576
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1577
sVuser_type
p1578
Vregistered
p1579
sVreputation
p1580
I516089
sVlink
p1581
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1582
sVaccept_rate
p1583
I80
sVdisplay_name
p1584
VAlex Martelli
p1585
ssVis_accepted
p1586
I01
sVanswer_id
p1587
I2940878
sa(dp1588
Vbody
p1589
V<p>The <code>is</code> operator in Python checks that the two arguments refer to the same object in memory; it is not like the <code>is</code> operator in C#.</p>\u000a\u000a<p><a href="http://docs.python.org/reference/expressions.html#notin" rel="noreferrer">From the docs</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The operators is and is not test for object identity: x is y is true if and only if x and y are the same object. x is  not y yields the inverse truth value. </p>\u000a</blockquote>\u000a\u000a<p>What you're looking for in this case is <a href="http://docs.python.org/release/2.6/library/functions.html?highlight=isinstance#isinstance" rel="noreferrer"><code>isinstance</code></a>.</p>\u000a\u000a<blockquote>\u000a  <p>Return true if the object argument is an instance of the classinfo  argument, or of a (direct or indirect) subclass thereof. </p>\u000a</blockquote>\u000a\u000a<pre><code>&gt;&gt;&gt; class animal(object): pass\u000a\u000a&gt;&gt;&gt; class dog(animal): pass\u000a\u000a&gt;&gt;&gt; myDog = dog()\u000a&gt;&gt;&gt; isinstance(myDog, dog)\u000aTrue\u000a&gt;&gt;&gt; isinstance(myDog, animal)\u000aTrue\u000a</code></pre>\u000a\u000a<p>However, idiomatic Python dictates that you (almost) never do type-checking, but instead rely on <a href="http://en.wikipedia.org/wiki/Duck_typing" rel="noreferrer">duck-typing</a> for polymorphic behavior.  There's nothing wrong with using <code>isinstance</code> to understand inheritance, but it should generally be avoided in "production" code.</p>\u000a
p1590
sVquestion_id
p1591
I2835793
sVlast_activity_date
p1592
I1273854653
sVcreation_date
p1593
I1273854328
sVscore
p1594
I70
sVowner
p1595
(dp1596
Vuser_id
p1597
I126042
sVprofile_image
p1598
Vhttps://www.gravatar.com/avatar/e9562ede99cb17789af5349379a9ef25?s=128&d=identicon&r=PG
p1599
sVuser_type
p1600
Vregistered
p1601
sVreputation
p1602
I149231
sVlink
p1603
Vhttp://stackoverflow.com/users/126042/mark-rushakoff
p1604
sVaccept_rate
p1605
I68
sVdisplay_name
p1606
VMark Rushakoff
p1607
ssVis_accepted
p1608
I01
sVlast_edit_date
p1609
I1273854653
sVanswer_id
p1610
I2835815
sa(dp1611
Vcommunity_owned_date
p1612
I1270488673
sVbody
p1613
V<p>Cool link: <a href="http://dirtsimple.org/2004/12/python-is-not-java.html" rel="noreferrer">Python is not Java</a> :)</p>\u000a\u000a<blockquote>\u000a  <p>In Java, you have to use getters and setters because using public fields gives you no opportunity to go back and change your mind later to using getters and setters. So in Java, you might as well get the chore out of the way up front. In Python, this is silly, because you can start with a normal attribute and change your mind at any time, without affecting any clients of the class. So, don't write getters and setters.</p>\u000a</blockquote>\u000a
p1614
sVquestion_id
p1615
I2579840
sVlast_activity_date
p1616
I1270488673
sVcreation_date
p1617
I1270488673
sVscore
p1618
I40
sVowner
p1619
(dp1620
Vuser_id
p1621
I203905
sVprofile_image
p1622
Vhttps://www.gravatar.com/avatar/89a4f42b5a5b2dcfe8a81445ccf10609?s=128&d=identicon&r=PG
p1623
sVuser_type
p1624
Vregistered
p1625
sVreputation
p1626
I6037
sVlink
p1627
Vhttp://stackoverflow.com/users/203905/mgv
p1628
sVaccept_rate
p1629
I85
sVdisplay_name
p1630
Vmgv
p1631
ssVis_accepted
p1632
I01
sVanswer_id
p1633
I2579864
sa(dp1634
Vbody
p1635
V<p>Windows has a concept of current directory for each drive.  Because of that, <code>"c:sourcedir"</code> means "sourcedir" inside the current C: directory, and you'll need to specify an absolute directory.</p>\u000a\u000a<p>Any of these should work and give the same result, but I don't have a Windows VM fired up at the moment to double check:</p>\u000a\u000a<pre><code>"c:/sourcedir"\u000aos.path.join("/", "c:", "sourcedir")\u000aos.path.join("c:/", "sourcedir")\u000a</code></pre>\u000a
p1636
sVquestion_id
p1637
I2422798
sVlast_activity_date
p1638
I1268286754
sVcreation_date
p1639
I1268286754
sVscore
p1640
I28
sVowner
p1641
(dp1642
Vdisplay_name
p1643
VRoger Pate
p1644
sVuser_type
p1645
Vdoes_not_exist
p1646
ssVis_accepted
p1647
I01
sVanswer_id
p1648
I2422864
sa(dp1649
Vbody
p1650
V<p>You will need MSVC compiler or mingw32 to compile that, and also need MySQL Header files.</p>\u000a\u000a<p>I've compiled once for MySQL1.2.3c1 for Python2.6, you could find it <a href="http://soemin.googlecode.com/files/MySQL-python-1.2.3c1.win32-py2.6.exe" rel="noreferrer">here</a>.</p>\u000a
p1651
sVquestion_id
p1652
I2272786
sVlast_activity_date
p1653
I1266323756
sVcreation_date
p1654
I1266323756
sVscore
p1655
I47
sVowner
p1656
(dp1657
Vuser_id
p1658
I213464
sVprofile_image
p1659
Vhttps://www.gravatar.com/avatar/7f7ff8ab69ce836df0bf9af5acc689af?s=128&d=identicon&r=PG
p1660
sVuser_type
p1661
Vregistered
p1662
sVreputation
p1663
I67371
sVlink
p1664
Vhttp://stackoverflow.com/users/213464/you
p1665
sVaccept_rate
p1666
I100
sVdisplay_name
p1667
VYOU
p1668
ssVis_accepted
p1669
I01
sVanswer_id
p1670
I2272853
sa(dp1671
Vbody
p1672
V<p>Inserting</p>\u000a\u000a<pre><code>import pdb; pdb.set_trace()\u000a</code></pre>\u000a\u000a<p>will enter the python debugger at that point</p>\u000a\u000a<p>See here:\u000a<a href="http://docs.python.org/library/pdb.html" rel="noreferrer">http://docs.python.org/library/pdb.html</a></p>\u000a
p1673
sVquestion_id
p1674
I2158097
sVlast_activity_date
p1675
I1264714217
sVcreation_date
p1676
I1264714217
sVscore
p1677
I33
sVowner
p1678
(dp1679
Vuser_id
p1680
I54457
sVprofile_image
p1681
Vhttps://www.gravatar.com/avatar/332e95a17b088a6f68105b9247de51f1?s=128&d=identicon&r=PG
p1682
sVuser_type
p1683
Vregistered
p1684
sVreputation
p1685
I3377
sVlink
p1686
Vhttp://stackoverflow.com/users/54457/prestomation
p1687
sVaccept_rate
p1688
I89
sVdisplay_name
p1689
Vprestomation
p1690
ssVis_accepted
p1691
I01
sVanswer_id
p1692
I2158119
sa(dp1693
Vbody
p1694
V<p>Yes, using eval is a bad practice. Just to name a few reasons:</p>\u000a\u000a<ol>\u000a<li>There is almost always a better way to do it</li>\u000a<li>Very dangerous and insecure</li>\u000a<li>Makes debugging difficult</li>\u000a<li>Slow</li>\u000a</ol>\u000a\u000a<p>In your case you can use <a href="http://docs.python.org/library/functions.html#setattr" rel="noreferrer">setattr</a> instead:</p>\u000a\u000a<pre><code>class Song:\u000a    """The class to store the details of each song"""\u000a    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')\u000a    def __init__(self):\u000a        for att in self.attsToStore:\u000a            setattr(self, att.lower(), None)\u000a    def setDetail(self, key, val):\u000a        if key in self.attsToStore:\u000a            setattr(self, key.lower(), val)\u000a</code></pre>\u000a\u000a<p><strong>EDIT:</strong></p>\u000a\u000a<p>There are some cases where you have to use eval or exec. But they are rare. Using eval in your case is a bad practice for sure. I'm emphasizing on bad practice because eval and exec are frequently used in the wrong place.</p>\u000a\u000a<p><strong>EDIT 2:</strong></p>\u000a\u000a<p>It looks like some disagree that eval is 'very dangerous and insecure' in the OP case. That might be true for this specific case but not in general. The question was general and the reasons I listed are true for the general case as well.</p>\u000a\u000a<p><strong>EDIT 3:</strong>\u000aReordered point 1 and 4</p>\u000a
p1695
sVquestion_id
p1696
I1832940
sVlast_activity_date
p1697
I1259778353
sVcreation_date
p1698
I1259761028
sVscore
p1699
I120
sVowner
p1700
(dp1701
Vuser_id
p1702
I97828
sVprofile_image
p1703
Vhttps://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG
p1704
sVuser_type
p1705
Vregistered
p1706
sVreputation
p1707
I64017
sVlink
p1708
Vhttp://stackoverflow.com/users/97828/nadia-alramli
p1709
sVdisplay_name
p1710
VNadia Alramli
p1711
ssVis_accepted
p1712
I01
sVlast_edit_date
p1713
I1259778353
sVanswer_id
p1714
I1832957
sa(dp1715
Vbody
p1716
V<p>Normally you do it to make <em><a href="http://en.wikipedia.org/wiki/Closure_%28computer_science%29" rel="noreferrer">closures</a></em>:</p>\u000a\u000a<pre><code>def make_adder(x):\u000a    def add(y):\u000a        return x + y\u000a    return add\u000a\u000aplus5 = make_adder(5)\u000aprint(plus5(12))  # prints 17\u000a</code></pre>\u000a\u000a<p>Inner functions can access variables from the enclosing scope (in this case, the local variable <code>x</code>).  If you're not accessing any variables from the enclosing scope, they're really just ordinary functions with a different scope.</p>\u000a
p1717
sVquestion_id
p1718
I1589058
sVlast_activity_date
p1719
I1255968356
sVcreation_date
p1720
I1255968356
sVscore
p1721
I72
sVowner
p1722
(dp1723
Vuser_id
p1724
I9530
sVprofile_image
p1725
Vhttps://www.gravatar.com/avatar/924800e76876546c5c575c0175e1f434?s=128&d=identicon&r=PG
p1726
sVuser_type
p1727
Vregistered
p1728
sVreputation
p1729
I259251
sVlink
p1730
Vhttp://stackoverflow.com/users/9530/adam-rosenfield
p1731
sVaccept_rate
p1732
I78
sVdisplay_name
p1733
VAdam Rosenfield
p1734
ssVis_accepted
p1735
I01
sVanswer_id
p1736
I1589606
sa(dp1737
Vbody
p1738
V<p>The <code>close</code> method must be called on the <em>result</em> of <code>urllib.urlopen</code>, <strong>not</strong> on the <code>urllib</code> module itself as you're thinking about (as you mention <code>urllib.close</code> -- which doesn't exist).</p>\u000a\u000a<p>The best approach: instead of <code>x = urllib.urlopen(u)</code> etc, use:</p>\u000a\u000a<pre><code>import contextlib\u000a\u000awith contextlib.closing(urllib.urlopen(u)) as x:\u000a   ...use x at will here...\u000a</code></pre>\u000a\u000a<p>The <code>with</code> statement, and the <code>closing</code> context manager, will ensure proper closure even in presence of exceptions.</p>\u000a
p1739
sVquestion_id
p1740
I1522636
sVlast_activity_date
p1741
I1254781337
sVcreation_date
p1742
I1254781337
sVscore
p1743
I87
sVowner
p1744
(dp1745
Vuser_id
p1746
I95810
sVprofile_image
p1747
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1748
sVuser_type
p1749
Vregistered
p1750
sVreputation
p1751
I516089
sVlink
p1752
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1753
sVaccept_rate
p1754
I80
sVdisplay_name
p1755
VAlex Martelli
p1756
ssVis_accepted
p1757
I01
sVanswer_id
p1758
I1522709
sa(dp1759
Vbody
p1760
V<p><code>datetime.date.today() + datetime.timedelta(days=1)</code> should do the trick</p>\u000a
p1761
sVquestion_id
p1762
I1506901
sVlast_activity_date
p1763
I1254437578
sVcreation_date
p1764
I1254437351
sVscore
p1765
I111
sVowner
p1766
(dp1767
Vuser_id
p1768
I166921
sVprofile_image
p1769
Vhttps://www.gravatar.com/avatar/2af8cc3459a9a18e4376aaf0f8151bf5?s=128&d=identicon&r=PG
p1770
sVuser_type
p1771
Vregistered
p1772
sVreputation
p1773
I8754
sVlink
p1774
Vhttp://stackoverflow.com/users/166921/kamil-szot
p1775
sVaccept_rate
p1776
I67
sVdisplay_name
p1777
VKamil Szot
p1778
ssVis_accepted
p1779
I01
sVlast_edit_date
p1780
I1254437578
sVanswer_id
p1781
I1506916
sa(dp1782
Vbody
p1783
V<p>Definitely <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a>, a Style Guide for Python.</p>\u000a
p1784
sVquestion_id
p1785
I1382648
sVlast_activity_date
p1786
I1252133494
sVcreation_date
p1787
I1252133494
sVscore
p1788
I27
sVowner
p1789
(dp1790
Vuser_id
p1791
I189
sVprofile_image
p1792
Vhttps://www.gravatar.com/avatar/a94b04abadb5fc282fd17eb8813139a6?s=128&d=identicon&r=PG
p1793
sVuser_type
p1794
Vregistered
p1795
sVreputation
p1796
I8047
sVlink
p1797
Vhttp://stackoverflow.com/users/189/seb
p1798
sVdisplay_name
p1799
VSeb
p1800
ssVis_accepted
p1801
I01
sVanswer_id
p1802
I1382661
sa(dp1803
Vbody
p1804
V<p>The pythonic way would be to use a <code>dict</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; foo = dict(x=1, y=2)\u000a&gt;&gt;&gt; bar = dict(y=2, x=1)\u000a&gt;&gt;&gt; foo == bar\u000aTrue\u000a</code></pre>\u000a\u000a<p>Meets all your requirements except that you still have to do <code>foo['x']</code> instead of <code>foo.x</code>. </p>\u000a\u000a<p>If that's a problem, you could easily define a class such as:</p>\u000a\u000a<pre><code>class Bunch(object):\u000a    def __init__(self, **kwds):\u000a        self.__dict__.update(kwds)\u000a\u000a    def __eq__(self, other):\u000a        return self.__dict__ == other.__dict__\u000a</code></pre>\u000a\u000a<p>Or, a nice and short one</p>\u000a\u000a<pre><code>class Bunch(dict):\u000a    __getattr__, __setattr__ = dict.get, dict.__setitem__\u000a</code></pre>\u000a\u000a<p>(but note that this second one has problems as Alex points out in his comment!)</p>\u000a
p1805
sVquestion_id
p1806
I1123000
sVlast_activity_date
p1807
I1247539114
sVcreation_date
p1808
I1247535126
sVscore
p1809
I41
sVowner
p1810
(dp1811
Vuser_id
p1812
I3002
sVprofile_image
p1813
Vhttps://www.gravatar.com/avatar/a9929763a96cad537d72c9eda8fe3741?s=128&d=identicon&r=PG
p1814
sVuser_type
p1815
Vregistered
p1816
sVreputation
p1817
I43484
sVlink
p1818
Vhttp://stackoverflow.com/users/3002/df
p1819
sVaccept_rate
p1820
I100
sVdisplay_name
p1821
VdF.
p1822
ssVis_accepted
p1823
I01
sVlast_edit_date
p1824
I1247539114
sVanswer_id
p1825
I1123026
sa(dp1826
Vbody
p1827
V<p>BTW you can pass the error message directly to sys.exit:</p>\u000a\u000a<pre><code>if len(sys.argv) &lt; 2:\u000a    sys.exit('Usage: %s database-name' % sys.argv[0])\u000a\u000aif not os.path.exists(sys.argv[1]):\u000a    sys.exit('ERROR: Database %s was not found!' % sys.argv[1])\u000a</code></pre>\u000a
p1828
sVquestion_id
p1829
I983201
sVlast_activity_date
p1830
I1244760076
sVcreation_date
p1831
I1244760076
sVscore
p1832
I86
sVowner
p1833
(dp1834
Vuser_id
p1835
I110151
sVprofile_image
p1836
Vhttps://www.gravatar.com/avatar/5faa8f7f53d3ac658c4dfa4bd04a2ee3?s=128&d=identicon&r=PG
p1837
sVuser_type
p1838
Vregistered
p1839
sVreputation
p1840
I6583
sVlink
p1841
Vhttp://stackoverflow.com/users/110151/marius-gedminas
p1842
sVdisplay_name
p1843
VMarius Gedminas
p1844
ssVis_accepted
p1845
I01
sVanswer_id
p1846
I984145
sa(dp1847
Vbody
p1848
V<p>It seems you're using Windows. The locale strings are different there. Take a more precise look at the doc:</p>\u000a\u000a<pre><code>locale.setlocale(locale.LC_ALL, 'de_DE') # use German locale; name might vary with platform\u000a</code></pre>\u000a\u000a<p>On Windows, I think it would be something like:</p>\u000a\u000a<pre><code>locale.setlocale(locale.LC_ALL, 'deu_deu')\u000a</code></pre>\u000a\u000a<p>MSDN has a list of <a href="http://msdn.microsoft.com/en-us/library/39cwe7zf%28vs.71%29.aspx" rel="noreferrer">language strings</a> and of <a href="http://msdn.microsoft.com/en-us/library/cdax410z%28VS.71%29.aspx" rel="noreferrer">country/region strings</a></p>\u000a
p1849
sVquestion_id
p1850
I955986
sVlast_activity_date
p1851
I1244295599
sVcreation_date
p1852
I1244211198
sVscore
p1853
I73
sVowner
p1854
(dp1855
Vuser_id
p1856
I113325
sVprofile_image
p1857
Vhttps://www.gravatar.com/avatar/13c7bedd4f802e026526f120818f9dd8?s=128&d=identicon&r=PG
p1858
sVuser_type
p1859
Vregistered
p1860
sVreputation
p1861
I4308
sVlink
p1862
Vhttp://stackoverflow.com/users/113325/schnouki
p1863
sVdisplay_name
p1864
VSchnouki
p1865
ssVis_accepted
p1866
I01
sVlast_edit_date
p1867
I1244295599
sVanswer_id
p1868
I956084
sa(dp1869
Vbody
p1870
V<p>You are lookin for <a href="http://docs.python.org/tutorial/controlflow.html" rel="noreferrer">continue</a>.</p>\u000a
p1871
sVquestion_id
p1872
I549674
sVlast_activity_date
p1873
I1234641046
sVcreation_date
p1874
I1234641046
sVscore
p1875
I128
sVowner
p1876
(dp1877
Vuser_id
p1878
I9683
sVprofile_image
p1879
Vhttps://www.gravatar.com/avatar/6da3d4048a89eae74e790545d08ff687?s=128&d=identicon&r=PG
p1880
sVuser_type
p1881
Vregistered
p1882
sVreputation
p1883
I7427
sVlink
p1884
Vhttp://stackoverflow.com/users/9683/andr%c3%a9
p1885
sVaccept_rate
p1886
I80
sVdisplay_name
p1887
VAndr&#233;
p1888
ssVis_accepted
p1889
I01
sVanswer_id
p1890
I549682
sa(dp1891
Vbody
p1892
V<p>You can't do this, which is by design.  The Django framework authors intended a strict separation of presentation code from data logic.  Filtering models is data logic, and outputting HTML is presentation logic.</p>\u000a\u000a<p>So you have several options.  The easiest is to do the filtering, then pass the result to <code>render_to_response</code>.  Or you could write a method in your model so that you can say <code>{% for object in data.filtered_set %}</code>.  Finally, you could write your own template tag, although in this specific case I would advise against that.</p>\u000a
p1893
sVquestion_id
p1894
I223990
sVlast_activity_date
p1895
I1224633627
sVcreation_date
p1896
I1224633627
sVscore
p1897
I91
sVowner
p1898
(dp1899
Vuser_id
p1900
I1694
sVprofile_image
p1901
Vhttps://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=128&d=identicon&r=PG
p1902
sVuser_type
p1903
Vregistered
p1904
sVreputation
p1905
I93134
sVlink
p1906
Vhttp://stackoverflow.com/users/1694/eli-courtwright
p1907
sVaccept_rate
p1908
I94
sVdisplay_name
p1909
VEli Courtwright
p1910
ssVis_accepted
p1911
I01
sVanswer_id
p1912
I224003
sa(dp1913
Vbody
p1914
V<p>You should have a look at <a href="http://www.scipy.org/Tentative_NumPy_Tutorial" rel="noreferrer">numpy</a> if you do matrix manipulation. This is a module mainly written in C, which will be much faster than programming in pure python. Here is an example of how to invert a matrix, and do other matrix manipulation.</p>\u000a\u000a<pre><code>from numpy import matrix\u000afrom numpy import linalg\u000aA = matrix( [[1,2,3],[11,12,13],[21,22,23]]) # Creates a matrix.\u000ax = matrix( [[1],[2],[3]] )                  # Creates a matrix (like a column vector).\u000ay = matrix( [[1,2,3]] )                      # Creates a matrix (like a row vector).\u000aprint A.T                                    # Transpose of A.\u000aprint A*x                                    # Matrix multiplication of A and x.\u000aprint A.I                                    # Inverse of A.\u000aprint linalg.solve(A, x)     # Solve the linear equation system.\u000a</code></pre>\u000a\u000a<p>You can also have a look at the <a href="http://www.python.org/doc/2.5.2/lib/module-array.html" rel="noreferrer">array</a> module, which is a much more efficient implementation of lists when you have to deal with only one data type.</p>\u000a
p1915
sVquestion_id
p1916
I211160
sVlast_activity_date
p1917
I1224236807
sVcreation_date
p1918
I1224222102
sVscore
p1919
I95
sVowner
p1920
(dp1921
Vuser_id
p1922
I28165
sVprofile_image
p1923
Vhttps://i.stack.imgur.com/aKwzk.png?s=128&g=1
p1924
sVuser_type
p1925
Vregistered
p1926
sVreputation
p1927
I4614
sVlink
p1928
Vhttp://stackoverflow.com/users/28165/mapad
p1929
sVdisplay_name
p1930
VMapad
p1931
ssVis_accepted
p1932
I01
sVlast_edit_date
p1933
I1224236807
sVanswer_id
p1934
I211174
sasVquota_max
p1935
I300
sVquota_remaining
p1936
I146
s.