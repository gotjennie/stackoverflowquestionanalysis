(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>You can disable the ETAG middleware using the <a href="http://docs.djangoproject.com/en/1.2/topics/conditional-view-processing/" rel="nofollow noreferrer">condition decorator</a>.  That will get your response to stream back over HTTP.  You can confirm this with a command-line tool like <code>curl</code>.  But it probably won't be enough to get your browser to show the response as it streams.  To encourage the browser to show the response as it streams, you can push a bunch of whitespace down the pipe to force its buffers to fill.  Example follows:</p>\u000a\u000a<pre><code>from django.views.decorators.http import condition\u000a\u000a@condition(etag_func=None)\u000adef stream_response(request):\u000a    resp = HttpResponse( stream_response_generator(), content_type='text/html')\u000a    return resp\u000a\u000adef stream_response_generator():\u000a    yield "&lt;html&gt;&lt;body&gt;\u005cn"\u000a    for x in range(1,11):\u000a        yield "&lt;div&gt;%s&lt;/div&gt;\u005cn" % x\u000a        yield " " * 1024  # Encourage browser to render incrementally\u000a        time.sleep(1)\u000a    yield "&lt;/body&gt;&lt;/html&gt;\u005cn"\u000a</code></pre>\u000a
p6
sVquestion_id
p7
I2922874
sVlast_activity_date
p8
I1493812852
sVcreation_date
p9
I1274978935
sVscore
p10
I41
sVowner
p11
(dp12
Vuser_id
p13
I303056
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/8d8b39a5fdfbc5ca99384f89a9561b68?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I21403
sVlink
p19
Vhttp://stackoverflow.com/users/303056/leopd
p20
sVaccept_rate
p21
I86
sVdisplay_name
p22
VLeopd
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1493812852
sVanswer_id
p26
I2923091
sa(dp27
Vbody
p28
V<p>The current version of Requests should be just fine with SNI. <a href="https://github.com/kennethreitz/requests/issues/749#issuecomment-19187417" rel="noreferrer">Further down the GitHub issue</a> you can see the requirements:</p>\u000a\u000a<ul>\u000a<li><a href="https://launchpad.net/pyopenssl" rel="noreferrer">pyOpenSSL</a></li>\u000a<li><a href="https://pypi.python.org/pypi/ndg-httpsclient" rel="noreferrer">ndg-httpsclient</a></li>\u000a<li><a href="http://pyasn1.sourceforge.net/" rel="noreferrer">pyasn1</a></li>\u000a</ul>\u000a\u000a<p>Try installing those packages and then give it another shot.</p>\u000a\u000a<p><strong>EDIT</strong>: As of Requests v2.12.1, ndg-httpsclient and pyasn1 are no longer required. The full list of required packages is now:</p>\u000a\u000a<ul>\u000a<li>pyOpenSSL</li>\u000a<li>idna</li>\u000a</ul>\u000a
p29
sVquestion_id
p30
I18578439
sVlast_activity_date
p31
I1484728734
sVcreation_date
p32
I1378149127
sVscore
p33
I101
sVowner
p34
(dp35
Vuser_id
p36
I1401686
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/b5aeee05a8f452c9b113d512980eb0e4?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I4155
sVlink
p42
Vhttp://stackoverflow.com/users/1401686/lukasa
p43
sVdisplay_name
p44
VLukasa
p45
ssVis_accepted
p46
I01
sVlast_edit_date
p47
I1484728734
sVanswer_id
p48
I18579484
sa(dp49
Vbody
p50
V<p>As others have noted, they use a language feature called descriptors.</p>\u000a\u000a<p>The reason that the actual property object is returned when you access it via a class <code>Foo.hello</code> lies in how the property implements the <code>__get__(self, instance, owner)</code> special method. If a descriptor is accessed on an <em>instance</em>, then that instance is passed as the appropriate argument, and <code>owner</code> is the <em>class</em> of that instance.</p>\u000a\u000a<p>On the other hand, if it is accessed through the class, then <code>instance</code> is None and only <code>owner</code> is passed. The <code>property</code> object recognizes this and returns <code>self</code>.</p>\u000a\u000a<hr>\u000a\u000a<p>Besides the <a href="http://docs.python.org/howto/descriptor.html" rel="nofollow noreferrer">Descriptors howto</a>, see also the documentation on <a href="http://docs.python.org/2/reference/datamodel.html#descriptors" rel="nofollow noreferrer">Implementing Descriptors</a> and <a href="http://docs.python.org/2/reference/datamodel.html#invoking-descriptors" rel="nofollow noreferrer">Invoking Descriptors</a> in the Language Guide.</p>\u000a
p51
sVquestion_id
p52
I6193556
sVlast_activity_date
p53
I1483350560
sVcreation_date
p54
I1306876559
sVscore
p55
I34
sVowner
p56
(dp57
Vuser_id
p58
I250798
sVprofile_image
p59
Vhttps://www.gravatar.com/avatar/74db71cdccf02240329dac5acda62428?s=128&d=identicon&r=PG
p60
sVuser_type
p61
Vregistered
p62
sVreputation
p63
I3063
sVlink
p64
Vhttp://stackoverflow.com/users/250798/tim-yates
p65
sVdisplay_name
p66
VTim Yates
p67
ssVis_accepted
p68
I01
sVlast_edit_date
p69
I1483350560
sVanswer_id
p70
I6193656
sa(dp71
Vbody
p72
V<p>Newer versions of PyInstaller do not set the <code>env</code> variable anymore, so Shish's excellent <a href="http://stackoverflow.com/a/7675014/525169">answer</a> will not work. Now the path gets set as <code>sys._MEIPASS</code>:</p>\u000a\u000a<pre><code>def resource_path(relative_path):\u000a    """ Get absolute path to resource, works for dev and for PyInstaller """\u000a    try:\u000a        # PyInstaller creates a temp folder and stores path in _MEIPASS\u000a        base_path = sys._MEIPASS\u000a    except Exception:\u000a        base_path = os.path.abspath(".")\u000a\u000a    return os.path.join(base_path, relative_path)\u000a</code></pre>\u000a
p73
sVquestion_id
p74
I7674790
sVlast_activity_date
p75
I1481083140
sVcreation_date
p76
I1355080112
sVscore
p77
I63
sVowner
p78
(dp79
Vuser_id
p80
I1889973
sVprofile_image
p81
Vhttps://www.gravatar.com/avatar/c4bd1f1879b236172b6bc270501fb732?s=128&d=identicon&r=PG
p82
sVuser_type
p83
Vregistered
p84
sVreputation
p85
I780
sVlink
p86
Vhttp://stackoverflow.com/users/1889973/max
p87
sVdisplay_name
p88
Vmax
p89
ssVis_accepted
p90
I01
sVlast_edit_date
p91
I1481083140
sVanswer_id
p92
I13790741
sa(dp93
Vbody
p94
V<p>There is a mutable alternative to <code>collections.namedtuple</code> - <a href="https://pypi.python.org/pypi/recordclass">recordclass</a>.</p>\u000a\u000a<p>It has the same API and memory footprint as <code>namedtuple</code> and it supports assignments (It should be faster as well). For example:</p>\u000a\u000a<pre><code>from recordclass import recordclass\u000a\u000aPoint = recordclass('Point', 'x y')\u000a\u000a&gt;&gt;&gt; p = Point(1, 2)\u000a&gt;&gt;&gt; p\u000aPoint(x=1, y=2)\u000a&gt;&gt;&gt; print(p.x, p.y)\u000a1 2\u000a&gt;&gt;&gt; p.x += 2; p.y += 3; print(p)\u000aPoint(x=3, y=5)\u000a</code></pre>\u000a\u000a<p>There is a more complete <a href="http://nbviewer.ipython.org/urls/bitbucket.org/intellimath/recordclass/raw/default/examples/what_is_recordclass.ipynb">example</a> (it also includes performance comparisons).</p>\u000a
p95
sVquestion_id
p96
I29290359
sVlast_activity_date
p97
I1479475095
sVcreation_date
p98
I1427998607
sVscore
p99
I48
sVowner
p100
(dp101
Vuser_id
p102
I4743644
sVprofile_image
p103
Vhttps://www.gravatar.com/avatar/0ccbb20759fec790defab6537c4b1cb1?s=128&d=identicon&r=PG&f=1
p104
sVuser_type
p105
Vregistered
p106
sVreputation
p107
I690
sVlink
p108
Vhttp://stackoverflow.com/users/4743644/intellimath
p109
sVdisplay_name
p110
Vintellimath
p111
ssVis_accepted
p112
I01
sVlast_edit_date
p113
I1479475095
sVanswer_id
p114
I29419745
sa(dp115
Vbody
p116
V<p>Since python integers are unbounded, you have to do this with a custom class:</p>\u000a\u000a<pre><code>import functools\u000a\u000a@functools.total_ordering\u000aclass NeverSmaller(object):\u000a    def __le__(self, other):\u000a        return False\u000a\u000aclass ReallyMaxInt(NeverSmaller, int):\u000a    def __repr__(self):\u000a        return 'ReallyMaxInt()'\u000a</code></pre>\u000a\u000a<p>Here I've used a mix-in class <code>NeverSmaller</code> rather than direct decoration of <code>ReallyMaxInt</code>, because on Python 3 the action of <code>functools.total_ordering</code> would have been prevented by existing ordering methods inherited from <code>int</code>.  </p>\u000a\u000a<p>Usage demo:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; N = ReallyMaxInt()\u000a&gt;&gt;&gt; N &gt; sys.maxsize\u000aTrue\u000a&gt;&gt;&gt; isinstance(N, int)\u000aTrue\u000a&gt;&gt;&gt; sorted([1, N, 0, 9999, sys.maxsize])\u000a[0, 1, 9999, 9223372036854775807, ReallyMaxInt()]\u000a</code></pre>\u000a\u000a<p>Note that in python2, <code>sys.maxint + 1</code> is bigger than <code>sys.maxint</code>, so you can't rely on that.  </p>\u000a\u000a<p><em>Disclaimer</em>: This is an integer in the <a href="https://en.wikipedia.org/wiki/Object-oriented_programming#Inheritance_and_behavioral_subtyping" rel="noreferrer">OO</a> sense, it is not an integer in the mathematical sense.  Consequently, arithmetic operations inherited from the parent class <code>int</code> may not behave sensibly.  If this causes any issues for your intended use case, then they can be disabled by implementing <code>__add__</code> and friends to just error out.</p>\u000a
p117
sVquestion_id
p118
I39843488
sVlast_activity_date
p119
I1475871660
sVcreation_date
p120
I1475550256
sVscore
p121
I64
sVowner
p122
(dp123
Vuser_id
p124
I674039
sVprofile_image
p125
Vhttps://i.stack.imgur.com/leoFi.gif?s=128&g=1
p126
sVuser_type
p127
Vregistered
p128
sVreputation
p129
I97604
sVlink
p130
Vhttp://stackoverflow.com/users/674039/wim
p131
sVaccept_rate
p132
I95
sVdisplay_name
p133
Vwim
p134
ssVis_accepted
p135
I01
sVlast_edit_date
p136
I1475871660
sVanswer_id
p137
I39843523
sa(dp138
Vbody
p139
V<p>Following code will generate a random sample of size 4.</p>\u000a\u000a<pre><code>rand_smpl = [ mylist[i] for i in sorted(random.sample(xrange(len(mylist)), 4)) ]\u000a</code></pre>\u000a\u000a<p>Explanation:</p>\u000a\u000a<pre><code>random.sample(xrange(len(mylist)), sample_size)\u000a</code></pre>\u000a\u000a<p>generates a random sample of the <em>indices</em> of the original list.</p>\u000a\u000a<p>This sample then gets sorted to preserve the ordering of elements in the original list.</p>\u000a\u000a<p>Finally, the list comprehension pulls out the elements from the original list, given the sampled indices, and constructs the final sample (of actual elements).</p>\u000a
p140
sVquestion_id
p141
I6482889
sVlast_activity_date
p142
I1472979756
sVcreation_date
p143
I1309076640
sVscore
p144
I65
sVowner
p145
(dp146
Vuser_id
p147
I772606
sVprofile_image
p148
Vhttps://www.gravatar.com/avatar/05dbf21a636b1fefc5c964212887f8c8?s=128&d=identicon&r=PG
p149
sVuser_type
p150
Vregistered
p151
sVreputation
p152
I5495
sVlink
p153
Vhttp://stackoverflow.com/users/772606/mhyfritz
p154
sVdisplay_name
p155
Vmhyfritz
p156
ssVis_accepted
p157
I01
sVlast_edit_date
p158
I1472979756
sVanswer_id
p159
I6482922
sa(dp160
Vbody
p161
V<p><strong>EDIT:</strong> take a look at the <a href="http://stackoverflow.com/a/24683360/4279"><code>StyleAdapter</code> approach in @Dunes' answer</a> unlike this answer; it allows to use alternative formatting styles without the boilerplate while calling logger's methods (debug(), info(), error(), etc).</p>\u000a\u000a<hr>\u000a\u000a<p>From the docs \u2014 <a href="http://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles" rel="noreferrer">Use of alternative formatting styles</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Logging calls (logger.debug(), logger.info() etc.) only take\u000a  positional parameters for the actual logging message itself, with\u000a  keyword parameters used only for determining options for how to handle\u000a  the actual logging call (e.g. the exc_info keyword parameter to\u000a  indicate that traceback information should be logged, or the extra\u000a  keyword parameter to indicate additional contextual information to be\u000a  added to the log). So you cannot directly make logging calls using\u000a  str.format() or string.Template syntax, because internally the logging\u000a  package uses %-formatting to merge the format string and the variable\u000a  arguments. There would no changing this while preserving backward\u000a  compatibility, since all logging calls which are out there in existing\u000a  code will be using %-format strings.</p>\u000a</blockquote>\u000a\u000a<p>And:</p>\u000a\u000a<blockquote>\u000a  <p>There is, however, a way that you can use {}- and $- formatting to\u000a  construct your individual log messages. Recall that for a message you\u000a  can use an arbitrary object as a message format string, and that the\u000a  logging package will call str() on that object to get the actual\u000a  format string.</p>\u000a</blockquote>\u000a\u000a<p>Copy-paste this to <code>wherever</code> module:</p>\u000a\u000a<pre><code>class BraceMessage(object):\u000a    def __init__(self, fmt, *args, **kwargs):\u000a        self.fmt = fmt\u000a        self.args = args\u000a        self.kwargs = kwargs\u000a\u000a    def __str__(self):\u000a        return self.fmt.format(*self.args, **self.kwargs)\u000a</code></pre>\u000a\u000a<p>Then:</p>\u000a\u000a<pre><code>from wherever import BraceMessage as __\u000a\u000alog.debug(__('Message with {0} {name}', 2, name='placeholders'))\u000a</code></pre>\u000a\u000a<p>Note: actual formatting is delayed until it is necessary e.g., if DEBUG messages are not logged then the formatting is not performed at all.</p>\u000a
p162
sVquestion_id
p163
I13131400
sVlast_activity_date
p164
I1464364456
sVcreation_date
p165
I1351557593
sVscore
p166
I29
sVowner
p167
(dp168
Vuser_id
p169
I4279
sVprofile_image
p170
Vhttps://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=128&d=identicon&r=PG
p171
sVuser_type
p172
Vregistered
p173
sVreputation
p174
I203089
sVlink
p175
Vhttp://stackoverflow.com/users/4279/j-f-sebastian
p176
sVaccept_rate
p177
I94
sVdisplay_name
p178
VJ.F. Sebastian
p179
ssVis_accepted
p180
I01
sVlast_edit_date
p181
I1464364456
sVanswer_id
p182
I13131690
sa(dp183
Vbody
p184
V<p>Models certainly do have a "self"!  It's just that you're trying to define an attribute of a model class as being dependent upon a model instance; that's not possible, as the instance does not (and cannot) exist before your define the class and its attributes.</p>\u000a\u000a<p>To get the effect you want, override the save() method of the model class.  Make any changes you want to the instance necessary, then call the superclass's method to do the actual saving.  Here's a quick example.</p>\u000a\u000a<pre><code>def save(self, *args, **kwargs):\u000a    if not self.subject_init:\u000a        self.subject_init = self.subject_initials()\u000a    super(Subject, self).save(*args, **kwargs)\u000a</code></pre>\u000a\u000a<p>This is covered in <a href="https://docs.djangoproject.com/en/dev/topics/db/models/#overriding-model-methods" rel="noreferrer">Overriding Model Methods</a> in the documentation.</p>\u000a
p185
sVquestion_id
p186
I4380879
sVlast_activity_date
p187
I1448466317
sVcreation_date
p188
I1291753758
sVscore
p189
I46
sVowner
p190
(dp191
Vuser_id
p192
I166838
sVprofile_image
p193
Vhttps://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG
p194
sVuser_type
p195
Vregistered
p196
sVreputation
p197
I11967
sVlink
p198
Vhttp://stackoverflow.com/users/166838/elf-sternberg
p199
sVaccept_rate
p200
I96
sVdisplay_name
p201
VElf Sternberg
p202
ssVis_accepted
p203
I01
sVlast_edit_date
p204
I1448466317
sVanswer_id
p205
I4381252
sa(dp206
Vbody
p207
V<p>In one of the comments, you say:</p>\u000a\u000a<blockquote>\u000a  <p>Somehow I got an Nonetype value, it supposed to be an int, but it's now a Nonetype object</p>\u000a</blockquote>\u000a\u000a<p>If it's your code, figure out how you're getting <code>None</code> when you expect a number and stop <strong>that</strong> from happening.</p>\u000a\u000a<p>If it's someone else's code, find out the conditions under which it gives <code>None</code> and determine a sensible value to use for that, with the usual conditional code:</p>\u000a\u000a<pre><code>result = could_return_none(x)\u000a\u000aif result is None:\u000a    result = DEFAULT_VALUE\u000a</code></pre>\u000a\u000a<p>...or even...</p>\u000a\u000a<pre><code>if x == THING_THAT_RESULTS_IN_NONE:\u000a    result = DEFAULT_VALUE\u000aelse:\u000a    result = could_return_none(x) # But it won't return None, because we've restricted the domain.\u000a</code></pre>\u000a\u000a<p>There's no reason to automatically use <code>0</code> here \u2014 solutions that depend on the "false"-ness of <code>None</code> assume you will want this. The <code>DEFAULT_VALUE</code> (if it even exists) completely depends on your code's purpose.</p>\u000a
p208
sVquestion_id
p209
I3930188
sVlast_activity_date
p210
I1442881338
sVcreation_date
p211
I1287034678
sVscore
p212
I26
sVowner
p213
(dp214
Vuser_id
p215
I188535
sVprofile_image
p216
Vhttps://www.gravatar.com/avatar/d04ab2422a8f061608f58708de9bb138?s=128&d=identicon&r=PG
p217
sVuser_type
p218
Vregistered
p219
sVreputation
p220
I16038
sVlink
p221
Vhttp://stackoverflow.com/users/188535/detly
p222
sVaccept_rate
p223
I84
sVdisplay_name
p224
Vdetly
p225
ssVis_accepted
p226
I01
sVlast_edit_date
p227
I1442881338
sVanswer_id
p228
I3930374
sa(dp229
Vbody
p230
V<p>Tested on Ubuntu Server 10.04. I hope it helps you also on Arch Linux.</p>\u000a\u000a<p>In PHP:</p>\u000a\u000a<pre><code>&lt;?php \u000a\u000a$command = escapeshellcmd('/usr/custom/test.py');\u000a$output = shell_exec($command);\u000aecho $output;\u000a\u000a?&gt;\u000a</code></pre>\u000a\u000a<p>In Python file 'test.py' verify this text in first line: <a href="http://www.stackoverflow.com/questions/2429511/why-do-people-write-usr-bin-env-python-on-the-first-line-of-a-python-script/2429517">(see shebang explain)</a>:</p>\u000a\u000a<pre><code>#!/usr/bin/env python\u000a</code></pre>\u000a\u000a<p>Also Python file <a href="http://www.php.net/manual/en/function.shell-exec.php#37971" rel="noreferrer">should have correct privileges</a> (execution for user www-data / apache if PHP script runs in browser or through curl)\u000aand/or must be "executable". Also all commands in .py file must have correct privileges.</p>\u000a\u000a<pre><code>chmod +x myscript.py\u000a</code></pre>\u000a
p231
sVquestion_id
p232
I19735250
sVlast_activity_date
p233
I1442600374
sVcreation_date
p234
I1383345298
sVscore
p235
I79
sVowner
p236
(dp237
Vuser_id
p238
I2333476
sVprofile_image
p239
Vhttps://www.gravatar.com/avatar/f0902b2d7ee5dd2639ddf04250284cf4?s=128&d=identicon&r=PG
p240
sVuser_type
p241
Vregistered
p242
sVreputation
p243
I1317
sVlink
p244
Vhttp://stackoverflow.com/users/2333476/alejandro-quiroz
p245
sVdisplay_name
p246
VAlejandro Quiroz
p247
ssVis_accepted
p248
I01
sVlast_edit_date
p249
I1442600374
sVanswer_id
p250
I19736494
sa(dp251
Vbody
p252
V<p>Tkinter is the easiest way if you don't want to have any other dependencies.\u000aTo show only the dialog without any other GUI elements, you have to hide the root window using the <a href="http://effbot.org/tkinterbook/wm.htm#Tkinter.Wm.withdraw-method" rel="noreferrer"><code>withdraw</code></a> method:</p>\u000a\u000a<pre><code>import tkinter as tk\u000afrom tkinter import filedialog\u000a\u000aroot = tk.Tk()\u000aroot.withdraw()\u000afile_path = filedialog.askopenfilename()\u000a</code></pre>\u000a
p253
sVquestion_id
p254
I9319317
sVlast_activity_date
p255
I1431027872
sVcreation_date
p256
I1357117112
sVscore
p257
I77
sVowner
p258
(dp259
Vuser_id
p260
I1702266
sVprofile_image
p261
Vhttps://i.stack.imgur.com/HEKFD.png?s=128&g=1
p262
sVuser_type
p263
Vregistered
p264
sVreputation
p265
I2275
sVlink
p266
Vhttp://stackoverflow.com/users/1702266/tomvodi
p267
sVdisplay_name
p268
Vtomvodi
p269
ssVis_accepted
p270
I01
sVlast_edit_date
p271
I1431027872
sVanswer_id
p272
I14119223
sa(dp273
Vbody
p274
V<p>Initial migrations on a project can sometimes be troubleshot using --fake-initial</p>\u000a\u000a<pre><code>python manage.py migrate --fake-initial\u000a</code></pre>\u000a\u000a<p>It's new in 1.8. In 1.7, --fake-initial was an implicit default, but explicit in 1.8.</p>\u000a\u000a<p>From the Docs:</p>\u000a\u000a<blockquote>\u000a  <p>The --fake-initial option can be used to allow Django to skip an app\u2019s initial migration if all database tables with the names of all models created by all CreateModel operations in that migration already exist. This option is intended for use when first running migrations against a database that preexisted the use of migrations. This option does not, however, check for matching database schema beyond matching table names and so is only safe to use if you are confident that your existing schema matches what is recorded in your initial migration.</p>\u000a</blockquote>\u000a\u000a<p><a href="https://docs.djangoproject.com/en/1.8/ref/django-admin/#django-admin-option---fake-initial" rel="noreferrer">https://docs.djangoproject.com/en/1.8/ref/django-admin/#django-admin-option---fake-initial</a></p>\u000a
p275
sVquestion_id
p276
I29760817
sVlast_activity_date
p277
I1429577131
sVcreation_date
p278
I1429576258
sVscore
p279
I83
sVowner
p280
(dp281
Vuser_id
p282
I408870
sVprofile_image
p283
Vhttps://www.gravatar.com/avatar/965032240f7a1613a61ab201eecc0c2e?s=128&d=identicon&r=PG
p284
sVuser_type
p285
Vregistered
p286
sVreputation
p287
I1563
sVlink
p288
Vhttp://stackoverflow.com/users/408870/dan-oboyle
p289
sVaccept_rate
p290
I100
sVdisplay_name
p291
VDan O&#39;Boyle
p292
ssVis_accepted
p293
I01
sVlast_edit_date
p294
I1429577131
sVanswer_id
p295
I29760818
sa(dp296
Vbody
p297
V<p>Have a look at <a href="http://docs.python.org/library/timeit.html" rel="noreferrer">timeit</a>, <a href="http://docs.python.org/library/profile.html" rel="noreferrer">the python profiler</a> and <a href="https://pycallgraph.readthedocs.org/en/master/" rel="noreferrer">pycallgraph</a>.</p>\u000a\u000a<h2>timeit</h2>\u000a\u000a<pre><code>def test():\u000a    """Stupid test function"""\u000a    lst = []\u000a    for i in range(100):\u000a        lst.append(i)\u000a\u000aif __name__ == '__main__':\u000a    import timeit\u000a    print(timeit.timeit("test()", setup="from __main__ import test"))\u000a</code></pre>\u000a\u000a<p>Essentially, you can pass it python code as a string parameter, and it will run in the specified amount of times and prints the execution time. The important bits from the docs:</p>\u000a\u000a<blockquote>\u000a  <p><strong><code>timeit.timeit(stmt='pass', setup='pass', timer=&lt;default timer&gt;,\u000a  number=1000000)</code></strong> </p>\u000a  \u000a  <blockquote>\u000a    <p>Create a <code>Timer</code> instance with the given statement, <em>setup</em>\u000a    code and    <em>timer</em> function and run its <code>timeit</code> method with\u000a    <em>number</em> executions.</p>\u000a  </blockquote>\u000a</blockquote>\u000a\u000a<p>... and:</p>\u000a\u000a<blockquote>\u000a  <p><strong><code>Timer.timeit(number=1000000)</code></strong></p>\u000a  \u000a  <blockquote>\u000a    <p>Time <em>number</em> executions of the main statement.  This executes the setup\u000a    statement once, and then returns the time it takes to execute the main\u000a    statement a number of times, measured in seconds as a float.\u000a    The argument is the number of times through the loop, defaulting to one\u000a    million.  The main statement, the setup statement and the timer function\u000a    to be used are passed to the constructor.</p>\u000a    \u000a    <p><strong>Note</strong></p>\u000a    \u000a    <blockquote>\u000a      <p>By default, <code>timeit</code> temporarily turns off <code>garbage\u000a      collection</code> during the timing.  The advantage of this approach is that\u000a      it makes independent timings more comparable.  This disadvantage is\u000a      that GC may be an important component of the performance of the\u000a      function being measured.  If so, GC can be re-enabled as the first\u000a      statement in the <em>setup</em> string.  For example:</p>\u000a      \u000a      <blockquote>\u000a        <p><code>timeit.Timer('for i in xrange(10): oct(i)', 'gc.enable()').timeit()</code></p>\u000a      </blockquote>\u000a    </blockquote>\u000a  </blockquote>\u000a</blockquote>\u000a\u000a<h2>Profiling</h2>\u000a\u000a<p>Profiling will give you a <em>much</em> more detailed idea about what's going on. Here's the "instant example" from <a href="http://docs.python.org/library/profile.html" rel="noreferrer">the official docs</a>:</p>\u000a\u000a<pre><code>import cProfile\u000aimport re\u000acProfile.run('re.compile("foo|bar")')\u000a</code></pre>\u000a\u000a<p>Which will give you:</p>\u000a\u000a<pre><code>      197 function calls (192 primitive calls) in 0.002 seconds\u000a\u000aOrdered by: standard name\u000a\u000ancalls  tottime  percall  cumtime  percall filename:lineno(function)\u000a     1    0.000    0.000    0.001    0.001 &lt;string&gt;:1(&lt;module&gt;)\u000a     1    0.000    0.000    0.001    0.001 re.py:212(compile)\u000a     1    0.000    0.000    0.001    0.001 re.py:268(_compile)\u000a     1    0.000    0.000    0.000    0.000 sre_compile.py:172(_compile_charset)\u000a     1    0.000    0.000    0.000    0.000 sre_compile.py:201(_optimize_charset)\u000a     4    0.000    0.000    0.000    0.000 sre_compile.py:25(_identityfunction)\u000a   3/1    0.000    0.000    0.000    0.000 sre_compile.py:33(_compile)\u000a</code></pre>\u000a\u000a<p>Both of these modules should give you an idea about where to look for bottlenecks.</p>\u000a\u000a<p>Also, to get to grips with the output of <code>profile</code>, have a look at <a href="http://stackoverflow.com/questions/1469679/understanding-python-profile-output">this post</a></p>\u000a\u000a<h2>pycallgraph</h2>\u000a\u000a<p><a href="http://docs.python.org/library/profile.html" rel="noreferrer">This module</a> uses graphviz to create callgraphs like the following:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/605RV.png" alt="callgraph example"></p>\u000a\u000a<p>You can easily see which paths used up the most time by colour. You can either create them using the pycallgraph API, or using a packaged script:</p>\u000a\u000a<pre><code>pycallgraph graphviz -- ./mypythonscript.py\u000a</code></pre>\u000a\u000a<p>The overhead is quite considerable though. So for already long-running processes, creating the graph can take some time.</p>\u000a
p298
sVquestion_id
p299
I1593019
sVlast_activity_date
p300
I1427790951
sVcreation_date
p301
I1256024704
sVscore
p302
I69
sVowner
p303
(dp304
Vuser_id
p305
I160665
sVprofile_image
p306
Vhttps://www.gravatar.com/avatar/70888c4c7063a4f8be70a01125e7cb74?s=128&d=identicon&r=PG
p307
sVuser_type
p308
Vregistered
p309
sVreputation
p310
I7035
sVlink
p311
Vhttp://stackoverflow.com/users/160665/exhuma
p312
sVaccept_rate
p313
I74
sVdisplay_name
p314
Vexhuma
p315
ssVis_accepted
p316
I01
sVlast_edit_date
p317
I1427790951
sVanswer_id
p318
I1593034
sa(dp319
Vbody
p320
V<p><code>read</code> is slow. For bulk parsing, use <code>bytestring</code> or <code>text</code> primitives, or <code>attoparsec</code>. </p>\u000a\u000a<p>I did some benchmarking. Your original version ran in <strong>23,9</strong> secs on my computer. The version below ran in <strong>0.35</strong> secs:</p>\u000a\u000a<pre><code>import qualified Data.ByteString.Char8 as B\u000aimport Control.Applicative\u000aimport Data.Maybe\u000aimport Data.List\u000aimport Data.Char\u000a\u000amain = print . sum =&lt;&lt; getIntList\u000a\u000agetIntList :: IO [Int]\u000agetIntList =\u000a    map (fst . fromJust . B.readInt) . B.words &lt;$&gt; B.readFile "test.txt"\u000a</code></pre>\u000a\u000a<p>By specializing the parser to your <code>test.txt</code> file, I could get the runtime down to <strong>0.26</strong> sec:</p>\u000a\u000a<pre><code>getIntList :: IO [Int]          \u000agetIntList =\u000a    unfoldr (B.readInt . B.dropWhile (==' ')) &lt;$&gt; B.readFile "test.txt"\u000a</code></pre>\u000a
p321
sVquestion_id
p322
I29186541
sVlast_activity_date
p323
I1427007825
sVcreation_date
p324
I1426965168
sVscore
p325
I63
sVowner
p326
(dp327
Vuser_id
p328
I1068232
sVprofile_image
p329
Vhttps://www.gravatar.com/avatar/2a0a145ce58c20013969fe3f203531da?s=128&d=identicon&r=PG
p330
sVuser_type
p331
Vregistered
p332
sVreputation
p333
I21393
sVlink
p334
Vhttp://stackoverflow.com/users/1068232/andr%c3%a1s-kov%c3%a1cs
p335
sVaccept_rate
p336
I79
sVdisplay_name
p337
VAndr&#225;s Kov&#225;cs
p338
ssVis_accepted
p339
I01
sVlast_edit_date
p340
I1427007825
sVanswer_id
p341
I29186898
sa(dp342
Vbody
p343
V<p>The formatting of tick labels is controlled by a <code>Formatter</code> object, which assuming you haven't done anything fancy will be a <code>ScalerFormatter</code><a href="http://matplotlib.org/api/ticker_api.html#matplotlib.ticker.ScalarFormatter">by default</a>.  This formatter will use a constant shift if the fractional change of the values visible is very small.  To avoid this, simply turn it off:</p>\u000a\u000a<pre><code>plt.plot(arange(0,100,10) + 1000, arange(0,100,10))\u000aax = plt.gca()\u000aax.get_xaxis().get_major_formatter().set_useOffset(False)\u000aplt.draw()\u000a</code></pre>\u000a\u000a<p>If you want to avoid scientific notation in general, </p>\u000a\u000a<pre><code>ax.get_xaxis().get_major_formatter().set_scientific(False)\u000a</code></pre>\u000a\u000a<p>Can control this with globally via the <code>axes.formatter.useoffset</code> rcparam.</p>\u000a
p344
sVquestion_id
p345
I14711655
sVlast_activity_date
p346
I1421338721
sVcreation_date
p347
I1360080716
sVscore
p348
I63
sVowner
p349
(dp350
Vuser_id
p351
I380231
sVprofile_image
p352
Vhttps://www.gravatar.com/avatar/8744048060e5931c500d3c9d1ecb997e?s=128&d=identicon&r=PG
p353
sVuser_type
p354
Vregistered
p355
sVreputation
p356
I41379
sVlink
p357
Vhttp://stackoverflow.com/users/380231/tacaswell
p358
sVaccept_rate
p359
I100
sVdisplay_name
p360
Vtacaswell
p361
ssVis_accepted
p362
I01
sVlast_edit_date
p363
I1421338721
sVanswer_id
p364
I14711866
sa(dp365
Vbody
p366
V<p>string <a href="https://docs.python.org/2/library/string.html#string.replace" rel="noreferrer">replace()</a> function if perfectly solves this problem:</p>\u000a\u000a<blockquote>\u000a  <p>string.replace(s, old, new[, maxreplace])</p>\u000a  \u000a  <p>Return a copy of string s with all occurrences of substring old replaced by new. If the optional argument maxreplace is given, the first maxreplace occurrences are replaced.</p>\u000a</blockquote>\u000a\u000a<pre><code>&gt;&gt;&gt; u'longlongTESTstringTEST'.replace('TEST', '?', 1)\u000au'longlong?stringTEST'\u000a</code></pre>\u000a
p367
sVquestion_id
p368
I4628618
sVlast_activity_date
p369
I1421245433
sVcreation_date
p370
I1294422930
sVscore
p371
I119
sVowner
p372
(dp373
Vuser_id
p374
I492048
sVprofile_image
p375
Vhttps://www.gravatar.com/avatar/964e67bb9b2dd2627d4d18073e174185?s=128&d=identicon&r=PG
p376
sVuser_type
p377
Vregistered
p378
sVreputation
p379
I3527
sVlink
p380
Vhttp://stackoverflow.com/users/492048/virhilo
p381
sVdisplay_name
p382
Vvirhilo
p383
ssVis_accepted
p384
I01
sVlast_edit_date
p385
I1421245433
sVanswer_id
p386
I4628646
sa(dp387
Vbody
p388
V<p>Firstly, your timing is done in a high overhead way. You should use this instead:</p>\u000a\u000a<pre><code>def hardcoded():\u000a    m = [0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,9,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,10]\u000a\u000adef softcoded():\u000a    m = [0]\u000a    for k in range(10):\u000a        m += m\u000a        m[-1] += 1\u000a\u000adef hybrid():\u000a    m = [0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7]\u000a    for k in range(3):\u000a        m += m\u000a        m[-1] += 1\u000a\u000afrom timeit import Timer\u000a\u000adef p_time(func, n=10000):\u000a    print(func.__name__)\u000a    print(min(Timer(func).repeat(10, n)) / n)\u000a\u000ap_time(hardcoded)\u000ap_time(softcoded)\u000ap_time(hybrid)\u000a</code></pre>\u000a\u000a<p>My timings on Python 3.4 are</p>\u000a\u000a<pre><code>hardcoded\u000a4.190810100408271e-06\u000asoftcoded\u000a4.509894398506731e-06\u000ahybrid\u000a3.4970380016602578e-06\u000a</code></pre>\u000a\u000a<p>which doesn't quite agree with yours. This is probably because cProfile will add quite a bit of overhead to the first case (hence to move to <code>timeit.Timer</code>).</p>\u000a\u000a<p>To understand why, let's look at the disassembly for <code>hardcoded</code>:</p>\u000a\u000a<pre><code>   0 LOAD_CONST          1 (0)\u000a   3 LOAD_CONST          2 (1)\u000a   6 LOAD_CONST          1 (0)\u000a   9 LOAD_CONST          3 (2)\u000a  12 LOAD_CONST          1 (0)\u000a...\u000a3063 LOAD_CONST          2 (1)\u000a3066 LOAD_CONST          1 (0)\u000a3069 LOAD_CONST         11 (10)\u000a3072 BUILD_LIST       1024\u000a3075 STORE_FAST          0 (m)\u000a3078 LOAD_CONST          0 (None)\u000a3081 RETURN_VALUE\u000a</code></pre>\u000a\u000a<p>This is several kilobytes of code that needs to go through a big switch that decodes each <code>LOAD_CONST</code> instruction, reads its argument, finds the argument from <code>hardcoded.__code__.co_consts</code> (which is <code>(None, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</code>) and add that to the list.</p>\u000a\u000a<p>It is done this way because a list is mutable so you need to build a new one each time. CPython will do this in the opcodes because it's fast for most lists; it's only slow when building large, low entropy lists.</p>\u000a\u000a<p>In contrary, <code>m += m</code> is able to just duplicate the list (an internal C routine), increment a few reference counts and return. This requires no expensive decode stage, no reading elements from tuples and is very cache friendly. <em>However</em>, the call <code>m += m</code> is only low-overhead when the constant-time bytecode dispatch, type-lookup and internal bookkeeping is amortized out over the whole operation. When <code>m</code> is small, this is not the case so it ends up being slower than the <code>LOAD_CONST</code> loop from before. This is why the hybrid approach is faster but the full loop is slower; the first 7 iterations are slower than just using <code>LOAD_CONST</code>.</p>\u000a\u000a<p>We can improve <code>hybrid</code> by unrolling:</p>\u000a\u000a<pre><code>def hybrid():\u000a    m = [0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7]\u000a\u000a    m *= 2\u000a    m[-1] += 1\u000a\u000a    m *= 2\u000a    m[-1] += 1\u000a\u000a    m *= 2\u000a    m[-1] += 1\u000a\u000a    return m\u000a</code></pre>\u000a\u000a<p>and again with a bit of compression:</p>\u000a\u000a<pre><code>def hybrid():\u000a    m = [0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6]\u000a\u000a    m *= 16\u000a    m[127::128] = 7, 8, 7, 9, 7, 8, 7, 10\u000a\u000a    return m\u000a</code></pre>\u000a\u000a<p>But really you should just cache the result and copy it:</p>\u000a\u000a<pre><code>M = [0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,9,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,10]\u000adef copy():\u000a    m = M[:]\u000a</code></pre>\u000a\u000a<p>In fact, if possible you should try tuples, as immutable values don't need to be copied or regenerated at all:</p>\u000a\u000a<pre><code>def immutable():\u000a    m = (0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,9,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,10)\u000a</code></pre>\u000a\u000a<p>Timings on Python 3.4:</p>\u000a\u000a<pre><code>hybrid\u000a2.64736270182766e-06\u000acopy\u000a2.3061631014570593e-06\u000aimmutable\u000a1.1302909697405994e-07\u000a</code></pre>\u000a\u000a<p>Note that the <code>hybrid</code> being timed is my improved version.</p>\u000a
p389
sVquestion_id
p390
I27762547
sVlast_activity_date
p391
I1420362304
sVcreation_date
p392
I1420361299
sVscore
p393
I43
sVowner
p394
(dp395
Vuser_id
p396
I1763356
sVprofile_image
p397
Vhttps://i.stack.imgur.com/zGWG9.png?s=128&g=1
p398
sVuser_type
p399
Vregistered
p400
sVreputation
p401
I31547
sVlink
p402
Vhttp://stackoverflow.com/users/1763356/veedrac
p403
sVaccept_rate
p404
I79
sVdisplay_name
p405
VVeedrac
p406
ssVis_accepted
p407
I01
sVlast_edit_date
p408
I1420362304
sVanswer_id
p409
I27763902
sa(dp410
Vbody
p411
V<p><em><a href="http://effbot.org/zone/import-confusion.htm" rel="noreferrer">Importing Python Modules</a></em> is a great article that explains circular imports in Python.</p>\u000a\u000a<p>The easiest way to fix this is to move the path import to the end of the node module.</p>\u000a
p412
sVquestion_id
p413
I894864
sVlast_activity_date
p414
I1414895055
sVcreation_date
p415
I1242936715
sVscore
p416
I78
sVowner
p417
(dp418
Vuser_id
p419
I97828
sVprofile_image
p420
Vhttps://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG
p421
sVuser_type
p422
Vregistered
p423
sVreputation
p424
I64017
sVlink
p425
Vhttp://stackoverflow.com/users/97828/nadia-alramli
p426
sVdisplay_name
p427
VNadia Alramli
p428
ssVis_accepted
p429
I01
sVlast_edit_date
p430
I1414895055
sVanswer_id
p431
I894885
sa(dp432
Vbody
p433
V<p>Combining the answer from @CraigKerstiens and @allanlei into something I have tested, and verified to work. Heroku sets the HTTP_X_FORWARDED_PROTO to https when request is ssl, and we can use this to check:</p>\u000a\u000a<pre><code>from django.conf import settings\u000afrom django.http import HttpResponseRedirect\u000a\u000a\u000aclass SSLMiddleware(object):\u000a\u000a    def process_request(self, request):\u000a        if not any([settings.DEBUG, request.is_secure(), request.META.get("HTTP_X_FORWARDED_PROTO", "") == 'https']):\u000a            url = request.build_absolute_uri(request.get_full_path())\u000a            secure_url = url.replace("http://", "https://")\u000a            return HttpResponseRedirect(secure_url)\u000a</code></pre>\u000a
p434
sVquestion_id
p435
I8436666
sVlast_activity_date
p436
I1414728865
sVcreation_date
p437
I1328777307
sVscore
p438
I60
sVowner
p439
(dp440
Vuser_id
p441
I3608
sVprofile_image
p442
Vhttps://www.gravatar.com/avatar/50ec8e1a938d2c6ef4362b0e983ff84f?s=128&d=identicon&r=PG
p443
sVuser_type
p444
Vregistered
p445
sVreputation
p446
I4022
sVlink
p447
Vhttp://stackoverflow.com/users/3608/kristian
p448
sVaccept_rate
p449
I100
sVdisplay_name
p450
VKristian
p451
ssVis_accepted
p452
I01
sVlast_edit_date
p453
I1414728865
sVanswer_id
p454
I9207726
sa(dp455
Vbody
p456
V<p>If you're coming to Python from a language in the C/Java/etc. family, it may help you to stop thinking about <code>a</code> as a "variable", and start thinking of it as a "name".</p>\u000a\u000a<p><code>a</code>, <code>b</code>, and <code>c</code> aren't different variables with equal values; they're different names for the same identical value. Variables have types, identities, addresses, and all kinds of stuff like that. </p>\u000a\u000a<p>Names don't have any of that. <em>Values</em> do, of course, and you can have lots of names for the same value.</p>\u000a\u000a<p>If you give <code>Notorious B.I.G.</code> a hot dog,* <code>Biggie Smalls</code> and <code>Chris Wallace</code> have a hot dog. If you change the first element of <code>a</code> to 1, the first elements of <code>b</code> and <code>c</code> are 1.</p>\u000a\u000a<p>If you want to know if two names are naming the same object, use the <code>is</code> operator:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a=b=c=[0,3,5]\u000a&gt;&gt;&gt; a is b\u000aTrue\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>You then ask:</p>\u000a\u000a<blockquote>\u000a  <p>what is different from this?</p>\u000a</blockquote>\u000a\u000a<pre><code>d=e=f=3\u000ae=4\u000aprint('f:',f)\u000aprint('e:',e)\u000a</code></pre>\u000a\u000a<p>Here, you're rebinding the name <code>e</code> to the value <code>4</code>. That doesn't affect the names <code>d</code> and <code>f</code> in any way.</p>\u000a\u000a<p>In your previous version, you were assigning to <code>a[0]</code>, not to <code>a</code>. So, from the point of view of <code>a[0]</code>, you're rebinding <code>a[0]</code>, but from the point of view of <code>a</code>, you're changing it in-place.</p>\u000a\u000a<p>You can use the <code>id</code> function, which gives you some unique number representing the identity of an object, to see exactly which object is which even when <code>is</code> can't help:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a=b=c=[0,3,5]\u000a&gt;&gt;&gt; id(a)\u000a4473392520\u000a&gt;&gt;&gt; id(b)\u000a4473392520\u000a&gt;&gt;&gt; id(a[0])\u000a4297261120\u000a&gt;&gt;&gt; id(b[0])\u000a4297261120\u000a\u000a&gt;&gt;&gt; a[0] = 1\u000a&gt;&gt;&gt; id(a)\u000a4473392520\u000a&gt;&gt;&gt; id(b)\u000a4473392520\u000a&gt;&gt;&gt; id(a[0])\u000a4297261216\u000a&gt;&gt;&gt; id(b[0])\u000a4297261216\u000a</code></pre>\u000a\u000a<p>Notice that <code>a[0]</code> has changed from 4297261120 to 4297261216\u2014it's now a name for a different value. And <code>b[0]</code> is also now a name for that same new value. That's because <code>a</code> and <code>b</code> are still naming the same object.</p>\u000a\u000a<hr>\u000a\u000a<p>Under the covers, <code>a[0]=1</code> is actually calling a method on the list object. (It's equivalent to <code>a.__setitem__(0, 1)</code>.) So, it's not <em>really</em> rebinding anything at all. It's like calling <code>my_object.set_something(1)</code>. Sure, likely the object is rebinding an instance attribute in order to implement this method, but that's not what's important; what's important is that you're not assigning anything, you're just mutating the object. And it's the same with <code>a[0]=1</code>.</p>\u000a\u000a<hr>\u000a\u000a<p>user570826 asked:</p>\u000a\u000a<blockquote>\u000a  <p>What if we have, <code>a = b = c =  10</code></p>\u000a</blockquote>\u000a\u000a<p>That's exactly the same situation as <code>a = b = c = [1, 2, 3]</code>: you have three names for the same value.</p>\u000a\u000a<p>But in this case, the value is an <code>int</code>, and <code>int</code>s are immutable. In either case, you can rebind <code>a</code> to a different value (e.g., <code>a = "Now I'm a string!"</code>), but the won't affect the original value, which <code>b</code> and <code>c</code> will still be names for. The difference is that with a list, you can change the value <code>[1, 2, 3]</code> into <code>[1, 2, 3, 4]</code> by doing, e.g., <code>a.append(4)</code>; since that's actually changing the value that <code>b</code> and <code>c</code> are names for, <code>b</code> will now b <code>[1, 2, 3, 4]</code>. There's no way to change the value <code>10</code> into anything else. <code>10</code> is 10 forever, just like Claudia the vampire is 5 forever (at least until she's replaced by Kirsten Dunst).</p>\u000a\u000a<hr>\u000a\u000a<p>* Warning: Do not give Notorious B.I.G. a hot dog. Gangsta rap zombies should never be fed after midnight.</p>\u000a
p457
sVquestion_id
p458
I16348815
sVlast_activity_date
p459
I1407779396
sVcreation_date
p460
I1367537236
sVscore
p461
I123
sVowner
p462
(dp463
Vuser_id
p464
I908494
sVprofile_image
p465
Vhttps://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG
p466
sVuser_type
p467
Vregistered
p468
sVreputation
p469
I178780
sVlink
p470
Vhttp://stackoverflow.com/users/908494/abarnert
p471
sVaccept_rate
p472
I25
sVdisplay_name
p473
Vabarnert
p474
ssVis_accepted
p475
I01
sVlast_edit_date
p476
I1407779396
sVanswer_id
p477
I16349356
sa(dp478
Vbody
p479
V<p><code>str.startswith</code> allows you to supply a tuple of strings to test for:</p>\u000a\u000a<pre><code>if link.lower().startswith(("js", "catalog", "script", "katalog")):\u000a</code></pre>\u000a\u000a<p>From the <a href="http://docs.python.org/3/library/stdtypes.html#str.startswith">docs</a>:</p>\u000a\u000a<blockquote>\u000a  <p><code>str.startswith(prefix[, start[, end]])</code></p>\u000a  \u000a  <p>Return <code>True</code> if string starts with the <code>prefix</code>, otherwise return <code>False</code>. <strong><code>prefix</code> can also be a tuple of prefixes to look for.</strong> </p>\u000a</blockquote>\u000a\u000a<p>Below is a demonstration:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; "abcde".startswith(("xyz", "abc"))\u000aTrue\u000a&gt;&gt;&gt; prefixes = ["xyz", "abc"]\u000a&gt;&gt;&gt; "abcde".startswith(tuple(prefixes)) # You must use a tuple though\u000aTrue\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a
p480
sVquestion_id
p481
I20461847
sVlast_activity_date
p482
I1405716009
sVcreation_date
p483
I1386554494
sVscore
p484
I97
sVowner
p485
(dp486
Vuser_id
p487
I2555451
sVprofile_image
p488
Vhttps://i.stack.imgur.com/d8F3H.jpg?s=128&g=1
p489
sVuser_type
p490
Vregistered
p491
sVreputation
p492
I83342
sVlink
p493
Vhttp://stackoverflow.com/users/2555451/icodez
p494
sVaccept_rate
p495
I100
sVdisplay_name
p496
ViCodez
p497
ssVis_accepted
p498
I01
sVlast_edit_date
p499
I1405716009
sVanswer_id
p500
I20461857
sa(dp501
Vbody
p502
V<p>For user-defined functions, in Python 2 <em>unbound</em> and <em>bound</em> methods are created on demand, through the <a href="https://docs.python.org/2/howto/descriptor.html">descriptor protocol</a>; <code>OrderedDict.__repr__</code> is such a method object, as the wrapped function is implemented as a <a href="http://hg.python.org/cpython/file/e28004fb30c0/Lib/collections.py#l164">pure-Python function</a>.</p>\u000a\u000a<p>The descriptor protocol will call the <a href="https://docs.python.org/2/reference/datamodel.html#object.__get__"><code>__get__</code> method</a> on objects that support it, so <code>__repr__.__get__()</code> is called whenever you try to access <code>OrderedDict.__repr__</code>; for classes <code>None</code> (no instance) and the class object itself are passed in. Because you get a <em>new</em> method object each time the function <code>__get__</code> method is invoked, <code>is</code> fails. It is not the same method object.</p>\u000a\u000a<p><code>dict.__repr__</code> is not a custom Python function but a C function, and its <code>__get__</code> descriptor method <a href="http://hg.python.org/cpython/file/e28004fb30c0/Objects/descrobject.c#l59">essentially just returns <code>self</code> when accessed on the class</a>. Accessing the attribute gives you the same object each time, so <code>is</code> works:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dict.__repr__.__get__(None, dict) is dict.__repr__  # None means no instance\u000aTrue\u000a</code></pre>\u000a\u000a<p>Methods have a <code>__func__</code> attribute referencing the wrapped function, use that to test for identity:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; OrderedDict.__repr__\u000a&lt;unbound method OrderedDict.__repr__&gt;\u000a&gt;&gt;&gt; OrderedDict.__repr__.__func__\u000a&lt;function __repr__ at 0x102c2f1b8&gt;\u000a&gt;&gt;&gt; OrderedDict.__repr__.__func__.__get__(None, OrderedDict)\u000a&lt;unbound method OrderedDict.__repr__&gt;\u000a&gt;&gt;&gt; OrderedDict.__repr__.__func__ is OrderedDict.__repr__.__func__\u000aTrue\u000a</code></pre>\u000a\u000a<p>Python 3 does away with <em>unbound</em> methods, <code>function.__get__(None, classobj)</code> returns the function object itself (so it behaves like <code>dict.__repr__</code> does). But you will see the same behaviour with <em>bound</em> methods, methods retrieved from an instance.</p>\u000a
p503
sVquestion_id
p504
I24367930
sVlast_activity_date
p505
I1403536903
sVcreation_date
p506
I1403532316
sVscore
p507
I56
sVowner
p508
(dp509
Vuser_id
p510
I100297
sVprofile_image
p511
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p512
sVuser_type
p513
Vmoderator
p514
sVreputation
p515
I554897
sVlink
p516
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p517
sVdisplay_name
p518
VMartijn Pieters
p519
ssVis_accepted
p520
I01
sVlast_edit_date
p521
I1403536903
sVanswer_id
p522
I24368034
sa(dp523
Vbody
p524
V<p><code>subprocess.Popen</code> takes a list of arguments:</p>\u000a\u000a<pre><code>from subprocess import Popen, PIPE\u000a\u000aprocess = Popen(['swfdump', '/tmp/filename.swf', '-d'], stdout=PIPE, stderr=PIPE)\u000astdout, stderr = process.communicate()\u000a</code></pre>\u000a\u000a<p>There's even a <a href="http://docs.python.org/library/subprocess.html#replacing-os-popen-os-popen2-os-popen3" rel="noreferrer">section of the documentation</a> devoted to helping users migrate from <code>os.popen</code> to <code>subprocess</code>.</p>\u000a
p525
sVquestion_id
p526
I12605498
sVlast_activity_date
p527
I1402506772
sVcreation_date
p528
I1348674245
sVscore
p529
I70
sVowner
p530
(dp531
Vuser_id
p532
I464744
sVprofile_image
p533
Vhttps://www.gravatar.com/avatar/3dfd6067f4c69986a652444f44bb6d7c?s=128&d=identicon&r=PG
p534
sVuser_type
p535
Vregistered
p536
sVreputation
p537
I166953
sVlink
p538
Vhttp://stackoverflow.com/users/464744/blender
p539
sVaccept_rate
p540
I86
sVdisplay_name
p541
VBlender
p542
ssVis_accepted
p543
I01
sVlast_edit_date
p544
I1402506772
sVanswer_id
p545
I12605520
sa(dp546
Vbody
p547
V<p>The documentation is confusing. What they mean is this:</p>\u000a\u000a<pre><code>import ConfigParser, os\u000adef get_config():\u000a    config = ConfigParser.ConfigParser()\u000a    config.optionxform=str\u000a    try:\u000a        config.read(os.path.expanduser('~/.myrc'))\u000a        return config\u000a    except Exception, e:\u000a        log.error(e)\u000a\u000ac = get_config()  \u000aprint c.options('rules')\u000a</code></pre>\u000a\u000a<p>I.e. override optionxform, instead of calling it; overriding can be done in a subclass or in the instance. When overriding, set it to a function (rather than the result of calling a function).</p>\u000a\u000a<p>I have now reported <a href="http://bugs.python.org/issue7188" rel="noreferrer">this as a bug</a>, and it has since been fixed.</p>\u000a
p548
sVquestion_id
p549
I1611799
sVlast_activity_date
p550
I1399065106
sVcreation_date
p551
I1256283201
sVscore
p552
I61
sVowner
p553
(dp554
Vuser_id
p555
I33006
sVprofile_image
p556
Vhttps://www.gravatar.com/avatar/3acb8bae5a2b5a28f6fe522a4ea9b873?s=128&d=identicon&r=PG
p557
sVuser_type
p558
Vregistered
p559
sVreputation
p560
I84348
sVlink
p561
Vhttp://stackoverflow.com/users/33006/martin-v-l%c3%b6wis
p562
sVaccept_rate
p563
I88
sVdisplay_name
p564
VMartin v. L&#246;wis
p565
ssVis_accepted
p566
I01
sVlast_edit_date
p567
I1399065106
sVanswer_id
p568
I1611877
sa(dp569
Vbody
p570
V<pre><code>def sort(array=[12,4,5,6,7,3,1,15]):\u000a    less = []\u000a    equal = []\u000a    greater = []\u000a\u000a    if len(array) &gt; 1:\u000a        pivot = array[0]\u000a        for x in array:\u000a            if x &lt; pivot:\u000a                less.append(x)\u000a            if x == pivot:\u000a                equal.append(x)\u000a            if x &gt; pivot:\u000a                greater.append(x)\u000a        # Don't forget to return something!\u000a        return sort(less)+equal+sort(greater)  # Just use the + operator to join lists\u000a    # Note that you want equal ^^^^^ not pivot\u000a    else:  # You need to hande the part at the end of the recursion - when you only have one element in your array, just return the array.\u000a        return array\u000a</code></pre>\u000a
p571
sVquestion_id
p572
I18262306
sVlast_activity_date
p573
I1395229943
sVcreation_date
p574
I1376602951
sVscore
p575
I106
sVowner
p576
(dp577
Vuser_id
p578
I1460057
sVprofile_image
p579
Vhttps://i.stack.imgur.com/T8zcA.jpg?s=128&g=1
p580
sVuser_type
p581
Vregistered
p582
sVreputation
p583
I8075
sVlink
p584
Vhttp://stackoverflow.com/users/1460057/brionius
p585
sVdisplay_name
p586
VBrionius
p587
ssVis_accepted
p588
I01
sVlast_edit_date
p589
I1395229943
sVanswer_id
p590
I18262384
sa(dp591
Vbody
p592
V<p>The "No module named _sysconfigdata_nd" is <a href="https://bugs.launchpad.net/ubuntu/+source/python2.7/+bug/1115466" rel="noreferrer">a bug in the Ubuntu package</a>.</p>\u000a\u000a<p>You can create a softlink as a workaround:</p>\u000a\u000a<pre><code>sudo ln -s /usr/lib/python2.7/plat-*/_sysconfigdata_nd.py /usr/lib/python2.7/\u000a</code></pre>\u000a
p593
sVquestion_id
p594
I15608236
sVlast_activity_date
p595
I1390447818
sVcreation_date
p596
I1366922956
sVscore
p597
I103
sVowner
p598
(dp599
Vuser_id
p600
I310786
sVprofile_image
p601
Vhttps://www.gravatar.com/avatar/0b37cd3a575ed63fccc39429d4c75966?s=128&d=identicon&r=PG
p602
sVuser_type
p603
Vregistered
p604
sVreputation
p605
I1953
sVlink
p606
Vhttp://stackoverflow.com/users/310786/jon-vaughan
p607
sVdisplay_name
p608
VJon Vaughan
p609
ssVis_accepted
p610
I01
sVlast_edit_date
p611
I1390447818
sVanswer_id
p612
I16224441
sa(dp613
Vbody
p614
V<p>The dtype object comes from NumPy, it describes the type of element in a ndarray. Every element in a ndarray must has the same size in byte. For int64 and float64, they are 8 bytes. But for strings, the length of the string is not fixed. So instead of save the bytes of strings in the ndarray directly, Pandas use object ndarray, which save pointers to objects, because of this the dtype of this kind ndarray is object.</p>\u000a\u000a<p>Here is an example:</p>\u000a\u000a<ul>\u000a<li>the int64 array contains 4 int64 value.</li>\u000a<li>the object array contains 4 pointers to 3 string objects.</li>\u000a</ul>\u000a\u000a<p><img src="https://i.stack.imgur.com/pFF44.png" alt="enter image description here"></p>\u000a
p615
sVquestion_id
p616
I21018654
sVlast_activity_date
p617
I1389271295
sVcreation_date
p618
I1389270838
sVscore
p619
I80
sVowner
p620
(dp621
Vuser_id
p622
I772649
sVprofile_image
p623
Vhttps://www.gravatar.com/avatar/03ad01df45fef92e267641197ad00e36?s=128&d=identicon&r=PG
p624
sVuser_type
p625
Vregistered
p626
sVreputation
p627
I49502
sVlink
p628
Vhttp://stackoverflow.com/users/772649/hyry
p629
sVaccept_rate
p630
I56
sVdisplay_name
p631
VHYRY
p632
ssVis_accepted
p633
I01
sVlast_edit_date
p634
I1389271295
sVanswer_id
p635
I21020411
sa(dp636
Vbody
p637
V<p>Alternatively, you can use numpy underlying function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import numpy as np\u000a&gt;&gt;&gt; df = pd.DataFrame({"A": [10,20,30], "B": [20, 30, 10]})\u000a&gt;&gt;&gt; df['new_column'] = np.multiply(df['A'], df['B'])\u000a&gt;&gt;&gt; df\u000a    A   B  new_column\u000a0  10  20         200\u000a1  20  30         600\u000a2  30  10         300\u000a</code></pre>\u000a\u000a<p>or vectorize arbitrary function in general case:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def fx(x, y):\u000a...     return x*y\u000a...\u000a&gt;&gt;&gt; df['new_column'] = np.vectorize(fx)(df['A'], df['B'])\u000a&gt;&gt;&gt; df\u000a    A   B  new_column\u000a0  10  20         200\u000a1  20  30         600\u000a2  30  10         300\u000a</code></pre>\u000a
p638
sVquestion_id
p639
I19914937
sVlast_activity_date
p640
I1384427866
sVcreation_date
p641
I1384427866
sVscore
p642
I38
sVowner
p643
(dp644
Vuser_id
p645
I1265154
sVprofile_image
p646
Vhttps://www.gravatar.com/avatar/ef1fdc2682ebc05a7d10e38d7417ea0a?s=128&d=identicon&r=PG
p647
sVuser_type
p648
Vregistered
p649
sVreputation
p650
I20974
sVlink
p651
Vhttp://stackoverflow.com/users/1265154/alko
p652
sVdisplay_name
p653
Valko
p654
ssVis_accepted
p655
I01
sVanswer_id
p656
I19976286
sa(dp657
Vbody
p658
V<p>Take a look here:</p>\u000a\u000a<p><a href="http://xph.us/2009/12/10/asynchronous-programming-in-python.html" rel="noreferrer">Asynchronous Programming in Python</a></p>\u000a\u000a<p><a href="http://krondo.com/blog/?p=1247" rel="noreferrer">An Introduction to Asynchronous Programming and Twisted</a></p>\u000a\u000a<p>Worth checking out:</p>\u000a\u000a<p><a href="https://plus.google.com/103282573189025907018/posts/6gLX8Nhk5WM" rel="noreferrer">asyncio (previously Tulip) has been checked into the Python default branch</a></p>\u000a
p659
sVquestion_id
p660
I3221314
sVlast_activity_date
p661
I1382481775
sVcreation_date
p662
I1278806742
sVscore
p663
I32
sVowner
p664
(dp665
Vuser_id
p666
I114029
sVprofile_image
p667
Vhttps://www.gravatar.com/avatar/296f29c92c1561c79e034df64dc19f56?s=128&d=identicon&r=PG
p668
sVuser_type
p669
Vregistered
p670
sVreputation
p671
I67444
sVlink
p672
Vhttp://stackoverflow.com/users/114029/leniel-macaferi
p673
sVaccept_rate
p674
I96
sVdisplay_name
p675
VLeniel Macaferi
p676
ssVis_accepted
p677
I01
sVlast_edit_date
p678
I1382481775
sVanswer_id
p679
I3221320
sa(dp680
Vbody
p681
V<p>Flask-login doesn't actually have a user backend, it just handles the session machinery to help you login and logout users. You have to tell it (by decorating methods), what represents a user and it is also up to you to figure out how to know if a user is "active" or not (since being "active" can mean different things in different applications).</p>\u000a\u000a<p>You should read the <a href="https://flask-login.readthedocs.org/en/latest/">documentation</a> and be sure what it does <em>and does not do</em>. Here I am only going to concentrate on wiring it up with the db backend.</p>\u000a\u000a<p>To start off with, define a user object; which represents properties for your users. This object can then query databases, or LDAP, or whatever and it is the hook that connects the login mechanism with your database backend.</p>\u000a\u000a<p>I will be using the <a href="https://gist.github.com/bkdinoop/6698956">login example</a> script for this purpose.</p>\u000a\u000a<pre class="lang-py prettyprint-override"><code>class User(UserMixin):\u000a    def __init__(self, name, id, active=True):\u000a        self.name = name\u000a        self.id = id\u000a        self.active = active\u000a\u000a    def is_active(self):\u000a        # Here you should write whatever the code is\u000a        # that checks the database if your user is active\u000a        return self.active\u000a\u000a    def is_anonymous(self):\u000a        return False\u000a\u000a    def is_authenticated(self):\u000a        return True\u000a</code></pre>\u000a\u000a<p>Once you have the user object created, you need to write a method that loads the user (basically, creates an instance of the <code>User</code> class from above). This method is called with the user id.</p>\u000a\u000a<pre class="lang-py prettyprint-override"><code>@login_manager.user_loader\u000adef load_user(id):\u000a     # 1. Fetch against the database a user by `id` \u000a     # 2. Create a new object of `User` class and return it.\u000a     u = DBUsers.query.get(id)\u000a    return User(u.name,u.id,u.active)\u000a</code></pre>\u000a\u000a<p>Once you have these steps, your login method does this:</p>\u000a\u000a<ol>\u000a<li><p>Checks to see if the username and password match (against your database) - you need to write this code yourself.</p></li>\u000a<li><p>If authentication was successful, get the id of the user and pass it to <code>login_user()</code></p></li>\u000a</ol>\u000a
p682
sVquestion_id
p683
I12075535
sVlast_activity_date
p684
I1380172664
sVcreation_date
p685
I1345671497
sVscore
p686
I44
sVowner
p687
(dp688
Vuser_id
p689
I790387
sVprofile_image
p690
Vhttps://www.gravatar.com/avatar/450fd2737dd0355700a574bd12842509?s=128&d=identicon&r=PG
p691
sVuser_type
p692
Vregistered
p693
sVreputation
p694
I97321
sVlink
p695
Vhttp://stackoverflow.com/users/790387/burhan-khalid
p696
sVaccept_rate
p697
I83
sVdisplay_name
p698
VBurhan Khalid
p699
ssVis_accepted
p700
I01
sVlast_edit_date
p701
I1380172664
sVanswer_id
p702
I12081788
sa(dp703
Vbody
p704
V<p>According to <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html#numpy-argsort" rel="noreferrer">the documentation</a></p>\u000a\u000a<blockquote>\u000a  <p>Returns the indices that would sort an array.</p>\u000a</blockquote>\u000a\u000a<ul>\u000a<li><code>2</code> is the index of <code>0.0</code>.</li>\u000a<li><code>3</code> is the index of <code>0.1</code>.</li>\u000a<li><code>1</code> is the index of <code>1.41</code>.</li>\u000a<li><code>0</code> is the index of <code>1.48</code>.</li>\u000a</ul>\u000a
p705
sVquestion_id
p706
I17901218
sVlast_activity_date
p707
I1374950887
sVcreation_date
p708
I1374950887
sVscore
p709
I42
sVowner
p710
(dp711
Vuser_id
p712
I2225682
sVprofile_image
p713
Vhttps://www.gravatar.com/avatar/4958f4712d94ab82fe55fa471308e4b5?s=128&d=identicon&r=PG
p714
sVuser_type
p715
Vregistered
p716
sVreputation
p717
I195484
sVlink
p718
Vhttp://stackoverflow.com/users/2225682/falsetru
p719
sVdisplay_name
p720
Vfalsetru
p721
ssVis_accepted
p722
I01
sVanswer_id
p723
I17901252
sa(dp724
Vbody
p725
V<p>What you want is called multi-label classification. Scikits-learn can do that. See here: <a href="http://scikit-learn.org/dev/modules/multiclass.html" rel="noreferrer">http://scikit-learn.org/dev/modules/multiclass.html</a>.</p>\u000a\u000a<p>I'm not sure what's going wrong in your example, my version of sklearn apparently doesn't have WordNGramAnalyzer. Perhaps it's a question of using more training examples or trying a different classifier? Though note that the multi-label classifier expects the target to be a list of tuples/lists of labels.</p>\u000a\u000a<p>The following works for me:</p>\u000a\u000a<pre><code>import numpy as np\u000afrom sklearn.pipeline import Pipeline\u000afrom sklearn.feature_extraction.text import CountVectorizer\u000afrom sklearn.svm import LinearSVC\u000afrom sklearn.feature_extraction.text import TfidfTransformer\u000afrom sklearn.multiclass import OneVsRestClassifier\u000a\u000aX_train = np.array(["new york is a hell of a town",\u000a                    "new york was originally dutch",\u000a                    "the big apple is great",\u000a                    "new york is also called the big apple",\u000a                    "nyc is nice",\u000a                    "people abbreviate new york city as nyc",\u000a                    "the capital of great britain is london",\u000a                    "london is in the uk",\u000a                    "london is in england",\u000a                    "london is in great britain",\u000a                    "it rains a lot in london",\u000a                    "london hosts the british museum",\u000a                    "new york is great and so is london",\u000a                    "i like london better than new york"])\u000ay_train = [[0],[0],[0],[0],[0],[0],[1],[1],[1],[1],[1],[1],[0,1],[0,1]]\u000aX_test = np.array(['nice day in nyc',\u000a                   'welcome to london',\u000a                   'hello welcome to new york. enjoy it here and london too'])   \u000atarget_names = ['New York', 'London']\u000a\u000aclassifier = Pipeline([\u000a    ('vectorizer', CountVectorizer(min_n=1,max_n=2)),\u000a    ('tfidf', TfidfTransformer()),\u000a    ('clf', OneVsRestClassifier(LinearSVC()))])\u000aclassifier.fit(X_train, y_train)\u000apredicted = classifier.predict(X_test)\u000afor item, labels in zip(X_test, predicted):\u000a    print '%s =&gt; %s' % (item, ', '.join(target_names[x] for x in labels))\u000a</code></pre>\u000a\u000a<p>For me, this produces the output:</p>\u000a\u000a<pre><code>nice day in nyc =&gt; New York\u000awelcome to london =&gt; London\u000ahello welcome to new york. enjoy it here and london too =&gt; New York, London\u000a</code></pre>\u000a\u000a<p>Hope this helps.</p>\u000a
p726
sVquestion_id
p727
I10526579
sVlast_activity_date
p728
I1373422761
sVcreation_date
p729
I1336627426
sVscore
p730
I76
sVowner
p731
(dp732
Vuser_id
p733
I1365759
sVprofile_image
p734
Vhttps://www.gravatar.com/avatar/70f83f282088b08f6a84c522e3bec71c?s=128&d=identicon&r=PG
p735
sVuser_type
p736
Vregistered
p737
sVreputation
p738
I2001
sVlink
p739
Vhttp://stackoverflow.com/users/1365759/mwv
p740
sVdisplay_name
p741
Vmwv
p742
ssVis_accepted
p743
I01
sVlast_edit_date
p744
I1373422761
sVanswer_id
p745
I10527953
sa(dp746
Vbody
p747
V<p>You could always iterate over a copy of the list, leaving you free to modify the original:</p>\u000a\u000a<pre><code>for item in list(somelist):\u000a  ...\u000a  somelist.remove(item)\u000a</code></pre>\u000a
p748
sVquestion_id
p749
I6022764
sVlast_activity_date
p750
I1371398640
sVcreation_date
p751
I1305576953
sVscore
p752
I73
sVowner
p753
(dp754
Vuser_id
p755
I177511
sVprofile_image
p756
Vhttps://www.gravatar.com/avatar/701586486b117227002bcd1dc9af5cb1?s=128&d=identicon&r=PG
p757
sVuser_type
p758
Vregistered
p759
sVreputation
p760
I7337
sVlink
p761
Vhttp://stackoverflow.com/users/177511/bluepnume
p762
sVaccept_rate
p763
I57
sVdisplay_name
p764
Vbluepnume
p765
ssVis_accepted
p766
I01
sVlast_edit_date
p767
I1371398640
sVanswer_id
p768
I6022811
sa(dp769
Vbody
p770
V<p><code>df['y']</code> will set a column</p>\u000a\u000a<p>since you want to set a row, use <code>.loc</code></p>\u000a\u000a<p>Note that <code>.ix</code> is equivalent here, yours failed because you tried to assign a dictionary\u000ato each element of the row <code>y</code> probably not what you want; converting to a Series tells pandas\u000athat you want to align the input (for example you then don't have to to specify all of the elements)</p>\u000a\u000a<pre><code>In [7]: df = pandas.DataFrame(columns=['a','b','c','d'], index=['x','y','z'])\u000a\u000aIn [8]: df.loc['y'] = pandas.Series({'a':1, 'b':5, 'c':2, 'd':3})\u000a\u000aIn [9]: df\u000aOut[9]: \u000a     a    b    c    d\u000ax  NaN  NaN  NaN  NaN\u000ay    1    5    2    3\u000az  NaN  NaN  NaN  NaN\u000a</code></pre>\u000a
p771
sVquestion_id
p772
I17091769
sVlast_activity_date
p773
I1371140368
sVcreation_date
p774
I1371140368
sVscore
p775
I43
sVowner
p776
(dp777
Vuser_id
p778
I644898
sVprofile_image
p779
Vhttps://www.gravatar.com/avatar/b2833d485728ee2f603802242ebc9826?s=128&d=identicon&r=PG
p780
sVuser_type
p781
Vregistered
p782
sVreputation
p783
I55285
sVlink
p784
Vhttp://stackoverflow.com/users/644898/jeff
p785
sVdisplay_name
p786
VJeff
p787
ssVis_accepted
p788
I01
sVanswer_id
p789
I17092113
sa(dp790
Vbody
p791
V<p><code>simplejson</code> and <code>json</code> don't work with django objects well.</p>\u000a\u000a<p>Django's built-in <a href="https://docs.djangoproject.com/en/dev/topics/serialization/">serializers</a> can only serialize querysets filled with django objects:</p>\u000a\u000a<pre><code>data = serializers.serialize('json', self.get_queryset())\u000areturn HttpResponse(data, mimetype="application/json")\u000a</code></pre>\u000a\u000a<p>In your case, <code>self.get_queryset()</code> contains a mix of django objects and dicts inside.</p>\u000a\u000a<p>One option is to get rid of model instances in the <code>self.get_queryset()</code> and replace them with dicts using <code>model_to_dict</code>:</p>\u000a\u000a<pre><code>from django.forms.models import model_to_dict\u000a\u000adata = self.get_queryset()\u000a\u000afor item in data:\u000a   item['product'] = model_to_dict(item['product'])\u000a\u000areturn HttpResponse(json.simplejson.dumps(data), mimetype="application/json")\u000a</code></pre>\u000a\u000a<p>Hope that helps.</p>\u000a
p792
sVquestion_id
p793
I16790375
sVlast_activity_date
p794
I1369743614
sVcreation_date
p795
I1369739070
sVscore
p796
I54
sVowner
p797
(dp798
Vuser_id
p799
I771848
sVprofile_image
p800
Vhttps://i.stack.imgur.com/2DTBv.jpg?s=128&g=1
p801
sVuser_type
p802
Vregistered
p803
sVreputation
p804
I251764
sVlink
p805
Vhttp://stackoverflow.com/users/771848/alecxe
p806
sVaccept_rate
p807
I99
sVdisplay_name
p808
Valecxe
p809
ssVis_accepted
p810
I01
sVlast_edit_date
p811
I1369743614
sVanswer_id
p812
I16790455
sa(dp813
Vbody
p814
V<p>Put</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000a</code></pre>\u000a\u000a<p>at the top, and</p>\u000a\u000a<pre><code>plt.show()\u000a</code></pre>\u000a\u000a<p>at the end.</p>\u000a
p815
sVquestion_id
p816
I16522380
sVlast_activity_date
p817
I1368449818
sVcreation_date
p818
I1368449818
sVscore
p819
I118
sVowner
p820
(dp821
Vuser_id
p822
I190597
sVprofile_image
p823
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p824
sVuser_type
p825
Vregistered
p826
sVreputation
p827
I425294
sVlink
p828
Vhttp://stackoverflow.com/users/190597/unutbu
p829
sVaccept_rate
p830
I88
sVdisplay_name
p831
Vunutbu
p832
ssVis_accepted
p833
I01
sVanswer_id
p834
I16522626
sa(dp835
Vbody
p836
V<p>The best way in <strong>your particular case</strong> would just be to change your two criteria to one criterion:</p>\u000a\u000a<pre><code>dists[abs(dists - r - dr/2.) &lt;= dr/2.]\u000a</code></pre>\u000a\u000a<p>It only creates one boolean array, and in my opinion is easier to read because it says, <em>is <code>dist</code> within a <code>dr</code> or <code>r</code>?</em> (Though I'd redefine <code>r</code> to be the center of your region of interest instead of the beginning, so <code>r = r + dr/2.</code>)  But that doesn't answer your question.</p>\u000a\u000a<hr>\u000a\u000a<p><strong>The answer to your question:</strong><br>\u000aYou don't actually need <code>where</code> if you're just trying to filter out the elements of <code>dists</code> that don't fit your criteria:</p>\u000a\u000a<pre><code>dists[(dists &gt;= r) &amp; (dists &lt;= r+dr)]\u000a</code></pre>\u000a\u000a<p>Because the <code>&amp;</code> will give you an elementwise <code>and</code> (the parentheses are necessary).</p>\u000a\u000a<p>Or, if you do want to use <code>where</code> for some reason, you can do:</p>\u000a\u000a<pre><code> dists[(np.where((dists &gt;= r) &amp; (dists &lt;= r + dr)))]\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>Why:</strong><br>\u000aThe reason it doesn't work is because <code>np.where</code> returns a list of indices, not a boolean array.  You're trying to get <code>and</code> between two lists of numbers, which of course doesn't have the <code>True</code>/<code>False</code> values that you expect.  If <code>a</code> and <code>b</code> are both <code>True</code> values, then <code>a and b</code> returns <code>b</code>.  So saying something like <code>[0,1,2] and [2,3,4]</code> will just give you <code>[2,3,4]</code>.  Here it is in action:</p>\u000a\u000a<pre><code>In [230]: dists = np.arange(0,10,.5)\u000aIn [231]: r = 5\u000aIn [232]: dr = 1\u000a\u000aIn [233]: np.where(dists &gt;= r)\u000aOut[233]: (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)\u000a\u000aIn [234]: np.where(dists &lt;= r+dr)\u000aOut[234]: (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]),)\u000a\u000aIn [235]: np.where(dists &gt;= r) and np.where(dists &lt;= r+dr)\u000aOut[235]: (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]),)\u000a</code></pre>\u000a\u000a<p>What you were expecting to compare was simply the boolean array, for example</p>\u000a\u000a<pre><code>In [236]: dists &gt;= r\u000aOut[236]: \u000aarray([False, False, False, False, False, False, False, False, False,\u000a       False,  True,  True,  True,  True,  True,  True,  True,  True,\u000a        True,  True], dtype=bool)\u000a\u000aIn [237]: dists &lt;= r + dr\u000aOut[237]: \u000aarray([ True,  True,  True,  True,  True,  True,  True,  True,  True,\u000a        True,  True,  True,  True, False, False, False, False, False,\u000a       False, False], dtype=bool)\u000a\u000aIn [238]: (dists &gt;= r) &amp; (dists &lt;= r + dr)\u000aOut[238]: \u000aarray([False, False, False, False, False, False, False, False, False,\u000a       False,  True,  True,  True, False, False, False, False, False,\u000a       False, False], dtype=bool)\u000a</code></pre>\u000a\u000a<p>Now you can call <code>np.where</code> on the combined boolean array:</p>\u000a\u000a<pre><code>In [239]: np.where((dists &gt;= r) &amp; (dists &lt;= r + dr))\u000aOut[239]: (array([10, 11, 12]),)\u000a\u000aIn [240]: dists[np.where((dists &gt;= r) &amp; (dists &lt;= r + dr))]\u000aOut[240]: array([ 5. ,  5.5,  6. ])\u000a</code></pre>\u000a\u000a<p>Or simply index the original array with the boolean array using <a href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html" rel="noreferrer">fancy indexing</a></p>\u000a\u000a<pre><code>In [241]: dists[(dists &gt;= r) &amp; (dists &lt;= r + dr)]\u000aOut[241]: array([ 5. ,  5.5,  6. ])\u000a</code></pre>\u000a
p837
sVquestion_id
p838
I16343752
sVlast_activity_date
p839
I1367691172
sVcreation_date
p840
I1367514297
sVscore
p841
I75
sVowner
p842
(dp843
Vuser_id
p844
I1730674
sVprofile_image
p845
Vhttps://www.gravatar.com/avatar/8744355c48ff471fda6fe94f603e8a0e?s=128&d=identicon&r=PG
p846
sVuser_type
p847
Vregistered
p848
sVreputation
p849
I21024
sVlink
p850
Vhttp://stackoverflow.com/users/1730674/askewchan
p851
sVaccept_rate
p852
I69
sVdisplay_name
p853
Vaskewchan
p854
ssVis_accepted
p855
I01
sVlast_edit_date
p856
I1367691172
sVanswer_id
p857
I16343791
sa(dp858
Vbody
p859
V<p>Since Python 2.5, <code>yield &lt;value&gt;</code> is an expression, not a statement.  See <a href="http://www.python.org/dev/peps/pep-0342/">PEP 342</a>.</p>\u000a\u000a<p>The code is hideously and unnecessarily ugly, but it's legal.  Its central trick is using <code>f((yield x))</code> inside the generator expression.  Here's a simpler example of how this works:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def f(val):\u000a...     return "Hi"\u000a&gt;&gt;&gt; x = [1, 2, 3]\u000a&gt;&gt;&gt; list(f((yield a)) for a in x)\u000a[1, 'Hi', 2, 'Hi', 3, 'Hi']\u000a</code></pre>\u000a\u000a<p>Basically, using <code>yield</code> in the generator expression causes it to produce two values for every value in the source iterable.  As the generator expression iterates over the list of strings, on each iteration, the <code>yield x</code> first yields a string from the list.  The target expression of the genexp is <code>f((yield x))</code>, so for every value in the list, the "result" of the generator expression is the value of <code>f((yield x))</code>.  But <code>f</code> just ignores its argument and always returns the option string <code>"-o"</code>.  So on every step through the generator, it yields first the key-value string (e.g., <code>"x=1"</code>), then <code>"-o"</code>.  The outer <code>list(reversed(list(...)))</code> just makes a list out of this generator and then reverses it so that the <code>"-o"</code>s will come before each option instead of after.</p>\u000a\u000a<p>However, there is no reason to do it this way.  There are a number of much more readable alternatives.  Perhaps the most explicit is simply:</p>\u000a\u000a<pre><code>kvs = [...] # same list comprehension can be used for this part\u000aresult = []\u000afor keyval in kvs:\u000a   result.append("-o")\u000a   result.append(keyval)\u000areturn result\u000a</code></pre>\u000a\u000a<p>Even if you like terse, "clever" code, you could still just do</p>\u000a\u000a<pre><code>return sum([["-o", keyval] for keyval in kvs], [])\u000a</code></pre>\u000a\u000a<p>The <code>kvs</code> list comprehension itself is a bizarre mix of attempted readability and unreadability.  It is more simply written:</p>\u000a\u000a<pre><code>kvs = [str(optName) + separator + str(optValue) for optName, optValue in options.items()]\u000a</code></pre>\u000a\u000a<p>You should consider arranging an "intervention" for whoever put this in your codebase.</p>\u000a
p860
sVquestion_id
p861
I15955948
sVlast_activity_date
p862
I1365705773
sVcreation_date
p863
I1365704895
sVscore
p864
I43
sVowner
p865
(dp866
Vuser_id
p867
I1427416
sVprofile_image
p868
Vhttps://i.stack.imgur.com/QWHKg.png?s=128&g=1
p869
sVuser_type
p870
Vregistered
p871
sVreputation
p872
I123766
sVlink
p873
Vhttp://stackoverflow.com/users/1427416/brenbarn
p874
sVaccept_rate
p875
I50
sVdisplay_name
p876
VBrenBarn
p877
ssVis_accepted
p878
I01
sVlast_edit_date
p879
I1365705773
sVanswer_id
p880
I15956157
sa(dp881
Vbody
p882
V<p>I haven't reproduced the issue, but perhaps this method would solve it: (writing line by line to <code>stdout</code> rather than using <code>print</code>)</p>\u000a\u000a<pre><code>import sys\u000awith open('a.txt', 'r') as f1:\u000a    for line in f1:\u000a        sys.stdout.write(line)\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>You could catch the broken pipe? This writes the file to <code>stdout</code> line by line until the pipe is closed. </p>\u000a\u000a<pre><code>import sys, errno\u000atry:\u000a    with open('a.txt', 'r') as f1:\u000a        for line in f1:\u000a            sys.stdout.write(line)\u000aexcept IOError as e:\u000a    if e.errno == errno.EPIPE:\u000a        # Handle error\u000a</code></pre>\u000a\u000a<p>You also need to make sure that <code>othercommand</code> is reading from the pipe before it gets too big - <a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer</a></p>\u000a
p883
sVquestion_id
p884
I14207708
sVlast_activity_date
p885
I1357719771
sVcreation_date
p886
I1357619622
sVscore
p887
I19
sVowner
p888
(dp889
Vuser_id
p890
I1129194
sVprofile_image
p891
Vhttps://www.gravatar.com/avatar/bdb7d5f257f8f63f6e03598be92a766f?s=128&d=identicon&r=PG
p892
sVuser_type
p893
Vregistered
p894
sVreputation
p895
I4380
sVlink
p896
Vhttp://stackoverflow.com/users/1129194/alex-l
p897
sVaccept_rate
p898
I90
sVdisplay_name
p899
VAlex L
p900
ssVis_accepted
p901
I01
sVlast_edit_date
p902
I1492086987
sVanswer_id
p903
I14208261
sa(dp904
Vbody
p905
V<p>For DataFrame <code>df</code>:</p>\u000a\u000a<pre><code>import numpy as np\u000aindex = df['b'].index[df['b'].apply(np.isnan)]\u000a</code></pre>\u000a\u000a<p>will give you back the <code>MultiIndex</code> that you can use to index back into <code>df</code>, e.g.:</p>\u000a\u000a<pre><code>df['a'].ix[index[0]]\u000a&gt;&gt;&gt; 1.452354\u000a</code></pre>\u000a\u000a<p>For the integer index:</p>\u000a\u000a<pre><code>df_index = df.index.values.tolist()\u000a[df_index.index(i) for i in index]\u000a&gt;&gt;&gt; [3, 6]\u000a</code></pre>\u000a
p906
sVquestion_id
p907
I14016247
sVlast_activity_date
p908
I1356318132
sVcreation_date
p909
I1356318132
sVscore
p910
I22
sVowner
p911
(dp912
Vuser_id
p913
I696023
sVprofile_image
p914
Vhttps://www.gravatar.com/avatar/a4370f3967d8b29b6c259039620c1c54?s=128&d=identicon&r=PG
p915
sVuser_type
p916
Vregistered
p917
sVreputation
p918
I5582
sVlink
p919
Vhttp://stackoverflow.com/users/696023/diliop
p920
sVdisplay_name
p921
Vdiliop
p922
ssVis_accepted
p923
I01
sVanswer_id
p924
I14016590
sa(dp925
Vbody
p926
V<p>One reason is that <code>dict.keys()</code> predates the introduction of sets into the language.</p>\u000a\u000a<p>Note that the return type of <code>dict.keys()</code> has changed in Python 3: the function now returns a <a href="http://docs.python.org/release/3.3.0/library/stdtypes.html#dict-views">view</a> rather than a list.</p>\u000a
p927
sVquestion_id
p928
I13886129
sVlast_activity_date
p929
I1355518725
sVcreation_date
p930
I1355518725
sVscore
p931
I47
sVowner
p932
(dp933
Vuser_id
p934
I367273
sVprofile_image
p935
Vhttps://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=128&d=identicon&r=PG
p936
sVuser_type
p937
Vregistered
p938
sVreputation
p939
I279603
sVlink
p940
Vhttp://stackoverflow.com/users/367273/npe
p941
sVaccept_rate
p942
I96
sVdisplay_name
p943
VNPE
p944
ssVis_accepted
p945
I01
sVanswer_id
p946
I13886160
sa(dp947
Vbody
p948
V<p>Per <a href="http://ipython.org/ipython-doc/stable/interactive/reference.html" rel="noreferrer">the docs</a>, it's trivial:</p>\u000a\u000a<blockquote>\u000a  <p>You start IPython with the command:</p>\u000a</blockquote>\u000a\u000a<pre><code>$ ipython [options] files\u000a</code></pre>\u000a\u000a<blockquote>\u000a  <p>If invoked with no options, it\u000a  executes all the files listed in\u000a  sequence and drops you into the\u000a  interpreter while still acknowledging\u000a  any options you may have set in your\u000a  <code>ipythonrc</code> file. This behavior is\u000a  different from standard Python, which\u000a  when called as <code>python -i</code> will only\u000a  execute one file and ignore your\u000a  configuration setup.</p>\u000a</blockquote>\u000a\u000a<p>So, just use <code>ipython myfile.py</code>... and there you are!-)</p>\u000a
p949
sVquestion_id
p950
I3323230
sVlast_activity_date
p951
I1354247404
sVcreation_date
p952
I1279948086
sVscore
p953
I24
sVowner
p954
(dp955
Vuser_id
p956
I95810
sVprofile_image
p957
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p958
sVuser_type
p959
Vregistered
p960
sVreputation
p961
I516089
sVlink
p962
Vhttp://stackoverflow.com/users/95810/alex-martelli
p963
sVaccept_rate
p964
I80
sVdisplay_name
p965
VAlex Martelli
p966
ssVis_accepted
p967
I01
sVlast_edit_date
p968
I1354247404
sVanswer_id
p969
I3323899
sa(dp970
Vbody
p971
V<p>You can do it like this</p>\u000a\u000a<pre><code>mylist=['a','b','c','d','e']\u000amyorder=[3,2,0,1,4]\u000amylist = [ mylist[i] for i in myorder]\u000aprint mylist\u000a</code></pre>\u000a
p972
sVquestion_id
p973
I2177590
sVlast_activity_date
p974
I1354117870
sVcreation_date
p975
I1265037044
sVscore
p976
I115
sVowner
p977
(dp978
Vuser_id
p979
I199397
sVprofile_image
p980
Vhttps://www.gravatar.com/avatar/8807d544a2d1049174b4c10fb19977c9?s=128&d=identicon&r=PG
p981
sVuser_type
p982
Vregistered
p983
sVreputation
p984
I17379
sVlink
p985
Vhttp://stackoverflow.com/users/199397/aj
p986
sVaccept_rate
p987
I97
sVdisplay_name
p988
VAJ.
p989
ssVis_accepted
p990
I01
sVlast_edit_date
p991
I1354117870
sVanswer_id
p992
I2177607
sa(dp993
Vbody
p994
V<p>You can do it by setting the aspect of the image manually (or by letting it auto-scale to fill up the extent of the figure).</p>\u000a\u000a<p>By default, <code>imshow</code> sets the aspect of the plot to 1, as this is often what people want for image data.</p>\u000a\u000a<p>In your case, you can do something like:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000aimport numpy as np\u000a\u000agrid = np.random.random((10,10))\u000a\u000afig, (ax1, ax2, ax3) = plt.subplots(nrows=3, figsize=(6,10))\u000a\u000aax1.imshow(grid, extent=[0,100,0,1])\u000aax1.set_title('Default')\u000a\u000aax2.imshow(grid, extent=[0,100,0,1], aspect='auto')\u000aax2.set_title('Auto-scaled Aspect')\u000a\u000aax3.imshow(grid, extent=[0,100,0,1], aspect=100)\u000aax3.set_title('Manually Set Aspect')\u000a\u000aplt.tight_layout()\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/N5cOB.png" alt="enter image description here"></p>\u000a
p995
sVquestion_id
p996
I13384653
sVlast_activity_date
p997
I1352946977
sVcreation_date
p998
I1352946977
sVscore
p999
I86
sVowner
p1000
(dp1001
Vuser_id
p1002
I325565
sVprofile_image
p1003
Vhttps://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=128&d=identicon&r=PG
p1004
sVuser_type
p1005
Vregistered
p1006
sVreputation
p1007
I136691
sVlink
p1008
Vhttp://stackoverflow.com/users/325565/joe-kington
p1009
sVdisplay_name
p1010
VJoe Kington
p1011
ssVis_accepted
p1012
I01
sVanswer_id
p1013
I13390798
sa(dp1014
Vbody
p1015
V<p>By adding a few more headers I was able to get the data:</p>\u000a\u000a<pre><code>import urllib2,cookielib\u000a\u000asite= "http://www.nseindia.com/live_market/dynaContent/live_watch/get_quote/getHistoricalData.jsp?symbol=JPASSOCIAT&amp;fromDate=1-JAN-2012&amp;toDate=1-AUG-2012&amp;datePeriod=unselected&amp;hiddDwnld=true"\u000ahdr = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',\u000a       'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\u000a       'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',\u000a       'Accept-Encoding': 'none',\u000a       'Accept-Language': 'en-US,en;q=0.8',\u000a       'Connection': 'keep-alive'}\u000a\u000areq = urllib2.Request(site, headers=hdr)\u000a\u000atry:\u000a    page = urllib2.urlopen(req)\u000aexcept urllib2.HTTPError, e:\u000a    print e.fp.read()\u000a\u000acontent = page.read()\u000aprint content\u000a</code></pre>\u000a\u000a<p>Actually, it works with just this one additional header:</p>\u000a\u000a<pre><code>'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\u000a</code></pre>\u000a
p1016
sVquestion_id
p1017
I13303449
sVlast_activity_date
p1018
I1352446029
sVcreation_date
p1019
I1352445552
sVscore
p1020
I96
sVowner
p1021
(dp1022
Vuser_id
p1023
I909393
sVprofile_image
p1024
Vhttps://www.gravatar.com/avatar/74484afdfed3208ac5b1103b1fb1e8b4?s=128&d=identicon&r=PG
p1025
sVuser_type
p1026
Vregistered
p1027
sVreputation
p1028
I4210
sVlink
p1029
Vhttp://stackoverflow.com/users/909393/andrean
p1030
sVaccept_rate
p1031
I100
sVdisplay_name
p1032
Vandrean
p1033
ssVis_accepted
p1034
I01
sVlast_edit_date
p1035
I1352446029
sVanswer_id
p1036
I13303773
sa(dp1037
Vbody
p1038
V<p>So your data isn't that big, and the fact that you're having trouble plotting it points to issues with the tools.   Matplotlib.... isn't that good.  It has lots of options and the output is fine, but it's a huge memory hog and it fundamentally assumes your data is small.  But there are other options out there.</p>\u000a\u000a<p>So as an example, I generated a 20M data-point file 'bigdata.bin' using the following:</p>\u000a\u000a<pre><code>#!/usr/bin/env python\u000aimport numpy\u000aimport scipy.io.numpyio\u000a\u000anpts=20000000\u000afilename='bigdata.bin'\u000a\u000adef main():\u000a    data = (numpy.random.uniform(0,1,(npts,3))).astype(numpy.float32)\u000a    data[:,2] = 0.1*data[:,2]+numpy.exp(-((data[:,1]-0.5)**2.)/(0.25**2))\u000a    fd = open(filename,'wb')\u000a    scipy.io.numpyio.fwrite(fd,data.size,data)\u000a    fd.close()\u000a\u000aif __name__ == "__main__":\u000a    main()\u000a</code></pre>\u000a\u000a<p>This generates a file of size ~229MB, which isn't all that big; but you've expressed that you'd like to go to even larger files, so you'll hit memory limits eventually.</p>\u000a\u000a<p>Let's concentrate on non-interactive plots first.  The first thing to realize is that vector plots with glyphs at each point are going to be a disaster -- for each of the 20 M points, most of which are going to overlap anyway, trying to render little crosses or circles or something is going to be a diaster, generating huge files and taking tonnes of time.   This, I think is what is sinking matplotlib by default.   </p>\u000a\u000a<p>Gnuplot has no trouble dealing with this:</p>\u000a\u000a<pre><code>gnuplot&gt; set term png\u000agnuplot&gt; set output 'foo.png'\u000agnuplot&gt; plot 'bigdata.bin' binary format="%3float32" using 2:3 with dots\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/6INOr.png" alt="gnuplot"></p>\u000a\u000a<p>And even Matplotlib can be made to behave with some caution (choosing a raster back end, and using pixels to mark points):</p>\u000a\u000a<pre><code>#!/usr/bin/env python\u000aimport numpy\u000aimport matplotlib\u000amatplotlib.use('Agg')\u000aimport matplotlib.pyplot as plt\u000a\u000adatatype=[('index',numpy.float32), ('floati',numpy.float32), \u000a        ('floatq',numpy.float32)]\u000afilename='bigdata.bin'\u000a\u000adef main():\u000a    data = numpy.memmap(filename, datatype, 'r') \u000a    plt.plot(data['floati'],data['floatq'],'r,')\u000a    plt.grid(True)\u000a    plt.title("Signal-Diagram")\u000a    plt.xlabel("Sample")\u000a    plt.ylabel("In-Phase")\u000a    plt.savefig('foo2.png')\u000a\u000aif __name__ == "__main__":\u000a    main()  \u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/PjFoD.png" alt="matplotlib"></p>\u000a\u000a<p>Now, if you want interactive, you're going to have to bin the data to plot, and zoom in on the fly.   I don't know of any python tools that will help you do this offhand.  </p>\u000a\u000a<p>On the other hand, plotting-big-data is a pretty common task, and there are tools that are up for the job.   <a href="http://www.paraview.org/">Paraview</a> is my personal favourite, and <a href="https://wci.llnl.gov/codes/visit/">VisIt</a> is another one.  They both are mainly for 3D data, but Paraview in particular does 2d as well, and is very interactive (and even has a Python scripting interface).  The only trick will be to write the data into a file format that Paraview can easily read.</p>\u000a
p1039
sVquestion_id
p1040
I5854515
sVlast_activity_date
p1041
I1350985161
sVcreation_date
p1042
I1304344707
sVscore
p1043
I52
sVowner
p1044
(dp1045
Vuser_id
p1046
I463827
sVprofile_image
p1047
Vhttps://i.stack.imgur.com/gwR2m.jpg?s=128&g=1
p1048
sVuser_type
p1049
Vregistered
p1050
sVreputation
p1051
I37658
sVlink
p1052
Vhttp://stackoverflow.com/users/463827/jonathan-dursi
p1053
sVdisplay_name
p1054
VJonathan Dursi
p1055
ssVis_accepted
p1056
I01
sVlast_edit_date
p1057
I1350985161
sVanswer_id
p1058
I5858061
sa(dp1059
Vbody
p1060
V<p>You need to use <a href="http://docs.python.org/library/threading.html#threading.Thread.join" rel="noreferrer">join</a> method of <code>Thread</code> object in the end of the script.</p>\u000a\u000a<pre><code>t1 = Thread(target=call_script, args=(scriptA + argumentsA))\u000at2 = Thread(target=call_script, args=(scriptA + argumentsB))\u000at3 = Thread(target=call_script, args=(scriptA + argumentsC))\u000a\u000at1.start()\u000at2.start()\u000at3.start()\u000a\u000at1.join()\u000at2.join()\u000at3.join()\u000a</code></pre>\u000a\u000a<p>Thus the main thread will wait till <code>t1</code>, <code>t2</code> and <code>t3</code> finish execution.</p>\u000a
p1061
sVquestion_id
p1062
I11968689
sVlast_activity_date
p1063
I1345032464
sVcreation_date
p1064
I1345031667
sVscore
p1065
I65
sVowner
p1066
(dp1067
Vuser_id
p1068
I276274
sVprofile_image
p1069
Vhttps://www.gravatar.com/avatar/ee2c630670b64d21fd77f858867c6e69?s=128&d=identicon&r=PG
p1070
sVuser_type
p1071
Vregistered
p1072
sVreputation
p1073
I6178
sVlink
p1074
Vhttp://stackoverflow.com/users/276274/maksim-skurydzin
p1075
sVaccept_rate
p1076
I87
sVdisplay_name
p1077
VMaksim Skurydzin
p1078
ssVis_accepted
p1079
I01
sVlast_edit_date
p1080
I1345032464
sVanswer_id
p1081
I11968818
sa(dp1082
Vbody
p1083
V<p>Yes, you need the full path.  </p>\u000a\u000a<pre><code>log = open(os.path.join(root, f), 'r')\u000a</code></pre>\u000a\u000a<p>Is the quick fix.  As the comment pointed out, <code>os.walk</code> decends into subdirs so you do need to use the current directory root rather than <code>indir</code> as the base for the path join.</p>\u000a
p1084
sVquestion_id
p1085
I11801309
sVlast_activity_date
p1086
I1344019064
sVcreation_date
p1087
I1344018720
sVscore
p1088
I21
sVowner
p1089
(dp1090
Vuser_id
p1091
I191450
sVprofile_image
p1092
Vhttps://www.gravatar.com/avatar/24a895bcec11df8f488a259f518063fc?s=128&d=identicon&r=PG
p1093
sVuser_type
p1094
Vregistered
p1095
sVreputation
p1096
I8046
sVlink
p1097
Vhttp://stackoverflow.com/users/191450/koblas
p1098
sVaccept_rate
p1099
I91
sVdisplay_name
p1100
Vkoblas
p1101
ssVis_accepted
p1102
I01
sVlast_edit_date
p1103
I1344019064
sVanswer_id
p1104
I11801336
sa(dp1105
Vbody
p1106
V<p>This method is almost identical to yours, just more numpyst (also working on numpy arrays only):</p>\u000a\u000a<pre><code>def reject_outliers(data, m=2):\u000a    return data[abs(data - np.mean(data)) &lt; m * np.std(data)]\u000a</code></pre>\u000a
p1107
sVquestion_id
p1108
I11686720
sVlast_activity_date
p1109
I1343388477
sVcreation_date
p1110
I1343388150
sVscore
p1111
I52
sVowner
p1112
(dp1113
Vuser_id
p1114
I449449
sVprofile_image
p1115
Vhttps://www.gravatar.com/avatar/b52c27e86c87d931e654d6a2d2cdf974?s=128&d=identicon&r=PG
p1116
sVuser_type
p1117
Vregistered
p1118
sVreputation
p1119
I94835
sVlink
p1120
Vhttp://stackoverflow.com/users/449449/eumiro
p1121
sVaccept_rate
p1122
I100
sVdisplay_name
p1123
Veumiro
p1124
ssVis_accepted
p1125
I01
sVlast_edit_date
p1126
I1343388477
sVanswer_id
p1127
I11686764
sa(dp1128
Vbody
p1129
V<p>Because <code>finally</code> statements are <strong>guaranteed</strong> to be executed (well, presuming no power outage or anything outside of Python's control). This means that before the function can return, it must run the finally block, which returns a different value.</p>\u000a\u000a<p>The <a href="http://docs.python.org/reference/compound_stmts.html#the-try-statement">Python docs</a> state:</p>\u000a\u000a<blockquote>\u000a  <p>When a return, break or continue statement is executed in the try suite of a try...finally statement, the finally clause is also executed \u2018on the way out.\u2019 A continue statement is illegal in the finally clause. (The reason is a problem with the current implementation \u2014 this restriction may be lifted in the future).</p>\u000a</blockquote>\u000a\u000a<p>This means that when you try to return, the <code>finally</code> block is called, returning it's value, rather than the one that you would have had.</p>\u000a
p1130
sVquestion_id
p1131
I11164144
sVlast_activity_date
p1132
I1340399344
sVcreation_date
p1133
I1340399344
sVscore
p1134
I72
sVowner
p1135
(dp1136
Vuser_id
p1137
I722121
sVprofile_image
p1138
Vhttps://www.gravatar.com/avatar/c494fd4b406a2c066054ad17d30ae73b?s=128&d=identicon&r=PG
p1139
sVuser_type
p1140
Vregistered
p1141
sVreputation
p1142
I51344
sVlink
p1143
Vhttp://stackoverflow.com/users/722121/gareth-latty
p1144
sVaccept_rate
p1145
I100
sVdisplay_name
p1146
VGareth Latty
p1147
ssVis_accepted
p1148
I01
sVanswer_id
p1149
I11164157
sa(dp1150
Vbody
p1151
V<p>Ok I figured it out. It appears to be an issue with Werkzeug and os's that support ipv6.</p>\u000a\u000a<p>From the Werkzeug site <a href="http://werkzeug.pocoo.org/docs/serving/" rel="noreferrer">http://werkzeug.pocoo.org/docs/serving/</a>:</p>\u000a\u000a<blockquote>\u000a  <p>On operating systems that support ipv6 and have it configured such as modern Linux systems, OS X 10.4 or higher as well as Windows Vista some browsers can be painfully slow if accessing your local server. The reason for this is that sometimes \u201clocalhost\u201d is configured to be available on both ipv4 and ipv6 socktes and some browsers will try to access ipv6 first and then ivp4. </p>\u000a</blockquote>\u000a\u000a<p>So the fix is to disable ipv6 from the localhost by commenting out the following line from my hosts file:</p>\u000a\u000a<pre><code>::1             localhost \u000a</code></pre>\u000a\u000a<p>Once I do this the latency problems go away.</p>\u000a\u000a<p>I'm really digging Flask and I'm glad that it's not a problem with the framework. I knew it couldn't be.</p>\u000a
p1152
sVquestion_id
p1153
I11150343
sVlast_activity_date
p1154
I1340344566
sVcreation_date
p1155
I1340344566
sVscore
p1156
I56
sVowner
p1157
(dp1158
Vuser_id
p1159
I59877
sVprofile_image
p1160
Vhttps://www.gravatar.com/avatar/60ff0a45eb4b03c984ef5f7be8b50521?s=128&d=identicon&r=PG
p1161
sVuser_type
p1162
Vregistered
p1163
sVreputation
p1164
I1483
sVlink
p1165
Vhttp://stackoverflow.com/users/59877/meroon
p1166
sVaccept_rate
p1167
I71
sVdisplay_name
p1168
VMeroon
p1169
ssVis_accepted
p1170
I01
sVanswer_id
p1171
I11150849
sa(dp1172
Vbody
p1173
V<p>For a detailed description of how Python's hashing works see my answer to <a href="http://stackoverflow.com/questions/8271139">Why is early return slower than else?</a></p>\u000a\u000a<p>Basically it uses the hash to pick a slot in the table. If there is a value in the slot and the hash matches, it compares the items to see if they are equal.</p>\u000a\u000a<p>If the hash doesn't match or the items aren't equal, then it tries another slot. There's a formula to pick this (which I describe in the referenced answer), and it gradually pulls in unused parts of the hash value; but once it has used them all up, it will eventually work its way through all slots in the hash table. That guarantees eventually we either find a matching item or an empty slot. When the search finds an empty slot, it inserts the value or gives up (depending whether we are adding or getting a value).</p>\u000a\u000a<p>The important thing to note is that there are no lists or buckets: there is just a hash table with a particular number of slots, and each hash is used to generate a sequence of candidate slots.</p>\u000a
p1174
sVquestion_id
p1175
I9010222
sVlast_activity_date
p1176
I1338905235
sVcreation_date
p1177
I1327526813
sVscore
p1178
I22
sVowner
p1179
(dp1180
Vuser_id
p1181
I107660
sVprofile_image
p1182
Vhttps://www.gravatar.com/avatar/0167bade38130f13a5fc468c10388d9d?s=128&d=identicon&r=PG
p1183
sVuser_type
p1184
Vregistered
p1185
sVreputation
p1186
I46101
sVlink
p1187
Vhttp://stackoverflow.com/users/107660/duncan
p1188
sVdisplay_name
p1189
VDuncan
p1190
ssVis_accepted
p1191
I01
sVlast_edit_date
p1192
I1338905235
sVanswer_id
p1193
I9010557
sa(dp1194
Vbody
p1195
V<pre><code>list[:10]\u000a</code></pre>\u000a\u000a<p>will give you the first 10 elements of this list using slicing.</p>\u000a\u000a<p>However, note, it's best <strong><em>not</em></strong> to use <code>list</code> as a variable identifier as it's already used by Python: <a href="http://docs.python.org/library/functions.html#list">list()</a></p>\u000a\u000a<p>To find out more about these type of operations you might find this <a href="http://docs.python.org/tutorial/introduction.html#lists">tutorial on lists</a> helpful and the link @DarenThomas provided <a href="http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation">Good Primer for Python Slice Notation</a> - thanks Daren)</p>\u000a
p1196
sVquestion_id
p1197
I10897339
sVlast_activity_date
p1198
I1338902612
sVcreation_date
p1199
I1338899483
sVscore
p1200
I104
sVowner
p1201
(dp1202
Vuser_id
p1203
I1209279
sVprofile_image
p1204
Vhttps://www.gravatar.com/avatar/516b0a47cdf1739c51ff9dee89f0d459?s=128&d=identicon&r=PG
p1205
sVuser_type
p1206
Vregistered
p1207
sVreputation
p1208
I60869
sVlink
p1209
Vhttp://stackoverflow.com/users/1209279/levon
p1210
sVaccept_rate
p1211
I91
sVdisplay_name
p1212
VLevon
p1213
ssVis_accepted
p1214
I01
sVlast_edit_date
p1215
I1338902612
sVanswer_id
p1216
I10897354
sa(dp1217
Vbody
p1218
V<p>The Flask config is entirely separate from gunicorn's. Following <a href="http://flask.pocoo.org/docs/config/#configuring-from-files" rel="noreferrer">the Flask documentation on config files</a>, a good solution would be change my source to this:</p>\u000a\u000a<pre><code>app = Flask(__name__)\u000aapp.config.from_pyfile('config.py')\u000a</code></pre>\u000a\u000a<p>And in config.py:</p>\u000a\u000a<pre><code>DEBUG = True\u000a</code></pre>\u000a
p1219
sVquestion_id
p1220
I8950674
sVlast_activity_date
p1221
I1327214066
sVcreation_date
p1222
I1327208603
sVscore
p1223
I39
sVowner
p1224
(dp1225
Vuser_id
p1226
I425050
sVprofile_image
p1227
Vhttps://www.gravatar.com/avatar/5d3f6894c5dbedb1e0e4dd94fe6b9b7d?s=128&d=identicon&r=PG
p1228
sVuser_type
p1229
Vregistered
p1230
sVreputation
p1231
I1374
sVlink
p1232
Vhttp://stackoverflow.com/users/425050/mafrosis
p1233
sVaccept_rate
p1234
I83
sVdisplay_name
p1235
Vmafrosis
p1236
ssVis_accepted
p1237
I01
sVlast_edit_date
p1238
I1327214066
sVanswer_id
p1239
I8959107
sa(dp1240
Vbody
p1241
V<p>Use <code>-</code> to get the difference between two <code>datetime</code> objects and take the <code>days</code> member.</p>\u000a\u000a<pre><code>from datetime import datetime\u000a\u000adef days_between(d1, d2):\u000a    d1 = datetime.strptime(d1, "%Y-%m-%d")\u000a    d2 = datetime.strptime(d2, "%Y-%m-%d")\u000a    return abs((d2 - d1).days)\u000a</code></pre>\u000a
p1242
sVquestion_id
p1243
I8419564
sVlast_activity_date
p1244
I1323278570
sVcreation_date
p1245
I1323278570
sVscore
p1246
I107
sVowner
p1247
(dp1248
Vuser_id
p1249
I166749
sVprofile_image
p1250
Vhttps://www.gravatar.com/avatar/cadb49057f720b1c1670d14bbd4567ca?s=128&d=identicon&r=PG&f=1
p1251
sVuser_type
p1252
Vregistered
p1253
sVreputation
p1254
I242543
sVlink
p1255
Vhttp://stackoverflow.com/users/166749/fred-foo
p1256
sVaccept_rate
p1257
I94
sVdisplay_name
p1258
VFred Foo
p1259
ssVis_accepted
p1260
I01
sVanswer_id
p1261
I8419655
sa(dp1262
Vbody
p1263
V<p>You are probably looking for <a href="http://docs.python.org/release/3.1.3/library/io.html#binary-i-o">io.BytesIO</a> class. It works exactly like StringIO except that it supports binary data:</p>\u000a\u000a<pre><code>from io import BytesIO\u000abio = BytesIO(b"some initial binary data: \u005cx00\u005cx01")\u000a</code></pre>\u000a\u000a<p>StringIO will throw TypeError:</p>\u000a\u000a<pre><code>from io import StringIO\u000asio = StringIO(b"some initial binary data: \u005cx00\u005cx01")\u000a</code></pre>\u000a
p1264
sVquestion_id
p1265
I25116
sVlast_activity_date
p1266
I1315550074
sVcreation_date
p1267
I1315550074
sVscore
p1268
I61
sVowner
p1269
(dp1270
Vuser_id
p1271
I828885
sVprofile_image
p1272
Vhttps://www.gravatar.com/avatar/aa0e12ffc4f5d2dd2ea629d7e7e92018?s=128&d=identicon&r=PG
p1273
sVuser_type
p1274
Vregistered
p1275
sVreputation
p1276
I1574
sVlink
p1277
Vhttp://stackoverflow.com/users/828885/akhan
p1278
sVdisplay_name
p1279
Vakhan
p1280
ssVis_accepted
p1281
I01
sVanswer_id
p1282
I7357938
sa(dp1283
Vbody
p1284
V<p><code>list.sort</code> sorts the list in place, i.e. it doesn't return a new list. Just write</p>\u000a\u000a<pre><code>newList.sort()\u000areturn newList\u000a</code></pre>\u000a
p1285
sVquestion_id
p1286
I7301110
sVlast_activity_date
p1287
I1315159231
sVcreation_date
p1288
I1315159231
sVscore
p1289
I56
sVowner
p1290
(dp1291
Vuser_id
p1292
I281108
sVprofile_image
p1293
Vhttps://www.gravatar.com/avatar/b160d50a7ecfe6018348629cb8677538?s=128&d=identicon&r=PG
p1294
sVuser_type
p1295
Vregistered
p1296
sVreputation
p1297
I18858
sVlink
p1298
Vhttp://stackoverflow.com/users/281108/ismail-badawi
p1299
sVaccept_rate
p1300
I95
sVdisplay_name
p1301
VIsmail Badawi
p1302
ssVis_accepted
p1303
I01
sVanswer_id
p1304
I7301126
sa(dp1305
Vbody
p1306
V<p>Python's built-in structures are thread-safe for single operations, but it can sometimes be hard to see where a statement really becomes multiple operations.</p>\u000a\u000a<p>Your code should be safe.  Keep in mind: a lock here will add almost no overhead, and will give you peace of mind.</p>\u000a\u000a<p><a href="http://effbot.org/pyfaq/what-kinds-of-global-value-mutation-are-thread-safe.htm">http://effbot.org/pyfaq/what-kinds-of-global-value-mutation-are-thread-safe.htm</a>  has more details.</p>\u000a
p1307
sVquestion_id
p1308
I6953351
sVlast_activity_date
p1309
I1312544554
sVcreation_date
p1310
I1312544554
sVscore
p1311
I44
sVowner
p1312
(dp1313
Vuser_id
p1314
I14343
sVprofile_image
p1315
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p1316
sVuser_type
p1317
Vregistered
p1318
sVreputation
p1319
I193903
sVlink
p1320
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p1321
sVaccept_rate
p1322
I80
sVdisplay_name
p1323
VNed Batchelder
p1324
ssVis_accepted
p1325
I01
sVanswer_id
p1326
I6955678
sa(dp1327
Vbody
p1328
V<p>Both toolkits are actively maintained, and by now more or less equal in features and quality.  There are only few, rather unimportant differences.</p>\u000a\u000a<p>Still, I'd recommend PySide for Python 2.  It has a more reasonable API, mainly it doesn't expose Qt types, which have a direct equivalent in Python (e.g. QString, QList, etc.) or which are completely superfluous due to Python's dynamic nature, like QVariant.  This avoids many tedious conversions to and from Qt types, and thus eases programming and avoids many errors.  </p>\u000a\u000a<p>PyQt also supports this modern API, and uses it by default for Python 3, but not for Python 2 to maintain backwards compatibility.</p>\u000a
p1329
sVquestion_id
p1330
I6888750
sVlast_activity_date
p1331
I1312116628
sVcreation_date
p1332
I1312116628
sVscore
p1333
I19
sVowner
p1334
(dp1335
Vuser_id
p1336
I355252
sVprofile_image
p1337
Vhttps://i.stack.imgur.com/ebO5J.jpg?s=128&g=1
p1338
sVuser_type
p1339
Vregistered
p1340
sVreputation
p1341
I22739
sVlink
p1342
Vhttp://stackoverflow.com/users/355252/lunaryorn
p1343
sVaccept_rate
p1344
I43
sVdisplay_name
p1345
Vlunaryorn
p1346
ssVis_accepted
p1347
I01
sVanswer_id
p1348
I6889577
sa(dp1349
Vbody
p1350
V<pre><code>import math\u000ax = 1234.5678\u000amath.modf(x) # (0.5678000000000338, 1234.0)\u000a</code></pre>\u000a
p1351
sVquestion_id
p1352
I6681743
sVlast_activity_date
p1353
I1310572396
sVcreation_date
p1354
I1310572396
sVscore
p1355
I72
sVowner
p1356
(dp1357
Vuser_id
p1358
I772606
sVprofile_image
p1359
Vhttps://www.gravatar.com/avatar/05dbf21a636b1fefc5c964212887f8c8?s=128&d=identicon&r=PG
p1360
sVuser_type
p1361
Vregistered
p1362
sVreputation
p1363
I5495
sVlink
p1364
Vhttp://stackoverflow.com/users/772606/mhyfritz
p1365
sVdisplay_name
p1366
Vmhyfritz
p1367
ssVis_accepted
p1368
I01
sVanswer_id
p1369
I6681808
sa(dp1370
Vbody
p1371
V<p>The string you're trying to parse as a JSON is not encoded in UTF-8. Most likely it is encoded in ISO-8859-1. Try the following:</p>\u000a\u000a<pre><code>json.loads(unicode(opener.open(...), "ISO-8859-1"))\u000a</code></pre>\u000a\u000a<p>That will handle any umlauts that might get in the JSON message.</p>\u000a\u000a<p>You should read Joel Spolsky's <a href="http://www.joelonsoftware.com/articles/Unicode.html" rel="noreferrer">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a>. I hope that it will clarify some issues you're having around Unicode.</p>\u000a
p1372
sVquestion_id
p1373
I6180521
sVlast_activity_date
p1374
I1306858584
sVcreation_date
p1375
I1306858584
sVscore
p1376
I76
sVowner
p1377
(dp1378
Vuser_id
p1379
I122460
sVprofile_image
p1380
Vhttps://www.gravatar.com/avatar/0825b879ddfc7fd2b2f5c918a18641d2?s=128&d=identicon&r=PG
p1381
sVuser_type
p1382
Vregistered
p1383
sVreputation
p1384
I5796
sVlink
p1385
Vhttp://stackoverflow.com/users/122460/tadeusz-a-kad%c5%82ubowski
p1386
sVaccept_rate
p1387
I80
sVdisplay_name
p1388
VTadeusz A. Kad\u0142ubowski
p1389
ssVis_accepted
p1390
I01
sVanswer_id
p1391
I6190499
sa(dp1392
Vbody
p1393
V<p>Apart from <code>timeit</code> which ThiefMaster mentioned, a simple way to do it is just (after importing <code>time</code>):</p>\u000a\u000a<pre><code>t = time.time()\u000a# do stuff\u000aelapsed = time.time() - t\u000a</code></pre>\u000a\u000a<p>I have a helper class I like to use:</p>\u000a\u000a<pre><code>class Timer(object):\u000a    def __init__(self, name=None):\u000a        self.name = name\u000a\u000a    def __enter__(self):\u000a        self.tstart = time.time()\u000a\u000a    def __exit__(self, type, value, traceback):\u000a        if self.name:\u000a            print '[%s]' % self.name,\u000a        print 'Elapsed: %s' % (time.time() - self.tstart)\u000a</code></pre>\u000a\u000a<p>It can be used as a context manager:</p>\u000a\u000a<pre><code>with Timer('foo_stuff'):\u000a   # do some foo\u000a   # do some stuff\u000a</code></pre>\u000a\u000a<p>Sometimes I find this technique more convenient than <code>timeit</code> - it all depends on what you want to measure.</p>\u000a
p1394
sVquestion_id
p1395
I5849800
sVlast_activity_date
p1396
I1304268913
sVcreation_date
p1397
I1304268913
sVscore
p1398
I78
sVowner
p1399
(dp1400
Vuser_id
p1401
I8206
sVprofile_image
p1402
Vhttps://www.gravatar.com/avatar/fc761ccaf6c0d7d977e2959f9bfebd06?s=128&d=identicon&r=PG
p1403
sVuser_type
p1404
Vregistered
p1405
sVreputation
p1406
I133054
sVlink
p1407
Vhttp://stackoverflow.com/users/8206/eli-bendersky
p1408
sVaccept_rate
p1409
I94
sVdisplay_name
p1410
VEli Bendersky
p1411
ssVis_accepted
p1412
I01
sVanswer_id
p1413
I5849861
sa(dp1414
Vbody
p1415
V<p>Looks like Nodebox might be what you want:</p>\u000a\u000a<p><a href="http://nodebox.net/code/index.php/Graph" rel="noreferrer">http://nodebox.net/code/index.php/Graph</a> <strong>Mac OSX</strong></p>\u000a\u000a<p><a href="http://www.cityinabottle.org/nodebox/" rel="noreferrer">http://www.cityinabottle.org/nodebox/</a> <strong>Windows</strong> (using OpenGL)</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/VC7dp.jpg" alt="Nodebox screenshot"></p>\u000a\u000a<blockquote>\u000a  <p>The graph object has functionality for mouse interaction as well, bundled\u000a  in the <code>graph.events</code> object. It has the\u000a  following properties:</p>\u000a  \u000a  <ul>\u000a  <li><code>graph.events.hovered</code>: <code>None</code> or the node over which the mouse hovers.</li>\u000a  <li><code>graph.events.pressed</code>: <code>None</code> or the node on which the mouse is\u000a  pressing down.</li>\u000a  <li><code>graph.events.dragged</code>: <code>None</code> or the node being dragged.</li>\u000a  <li><code>graph.events.clicked</code>: <code>None</code> or the last node clicked.</li>\u000a  <li><code>graph.events.popup</code>: when <code>True</code>, will display a popup window over the\u000a  hovered node.</li>\u000a  </ul>\u000a</blockquote>\u000a\u000a<hr>\u000a\u000a<p>Also came accross Gephi, looks like that might have the functionality you want as well.</p>\u000a\u000a<p><a href="http://gephi.org/" rel="noreferrer">http://gephi.org/</a> <strong>Windows</strong>, <strong>Linux</strong> and <strong>Mac OSX</strong></p>\u000a\u000a<blockquote>\u000a  <p>Gephi is an interactive visualization\u000a  and exploration platform for all kinds\u000a  of networks and complex systems,\u000a  dynamic and hierarchical graphs.</p>\u000a</blockquote>\u000a\u000a<p><img src="https://i.stack.imgur.com/yUftY.jpg" alt="gephi screenshot"></p>\u000a
p1416
sVquestion_id
p1417
I5759878
sVlast_activity_date
p1418
I1303998111
sVcreation_date
p1419
I1303993058
sVscore
p1420
I24
sVowner
p1421
(dp1422
Vuser_id
p1423
I311220
sVprofile_image
p1424
Vhttps://www.gravatar.com/avatar/333d38bdbe98c3c1b7fdb5e41c13dbc2?s=128&d=identicon&r=PG
p1425
sVuser_type
p1426
Vregistered
p1427
sVreputation
p1428
I26822
sVlink
p1429
Vhttp://stackoverflow.com/users/311220/acorn
p1430
sVaccept_rate
p1431
I94
sVdisplay_name
p1432
VAcorn
p1433
ssVis_accepted
p1434
I01
sVlast_edit_date
p1435
I1303998111
sVanswer_id
p1436
I5818458
sa(dp1437
Vbody
p1438
V<p>In terms of speed, it's no competition for empty lists/dicts:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from timeit import timeit\u000a&gt;&gt;&gt; timeit("[]")\u000a0.040084982867934334\u000a&gt;&gt;&gt; timeit("list()")\u000a0.17704233359267718\u000a&gt;&gt;&gt; timeit("{}")\u000a0.033620194745424214\u000a&gt;&gt;&gt; timeit("dict()")\u000a0.1821558326547077\u000a</code></pre>\u000a\u000a<p>and for non-empty:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; timeit("[1,2,3]")\u000a0.24316302770330367\u000a&gt;&gt;&gt; timeit("list((1,2,3))")\u000a0.44744206316727286\u000a&gt;&gt;&gt; timeit("list(foo)", setup="foo=(1,2,3)")\u000a0.446036018543964\u000a&gt;&gt;&gt; timeit("{'a':1, 'b':2, 'c':3}")\u000a0.20868602015059423\u000a&gt;&gt;&gt; timeit("dict(a=1, b=2, c=3)")\u000a0.47635635255323905\u000a&gt;&gt;&gt; timeit("dict(bar)", setup="bar=[('a', 1), ('b', 2), ('c', 3)]")\u000a0.9028228448029267\u000a</code></pre>\u000a\u000a<p>Also, using the bracket notation let's you use list and dictionary comprehensions, which may be reason enough.</p>\u000a
p1439
sVquestion_id
p1440
I5790860
sVlast_activity_date
p1441
I1303827288
sVcreation_date
p1442
I1303823944
sVscore
p1443
I86
sVowner
p1444
(dp1445
Vuser_id
p1446
I356942
sVprofile_image
p1447
Vhttps://www.gravatar.com/avatar/8ded1aa477b82628ef8910b8de63c30f?s=128&d=identicon&r=PG
p1448
sVuser_type
p1449
Vregistered
p1450
sVreputation
p1451
I3891
sVlink
p1452
Vhttp://stackoverflow.com/users/356942/greg-haskins
p1453
sVdisplay_name
p1454
VGreg Haskins
p1455
ssVis_accepted
p1456
I01
sVlast_edit_date
p1457
I1303827288
sVanswer_id
p1458
I5790954
sa(dp1459
Vbody
p1460
V<p><s>For starters, BeautifulSoup is no longer actively maintained, and <a href="http://www.crummy.com/software/BeautifulSoup/3.1-problems.html" rel="noreferrer">the author even recommends alternatives</a> such as lxml.</s></p>\u000a\u000a<p>Quoting from the linked page:</p>\u000a\u000a<blockquote>\u000a  <p>Version 3.1.0 of Beautiful Soup does\u000a  significantly worse on real-world HTML\u000a  than version 3.0.8 does. The most\u000a  common problems are handling \u000a  tags incorrectly, "malformed start\u000a  tag" errors, and "bad end tag" errors.\u000a  This page explains what happened, how\u000a  the problem will be addressed, and\u000a  what you can do right now.</p>\u000a  \u000a  <p>This page was originally written in\u000a  March 2009. Since then, the 3.2 series\u000a  has been released, replacing the 3.1\u000a  series, and development of the 4.x\u000a  series has gotten underway. This page\u000a  will remain up for historical\u000a  purposes.</p>\u000a  \u000a  <p><strong>tl;dr</strong></p>\u000a  \u000a  <p>Use 3.2.0 instead.</p>\u000a</blockquote>\u000a
p1461
sVquestion_id
p1462
I1922032
sVlast_activity_date
p1463
I1303699057
sVcreation_date
p1464
I1261059202
sVscore
p1465
I22
sVowner
p1466
(dp1467
Vuser_id
p1468
I230253
sVprofile_image
p1469
Vhttps://i.stack.imgur.com/Rwcfj.png?s=128&g=1
p1470
sVuser_type
p1471
Vregistered
p1472
sVreputation
p1473
I7753
sVlink
p1474
Vhttp://stackoverflow.com/users/230253/alex-brasetvik
p1475
sVdisplay_name
p1476
VAlex Brasetvik
p1477
ssVis_accepted
p1478
I01
sVlast_edit_date
p1479
I1303699057
sVanswer_id
p1480
I1922064
sa(dp1481
Vbody
p1482
V<p>Why don't you try </p>\u000a\u000a<pre><code>word = 'two'\u000are.compile(r'\u005cb%s\u005cb' % word, re.I)\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; word = 'two'\u000a&gt;&gt;&gt; k = re.compile(r'\u005cb%s\u005cb' % word, re.I)\u000a&gt;&gt;&gt; x = 'one two three'\u000a&gt;&gt;&gt; y = k.search( x)\u000a&gt;&gt;&gt; y\u000a&lt;_sre.SRE_Match object at 0x100418850&gt;\u000a</code></pre>\u000a\u000a<p>Also forgot to mention, you should be using raw strings in your code</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = 'one two three'\u000a&gt;&gt;&gt; y = re.search(r"\u005cbtwo\u005cb", x)\u000a&gt;&gt;&gt; y\u000a&lt;_sre.SRE_Match object at 0x100418a58&gt;\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a
p1483
sVquestion_id
p1484
I3995034
sVlast_activity_date
p1485
I1287736420
sVcreation_date
p1486
I1287735898
sVscore
p1487
I50
sVowner
p1488
(dp1489
Vuser_id
p1490
I432745
sVprofile_image
p1491
Vhttps://www.gravatar.com/avatar/61d5932d030d57eb9948756af74a357f?s=128&d=identicon&r=PG
p1492
sVuser_type
p1493
Vregistered
p1494
sVreputation
p1495
I44346
sVlink
p1496
Vhttp://stackoverflow.com/users/432745/pyfunc
p1497
sVdisplay_name
p1498
Vpyfunc
p1499
ssVis_accepted
p1500
I01
sVlast_edit_date
p1501
I1287736420
sVanswer_id
p1502
I3995061
sa(dp1503
Vbody
p1504
V<p>I am afraid you will have to provide a <code>__hash__()</code> method. But you can code it the way, that it does not depend on the mutable attributes of your <code>Item</code>.</p>\u000a
p1505
sVquestion_id
p1506
I3942303
sVlast_activity_date
p1507
I1287146761
sVcreation_date
p1508
I1287146761
sVscore
p1509
I16
sVowner
p1510
(dp1511
Vuser_id
p1512
I449449
sVprofile_image
p1513
Vhttps://www.gravatar.com/avatar/b52c27e86c87d931e654d6a2d2cdf974?s=128&d=identicon&r=PG
p1514
sVuser_type
p1515
Vregistered
p1516
sVreputation
p1517
I94835
sVlink
p1518
Vhttp://stackoverflow.com/users/449449/eumiro
p1519
sVaccept_rate
p1520
I100
sVdisplay_name
p1521
Veumiro
p1522
ssVis_accepted
p1523
I01
sVanswer_id
p1524
I3942321
sa(dp1525
Vbody
p1526
V<p>I chose the second option in my set-up, because it was the quickest solution, and I didn't make any script to change the application-parameter on deployment yet.</p>\u000a\u000a<p>But the way I see it now, option A is a cleaner solution. You can with a couple of code lines switch the datastore namespace based on the version, which you can get dynamically from the environmental variable CURRENT_VERSION_ID as documented here: <a href="http://code.google.com/appengine/docs/python/runtime.html#The_Environment" rel="noreferrer">http://code.google.com/appengine/docs/python/runtime.html#The_Environment</a></p>\u000a
p1527
sVquestion_id
p1528
I3793860
sVlast_activity_date
p1529
I1285601198
sVcreation_date
p1530
I1285601198
sVscore
p1531
I11
sVowner
p1532
(dp1533
Vuser_id
p1534
I427747
sVprofile_image
p1535
Vhttps://www.gravatar.com/avatar/250ead69688af12e1742b132e6072f68?s=128&d=identicon&r=PG
p1536
sVuser_type
p1537
Vregistered
p1538
sVreputation
p1539
I400
sVlink
p1540
Vhttp://stackoverflow.com/users/427747/benwixen
p1541
sVaccept_rate
p1542
I60
sVdisplay_name
p1543
Vbenwixen
p1544
ssVis_accepted
p1545
I01
sVanswer_id
p1546
I3805305
sa(dp1547
Vbody
p1548
V<p>In Python, modules need to be imported before they're accessible. <code>import logging</code> imports just the logging module. It so happens that <code>logging</code> is a package with submodules, but those submodules are still not automatically loaded. So, you need to explicitly import <code>logging.handlers</code> before you can access it.</p>\u000a\u000a<p>If you're wondering why it looks like sometimes you don't need those extra imports: some packages import some or all of their submodules when they are imported -- simply by doing those imports in their <code>__init__.py</code> files. In other cases it might be that something else that you import, also imported <code>logging.handlers</code>. It doesn't matter which piece of code does the import; as long as <em>something</em> in your process imports <code>logging.handlers</code> before you access it, it'll be there. And sometimes a module that looks like a package really isn't one, like <code>os</code> and <code>os.path</code>. <code>os</code> isn't a package, it just imports the correct other module (for your platform) and calls it <code>path</code>, just so you can access it as <code>os.path</code>.</p>\u000a
p1549
sVquestion_id
p1550
I3781522
sVlast_activity_date
p1551
I1285267794
sVcreation_date
p1552
I1285267794
sVscore
p1553
I60
sVowner
p1554
(dp1555
Vuser_id
p1556
I17624
sVprofile_image
p1557
Vhttps://www.gravatar.com/avatar/90285a816eda046ff55a0dcacc0c5ee8?s=128&d=identicon&r=PG
p1558
sVuser_type
p1559
Vregistered
p1560
sVreputation
p1561
I69283
sVlink
p1562
Vhttp://stackoverflow.com/users/17624/thomas-wouters
p1563
sVdisplay_name
p1564
VThomas Wouters
p1565
ssVis_accepted
p1566
I01
sVanswer_id
p1567
I3781554
sa(dp1568
Vbody
p1569
V<p>If order is not important and you don't need to worry about duplicates then you can use set intersection:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = [1,2,3,4,5]\u000a&gt;&gt;&gt; b = [1,3,5,6]\u000a&gt;&gt;&gt; list(set(a) &amp; set(b))\u000a[1, 3, 5]\u000a</code></pre>\u000a
p1570
sVquestion_id
p1571
I3697432
sVlast_activity_date
p1572
I1284341568
sVcreation_date
p1573
I1284341568
sVscore
p1574
I105
sVowner
p1575
(dp1576
Vuser_id
p1577
I61974
sVprofile_image
p1578
Vhttps://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=128&d=identicon&r=PG
p1579
sVuser_type
p1580
Vregistered
p1581
sVreputation
p1582
I484956
sVlink
p1583
Vhttp://stackoverflow.com/users/61974/mark-byers
p1584
sVdisplay_name
p1585
VMark Byers
p1586
ssVis_accepted
p1587
I01
sVanswer_id
p1588
I3697438
sa(dp1589
Vbody
p1590
V<p>For Unix/Linux based systems, you should use <a href="http://sourceforge.net/projects/python-fam/" rel="noreferrer">File Alteration Monitor Python bindings</a> to <a href="http://oss.sgi.com/projects/fam/" rel="noreferrer">libfam</a>. </p>\u000a\u000a<p>For Windows based systems, you should tie into the Win32 API <a href="http://msdn.microsoft.com/en-us/library/aa364417%28VS.85%29.aspx" rel="noreferrer"><code>FindFirstChangeNotification</code></a> and related functions. </p>\u000a\u000a<p>As for a cross platform way, I don't know about a good cross platform way.  I think it would be best to build a module yourself that works on either OS that uses one of the 2 above methods after detecting what OS it is. </p>\u000a
p1591
sVquestion_id
p1592
I597903
sVlast_activity_date
p1593
I1279852200
sVcreation_date
p1594
I1235824033
sVscore
p1595
I27
sVowner
p1596
(dp1597
Vuser_id
p1598
I3153
sVprofile_image
p1599
Vhttps://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=128&d=identicon&r=PG
p1600
sVuser_type
p1601
Vregistered
p1602
sVreputation
p1603
I213096
sVlink
p1604
Vhttp://stackoverflow.com/users/3153/brian-r-bondy
p1605
sVaccept_rate
p1606
I99
sVdisplay_name
p1607
VBrian R. Bondy
p1608
ssVis_accepted
p1609
I01
sVlast_edit_date
p1610
I1279852200
sVanswer_id
p1611
I597962
sa(dp1612
Vbody
p1613
V<p>urllib (particularly urllib2) handles many things by default or has appropriate libs to do so. For example, urllib2 will follow redirects automatically and you can use cookiejar to handle login scripts. These are all things you'd have to code yourself if you were using httplib.</p>\u000a
p1614
sVquestion_id
p1615
I3305250
sVlast_activity_date
p1616
I1279764058
sVcreation_date
p1617
I1279764058
sVscore
p1618
I40
sVowner
p1619
(dp1620
Vuser_id
p1621
I293316
sVprofile_image
p1622
Vhttps://www.gravatar.com/avatar/1c37e23435362dbc4d65b670585d4b9c?s=128&d=identicon&r=PG
p1623
sVuser_type
p1624
Vregistered
p1625
sVreputation
p1626
I4935
sVlink
p1627
Vhttp://stackoverflow.com/users/293316/robus
p1628
sVaccept_rate
p1629
I62
sVdisplay_name
p1630
VRobus
p1631
ssVis_accepted
p1632
I01
sVanswer_id
p1633
I3305261
sa(dp1634
Vbody
p1635
V<h3>1. Constant extrapolation</h3>\u000a\u000a<p>You can use <code>interp</code> function from scipy, it extrapolates left and right values as constant beyond the range:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from scipy import interp, arange, exp\u000a&gt;&gt;&gt; x = arange(0,10)\u000a&gt;&gt;&gt; y = exp(-x/3.0)\u000a&gt;&gt;&gt; interp([9,10], x, y)\u000aarray([ 0.04978707,  0.04978707])\u000a</code></pre>\u000a\u000a<h3>2. Linear (or other custom) extrapolation</h3>\u000a\u000a<p>You can write a wrapper around an interpolation function which takes care of linear extrapolation. For example:</p>\u000a\u000a<pre><code>from scipy.interpolate import interp1d\u000afrom scipy import arange, array, exp\u000a\u000adef extrap1d(interpolator):\u000a    xs = interpolator.x\u000a    ys = interpolator.y\u000a\u000a    def pointwise(x):\u000a        if x &lt; xs[0]:\u000a            return ys[0]+(x-xs[0])*(ys[1]-ys[0])/(xs[1]-xs[0])\u000a        elif x &gt; xs[-1]:\u000a            return ys[-1]+(x-xs[-1])*(ys[-1]-ys[-2])/(xs[-1]-xs[-2])\u000a        else:\u000a            return interpolator(x)\u000a\u000a    def ufunclike(xs):\u000a        return array(map(pointwise, array(xs)))\u000a\u000a    return ufunclike\u000a</code></pre>\u000a\u000a<p><code>extrap1d</code> takes an interpolation function and returns a function which can also extrapolate. And you can use it like this:</p>\u000a\u000a<pre><code>x = arange(0,10)\u000ay = exp(-x/3.0)\u000af_i = interp1d(x, y)\u000af_x = extrap1d(f_i)\u000a\u000aprint f_x([9,10])\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre><code>[ 0.04978707  0.03009069]\u000a</code></pre>\u000a
p1636
sVquestion_id
p1637
I2745329
sVlast_activity_date
p1638
I1272641821
sVcreation_date
p1639
I1272640073
sVscore
p1640
I25
sVowner
p1641
(dp1642
Vuser_id
p1643
I25450
sVprofile_image
p1644
Vhttps://www.gravatar.com/avatar/fbf950615302e00a14bceec914af32ca?s=128&d=identicon&r=PG
p1645
sVuser_type
p1646
Vregistered
p1647
sVreputation
p1648
I23203
sVlink
p1649
Vhttp://stackoverflow.com/users/25450/sastanin
p1650
sVaccept_rate
p1651
I94
sVdisplay_name
p1652
Vsastanin
p1653
ssVis_accepted
p1654
I01
sVlast_edit_date
p1655
I1272641821
sVanswer_id
p1656
I2745496
sa(dp1657
Vbody
p1658
V<blockquote>\u000a  <p>That makes me think dulwich is not\u000a  installed correctly, or not in the\u000a  path.</p>\u000a</blockquote>\u000a\u000a<p>You're absolutely right. Mercurial binary distributions for Windows are 'frozen' - they use the Python code and interpreter bundled with them and therefore independent of packages installed in system PYTHONPATH. When you specify path to hggit extension in Mercurial.ini, hg tries to import it using direct path, but dulwich library is not imported explicitly by hg and doesn't bundled with its library, so the import fails.</p>\u000a\u000a<p>It is possible to add both Dulwich and HgGit into library.zip that is installed along with hg.exe, but for me the best way is to install everything from source including Mercurial and execute commands using .bat files installed into \u005cPython\u005cScripts. In this case you will need to:</p>\u000a\u000a<ol>\u000a<li><a href="http://mercurial.selenic.com/wiki/WindowsInstall#Building_pure_Python_alternative" rel="noreferrer">Install Mercurial</a> from source. This builds "pure" version, because Windows users usually don't have Visual Studio or alternative compiler for compiling C speedups.</li>\u000a<li><p>Install Dulwich - I'd use latest trunk <a href="http://github.com/jelmer/dulwich/archives/master" rel="noreferrer">snapshot</a> for both Git and Dulwich.</p>\u000a\u000a<p>python setup.py --pure install</p></li>\u000a<li><p>Install latest HgGit <a href="http://github.com/schacon/hg-git/archives/master" rel="noreferrer">snapshot</a></p>\u000a\u000a<p>python setup.py install</p></li>\u000a<li><p>Edit Mercurial.ini to enable <code>hggit =</code></p></li>\u000a<li>Launch Mercurial using your \u005cPython\u005cScripts\u005chg.bat</li>\u000a</ol>\u000a
p1659
sVquestion_id
p1660
I2360944
sVlast_activity_date
p1661
I1272494254
sVcreation_date
p1662
I1272493507
sVscore
p1663
I16
sVowner
p1664
(dp1665
Vuser_id
p1666
I239247
sVprofile_image
p1667
Vhttps://www.gravatar.com/avatar/9d7e611f31c52f4d62bbe279d4f334de?s=128&d=identicon&r=PG
p1668
sVuser_type
p1669
Vregistered
p1670
sVreputation
p1671
I8404
sVlink
p1672
Vhttp://stackoverflow.com/users/239247/anatoly-techtonik
p1673
sVaccept_rate
p1674
I55
sVdisplay_name
p1675
Vanatoly techtonik
p1676
ssVis_accepted
p1677
I01
sVlast_edit_date
p1678
I1272494254
sVanswer_id
p1679
I2733516
sa(dp1680
Vbody
p1681
V<p>Use a <code>defaultdict</code>:</p>\u000a\u000a<pre><code>from collections import defaultdict\u000a\u000afoo = defaultdict(int)\u000afoo[bar] += 1\u000a</code></pre>\u000a\u000a<p>In Python >= 2.7, you also have a separate <a href="http://docs.python.org/dev/py3k/library/collections.html#collections.Counter" rel="noreferrer">Counter</a> class for these purposes. For Python 2.5 and 2.6, you can use its <a href="http://code.activestate.com/recipes/576611/" rel="noreferrer">backported version</a>.</p>\u000a
p1682
sVquestion_id
p1683
I2626059
sVlast_activity_date
p1684
I1271115647
sVcreation_date
p1685
I1271114112
sVscore
p1686
I77
sVowner
p1687
(dp1688
Vuser_id
p1689
I156771
sVprofile_image
p1690
Vhttps://www.gravatar.com/avatar/2163ccb26148ab885d6d827e7cb270a1?s=128&d=identicon&r=PG
p1691
sVuser_type
p1692
Vregistered
p1693
sVreputation
p1694
I31771
sVlink
p1695
Vhttp://stackoverflow.com/users/156771/tam%c3%a1s
p1696
sVaccept_rate
p1697
I100
sVdisplay_name
p1698
VTam&#225;s
p1699
ssVis_accepted
p1700
I01
sVlast_edit_date
p1701
I1271115647
sVanswer_id
p1702
I2626062
sa(dp1703
Vbody
p1704
V<p>Python doesn't have an <code>sscanf</code> equivalent built-in, and most of the time it actually makes a whole lot more sense to parse the input by working with the string directly, using regexps, or using a parsing tool. </p>\u000a\u000a<p>Probably mostly useful for translating C, people have implemented <code>sscanf</code>, such as in this module: <a href="http://hkn.eecs.berkeley.edu/~dyoo/python/scanf/" rel="noreferrer">http://hkn.eecs.berkeley.edu/~dyoo/python/scanf/</a></p>\u000a\u000a<p>In this particular case if you just want to split the data based on multiple split characters, <code>re.split</code> is really the right tool.</p>\u000a
p1705
sVquestion_id
p1706
I2175080
sVlast_activity_date
p1707
I1265007110
sVcreation_date
p1708
I1265007110
sVscore
p1709
I24
sVowner
p1710
(dp1711
Vuser_id
p1712
I192839
sVprofile_image
p1713
Vhttps://i.stack.imgur.com/GNPsv.jpg?s=128&g=1
p1714
sVuser_type
p1715
Vregistered
p1716
sVreputation
p1717
I38635
sVlink
p1718
Vhttp://stackoverflow.com/users/192839/mike-graham
p1719
sVaccept_rate
p1720
I71
sVdisplay_name
p1721
VMike Graham
p1722
ssVis_accepted
p1723
I01
sVanswer_id
p1724
I2175135
sa(dp1725
Vbody
p1726
V<p>This method works for <code>if</code>s, multiple nested loops and other constructs that you can't <code>break</code> from easily.</p>\u000a\u000a<p>Wrap the code in its own function.  Instead of <code>break</code>, <code>return</code>.</p>\u000a
p1727
sVquestion_id
p1728
I2069662
sVlast_activity_date
p1729
I1263533444
sVcreation_date
p1730
I1263533047
sVscore
p1731
I42
sVowner
p1732
(dp1733
Vuser_id
p1734
I16287
sVprofile_image
p1735
Vhttps://www.gravatar.com/avatar/c9b1df23cd41208f1842f67d981a4cdb?s=128&d=identicon&r=PG
p1736
sVuser_type
p1737
Vregistered
p1738
sVreputation
p1739
I35892
sVlink
p1740
Vhttp://stackoverflow.com/users/16287/drew-dormann
p1741
sVaccept_rate
p1742
I96
sVdisplay_name
p1743
VDrew Dormann
p1744
ssVis_accepted
p1745
I01
sVlast_edit_date
p1746
I1263533444
sVanswer_id
p1747
I2069670
sa(dp1748
Vbody
p1749
V<p>The <code>get</code> method of a dict (like for example <code>characters</code> works just like indexing the dict, except that, if the key is missing, instead of raising a <code>KeyError</code> it returns the default value (if you call <code>.get</code> with just one argument, the key, the default value is <code>None</code>).</p>\u000a\u000a<p>So an equivalent Python function (where calling <code>myget(d, k, v)</code> is just like <code>d.get(k, v)</code> might be:</p>\u000a\u000a<pre><code>def myget(d, k, v=None):\u000a  try: return d[k]\u000a  except KeyError: return v\u000a</code></pre>\u000a\u000a<p>The sample code in your Q is clearly trying to count the number of occurrences of each character: if it already has a count for a given character, <code>get</code> returns it (so it's just incremented by one), else <code>get</code> returns 0 (so the incrementing correctly gives <code>1</code> at a character's first occurrence in the string).</p>\u000a
p1750
sVquestion_id
p1751
I2068349
sVlast_activity_date
p1752
I1263513336
sVcreation_date
p1753
I1263512482
sVscore
p1754
I60
sVowner
p1755
(dp1756
Vuser_id
p1757
I95810
sVprofile_image
p1758
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1759
sVuser_type
p1760
Vregistered
p1761
sVreputation
p1762
I516089
sVlink
p1763
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1764
sVaccept_rate
p1765
I80
sVdisplay_name
p1766
VAlex Martelli
p1767
ssVis_accepted
p1768
I01
sVlast_edit_date
p1769
I1263513336
sVanswer_id
p1770
I2068377
sa(dp1771
Vbody
p1772
V<p>The methods of a nested class cannot directly access the instance attributes of the outer class. </p>\u000a\u000a<p>Note that it is not necessarily the case that an instance of the outer class exists even when you have created an instance of the inner class.</p>\u000a\u000a<p>In fact, it is often recommended against using nested classes, since the nesting does not imply any particular relationship between the inner and outer classes.</p>\u000a
p1773
sVquestion_id
p1774
I2024566
sVlast_activity_date
p1775
I1262908944
sVcreation_date
p1776
I1262908464
sVscore
p1777
I34
sVowner
p1778
(dp1779
Vuser_id
p1780
I222908
sVprofile_image
p1781
Vhttps://www.gravatar.com/avatar/d458bc475f0e0cc0a8d11325db2d9621?s=128&d=identicon&r=PG
p1782
sVuser_type
p1783
Vregistered
p1784
sVreputation
p1785
I226731
sVlink
p1786
Vhttp://stackoverflow.com/users/222908/daniel-vassallo
p1787
sVdisplay_name
p1788
VDaniel Vassallo
p1789
ssVis_accepted
p1790
I01
sVlast_edit_date
p1791
I1262908944
sVanswer_id
p1792
I2024583
sa(dp1793
Vbody
p1794
V<p><code>Person._meta.get_field('name').max_length</code> will give you this value. <s>But having to use <code>_meta</code> suggests this is something you shouldn't do in normal usage.</s></p>\u000a\u000a<p>Edit: as Carl pointed out, this naming is misleading and it does seem quite acceptable to use it: <a href="http://www.b-list.org/weblog/2007/nov/04/working-models/" rel="noreferrer">http://www.b-list.org/weblog/2007/nov/04/working-models/</a></p>\u000a
p1795
sVquestion_id
p1796
I1829216
sVlast_activity_date
p1797
I1259747117
sVcreation_date
p1798
I1259705299
sVscore
p1799
I65
sVowner
p1800
(dp1801
Vuser_id
p1802
I189179
sVprofile_image
p1803
Vhttps://www.gravatar.com/avatar/bab16b3716e0e72b8b1a7741d68f5ee2?s=128&d=identicon&r=PG
p1804
sVuser_type
p1805
Vregistered
p1806
sVreputation
p1807
I67771
sVlink
p1808
Vhttp://stackoverflow.com/users/189179/ben-james
p1809
sVdisplay_name
p1810
VBen James
p1811
ssVis_accepted
p1812
I01
sVlast_edit_date
p1813
I1259747117
sVanswer_id
p1814
I1829286
sa(dp1815
Vbody
p1816
V<pre><code>options, args = parser.parse_args()\u000aoption_dict = vars(options)\u000a</code></pre>\u000a\u000a<p><a href="http://mail.python.org/pipermail/python-ideas/2009-March/003623.html" rel="noreferrer">(Source is this python-ideas post.)</a></p>\u000a
p1817
sVquestion_id
p1818
I1753460
sVlast_activity_date
p1819
I1258515272
sVcreation_date
p1820
I1258515272
sVscore
p1821
I80
sVowner
p1822
(dp1823
Vuser_id
p1824
I152208
sVprofile_image
p1825
Vhttps://www.gravatar.com/avatar/ecd3e801bb2f67ff3ba28e9d2a47fd80?s=128&d=identicon&r=PG
p1826
sVuser_type
p1827
Vregistered
p1828
sVreputation
p1829
I6616
sVlink
p1830
Vhttp://stackoverflow.com/users/152208/bcat
p1831
sVdisplay_name
p1832
Vbcat
p1833
ssVis_accepted
p1834
I01
sVanswer_id
p1835
I1753466
sa(dp1836
Vbody
p1837
V<p>check your <code>APPEND_SLASH</code> setting in the settings.py file</p>\u000a\u000a<p><a href="http://docs.djangoproject.com/en/dev/ref/settings/#append-slash" rel="noreferrer">more info in the django docs</a></p>\u000a
p1838
sVquestion_id
p1839
I1596552
sVlast_activity_date
p1840
I1256064579
sVcreation_date
p1841
I1256064579
sVscore
p1842
I58
sVowner
p1843
(dp1844
Vuser_id
p1845
I2908
sVprofile_image
p1846
Vhttps://www.gravatar.com/avatar/30e3f436d5fb8e941126a0c2c2868f84?s=128&d=identicon&r=PG
p1847
sVuser_type
p1848
Vregistered
p1849
sVreputation
p1850
I35265
sVlink
p1851
Vhttp://stackoverflow.com/users/2908/jiaaro
p1852
sVaccept_rate
p1853
I97
sVdisplay_name
p1854
VJiaaro
p1855
ssVis_accepted
p1856
I01
sVanswer_id
p1857
I1596600
sa(dp1858
Vbody
p1859
V<p>Have you seen skulpt?</p>\u000a\u000a<p><a href="http://www.skulpt.org/" rel="noreferrer">http://www.skulpt.org/</a></p>\u000a
p1860
sVquestion_id
p1861
I1540214
sVlast_activity_date
p1862
I1255033871
sVcreation_date
p1863
I1255033871
sVscore
p1864
I39
sVowner
p1865
(dp1866
Vuser_id
p1867
I144529
sVprofile_image
p1868
Vhttps://www.gravatar.com/avatar/5b83e52ed3ff7e8f6e7dd2f931b10498?s=128&d=identicon&r=PG
p1869
sVuser_type
p1870
Vregistered
p1871
sVreputation
p1872
I4291
sVlink
p1873
Vhttp://stackoverflow.com/users/144529/easement
p1874
sVaccept_rate
p1875
I73
sVdisplay_name
p1876
Veasement
p1877
ssVis_accepted
p1878
I01
sVanswer_id
p1879
I1540241
sa(dp1880
Vbody
p1881
V<p>The substitute of <code>fcntl</code> on windows are <code>win32api</code> calls. The usage is completely different. It is not some switch you can just flip.</p>\u000a\u000a<p>In other words, porting a <code>fcntl</code>-heavy-user module to windows is not trivial. It requires you to analyze what exactly each <code>fcntl</code> call does and then find the equivalent <code>win32api</code> code, if any. </p>\u000a\u000a<p>There's also the possibility that some code using <code>fcntl</code> has no windows equivalent, which would require you to change the module api and maybe the structure/paradigm of the program using the module you're porting.</p>\u000a\u000a<p>If you provide more details about the <code>fcntl</code> calls people can find windows equivalents.</p>\u000a
p1882
sVquestion_id
p1883
I1422368
sVlast_activity_date
p1884
I1252944935
sVcreation_date
p1885
I1252943675
sVscore
p1886
I55
sVowner
p1887
(dp1888
Vuser_id
p1889
I17160
sVprofile_image
p1890
Vhttps://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=128&d=identicon&r=PG
p1891
sVuser_type
p1892
Vregistered
p1893
sVreputation
p1894
I118064
sVlink
p1895
Vhttp://stackoverflow.com/users/17160/nosklo
p1896
sVaccept_rate
p1897
I78
sVdisplay_name
p1898
Vnosklo
p1899
ssVis_accepted
p1900
I01
sVlast_edit_date
p1901
I1252944935
sVanswer_id
p1902
I1422436
sa(dp1903
Vbody
p1904
V<p>First off, thank you for asking this question, as it forced me to figure this out myself and it's great!</p>\u000a\u000a<p>Here is the page I used as a reference: <a href="http://github.com/orestis/pysmell/tree/v0.6" rel="noreferrer">PySmell v0.6 released : orestis.gr</a></p>\u000a\u000a<ol>\u000a<li>Install PySmell using the <code>setup.py install</code> command.</li>\u000a<li>Generate the <code>PYSMELLTAGS</code> file for django by going to your <code>site-packages/django</code> directory and running: <code>pysmell . -o ~/PYSMELLTAGS.django</code></li>\u000a<li>Copy that file to your project directory, and then ran <code>pysmell .</code> to generate the project PYSMELLTAGS file</li>\u000a<li>Make sure pysmell is in your <code>PYTHONPATH</code> (<code>export PYTHONPATH=${PYTHONPATH}:/path/to/pysmell/</code>)</li>\u000a<li>Run vim (<code>vim .</code>)</li>\u000a<li>Source <code>pysmell.vim</code> (<code>:source /path/to/pysmell/pysmell.vim</code>)</li>\u000a<li>Set the autocomplete command (<code>:set omnifunc=pysmell#Complete</code>)</li>\u000a<li>Type ^x^o to autocomplete and it should work</li>\u000a</ol>\u000a\u000a<p>I realize this is not a sustainable solution, but you should be able to use this as a start to getting it setup to always work (e.g., add the export to your .bashrc, add the :source to your .vimrc, setup <code>autocmd FileType python set omnifunc=pysmell#Complete</code>, etc.)</p>\u000a\u000a<p>Let me know if this is enough to get you started. It worked for me!</p>\u000a\u000a<p><strong>Edit</strong>\u000aI simply added this to my .vimrc and as long as the <code>PYSMELLTAGS</code> &amp; <code>PYSMELLTAGS.django</code> files are in my project root, it works fine without any other work:</p>\u000a\u000a<pre><code>python &lt;&lt; EOF\u000aimport os\u000aimport sys\u000aimport vim\u000asys.path.append("/usr/local/python/lib/python2.5/site-packages")\u000aEOF\u000aexe ":source ~/src/pysmell/pysmell.vim"\u000aautocmd FileType python set omnifunc=pysmell#Complete\u000a</code></pre>\u000a
p1905
sVquestion_id
p1906
I978643
sVlast_activity_date
p1907
I1244681467
sVcreation_date
p1908
I1244680363
sVscore
p1909
I30
sVowner
p1910
(dp1911
Vuser_id
p1912
I59608
sVprofile_image
p1913
Vhttps://www.gravatar.com/avatar/1d795678b43c2ff202ec3e5b08f293fb?s=128&d=identicon&r=PG
p1914
sVuser_type
p1915
Vregistered
p1916
sVreputation
p1917
I1347
sVlink
p1918
Vhttp://stackoverflow.com/users/59608/bchang
p1919
sVdisplay_name
p1920
Vbchang
p1921
ssVis_accepted
p1922
I01
sVlast_edit_date
p1923
I1244681467
sVanswer_id
p1924
I978778
sa(dp1925
Vbody
p1926
V<p>In production, you'll just have the HTML generated from your template pointing to wherever the host has media files stored. So your template will just have for example</p>\u000a\u000a<pre><code>&lt;img src="../media/foo.png"&gt;\u000a</code></pre>\u000a\u000a<p>And then you'll just make sure that directory is there with the relevant file(s).</p>\u000a\u000a<p>during development is a different issue. The django docs explain it succinctly and clearly enough that it's more effective to link there and type it up here, but basically you'll define a view for site media with a hardcoded path to location on disk.</p>\u000a\u000a<p>Right <a href="http://docs.djangoproject.com/en/dev/howto/static-files/" rel="noreferrer">here</a>.</p>\u000a
p1927
sVquestion_id
p1928
I901551
sVlast_activity_date
p1929
I1243087441
sVcreation_date
p1930
I1243087441
sVscore
p1931
I25
sVowner
p1932
(dp1933
Vuser_id
p1934
I53936
sVprofile_image
p1935
Vhttps://www.gravatar.com/avatar/1fcd83574b3162ddb7ce7c62797e11a5?s=128&d=identicon&r=PG
p1936
sVuser_type
p1937
Vregistered
p1938
sVreputation
p1939
I3060
sVlink
p1940
Vhttp://stackoverflow.com/users/53936/josefassad
p1941
sVdisplay_name
p1942
VJosefAssad
p1943
ssVis_accepted
p1944
I01
sVanswer_id
p1945
I901587
sa(dp1946
Vbody
p1947
V<pre><code>import os, sys\u000aos.isatty(sys.stdout.fileno())\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>sys.stdout.isatty()\u000a</code></pre>\u000a
p1948
sVquestion_id
p1949
I858623
sVlast_activity_date
p1950
I1242244306
sVcreation_date
p1951
I1242228285
sVscore
p1952
I55
sVowner
p1953
(dp1954
Vuser_id
p1955
I70603
sVprofile_image
p1956
Vhttps://www.gravatar.com/avatar/7881f3cacd278fb65ca3342307e4275b?s=128&d=identicon&r=PG
p1957
sVuser_type
p1958
Vregistered
p1959
sVreputation
p1960
I2492
sVlink
p1961
Vhttp://stackoverflow.com/users/70603/jdizzle
p1962
sVaccept_rate
p1963
I77
sVdisplay_name
p1964
Vjdizzle
p1965
ssVis_accepted
p1966
I01
sVlast_edit_date
p1967
I1242244306
sVanswer_id
p1968
I858628
sa(dp1969
Vbody
p1970
V<p>Inspired by this excellent question, I recently put together a script that tries to do this. You can find it on github at <a href="http://github.com/ghewgill/pyqver/tree/master" rel="noreferrer">pyqver</a>.</p>\u000a\u000a<p>It's reasonably complete but there are some aspects that are not yet handled (as mentioned in the README file). Feel free to fork and improve it!</p>\u000a
p1971
sVquestion_id
p1972
I804538
sVlast_activity_date
p1973
I1241434539
sVcreation_date
p1974
I1241434539
sVscore
p1975
I42
sVowner
p1976
(dp1977
Vuser_id
p1978
I893
sVprofile_image
p1979
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p1980
sVuser_type
p1981
Vregistered
p1982
sVreputation
p1983
I552714
sVlink
p1984
Vhttp://stackoverflow.com/users/893/greg-hewgill
p1985
sVaccept_rate
p1986
I85
sVdisplay_name
p1987
VGreg Hewgill
p1988
ssVis_accepted
p1989
I01
sVanswer_id
p1990
I819645
sa(dp1991
Vbody
p1992
V<p>What about having it run an http server?</p>\u000a\u000a<p>It seems crazy but running a simple web server for administrating your\u000aserver requires just a few lines using web.py</p>\u000a\u000a<p>You can also consider creating a unix pipe.</p>\u000a
p1993
sVquestion_id
p1994
I656933
sVlast_activity_date
p1995
I1237370688
sVcreation_date
p1996
I1237350120
sVscore
p1997
I18
sVowner
p1998
(dp1999
Vuser_id
p2000
I446497
sVprofile_image
p2001
Vhttps://www.gravatar.com/avatar/1cd46a26ceada395ae900bd4cd40a052?s=128&d=identicon&r=PG
p2002
sVuser_type
p2003
Vregistered
p2004
sVreputation
p2005
I7799
sVlink
p2006
Vhttp://stackoverflow.com/users/446497/fulmicoton
p2007
sVaccept_rate
p2008
I96
sVdisplay_name
p2009
Vfulmicoton
p2010
ssVis_accepted
p2011
I01
sVlast_edit_date
p2012
I1237370688
sVanswer_id
p2013
I656956
sa(dp2014
Vbody
p2015
V<p>You can instantiate the class by declaring a variable and calling the class as if it were a function:</p>\u000a\u000a<pre><code>x = mystuff()\u000aprint x.average(9,18,27)\u000a</code></pre>\u000a\u000a<p>However, this won't work with the code you gave us.  When you call a class method on a given object (x), it always passes a pointer to the object as the first parameter when it calls the function.  So if you run your code right now, you'll see this error message:</p>\u000a\u000a<pre><code>TypeError: average() takes exactly 3 arguments (4 given)\u000a</code></pre>\u000a\u000a<p>To fix this, you'll need to modify the definition of the average method to take four parameters.  The first parameter is an object reference, and the remaining 3 parameters would be for the 3 numbers.</p>\u000a
p2016
sVquestion_id
p2017
I396856
sVlast_activity_date
p2018
I1230508085
sVcreation_date
p2019
I1230508085
sVscore
p2020
I54
sVowner
p2021
(dp2022
Vuser_id
p2023
I49139
sVprofile_image
p2024
Vhttps://www.gravatar.com/avatar/1c97720276a7d6452bcf9a8d34592ec3?s=128&d=identicon&r=PG
p2025
sVuser_type
p2026
Vregistered
p2027
sVreputation
p2028
I672
sVlink
p2029
Vhttp://stackoverflow.com/users/49139/ryan
p2030
sVdisplay_name
p2031
VRyan
p2032
ssVis_accepted
p2033
I01
sVanswer_id
p2034
I396871
sasVquota_max
p2035
I300
sVquota_remaining
p2036
I138
s.