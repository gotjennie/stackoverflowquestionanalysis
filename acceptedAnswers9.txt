(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>In Python 2.6+</p>\u000a\u000a<pre><code>import itertools\u000afor element in itertools.product(*somelists):\u000a    print(element)\u000a</code></pre>\u000a\u000a<p>Documentation:\u000a<a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer">Python 3 - itertools.product</a></p>\u000a
p6
sVquestion_id
p7
I533905
sVlast_activity_date
p8
I1492667536
sVcreation_date
p9
I1234295881
sVscore
p10
I193
sVowner
p11
(dp12
Vuser_id
p13
I43089
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/cbdcba7870660c048cf9d6db74a3ef29?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I124007
sVlink
p19
Vhttp://stackoverflow.com/users/43089/triptych
p20
sVaccept_rate
p21
I57
sVdisplay_name
p22
VTriptych
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1492667536
sVanswer_id
p26
I533917
sa(dp27
Vbody
p28
V<p>A requirement file can contain comments (<code>#</code>) and can include some other files (<code>--requirement</code> or <code>-r</code>).\u000aThus, if you really want to parse a <code>requirements.txt</code> you should use the pip parser:</p>\u000a\u000a<pre><code>from pip.req import parse_requirements\u000a\u000a# parse_requirements() returns generator of pip.req.InstallRequirement objects\u000ainstall_reqs = parse_requirements(&lt;requirements_path&gt;)\u000a\u000a# reqs is a list of requirement\u000a# e.g. ['django==1.5.1', 'mezzanine==1.4.6']\u000areqs = [str(ir.req) for ir in install_reqs]\u000a\u000asetup(\u000a    ...\u000a    install_requires=reqs\u000a)\u000a</code></pre>\u000a\u000a<p><strong>UPDATE:</strong> my answer is old now. Pip does not have a public API so this <a href="https://github.com/pypa/pip/commit/7037443975ee5706ef829f14a52ac2fba7dbfff2" rel="nofollow noreferrer">no longer works</a> (e.g. <code>parse_requirements</code> now requires an instance of <code>pip.download.PipSession</code>). You can do the opposite: list the dependencies in <code>setup.py</code> and have a single character -- a dot <code>.</code> -- in <code>requirements.txt</code>.</p>\u000a\u000a<p><strong>UPDATE2:</strong> even if not advised, it is still possible to parse <code>requirements.txt</code> file that doesn't refer any external requirements by URL with the following hack (tested with <code>pip 9.0.1</code>):</p>\u000a\u000a<pre><code>install_reqs = parse_requirements('requirements.txt', session='hack')\u000a</code></pre>\u000a\u000a<p>This doesn't filter <a href="https://pip.pypa.io/en/stable/reference/pip_install/#requirement-specifiers" rel="nofollow noreferrer">environment markers</a> though.</p>\u000a
p29
sVquestion_id
p30
I14399534
sVlast_activity_date
p31
I1492627300
sVcreation_date
p32
I1368883104
sVscore
p33
I144
sVowner
p34
(dp35
Vuser_id
p36
I2173919
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/a6b9438059909cc6ccc8d3e088a00390?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I1645
sVlink
p42
Vhttp://stackoverflow.com/users/2173919/romain-hardouin
p43
sVdisplay_name
p44
VRomain Hardouin
p45
ssVis_accepted
p46
I01
sVlast_edit_date
p47
I1492627300
sVanswer_id
p48
I16624700
sa(dp49
Vbody
p50
V<p>If using pip 6.0 or newer, try adding the <code>--no-cache-dir</code> option.</p>\u000a\u000a<p>If using pip older than pip 6.0, upgrade it with <code>pip install -U pip</code>.  </p>\u000a
p51
sVquestion_id
p52
I9510474
sVlast_activity_date
p53
I1489598059
sVcreation_date
p54
I1330575975
sVscore
p55
I176
sVowner
p56
(dp57
Vuser_id
p58
I319006
sVprofile_image
p59
Vhttps://www.gravatar.com/avatar/da577908b04f60453c85f9c64e91638a?s=128&d=identicon&r=PG
p60
sVuser_type
p61
Vregistered
p62
sVreputation
p63
I5726
sVlink
p64
Vhttp://stackoverflow.com/users/319006/sholsapp
p65
sVaccept_rate
p66
I92
sVdisplay_name
p67
Vsholsapp
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1489598059
sVanswer_id
p71
I9510610
sa(dp72
Vbody
p73
V<p>You need the whole python package, with a <code>setup.py</code> file in it.</p>\u000a\u000a<p>A package named <code>foo</code> would be:</p>\u000a\u000a<pre><code>foo # the installable package\u000a\u251c\u2500\u2500 foo\u000a\u2502   \u251c\u2500\u2500 __init__.py\u000a\u2502   \u2514\u2500\u2500 bar.py\u000a\u2514\u2500\u2500 setup.py\u000a</code></pre>\u000a\u000a<p>And install from github like:</p>\u000a\u000a<pre><code>$ pip install git+git://github.com/myuser/foo.git@v123\u000aor\u000a$ pip install git+git://github.com/myuser/foo.git@newbranch\u000a</code></pre>\u000a\u000a<p>More info at <a href="https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support" rel="noreferrer">https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support</a></p>\u000a
p74
sVquestion_id
p75
I8247605
sVlast_activity_date
p76
I1488801295
sVcreation_date
p77
I1322134839
sVscore
p78
I204
sVowner
p79
(dp80
Vuser_id
p81
I565999
sVprofile_image
p82
Vhttps://www.gravatar.com/avatar/df1f24dcadec85faaa16c9dc541c0006?s=128&d=identicon&r=PG
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I11084
sVlink
p87
Vhttp://stackoverflow.com/users/565999/hugo-tavares
p88
sVdisplay_name
p89
VHugo Tavares
p90
ssVis_accepted
p91
I01
sVlast_edit_date
p92
I1488801295
sVanswer_id
p93
I8256424
sa(dp94
Vbody
p95
V<blockquote>\u000a  <h1>What is the best way to implement nested dictionaries in Python?</h1>\u000a</blockquote>\u000a\u000a<p>Implement <code>__missing__</code> on a <code>dict</code> subclass to set and return a new instance!</p>\u000a\u000a<p>Here is a more elegant approach that has been available <a href="http://docs.python.org/2/library/stdtypes.html#dict" rel="noreferrer">(and documented)</a> since Python 2.5, and (particularly valuable to me) <strong>it pretty prints just like a normal dict</strong>, instead of the ugly printing of an autovivified defaultdict:</p>\u000a\u000a<pre><code>class Vividict(dict):\u000a    def __missing__(self, key):\u000a        value = self[key] = type(self)() # retain local pointer to value\u000a        return value                     # faster to return than dict lookup\u000a</code></pre>\u000a\u000a<p>Note <code>self[key]</code> is on the left-hand side of assignment, so there's no recursion here.</p>\u000a\u000a<p>This is half the lines of code of what was the accepted answer until September 23, 2016.</p>\u000a\u000a<h1>Explanation:</h1>\u000a\u000a<p>We're just providing another nested instance of our class <code>Vividict</code> whenever a key is accessed but missing. (Returning the value assignment is useful because it avoids us additionally calling the getter on the dict, and unfortunately, we can't return it as it is being set.)</p>\u000a\u000a<p>Note, these are the same semantics as the most upvoted answer but in half the lines of code - nosklo's implementation:</p>\u000a\u000a<blockquote>\u000a<pre><code>class AutoVivification(dict):\u000a    """Implementation of perl's autovivification feature."""\u000a    def __getitem__(self, item):\u000a        try:\u000a            return dict.__getitem__(self, item)\u000a        except KeyError:\u000a            value = self[item] = type(self)()\u000a            return value\u000a</code></pre>\u000a</blockquote>\u000a\u000a<h2>Demonstration of Usage</h2>\u000a\u000a<p>Below is just an example of how this dict could be easily used to create a nested dict structure on the fly. This can quickly create a hierarchical tree structure as deeply as you might want to go.</p>\u000a\u000a<pre><code>import pprint\u000a\u000aclass Vividict(dict):\u000a    def __missing__(self, key):\u000a        value = self[key] = type(self)()\u000a        return value\u000a\u000ad = Vividict()\u000a\u000ad['foo']['bar']\u000ad['foo']['baz']\u000ad['fizz']['buzz']\u000ad['primary']['secondary']['tertiary']['quaternary']\u000apprint.pprint(d)\u000a</code></pre>\u000a\u000a<p>Which outputs: </p>\u000a\u000a<pre><code>{'fizz': {'buzz': {}},\u000a 'foo': {'bar': {}, 'baz': {}},\u000a 'primary': {'secondary': {'tertiary': {'quaternary': {}}}}}\u000a</code></pre>\u000a\u000a<p>And as the last line shows, it pretty prints beautifully and in order for manual inspection. But if you want to visually inspect your data, implementing <code>__missing__</code> to set a new instance of its class to the key and return it is a far better solution.</p>\u000a\u000a<h1>Other alternatives, for contrast:</h1>\u000a\u000a<h2><code>dict.setdefault</code></h2>\u000a\u000a<p>setdefault works great when used in loops and you don't know what you're going to get for keys, but repetitive usage becomes quite burdensome, and I don't think anyone would want to keep up the following:</p>\u000a\u000a<pre><code>d = dict()\u000a\u000ad.setdefault('foo', {}).setdefault('bar', {})\u000ad.setdefault('foo', {}).setdefault('baz', {})\u000ad.setdefault('fizz', {}).setdefault('buzz', {})\u000ad.setdefault('primary', {}).setdefault('secondary', {}).setdefault('tertiary', {}).setdefault('quaternary', {})\u000a</code></pre>\u000a\u000a<p>Another criticism is that setdefault requires a new instance whether it is used or not. However, Python is rather smart about handling unused and unreferenced new instances, for example, it reuses the location in memory:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; id({}), id({}), id({})\u000a(523575344, 523575344, 523575344)\u000a</code></pre>\u000a\u000a<h2>An auto-vivified defaultdict</h2>\u000a\u000a<p>This is a clean looking implementation, and usage in a script that you're not inspecting the data on would be as useful as implementing <code>__missing__</code>:</p>\u000a\u000a<pre><code>from collections import defaultdict\u000a\u000adef vivdict():\u000a    return defaultdict(vivdict)\u000a</code></pre>\u000a\u000a<p>But if you need to inspect your data, the results of an auto-vivified defaultdict populated with data in the same way looks like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; d = vivdict(); d['foo']['bar']; d['foo']['baz']; d['fizz']['buzz']; d['primary']['secondary']['tertiary']['quaternary']; import pprint; \u000a&gt;&gt;&gt; pprint.pprint(d)\u000adefaultdict(&lt;function vivdict at 0x17B01870&gt;, {'foo': defaultdict(&lt;function vivdict \u000aat 0x17B01870&gt;, {'baz': defaultdict(&lt;function vivdict at 0x17B01870&gt;, {}), 'bar': \u000adefaultdict(&lt;function vivdict at 0x17B01870&gt;, {})}), 'primary': defaultdict(&lt;function \u000avivdict at 0x17B01870&gt;, {'secondary': defaultdict(&lt;function vivdict at 0x17B01870&gt;, \u000a{'tertiary': defaultdict(&lt;function vivdict at 0x17B01870&gt;, {'quaternary': defaultdict(\u000a&lt;function vivdict at 0x17B01870&gt;, {})})})}), 'fizz': defaultdict(&lt;function vivdict at \u000a0x17B01870&gt;, {'buzz': defaultdict(&lt;function vivdict at 0x17B01870&gt;, {})})})\u000a</code></pre>\u000a\u000a<p>This output is quite inelegant, and the results are quite unreadable. The solution typically given is to recursively convert back to a dict for manual inspection. This non-trivial solution is left as an exercise for the reader.</p>\u000a\u000a<h1>Performance</h1>\u000a\u000a<p>Finally, let's look at performance. I'm subtracting the costs of instantiation.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import timeit\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: {}.setdefault('foo', {}))) - min(timeit.repeat(lambda: {}))\u000a0.13612580299377441\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: vivdict()['foo'])) - min(timeit.repeat(lambda: vivdict()))\u000a0.2936999797821045\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: Vividict()['foo'])) - min(timeit.repeat(lambda: Vividict()))\u000a0.5354437828063965\u000a&gt;&gt;&gt; min(timeit.repeat(lambda: AutoVivification()['foo'])) - min(timeit.repeat(lambda: AutoVivification()))\u000a2.138362169265747\u000a</code></pre>\u000a\u000a<p>Based on performance, <code>dict.setdefault</code> works the best. I'd highly recommend it for production code, in cases where you care about execution speed. </p>\u000a\u000a<p>If you need this for interactive use (in an IPython notebook, perhaps) then performance doesn't really matter - in which case, I'd go with Vividict for readability of the output. Compared to the AutoVivification object (which uses <code>__getitem__</code> instead of <code>__missing__</code>, which was made for this purpose) it is far superior.</p>\u000a\u000a<h1>Conclusion</h1>\u000a\u000a<p>Implementing <code>__missing__</code> on a subclassed <code>dict</code> to set and return a new instance is slightly more difficult than alternatives but has the benefits of</p>\u000a\u000a<ul>\u000a<li>easy instantiation</li>\u000a<li>easy data population</li>\u000a<li>easy data viewing</li>\u000a</ul>\u000a\u000a<p>and because it is less complicated and more performant than modifying <code>__getitem__</code>, it should be preferred to that method.</p>\u000a
p96
sVquestion_id
p97
I635483
sVlast_activity_date
p98
I1484848211
sVcreation_date
p99
I1383807204
sVscore
p100
I105
sVowner
p101
(dp102
Vuser_id
p103
I541136
sVprofile_image
p104
Vhttps://i.stack.imgur.com/wftMn.jpg?s=128&g=1
p105
sVuser_type
p106
Vmoderator
p107
sVreputation
p108
I82328
sVlink
p109
Vhttp://stackoverflow.com/users/541136/aaron-hall
p110
sVaccept_rate
p111
I96
sVdisplay_name
p112
VAaron Hall
p113
ssVis_accepted
p114
I01
sVlast_edit_date
p115
I1484848211
sVanswer_id
p116
I19829714
sa(dp117
Vbody
p118
V<p>I solved the problem by creating a symbolic link to the library. I.e.</p>\u000a\u000a<p>The actual library resides in</p>\u000a\u000a<pre><code>/usr/local/mysql/lib\u000a</code></pre>\u000a\u000a<p>And then I created a symbolic link in </p>\u000a\u000a<pre><code>/usr/lib\u000a</code></pre>\u000a\u000a<p>Using the command:</p>\u000a\u000a<pre><code>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib\u000a</code></pre>\u000a\u000a<p>so that I have the following mapping:</p>\u000a\u000a<pre><code>ls -l libmysqlclient.18.dylib \u000alrwxr-xr-x  1 root  wheel  44 16 Jul 14:01 libmysqlclient.18.dylib -&gt; /usr/local/mysql/lib/libmysqlclient.18.dylib\u000a</code></pre>\u000a\u000a<p>That was it. After that everything worked fine.</p>\u000a\u000a<p>EDIT:</p>\u000a\u000a<p>Notice, that since MacOS El Capitan the System Integrity Protection (SIP, also known as "rootless") will prevent you from creating links in <code>/usr/lib/</code>. \u000aYou could disable SIP by following <a href="https://apple.stackexchange.com/a/208481/90910">these instructions</a>, but you can create a link in <code>/usr/local/lib/</code> instead:</p>\u000a\u000a<pre><code>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/local/lib/libmysqlclient.18.dylib\u000a</code></pre>\u000a
p119
sVquestion_id
p120
I6383310
sVlast_activity_date
p121
I1483880283
sVcreation_date
p122
I1312644509
sVscore
p123
I300
sVowner
p124
(dp125
Vuser_id
p126
I734444
sVprofile_image
p127
Vhttps://www.gravatar.com/avatar/28d058c8ca0ff2638b2e850f8efe9cbe?s=128&d=identicon&r=PG
p128
sVuser_type
p129
Vunregistered
p130
sVreputation
p131
I3983
sVlink
p132
Vhttp://stackoverflow.com/users/734444/toom
p133
sVaccept_rate
p134
I60
sVdisplay_name
p135
Vtoom
p136
ssVis_accepted
p137
I01
sVlast_edit_date
p138
I1492087506
sVanswer_id
p139
I6967816
sa(dp140
Vbody
p141
V<p><code>super()</code> returns a parent-like object <em>in new-style classes</em>:</p>\u000a\u000a<pre><code>class A(object):\u000a    def __init__(self):\u000a        print "world"\u000a\u000aclass B(A):\u000a    def __init__(self):\u000a        print "hello"\u000a        super(B, self).__init__()\u000a\u000aB()\u000a</code></pre>\u000a
p142
sVquestion_id
p143
I2399307
sVlast_activity_date
p144
I1482792718
sVcreation_date
p145
I1268023393
sVscore
p146
I184
sVowner
p147
(dp148
Vuser_id
p149
I20862
sVprofile_image
p150
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p151
sVuser_type
p152
Vregistered
p153
sVreputation
p154
I481008
sVlink
p155
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p156
sVaccept_rate
p157
I60
sVdisplay_name
p158
VIgnacio Vazquez-Abrams
p159
ssVis_accepted
p160
I01
sVlast_edit_date
p161
I1482792718
sVanswer_id
p162
I2399332
sa(dp163
Vbody
p164
V<p>Just change the primary key of your object and run save().</p>\u000a\u000a<pre><code>obj = Foo.objects.get(pk=&lt;some_existing_pk&gt;)\u000aobj.pk = None\u000aobj.save()\u000a</code></pre>\u000a\u000a<p>If you want auto-generated key, set the new key to None.</p>\u000a\u000a<p>More on UPDATE/INSERT <a href="https://docs.djangoproject.com/en/dev/ref/models/instances/#how-django-knows-to-update-vs-insert" rel="noreferrer">here</a>.</p>\u000a
p165
sVquestion_id
p166
I4733609
sVlast_activity_date
p167
I1482395077
sVcreation_date
p168
I1295446207
sVscore
p169
I242
sVowner
p170
(dp171
Vuser_id
p172
I275457
sVprofile_image
p173
Vhttps://www.gravatar.com/avatar/0bc311f9701ea069b4c1aac3b027dbb4?s=128&d=identicon&r=PG
p174
sVuser_type
p175
Vregistered
p176
sVreputation
p177
I3871
sVlink
p178
Vhttp://stackoverflow.com/users/275457/miah
p179
sVaccept_rate
p180
I88
sVdisplay_name
p181
Vmiah
p182
ssVis_accepted
p183
I01
sVlast_edit_date
p184
I1482395077
sVanswer_id
p185
I4736172
sa(dp186
Vbody
p187
V<p>Haven't tested this very extensively, but works in Python 2.5.2.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; d = {"x":2, "h":15, "a":2222}\u000a&gt;&gt;&gt; it = iter(sorted(d.iteritems()))\u000a&gt;&gt;&gt; it.next()\u000a('a', 2222)\u000a&gt;&gt;&gt; it.next()\u000a('h', 15)\u000a&gt;&gt;&gt; it.next()\u000a('x', 2)\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a\u000a<p>If you are used to doing <code>for key, value in d.iteritems(): ...</code> instead of iterators, this will still work with the solution above</p>\u000a\u000a<pre><code>&gt;&gt;&gt; d = {"x":2, "h":15, "a":2222}\u000a&gt;&gt;&gt; for key, value in sorted(d.iteritems()):\u000a&gt;&gt;&gt;     print(key, value)\u000a('a', 2222)\u000a('h', 15)\u000a('x', 2)\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a
p188
sVquestion_id
p189
I364519
sVlast_activity_date
p190
I1482306032
sVcreation_date
p191
I1229129378
sVscore
p192
I116
sVowner
p193
(dp194
Vuser_id
p195
I44484
sVprofile_image
p196
Vhttps://www.gravatar.com/avatar/b89f8c0b0ab5868e54b7459276a2973b?s=128&d=identicon&r=PG
p197
sVuser_type
p198
Vregistered
p199
sVreputation
p200
I5309
sVlink
p201
Vhttp://stackoverflow.com/users/44484/chris-cameron
p202
sVaccept_rate
p203
I50
sVdisplay_name
p204
VChris Cameron
p205
ssVis_accepted
p206
I01
sVlast_edit_date
p207
I1482306032
sVanswer_id
p208
I364599
sa(dp209
Vbody
p210
V<p>The easiest way to use PhantomJS in python is via Selenium. The simplest installation method is</p>\u000a\u000a<ol>\u000a<li>Install <a href="http://nodejs.org/" rel="noreferrer">NodeJS</a></li>\u000a<li>Using Node's package manager install phantomjs: <code>npm -g install phantomjs-prebuilt</code></li>\u000a<li>install selenium (in your virtualenv, if you are using that)</li>\u000a</ol>\u000a\u000a<p>After installation, you may use phantom as simple as:</p>\u000a\u000a<pre><code>from selenium import webdriver\u000a\u000adriver = webdriver.PhantomJS() # or add to your PATH\u000adriver.set_window_size(1024, 768) # optional\u000adriver.get('https://google.com/')\u000adriver.save_screenshot('screen.png') # save a screenshot to disk\u000asbtn = driver.find_element_by_css_selector('button.gbqfba')\u000asbtn.click()\u000a</code></pre>\u000a\u000a<p>If your system path environment variable isn't set correctly, you'll need to specify the exact path as an argument to <code>webdriver.PhantomJS()</code>.  Replace this:</p>\u000a\u000a<pre><code>driver = webdriver.PhantomJS() # or add to your PATH\u000a</code></pre>\u000a\u000a<p>... with the following:</p>\u000a\u000a<pre><code>driver = webdriver.PhantomJS(executable_path='/usr/local/lib/node_modules/phantomjs/lib/phantom/bin/phantomjs')\u000a</code></pre>\u000a\u000a<p>References:</p>\u000a\u000a<ul>\u000a<li><a href="http://selenium-python.readthedocs.org/en/latest/api.html" rel="noreferrer">http://selenium-python.readthedocs.org/en/latest/api.html</a></li>\u000a<li><a href="http://stackoverflow.com/questions/14699718/how-do-i-set-a-proxy-for-phantomjs-ghostdriver-in-python-webdriver/15699530#15699530">How do I set a proxy for phantomjs/ghostdriver in python webdriver?</a></li>\u000a<li><a href="http://python.dzone.com/articles/python-testing-phantomjs" rel="noreferrer">http://python.dzone.com/articles/python-testing-phantomjs</a></li>\u000a</ul>\u000a
p211
sVquestion_id
p212
I13287490
sVlast_activity_date
p213
I1481976898
sVcreation_date
p214
I1364545396
sVscore
p215
I301
sVowner
p216
(dp217
Vuser_id
p218
I742390
sVprofile_image
p219
Vhttps://www.gravatar.com/avatar/88dcd9a1b56c02e905ac3a352e43ba81?s=128&d=identicon&r=PG
p220
sVuser_type
p221
Vregistered
p222
sVreputation
p223
I7836
sVlink
p224
Vhttp://stackoverflow.com/users/742390/pykler
p225
sVaccept_rate
p226
I46
sVdisplay_name
p227
VPykler
p228
ssVis_accepted
p229
I01
sVlast_edit_date
p230
I1481976898
sVanswer_id
p231
I15699761
sa(dp232
Vbody
p233
V<p>As stated in the <a href="https://docs.python.org/2/library/urllib2.html" rel="noreferrer"><code>urllib2</code> documentation</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The <code>urllib2</code> module has been split across several modules in Python 3 named <code>urllib.request</code> and <code>urllib.error</code>. The <code>2to3</code> tool will automatically adapt imports when converting your sources to Python 3.</p>\u000a</blockquote>\u000a\u000a<p>So you should instead be saying</p>\u000a\u000a<pre><code>from urllib.request import urlopen\u000ahtml = urlopen("http://www.google.com/")\u000aprint(html)\u000a</code></pre>\u000a\u000a<p>Your current, now-edited code sample is incorrect because you are saying <code>urllib.urlopen("http://www.google.com/")</code> instead of just <code>urlopen("http://www.google.com/")</code>.</p>\u000a
p234
sVquestion_id
p235
I2792650
sVlast_activity_date
p236
I1480421801
sVcreation_date
p237
I1273284015
sVscore
p238
I199
sVowner
p239
(dp240
Vuser_id
p241
I1694
sVprofile_image
p242
Vhttps://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=128&d=identicon&r=PG
p243
sVuser_type
p244
Vregistered
p245
sVreputation
p246
I93134
sVlink
p247
Vhttp://stackoverflow.com/users/1694/eli-courtwright
p248
sVaccept_rate
p249
I94
sVdisplay_name
p250
VEli Courtwright
p251
ssVis_accepted
p252
I01
sVlast_edit_date
p253
I1480421801
sVanswer_id
p254
I2792652
sa(dp255
Vbody
p256
V<p>Change <code>print item</code> to:</p>\u000a\u000a<ul>\u000a<li><code>print item,</code> in Python 2.7</li>\u000a<li><code>print(item, end=" ")</code> in Python 3</li>\u000a</ul>\u000a\u000a<p>If you want to print the data dynamically use following syntax:</p>\u000a\u000a<ul>\u000a<li><code>print(item, sep=' ', end='', flush=True)</code> in Python 3</li>\u000a</ul>\u000a
p257
sVquestion_id
p258
I3249524
sVlast_activity_date
p259
I1480405627
sVcreation_date
p260
I1279134348
sVscore
p261
I288
sVowner
p262
(dp263
Vuser_id
p264
I147320
sVprofile_image
p265
Vhttps://www.gravatar.com/avatar/bde11522cb4c83bfb7b5e7835b318ba8?s=128&d=identicon&r=PG
p266
sVuser_type
p267
Vregistered
p268
sVreputation
p269
I15845
sVlink
p270
Vhttp://stackoverflow.com/users/147320/ewall
p271
sVaccept_rate
p272
I94
sVdisplay_name
p273
Vewall
p274
ssVis_accepted
p275
I01
sVlast_edit_date
p276
I1480405627
sVanswer_id
p277
I3249539
sa(dp278
Vbody
p279
V<p>You mean <code>def test_booking_gta_object</code>, right? Anyway, the syntax for decorators with arguments is a bit different - the decorator with arguments should return a function that will <em>take a function</em> and return another function. So it should really return a normal decorator. A bit confusing, right? What I mean is:</p>\u000a\u000a<pre><code>def decorator(argument):\u000a    def real_decorator(function):\u000a        def wrapper(*args, **kwargs):\u000a            funny_stuff()\u000a            something_with_argument(argument)\u000a            function(*args, **kwargs)\u000a            more_funny_stuff()\u000a        return wrapper\u000a    return real_decorator\u000a</code></pre>\u000a\u000a<p><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845">Here</a> you can read more on the subject - it's also possible to implement this using callable objects and that is also explained there.</p>\u000a
p280
sVquestion_id
p281
I5929107
sVlast_activity_date
p282
I1477400502
sVcreation_date
p283
I1304877248
sVscore
p284
I298
sVowner
p285
(dp286
Vuser_id
p287
I679897
sVprofile_image
p288
Vhttps://www.gravatar.com/avatar/55e4955d115a2d0776ba349abcfe3582?s=128&d=identicon&r=PG
p289
sVuser_type
p290
Vregistered
p291
sVreputation
p292
I3684
sVlink
p293
Vhttp://stackoverflow.com/users/679897/t-dubrownik
p294
sVdisplay_name
p295
Vt.dubrownik
p296
ssVis_accepted
p297
I01
sVlast_edit_date
p298
I1477400502
sVanswer_id
p299
I5929165
sa(dp300
Vbody
p301
V<p>The simple answer is because <code>3*0.1 != 0.3</code> due to quantization (roundoff) error (whereas <code>4*0.1 == 0.4</code> because multiplying by a power of two is usually an "exact" operation).</p>\u000a\u000a<p>You can use the <code>.hex</code> method in Python to view the internal representation of a number (basically, the <em>exact</em> binary floating point value, rather than the base-10 approximation). This can help to explain what's going on under the hood.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; (0.1).hex()\u000a'0x1.999999999999ap-4'\u000a&gt;&gt;&gt; (0.3).hex()\u000a'0x1.3333333333333p-2'\u000a&gt;&gt;&gt; (0.1*3).hex()\u000a'0x1.3333333333334p-2'\u000a&gt;&gt;&gt; (0.4).hex()\u000a'0x1.999999999999ap-2'\u000a&gt;&gt;&gt; (0.1*4).hex()\u000a'0x1.999999999999ap-2'\u000a</code></pre>\u000a\u000a<p>0.1 is 0x1.999999999999a times 2^-4. The "a" at the end means the digit 10 - in other words, 0.1 in binary floating point is <em>very slightly</em> larger than the "exact" value of 0.1 (because the final 0x0.99 is rounded up to 0x0.a). When you multiply this by 4, a power of two, the exponent shifts up (from 2^-4 to 2^-2) but the number is otherwise unchanged, so <code>4*0.1 == 0.4</code>.</p>\u000a\u000a<p>However, when you multiply by 3, the little tiny difference between 0x0.99 and 0x0.a0 (0x0.07) magnifies into a 0x0.15 error, which shows up as a one-digit error in the last position. This causes 0.1*3 to be <em>very slightly</em> larger than the rounded value of 0.3.</p>\u000a\u000a<p>Python 3's float <code>repr</code> is designed to be <em>round-trippable</em>, that is, the value shown should be exactly convertible into the original value. Therefore, it cannot display <code>0.3</code> and <code>0.1*3</code> exactly the same way, or the two <em>different</em> numbers would end up the same after round-tripping. Consequently, Python 3's <code>repr</code> engine chooses to display one with a slight apparent error.</p>\u000a
p302
sVquestion_id
p303
I39618943
sVlast_activity_date
p304
I1474485868
sVcreation_date
p305
I1474468211
sVscore
p306
I293
sVowner
p307
(dp308
Vuser_id
p309
I1204143
sVprofile_image
p310
Vhttps://www.gravatar.com/avatar/5ca341b160687d99b1317859f91054ee?s=128&d=identicon&r=PG
p311
sVuser_type
p312
Vregistered
p313
sVreputation
p314
I106720
sVlink
p315
Vhttp://stackoverflow.com/users/1204143/nneonneo
p316
sVaccept_rate
p317
I66
sVdisplay_name
p318
Vnneonneo
p319
ssVis_accepted
p320
I01
sVlast_edit_date
p321
I1474485868
sVanswer_id
p322
I39619467
sa(dp323
Vbody
p324
V<p>With the <code>-c</code> <em>(command)</em> argument (assuming your file is named <code>foo.py</code>):</p>\u000a\u000a<pre><code>$ python -c 'import foo; print foo.hello()'\u000a</code></pre>\u000a\u000a<p>Alternatively, if you don't care about namespace pollution:</p>\u000a\u000a<pre><code>$ python -c 'from foo import *; print hello()'\u000a</code></pre>\u000a\u000a<p>And the middle ground:</p>\u000a\u000a<pre><code>$ python -c 'from foo import hello; print hello()'\u000a</code></pre>\u000a
p325
sVquestion_id
p326
I3987041
sVlast_activity_date
p327
I1472637369
sVcreation_date
p328
I1287661971
sVscore
p329
I240
sVowner
p330
(dp331
Vuser_id
p332
I464709
sVprofile_image
p333
Vhttps://www.gravatar.com/avatar/0ab3363d257d780bd4c1f0c844b020a2?s=128&d=identicon&r=PG
p334
sVuser_type
p335
Vregistered
p336
sVreputation
p337
I179050
sVlink
p338
Vhttp://stackoverflow.com/users/464709/fr%c3%a9d%c3%a9ric-hamidi
p339
sVdisplay_name
p340
VFr&#233;d&#233;ric Hamidi
p341
ssVis_accepted
p342
I01
sVlast_edit_date
p343
I1472637369
sVanswer_id
p344
I3987113
sa(dp345
Vbody
p346
V<p>You could try a solution posted <a href="https://coderwall.com/p/-k_93g">here</a> or <a href="http://patrick.arminio.info/blog/2012/02/fix-valueerror-unknown-locale-utf8/">here</a>.  Basically, add some lines to your ~/.bash_profile:</p>\u000a\u000a<pre><code>export LC_ALL=en_US.UTF-8\u000aexport LANG=en_US.UTF-8\u000a</code></pre>\u000a\u000a<p>There is an outstanding <a href="https://bugs.python.org/issue18378">bug report</a> related to this issue.  It appears that Python makes some assumptions about the format of locale names that aren't universally valid.  Explicitly setting these environment vars is basically just a workaround for that bug.</p>\u000a\u000a<p><strong>[Edit:]</strong> As @asmeurer correctly points out, the above fix assumes English and the U.S.  You should really pick your preferred locale from the list given by <code>locale -a</code> (generally one that ends in <code>UTF-8</code>).</p>\u000a
p347
sVquestion_id
p348
I19961239
sVlast_activity_date
p349
I1470937284
sVcreation_date
p350
I1384366785
sVscore
p351
I446
sVowner
p352
(dp353
Vuser_id
p354
I429982
sVprofile_image
p355
Vhttps://www.gravatar.com/avatar/2626843a1f8617b05b650b92b01ca63d?s=128&d=identicon&r=PG
p356
sVuser_type
p357
Vregistered
p358
sVreputation
p359
I18410
sVlink
p360
Vhttp://stackoverflow.com/users/429982/gerrat
p361
sVaccept_rate
p362
I87
sVdisplay_name
p363
VGerrat
p364
ssVis_accepted
p365
I01
sVlast_edit_date
p366
I1470937284
sVanswer_id
p367
I19961403
sa(dp368
Vbody
p369
V<p>It's because <code>__lt__()</code> and related comparison methods are quite commonly used indirectly in list sorts and such. Sometimes the algorithm will choose to try another way or pick a default winner. Raising an exception would break out of the sort unless caught, whereas <code>NotImplemented</code> doesn't get raised and can be used in further tests.</p>\u000a\u000a<p><a href="http://jcalderone.livejournal.com/32837.html" rel="noreferrer">http://jcalderone.livejournal.com/32837.html</a></p>\u000a\u000a<p>To summarise that link:</p>\u000a\u000a<blockquote>\u000a  <p>"<code>NotImplemented</code> signals to the runtime that it should ask someone else to satisfy the operation. In the expression <code>a == b</code>, if <code>a.__eq__(b)</code> returns <code>NotImplemented</code>, then Python tries <code>b.__eq__(a)</code>. If <code>b</code> knows enough to return <code>True</code> or <code>False</code>, then the expression can succeed. If it doesn't, then the runtime will fall back to the built-in behavior (which is based on identity for <code>==</code> and <code>!=</code>)."</p>\u000a</blockquote>\u000a
p370
sVquestion_id
p371
I878943
sVlast_activity_date
p372
I1469951709
sVcreation_date
p373
I1242669512
sVscore
p374
I167
sVowner
p375
(dp376
Vuser_id
p377
I108741
sVprofile_image
p378
Vhttps://www.gravatar.com/avatar/b3a383cf256d50683dfb00512e28f693?s=128&d=identicon&r=PG
p379
sVuser_type
p380
Vregistered
p381
sVreputation
p382
I26642
sVlink
p383
Vhttp://stackoverflow.com/users/108741/spliff
p384
sVaccept_rate
p385
I96
sVdisplay_name
p386
VSpliFF
p387
ssVis_accepted
p388
I01
sVlast_edit_date
p389
I1469951709
sVanswer_id
p390
I879005
sa(dp391
Vbody
p392
V<p>In the standard library, there is no cross-platform way to create aware timezones without creating your own timezone class.</p>\u000a\u000a<p>On Windows, there's <code>win32timezone.utcnow()</code>, but that's part of pywin32. I would rather suggest to use the <a href="http://pytz.sourceforge.net/" rel="noreferrer">pytz library</a>, which has an up-to-date database of most timezones.</p>\u000a\u000a<p>Working with local timezones can be very tricky (read the pytz documentation!), so you may rather want to use UTC throughout your application. You can get the current date/time like so:</p>\u000a\u000a<pre><code>import pytz\u000afrom datetime import datetime\u000adatetime.utcnow().replace(tzinfo=pytz.utc)\u000a</code></pre>\u000a\u000a<p>Mind that <code>datetime.today()</code> and <code>datetime.now()</code> return the <em>local</em> time, not the UTC time, so applying <code>.replace(tzinfo=pytz.utc)</code> to them would not be correct.</p>\u000a\u000a<p>Another nice way to do it is:</p>\u000a\u000a<pre><code>datetime.now(pytz.utc)\u000a</code></pre>\u000a\u000a<p>which is a bit shorter and does the same.</p>\u000a
p393
sVquestion_id
p394
I4530069
sVlast_activity_date
p395
I1468249590
sVcreation_date
p396
I1293277473
sVscore
p397
I195
sVowner
p398
(dp399
Vuser_id
p400
I245706
sVprofile_image
p401
Vhttps://www.gravatar.com/avatar/e714b10afcc8d86b0fcfe79c02e6c61b?s=128&d=identicon&r=PG
p402
sVuser_type
p403
Vregistered
p404
sVreputation
p405
I41468
sVlink
p406
Vhttp://stackoverflow.com/users/245706/andidog
p407
sVaccept_rate
p408
I72
sVdisplay_name
p409
VAndiDog
p410
ssVis_accepted
p411
I01
sVlast_edit_date
p412
I1468249590
sVanswer_id
p413
I4530166
sa(dp414
Vbody
p415
V<p>Let's get one thing out of the way first. The explanation that <code>yield from g</code> is equivalent to <code>for v in g: yield v</code> <strong>does not even begin to do justice</strong> to what <code>yield from</code> is all about. Because, let's face it, if all <code>yield from</code> does is expand the <code>for</code> loop, then it does not warrant adding <code>yield from</code> to the language and preclude a whole bunch of new features from being implemented in Python 2.x.</p>\u000a\u000a<p>Think of <code>yield from</code> as providing a <strong>transparent two-way channel</strong> from the <code>caller</code> to the <code>sub-generator</code>. That includes both <em>getting data from</em> and <em>sending data to</em> the <code>sub-generator</code>. BTW, if you are not sure what <em>sending data to a generator</em> even means, you need to drop everything and read about coroutines first. <a href="http://dabeaz.com/coroutines/">Dave Beazley's Curious Course on Couroutines</a> is an excellent start. <a href="http://dabeaz.com/coroutines/Coroutines.pdf">Read slides 24-33</a> for a quick primer.</p>\u000a\u000a<h2>Reading data from a generator using yield from</h2>\u000a\u000a<pre><code>def reader():\u000a    """A generator that fakes a read from a file, socket, etc."""\u000a    for i in range(4):\u000a        yield '&lt;&lt; %s' % i\u000a\u000adef reader_wrapper(g):\u000a    # Manually iterate over data produced by reader\u000a    for v in g:\u000a        yield v\u000a\u000awrap = reader_wrapper(reader())\u000afor i in wrap:\u000a    print(i)\u000a\u000a# Result\u000a&lt;&lt; 0\u000a&lt;&lt; 1\u000a&lt;&lt; 2\u000a&lt;&lt; 3\u000a</code></pre>\u000a\u000a<p>Instead of manually iterating over <code>reader()</code>, we can just <code>yield from</code> it.</p>\u000a\u000a<pre><code>def reader_wrapper(g):\u000a    yield from g\u000a</code></pre>\u000a\u000a<p>That works, and we eliminated one line of code. And probably the intent is a little bit clearer (or not). But nothing life changing.</p>\u000a\u000a<h2>Sending data to a generator (coroutine) using yield from - Part 1</h2>\u000a\u000a<p>Now let's do something more interesting. Let's create a coroutine called <code>writer</code> that accepts data sent to it and writes to a socket, fd, etc.</p>\u000a\u000a<pre><code>def writer():\u000a    """A coroutine that writes data *sent* to it to fd, socket, etc."""\u000a    while True:\u000a        w = (yield)\u000a        print('&gt;&gt; ', w)\u000a</code></pre>\u000a\u000a<p>Now the question is, how should the wrapper function handle sending data to the writer, so that any data that is sent to the wrapper is <em>transparently</em> sent to the <code>writer()</code>?</p>\u000a\u000a<pre><code>def writer_wrapper(coro):\u000a    # TBD\u000a    pass\u000a\u000aw = writer()\u000awrap = writer_wrapper(w)\u000awrap.send(None)  # "prime" the coroutine\u000afor i in range(4):\u000a    wrap.send(i)\u000a\u000a# Expected result\u000a&gt;&gt;  0\u000a&gt;&gt;  1\u000a&gt;&gt;  2\u000a&gt;&gt;  3\u000a</code></pre>\u000a\u000a<p>The wrapper needs to <em>accept</em> the data that is sent to it (obviously) and should also handle the <code>StopIteration</code> when the for loop is exhausted. Evidently just doing <code>for x in coro: yield x</code> won't do. Here is a version that works.</p>\u000a\u000a<pre><code>def writer_wrapper(coro):\u000a    coro.send(None)  # prime the coro\u000a    while True:\u000a        try:\u000a            x = (yield)  # Capture the value that's sent\u000a            coro.send(x)  # and pass it to the writer\u000a        except StopIteration:\u000a            pass\u000a</code></pre>\u000a\u000a<p>Or, we could do this.</p>\u000a\u000a<pre><code>def writer_wrapper(coro):\u000a    yield from coro\u000a</code></pre>\u000a\u000a<p>That saves 6 lines of code, make it much much more readable and it just works. Magic!</p>\u000a\u000a<h2>Sending data to a generator yield from - Part 2 - Exception handling</h2>\u000a\u000a<p>Let's make it more complicated. What if our writer needs to handle exceptions? Let's say the <code>writer</code> handles a <code>SpamException</code> and it prints <code>***</code> if it encounters one.</p>\u000a\u000a<pre><code>class SpamException(Exception):\u000a    pass\u000a\u000adef writer():\u000a    while True:\u000a        try:\u000a            w = (yield)\u000a        except SpamException:\u000a            print('***')\u000a        else:\u000a            print('&gt;&gt; ', w)\u000a</code></pre>\u000a\u000a<p>What if we don't change <code>writer_wrapper</code>? Does it work? Let's try</p>\u000a\u000a<pre><code># writer_wrapper same as above\u000a\u000aw = writer()\u000awrap = writer_wrapper(w)\u000awrap.send(None)  # "prime" the coroutine\u000afor i in [0, 1, 2, 'spam', 4]:\u000a    if i == 'spam':\u000a        wrap.throw(SpamException)\u000a    else:\u000a        wrap.send(i)\u000a\u000a# Expected Result\u000a&gt;&gt;  0\u000a&gt;&gt;  1\u000a&gt;&gt;  2\u000a***\u000a&gt;&gt;  4\u000a\u000a# Actual Result\u000a&gt;&gt;  0\u000a&gt;&gt;  1\u000a&gt;&gt;  2\u000aTraceback (most recent call last):\u000a  ... redacted ...\u000a  File ... in writer_wrapper\u000a    x = (yield)\u000a__main__.SpamException\u000a</code></pre>\u000a\u000a<p>Um, it's not working because <code>x = (yield)</code> just raises the exception and everything comes to a crashing halt. Let's make it work, but manually handling exceptions and sending them or throwing them into the sub-generator (<code>writer</code>)</p>\u000a\u000a<pre><code>def writer_wrapper(coro):\u000a    """Works. Manually catches exceptions and throws them"""\u000a    coro.send(None)  # prime the coro\u000a    while True:\u000a        try:\u000a            try:\u000a                x = (yield)\u000a            except Exception as e:   # This catches the SpamException\u000a                coro.throw(e)\u000a            else:\u000a                coro.send(x)\u000a        except StopIteration:\u000a            pass\u000a</code></pre>\u000a\u000a<p>This works.</p>\u000a\u000a<pre><code># Result\u000a&gt;&gt;  0\u000a&gt;&gt;  1\u000a&gt;&gt;  2\u000a***\u000a&gt;&gt;  4\u000a</code></pre>\u000a\u000a<p>But so does this!</p>\u000a\u000a<pre><code>def writer_wrapper(coro):\u000a    yield from coro\u000a</code></pre>\u000a\u000a<p>The <code>yield from</code> transparently handles sending the values or throwing values into the sub-generator.</p>\u000a\u000a<p>This still does not cover all the corner cases though. What happens if the outer generator is closed? What about the case when the sub-generator returns a value (yes, in python 3, generators can return values), how should the return value be propagated? <a href="http://www.python.org/dev/peps/pep-0380/#id13">All the corner cases that <code>yield from</code> handles transparently is really impressive</a>. <code>yield from</code> just magically works and handles all those cases.</p>\u000a\u000a<p>I personally feel <code>yield from</code> is a poor keyword choice because it does not make the <em>two-way</em> nature apparent. There were other keywords proposed (like <code>delegate</code> but were rejected because adding a new keyword to the language is much more difficult than combining existing ones.</p>\u000a\u000a<p>In summary, its best to think of <code>yield from</code> as a <strong><code>transparent two way channel</code></strong> between the <code>caller</code> and the <code>sub-generator</code>.</p>\u000a\u000a<p>References:</p>\u000a\u000a<ol>\u000a<li><a href="http://www.python.org/dev/peps/pep-0380/">PEP 380</a> - Syntax for delegating to a sub-generator (Ewing) [v3.3, 2009-02-13]</li>\u000a<li><a href="http://www.python.org/dev/peps/pep-0342/">PEP 342</a> -\u000aCoroutines via Enhanced Generators (GvR, Eby) [v2.5, 2005-05-10]</li>\u000a</ol>\u000a
p416
sVquestion_id
p417
I9708902
sVlast_activity_date
p418
I1467296946
sVcreation_date
p419
I1412025777
sVscore
p420
I191
sVowner
p421
(dp422
Vuser_id
p423
I553995
sVprofile_image
p424
Vhttps://www.gravatar.com/avatar/e8d0550cee4d39f864182776f2b256c2?s=128&d=identicon&r=PG
p425
sVuser_type
p426
Vregistered
p427
sVreputation
p428
I16900
sVlink
p429
Vhttp://stackoverflow.com/users/553995/praveen-gollakota
p430
sVaccept_rate
p431
I100
sVdisplay_name
p432
VPraveen Gollakota
p433
ssVis_accepted
p434
I01
sVlast_edit_date
p435
I1467296946
sVanswer_id
p436
I26109157
sa(dp437
Vbody
p438
V<p>Pass <code>re.IGNORECASE</code> to the <code>flags</code> param of <a href="https://docs.python.org/library/re.html#re.search" rel="noreferrer"><code>search</code></a>, <a href="https://docs.python.org/library/re.html#re.match" rel="noreferrer"><code>match</code></a>, or <a href="https://docs.python.org/library/re.html#re.sub" rel="noreferrer"><code>sub</code></a>:</p>\u000a\u000a<pre><code>re.search('test', 'TeSt', re.IGNORECASE)\u000are.match('test', 'TeSt', re.IGNORECASE)\u000are.sub('test', 'xxxx', 'Testing', flags=re.IGNORECASE)\u000a</code></pre>\u000a
p439
sVquestion_id
p440
I500864
sVlast_activity_date
p441
I1466940400
sVcreation_date
p442
I1233496870
sVscore
p443
I255
sVowner
p444
(dp445
Vuser_id
p446
I29
sVprofile_image
p447
Vhttps://www.gravatar.com/avatar/f4f4b5a6f27f72b32d42463b1a25e0df?s=128&d=identicon&r=PG
p448
sVuser_type
p449
Vregistered
p450
sVreputation
p451
I64164
sVlink
p452
Vhttp://stackoverflow.com/users/29/michael-haren
p453
sVaccept_rate
p454
I84
sVdisplay_name
p455
VMichael Haren
p456
ssVis_accepted
p457
I01
sVlast_edit_date
p458
I1466940400
sVanswer_id
p459
I500870
sa(dp460
Vbody
p461
V<p>I think <code>os.environ.copy()</code> is better if you don't intend to modify the os.environ for the current process:</p>\u000a\u000a<pre><code>import subprocess, os\u000amy_env = os.environ.copy()\u000amy_env["PATH"] = "/usr/sbin:/sbin:" + my_env["PATH"]\u000asubprocess.Popen(my_command, env=my_env)\u000a</code></pre>\u000a
p462
sVquestion_id
p463
I2231227
sVlast_activity_date
p464
I1463419940
sVcreation_date
p465
I1292437703
sVscore
p466
I199
sVowner
p467
(dp468
Vuser_id
p469
I543753
sVprofile_image
p470
Vhttps://www.gravatar.com/avatar/6b9813f857a8693a1c3dcc7fed8bdb11?s=128&d=identicon&r=PG
p471
sVuser_type
p472
Vunregistered
p473
sVreputation
p474
I2006
sVlink
p475
Vhttp://stackoverflow.com/users/543753/daniel-burke
p476
sVdisplay_name
p477
VDaniel Burke
p478
ssVis_accepted
p479
I01
sVlast_edit_date
p480
I1463419940
sVanswer_id
p481
I4453495
sa(dp482
Vbody
p483
V<h3>Python 3.4+</h3>\u000a\u000a<p><code>HTMLParser.unescape</code> is deprecated, and <a href="https://github.com/python/cpython/blob/3.5/Lib/html/parser.py#L466-L470" rel="noreferrer">was supposed to be removed in 3.5</a>, although it was left in by mistake. It will be removed from the language soon. Instead, use <code>html.unescape()</code>:</p>\u000a\u000a<pre><code>import html\u000aprint(html.unescape('&amp;pound;682m'))\u000a</code></pre>\u000a\u000a<p>see <a href="https://docs.python.org/3/library/html.html#html.unescape" rel="noreferrer">https://docs.python.org/3/library/html.html#html.unescape</a></p>\u000a\u000a<hr>\u000a\u000a<h3>Python 2.6-3.3</h3>\u000a\u000a<p>You can use the HTML parser from the standard library:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; try:\u000a...     # Python 2.6-2.7 \u000a...     from HTMLParser import HTMLParser\u000a... except ImportError:\u000a...     # Python 3\u000a...     from html.parser import HTMLParser\u000a... \u000a&gt;&gt;&gt; h = HTMLParser()\u000a&gt;&gt;&gt; print(h.unescape('&amp;pound;682m'))\u000a£682m\u000a</code></pre>\u000a\u000a<p>See <a href="http://docs.python.org/2/library/htmlparser.html" rel="noreferrer">http://docs.python.org/2/library/htmlparser.html</a></p>\u000a\u000a<p>You can also use the <a href="https://pythonhosted.org/six/" rel="noreferrer"><code>six</code></a> compatibility library to simplify the import:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from six.moves.html_parser import HTMLParser\u000a&gt;&gt;&gt; h = HTMLParser()\u000a&gt;&gt;&gt; print(h.unescape('&amp;pound;682m'))\u000a£682m\u000a</code></pre>\u000a
p484
sVquestion_id
p485
I2087370
sVlast_activity_date
p486
I1463069076
sVcreation_date
p487
I1263831470
sVscore
p488
I295
sVowner
p489
(dp490
Vuser_id
p491
I117092
sVprofile_image
p492
Vhttps://www.gravatar.com/avatar/8f21aab63da84a913ef6190dcdf9ede4?s=128&d=identicon&r=PG
p493
sVuser_type
p494
Vregistered
p495
sVreputation
p496
I21117
sVlink
p497
Vhttp://stackoverflow.com/users/117092/luc
p498
sVaccept_rate
p499
I93
sVdisplay_name
p500
Vluc
p501
ssVis_accepted
p502
I01
sVlast_edit_date
p503
I1463069076
sVanswer_id
p504
I2087433
sa(dp505
Vbody
p506
V<p>Like the others said:</p>\u000a\u000a<pre><code>inputString.split('\u005cn')  # --&gt; ['Line 1', 'Line 2', 'Line 3']\u000a</code></pre>\u000a\u000a<p>This is identical to the above, but the string module's functions are deprecated and should be avoided:</p>\u000a\u000a<pre><code>import string\u000astring.split(inputString, '\u005cn')  # --&gt; ['Line 1', 'Line 2', 'Line 3']\u000a</code></pre>\u000a\u000a<p>Alternatively, if you want each line to include the break sequence (CR,LF,CRLF), use the <code>splitlines</code> method with a <code>True</code> argument:</p>\u000a\u000a<pre><code>inputString.splitlines(True)  # --&gt; ['Line 1\u005cn', 'Line 2\u005cn', 'Line 3']\u000a</code></pre>\u000a
p507
sVquestion_id
p508
I172439
sVlast_activity_date
p509
I1461791829
sVcreation_date
p510
I1223233124
sVscore
p511
I170
sVowner
p512
(dp513
Vuser_id
p514
I12320
sVprofile_image
p515
Vhttps://www.gravatar.com/avatar/ca01bbd64a340e9c9961f070aa4515f4?s=128&d=identicon&r=PG
p516
sVuser_type
p517
Vregistered
p518
sVreputation
p519
I10049
sVlink
p520
Vhttp://stackoverflow.com/users/12320/efotinis
p521
sVdisplay_name
p522
Vefotinis
p523
ssVis_accepted
p524
I01
sVlast_edit_date
p525
I1461791829
sVanswer_id
p526
I172468
sa(dp527
Vbody
p528
V<p>Any field with the <code>auto_now</code> attribute set will also inherit <code>editable=False</code> and therefore will not show up in the admin panel.  There has been talk in the past about making the <code>auto_now</code> and <code>auto_now_add</code> arguments go away, and although they still exist, I feel you're better off just using a custom <code>save()</code> method.</p>\u000a\u000a<p>So, to make this work properly, I would recommend not using <code>auto_now</code> or <code>auto_now_add</code> and instead  define your own <code>save()</code> method to make sure that <code>created</code> is only updated if <code>id</code> is not set (such as when the item is first created), and have it update <code>modified</code> every time the item is saved.</p>\u000a\u000a<p>I have done the exact same thing with other projects I have written using Django, and so your <code>save()</code> would look like this:</p>\u000a\u000a<pre><code>from django.utils import timezone\u000a\u000aclass User(models.Model):\u000a    created     = models.DateTimeField(editable=False)\u000a    modified    = models.DateTimeField()\u000a\u000a    def save(self, *args, **kwargs):\u000a        ''' On save, update timestamps '''\u000a        if not self.id:\u000a            self.created = timezone.now()\u000a        self.modified = timezone.now()\u000a        return super(User, self).save(*args, **kwargs)\u000a</code></pre>\u000a\u000a<p>Hope this helps!</p>\u000a\u000a<p><strong>Edit in response to comments:</strong></p>\u000a\u000a<p>The reason why I just stick with overloading <code>save()</code> vs. relying on these field arguments is two-fold:</p>\u000a\u000a<ol>\u000a<li>The aforementioned ups and downs with their reliability.  These arguments are heavily reliant on the way each type of database that Django knows how to interact with treats a date/time stamp field, and seems to break and/or change between every release. (Which I believe is the impetus behind the call to have them removed altogether).</li>\u000a<li>The fact that they only work on DateField, DateTimeField, and TimeField, and by using this technique you are able to automatically populate any field type every time an item is saved.</li>\u000a<li>Use <code>django.utils.timezone.now()</code> vs. <code>datetime.datetime.now()</code>, because it will return a TZ-aware or naive <code>datetime.datetime</code> object depending on <code>settings.USE_TZ</code>.</li>\u000a</ol>\u000a\u000a<p>To address why the OP saw the error, I don't know exactly, but it looks like <code>created</code> isn't even being populated at all, despite having <code>auto_now_add=True</code>.  To me it stands out as a bug, and underscores item #1 in my little list above:  <code>auto_now</code> and <code>auto_now_add</code> are flaky at best. </p>\u000a
p529
sVquestion_id
p530
I1737017
sVlast_activity_date
p531
I1456670659
sVcreation_date
p532
I1258277191
sVscore
p533
I221
sVowner
p534
(dp535
Vuser_id
p536
I194311
sVprofile_image
p537
Vhttps://www.gravatar.com/avatar/a7cec1f75a06a5f8ab53139515da5d99?s=128&d=identicon&r=PG
p538
sVuser_type
p539
Vregistered
p540
sVreputation
p541
I21431
sVlink
p542
Vhttp://stackoverflow.com/users/194311/jathanism
p543
sVaccept_rate
p544
I100
sVdisplay_name
p545
Vjathanism
p546
ssVis_accepted
p547
I01
sVlast_edit_date
p548
I1456670659
sVanswer_id
p549
I1737078
sa(dp550
Vbody
p551
V<p>A decorator solution that keeps the signature:</p>\u000a\u000a<pre><code>import decorator\u000aimport inspect\u000aimport sys\u000a\u000a\u000a@decorator.decorator\u000adef simple_init(func, self, *args, **kws):\u000a    """\u000a    @simple_init\u000a    def __init__(self,a,b,...,z)\u000a        dosomething()\u000a\u000a    behaves like\u000a\u000a    def __init__(self,a,b,...,z)\u000a        self.a = a\u000a        self.b = b\u000a        ...\u000a        self.z = z\u000a        dosomething()\u000a    """\u000a\u000a    #init_argumentnames_without_self = ['a','b',...,'z']\u000a    if sys.version_info.major == 2:\u000a        init_argumentnames_without_self = inspect.getargspec(func).args[1:]\u000a    else:\u000a        init_argumentnames_without_self = tuple(inspect.signature(func).parameters.keys())[1:]\u000a\u000a    positional_values = args\u000a    keyword_values_in_correct_order = tuple(kws[key] for key in init_argumentnames_without_self if key in kws)\u000a    attribute_values = positional_values + keyword_values_in_correct_order\u000a\u000a    for attribute_name,attribute_value in zip(init_argumentnames_without_self,attribute_values):\u000a        setattr(self,attribute_name,attribute_value)\u000a\u000a    # call the original __init__\u000a    func(self, *args, **kws)\u000a\u000a\u000aclass Test():\u000a    @simple_init\u000a    def __init__(self,a,b,c,d=4):\u000a        print(self.a,self.b,self.c,self.d)\u000a\u000a#prints 1 3 2 4\u000at = Test(1,c=2,b=3)\u000a#keeps signature\u000a#prints ['self', 'a', 'b', 'c', 'd']\u000aif sys.version_info.major == 2:\u000a    print(inspect.getargspec(Test.__init__).args)\u000aelse:\u000a    print(inspect.signature(Test.__init__))\u000a</code></pre>\u000a
p552
sVquestion_id
p553
I35190877
sVlast_activity_date
p554
I1455264060
sVcreation_date
p555
I1454570691
sVscore
p556
I87
sVowner
p557
(dp558
Vuser_id
p559
I3276974
sVprofile_image
p560
Vhttps://www.gravatar.com/avatar/1afcb9c8d126ce27cdac2e2db19c57fb?s=128&d=identicon&r=PG&f=1
p561
sVuser_type
p562
Vregistered
p563
sVreputation
p564
I2388
sVlink
p565
Vhttp://stackoverflow.com/users/3276974/siphor
p566
sVdisplay_name
p567
VSiphor
p568
ssVis_accepted
p569
I01
sVlast_edit_date
p570
I1455264060
sVanswer_id
p571
I35194904
sa(dp572
Vbody
p573
V<p>I figured out what should be changed. The trick was to set <code>stream = True</code> in the <code>get()</code> method. </p>\u000a\u000a<p>After this python process stopped to suck memory (stays around 30kb regardless size of the download file). </p>\u000a\u000a<p>Thank you @danodonovan for you syntax I use it here:</p>\u000a\u000a<pre><code>def download_file(url):\u000a    local_filename = url.split('/')[-1]\u000a    # NOTE the stream=True parameter\u000a    r = requests.get(url, stream=True)\u000a    with open(local_filename, 'wb') as f:\u000a        for chunk in r.iter_content(chunk_size=1024): \u000a            if chunk: # filter out keep-alive new chunks\u000a                f.write(chunk)\u000a                #f.flush() commented by recommendation from J.F.Sebastian\u000a    return local_filename\u000a</code></pre>\u000a\u000a<p>See <a href="http://docs.python-requests.org/en/latest/user/advanced/#body-content-workflow">http://docs.python-requests.org/en/latest/user/advanced/#body-content-workflow</a> for further reference.</p>\u000a
p574
sVquestion_id
p575
I16694907
sVlast_activity_date
p576
I1451482363
sVcreation_date
p577
I1369237960
sVscore
p578
I336
sVowner
p579
(dp580
Vuser_id
p581
I427457
sVprofile_image
p582
Vhttps://i.stack.imgur.com/Iwfoc.jpg?s=128&g=1
p583
sVuser_type
p584
Vregistered
p585
sVreputation
p586
I7164
sVlink
p587
Vhttp://stackoverflow.com/users/427457/roman-podlinov
p588
sVaccept_rate
p589
I58
sVdisplay_name
p590
VRoman Podlinov
p591
ssVis_accepted
p592
I01
sVlast_edit_date
p593
I1451482363
sVanswer_id
p594
I16696317
sa(dp595
Vbody
p596
V<p><strong>Note</strong>: This answer is less current than it was when posted in 2009. Using the <code>subprocess</code> module shown in other answers is now recommended <a href="https://docs.python.org/2/library/os.html?highlight=os#os.spawnl" rel="noreferrer">in the docs</a></p>\u000a\u000a<blockquote>\u000a  <p>(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.)</p>\u000a</blockquote>\u000a\u000a<hr>\u000a\u000a<p>If you want your process to start in the background you can either use <code>system()</code> and call it in the same way your shell script did, or you can <code>spawn</code> it:</p>\u000a\u000a<pre><code>import os\u000aos.spawnl(os.P_DETACH, 'some_long_running_command')\u000a</code></pre>\u000a\u000a<p>(or, alternatively, you may try the less portable <code>os.P_NOWAIT</code> flag).</p>\u000a\u000a<p>See the <a href="https://docs.python.org/2/library/os.html#os.spawnl" rel="noreferrer">documentation here</a>.  </p>\u000a
p597
sVquestion_id
p598
I1196074
sVlast_activity_date
p599
I1447928484
sVcreation_date
p600
I1248807923
sVscore
p601
I54
sVowner
p602
(dp603
Vuser_id
p604
I912
sVprofile_image
p605
Vhttps://www.gravatar.com/avatar/62c795f7890d6c5b889b665f457320ee?s=128&d=identicon&r=PG
p606
sVuser_type
p607
Vregistered
p608
sVreputation
p609
I36301
sVlink
p610
Vhttp://stackoverflow.com/users/912/jkp
p611
sVaccept_rate
p612
I75
sVdisplay_name
p613
Vjkp
p614
ssVis_accepted
p615
I01
sVlast_edit_date
p616
I1447928484
sVanswer_id
p617
I1196122
sa(dp618
Vbody
p619
V<p>Here's an example of getting the stack via the <a href="http://docs.python.org/library/traceback.html" rel="noreferrer">traceback</a> module, and printing it:</p>\u000a\u000a<pre><code>import traceback\u000a\u000adef f():\u000a    g()\u000a\u000adef g():\u000a    for line in traceback.format_stack():\u000a        print(line.strip())\u000a\u000af()\u000a\u000a# Prints:\u000a# File "so-stack.py", line 10, in &lt;module&gt;\u000a#     f()\u000a# File "so-stack.py", line 4, in f\u000a#     g()\u000a# File "so-stack.py", line 7, in g\u000a#     for line in traceback.format_stack():\u000a</code></pre>\u000a\u000a<p>If you really only want to print the stack to stderr, you can use:</p>\u000a\u000a<pre><code>traceback.print_stack()\u000a</code></pre>\u000a\u000a<p>Or to print to stdout (useful if want to keep redirected output together), use:</p>\u000a\u000a<pre><code>traceback.print_stack(file=sys.stdout)\u000a</code></pre>\u000a\u000a<p>But getting it via <code>traceback.format_stack()</code> lets you do whatever you like with it.</p>\u000a
p620
sVquestion_id
p621
I1156023
sVlast_activity_date
p622
I1445844866
sVcreation_date
p623
I1248125263
sVscore
p624
I179
sVowner
p625
(dp626
Vuser_id
p627
I21886
sVprofile_image
p628
Vhttps://www.gravatar.com/avatar/38750c50c11e6054c2123073b17b18fc?s=128&d=identicon&r=PG
p629
sVuser_type
p630
Vregistered
p631
sVreputation
p632
I160519
sVlink
p633
Vhttp://stackoverflow.com/users/21886/richiehindle
p634
sVaccept_rate
p635
I87
sVdisplay_name
p636
VRichieHindle
p637
ssVis_accepted
p638
I01
sVlast_edit_date
p639
I1445844866
sVanswer_id
p640
I1156048
sa(dp641
Vbody
p642
V<p>The newest versions of pandas now include a built-in function for iterating over rows. </p>\u000a\u000a<pre><code>for index, row in df.iterrows():\u000a\u000a    # do some logic here\u000a</code></pre>\u000a\u000a<p>Or, if you want it faster use <code>itertuples()</code></p>\u000a\u000a<p>But, unutbu's suggestion to use numpy functions to avoid iterating over rows will produce the fastest code. </p>\u000a
p643
sVquestion_id
p644
I7837722
sVlast_activity_date
p645
I1438262866
sVcreation_date
p646
I1343063379
sVscore
p647
I183
sVowner
p648
(dp649
Vuser_id
p650
I475872
sVprofile_image
p651
Vhttps://www.gravatar.com/avatar/d006aca51db556c8e090ae6f01f5372c?s=128&d=identicon&r=PG
p652
sVuser_type
p653
Vregistered
p654
sVreputation
p655
I2209
sVlink
p656
Vhttp://stackoverflow.com/users/475872/nick-crawford
p657
sVaccept_rate
p658
I100
sVdisplay_name
p659
VNick Crawford
p660
ssVis_accepted
p661
I01
sVlast_edit_date
p662
I1438262866
sVanswer_id
p663
I11617194
sa(dp664
Vbody
p665
V<pre><code>&gt;&gt;&gt; import string\u000a&gt;&gt;&gt; string.ascii_lowercase\u000a'abcdefghijklmnopqrstuvwxyz'\u000a</code></pre>\u000a\u000a<p>If you really need a list:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; list(string.ascii_lowercase)\u000a['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\u000a</code></pre>\u000a\u000a<p>And to do it with <code>range</code></p>\u000a\u000a<pre><code>&gt;&gt;&gt; list(map(chr, range(97, 123))) #or list(map(chr, range(ord('a'), ord('z')+1)))\u000a['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\u000a</code></pre>\u000a\u000a<p>Other helpful <code>string</code> module features:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; help(string) # on Python 3\u000a....\u000aDATA\u000a    ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\u000a    ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'\u000a    ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\u000a    digits = '0123456789'\u000a    hexdigits = '0123456789abcdefABCDEF'\u000a    octdigits = '01234567'\u000a    printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\u005c'()*+,-./:;&lt;=&gt;?@[\u005c\u005c]^_`{|}~ \u005ct\u005cn\u005cr\u005cx0b\u005cx0c'\u000a    punctuation = '!"#$%&amp;\u005c'()*+,-./:;&lt;=&gt;?@[\u005c\u005c]^_`{|}~'\u000a    whitespace = ' \u005ct\u005cn\u005cr\u005cx0b\u005cx0c'\u000a</code></pre>\u000a
p666
sVquestion_id
p667
I16060899
sVlast_activity_date
p668
I1434473060
sVcreation_date
p669
I1366204033
sVscore
p670
I291
sVowner
p671
(dp672
Vuser_id
p673
I1219006
sVprofile_image
p674
Vhttps://i.stack.imgur.com/M1ZlR.jpg?s=128&g=1
p675
sVuser_type
p676
Vregistered
p677
sVreputation
p678
I62408
sVlink
p679
Vhttp://stackoverflow.com/users/1219006/jamylak
p680
sVaccept_rate
p681
I100
sVdisplay_name
p682
Vjamylak
p683
ssVis_accepted
p684
I01
sVlast_edit_date
p685
I1434473060
sVanswer_id
p686
I16060908
sa(dp687
Vbody
p688
V<p>An attempt to <code>easy_install</code> indicates a problem with their <a href="http://pypi.python.org/pypi/scipy/0.7.0" rel="noreferrer">listing</a> in the <a href="http://pypi.python.org/pypi" rel="noreferrer">Python Package Index</a>, which pip searches.</p>\u000a\u000a<pre><code>easy_install scipy\u000aSearching for scipy\u000aReading http://pypi.python.org/simple/scipy/\u000aReading http://www.scipy.org\u000aReading http://sourceforge.net/project/showfiles.php?group_id=27747&amp;package_id=19531\u000aReading http://new.scipy.org/Wiki/Download\u000a</code></pre>\u000a\u000a<p>All is not lost, however; <code>pip</code> can install from <a href="http://en.wikipedia.org/wiki/Apache_Subversion" rel="noreferrer">Subversion</a> (SVN), <a href="http://en.wikipedia.org/wiki/Git_%28software%29" rel="noreferrer">Git</a>, <a href="http://en.wikipedia.org/wiki/Mercurial" rel="noreferrer">Mercurial</a>, and <a href="http://en.wikipedia.org/wiki/Bazaar_%28software%29" rel="noreferrer">Bazaar</a> repositories. SciPy uses SVN:</p>\u000a\u000a<pre><code>pip install svn+http://svn.scipy.org/svn/scipy/trunk/#egg=scipy\u000a</code></pre>\u000a\u000a<p>Update (12-2012):</p>\u000a\u000a<pre><code>pip install git+https://github.com/scipy/scipy.git\u000a</code></pre>\u000a\u000a<p>Since NumPy is a dependency, it should be installed as well.</p>\u000a
p689
sVquestion_id
p690
I2213551
sVlast_activity_date
p691
I1429218744
sVcreation_date
p692
I1265478500
sVscore
p693
I90
sVowner
p694
(dp695
Vdisplay_name
p696
Vc_harm
p697
sVuser_type
p698
Vdoes_not_exist
p699
ssVis_accepted
p700
I01
sVlast_edit_date
p701
I1429218744
sVanswer_id
p702
I2214018
sa(dp703
Vbody
p704
V<ol>\u000a<li><p>It's <strong>faster</strong>, <code>os.system</code> and <code>subprocess.call</code> create new processes which is unnecessary for something this simple. In fact, <code>os.system</code> and <code>subprocess.call</code> with the <code>shell</code> argument usually create at least two new processes: the first one being the shell, and the second one being the command that you're running (if it's not a shell built-in like <code>test</code>).</p></li>\u000a<li><p>Some commands are <strong>useless in a separate process</strong>. For example, if you run <code>os.spawn("cd dir/")</code>, it will change the current working directory of the child process, but not of the Python process. You need to use <code>os.chdir</code> for that.</p></li>\u000a<li><p>You don't have to worry about special <strong>characters interpreted</strong> by the shell. <code>os.chmod(path, mode)</code> will work no matter what the filename is, whereas <code>os.spawn("chmod 777 " + path)</code> will fail horribly if the filename is something like <code>; rm -rf ~</code>. (Note that you can work around this if you use <code>subprocess.call</code> without the <code>shell</code> argument.)</p></li>\u000a<li><p>You don't have to worry about <strong>filenames that begin with a dash</strong>. <code>os.chmod("--quiet", mode)</code> will change the permissions of the file named <code>--quiet</code>, but <code>os.spawn("chmod 777 --quiet")</code> will fail, as <code>--quiet</code> is interpreted as an argument. This is true even for <code>subprocess.call(["chmod", "777", "--quiet"])</code>.</p></li>\u000a<li><p>You have fewer <strong>cross-platform</strong> and cross-shell concerns, as Python's standard library is supposed to deal with that for you. Does your system have <code>chmod</code> command? Is it installed? Does it support the parameters that you expect it to support? The <code>os</code> module will try to be as cross-platform as possible and documents when that it's not possible.</p></li>\u000a<li><p>If the command you're running has <strong>output</strong> that you care about, you need to parse it, which is trickier than it sounds, as you may forget about corner-cases (filenames with spaces, tabs and newlines in them), even when you don't care about portability.</p></li>\u000a</ol>\u000a
p705
sVquestion_id
p706
I28572833
sVlast_activity_date
p707
I1424262511
sVcreation_date
p708
I1424262210
sVscore
p709
I318
sVowner
p710
(dp711
Vuser_id
p712
I247696
sVprofile_image
p713
Vhttps://www.gravatar.com/avatar/936383b387d6cc6d51279e429e5d7cd9?s=128&d=identicon&r=PG
p714
sVuser_type
p715
Vregistered
p716
sVreputation
p717
I28809
sVlink
p718
Vhttp://stackoverflow.com/users/247696/flimm
p719
sVaccept_rate
p720
I76
sVdisplay_name
p721
VFlimm
p722
ssVis_accepted
p723
I01
sVlast_edit_date
p724
I1424262511
sVanswer_id
p725
I28583621
sa(dp726
Vbody
p727
V<p>In python "else if" is spelled "elif".<br>\u000aAlso, you need a colon after the <code>elif</code> and the <code>else</code>.</p>\u000a\u000a<p>Simple answer to a simple question. I had the same problem, when I first started (in the last couple of weeks).</p>\u000a\u000a<p>So your code should read:</p>\u000a\u000a<pre><code>def function(a):\u000a    if a == '1':\u000a        print('1a')\u000a    elif a == '2':\u000a        print('2a')\u000a    else:\u000a        print('3a')\u000a\u000afunction(input('input:'))\u000a</code></pre>\u000a
p728
sVquestion_id
p729
I2395160
sVlast_activity_date
p730
I1423476839
sVcreation_date
p731
I1267935640
sVscore
p732
I263
sVowner
p733
(dp734
Vuser_id
p735
I179081
sVprofile_image
p736
Vhttps://i.stack.imgur.com/TJ9hg.png?s=128&g=1
p737
sVuser_type
p738
Vregistered
p739
sVreputation
p740
I9322
sVlink
p741
Vhttp://stackoverflow.com/users/179081/lyndon-white
p742
sVaccept_rate
p743
I91
sVdisplay_name
p744
VLyndon White
p745
ssVis_accepted
p746
I01
sVlast_edit_date
p747
I1423476839
sVanswer_id
p748
I2395167
sa(dp749
Vbody
p750
V<p><a href="https://pip.readthedocs.org/en/1.1/requirements.html#requirements-file-format">\u201cEditable\u201d packages syntax</a> can be used in <code>requirements.txt</code> to import packages from a variety of <a href="https://pip.readthedocs.org/en/1.1/requirements.html#version-control">VCS (git, hg, bzr, svn)</a>:</p>\u000a\u000a<pre><code>-e git://github.com/mozilla/elasticutils.git#egg=elasticutils\u000a</code></pre>\u000a\u000a<p>Also, it is possible to point to particular commit:</p>\u000a\u000a<pre><code>-e git://github.com/mozilla/elasticutils.git@000b14389171a9f0d7d713466b32bc649b0bed8e#egg=elasticutils\u000a</code></pre>\u000a
p751
sVquestion_id
p752
I16584552
sVlast_activity_date
p753
I1420582513
sVcreation_date
p754
I1368699926
sVscore
p755
I135
sVowner
p756
(dp757
Vuser_id
p758
I821594
sVprofile_image
p759
Vhttps://www.gravatar.com/avatar/bdf10ae4f04deb3a808d044ff1824633?s=128&d=identicon&r=PG
p760
sVuser_type
p761
Vregistered
p762
sVreputation
p763
I6718
sVlink
p764
Vhttp://stackoverflow.com/users/821594/stalk
p765
sVaccept_rate
p766
I80
sVdisplay_name
p767
Vstalk
p768
ssVis_accepted
p769
I01
sVlast_edit_date
p770
I1420582513
sVanswer_id
p771
I16584935
sa(dp772
Vbody
p773
V<p><em>"<strong><a href="https://www.djangoproject.com/" rel="noreferrer">Django</a></strong> is a high-level Python Web framework that encourages rapid development and clean, pragmatic design"</em>. If you are building something that is similar to a e-commerce site, then you should probably go with Django. It will get your work done quick. You dont have to worry about too many technology choices. It provides everything thing you need from template engine to ORM. It will be slightly opinionated about the way you structure your app, which is good If you ask me. And it has the strongest community of all the other libraries, which means easy help is available.</p>\u000a\u000a<p><em>"<strong><a href="http://flask.pocoo.org/" rel="noreferrer">Flask</a></strong> is a microframework for Python based on Werkzeug, Jinja 2 and good intentions"</em>. Beware - "microframework" may be misleading. This does not mean that Flask is a half-baked library. This mean the core of flask is very, very simple. Unlike Django, It will not make any Technology decisions for you. You are free to choose any template engine or ORM that pleases you. Even though it comes with Jinja template engine by default, you are always free to choose our own. As far as I know Flask comes in handy for writing APIs endpoints (RESTful services).</p>\u000a\u000a<p><em>"<strong><a href="https://twistedmatrix.com/" rel="noreferrer">Twisted</a></strong> is an event-driven networking engine written in python"</em>. This is a high-performance engine. The main reason for its speed is something called as deferred. Twisted is built on top of deferreds. For those of you who dont know about defereds, it is the mechanism through with asynchronous architecture is achieved. Twisted is very fast. But is not suitable for writing conventional webapps. If you want to do something low-level networking stuff, twisted is your friend.</p>\u000a\u000a<p><em>"<strong><a href="http://www.tornadoweb.org/en/stable/" rel="noreferrer">Tornado</a></strong> is a Python web framework and asynchronous networking library, originally developed at FriendFeed. By using non-blocking network I/O, Tornado can scale to tens of thousands of open connections, making it ideal for long polling, WebSockets, and other applications that require a long-lived connection to each user"</em>. Tornado stands some where between Django and Flask. If you want to write something with Django or Flask, but if you need a better performance, you can opt for Tornado. it can handle C10k problem very well if it is architected right.</p>\u000a\u000a<p><em>"<strong><a href="http://cyclone.io/" rel="noreferrer">Cyclone</a></strong> is a web server framework for Python that implements the Tornado API as a Twisted protocol"</em>. Now, what if you want something that is nearly as performant as Twisted but easy to write conventional webapps? Say hello to cyclone. I would prefer Cyclone over Tornado. It has an API that is very similar to Tornado. As a matter of fact, this is a fork of Tornado. But the problem is it has relativly small community. Alexandre Fiori is the only main commiter to the repo.</p>\u000a\u000a<p><em>"<strong><a href="http://docs.pylonsproject.org/en/latest/docs/pyramid.html" rel="noreferrer">Pyramid</a></strong> is a general, open source, Python web application development framework. Its primary goal is to make it easier for a Python developer to create web applications."</em> I haven't really used Pyramid, but I went through the documentation. From what I understand, Pyramid is very similar to <em>Flask</em> and I think you can use Pyramid wherever <em>Flask</em> seems appropriate and vice-versa. </p>\u000a\u000a<p><strong><em>EDIT</em></strong>: Request to review any other frameworks are welcomed!</p>\u000a\u000a<p>Source: <a href="http://dhilipsiva.com/2013/05/19/python-libraries-django-twisted-tornado-flask-cyclone-and-pyramid.html" rel="noreferrer">http://dhilipsiva.com/2013/05/19/python-libraries-django-twisted-tornado-flask-cyclone-and-pyramid.html</a></p>\u000a
p774
sVquestion_id
p775
I13941903
sVlast_activity_date
p776
I1416843905
sVcreation_date
p777
I1368930799
sVscore
p778
I159
sVowner
p779
(dp780
Vuser_id
p781
I1235072
sVprofile_image
p782
Vhttps://i.stack.imgur.com/dDm3H.jpg?s=128&g=1
p783
sVuser_type
p784
Vregistered
p785
sVreputation
p786
I2428
sVlink
p787
Vhttp://stackoverflow.com/users/1235072/dhilipsiva
p788
sVaccept_rate
p789
I82
sVdisplay_name
p790
Vdhilipsiva
p791
ssVis_accepted
p792
I01
sVlast_edit_date
p793
I1416843905
sVanswer_id
p794
I16630916
sa(dp795
Vbody
p796
V<p>Twistedless solution:</p>\u000a\u000a<pre><code>from urlparse import urlparse\u000afrom threading import Thread\u000aimport httplib, sys\u000afrom Queue import Queue\u000a\u000aconcurrent = 200\u000a\u000adef doWork():\u000a    while True:\u000a        url = q.get()\u000a        status, url = getStatus(url)\u000a        doSomethingWithResult(status, url)\u000a        q.task_done()\u000a\u000adef getStatus(ourl):\u000a    try:\u000a        url = urlparse(ourl)\u000a        conn = httplib.HTTPConnection(url.netloc)   \u000a        conn.request("HEAD", url.path)\u000a        res = conn.getresponse()\u000a        return res.status, ourl\u000a    except:\u000a        return "error", ourl\u000a\u000adef doSomethingWithResult(status, url):\u000a    print status, url\u000a\u000aq = Queue(concurrent * 2)\u000afor i in range(concurrent):\u000a    t = Thread(target=doWork)\u000a    t.daemon = True\u000a    t.start()\u000atry:\u000a    for url in open('urllist.txt'):\u000a        q.put(url.strip())\u000a    q.join()\u000aexcept KeyboardInterrupt:\u000a    sys.exit(1)\u000a</code></pre>\u000a\u000a<p>This one is slighty faster than the twisted solution and uses less CPU.</p>\u000a
p797
sVquestion_id
p798
I2632520
sVlast_activity_date
p799
I1409229526
sVcreation_date
p800
I1271222563
sVscore
p801
I116
sVowner
p802
(dp803
Vuser_id
p804
I55267
sVprofile_image
p805
Vhttps://www.gravatar.com/avatar/ab742c6941c6dfd01a2853319f53ac47?s=128&d=identicon&r=PG&f=1
p806
sVuser_type
p807
Vregistered
p808
sVreputation
p809
I4429
sVlink
p810
Vhttp://stackoverflow.com/users/55267/tarnay-k%c3%a1lm%c3%a1n
p811
sVaccept_rate
p812
I82
sVdisplay_name
p813
VTarnay K&#225;lm&#225;n
p814
ssVis_accepted
p815
I01
sVlast_edit_date
p816
I1409229526
sVanswer_id
p817
I2635066
sa(dp818
Vbody
p819
V<p>According to <a href="http://docs.python.org/library/gc.html" rel="noreferrer">Python Official Documentation</a>, you can force the Garbage Collector to release unreferenced memory with <code>gc.collect()</code></p>\u000a
p820
sVquestion_id
p821
I1316767
sVlast_activity_date
p822
I1406102237
sVcreation_date
p823
I1250968707
sVscore
p824
I132
sVowner
p825
(dp826
Vuser_id
p827
I156811
sVprofile_image
p828
Vhttps://www.gravatar.com/avatar/380335e95e6be9740e56b64d667279b3?s=128&d=identicon&r=PG
p829
sVuser_type
p830
Vregistered
p831
sVreputation
p832
I13862
sVlink
p833
Vhttp://stackoverflow.com/users/156811/havenard
p834
sVdisplay_name
p835
VHavenard
p836
ssVis_accepted
p837
I01
sVlast_edit_date
p838
I1406102237
sVanswer_id
p839
I1316793
sa(dp840
Vbody
p841
V<p>In Python 3, all strings are sequences of Unicode characters. There is a <code>bytes</code> type that holds raw bytes.</p>\u000a\u000a<p>In Python 2, a string may be of type <code>str</code> or of type <code>unicode</code>. You can tell which using code something like this:</p>\u000a\u000a<pre><code>def whatisthis(s):\u000a    if isinstance(s, str):\u000a        print "ordinary string"\u000a    elif isinstance(s, unicode):\u000a        print "unicode string"\u000a    else:\u000a        print "not a string"\u000a</code></pre>\u000a
p842
sVquestion_id
p843
I4987327
sVlast_activity_date
p844
I1404657912
sVcreation_date
p845
I1297636850
sVscore
p846
I189
sVowner
p847
(dp848
Vuser_id
p849
I893
sVprofile_image
p850
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p851
sVuser_type
p852
Vregistered
p853
sVreputation
p854
I552714
sVlink
p855
Vhttp://stackoverflow.com/users/893/greg-hewgill
p856
sVaccept_rate
p857
I85
sVdisplay_name
p858
VGreg Hewgill
p859
ssVis_accepted
p860
I01
sVlast_edit_date
p861
I1404657912
sVanswer_id
p862
I4987414
sa(dp863
Vbody
p864
V<pre><code>NewValue = (((OldValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin\u000a</code></pre>\u000a\u000a<p>Or a little more readable:  </p>\u000a\u000a<pre><code>OldRange = (OldMax - OldMin)  \u000aNewRange = (NewMax - NewMin)  \u000aNewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin\u000a</code></pre>\u000a\u000a<p>Or if you want to protect for the case where the old range is 0 (<em>OldMin = OldMax</em>):</p>\u000a\u000a<pre><code>OldRange = (OldMax - OldMin)\u000aif (OldRange == 0)\u000a    NewValue = NewMin\u000aelse\u000a{\u000a    NewRange = (NewMax - NewMin)  \u000a    NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin\u000a}\u000a</code></pre>\u000a\u000a<p>Note that in this case we're forced to pick one of the possible new range values arbitrarily. Depending on context, sensible choices could be: <code>NewMin</code> (<em>see sample</em>), <code>NewMax</code> or <code>(NewMin + NewMax) / 2</code></p>\u000a
p865
sVquestion_id
p866
I929103
sVlast_activity_date
p867
I1399785277
sVcreation_date
p868
I1243662741
sVscore
p869
I283
sVowner
p870
(dp871
Vuser_id
p872
I111781
sVprofile_image
p873
Vhttps://www.gravatar.com/avatar/320dc2b3b003612d9879e1563e7a41ca?s=128&d=identicon&r=PG
p874
sVuser_type
p875
Vregistered
p876
sVreputation
p877
I12876
sVlink
p878
Vhttp://stackoverflow.com/users/111781/jerryjvl
p879
sVdisplay_name
p880
Vjerryjvl
p881
ssVis_accepted
p882
I01
sVlast_edit_date
p883
I1399785277
sVanswer_id
p884
I929107
sa(dp885
Vbody
p886
V<p>Marginally better...</p>\u000a\u000a<pre><code>base = datetime.datetime.today()\u000adate_list = [base - datetime.timedelta(days=x) for x in range(0, numdays)]\u000a</code></pre>\u000a
p887
sVquestion_id
p888
I993358
sVlast_activity_date
p889
I1397593563
sVcreation_date
p890
I1245002792
sVscore
p891
I232
sVowner
p892
(dp893
Vuser_id
p894
I10661
sVprofile_image
p895
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p896
sVuser_type
p897
Vregistered
p898
sVreputation
p899
I277525
sVlink
p900
Vhttp://stackoverflow.com/users/10661/s-lott
p901
sVaccept_rate
p902
I92
sVdisplay_name
p903
VS.Lott
p904
ssVis_accepted
p905
I01
sVlast_edit_date
p906
I1397593563
sVanswer_id
p907
I993367
sa(dp908
Vbody
p909
V<p>The growing complexity of this answer over time, and the many hacks required, probably ought to caution you against doing this at all. It's relying on undocumented internal implementation details of the admin, is likely to break again in future versions of Django, and is no easier to implement than just finding another JS calendar widget and using that.</p>\u000a\u000a<p>That said, here's what you have to do if you're determined to make this work:</p>\u000a\u000a<ol>\u000a<li><p>Define your own ModelForm subclass for your model (best to put it in forms.py in your app), and tell it to use the AdminDateWidget / AdminTimeWidget / AdminSplitDateTime (replace 'mydate' etc with the proper field names from your model):</p>\u000a\u000a<pre><code>from django import forms\u000afrom my_app.models import Product\u000afrom django.contrib.admin import widgets                                       \u000a\u000aclass ProductForm(forms.ModelForm):\u000a    class Meta:\u000a        model = Product\u000a    def __init__(self, *args, **kwargs):\u000a        super(ProductForm, self).__init__(*args, **kwargs)\u000a        self.fields['mydate'].widget = widgets.AdminDateWidget()\u000a        self.fields['mytime'].widget = widgets.AdminTimeWidget()\u000a        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()\u000a</code></pre></li>\u000a<li><p>Change your URLconf to pass 'form_class': ProductForm instead of 'model': Product to the generic create_object view (that'll mean "from my_app.forms import ProductForm" instead of "from my_app.models import Product", of course).</p></li>\u000a<li><p>In the head of your template, include {{ form.media }} to output the links to the Javascript files.</p></li>\u000a<li><p>And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:</p>\u000a\u000a<pre><code>&lt;script type="text/javascript" src="/my_admin/jsi18n/"&gt;&lt;/script&gt;\u000a&lt;script type="text/javascript" src="/media/admin/js/core.js"&gt;&lt;/script&gt;\u000a</code></pre>\u000a\u000a<p>You may also wish to use the following admin CSS (thanks <a href="http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/719583#719583">Alex</a> for mentioning this):</p>\u000a\u000a<pre><code>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/forms.css"/&gt;\u000a&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/base.css"/&gt;\u000a&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/global.css"/&gt;\u000a&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/widgets.css"/&gt;\u000a</code></pre></li>\u000a</ol>\u000a\u000a<p>This implies that Django's admin media (ADMIN_MEDIA_PREFIX) is at /media/admin/ - you can change that for your setup.  Ideally you'd use a context processor to pass this values to your template instead of hardcoding it, but that's beyond the scope of this question.</p>\u000a\u000a<p>This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks <a href="http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/408230#408230">Jeremy</a> for pointing this out).  Sample code for your URLconf:</p>\u000a\u000a<pre><code>(r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),\u000a</code></pre>\u000a\u000a<p>Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:</p>\u000a\u000a<pre><code>{% load adminmedia %} /* At the top of the template. */\u000a\u000a/* In the head section of the template. */\u000a&lt;script type="text/javascript"&gt;\u000awindow.__admin_media_prefix__ = "{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}";\u000a&lt;/script&gt;\u000a</code></pre>\u000a\u000a<p>Thanks <a href="http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/2818128#2818128">lupefiasco</a> for this addition.</p>\u000a
p910
sVquestion_id
p911
I38601
sVlast_activity_date
p912
I1396367427
sVcreation_date
p913
I1220335858
sVscore
p914
I143
sVowner
p915
(dp916
Vuser_id
p917
I3207
sVprofile_image
p918
Vhttps://www.gravatar.com/avatar/b1f36e554be0e1ae19f9a74d6ece9107?s=128&d=identicon&r=PG
p919
sVuser_type
p920
Vregistered
p921
sVreputation
p922
I47592
sVlink
p923
Vhttp://stackoverflow.com/users/3207/carl-meyer
p924
sVaccept_rate
p925
I100
sVdisplay_name
p926
VCarl Meyer
p927
ssVis_accepted
p928
I01
sVlast_edit_date
p929
I1396367427
sVanswer_id
p930
I38916
sa(dp931
Vbody
p932
V<p>Suppose you are designing a new class with some methods that you don't want to implement, yet.</p>\u000a\u000a<pre><code>class MyClass(object):\u000a    def meth_a(self):\u000a        pass\u000a\u000a    def meth_b(self):\u000a        print "I'm meth_b"\u000a</code></pre>\u000a\u000a<p>If you would leave out the <code>pass</code>, the code wouldn't run.</p>\u000a\u000a<p>You would then get an</p>\u000a\u000a<pre><code>IndentationError: expected an indented block\u000a</code></pre>\u000a\u000a<p>To summarize, the <code>pass</code> statement does nothing particular but can act as a placeholder, as shown before.</p>\u000a
p933
sVquestion_id
p934
I13886168
sVlast_activity_date
p935
I1394910617
sVcreation_date
p936
I1355518929
sVscore
p937
I178
sVowner
p938
(dp939
Vuser_id
p940
I532474
sVprofile_image
p941
Vhttps://www.gravatar.com/avatar/e7920c9deedf1a28a219d6ae60882a00?s=128&d=identicon&r=PG
p942
sVuser_type
p943
Vregistered
p944
sVreputation
p945
I2935
sVlink
p946
Vhttp://stackoverflow.com/users/532474/sebastian-oe
p947
sVaccept_rate
p948
I75
sVdisplay_name
p949
Vsebastian_oe
p950
ssVis_accepted
p951
I01
sVlast_edit_date
p952
I1394910617
sVanswer_id
p953
I13886195
sa(dp954
Vbody
p955
V<p>Your second question has been answered, but as for your first:</p>\u000a\u000a<blockquote>\u000a  <p>what does the closure capture exactly?</p>\u000a</blockquote>\u000a\u000a<p>Scoping in Python is <strike>dynamic and</strike> lexical. A closure will always remember the name and scope of the variable, not the object it's pointing to. Since all the functions in your example are created in the same scope and use the same variable name, they always refer to the same variable.</p>\u000a\u000a<p><strong>EDIT:</strong> Regarding your other question of how to overcome this, there are two ways that come to mind:</p>\u000a\u000a<ol>\u000a<li><p>The most concise, but not strictly equivalent way is the <a href="http://stackoverflow.com/a/2295372/181765">one recommended by Adrien Plisson</a>. Create a lambda with an extra argument, and set the extra argument's default value to the object you want preserved.</p></li>\u000a<li><p>A little more verbose but less hacky would be to create a new scope each time you create the lambda:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; adders = [0,1,2,3]\u000a&gt;&gt;&gt; for i in [0,1,2,3]:\u000a...     adders[i] = (lambda b: lambda a: b + a)(i)\u000a...     \u000a&gt;&gt;&gt; adders[1](3)\u000a4\u000a&gt;&gt;&gt; adders[2](3)\u000a5\u000a</code></pre>\u000a\u000a<p>The scope here is created using a new function (a lambda, for brevity), which binds its argument, and passing the value you want to bind as the argument. In real code, though, you most likely will have an ordinary function instead of the lambda to create the new scope:</p>\u000a\u000a<pre><code>def createAdder(x):\u000a    return lambda y: y + x\u000aadders = [createAdder(i) for i in range(4)]\u000a</code></pre></li>\u000a</ol>\u000a
p956
sVquestion_id
p957
I2295290
sVlast_activity_date
p958
I1390072258
sVcreation_date
p959
I1266573532
sVscore
p960
I96
sVowner
p961
(dp962
Vuser_id
p963
I181765
sVprofile_image
p964
Vhttps://www.gravatar.com/avatar/4eccfea56e4846550c2202b0ac8555fd?s=128&d=identicon&r=PG
p965
sVuser_type
p966
Vregistered
p967
sVreputation
p968
I26525
sVlink
p969
Vhttp://stackoverflow.com/users/181765/max-shawabkeh
p970
sVdisplay_name
p971
VMax Shawabkeh
p972
ssVis_accepted
p973
I01
sVlast_edit_date
p974
I1390072258
sVanswer_id
p975
I2295368
sa(dp976
Vbody
p977
V<p>Straight from Wes McKinney's <a href="http://shop.oreilly.com/product/0636920023784.do" rel="noreferrer">Python for Data Analysis</a> book, pg. 132 (I highly recommended this book):</p>\u000a\u000a<blockquote>\u000a  <p>Another frequent operation is applying a function on 1D arrays to each column or row. DataFrame\u2019s apply method does exactly this:</p>\u000a</blockquote>\u000a\u000a<pre><code>In [116]: frame = DataFrame(np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'])\u000a\u000aIn [117]: frame\u000aOut[117]: \u000a               b         d         e\u000aUtah   -0.029638  1.081563  1.280300\u000aOhio    0.647747  0.831136 -1.549481\u000aTexas   0.513416 -0.884417  0.195343\u000aOregon -0.485454 -0.477388 -0.309548\u000a\u000aIn [118]: f = lambda x: x.max() - x.min()\u000a\u000aIn [119]: frame.apply(f)\u000aOut[119]: \u000ab    1.133201\u000ad    1.965980\u000ae    2.829781\u000adtype: float64\u000a</code></pre>\u000a\u000a<blockquote>\u000a  <p>Many of the most common array statistics (like sum and mean) are DataFrame methods,\u000a      so using apply is not necessary.</p>\u000a  \u000a  <p>Element-wise Python functions can be used, too. Suppose you wanted to compute a formatted string from each floating point value in frame. You can do this with applymap:</p>\u000a</blockquote>\u000a\u000a<pre><code>In [120]: format = lambda x: '%.2f' % x\u000a\u000aIn [121]: frame.applymap(format)\u000aOut[121]: \u000a            b      d      e\u000aUtah    -0.03   1.08   1.28\u000aOhio     0.65   0.83  -1.55\u000aTexas    0.51  -0.88   0.20\u000aOregon  -0.49  -0.48  -0.31\u000a</code></pre>\u000a\u000a<blockquote>\u000a  <p>The reason for the name applymap is that Series has a map method for applying an element-wise function:</p>\u000a</blockquote>\u000a\u000a<pre><code>In [122]: frame['e'].map(format)\u000aOut[122]: \u000aUtah       1.28\u000aOhio      -1.55\u000aTexas      0.20\u000aOregon    -0.31\u000aName: e, dtype: object\u000a</code></pre>\u000a\u000a<p>Summing up, <code>apply</code> works on a row / column basis of a DataFrame, <code>applymap</code> works element-wise on a DataFrame, and <code>map</code> works element-wise on a Series.</p>\u000a
p978
sVquestion_id
p979
I19798153
sVlast_activity_date
p980
I1383684033
sVcreation_date
p981
I1383684033
sVscore
p982
I196
sVowner
p983
(dp984
Vuser_id
p985
I772487
sVprofile_image
p986
Vhttps://www.gravatar.com/avatar/702f20acde1b405ec1f26495b641f38c?s=128&d=identicon&r=PG
p987
sVuser_type
p988
Vregistered
p989
sVreputation
p990
I2924
sVlink
p991
Vhttp://stackoverflow.com/users/772487/jeremiahbuddha
p992
sVaccept_rate
p993
I60
sVdisplay_name
p994
Vjeremiahbuddha
p995
ssVis_accepted
p996
I01
sVanswer_id
p997
I19798528
sa(dp998
Vbody
p999
V<pre><code>from django.db.models import Q\u000aUser.objects.filter(Q(income__gte=5000) | Q(income__isnull=True))\u000a</code></pre>\u000a\u000a<p><a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects" rel="noreferrer">via Documentation</a></p>\u000a
p1000
sVquestion_id
p1001
I6567831
sVlast_activity_date
p1002
I1382753582
sVcreation_date
p1003
I1309760103
sVscore
p1004
I294
sVowner
p1005
(dp1006
Vuser_id
p1007
I55562
sVprofile_image
p1008
Vhttps://www.gravatar.com/avatar/f91ec1ab77d5686f50037ee176ee1d84?s=128&d=identicon&r=PG
p1009
sVuser_type
p1010
Vregistered
p1011
sVreputation
p1012
I36576
sVlink
p1013
Vhttp://stackoverflow.com/users/55562/lakshman-prasad
p1014
sVaccept_rate
p1015
I88
sVdisplay_name
p1016
VLakshman Prasad
p1017
ssVis_accepted
p1018
I01
sVlast_edit_date
p1019
I1382753582
sVanswer_id
p1020
I6567918
sa(dp1021
Vbody
p1022
V<pre><code>--force-reinstall\u000a</code></pre>\u000a\u000a<p>When upgrading, reinstall all packages even if they are already up-to-date.</p>\u000a\u000a<pre><code>-I, --ignore-installed\u000a</code></pre>\u000a\u000a<p>Ignore the installed packages (reinstalling instead).</p>\u000a
p1023
sVquestion_id
p1024
I19548957
sVlast_activity_date
p1025
I1382551162
sVcreation_date
p1026
I1382551162
sVscore
p1027
I225
sVowner
p1028
(dp1029
Vuser_id
p1030
I2392038
sVprofile_image
p1031
Vhttps://i.stack.imgur.com/OzwEJ.jpg?s=128&g=1
p1032
sVuser_type
p1033
Vregistered
p1034
sVreputation
p1035
I3847
sVlink
p1036
Vhttp://stackoverflow.com/users/2392038/karan-goel
p1037
sVaccept_rate
p1038
I49
sVdisplay_name
p1039
VKaran Goel
p1040
ssVis_accepted
p1041
I01
sVanswer_id
p1042
I19549035
sa(dp1043
Vbody
p1044
V<p>The <code>related_name</code> attribute specifies the name of the reverse relation from the <code>User</code> model back to your model.</p>\u000a\u000a<p>If you don't specify a <code>related_name</code>, Django automatically creates one using the name of your model with the suffix <code>_set</code>, for instance <code>User.map_set.all()</code>. </p>\u000a\u000a<p>If you <em>do</em> specify, e.g. <code>related_name=maps</code> on the <code>User</code> model, <code>User.map_set</code> will still work, but the <code>User.maps.</code> syntax is obviously a bit cleaner and less clunky; so for example, if you had a user object <code>current_user</code>, you could use <code>current_user.maps.all()</code> to get all instances of your <code>Map</code> model that have a relation to <code>current_user</code>. </p>\u000a\u000a<p>The <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects" rel="noreferrer">Django documentation</a> has more details.</p>\u000a
p1045
sVquestion_id
p1046
I2642613
sVlast_activity_date
p1047
I1379086952
sVcreation_date
p1048
I1271304121
sVscore
p1049
I221
sVowner
p1050
(dp1051
Vuser_id
p1052
I137902
sVprofile_image
p1053
Vhttps://www.gravatar.com/avatar/b94d8f450f6e9af13a8ff8928327a885?s=128&d=identicon&r=PG
p1054
sVuser_type
p1055
Vregistered
p1056
sVreputation
p1057
I25030
sVlink
p1058
Vhttp://stackoverflow.com/users/137902/wogan
p1059
sVdisplay_name
p1060
VWogan
p1061
ssVis_accepted
p1062
I01
sVlast_edit_date
p1063
I1379086952
sVanswer_id
p1064
I2642645
sa(dp1065
Vbody
p1066
V<p>It means that you created an infinite  list nested inside itself, which can not be printed. <code>p</code> contains <code>p</code> which contains <code>p</code> ... and so on. The <code>[...]</code> notation is a way to let you know this, and to inform that it can't be represented! Take a look at @6502's answer to see a nice picture showing what's happening.</p>\u000a\u000a<p>Now, regarding the three new items after your edit:</p>\u000a\u000a<ul>\u000a<li>This <a href="http://stackoverflow.com/a/7680125/201359">answer</a> seems to cover it</li>\u000a<li>Ignacio's <a href="http://www.csse.monash.edu.au/~lloyd/tildeFP/1993ACJ/" rel="noreferrer">link</a> describes some possible uses</li>\u000a<li>This is more a topic of data structure design than programming languages, so it's unlikely that any reference is found in Python's official documentation</li>\u000a</ul>\u000a
p1067
sVquestion_id
p1068
I17160162
sVlast_activity_date
p1069
I1371688032
sVcreation_date
p1070
I1371526851
sVscore
p1071
I84
sVowner
p1072
(dp1073
Vuser_id
p1074
I201359
sVprofile_image
p1075
Vhttps://i.stack.imgur.com/t7odj.jpg?s=128&g=1
p1076
sVuser_type
p1077
Vregistered
p1078
sVreputation
p1079
I149580
sVlink
p1080
Vhttp://stackoverflow.com/users/201359/%c3%93scar-l%c3%b3pez
p1081
sVaccept_rate
p1082
I100
sVdisplay_name
p1083
V&#211;scar L&#243;pez
p1084
ssVis_accepted
p1085
I01
sVlast_edit_date
p1086
I1371688032
sVanswer_id
p1087
I17160180
sa(dp1088
Vcommunity_owned_date
p1089
I1458659106
sVbody
p1090
V<p>Python is strongly, dynamically typed.</p>\u000a\u000a<ul>\u000a<li><strong>Strong</strong> typing means that the type of a value doesn't suddenly change. A string containing only digits doesn't magically become a number, as may happen in Perl. Every change of type requires an explicit conversion.</li>\u000a<li><strong>Dynamic</strong> typing means that runtime objects (values) have a type, as opposed to static typing where variables have a type.</li>\u000a</ul>\u000a\u000a<p>As for your example</p>\u000a\u000a<pre><code>bob = 1\u000abob = "bob"\u000a</code></pre>\u000a\u000a<p>This works because the variable does not have a type; it can name any object. After <code>bob=1</code>, you'll find that <code>type(bob)</code> returns <code>int</code>, but after <code>bob="bob"</code>, it returns <code>str</code>. (Note that <code>type</code> is a regular function, so it evaluates its argument, then returns the type of the value.)</p>\u000a\u000a<p>Contrast this with older dialects of C, which were weakly, statically typed, so that pointers and integers were pretty much interchangeable. (Modern ISO C requires conversions in many cases, but my compiler is still lenient about this by default.)</p>\u000a\u000a<p>I must add that the strong vs. weak typing is more of a continuum than a boolean choice. C++ has stronger typing than C (more conversions required), but the type system can be subverted by using pointer casts.</p>\u000a\u000a<p>The strength of the type system in a dynamic language such as Python is really determined by how its primitives and library functions respond to different types. E.g., <code>+</code> is overloaded so that it works on two numbers <em>or</em> two strings, but not a string and an number. This is a design choice made when <code>+</code> was implemented, but not really a necessity following from the language's semantics. In fact, when you overload <code>+</code> on a custom type, you can make it implicitly convert anything to a number:</p>\u000a\u000a<pre><code>def to_number(x):\u000a    """Try to convert x to a number."""\u000a    if x is None:\u000a        return 0\u000a    # more special cases here\u000a    else:\u000a        return float(x)  # works for numbers and strings\u000a\u000aclass Foo(object):\u000a    def __add__(self, other):\u000a        other = to_number(other)\u000a        # now do the addition\u000a</code></pre>\u000a\u000a<p>(The only language that I know that is completely strongly typed, aka strictly typed, is Haskell, where types are entirely disjoint and only a controlled form of overloading is possible via type classes.)</p>\u000a
p1091
sVquestion_id
p1092
I11328920
sVlast_activity_date
p1093
I1369909471
sVcreation_date
p1094
I1341404366
sVscore
p1095
I243
sVowner
p1096
(dp1097
Vuser_id
p1098
I166749
sVprofile_image
p1099
Vhttps://www.gravatar.com/avatar/cadb49057f720b1c1670d14bbd4567ca?s=128&d=identicon&r=PG&f=1
p1100
sVuser_type
p1101
Vregistered
p1102
sVreputation
p1103
I242543
sVlink
p1104
Vhttp://stackoverflow.com/users/166749/fred-foo
p1105
sVaccept_rate
p1106
I94
sVdisplay_name
p1107
VFred Foo
p1108
ssVis_accepted
p1109
I01
sVlast_edit_date
p1110
I1369909471
sVanswer_id
p1111
I11328980
sa(dp1112
Vbody
p1113
V<p>You can set an individual font size for the legend by adjusting the 'prop' keyword. </p>\u000a\u000a<pre><code>plot.legend(loc=2,prop={'size':6})\u000a</code></pre>\u000a\u000a<p>This takes a dictionary of keywords corresponding to <code>matplotlib.font_manager.FontProperties</code> properties. See the <a href="http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.legend" rel="noreferrer">documentation for legend</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Keyword arguments:</p>\u000a\u000a<pre><code>prop: [ None | FontProperties | dict ]\u000a    A matplotlib.font_manager.FontProperties instance. If prop is a \u000a    dictionary, a new instance will be created with prop. If None, use\u000a    rc settings.\u000a</code></pre>\u000a</blockquote>\u000a\u000a<p>It is also possible, as of version <a href="http://matplotlib.org/api/legend_api.html#matplotlib.legend.Legend" rel="noreferrer">1.2.1</a>, to use the keyword <code>fontsize</code>.</p>\u000a
p1114
sVquestion_id
p1115
I7125009
sVlast_activity_date
p1116
I1364907374
sVcreation_date
p1117
I1313774653
sVscore
p1118
I283
sVowner
p1119
(dp1120
Vuser_id
p1121
I717357
sVprofile_image
p1122
Vhttps://www.gravatar.com/avatar/43bb5036a976173d74210931a0f444a5?s=128&d=identicon&r=PG
p1123
sVuser_type
p1124
Vregistered
p1125
sVreputation
p1126
I13605
sVlink
p1127
Vhttp://stackoverflow.com/users/717357/yann
p1128
sVaccept_rate
p1129
I83
sVdisplay_name
p1130
VYann
p1131
ssVis_accepted
p1132
I01
sVlast_edit_date
p1133
I1364907374
sVanswer_id
p1134
I7125157
sa(dp1135
Vcommunity_owned_date
p1136
I1242739855
sVbody
p1137
V<p>From <a href="http://docs.python.org/library/email-examples.html#id4" rel="noreferrer">Python v2.6.2 documentation - 19.1.11. email: Examples</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Here\u2019s an example of how to create an HTML message with an alternative plain text version:</p>\u000a</blockquote>\u000a\u000a<pre class="lang-python prettyprint-override"><code>#! /usr/bin/python\u000a\u000aimport smtplib\u000a\u000afrom email.mime.multipart import MIMEMultipart\u000afrom email.mime.text import MIMEText\u000a\u000a# me == my email address\u000a# you == recipient's email address\u000ame = "my@email.com"\u000ayou = "your@email.com"\u000a\u000a# Create message container - the correct MIME type is multipart/alternative.\u000amsg = MIMEMultipart('alternative')\u000amsg['Subject'] = "Link"\u000amsg['From'] = me\u000amsg['To'] = you\u000a\u000a# Create the body of the message (a plain-text and an HTML version).\u000atext = "Hi!\u005cnHow are you?\u005cnHere is the link you wanted:\u005cnhttp://www.python.org"\u000ahtml = """\u005c\u000a&lt;html&gt;\u000a  &lt;head&gt;&lt;/head&gt;\u000a  &lt;body&gt;\u000a    &lt;p&gt;Hi!&lt;br&gt;\u000a       How are you?&lt;br&gt;\u000a       Here is the &lt;a href="http://www.python.org"&gt;link&lt;/a&gt; you wanted.\u000a    &lt;/p&gt;\u000a  &lt;/body&gt;\u000a&lt;/html&gt;\u000a"""\u000a\u000a# Record the MIME types of both parts - text/plain and text/html.\u000apart1 = MIMEText(text, 'plain')\u000apart2 = MIMEText(html, 'html')\u000a\u000a# Attach parts into message container.\u000a# According to RFC 2046, the last part of a multipart message, in this case\u000a# the HTML message, is best and preferred.\u000amsg.attach(part1)\u000amsg.attach(part2)\u000a\u000a# Send the message via local SMTP server.\u000as = smtplib.SMTP('localhost')\u000a# sendmail function takes 3 arguments: sender's address, recipient's address\u000a# and message to send - here it is sent as one string.\u000as.sendmail(me, you, msg.as_string())\u000as.quit()\u000a</code></pre>\u000a
p1138
sVquestion_id
p1139
I882712
sVlast_activity_date
p1140
I1363623385
sVcreation_date
p1141
I1242739855
sVscore
p1142
I250
sVowner
p1143
(dp1144
Vuser_id
p1145
I34211
sVprofile_image
p1146
Vhttps://www.gravatar.com/avatar/be8accba01f6dedbd2669a66fd44fedf?s=128&d=identicon&r=PG
p1147
sVuser_type
p1148
Vregistered
p1149
sVreputation
p1150
I232317
sVlink
p1151
Vhttp://stackoverflow.com/users/34211/andrew-hare
p1152
sVaccept_rate
p1153
I83
sVdisplay_name
p1154
VAndrew Hare
p1155
ssVis_accepted
p1156
I01
sVlast_edit_date
p1157
I1363623385
sVanswer_id
p1158
I882770
sa(dp1159
Vbody
p1160
V<p><a href="http://www.python.org/dev/peps/pep-0008/#indentation">PEP-8 recommends</a> you indent lines to the opening parentheses if you put anything on the first line, so it should either be indenting to the opening bracket:</p>\u000a\u000a<pre><code>urlpatterns = patterns('',\u000a                       url(r'^$', listing, name='investment-listing'))\u000a</code></pre>\u000a\u000a<p>or not putting any arguments on the starting line, then indenting to a uniform level:</p>\u000a\u000a<pre><code>urlpatterns = patterns(\u000a    '',\u000a    url(r'^$', listing, name='investment-listing'),\u000a)\u000a\u000aurlpatterns = patterns(\u000a    '', url(r'^$', listing, name='investment-listing'))\u000a</code></pre>\u000a\u000a<p>I suggest taking a read through PEP-8 - it's not a long document, and it's pretty easy to understand, unlike some of the more technical PEPs.</p>\u000a
p1161
sVquestion_id
p1162
I15435811
sVlast_activity_date
p1163
I1363360297
sVcreation_date
p1164
I1363360297
sVscore
p1165
I244
sVowner
p1166
(dp1167
Vuser_id
p1168
I722121
sVprofile_image
p1169
Vhttps://www.gravatar.com/avatar/c494fd4b406a2c066054ad17d30ae73b?s=128&d=identicon&r=PG
p1170
sVuser_type
p1171
Vregistered
p1172
sVreputation
p1173
I51344
sVlink
p1174
Vhttp://stackoverflow.com/users/722121/gareth-latty
p1175
sVaccept_rate
p1176
I100
sVdisplay_name
p1177
VGareth Latty
p1178
ssVis_accepted
p1179
I01
sVanswer_id
p1180
I15435837
sa(dp1181
Vbody
p1182
V<blockquote>\u000a  <p>Python evaluates expressions from left to right. Notice that while\u000a  evaluating an assignment, the right-hand side is evaluated before the\u000a  left-hand side.</p>\u000a  \u000a  <p><a href="http://docs.python.org/2/reference/expressions.html#evaluation-order">http://docs.python.org/2/reference/expressions.html#evaluation-order</a></p>\u000a</blockquote>\u000a\u000a<p>That means the following for the expression <code>a,b = b,a</code> :   </p>\u000a\u000a<ul>\u000a<li>the right-hand side <code>b,a</code> is evaluated, that is to say a tuple of two elements is created in the memory. The two element are the objects designated by the identifiers <code>b</code> and <code>a</code>, that were existing before the instruction is encoutered during an execution of program</li>\u000a<li>just after the creation of this tuple, no assignement of this tuple object have still been made, but it doesn't matter, Python internally knows where it is </li>\u000a<li>then, the left-hand side is evaluated, that is to say the tuple is assigned to the left-hand side</li>\u000a<li>as the left-hand side is composed of two identifiers, the tuple is unpacked in order that the first identifier <code>a</code> be assigned to the first element of the tuple (which is the object that was formely <strong>b</strong> before the swap because it had name <code>b</code>)<br>\u000aand the second identifier <code>b</code> is assigned to the second element of the tuple (which is the object that was formerly <strong>a</strong> before the swap because its identifiers was <code>a</code>)</li>\u000a</ul>\u000a\u000a<p>This mechanism has effectively swapped the objects assigned to the identifiers <code>a</code> and <code>b</code></p>\u000a\u000a<p>So, to answer to your question is: YES, it's the standard way to swap two identifiers on two objects.<br>\u000aBy the way, the objects are not variables, they are objects.</p>\u000a
p1183
sVquestion_id
p1184
I14836228
sVlast_activity_date
p1185
I1360685359
sVcreation_date
p1186
I1360684593
sVscore
p1187
I186
sVowner
p1188
(dp1189
Vuser_id
p1190
I551449
sVprofile_image
p1191
Vhttps://www.gravatar.com/avatar/aa73ded506f1dbec1741ff79856d4073?s=128&d=identicon&r=PG
p1192
sVuser_type
p1193
Vregistered
p1194
sVreputation
p1195
I16217
sVlink
p1196
Vhttp://stackoverflow.com/users/551449/eyquem
p1197
sVdisplay_name
p1198
Veyquem
p1199
ssVis_accepted
p1200
I01
sVlast_edit_date
p1201
I1360685359
sVanswer_id
p1202
I14836456
sa(dp1203
Vbody
p1204
V<pre><code>import numpy as np\u000adef find_nearest(array,value):\u000a    idx = (np.abs(array-value)).argmin()\u000a    return array[idx]\u000a\u000aarray = np.random.random(10)\u000aprint(array)\u000a# [ 0.21069679  0.61290182  0.63425412  0.84635244  0.91599191  0.00213826\u000a#   0.17104965  0.56874386  0.57319379  0.28719469]\u000a\u000avalue = 0.5\u000a\u000aprint(find_nearest(array, value))\u000a# 0.568743859261\u000a</code></pre>\u000a
p1205
sVquestion_id
p1206
I2566412
sVlast_activity_date
p1207
I1355351964
sVcreation_date
p1208
I1270209661
sVscore
p1209
I249
sVowner
p1210
(dp1211
Vuser_id
p1212
I190597
sVprofile_image
p1213
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p1214
sVuser_type
p1215
Vregistered
p1216
sVreputation
p1217
I425294
sVlink
p1218
Vhttp://stackoverflow.com/users/190597/unutbu
p1219
sVaccept_rate
p1220
I88
sVdisplay_name
p1221
Vunutbu
p1222
ssVis_accepted
p1223
I01
sVlast_edit_date
p1224
I1355351964
sVanswer_id
p1225
I2566508
sa(dp1226
Vbody
p1227
V<p>dist-packages is a Debian-specific convention that is also present in its derivatives, like Ubuntu. Modules are installed to dist-packages when they come from the Debian package manager into this location:</p>\u000a\u000a<pre><code>/usr/lib/python2.7/dist-packages\u000a</code></pre>\u000a\u000a<p>Since <code>easy_install</code> and <code>pip</code> are installed from the package manager, they also use dist-packages, but they put packages here:</p>\u000a\u000a<pre><code>/usr/local/lib/python2.7/dist-packages\u000a</code></pre>\u000a\u000a<p>From the <a href="http://wiki.debian.org/Python" rel="noreferrer">Debian Python Wiki</a>:</p>\u000a\u000a<blockquote>\u000a  <p>dist-packages instead of site-packages. Third party Python software\u000a  installed from Debian packages goes into dist-packages, not\u000a  site-packages. This is to reduce conflict between the system Python,\u000a  and any from-source Python build you might install manually.</p>\u000a</blockquote>\u000a\u000a<p>This means that if you manually install Python from source, it uses the site-packages directory. This allows you to keep the two installations separate, especially since Debian and Ubuntu rely on the system version of Python for many system utilities.</p>\u000a
p1228
sVquestion_id
p1229
I9387928
sVlast_activity_date
p1230
I1347978503
sVcreation_date
p1231
I1329875574
sVscore
p1232
I137
sVowner
p1233
(dp1234
Vuser_id
p1235
I624900
sVprofile_image
p1236
Vhttps://www.gravatar.com/avatar/dd56da509c21eebb967777a9dbcce437?s=128&d=identicon&r=PG
p1237
sVuser_type
p1238
Vregistered
p1239
sVreputation
p1240
I34937
sVlink
p1241
Vhttp://stackoverflow.com/users/624900/jterrace
p1242
sVaccept_rate
p1243
I88
sVdisplay_name
p1244
Vjterrace
p1245
ssVis_accepted
p1246
I01
sVlast_edit_date
p1247
I1347978503
sVanswer_id
p1248
I9388115
sa(dp1249
Vbody
p1250
V<p>Use <a href="http://docs.python.org/library/stdtypes.html#str.join"><code>join</code></a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sentence = ['this','is','a','sentence']\u000a&gt;&gt;&gt; '-'.join(sentence)\u000a'this-is-a-sentence'\u000a</code></pre>\u000a
p1251
sVquestion_id
p1252
I12453580
sVlast_activity_date
p1253
I1347860886
sVcreation_date
p1254
I1347860021
sVscore
p1255
I301
sVowner
p1256
(dp1257
Vuser_id
p1258
I790387
sVprofile_image
p1259
Vhttps://www.gravatar.com/avatar/450fd2737dd0355700a574bd12842509?s=128&d=identicon&r=PG
p1260
sVuser_type
p1261
Vregistered
p1262
sVreputation
p1263
I97321
sVlink
p1264
Vhttp://stackoverflow.com/users/790387/burhan-khalid
p1265
sVaccept_rate
p1266
I83
sVdisplay_name
p1267
VBurhan Khalid
p1268
ssVis_accepted
p1269
I01
sVlast_edit_date
p1270
I1347860886
sVanswer_id
p1271
I12453584
sa(dp1272
Vbody
p1273
V<pre><code>from flask import request\u000a\u000a@app.route('/data')\u000adef data():\u000a    # here we want to get the value of user (i.e. ?user=some-value)\u000a    user = request.args.get('user')\u000a</code></pre>\u000a
p1274
sVquestion_id
p1275
I11774265
sVlast_activity_date
p1276
I1343959763
sVcreation_date
p1277
I1343898893
sVscore
p1278
I303
sVowner
p1279
(dp1280
Vuser_id
p1281
I311413
sVprofile_image
p1282
Vhttps://www.gravatar.com/avatar/c7053afe0a49a03b39ecfaa2bd389926?s=128&d=identicon&r=PG
p1283
sVuser_type
p1284
Vregistered
p1285
sVreputation
p1286
I6776
sVlink
p1287
Vhttp://stackoverflow.com/users/311413/kracekumar
p1288
sVaccept_rate
p1289
I50
sVdisplay_name
p1290
VKracekumar
p1291
ssVis_accepted
p1292
I01
sVlast_edit_date
p1293
I1343959763
sVanswer_id
p1294
I11774434
sa(dp1295
Vbody
p1296
V<p>File | Invalidate Caches... and restarting PyCharm helps.</p>\u000a
p1297
sVquestion_id
p1298
I11725519
sVlast_activity_date
p1299
I1343895128
sVcreation_date
p1300
I1343895128
sVscore
p1301
I252
sVowner
p1302
(dp1303
Vuser_id
p1304
I429873
sVprofile_image
p1305
Vhttps://www.gravatar.com/avatar/67ee46bec3699a813659c0703c0bce44?s=128&d=identicon&r=PG
p1306
sVuser_type
p1307
Vregistered
p1308
sVreputation
p1309
I3914
sVlink
p1310
Vhttp://stackoverflow.com/users/429873/dmitry-trofimov
p1311
sVaccept_rate
p1312
I80
sVdisplay_name
p1313
VDmitry Trofimov
p1314
ssVis_accepted
p1315
I01
sVanswer_id
p1316
I11773462
sa(dp1317
Vbody
p1318
V<p>It is a guard against a stack overflow, yes. Python (or rather, the CPython implementation) doesn't optimize tail recursion, and unbridled recursion causes stack overflows. You can change the recursion limit with <a href="http://docs.python.org/library/sys.html#sys.setrecursionlimit" rel="noreferrer"><code>sys.setrecursionlimit</code></a>, but doing so is dangerous -- the standard limit is a little conservative, but Python stackframes can be quite big.</p>\u000a\u000a<p>Python isn't a functional language and tail recursion is not a particularly efficient technique. Rewriting the algorithm iteratively, if possible, is generally a better idea.</p>\u000a
p1319
sVquestion_id
p1320
I3323001
sVlast_activity_date
p1321
I1343827632
sVcreation_date
p1322
I1279926539
sVscore
p1323
I164
sVowner
p1324
(dp1325
Vuser_id
p1326
I17624
sVprofile_image
p1327
Vhttps://www.gravatar.com/avatar/90285a816eda046ff55a0dcacc0c5ee8?s=128&d=identicon&r=PG
p1328
sVuser_type
p1329
Vregistered
p1330
sVreputation
p1331
I69283
sVlink
p1332
Vhttp://stackoverflow.com/users/17624/thomas-wouters
p1333
sVdisplay_name
p1334
VThomas Wouters
p1335
ssVis_accepted
p1336
I01
sVlast_edit_date
p1337
I1343827632
sVanswer_id
p1338
I3323013
sa(dp1339
Vbody
p1340
V<pre><code>&gt;&gt;&gt; list_a = [1, 2, 3, 4]\u000a&gt;&gt;&gt; list_b = [5, 6, 7, 8]\u000a&gt;&gt;&gt; zip(list_a, list_b)\u000a[(1, 5), (2, 6), (3, 7), (4, 8)]\u000a</code></pre>\u000a
p1341
sVquestion_id
p1342
I2407398
sVlast_activity_date
p1343
I1343402016
sVcreation_date
p1344
I1268121170
sVscore
p1345
I206
sVowner
p1346
(dp1347
Vuser_id
p1348
I213464
sVprofile_image
p1349
Vhttps://www.gravatar.com/avatar/7f7ff8ab69ce836df0bf9af5acc689af?s=128&d=identicon&r=PG
p1350
sVuser_type
p1351
Vregistered
p1352
sVreputation
p1353
I67371
sVlink
p1354
Vhttp://stackoverflow.com/users/213464/you
p1355
sVaccept_rate
p1356
I100
sVdisplay_name
p1357
VYOU
p1358
ssVis_accepted
p1359
I01
sVlast_edit_date
p1360
I1343402016
sVanswer_id
p1361
I2407405
sa(dp1362
Vbody
p1363
V<p>Redirect the output to DEVNULL:</p>\u000a\u000a<pre><code>import os\u000aimport subprocess\u000a\u000aFNULL = open(os.devnull, 'w')\u000aretcode = subprocess.call(['echo', 'foo'], stdout=FNULL, stderr=subprocess.STDOUT)\u000a</code></pre>\u000a\u000a<p>It is effectively the same as running this shell command:</p>\u000a\u000a<pre><code>retcode = os.system("echo 'foo' &amp;&gt; /dev/null")\u000a</code></pre>\u000a
p1364
sVquestion_id
p1365
I11269575
sVlast_activity_date
p1366
I1341018726
sVcreation_date
p1367
I1341008136
sVscore
p1368
I235
sVowner
p1369
(dp1370
Vuser_id
p1371
I496445
sVprofile_image
p1372
Vhttps://www.gravatar.com/avatar/db00d7b4388686c6d280e8f0578c7e39?s=128&d=identicon&r=PG
p1373
sVuser_type
p1374
Vregistered
p1375
sVreputation
p1376
I59249
sVlink
p1377
Vhttp://stackoverflow.com/users/496445/jdi
p1378
sVaccept_rate
p1379
I97
sVdisplay_name
p1380
Vjdi
p1381
ssVis_accepted
p1382
I01
sVlast_edit_date
p1383
I1341018726
sVanswer_id
p1384
I11269627
sa(dp1385
Vbody
p1386
V<pre><code>&gt;&gt;&gt; a = [3,4,5,6]\u000a&gt;&gt;&gt; for i, val in enumerate(a):\u000a...     print i, val\u000a...\u000a0 3\u000a1 4\u000a2 5\u000a3 6\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a
p1387
sVquestion_id
p1388
I126524
sVlast_activity_date
p1389
I1340037003
sVcreation_date
p1390
I1222254701
sVscore
p1391
I269
sVowner
p1392
(dp1393
Vuser_id
p1394
I5190
sVprofile_image
p1395
Vhttps://www.gravatar.com/avatar/27a12fdc32baf8748018d373a973d22f?s=128&d=identicon&r=PG
p1396
sVuser_type
p1397
Vregistered
p1398
sVreputation
p1399
I176675
sVlink
p1400
Vhttp://stackoverflow.com/users/5190/vinko-vrsalovic
p1401
sVaccept_rate
p1402
I74
sVdisplay_name
p1403
VVinko Vrsalovic
p1404
ssVis_accepted
p1405
I01
sVlast_edit_date
p1406
I1340037003
sVanswer_id
p1407
I126533
sa(dp1408
Vbody
p1409
V<p>You have two foreign keys to User. Django automatically creates a reverse relation from User back to GameClaim, which is usually <code>gameclaim_set</code>. However, because you have two FKs, you would have two <code>gameclaim_set</code> attributes, which is obviously impossible. So you need to tell Django what name to use for the reverse relation.</p>\u000a\u000a<p>Use the <code>related_name</code> attribute in the FK definition.  e.g.</p>\u000a\u000a<pre><code>class GameClaim(models.Model):\u000a    target = models.ForeignKey(User, related_name='gameclaim_targets')\u000a    claimer = models.ForeignKey(User, related_name='gameclaim_users')\u000a    isAccepted = models.BooleanField()\u000a</code></pre>\u000a
p1410
sVquestion_id
p1411
I1142378
sVlast_activity_date
p1412
I1329619239
sVcreation_date
p1413
I1247826048
sVscore
p1414
I268
sVowner
p1415
(dp1416
Vuser_id
p1417
I104349
sVprofile_image
p1418
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p1419
sVuser_type
p1420
Vregistered
p1421
sVreputation
p1422
I356767
sVlink
p1423
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p1424
sVaccept_rate
p1425
I86
sVdisplay_name
p1426
VDaniel Roseman
p1427
ssVis_accepted
p1428
I01
sVlast_edit_date
p1429
I1329619239
sVanswer_id
p1430
I1142473
sa(dp1431
Vbody
p1432
V<pre><code>&gt;&gt;&gt; datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")\u000a'2011-11-03 18:21:26'\u000a</code></pre>\u000a
p1433
sVquestion_id
p1434
I7999935
sVlast_activity_date
p1435
I1320344520
sVcreation_date
p1436
I1320344520
sVscore
p1437
I343
sVowner
p1438
(dp1439
Vuser_id
p1440
I279627
sVprofile_image
p1441
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1442
sVuser_type
p1443
Vregistered
p1444
sVreputation
p1445
I252330
sVlink
p1446
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1447
sVaccept_rate
p1448
I78
sVdisplay_name
p1449
VSven Marnach
p1450
ssVis_accepted
p1451
I01
sVanswer_id
p1452
I7999977
sa(dp1453
Vbody
p1454
V<p>The simplest I've been able to come up with is:</p>\u000a\u000a<pre><code>In [1]: import numpy as np\u000a\u000aIn [2]: arr = np.array([1, 3, 2, 4, 5])\u000a\u000aIn [3]: arr.argsort()[-3:][::-1]\u000aOut[3]: array([4, 3, 1])\u000a</code></pre>\u000a\u000a<p>This involves a complete sort of the array. I wonder if <code>numpy</code> provides a built-in way to do a partial sort; so far I haven't been able to find one.</p>\u000a\u000a<p>If this solution turns out to be too slow (especially for small <code>n</code>), it may be worth looking at coding something up in <a href="http://cython.org/">Cython</a>.</p>\u000a
p1455
sVquestion_id
p1456
I6910641
sVlast_activity_date
p1457
I1312281941
sVcreation_date
p1458
I1312281173
sVscore
p1459
I109
sVowner
p1460
(dp1461
Vuser_id
p1462
I367273
sVprofile_image
p1463
Vhttps://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=128&d=identicon&r=PG
p1464
sVuser_type
p1465
Vregistered
p1466
sVreputation
p1467
I279603
sVlink
p1468
Vhttp://stackoverflow.com/users/367273/npe
p1469
sVaccept_rate
p1470
I96
sVdisplay_name
p1471
VNPE
p1472
ssVis_accepted
p1473
I01
sVlast_edit_date
p1474
I1312281941
sVanswer_id
p1475
I6910672
sa(dp1476
Vbody
p1477
V<p>You can use a list comprehension:</p>\u000a\u000a<pre><code>indices = [i for i, x in enumerate(my_list) if x == "whatever"]\u000a</code></pre>\u000a
p1478
sVquestion_id
p1479
I6294179
sVlast_activity_date
p1480
I1307628837
sVcreation_date
p1481
I1307628837
sVscore
p1482
I221
sVowner
p1483
(dp1484
Vuser_id
p1485
I279627
sVprofile_image
p1486
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1487
sVuser_type
p1488
Vregistered
p1489
sVreputation
p1490
I252330
sVlink
p1491
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1492
sVaccept_rate
p1493
I78
sVdisplay_name
p1494
VSven Marnach
p1495
ssVis_accepted
p1496
I01
sVanswer_id
p1497
I6294205
sa(dp1498
Vbody
p1499
V<p>Use <a href="http://docs.python.org/library/random.html#random.uniform">random.uniform(a, b)</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; random.uniform(1.5, 1.9)\u000a1.8733202628557872\u000a</code></pre>\u000a
p1500
sVquestion_id
p1501
I6088077
sVlast_activity_date
p1502
I1306069473
sVcreation_date
p1503
I1306069473
sVscore
p1504
I255
sVowner
p1505
(dp1506
Vuser_id
p1507
I530339
sVprofile_image
p1508
Vhttps://www.gravatar.com/avatar/c61f70c21b2237a73e627e285cebb99b?s=128&d=identicon&r=PG
p1509
sVuser_type
p1510
Vregistered
p1511
sVreputation
p1512
I4922
sVlink
p1513
Vhttp://stackoverflow.com/users/530339/yuri-stuken
p1514
sVdisplay_name
p1515
VYuri Stuken
p1516
ssVis_accepted
p1517
I01
sVanswer_id
p1518
I6088092
sa(dp1519
Vbody
p1520
V<p>As known this was a path issue.</p>\u000a\u000a<p>the base of my custom packages shared a name with a directory set in a /etc/profile. The packages were in a different location however for the webserver. So I removed the offending entries from my $PYTHONPATH and was good to go!</p>\u000a\u000a<p>Thanks for the help.</p>\u000a
p1521
sVquestion_id
p1522
I6049933
sVlast_activity_date
p1523
I1305814085
sVcreation_date
p1524
I1305814085
sVscore
p1525
I10
sVowner
p1526
(dp1527
Vuser_id
p1528
I600501
sVprofile_image
p1529
Vhttps://www.gravatar.com/avatar/636cb954843856499abe523efe207ddd?s=128&d=identicon&r=PG
p1530
sVuser_type
p1531
Vregistered
p1532
sVreputation
p1533
I1959
sVlink
p1534
Vhttp://stackoverflow.com/users/600501/grantk
p1535
sVaccept_rate
p1536
I70
sVdisplay_name
p1537
Vgrantk
p1538
ssVis_accepted
p1539
I01
sVanswer_id
p1540
I6059969
sa(dp1541
Vbody
p1542
V<p>A simple test in the console shows you cannot modify a dictionary while iterating over it:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; mydict = {'one': 1, 'two': 2, 'three': 3, 'four': 4}\u000a&gt;&gt;&gt; for k, v in mydict.iteritems():\u000a...    if k == 'two':\u000a...        del mydict[k]\u000a...\u000a------------------------------------------------------------\u000aTraceback (most recent call last):\u000a  File "&lt;ipython console&gt;", line 1, in &lt;module&gt;\u000aRuntimeError: dictionary changed size during iteration\u000a</code></pre>\u000a\u000a<p>As stated in delnan's answer, deleting entries causes problems when the iterator tries to move onto the next entry. Instead, use the <code>keys()</code> method to get a list of the keys and work with that:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; for k in mydict.keys():\u000a...    if k == 'two':\u000a...        del mydict[k]\u000a...\u000a&gt;&gt;&gt; mydict\u000a{'four': 4, 'three': 3, 'one': 1}\u000a</code></pre>\u000a\u000a<p>If you need to delete based on the items value, use the <code>items()</code> method instead:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; for k, v in mydict.items():\u000a...     if v == 3:\u000a...         del mydict[k]\u000a...\u000a&gt;&gt;&gt; mydict\u000a{'four': 4, 'one': 1}\u000a</code></pre>\u000a
p1543
sVquestion_id
p1544
I5384914
sVlast_activity_date
p1545
I1300751591
sVcreation_date
p1546
I1300751248
sVscore
p1547
I199
sVowner
p1548
(dp1549
Vuser_id
p1550
I668807
sVprofile_image
p1551
Vhttps://www.gravatar.com/avatar/045f30cdae208f0149b4d5a6c0c8b3eb?s=128&d=identicon&r=PG
p1552
sVuser_type
p1553
Vregistered
p1554
sVreputation
p1555
I9405
sVlink
p1556
Vhttp://stackoverflow.com/users/668807/blair
p1557
sVdisplay_name
p1558
VBlair
p1559
ssVis_accepted
p1560
I01
sVlast_edit_date
p1561
I1300751591
sVanswer_id
p1562
I5385075
sa(dp1563
Vbody
p1564
V<p>Try using <code>in</code> like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = 'hello'\u000a&gt;&gt;&gt; y = 'll'\u000a&gt;&gt;&gt; y in x\u000aTrue\u000a</code></pre>\u000a
p1565
sVquestion_id
p1566
I5143769
sVlast_activity_date
p1567
I1298906064
sVcreation_date
p1568
I1298906064
sVscore
p1569
I280
sVowner
p1570
(dp1571
Vuser_id
p1572
I34211
sVprofile_image
p1573
Vhttps://www.gravatar.com/avatar/be8accba01f6dedbd2669a66fd44fedf?s=128&d=identicon&r=PG
p1574
sVuser_type
p1575
Vregistered
p1576
sVreputation
p1577
I232317
sVlink
p1578
Vhttp://stackoverflow.com/users/34211/andrew-hare
p1579
sVaccept_rate
p1580
I83
sVdisplay_name
p1581
VAndrew Hare
p1582
ssVis_accepted
p1583
I01
sVanswer_id
p1584
I5143782
sa(dp1585
Vbody
p1586
V<p>What is to stop you using <code>myproduct.myproduct</code>? What you need to achieve that roughly consists of doing this:</p>\u000a\u000a<pre><code>django-admin.py startproject myproduct\u000acd myproduct\u000amkdir myproduct\u000atouch myproduct/__init__.py\u000atouch myproduct/models.py\u000atouch myproduct/views.py\u000a</code></pre>\u000a\u000a<p>and so on. Would it help if I said <code>views.py</code> doesn't have to be called <code>views.py</code>? Provided you can name, on the python path, a function (usually package.package.views.function_name) it will get handled. Simple as that. All this "project"/"app" stuff is just python packages.</p>\u000a\u000a<p>Now, how are you supposed to do it? Or rather, how might I do it? Well, if you create a significant piece of reusable functionality, like say a markup editor, that's when you create a "top level app" which might contain <code>widgets.py</code>, <code>fields.py</code>, <code>context_processors.py</code> etc - all things you might want to import.</p>\u000a\u000a<p>Similarly, if you can create something like a blog in a format that is pretty generic across installs, you can wrap it up in an app, with its own template, static content folder etc, and configure an instance of a django project to use that app's content.</p>\u000a\u000a<p>There are no hard and fast rules saying you must do this, but it is one of the goals of the framework. The fact that everything, templates included, allows you to include from some common base means your blog should fit snugly into any other setup, simply by looking after its own part.</p>\u000a\u000a<p>However, to address your actual concern, yes, nothing says you can't work with the top level project folder. <em>That's what apps do</em> and you can do it if you really want to. I tend not to, however, for several reasons:</p>\u000a\u000a<ul>\u000a<li>Django's default setup doesn't do it.</li>\u000a<li>Often, I want to create a main app, so I create one, usually called <code>website</code>. However, at a later date I might want to develop original functionality just for this site. With a view to making it removable (whether or not I ever do) I tend to then create a separate directory. This also means I can drop said functionality just by unlinking that package from the config and removing the folder, rather than a complex delete the right urls from a global urls.py folder.</li>\u000a<li>Very often, even when I want to make something independent, it needs somewhere to live whilst I look after it / make it independent. Basically the above case, but for stuff I do intend to make generic.</li>\u000a<li>My top level folder often contains a few other things, including but not limited to wsgi scripts, sql scripts etc.</li>\u000a<li>django's <a href="http://docs.djangoproject.com/en/1.2/howto/custom-management-commands/">management extensions</a> rely on subdirectories. So it makes sense to name packages appropriately.</li>\u000a</ul>\u000a\u000a<p>In short, the reason there is a convention is the same as any other convention - it helps when it comes to others working with your project. If I see <code>fields.py</code> I immediately expect code in it to subclass django's field, whereas if I see <code>inputtypes.py</code> I might not be so clear on what that means without looking at it.</p>\u000a
p1587
sVquestion_id
p1588
I4879036
sVlast_activity_date
p1589
I1296676701
sVcreation_date
p1590
I1296676701
sVscore
p1591
I47
sVowner
p1592
(dp1593
Vdisplay_name
p1594
Vuser257111
p1595
sVuser_type
p1596
Vdoes_not_exist
p1597
ssVis_accepted
p1598
I01
sVanswer_id
p1599
I4879205
sa(dp1600
Vbody
p1601
V<pre><code>timestamp.sort(key=lambda x: time.strptime(x, '%Y-%m-%d %H:%M:%S')[0:6],\u000a    reverse=True)\u000a</code></pre>\u000a
p1602
sVquestion_id
p1603
I4183506
sVlast_activity_date
p1604
I1289817743
sVcreation_date
p1605
I1289817743
sVscore
p1606
I172
sVowner
p1607
(dp1608
Vuser_id
p1609
I20862
sVprofile_image
p1610
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p1611
sVuser_type
p1612
Vregistered
p1613
sVreputation
p1614
I481008
sVlink
p1615
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p1616
sVaccept_rate
p1617
I60
sVdisplay_name
p1618
VIgnacio Vazquez-Abrams
p1619
ssVis_accepted
p1620
I01
sVanswer_id
p1621
I4183540
sa(dp1622
Vbody
p1623
V<p>You can use <a href="http://docs.python.org/library/functions.html#any" rel="noreferrer"><strong><code>any</code></strong></a>:</p>\u000a\u000a<pre><code>if any(x in str for x in a):\u000a</code></pre>\u000a\u000a<p>Similarly to check if <em>all</em> the strings from the list are found, use <a href="http://docs.python.org/library/functions.html#all" rel="noreferrer"><strong><code>all</code></strong></a> instead of <code>any</code>.</p>\u000a
p1624
sVquestion_id
p1625
I3389574
sVlast_activity_date
p1626
I1280765725
sVcreation_date
p1627
I1280765725
sVscore
p1628
I311
sVowner
p1629
(dp1630
Vuser_id
p1631
I61974
sVprofile_image
p1632
Vhttps://www.gravatar.com/avatar/ad240ed5cc406759f0fd72591dc8ca47?s=128&d=identicon&r=PG
p1633
sVuser_type
p1634
Vregistered
p1635
sVreputation
p1636
I484946
sVlink
p1637
Vhttp://stackoverflow.com/users/61974/mark-byers
p1638
sVdisplay_name
p1639
VMark Byers
p1640
ssVis_accepted
p1641
I01
sVanswer_id
p1642
I3389611
sa(dp1643
Vbody
p1644
V<p>Well, when <code>DEBUG = False</code>, Django will automatically mail a full traceback of any error to each person listed in the <code>ADMINS</code> setting, which gets you notifications pretty much for free. If you'd like more fine-grained control, you can write and add to your settings a middleware class which defines a method named <code>process_exception()</code>, which will have access to the exception that was raised:</p>\u000a\u000a<p><a href="http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception" rel="noreferrer">http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception</a></p>\u000a\u000a<p>Your <code>process_exception()</code> method can then perform whatever type of logging you'd like: writing to console, writing to a file, etc., etc.</p>\u000a\u000a<p>Edit: though it's a bit less useful, you can also listen for the <code>got_request_exception</code> signal, which will be sent whenever an exception is encountered during request processing:</p>\u000a\u000a<p><a href="http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception" rel="noreferrer">http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception</a></p>\u000a\u000a<p>This does <em>not</em> give you access to the exception object, however, so the middleware method is much easier to work with.</p>\u000a
p1645
sVquestion_id
p1646
I238081
sVlast_activity_date
p1647
I1277430569
sVcreation_date
p1648
I1225032811
sVscore
p1649
I78
sVowner
p1650
(dp1651
Vuser_id
p1652
I28070
sVprofile_image
p1653
Vhttps://www.gravatar.com/avatar/108534f65d8d2d7de6995973c1f49889?s=128&d=identicon&r=PG
p1654
sVuser_type
p1655
Vregistered
p1656
sVreputation
p1657
I7887
sVlink
p1658
Vhttp://stackoverflow.com/users/28070/james-bennett
p1659
sVdisplay_name
p1660
VJames Bennett
p1661
ssVis_accepted
p1662
I01
sVlast_edit_date
p1663
I1277430569
sVanswer_id
p1664
I238111
sa(dp1665
Vbody
p1666
V<p>A pattern that often came up in Python was</p>\u000a\u000a<pre><code>bar = []\u000afor item in some_iterable:\u000a    bar.append(SOME EXPRESSION)\u000a</code></pre>\u000a\u000a<p>which helped motivate the introduction of list comprehensions, which convert that snippet to</p>\u000a\u000a<pre><code>bar = [SOME EXPRESSION for item in some_iterable]\u000a</code></pre>\u000a\u000a<p>which is shorter and sometimes clearer. Usually you get in the habit of recognizing these and often replacing loops with comprehensions.</p>\u000a\u000a<p>Your code follows this pattern twice</p>\u000a\u000a<pre><code>twod_list = []                                       \u005c                      \u000afor i in range (0, 10):                               \u005c\u000a    new = []                  \u005c can be replaced        } this too\u000a    for j in range (0, 10):    } with a list          /\u000a        new.append(foo)       / comprehension        /\u000a    twod_list.append(new)                           /\u000a</code></pre>\u000a
p1667
sVquestion_id
p1668
I2397141
sVlast_activity_date
p1669
I1267983791
sVcreation_date
p1670
I1267983791
sVscore
p1671
I243
sVowner
p1672
(dp1673
Vuser_id
p1674
I192839
sVprofile_image
p1675
Vhttps://i.stack.imgur.com/GNPsv.jpg?s=128&g=1
p1676
sVuser_type
p1677
Vregistered
p1678
sVreputation
p1679
I38635
sVlink
p1680
Vhttp://stackoverflow.com/users/192839/mike-graham
p1681
sVaccept_rate
p1682
I71
sVdisplay_name
p1683
VMike Graham
p1684
ssVis_accepted
p1685
I01
sVanswer_id
p1686
I2397192
sa(dp1687
Vbody
p1688
V<p><code>filter_by</code> is used for simple queries on the column names like</p>\u000a\u000a<p><code>db.users.filter_by(name='Joe')</code></p>\u000a\u000a<p>The same can be accomplished with <code>filter</code> by writing</p>\u000a\u000a<p><code>db.users.filter(db.users.name=='Joe')</code></p>\u000a\u000a<p>but you can also write more powerful queries containing expressions like</p>\u000a\u000a<p><code>db.users.filter(or_(db.users.name=='Ryan', db.users.country=='England'))</code></p>\u000a
p1689
sVquestion_id
p1690
I2128505
sVlast_activity_date
p1691
I1264363376
sVcreation_date
p1692
I1264363376
sVscore
p1693
I190
sVowner
p1694
(dp1695
Vuser_id
p1696
I243238
sVprofile_image
p1697
Vhttps://www.gravatar.com/avatar/7bb775f302392e8983faacc71621ee2a?s=128&d=identicon&r=PG
p1698
sVuser_type
p1699
Vregistered
p1700
sVreputation
p1701
I15171
sVlink
p1702
Vhttp://stackoverflow.com/users/243238/daniel-velkov
p1703
sVaccept_rate
p1704
I53
sVdisplay_name
p1705
VDaniel Velkov
p1706
ssVis_accepted
p1707
I01
sVanswer_id
p1708
I2128558
sa(dp1709
Vbody
p1710
V<pre><code>&gt;&gt;&gt; import getpass\u000a&gt;&gt;&gt; pw = getpass.getpass()\u000a</code></pre>\u000a
p1711
sVquestion_id
p1712
I1761744
sVlast_activity_date
p1713
I1258619342
sVcreation_date
p1714
I1258619342
sVscore
p1715
I241
sVowner
p1716
(dp1717
Vuser_id
p1718
I166686
sVprofile_image
p1719
Vhttps://www.gravatar.com/avatar/2428725d68892ed63f4d492549eebb76?s=128&d=identicon&r=PG
p1720
sVuser_type
p1721
Vregistered
p1722
sVreputation
p1723
I51556
sVlink
p1724
Vhttp://stackoverflow.com/users/166686/mjv
p1725
sVdisplay_name
p1726
Vmjv
p1727
ssVis_accepted
p1728
I01
sVanswer_id
p1729
I1761753
sa(dp1730
Vbody
p1731
V<p>You can still get not-a-number (NaN) values from simple arithmetic involving <code>inf</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 0 * float("inf")\u000anan\u000a</code></pre>\u000a\u000a<p>Note that you will normally <em>not</em> get an <code>inf</code> value through usual arithmetic calculations:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 2.0**2\u000a4.0\u000a&gt;&gt;&gt; _**2\u000a16.0\u000a&gt;&gt;&gt; _**2\u000a256.0\u000a&gt;&gt;&gt; _**2\u000a65536.0\u000a&gt;&gt;&gt; _**2\u000a4294967296.0\u000a&gt;&gt;&gt; _**2\u000a1.8446744073709552e+19\u000a&gt;&gt;&gt; _**2\u000a3.4028236692093846e+38\u000a&gt;&gt;&gt; _**2\u000a1.157920892373162e+77\u000a&gt;&gt;&gt; _**2\u000a1.3407807929942597e+154\u000a&gt;&gt;&gt; _**2\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in ?\u000aOverflowError: (34, 'Numerical result out of range')\u000a</code></pre>\u000a\u000a<p>The <code>inf</code> value is considered a very special value with unusual semantics, so it's better to know about an <code>OverflowError</code> straight away through an exception, rather than having an <code>inf</code> value silently injected into your calculations.</p>\u000a
p1732
sVquestion_id
p1733
I1628026
sVlast_activity_date
p1734
I1256604313
sVcreation_date
p1735
I1256603496
sVscore
p1736
I85
sVowner
p1737
(dp1738
Vuser_id
p1739
I893
sVprofile_image
p1740
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p1741
sVuser_type
p1742
Vregistered
p1743
sVreputation
p1744
I552714
sVlink
p1745
Vhttp://stackoverflow.com/users/893/greg-hewgill
p1746
sVaccept_rate
p1747
I85
sVdisplay_name
p1748
VGreg Hewgill
p1749
ssVis_accepted
p1750
I01
sVlast_edit_date
p1751
I1256604313
sVanswer_id
p1752
I1628105
sa(dp1753
Vbody
p1754
V<p>I like to quote Peters' Zen of Python.  "Explicit is better than implicit."</p>\u000a\u000a<p>In Java and C++, '<code>this.</code>' can be deduced, except when you have variable names that make it impossible to deduce.   So you sometimes need it and sometimes don't.</p>\u000a\u000a<p>Python elects to make things like this explicit rather than based on a rule.  </p>\u000a\u000a<p>Additionally, since nothing is implied or assumed, parts of the implementation are exposed.  <code>self.__class__</code>, <code>self.__dict__</code> and other "internal" structures are available in an obvious way.</p>\u000a
p1755
sVquestion_id
p1756
I68282
sVlast_activity_date
p1757
I1255001710
sVcreation_date
p1758
I1221526075
sVscore
p1759
I76
sVowner
p1760
(dp1761
Vuser_id
p1762
I10661
sVprofile_image
p1763
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1764
sVuser_type
p1765
Vregistered
p1766
sVreputation
p1767
I277525
sVlink
p1768
Vhttp://stackoverflow.com/users/10661/s-lott
p1769
sVaccept_rate
p1770
I92
sVdisplay_name
p1771
VS.Lott
p1772
ssVis_accepted
p1773
I01
sVlast_edit_date
p1774
I1255001710
sVanswer_id
p1775
I68324
sa(dp1776
Vbody
p1777
V<p>Tuples are immutable; you can't change which variables they contain after construction. However, you can concatenate or slice them to form new tuples:</p>\u000a\u000a<pre><code>a = (1, 2, 3)\u000ab = a + (4, 5, 6)\u000ac = b[1:]\u000a</code></pre>\u000a\u000a<p>And, of course, build them from existing values:</p>\u000a\u000a<pre><code>   name = "Joe"\u000a   age = 40\u000a   location = "New York"\u000a   joe = (name, age, location)\u000a</code></pre>\u000a
p1778
sVquestion_id
p1779
I1380860
sVlast_activity_date
p1780
I1252089579
sVcreation_date
p1781
I1252089579
sVscore
p1782
I189
sVowner
p1783
(dp1784
Vuser_id
p1785
I3560
sVprofile_image
p1786
Vhttps://www.gravatar.com/avatar/4acd21acc7b1f605466f2f48189a7177?s=128&d=identicon&r=PG
p1787
sVuser_type
p1788
Vregistered
p1789
sVreputation
p1790
I133151
sVlink
p1791
Vhttp://stackoverflow.com/users/3560/john-millikin
p1792
sVaccept_rate
p1793
I83
sVdisplay_name
p1794
VJohn Millikin
p1795
ssVis_accepted
p1796
I01
sVanswer_id
p1797
I1380875
sa(dp1798
Vbody
p1799
V<p><code>__str__()</code> is the old method -- it returns bytes. <code>__unicode__()</code> is the new, preferred method -- it returns characters. The names are a bit confusing, but in 2.x we're stuck with them for compatibility reasons. Generally, you should put all your string formatting in <code>__unicode__()</code>, and create a stub <code>__str__()</code> method:</p>\u000a\u000a<pre><code>def __str__(self):\u000a    return unicode(self).encode('utf-8')\u000a</code></pre>\u000a\u000a<p>In 3.0, <code>str</code> contains characters, so the same methods are named <code>__bytes__()</code> and <code>__str__()</code>. These behave as expected.</p>\u000a
p1800
sVquestion_id
p1801
I1307014
sVlast_activity_date
p1802
I1250784274
sVcreation_date
p1803
I1250784274
sVscore
p1804
I203
sVowner
p1805
(dp1806
Vuser_id
p1807
I3560
sVprofile_image
p1808
Vhttps://www.gravatar.com/avatar/4acd21acc7b1f605466f2f48189a7177?s=128&d=identicon&r=PG
p1809
sVuser_type
p1810
Vregistered
p1811
sVreputation
p1812
I133151
sVlink
p1813
Vhttp://stackoverflow.com/users/3560/john-millikin
p1814
sVaccept_rate
p1815
I83
sVdisplay_name
p1816
VJohn Millikin
p1817
ssVis_accepted
p1818
I01
sVanswer_id
p1819
I1307210
sa(dp1820
Vbody
p1821
V<p>Look at the following:</p>\u000a\u000a<pre><code>map(multilambda x:\u000a      y=x+1\u000a      return y\u000a   , [1,2,3])\u000a</code></pre>\u000a\u000a<p>Is this a lambda returning <code>(y, [1,2,3])</code> (thus map only gets one parameter, resulting in an error)? Or does it return <code>y</code>? Or is it a syntax error, because the comma on the new line is misplaced? How would Python know what you want?</p>\u000a\u000a<p>Within the parens, indentation doesn't matter to python, so you can't unambiguously work with multilines.</p>\u000a\u000a<p>This is just a simple one, there's probably more examples.</p>\u000a
p1822
sVquestion_id
p1823
I1233448
sVlast_activity_date
p1824
I1249481430
sVcreation_date
p1825
I1249481430
sVscore
p1826
I87
sVowner
p1827
(dp1828
Vuser_id
p1829
I115866
sVprofile_image
p1830
Vhttps://i.stack.imgur.com/MSY0L.jpg?s=128&g=1
p1831
sVuser_type
p1832
Vmoderator
p1833
sVreputation
p1834
I27833
sVlink
p1835
Vhttp://stackoverflow.com/users/115866/balpha
p1836
sVaccept_rate
p1837
I89
sVdisplay_name
p1838
Vbalpha
p1839
ssVis_accepted
p1840
I01
sVanswer_id
p1841
I1233509
sa(dp1842
Vbody
p1843
V<p>The usual way to do this is something like the following.</p>\u000a\u000a<p>test1.py</p>\u000a\u000a<pre><code>def some_func():\u000a    print 'in test 1, unproductive'\u000a\u000aif __name__ == '__main__':\u000a    # test1.py executed as script\u000a    # do something\u000a    some_func()\u000a</code></pre>\u000a\u000a<p>service.py</p>\u000a\u000a<pre><code>import test1\u000a\u000adef service_func():\u000a    print 'service func'\u000a\u000aif __name__ == '__main__':\u000a    # service.py executed as script\u000a    # do something\u000a    service_func()\u000a    test1.some_func()\u000a</code></pre>\u000a
p1844
sVquestion_id
p1845
I1186789
sVlast_activity_date
p1846
I1248678750
sVcreation_date
p1847
I1248678750
sVscore
p1848
I157
sVowner
p1849
(dp1850
Vuser_id
p1851
I2611
sVprofile_image
p1852
Vhttps://www.gravatar.com/avatar/3d9b2df0d1610c9418ba9e9013dbd418?s=128&d=identicon&r=PG
p1853
sVuser_type
p1854
Vregistered
p1855
sVreputation
p1856
I64105
sVlink
p1857
Vhttp://stackoverflow.com/users/2611/ars
p1858
sVdisplay_name
p1859
Vars
p1860
ssVis_accepted
p1861
I01
sVanswer_id
p1862
I1186847
sa(dp1863
Vbody
p1864
V<p>Break the file into 128-byte chunks and feed them to MD5 consecutively using <code>update()</code>.</p>\u000a\u000a<p>This takes advantage of the fact that MD5 has 128-byte digest blocks. Basically, when MD5 <code>digest()</code>s the file, this is exactly what it is doing.</p>\u000a\u000a<p>If you make sure you free the memory on each iteration (i.e. not read the entire file to memory), this shall take no more than 128 bytes of memory.</p>\u000a\u000a<p>One example is to read the chunks like so:</p>\u000a\u000a<pre><code>f = open(fileName)\u000awhile not endOfFile:\u000a    f.read(128)\u000a</code></pre>\u000a
p1865
sVquestion_id
p1866
I1131220
sVlast_activity_date
p1867
I1247668855
sVcreation_date
p1868
I1247662507
sVscore
p1869
I134
sVowner
p1870
(dp1871
Vuser_id
p1872
I24545
sVprofile_image
p1873
Vhttps://www.gravatar.com/avatar/0a59649d5bff1787b18d3a73da34a27a?s=128&d=identicon&r=PG
p1874
sVuser_type
p1875
Vregistered
p1876
sVreputation
p1877
I92486
sVlink
p1878
Vhttp://stackoverflow.com/users/24545/yuval-adam
p1879
sVaccept_rate
p1880
I99
sVdisplay_name
p1881
VYuval Adam
p1882
ssVis_accepted
p1883
I01
sVlast_edit_date
p1884
I1247668855
sVanswer_id
p1885
I1131238
sa(dp1886
Vbody
p1887
V<p>I'm biased (being a Python expert but pretty rusty in Java) but I think the Python runtime of GAE is currently more advanced and better developed than the Java runtime -- the former has had one extra year to develop and mature, after all.</p>\u000a\u000a<p>How things will proceed going forward is of course hard to predict -- demand is probably stronger on the Java side (especially since it's not just about Java, but other languages perched on top of the JVM too, so it's THE way to run e.g. PHP or Ruby code on App Engine); the Python App Engine team however does have the advantage of having on board Guido van Rossum, the inventor of Python and an amazingly strong engineer.</p>\u000a\u000a<p>In terms of flexibility, the Java engine, as already mentioned, does offer the possibility of running JVM bytecode made by different languages, not just Java -- if you're in a multi-language shop that's a pretty large positive. Vice versa, if you loathe Javascript but must execute some code in the user's browser, Java's GWT (generating the Javascript for you from your Java-level coding) is far richer and more advanced than Python-side alternatives (in practice, if you choose Python, you'll be writing some JS yourself for this purpose, while if you choose Java GWT is a usable alternative if you loathe writing JS).</p>\u000a\u000a<p>In terms of libraries it's pretty much a wash -- the JVM is restricted enough (no threads, no custom class loaders, no JNI, no relational DB) to hamper the simple reuse of existing Java libraries as much, or more, than existing Python libraries are similarly hampered by the similar restrictions on the Python runtime.</p>\u000a\u000a<p>In terms of performance, I think it's a wash, though you should benchmark on tasks of your own -- don't rely on the performance of highly optimized JIT-based JVM implementations discounting their large startup times and memory footprints, because the app engine environment is very different (startup costs will be paid often, as instances of your app are started, stopped, moved to different hosts, etc, all trasparently to you -- such events are typically much cheaper with Python runtime environments than with JVMs).</p>\u000a\u000a<p>The XPath/XSLT situation (to be euphemistic...) is not exactly perfect on either side, sigh, though I think it may be a tad less bad in the JVM (where, apparently, substantial subsets of Saxon can be made to run, with some care). I think it's worth opening issues on the <a href="http://code.google.com/p/googleappengine/issues/list" rel="noreferrer">Appengine Issues</a> page with XPath and XSLT in their titles -- right now there are only issues asking for specific libraries, and that's myopic: I don't really care HOW a good XPath/XSLT is implemented, for Python and/or for Java, as long as I get to use it. (Specific libraries may ease migration of existing code, but that's less important than being able to perform such tasks as "rapidly apply XSLT transformation" in SOME way!-). I know I'd star such an issue if well phrased (especially in a language-independent way).</p>\u000a\u000a<p>Last but not least: remember that you can have different version of your app (using the same datastore) some of which are implemented with the Python runtime, some with the Java runtime, and you can access versions that differ from the "default/active" one with explicit URLs. So you could have both Python <em>and</em> Java code (in different versions of your app) use and modify the same data store, granting you even more flexibility (though only one will have the "nice" URL such as foobar.appspot.com -- which is probably important only for access by interactive users on browsers, I imagine;-).</p>\u000a
p1888
sVquestion_id
p1889
I1085898
sVlast_activity_date
p1890
I1246897030
sVcreation_date
p1891
I1246897030
sVscore
p1892
I115
sVowner
p1893
(dp1894
Vuser_id
p1895
I95810
sVprofile_image
p1896
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1897
sVuser_type
p1898
Vregistered
p1899
sVreputation
p1900
I516079
sVlink
p1901
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1902
sVaccept_rate
p1903
I80
sVdisplay_name
p1904
VAlex Martelli
p1905
ssVis_accepted
p1906
I01
sVanswer_id
p1907
I1087878
sa(dp1908
Vbody
p1909
V<p>Several ways.</p>\u000a\u000a<p>From the shell</p>\u000a\u000a<pre><code>python someFile.py\u000a</code></pre>\u000a\u000a<p>From inside IDLE, hit <strong>F5</strong>.</p>\u000a\u000a<p>If you're typing interactively, try this.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; variables= {}\u000a&gt;&gt;&gt; execfile( "someFile.py", variables )\u000a&gt;&gt;&gt; print variables # globals from the someFile module\u000a</code></pre>\u000a
p1910
sVquestion_id
p1911
I1027714
sVlast_activity_date
p1912
I1245683887
sVcreation_date
p1913
I1245683318
sVscore
p1914
I156
sVowner
p1915
(dp1916
Vuser_id
p1917
I10661
sVprofile_image
p1918
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1919
sVuser_type
p1920
Vregistered
p1921
sVreputation
p1922
I277525
sVlink
p1923
Vhttp://stackoverflow.com/users/10661/s-lott
p1924
sVaccept_rate
p1925
I92
sVdisplay_name
p1926
VS.Lott
p1927
ssVis_accepted
p1928
I01
sVlast_edit_date
p1929
I1245683887
sVanswer_id
p1930
I1027739
sa(dp1931
Vbody
p1932
V<p>Python (the language) doesn't need a GIL (which is why it can perfectly be implemented on JVM [Jython] and .NET [IronPython], and those implementations multithread freely). CPython (the popular implementation) has always used a GIL for ease of coding (esp. the coding of the garbage collection mechanisms) and of integration of non-thread-safe C-coded libraries (there used to be a ton of those around;-).</p>\u000a\u000a<p>The <a href="http://code.google.com/p/unladen-swallow/" rel="noreferrer">Unladen Swallow</a> project, among other ambitious goals, does <a href="http://code.google.com/p/unladen-swallow/wiki/ProjectPlan" rel="noreferrer">plan</a> a GIL-free virtual machine for Python -- to quote that site, "In addition, we intend to remove the GIL and fix the state of multithreading in Python. We believe this is possible through the implementation of a more sophisticated GC system, something like IBM's Recycler (Bacon et al, 2001)."</p>\u000a
p1933
sVquestion_id
p1934
I991904
sVlast_activity_date
p1935
I1244942455
sVcreation_date
p1936
I1244942455
sVscore
p1937
I213
sVowner
p1938
(dp1939
Vuser_id
p1940
I95810
sVprofile_image
p1941
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1942
sVuser_type
p1943
Vregistered
p1944
sVreputation
p1945
I516079
sVlink
p1946
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1947
sVaccept_rate
p1948
I80
sVdisplay_name
p1949
VAlex Martelli
p1950
ssVis_accepted
p1951
I01
sVanswer_id
p1952
I991917
sa(dp1953
Vbody
p1954
V<blockquote>\u000a<pre><code>good = [x for x in mylist if x in goodvals]\u000abad  = [x for x in mylist if x not in goodvals]\u000a</code></pre>\u000a  \u000a  <p>is there a more elegant way to do this?</p>\u000a</blockquote>\u000a\u000a<p>That code is perfectly readable, and extremely clear!</p>\u000a\u000a<pre><code># files looks like: [ ('file1.jpg', 33L, '.jpg'), ('file2.avi', 999L, '.avi'), ... ]\u000aIMAGE_TYPES = ('.jpg','.jpeg','.gif','.bmp','.png')\u000aimages = [f for f in files if f[2].lower() in IMAGE_TYPES]\u000aanims  = [f for f in files if f[2].lower() not in IMAGE_TYPES]\u000a</code></pre>\u000a\u000a<p>Again, this is <em>fine!</em></p>\u000a\u000a<p>There might be slight performance improvements using sets, but it's a trivial difference, and I find the list comprehension far easier to read, and you don't have to worry about the order being messed up, duplicates being removed as so on.</p>\u000a\u000a<p>In fact, I may go another step "backward", and just use a simple for loop:</p>\u000a\u000a<pre><code>images, anims = [], []\u000a\u000afor f in files:\u000a    if f.lower() in IMAGE_TYPES:\u000a        images.append(f)\u000a    else:\u000a        anims.append(f)\u000a</code></pre>\u000a\u000a<p>The a list-comprehension or using <code>set()</code> is fine until you need to add some other check or another bit of logic - say you want to remove all 0-byte jpeg's, you just add something like..</p>\u000a\u000a<pre><code>if f[1] == 0:\u000a    continue\u000a</code></pre>\u000a
p1955
sVquestion_id
p1956
I949098
sVlast_activity_date
p1957
I1244122103
sVcreation_date
p1958
I1244122103
sVscore
p1959
I69
sVowner
p1960
(dp1961
Vuser_id
p1962
I745
sVprofile_image
p1963
Vhttps://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=128&d=identicon&r=PG
p1964
sVuser_type
p1965
Vregistered
p1966
sVreputation
p1967
I100294
sVlink
p1968
Vhttp://stackoverflow.com/users/745/dbr
p1969
sVaccept_rate
p1970
I90
sVdisplay_name
p1971
Vdbr
p1972
ssVis_accepted
p1973
I01
sVanswer_id
p1974
I950591
sa(dp1975
Vbody
p1976
V<p>It has at least been suggested, but also <a href="http://www.python.org/dev/peps/pep-3136/" rel="noreferrer">rejected</a>. I don't think there is another way, short of repeating the test or re-organizing the code. It is sometimes a bit annoying.</p>\u000a\u000a<p>In the <a href="http://mail.python.org/pipermail/python-3000/2007-July/008663.html" rel="noreferrer">rejection message</a>, Mr van Rossum mentions using <code>return</code>, which is really sensible and something I need to remember personally. :)</p>\u000a
p1977
sVquestion_id
p1978
I653509
sVlast_activity_date
p1979
I1237284562
sVcreation_date
p1980
I1237282029
sVscore
p1981
I89
sVowner
p1982
(dp1983
Vuser_id
p1984
I28169
sVprofile_image
p1985
Vhttps://www.gravatar.com/avatar/ec9385dc533f1a6a93769077f852503e?s=128&d=identicon&r=PG
p1986
sVuser_type
p1987
Vregistered
p1988
sVreputation
p1989
I275578
sVlink
p1990
Vhttp://stackoverflow.com/users/28169/unwind
p1991
sVaccept_rate
p1992
I88
sVdisplay_name
p1993
Vunwind
p1994
ssVis_accepted
p1995
I01
sVlast_edit_date
p1996
I1237284562
sVanswer_id
p1997
I653517
sa(dp1998
Vbody
p1999
V<p>You can use <em>initial</em> which is explained <a href="http://www.djangobook.com/en/1.0/chapter07/" rel="noreferrer">here</a></p>\u000a\u000a<p>You have two options either populate the value when calling form constructor:</p>\u000a\u000a<pre><code>form = JournalForm(initial={'tank': 123})\u000a</code></pre>\u000a\u000a<p>or set the value in the form definition:</p>\u000a\u000a<pre><code>tank = forms.IntegerField(widget=forms.HiddenInput(), initial=123) \u000a</code></pre>\u000a
p2000
sVquestion_id
p2001
I604266
sVlast_activity_date
p2002
I1236133749
sVcreation_date
p2003
I1236032986
sVscore
p2004
I273
sVowner
p2005
(dp2006
Vuser_id
p2007
I26592
sVprofile_image
p2008
Vhttps://i.stack.imgur.com/WEIsF.png?s=128&g=1
p2009
sVuser_type
p2010
Vregistered
p2011
sVreputation
p2012
I9113
sVlink
p2013
Vhttp://stackoverflow.com/users/26592/umnik700
p2014
sVaccept_rate
p2015
I95
sVdisplay_name
p2016
Vumnik700
p2017
ssVis_accepted
p2018
I01
sVlast_edit_date
p2019
I1236133749
sVanswer_id
p2020
I604325
sa(dp2021
Vbody
p2022
V<p>The first thing that comes to mind for me is:</p>\u000a\u000a<pre><code>verts = [None]*1000\u000a</code></pre>\u000a\u000a<p>But do you really need to preinitialize it?</p>\u000a
p2023
sVquestion_id
p2024
I521674
sVlast_activity_date
p2025
I1233946920
sVcreation_date
p2026
I1233946920
sVscore
p2027
I214
sVowner
p2028
(dp2029
Vuser_id
p2030
I13498
sVprofile_image
p2031
Vhttps://www.gravatar.com/avatar/143487689572bcc7084c2b6aa1f48c46?s=128&d=identicon&r=PG
p2032
sVuser_type
p2033
Vregistered
p2034
sVreputation
p2035
I15323
sVlink
p2036
Vhttp://stackoverflow.com/users/13498/steve-losh
p2037
sVdisplay_name
p2038
VSteve Losh
p2039
ssVis_accepted
p2040
I01
sVanswer_id
p2041
I521688
sa(dp2042
Vbody
p2043
V<p>You could use a list comprehension or a generator expression instead:</p>\u000a\u000a<pre><code>', '.join([str(x) for x in list])  # list comprehension\u000a', '.join(str(x) for x in list)    # generator expression\u000a</code></pre>\u000a
p2044
sVquestion_id
p2045
I497765
sVlast_activity_date
p2046
I1233360658
sVcreation_date
p2047
I1233360658
sVscore
p2048
I238
sVowner
p2049
(dp2050
Vuser_id
p2051
I9530
sVprofile_image
p2052
Vhttps://www.gravatar.com/avatar/924800e76876546c5c575c0175e1f434?s=128&d=identicon&r=PG
p2053
sVuser_type
p2054
Vregistered
p2055
sVreputation
p2056
I259251
sVlink
p2057
Vhttp://stackoverflow.com/users/9530/adam-rosenfield
p2058
sVaccept_rate
p2059
I78
sVdisplay_name
p2060
VAdam Rosenfield
p2061
ssVis_accepted
p2062
I01
sVanswer_id
p2063
I497773
sasVquota_max
p2064
I300
sVquota_remaining
p2065
I233
s.