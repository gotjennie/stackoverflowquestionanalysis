(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>As of the 0.17.0 release, the <a href="http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.sort.html" rel="nofollow noreferrer"><code>sort</code></a> method was deprecated in favor of <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html" rel="nofollow noreferrer"><code>sort_values</code></a>.  <code>sort</code> was completely removed in the 0.20.0 release. The arguments (and results) remain the same:</p>\u000a\u000a<pre><code>df.sort_values(['a', 'b'], ascending=[True, False])\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>You can use the ascending argument of <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort.html" rel="nofollow noreferrer"><code>sort</code></a>:</p>\u000a\u000a<pre><code>df.sort(['a', 'b'], ascending=[True, False])\u000a</code></pre>\u000a\u000a<p>For example:</p>\u000a\u000a<pre><code>In [11]: df1 = pd.DataFrame(np.random.randint(1, 5, (10,2)), columns=['a','b'])\u000a\u000aIn [12]: df1.sort(['a', 'b'], ascending=[True, False])\u000aOut[12]:\u000a   a  b\u000a2  1  4\u000a7  1  3\u000a1  1  2\u000a3  1  2\u000a4  3  2\u000a6  4  4\u000a0  4  3\u000a9  4  3\u000a5  4  1\u000a8  4  1\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>As commented by @renadeen</p>\u000a\u000a<blockquote>\u000a  <p>Sort isn't in place by default! So you should assign result of the sort method to a variable or add inplace=True to method call.</p>\u000a</blockquote>\u000a\u000a<p>that is, if you want to reuse df1 as a sorted DataFrame:</p>\u000a\u000a<pre><code>df1 = df1.sort(['a', 'b'], ascending=[True, False])\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>df1.sort(['a', 'b'], ascending=[True, False], inplace=True)\u000a</code></pre>\u000a
p6
sVquestion_id
p7
I17141558
sVlast_activity_date
p8
I1495134608
sVcreation_date
p9
I1371451387
sVscore
p10
I97
sVowner
p11
(dp12
Vuser_id
p13
I1240268
sVprofile_image
p14
Vhttps://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I108899
sVlink
p19
Vhttp://stackoverflow.com/users/1240268/andy-hayden
p20
sVaccept_rate
p21
I90
sVdisplay_name
p22
VAndy Hayden
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1495134608
sVanswer_id
p26
I17141755
sa(dp27
Vbody
p28
V<p>As of 2017, an easy method to achieve this is the following:</p>\u000a\u000a<pre><code>import ctypes, sys\u000a\u000adef is_admin():\u000a    try:\u000a        return ctypes.windll.shell32.IsUserAnAdmin()\u000a    except:\u000a        return False\u000a\u000aif is_admin():\u000a    # Code of your program here\u000aelse:\u000a    # Re-run the program with admin rights\u000a    ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, "", None, 1)\u000a</code></pre>\u000a\u000a<p>Some of the advantages here are:</p>\u000a\u000a<ul>\u000a<li>No external libraries required (nor Python for Windows extension). It only uses <code>ctypes</code> from standard library.</li>\u000a<li>Works on both Python 2 and Python 3.</li>\u000a<li>There is no need to modify the file resources nor creating a manifest file.</li>\u000a<li>If you don't add code below if/else statement, the code won't ever be executed twice.</li>\u000a<li>You can easily modify it to have a special behavior if the user reject the UAC prompt. </li>\u000a<li>You can specify arguments modifying the fourth parameter.</li>\u000a<li>You can specify the display method modifying the sixth parameter.</li>\u000a</ul>\u000a\u000a<p>Documentation for the underlying ShellExecute call is <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb762153%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396" rel="noreferrer">here</a>. </p>\u000a
p29
sVquestion_id
p30
I130763
sVlast_activity_date
p31
I1490502622
sVcreation_date
p32
I1485760256
sVscore
p33
I11
sVowner
p34
(dp35
Vuser_id
p36
I6535374
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/70ea39f04d72014bec677a9ff78dfaed?s=128&d=identicon&r=PG&f=1
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I317
sVlink
p42
Vhttp://stackoverflow.com/users/6535374/mart%c3%adn-de-la-fuente
p43
sVdisplay_name
p44
VMart&#237;n De la Fuente
p45
ssVis_accepted
p46
I01
sVlast_edit_date
p47
I1490502622
sVanswer_id
p48
I41930586
sa(dp49
Vbody
p50
V<h2>Simplest solution</h2>\u000a\u000a<p>Use <code>numpy.dot</code> or <code>a.dot(b)</code>. See the documentation <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html" rel="noreferrer">here</a>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = np.array([[ 5, 1 ,3], \u000a                  [ 1, 1 ,1], \u000a                  [ 1, 2 ,1]])\u000a&gt;&gt;&gt; b = np.array([1, 2, 3])\u000a&gt;&gt;&gt; print a.dot(b)\u000aarray([16, 6, 8])\u000a</code></pre>\u000a\u000a<p>This occurs because numpy arrays are not matrices, and the standard operations <code>*, +, -, /</code> work element-wise on arrays.  Instead, you could try using <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html" rel="noreferrer"><code>numpy.matrix</code></a>, and <code>*</code> will be treated like matrix multiplication. </p>\u000a\u000a<hr>\u000a\u000a<h2>Other Solutions</h2>\u000a\u000a<p>Also know there are other options:</p>\u000a\u000a<ul>\u000a<li><p>As noted below, if using python3.5+ the <code>@</code> operator works as you'd expect:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; print(a @ b)\u000aarray([16, 6, 8])\u000a</code></pre></li>\u000a<li><p>If you want overkill, you can use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.einsum.html#numpy.einsum" rel="noreferrer"><code>numpy.einsum</code></a>.  The documentation will give you a flavor for how it works, but honestly, I didn't fully understand how to use it until reading <a href="http://stackoverflow.com/a/33641428/1634191">this answer</a> and just playing around with it on my own.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; np.einsum('ji,i-&gt;j', a, b)\u000aarray([16, 6, 8])\u000a</code></pre></li>\u000a<li><p>As of mid 2016 (numpy 1.10.1), you can try the experimental <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.matmul.html#numpy-matmul" rel="noreferrer"><code>numpy.matmul</code></a>, which works like <code>numpy.dot</code> with two major exceptions: no scalar multiplication but it works with stacks of matrices. </p>\u000a\u000a<pre><code>&gt;&gt;&gt; np.matmul(a, b)\u000aarray([16, 6, 8])\u000a</code></pre></li>\u000a</ul>\u000a\u000a<hr>\u000a\u000a<h2>Rarer options for edge cases</h2>\u000a\u000a<ul>\u000a<li><p>If you have tensors (arrays of dimension greater than or equal to one), you can use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.tensordot.html#numpy.tensordot" rel="noreferrer"><code>numpy.tensordot</code></a> with the optional argument <code>axes=1</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; np.tensordot(a, b, axes=1)\u000aarray([16,  6,  8])\u000a</code></pre></li>\u000a<li><p><strong>Don't use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.vdot.html#numpy.vdot" rel="noreferrer"><code>numpy.vdot</code></a></strong> if you have a matrix of complex numbers, as the matrix will be flattened to a 1D array, then it will try to find the complex conjugate dot product between your flattened matrix and vector (which will fail due to a size mismatch <code>n*m</code> vs <code>n</code>).</p></li>\u000a</ul>\u000a
p51
sVquestion_id
p52
I21562986
sVlast_activity_date
p53
I1487349595
sVcreation_date
p54
I1391546814
sVscore
p55
I76
sVowner
p56
(dp57
Vuser_id
p58
I1634191
sVprofile_image
p59
Vhttps://www.gravatar.com/avatar/cbda192e603ef4e51423f470f5a2cbf3?s=128&d=identicon&r=PG&f=1
p60
sVuser_type
p61
Vregistered
p62
sVreputation
p63
I8514
sVlink
p64
Vhttp://stackoverflow.com/users/1634191/wflynny
p65
sVaccept_rate
p66
I83
sVdisplay_name
p67
Vwflynny
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1487349595
sVanswer_id
p71
I21563036
sa(dp72
Vbody
p73
V<p><strong>Typical mainframe flow...</strong></p>\u000a\u000a<pre><code>Input Disk/Tape/User (runtime) --&gt; Job Control Language (JCL) --&gt; Output Disk/Tape/Screen/Printer\u000a                                   |                     ^\u000a                                   v                     |\u000a                                    --&gt; COBOL Program ---- \u000a</code></pre>\u000a\u000a<p><strong>Typical Linux flow...</strong></p>\u000a\u000a<pre><code>Input Disk/SSD/User (runtime) ----&gt; sh/bash/ksh/zsh/... --------------&gt; Output Disk/SSD/Screen/Printer\u000a                                     |                       ^\u000a                                     v                       |\u000a                                      --&gt; Python script ------\u000a                                     |                       ^\u000a                                     v                       |\u000a                                      --&gt; awk script ---------\u000a                                     |                       ^\u000a                                     v                       |\u000a                                      --&gt; sed script ----------\u000a                                     |                       ^\u000a                                     v                       |\u000a                                      --&gt; C/C++ program ------\u000a                                     |                       ^\u000a                                     v                       |\u000a                                      --- Java program -------\u000a                                     |                       ^\u000a                                     v                       |\u000a                                     :                       :\u000a</code></pre>\u000a\u000a<h2>Shells are the glue of Linux</h2>\u000a\u000a<p>Linux shells like sh/ksh/<strong>bash</strong>/... provide input/output/flow-control designation facilities much like the old mainframe Job Control Language... but on steroids! They are <a href="http://en.wikipedia.org/wiki/Turing_completeness" rel="noreferrer">Turing complete languages</a> in their own right while being optimized to efficiently pass data and control to and from other executing processes written in any language the O/S supports.</p>\u000a\u000a<p>Most Linux applications, regardless what language the bulk of the program is written in, depend on shell scripts and <strong>Bash</strong> has become the most common. Clicking an icon on the desktop usually runs a short <strong>Bash</strong> script. That script, either directly or indirectly, knows where all the files needed are and sets variables and command line parameters, finally calling the program. That's a shell's simplest use.</p>\u000a\u000a<p>Linux as we know it however would hardly be Linux without the thousands of shell scripts that startup the system, respond to events, control execution priorities and compile, configure and run programs. Many of these are quite large and complex.</p>\u000a\u000a<p>Shells provide an infrastructure that lets us use pre-built components that are linked together at run time rather than compile time. Those components are free-standing programs in their own right that can be used alone or in other combinations without recompiling. The syntax for calling them is indistinguishable from that of a <strong>Bash</strong> builtin command, and there are in fact numerous builtin commands for which there is also a stand-alone executable on the system, often having additional options.</p>\u000a\u000a<p>There is no language-wide difference between <strong>Python</strong> and <strong>Bash</strong> in performance. It entirely depends on how each is coded and which external tools are called.</p>\u000a\u000a<p><em>Any</em> of the well known tools like <strong>awk, sed, grep, bc, dc, tr,</strong> etc. will leave doing those operations in either language in the dust. <strong>Bash</strong> then is preferred for anything without a graphical user interface since it is easier and more efficient to call and pass data back from a tool like those with <strong>Bash</strong> than <strong>Python</strong>.</p>\u000a\u000a<h2>Performance</h2>\u000a\u000a<p>It depends on which programs the <strong>Bash</strong> shell script calls and their suitability for the subtask they are given whether the overall throughput and/or responsiveness will be better or worse than the equivalent <strong>Python</strong>. To complicate matters <strong>Python</strong>, like most languages, can also call other executables, though it is more cumbersome and thus not as often used.</p>\u000a\u000a<h2>User Interface</h2>\u000a\u000a<p>One area where <strong>Python</strong> is the clear winner is user interface. That makes it an excellent language for building local or client-server applications as it natively supports GTK graphics and is far more intuitive than <strong>Bash</strong>.</p>\u000a\u000a<p><strong>Bash</strong> only understands text. Other tools must be called for a GUI and data passed back from them. A <strong>Python</strong> script is one option. Faster but less flexible options are the binaries like <strong>YAD, Zenity, and GTKDialog</strong>.</p>\u000a\u000a<p>While shells like <strong>Bash</strong> work well with GUIs like <a href="https://sourceforge.net/projects/yad-dialog/" rel="noreferrer">Yad</a>, <a href="http://pclosmag.com/html/issues/200910/page21.html" rel="noreferrer">GtkDialog (embedded XML-like interface to GTK+ functions)</a>, <a href="http://linuxcommand.org/lc3_adv_dialog.php" rel="noreferrer">dialog</a>, and <a href="http://docstore.mik.ua/orelly/unix3/upt/ch36_26.htm" rel="noreferrer">xmessage</a>, <strong>Python</strong> is usually easier and more capable.</p>\u000a\u000a<h2>Summary</h2>\u000a\u000a<p>Building with shell scripts is like assembling a computer with off-the-shelf components the way desktop PCs are.</p>\u000a\u000a<p>Building with <strong>Python</strong>, <strong>C++</strong> or most any other language is more like building a computer by soldering the chips (libraries) and other electronic parts together the way smartphones are.</p>\u000a
p74
sVquestion_id
p75
I2424921
sVlast_activity_date
p76
I1483711413
sVcreation_date
p77
I1358935505
sVscore
p78
I49
sVowner
p79
(dp80
Vuser_id
p81
I470211
sVprofile_image
p82
Vhttps://www.gravatar.com/avatar/c3dce5eb87db57d57dc548506a79391b?s=128&d=identicon&r=PG
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I1038
sVlink
p87
Vhttp://stackoverflow.com/users/470211/docsalvager
p88
sVdisplay_name
p89
VDocSalvager
p90
ssVis_accepted
p91
I01
sVlast_edit_date
p92
I1483711413
sVanswer_id
p93
I14476979
sa(dp94
Vbody
p95
V<p>For Python 2.x, use the <a href="https://docs.python.org/2/library/stringio.html" rel="noreferrer">StringIO</a> module.  For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from cStringIO import StringIO\u000a&gt;&gt;&gt; f = StringIO('foo')\u000a&gt;&gt;&gt; f.read()\u000a'foo'\u000a</code></pre>\u000a\u000a<p>I use cStringIO (which is faster), but note that it doesn't <a href="http://docs.python.org/lib/module-cStringIO.html" rel="noreferrer">accept Unicode strings that cannot be encoded as plain ASCII strings</a>.  (You can switch to StringIO by changing  "from cStringIO" to "from StringIO".)</p>\u000a\u000a<p>For Python 3.x, use the <a href="https://docs.python.org/3/library/io.html#text-i-o" rel="noreferrer"><code>io</code></a> module.</p>\u000a\u000a<pre><code>f = io.StringIO('foo')\u000a</code></pre>\u000a
p96
sVquestion_id
p97
I141449
sVlast_activity_date
p98
I1477934762
sVcreation_date
p99
I1222457644
sVscore
p100
I72
sVowner
p101
(dp102
Vuser_id
p103
I4766
sVprofile_image
p104
Vhttps://www.gravatar.com/avatar/56dbb3799dd6358c3bee3468d0328046?s=128&d=identicon&r=PG
p105
sVuser_type
p106
Vregistered
p107
sVreputation
p108
I37491
sVlink
p109
Vhttp://stackoverflow.com/users/4766/daryl-spitzer
p110
sVaccept_rate
p111
I96
sVdisplay_name
p112
VDaryl Spitzer
p113
ssVis_accepted
p114
I01
sVlast_edit_date
p115
I1477934762
sVanswer_id
p116
I141451
sa(dp117
Vbody
p118
V<p>Parameters starting with <code>-</code> or <code>--</code> are usually considered optional. All other parameters are positional parameters and as such required by design (like positional function arguments). It is possible to require optional arguments, but this is a bit against their design. Since they are still part of the non-positional arguments, they will still be listed under the confusing header \u201coptional arguments\u201d even if they are required. The missing square brackets in the usage part however show that they are indeed required.</p>\u000a\u000a<p>See also the <a href="https://docs.python.org/3/library/argparse.html#required">documentation</a>:</p>\u000a\u000a<blockquote>\u000a  <p>In general, the argparse module assumes that flags like -f and --bar indicate optional arguments, which can always be omitted at the command line.</p>\u000a  \u000a  <p><strong>Note:</strong> Required options are generally considered bad form because users expect options to be optional, and thus they should be avoided when possible.</p>\u000a</blockquote>\u000a\u000a<p>That being said, the headers <em>\u201cpositional arguments\u201d</em> and <em>\u201coptional arguments\u201d</em> in the help are generated by two argument groups in which the arguments are automatically separated into. Now, you could \u201chack into it\u201d and change the name of the optional ones, but a far more elegant solution would be to create another group for \u201crequired named arguments\u201d (or whatever you want to call them):</p>\u000a\u000a<pre><code>parser = argparse.ArgumentParser(description='Foo')\u000aparser.add_argument('-o', '--output', help='Output file name', default='stdout')\u000arequiredNamed = parser.add_argument_group('required named arguments')\u000arequiredNamed.add_argument('-i', '--input', help='Input file name', required=True)\u000aparser.parse_args(['-h'])\u000a</code></pre>\u000a\u000a\u000a\u000a<pre><code>usage: [-h] [-o OUTPUT] -i INPUT\u000a\u000aFoo\u000a\u000aoptional arguments:\u000a  -h, --help            show this help message and exit\u000a  -o OUTPUT, --output OUTPUT\u000a                        Output file name\u000a\u000arequired named arguments:\u000a  -i INPUT, --input INPUT\u000a                        Input file name\u000a</code></pre>\u000a
p119
sVquestion_id
p120
I24180527
sVlast_activity_date
p121
I1475650428
sVcreation_date
p122
I1402565940
sVscore
p123
I87
sVowner
p124
(dp125
Vuser_id
p126
I216074
sVprofile_image
p127
Vhttps://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG
p128
sVuser_type
p129
Vregistered
p130
sVreputation
p131
I145981
sVlink
p132
Vhttp://stackoverflow.com/users/216074/poke
p133
sVaccept_rate
p134
I91
sVdisplay_name
p135
Vpoke
p136
ssVis_accepted
p137
I01
sVlast_edit_date
p138
I1475650428
sVanswer_id
p139
I24181138
sa(dp140
Vbody
p141
V<p>Let's say you have this code to build up a string from three strings:</p>\u000a\u000a<pre><code>x = 'foo'\u000ax += 'bar'  # 'foobar'\u000ax += 'baz'  # 'foobarbaz'\u000a</code></pre>\u000a\u000a<p>In this case, Python first needs to allocate and create <code>'foobar'</code> before it can allocate and create <code>'foobarbaz'</code>.</p>\u000a\u000a<p>So for each <code>+=</code> that gets called, the entire contents of the string and whatever is getting added to it need to be copied into an entirely new memory buffer.  In other words, if you have <code>N</code> strings to be joined, you need to allocate approximately <code>N</code> temporary strings and the first substring gets copied ~N times. The last substring only gets copied once, but on average, each substring gets copied <code>~N/2</code> times.</p>\u000a\u000a<p>With <code>.join</code>, Python can play a number of tricks since the intermediate strings do not need to be created. <a href="http://en.wikipedia.org/wiki/CPython">CPython</a> figures out how much memory it needs up front and then allocates a correctly-sized buffer. Finally, it then copies each piece into the new buffer which means that each piece is only copied once.</p>\u000a\u000a<hr>\u000a\u000a<p>There are other viable approaches which could lead to better performance for <code>+=</code> in some cases. E.g. if the internal string representation is actually a <a href="https://en.wikipedia.org/wiki/Rope_(data_structure)"><code>rope</code></a> or if the runtime is actually smart enough to somehow figure out that the temporary strings are of no use to the program and optimize them away.</p>\u000a\u000a<p>However, CPython certainly does <em>not</em> do these optimizations reliably (though it may for a <a href="http://stackoverflow.com/questions/39312099/why-is-join-faster-than-in-python/39312172?noredirect=1#comment65960978_39314264">few corner cases</a>) and since it is the most common implementation in use, many best-practices are based on what works well for CPython. Having a standardized set of norms also makes it easier for other implementations to focus their optimization efforts as well.</p>\u000a
p142
sVquestion_id
p143
I39312099
sVlast_activity_date
p144
I1473520783
sVcreation_date
p145
I1472944971
sVscore
p146
I74
sVowner
p147
(dp148
Vuser_id
p149
I748858
sVprofile_image
p150
Vhttps://i.stack.imgur.com/17gYz.png?s=128&g=1
p151
sVuser_type
p152
Vregistered
p153
sVreputation
p154
I170190
sVlink
p155
Vhttp://stackoverflow.com/users/748858/mgilson
p156
sVaccept_rate
p157
I85
sVdisplay_name
p158
Vmgilson
p159
ssVis_accepted
p160
I01
sVlast_edit_date
p161
I1473520783
sVanswer_id
p162
I39312172
sa(dp163
Vbody
p164
V<p>Instead of asking what is standard practice, since that's often unclear and subjective, you might try looking to the module itself for guidance. In general, using the <code>with</code> keyword as another user suggested is a great idea, but in this specific circumstance it may not give you quite the functionality you expect.</p>\u000a\u000a<p>As of version 1.2.5 of the module, <code>MySQLdb.Connection</code> implements the <a href="http://docs.python.org/2/library/stdtypes.html#context-manager-types" rel="noreferrer">context manager protocol</a> with the following code (<a href="https://github.com/farcepest/MySQLdb1/blob/2204283605e8c450223965eda8d8f357d5fe4c90/MySQLdb/connections.py" rel="noreferrer">github</a>):</p>\u000a\u000a<pre><code>def __enter__(self):\u000a    if self.get_autocommit():\u000a        self.query("BEGIN")\u000a    return self.cursor()\u000a\u000adef __exit__(self, exc, value, tb):\u000a    if exc:\u000a        self.rollback()\u000a    else:\u000a        self.commit()\u000a</code></pre>\u000a\u000a<p>There are several existing Q&amp;A about <code>with</code> already, or you can read <a href="http://effbot.org/zone/python-with-statement.htm" rel="noreferrer">Understanding Python's "with" statement</a>, but essentially what happens is that <code>__enter__</code> executes at the start of the <code>with</code> block, and <code>__exit__</code> executes upon leaving the <code>with</code> block. You can use the optional syntax <code>with EXPR as VAR</code> to bind the object returned by  <code>__enter__</code> to a name if you intend to reference that object later. So, given the above implementation, here's a simple way to query your database:</p>\u000a\u000a<pre><code>connection = MySQLdb.connect(...)\u000awith connection as cursor:            # connection.__enter__ executes at this line\u000a    cursor.execute('select 1;')\u000a    result = cursor.fetchall()        # connection.__exit__ executes after this line\u000aprint result                          # prints "((1L,),)"\u000a</code></pre>\u000a\u000a<p>The question now is, what are the states of the connection and the cursor after exiting the <code>with</code> block? The <code>__exit__</code> method shown above calls only <code>self.rollback()</code> or <code>self.commit()</code>, and neither of those methods go on to call the <code>close()</code> method. The cursor itself has no <code>__exit__</code> method defined \u2013 and wouldn't matter if it did, because <code>with</code> is only managing the connection. Therefore, both the connection and the cursor remain open after exiting the <code>with</code> block. This is easily confirmed by adding the following code to the above example:</p>\u000a\u000a<pre><code>try:\u000a    cursor.execute('select 1;')\u000a    print 'cursor is open;',\u000aexcept MySQLdb.ProgrammingError:\u000a    print 'cursor is closed;',\u000aif connection.open:\u000a    print 'connection is open'\u000aelse:\u000a    print 'connection is closed'\u000a</code></pre>\u000a\u000a<p>You should see the output "cursor is open; connection is open" printed to stdout.</p>\u000a\u000a<blockquote>\u000a  <p>I believe you need to close the cursor before committing the connection.</p>\u000a</blockquote>\u000a\u000a<p>Why? The <a href="https://dev.mysql.com/doc/refman/5.6/en/c-api-function-overview.html" rel="noreferrer">MySQL C API</a>, which is the basis for <code>MySQLdb</code>, does not implement any cursor object, as implied in the module documentation: <a href="http://mysql-python.sourceforge.net/MySQLdb.html#connection-objects" rel="noreferrer">"MySQL does not support cursors; however, cursors are easily emulated."</a> Indeed, the <code>MySQLdb.cursors.BaseCursor</code> class inherits directly from <code>object</code> and imposes no such restriction on cursors with regard to commit/rollback. An Oracle developer <a href="http://forums.mysql.com/read.php?50,578823,578941#msg-578941" rel="noreferrer">had this to say</a>:</p>\u000a\u000a<blockquote>\u000a  <p>cnx.commit() before cur.close() sounds most logical to me.  Maybe you\u000a  can go by the rule: "Close the cursor if you do not need it  anymore."\u000a  Thus commit() before closing the cursor. In the end, for\u000a  Connector/Python,  it does not make much difference, but or other\u000a  databases it might.</p>\u000a</blockquote>\u000a\u000a<p>I expect that's as close as you're going to get to "standard practice" on this subject.</p>\u000a\u000a<blockquote>\u000a  <p>Is there any significant advantage to finding sets of transactions that don't require intermediate commits so that you don't have to get new cursors for each transaction?</p>\u000a</blockquote>\u000a\u000a<p>I very much doubt it, and in trying to do so, you may introduce additional human error. Better to decide on a convention and stick with it.</p>\u000a\u000a<blockquote>\u000a  <p>Is there a lot of overhead for getting new cursors, or is it just not a big deal?</p>\u000a</blockquote>\u000a\u000a<p>The overhead is negligible, and doesn't touch the database server at all; it's entirely within the implementation of MySQLdb. You can <a href="https://github.com/farcepest/MySQLdb1/blob/master/MySQLdb/cursors.py" rel="noreferrer">look at <code>BaseCursor.__init__</code> on github</a> if you're really curious to know what's happening when you create a new cursor.</p>\u000a\u000a<p>Going back to earlier when we were discussing <code>with</code>, perhaps now you can understand why the <code>MySQLdb.Connection</code> class <code>__enter__</code> and <code>__exit__</code> methods give you a brand new cursor object in every <code>with</code> block and don't bother keeping track of it or closing it at the end of the block. It's fairly lightweight and exists purely for your convenience.</p>\u000a\u000a<p>If it's really that important to you to micromanage the cursor object, you can use <a href="http://docs.python.org/2/library/contextlib.html#contextlib.closing" rel="noreferrer">contextlib.closing</a> to make up for the fact that the cursor object has no defined <code>__exit__</code> method. For that matter, you can also use it to force the connection object to close itself upon exiting a <code>with</code> block. This should output "my_curs is closed; my_conn is closed":</p>\u000a\u000a<pre><code>from contextlib import closing\u000aimport MySQLdb\u000a\u000awith closing(MySQLdb.connect(...)) as my_conn:\u000a    with closing(my_conn.cursor()) as my_curs:\u000a        my_curs.execute('select 1;')\u000a        result = my_curs.fetchall()\u000atry:\u000a    my_curs.execute('select 1;')\u000a    print 'my_curs is open;',\u000aexcept MySQLdb.ProgrammingError:\u000a    print 'my_curs is closed;',\u000aif my_conn.open:\u000a    print 'my_conn is open'\u000aelse:\u000a    print 'my_conn is closed'\u000a</code></pre>\u000a\u000a<p>Note that <code>with closing(arg_obj)</code> will not call the argument object's <code>__enter__</code> and <code>__exit__</code> methods; it will <em>only</em> call the argument object's <code>close</code> method at the end of the <code>with</code> block. (To see this in action, simply define a class <code>Foo</code> with <code>__enter__</code>, <code>__exit__</code>, and <code>close</code> methods containing simple <code>print</code> statements, and compare what happens when you do <code>with Foo(): pass</code> to what happens when you do <code>with closing(Foo()): pass</code>.) This has two significant implications:</p>\u000a\u000a<p>First, if autocommit mode is enabled, MySQLdb will <code>BEGIN</code> an explicit transaction on the server when you use <code>with connection</code> and commit or rollback the transaction at the end of the block. These are default behaviors of MySQLdb, intended to protect you from MySQL's default behavior of immediately committing any and all DML statements. MySQLdb assumes that when you use a context manager, you want a transaction, and uses the explicit <code>BEGIN</code> to bypass the autocommit setting on the server. If you're used to using <code>with connection</code>, you might think autocommit is disabled when actually it was only being bypassed. You might get an unpleasant surprise if you add <code>closing</code> to your code and lose transactional integrity; you won't be able to rollback changes, you may start seeing concurrency bugs and it may not be immediately obvious why.</p>\u000a\u000a<p>Second, <code>with closing(MySQLdb.connect(user, pass)) as VAR</code> binds the <em>connection object</em> to <code>VAR</code>, in contrast to <code>with MySQLdb.connect(user, pass) as VAR</code>, which binds <em>a new cursor object</em> to <code>VAR</code>. In the latter case you would have no direct access to the connection object! Instead, you would have to use the cursor's <code>connection</code> attribute, which provides proxy access to the original connection. When the cursor is closed, its <code>connection</code> attribute is set to <code>None</code>. This results in an abandoned connection that will stick around until one of the following happens:</p>\u000a\u000a<ul>\u000a<li>All references to the cursor are removed</li>\u000a<li>The cursor goes out of scope</li>\u000a<li>The connection times out</li>\u000a<li>The connection is closed manually via server administration tools</li>\u000a</ul>\u000a\u000a<p>You can test this by monitoring open connections (in Workbench or by <a href="http://dev.mysql.com/doc/refman/5.6/en/show-processlist.html" rel="noreferrer">using <code>SHOW PROCESSLIST</code></a>) while executing the following lines one by one:</p>\u000a\u000a<pre><code>with MySQLdb.connect(...) as my_curs:\u000a    pass\u000amy_curs.close()\u000amy_curs.connection          # None\u000amy_curs.connection.close()  # throws AttributeError, but connection still open\u000adel my_curs                 # connection will close here\u000a</code></pre>\u000a
p165
sVquestion_id
p166
I5669878
sVlast_activity_date
p167
I1466039074
sVcreation_date
p168
I1395689199
sVscore
p169
I44
sVowner
p170
(dp171
Vuser_id
p172
I2359271
sVprofile_image
p173
Vhttps://i.stack.imgur.com/y1Mud.gif?s=128&g=1
p174
sVuser_type
p175
Vregistered
p176
sVreputation
p177
I4255
sVlink
p178
Vhttp://stackoverflow.com/users/2359271/air
p179
sVaccept_rate
p180
I81
sVdisplay_name
p181
VAir
p182
ssVis_accepted
p183
I01
sVlast_edit_date
p184
I1466039074
sVanswer_id
p185
I22618781
sa(dp186
Vbody
p187
V<p>see docs: <a href="http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion">http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion</a></p>\u000a\u000a<p>using idx = 0 will insert at the beginning</p>\u000a\u000a<pre><code>df.insert(idx, col_name, value)\u000a</code></pre>\u000a
p188
sVquestion_id
p189
I18674064
sVlast_activity_date
p190
I1465287014
sVcreation_date
p191
I1378567975
sVscore
p192
I101
sVowner
p193
(dp194
Vuser_id
p195
I644898
sVprofile_image
p196
Vhttps://www.gravatar.com/avatar/b2833d485728ee2f603802242ebc9826?s=128&d=identicon&r=PG
p197
sVuser_type
p198
Vregistered
p199
sVreputation
p200
I55285
sVlink
p201
Vhttp://stackoverflow.com/users/644898/jeff
p202
sVdisplay_name
p203
VJeff
p204
ssVis_accepted
p205
I01
sVlast_edit_date
p206
I1465287014
sVanswer_id
p207
I18674915
sa(dp208
Vbody
p209
V<p>Another way to use .ui in your code is:</p>\u000a\u000a<pre><code>from PyQt4 import QtCore, QtGui, uic\u000aclass MyWidget(QtGui.QWidget)\u000a    ...\u000a    #somewhere in constructor:\u000a    uic.loadUi('MyWidget.ui', self)\u000a</code></pre>\u000a\u000a<p>both approaches are good. Do not forget, that if you use Qt resource files (extremely useful) for icons and so on, you must compile it too:</p>\u000a\u000a<pre><code>pyrcc4.exe -o ui/images_rc.py ui/images/images.qrc\u000a</code></pre>\u000a\u000a<p>Note, when <code>uic</code> compiles interface, it adds 'import images_rc' at the end of .py file, so you must compile resources into the file with this name, or rename it in generated code.</p>\u000a
p210
sVquestion_id
p211
I2398800
sVlast_activity_date
p212
I1459696315
sVcreation_date
p213
I1269356373
sVscore
p214
I47
sVowner
p215
(dp216
Vuser_id
p217
I286291
sVprofile_image
p218
Vhttps://www.gravatar.com/avatar/004875a0fe08621307822433e85326b4?s=128&d=identicon&r=PG
p219
sVuser_type
p220
Vregistered
p221
sVreputation
p222
I2191
sVlink
p223
Vhttp://stackoverflow.com/users/286291/maxim-popravko
p224
sVaccept_rate
p225
I95
sVdisplay_name
p226
VMaxim Popravko
p227
ssVis_accepted
p228
I01
sVlast_edit_date
p229
I1459696315
sVanswer_id
p230
I2500905
sa(dp231
Vbody
p232
V<p>you are looking for the modulo operator:</p>\u000a\u000a<pre><code>a % b\u000a</code></pre>\u000a\u000a<p>for example:</p>\u000a\u000a<pre><code>26 % 7\u000a</code></pre>\u000a\u000a<p>Of course, maybe they wanted you to implement it yourself, which wouldn't be too difficult either.</p>\u000a
p233
sVquestion_id
p234
I5584586
sVlast_activity_date
p235
I1456595476
sVcreation_date
p236
I1302194729
sVscore
p237
I82
sVowner
p238
(dp239
Vuser_id
p240
I358328
sVprofile_image
p241
Vhttps://www.gravatar.com/avatar/d56c3972b607b39dc840acef5fca07d0?s=128&d=identicon&r=PG
p242
sVuser_type
p243
Vregistered
p244
sVreputation
p245
I24497
sVlink
p246
Vhttp://stackoverflow.com/users/358328/uku-loskit
p247
sVaccept_rate
p248
I90
sVdisplay_name
p249
VUku Loskit
p250
ssVis_accepted
p251
I01
sVlast_edit_date
p252
I1456595476
sVanswer_id
p253
I5584604
sa(dp254
Vbody
p255
V<pre><code>tom_index = next(index for (index, d) in enumerate(lst) if d["name"] == "Tom")\u000a# 1\u000a</code></pre>\u000a\u000a<p>As others have pointed out, if you are going to fetch repeatedly from name, you better construct a dictionary with the names as keys so <em>get</em> operations are O(1). Just an idea:</p>\u000a\u000a<pre><code>def build_dict(seq, key):\u000a    return dict((d[key], dict(d, index=index)) for (index, d) in enumerate(seq))\u000a\u000ainfo_by_name = build_dict(lst, key="name")\u000atom_info = info_by_name["Tom"] \u000a# {'index': 1, 'id': '2345', 'name': 'Tom'}\u000a</code></pre>\u000a
p256
sVquestion_id
p257
I4391697
sVlast_activity_date
p258
I1454495414
sVcreation_date
p259
I1291838609
sVscore
p260
I70
sVowner
p261
(dp262
Vuser_id
p263
I188031
sVprofile_image
p264
Vhttps://i.stack.imgur.com/p2YIF.jpg?s=128&g=1
p265
sVuser_type
p266
Vregistered
p267
sVreputation
p268
I44660
sVlink
p269
Vhttp://stackoverflow.com/users/188031/tokland
p270
sVaccept_rate
p271
I88
sVdisplay_name
p272
Vtokland
p273
ssVis_accepted
p274
I01
sVlast_edit_date
p275
I1454495414
sVanswer_id
p276
I4391722
sa(dp277
Vbody
p278
V<p>My favorite way of doing this is to use the <code>DJANGO_SETTINGS_MODULE</code> environment variable and use two (or more) settings files, e.g. <code>production_settings.py</code> and <code>test_settings.py</code>. </p>\u000a\u000a<p>You can then use a bootstrap script or a process manager to load the correct settings (by setting the environment). If you're using a virtualenv, you could even hack this into the virtualenv's activate script.</p>\u000a\u000a<p>You can take advantage of the <code>PYTHONPATH</code> variable to store the settings in a completely different location (e.g. on a production server, storing them in <code>/etc/</code> makes sense) \u2014 this allows for easier deployment as you totally separate configuration from application files (which is a good thing).</p>\u000a\u000a<h2>Setting <code>DJANGO_SETTINGS_MODULE</code> using a Process Manager</h2>\u000a\u000a<p>If you're not fond of writing a bootstrap script that sets the environment (and there are very good reasons to feel that way!), I would recommend using a process manager:</p>\u000a\u000a<ul>\u000a<li><a href="http://supervisord.org/" rel="noreferrer">Supervisor</a> lets you pass environment variables to managed processes using a <a href="http://supervisord.org/configuration.html#program-x-section-settings" rel="noreferrer">program's <code>environment</code> configuration key</a>.</li>\u000a<li><a href="https://honcho.readthedocs.org/en/latest/" rel="noreferrer">Honcho</a> (a pure-Python equivalent of Ruby's Foreman) lets you define environment variables in <a href="https://honcho.readthedocs.org/en/latest/using_procfiles.html#environment-files" rel="noreferrer">an "environment" (<code>.env</code>) file</a>.</li>\u000a</ul>\u000a\u000a<h2>Hacking <code>bin/activate</code> to set <code>DJANGO_SETTINGS_MODULE</code></h2>\u000a\u000a<p>If using a virtualenv, you append this to your <code>bin/activate</code> script:</p>\u000a\u000a<pre><code>DJANGO_SETTINGS_MODULE="production_settings"\u000aexport DJANGO_SETTINGS_MODULE\u000a</code></pre>\u000a\u000a<p>And on your test server:</p>\u000a\u000a<pre><code>DJANGO_SETTINGS_MODULE="test_settings"\u000aexport DJANGO_SETTINGS_MODULE\u000a</code></pre>\u000a
p279
sVquestion_id
p280
I10664244
sVlast_activity_date
p281
I1453923847
sVcreation_date
p282
I1337423800
sVscore
p283
I52
sVowner
p284
(dp285
Vuser_id
p286
I873145
sVprofile_image
p287
Vhttps://www.gravatar.com/avatar/0ab6f2836e0722ea0cbfeb97a74f131d?s=128&d=identicon&r=PG
p288
sVuser_type
p289
Vregistered
p290
sVreputation
p291
I27549
sVlink
p292
Vhttp://stackoverflow.com/users/873145/thomas-orozco
p293
sVaccept_rate
p294
I100
sVdisplay_name
p295
VThomas Orozco
p296
ssVis_accepted
p297
I01
sVlast_edit_date
p298
I1453923847
sVanswer_id
p299
I10664412
sa(dp300
Vbody
p301
V<p>There is built-in functions called <a href="https://docs.python.org/2/library/functions.html#getattr" rel="noreferrer"><code>getattr</code></a> and <a href="https://docs.python.org/2/library/functions.html#setattr" rel="noreferrer"><code>setattr</code></a></p>\u000a\u000a<pre><code>getattr(object, attrname)\u000asetattr(object, attrname, value)\u000a</code></pre>\u000a\u000a<p>In this case </p>\u000a\u000a<pre><code>x = getattr(t, "attr1")\u000asetattr(t, 'attr1', 21)\u000a</code></pre>\u000a
p302
sVquestion_id
p303
I2612610
sVlast_activity_date
p304
I1452002288
sVcreation_date
p305
I1270884308
sVscore
p306
I119
sVowner
p307
(dp308
Vuser_id
p309
I58737
sVprofile_image
p310
Vhttps://www.gravatar.com/avatar/95bd14f2b84f4af133b18d541dd33530?s=128&d=identicon&r=PG
p311
sVuser_type
p312
Vregistered
p313
sVreputation
p314
I14622
sVlink
p315
Vhttp://stackoverflow.com/users/58737/pratik-deoghare
p316
sVaccept_rate
p317
I86
sVdisplay_name
p318
VPratik Deoghare
p319
ssVis_accepted
p320
I01
sVlast_edit_date
p321
I1452002288
sVanswer_id
p322
I2612615
sa(dp323
Vbody
p324
V<p>Sublime Text 2 is mostly coded in C++ and uses a custom UI toolkit. Here is the author, Jon Skinner, explaining it: <a href="http://news.ycombinator.com/item?id=2822114">http://news.ycombinator.com/item?id=2822114</a>.</p>\u000a\u000a<blockquote>\u000a  <p>I keep meaning to write a blog post with some details on this, but as\u000a  with many things, I usually end up coding instead. Sublime Text 2 is\u000a  almost entirely C++ (with a smattering of Objective C for Cocoa and\u000a  Python for plugins). Coding is generally fairly straight forward: code\u000a  on one platform (mostly Linux at the moment, but I switch around\u000a  frequently), and then make sure it still compiles elsewhere. Sublime\u000a  Text 2 itself uses a custom UI toolkit. There are a lot of apps where\u000a  this may not make sense, but it's not such an unreasonable choice for\u000a  Sublime Text, where I always knew that a lot of the UI controls were\u000a  going to have to be custom no matter the toolkit (e.g., the text\u000a  control and tab controls). The UI toolkit sits on top of a cross\u000a  platform abstraction layer, which is more a union of platform\u000a  functionality rather than lowest common denominator.</p>\u000a</blockquote>\u000a
p325
sVquestion_id
p326
I7102378
sVlast_activity_date
p327
I1451318316
sVcreation_date
p328
I1328736232
sVscore
p329
I116
sVowner
p330
(dp331
Vuser_id
p332
I1052007
sVprofile_image
p333
Vhttps://www.gravatar.com/avatar/272df854e268223a57c4aec2d7b65436?s=128&d=identicon&r=PG
p334
sVuser_type
p335
Vregistered
p336
sVreputation
p337
I1972
sVlink
p338
Vhttp://stackoverflow.com/users/1052007/hugo
p339
sVdisplay_name
p340
VHugo
p341
ssVis_accepted
p342
I01
sVlast_edit_date
p343
I1451318316
sVanswer_id
p344
I9201645
sa(dp345
Vbody
p346
V<p>You need use capturing group based regex and define your regex as raw string.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; re.search(r'([a-z])\u005c1', 'ugknbfddgicrmopn').group()\u000a'dd'\u000a&gt;&gt;&gt; [i+i for i in re.findall(r'([a-z])\u005c1', 'abbbbcppq')]\u000a['bb', 'bb', 'pp']\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [i[0] for i in re.findall(r'(([a-z])\u005c2)', 'abbbbcppq')]\u000a['bb', 'bb', 'pp']\u000a</code></pre>\u000a\u000a<p>Note that , <code>re.findall</code> here should return the list of tuples with the characters which are matched by the first group as first element and the second group as second element.  For our case chars within first group would be enough so I mentioned <code>i[0]</code>.</p>\u000a
p347
sVquestion_id
p348
I34261346
sVlast_activity_date
p349
I1450083979
sVcreation_date
p350
I1450077222
sVscore
p351
I50
sVowner
p352
(dp353
Vuser_id
p354
I3297613
sVprofile_image
p355
Vhttps://i.stack.imgur.com/GI717.jpg?s=128&g=1
p356
sVuser_type
p357
Vregistered
p358
sVreputation
p359
I130252
sVlink
p360
Vhttp://stackoverflow.com/users/3297613/avinash-raj
p361
sVaccept_rate
p362
I74
sVdisplay_name
p363
VAvinash Raj
p364
ssVis_accepted
p365
I01
sVlast_edit_date
p366
I1450083979
sVanswer_id
p367
I34261540
sa(dp368
Vbody
p369
V<p>The changelog is sloppily worded. <code>from __future__ import absolute_import</code> does not care about whether something is part of the standard library, and <code>import string</code> will not always give you the standard-library module with absolute imports on.</p>\u000a\u000a<p><code>from __future__ import absolute_import</code> means that if you <code>import string</code>, Python will always look for a top-level <code>string</code> module, rather than <code>current_package.string</code>. However, it does not affect the logic Python uses to decide what file is the <code>string</code> module. When you do</p>\u000a\u000a<pre><code>python pkg/script.py\u000a</code></pre>\u000a\u000a<p><code>pkg/script.py</code> doesn't look like part of a package to Python. Following the normal procedures, the <code>pkg</code> directory is added to the path, and all <code>.py</code> files in the <code>pkg</code> directory look like top-level modules. <code>import string</code> finds <code>pkg/string.py</code> not because it's doing a relative import, but because <code>pkg/string.py</code> appears to be the top-level module <code>string</code>. The fact that this isn't the standard-library <code>string</code> module doesn't come up.</p>\u000a\u000a<p>To run the file as part of the <code>pkg</code> package, you could do</p>\u000a\u000a<pre><code>python -m pkg.script\u000a</code></pre>\u000a\u000a<p>In this case, the <code>pkg</code> directory will not be added to the path. However, the current directory will be added to the path.</p>\u000a\u000a<p>You can also add some boilerplate to <code>pkg/script.py</code> to make Python treat it as part of the <code>pkg</code> package even when run as a file:</p>\u000a\u000a<pre><code>if __name__ == '__main__' and __package__ is None:\u000a    __package__ = 'pkg'\u000a</code></pre>\u000a\u000a<p>However, this won't affect <code>sys.path</code>. You'll need some additional handling to remove the <code>pkg</code> directory from the path, and if <code>pkg</code>'s parent directory isn't on the path, you'll need to stick that on the path too.</p>\u000a
p370
sVquestion_id
p371
I33743880
sVlast_activity_date
p372
I1447710879
sVcreation_date
p373
I1447706140
sVscore
p374
I24
sVowner
p375
(dp376
Vuser_id
p377
I2357112
sVprofile_image
p378
Vhttps://www.gravatar.com/avatar/3f80897d57525afe9eac4fb8c8318052?s=128&d=identicon&r=PG
p379
sVuser_type
p380
Vregistered
p381
sVreputation
p382
I95086
sVlink
p383
Vhttp://stackoverflow.com/users/2357112/user2357112
p384
sVaccept_rate
p385
I33
sVdisplay_name
p386
Vuser2357112
p387
ssVis_accepted
p388
I01
sVlast_edit_date
p389
I1447710879
sVanswer_id
p390
I33744115
sa(dp391
Vbody
p392
V<p>Since Python is open source you can read the <a href="https://hg.python.org/cpython/file/c6880edaf6f3" rel="noreferrer">source code</a>.</p>\u000a\u000a<p>To find out what file a particular module or function is implemented in you can usually print the <code>__file__</code> attribute. Alternatively, you may use the <code>inspect</code> module, see the section <a href="https://docs.python.org/2/library/inspect.html#retrieving-source-code" rel="noreferrer">Retrieving Source Code</a> in the documentation of <code>inspect</code>.</p>\u000a\u000a<p>For built-in classes and methods this is not so straightforward since <code>inspect.getfile</code> and <code>inspect.getsource</code> will return a type error stating that the object is built-in. However, many of the built-in types can be found in the <a href="https://hg.python.org/cpython/file/c6880edaf6f3/Objects" rel="noreferrer"><code>Objects</code> sub-directory of the Python source trunk</a>. For example, see <a href="https://hg.python.org/cpython/file/c6880edaf6f3/Objects/enumobject.c" rel="noreferrer">here</a> for the implementation of the enumerate class or <a href="https://hg.python.org/cpython/file/c6880edaf6f3/Objects/listobject.c" rel="noreferrer">here</a> for the implementation of the <code>list</code> type.</p>\u000a
p393
sVquestion_id
p394
I8608587
sVlast_activity_date
p395
I1445698793
sVcreation_date
p396
I1324580761
sVscore
p397
I56
sVowner
p398
(dp399
Vuser_id
p400
I623518
sVprofile_image
p401
Vhttps://www.gravatar.com/avatar/99ce218f4182a971a28ee53761867b97?s=128&d=identicon&r=PG&f=1
p402
sVuser_type
p403
Vregistered
p404
sVreputation
p405
I21659
sVlink
p406
Vhttp://stackoverflow.com/users/623518/chris
p407
sVaccept_rate
p408
I100
sVdisplay_name
p409
VChris
p410
ssVis_accepted
p411
I01
sVlast_edit_date
p412
I1445698793
sVanswer_id
p413
I8608609
sa(dp414
Vbody
p415
V<p>How about simply</p>\u000a\u000a<pre><code>(-np.array(avgDists)).argsort()[:n]\u000a</code></pre>\u000a\u000a<p><em>edit:</em>  The suggestion in dawg's answer is arguably better, because it avoids calculating the negation of the array (which creates a copy):</p>\u000a\u000a<pre><code>np.array(avgDists).argsort()[::-1][:n]\u000a</code></pre>\u000a\u000a<p>These answers both give equivalent results.</p>\u000a\u000a<p>However, it should be noted that this does not actually improve the time-complexity for large datasets.  It replaces the <em>O(n)</em> negation with an <em>O(1)</em> slice, but the dominant term remains the argsort at <em>O(n log n)</em>.  </p>\u000a
p416
sVquestion_id
p417
I16486252
sVlast_activity_date
p418
I1436997709
sVcreation_date
p419
I1368201638
sVscore
p420
I45
sVowner
p421
(dp422
Vuser_id
p423
I674039
sVprofile_image
p424
Vhttps://i.stack.imgur.com/leoFi.gif?s=128&g=1
p425
sVuser_type
p426
Vregistered
p427
sVreputation
p428
I97604
sVlink
p429
Vhttp://stackoverflow.com/users/674039/wim
p430
sVaccept_rate
p431
I95
sVdisplay_name
p432
Vwim
p433
ssVis_accepted
p434
I01
sVlast_edit_date
p435
I1436997709
sVanswer_id
p436
I16486305
sa(dp437
Vbody
p438
V<p>Both ways work fine.  The approach using <code>super()</code> leads to greater flexibility for subclasses.  </p>\u000a\u000a<p>In the direct call approach, <code>C.__init__</code> can call both <code>A.__init__</code> and <code>B.__init__</code>.</p>\u000a\u000a<p>When using <code>super()</code>, the classes need to be designed for cooperative multiple inheritance where <code>C</code> calls <code>super</code>, which invokes <code>A</code>'s code which will also call <code>super</code> which invokes <code>B</code>'s code.  See <a href="http://rhettinger.wordpress.com/2011/05/26/super-considered-super" rel="noreferrer">http://rhettinger.wordpress.com/2011/05/26/super-considered-super</a> for more detail on what can be done with <code>super</code>.</p>\u000a\u000a<p>[Response question as later edited]</p>\u000a\u000a<blockquote>\u000a  <p>So it seems that unless I know/control the init's of the classes I\u000a  inherit from (A and B) I cannot make a safe choice for the class I'm\u000a  writing (C).</p>\u000a</blockquote>\u000a\u000a<p>The referenced article shows how to handle this situation by adding a wrapper class around <code>A</code> and <code>B</code>.  There is a worked-out example in the section titled "How to Incorporate a Non-cooperative Class".</p>\u000a\u000a<p>One might wish that multiple inheritance were easier, letting you effortlessly compose Car and Airplane classes to get a FlyingCar, but the reality is that separately designed components often need adapters or wrappers before fitting together as seamlessly as we would like :-)</p>\u000a\u000a<p>One other thought:  if you're unhappy with composing functionality using multiple inheritance, you can use composition for complete control over which methods get called on which occasions.</p>\u000a
p439
sVquestion_id
p440
I9575409
sVlast_activity_date
p441
I1433454846
sVcreation_date
p442
I1330988524
sVscore
p443
I29
sVowner
p444
(dp445
Vuser_id
p446
I1001643
sVprofile_image
p447
Vhttps://www.gravatar.com/avatar/60cac87fb9e2b5689242622999656cb0?s=128&d=identicon&r=PG
p448
sVuser_type
p449
Vregistered
p450
sVreputation
p451
I94640
sVlink
p452
Vhttp://stackoverflow.com/users/1001643/raymond-hettinger
p453
sVaccept_rate
p454
I75
sVdisplay_name
p455
VRaymond Hettinger
p456
ssVis_accepted
p457
I01
sVlast_edit_date
p458
I1433454846
sVanswer_id
p459
I9575426
sa(dp460
Vbody
p461
V<p>Plain and simple:</p>\u000a\u000a<pre><code>plt.plot(x, y, 'r-', alpha=0.7)\u000a</code></pre>\u000a\u000a<p>(I know I add nothing new, but the straightforward answer should be visible).</p>\u000a
p462
sVquestion_id
p463
I4320021
sVlast_activity_date
p464
I1431700779
sVcreation_date
p465
I1394821461
sVscore
p466
I83
sVowner
p467
(dp468
Vuser_id
p469
I236830
sVprofile_image
p470
Vhttps://www.gravatar.com/avatar/1d7f93f931421bcf885970cac408ef8c?s=128&d=identicon&r=PG
p471
sVuser_type
p472
Vregistered
p473
sVreputation
p474
I6186
sVlink
p475
Vhttp://stackoverflow.com/users/236830/davoud-taghawi-nejad
p476
sVaccept_rate
p477
I61
sVdisplay_name
p478
VDavoud Taghawi-Nejad
p479
ssVis_accepted
p480
I01
sVlast_edit_date
p481
I1431700779
sVanswer_id
p482
I22412921
sa(dp483
Vbody
p484
V<p>I had the same problem. When I upgraded python3 through Homebrew, I started getting this:</p>\u000a\u000a<pre><code>-bash: python3: command not found\u000a</code></pre>\u000a\u000a<p>I had the same conflict with Python somehow being installed in <code>/Library/Framework/Python.framework</code>. I just did a <code>brew link overwrite</code> and everything is working fine now. There is some info about what to do with the Python version in the <code>/Library/Framework/Python.framework</code> <a href="https://github.com/Homebrew/homebrew/issues/27146" rel="noreferrer">here</a>.</p>\u000a\u000a<p>I guess you could try deleting that version as the link suggests, just make sure that version isn't being used. When I got into the Python.framework directory I was seeing some EPD version of Python, which I think is Enthought. You could delete it, but I if it isn't causing you any problems besides the unsightly Homebrew warning message, then I think you should just ignore it for now. </p>\u000a\u000a<p>Update:</p>\u000a\u000a<p>I did delete the Python.framework directory which, through some poking around inside that directory, I started seeing a few old versions of Python that I didn't install with Homebrew. One was from Enthought, and another was a distribution of Python3.3. I think some of these installs in the Framework directory are user installs. I installed R on my system, and there is also an R.framework directory, so I think most of these are user installs. After I deleted the directory, I just had to call brew prune to remove the old symlinks. I checked both brew versions of python 2.7.6 and 3.3.4, and they seem to be in good working order with all of my installed packages. I guess I leave the decision to remove that directory, or python version, to your discretion. </p>\u000a
p485
sVquestion_id
p486
I22255579
sVlast_activity_date
p487
I1423650516
sVcreation_date
p488
I1394254213
sVscore
p489
I26
sVowner
p490
(dp491
Vuser_id
p492
I1959071
sVprofile_image
p493
Vhttps://www.gravatar.com/avatar/d4b5f7c8252a0f3fa11e20ae9437b5fc?s=128&d=identicon&r=PG
p494
sVuser_type
p495
Vregistered
p496
sVreputation
p497
I463
sVlink
p498
Vhttp://stackoverflow.com/users/1959071/shermm
p499
sVaccept_rate
p500
I67
sVdisplay_name
p501
VSherMM
p502
ssVis_accepted
p503
I01
sVlast_edit_date
p504
I1423650516
sVanswer_id
p505
I22265200
sa(dp506
Vbody
p507
V<p>Your JSON is an array with a single object inside, so when you read it in you get a list with a dictionary inside. You can access your dictionary by accessing item 0 in the list, as shown below:</p>\u000a\u000a<pre><code>json1_data = json.loads(json1_str)[0]\u000a</code></pre>\u000a\u000a<p>Now you can access the data stored in <em>datapoints</em> just as you were expecting:</p>\u000a\u000a<pre><code>datapoints = json1_data['datapoints']\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<blockquote>\u000a  <p>I have one more question if anyone can bite: I am trying to take the average of the first elements in these datapoints(i.e. datapoints[0][0]). Just to list them, I tried doing datapoints[0:5][0] but all I get is the first datapoint with both elements as opposed to wanting to get the first 5 datapoints containing only the first element. Is there a way to do this? </p>\u000a</blockquote>\u000a\u000a<p><code>datapoints[0:5][0]</code> doesn't do what you're expecting. <code>datapoints[0:5]</code> returns a new list slice containing just the first 5 elements, and then adding <code>[0]</code> on the end of it will take just the first element <em>from that resulting list slice</em>. What you need to use to get the result you want is a <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions">list comprehension</a>:</p>\u000a\u000a<pre><code>[p[0] for p in datapoints[0:5]]\u000a</code></pre>\u000a\u000a<p>Here's a simple way to calculate the mean:</p>\u000a\u000a<pre><code>sum(p[0] for p in datapoints[0:5])/5. # Result is 35.8\u000a</code></pre>\u000a\u000a<p>If you're willing to install <a href="http://www.numpy.org/">NumPy</a>, then it's even easier:</p>\u000a\u000a<pre><code>import numpy\u000ajson1_file = open('json1')\u000ajson1_str = json1_file.read()\u000ajson1_data = json.loads(json1_str)[0]\u000adatapoints = numpy.array(json1_data['datapoints'])\u000aavg = datapoints[0:5,0].mean()\u000a# avg is now 35.8\u000a</code></pre>\u000a\u000a<p>Using the <code>,</code> operator with the slicing syntax for NumPy's arrays has the behavior you were originally expecting with the list slices.</p>\u000a
p508
sVquestion_id
p509
I19483351
sVlast_activity_date
p510
I1422728980
sVcreation_date
p511
I1382306758
sVscore
p512
I82
sVowner
p513
(dp514
Vuser_id
p515
I1427124
sVprofile_image
p516
Vhttps://www.gravatar.com/avatar/900fad0b78afca7d8fafdd3d2e414182?s=128&d=identicon&r=PG
p517
sVuser_type
p518
Vregistered
p519
sVreputation
p520
I22463
sVlink
p521
Vhttp://stackoverflow.com/users/1427124/daowen
p522
sVaccept_rate
p523
I90
sVdisplay_name
p524
VDaoWen
p525
ssVis_accepted
p526
I01
sVlast_edit_date
p527
I1422728980
sVanswer_id
p528
I19483437
sa(dp529
Vbody
p530
V<p>I got the solution:</p>\u000a\u000a<pre><code>import nltk\u000anltk.download()\u000a</code></pre>\u000a\u000a<h2>once the NLTK Downloader starts</h2>\u000a\u000a<h2>    d) Download   l) List    u) Update   c) Config   h) Help   q) Quit</h2>\u000a\u000a<p>Downloader> d</p>\u000a\u000a<p>Download which package (l=list; x=cancel)?\u000a  Identifier> punkt</p>\u000a
p531
sVquestion_id
p532
I26570944
sVlast_activity_date
p533
I1414344049
sVcreation_date
p534
I1414344049
sVscore
p535
I25
sVowner
p536
(dp537
Vuser_id
p538
I3624880
sVprofile_image
p539
Vhttps://www.gravatar.com/avatar/b583b3255b88a2f449ff8086f3ac8b2e?s=128&d=identicon&r=PG&f=1
p540
sVuser_type
p541
Vregistered
p542
sVreputation
p543
I679
sVlink
p544
Vhttp://stackoverflow.com/users/3624880/supreeth-meka
p545
sVaccept_rate
p546
I89
sVdisplay_name
p547
VSupreeth Meka
p548
ssVis_accepted
p549
I01
sVanswer_id
p550
I26575754
sa(dp551
Vbody
p552
V<p>I had this exact problem recently and used</p>\u000a\u000a<pre><code>apt-get install python-numpy\u000a</code></pre>\u000a\u000a<p>This adds numpy to your system python interpreter.  I may have had to do the same for matplotlib.  To use in a virtualenv, you have to create your environment using the</p>\u000a\u000a<pre><code>--system-site-packages\u000a</code></pre>\u000a\u000a<p>option</p>\u000a\u000a<p><a href="http://www.scipy.org/install.html">http://www.scipy.org/install.html</a></p>\u000a
p553
sVquestion_id
p554
I26473681
sVlast_activity_date
p555
I1413835882
sVcreation_date
p556
I1413835882
sVscore
p557
I40
sVowner
p558
(dp559
Vuser_id
p560
I3704260
sVprofile_image
p561
Vhttps://www.gravatar.com/avatar/bedeceeeabcee73665be2f102364a752?s=128&d=identicon&r=PG&f=1
p562
sVuser_type
p563
Vregistered
p564
sVreputation
p565
I769
sVlink
p566
Vhttp://stackoverflow.com/users/3704260/jeff-m
p567
sVdisplay_name
p568
VJeff M.
p569
ssVis_accepted
p570
I01
sVanswer_id
p571
I26474062
sa(dp572
Vbody
p573
V<p>While this is old question, just for consistency - since version 19.0 gunicorn has <a href="http://docs.gunicorn.org/en/19.0/settings.html#reload" rel="noreferrer"><code>--reload</code></a> option.\u000aSo no third party tools needed more.</p>\u000a
p574
sVquestion_id
p575
I12773763
sVlast_activity_date
p576
I1406051466
sVcreation_date
p577
I1406047200
sVscore
p578
I113
sVowner
p579
(dp580
Vuser_id
p581
I892001
sVprofile_image
p582
Vhttps://www.gravatar.com/avatar/d36505bb262a32d4cbf6eb979c0037c4?s=128&d=identicon&r=PG
p583
sVuser_type
p584
Vregistered
p585
sVreputation
p586
I1357
sVlink
p587
Vhttp://stackoverflow.com/users/892001/dmitry-ziolkovskiy
p588
sVaccept_rate
p589
I80
sVdisplay_name
p590
VDmitry  Ziolkovskiy
p591
ssVis_accepted
p592
I01
sVlast_edit_date
p593
I1406051466
sVanswer_id
p594
I24893069
sa(dp595
Vbody
p596
V<p>Warning for new viewers: this answer is now several years old (the clue is that it describes Windows 7 as "new").   By now (2014) most Python libraries should have 64-bit support.  However, if you still have problems you can always take the advice of @KamilSzot and install 32-bit Python instead. In most cases  <a href="http://stackoverflow.com/a/5033019/146325">it probably doesn't matter that much</a>.</p>\u000a\u000a<hr>\u000a\u000a<p>[In 2010] it appears there are a lot of Python utilities which don't work on 64-bit Windows 7, as it's still a very new platform.  So you may frequently find yourself on the cutting edge, which is not a comfortable place for someone who describes themselves as a beginner.</p>\u000a\u000a<p>For instance, Valentine Gogichashvili discusses a potential solution <a href="http://valgogtech.blogspot.com/2010/01/after-installing-64-bit-windows-7-at.html" rel="noreferrer" title="64 bit python installation issues on 64 bit Windows 7">here</a> but do you know enough Python to understand what it's doing? </p>\u000a
p597
sVquestion_id
p598
I3008509
sVlast_activity_date
p599
I1401621151
sVcreation_date
p600
I1276108088
sVscore
p601
I58
sVowner
p602
(dp603
Vuser_id
p604
I146325
sVprofile_image
p605
Vhttps://www.gravatar.com/avatar/09939a1d3bd9c1af199a948bdc68cb71?s=128&d=identicon&r=PG
p606
sVuser_type
p607
Vregistered
p608
sVreputation
p609
I95798
sVlink
p610
Vhttp://stackoverflow.com/users/146325/apc
p611
sVdisplay_name
p612
VAPC
p613
ssVis_accepted
p614
I01
sVlast_edit_date
p615
I1401621151
sVanswer_id
p616
I3008707
sa(dp617
Vbody
p618
V<p>While it's ugly, it appears to work</p>\u000a\u000a<pre><code>sudo ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future pip install --upgrade numpy\u000a</code></pre>\u000a\u000a<p>Note that if you are getting this error for a package other than numpy, (such as lxml) specify that package name instead of <code>numpy</code> at the end of the commnd.</p>\u000a\u000a<p>I saw a similar issue someone was having with installing a gem</p>\u000a\u000a<p><a href="http://stackoverflow.com/questions/22352838/ruby-gem-install-json-fails-on-mavericks-and-xcode-5-1-unknown-argument-mul">Ruby Gem install Json fails on Mavericks and Xcode 5.1 - unknown argument: &#39;-multiply_definedsuppress&#39;</a></p>\u000a\u000a<p>This is only a temporary fix, at some point the compiler options will have to be fixed</p>\u000a
p619
sVquestion_id
p620
I22388519
sVlast_activity_date
p621
I1400717156
sVcreation_date
p622
I1394817276
sVscore
p623
I65
sVowner
p624
(dp625
Vuser_id
p626
I959969
sVprofile_image
p627
Vhttps://www.gravatar.com/avatar/416c57db1ead904bdb72b5f54a6822c3?s=128&d=identicon&r=PG
p628
sVuser_type
p629
Vregistered
p630
sVreputation
p631
I776
sVlink
p632
Vhttp://stackoverflow.com/users/959969/derrick-shoemake
p633
sVdisplay_name
p634
VDerrick Shoemake
p635
ssVis_accepted
p636
I01
sVlast_edit_date
p637
I1400717156
sVanswer_id
p638
I22411624
sa(dp639
Vbody
p640
V<p>The most verbose solution is not always the most unelegant solution. Therefore I add just a minor modification (in order to save some redundant boolean evaluations):</p>\u000a\u000a<pre><code>def only1(l):\u000a    true_found = False\u000a    for v in l:\u000a        if v:\u000a            # a True was found!\u000a            if true_found:\u000a                # found too many True's\u000a                return False \u000a            else:\u000a                # found the first True\u000a                true_found = True\u000a    # found zero or one True value\u000a    return true_found\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Here are some timings for comparison:</p>\u000a\u000a<pre><code># file: test.py\u000afrom itertools import ifilter, islice\u000a\u000adef OP(l):\u000a    true_found = False\u000a    for v in l:\u000a        if v and not true_found:\u000a            true_found=True\u000a        elif v and true_found:\u000a             return False #"Too Many Trues"\u000a    return true_found\u000a\u000adef DavidRobinson(l):\u000a    return l.count(True) == 1\u000a\u000adef FJ(l):\u000a    return len(list(islice(ifilter(None, l), 2))) == 1\u000a\u000adef JonClements(iterable):\u000a    i = iter(iterable)\u000a    return any(i) and not any(i)\u000a\u000adef moooeeeep(l):\u000a    true_found = False\u000a    for v in l:\u000a        if v:\u000a            if true_found:\u000a                # found too many True's\u000a                return False \u000a            else:\u000a                # found the first True\u000a                true_found = True\u000a    # found zero or one True value\u000a    return true_found\u000a</code></pre>\u000a\u000a<p>My output:</p>\u000a\u000a<pre><code>$ python -mtimeit -s 'import test; l=[True]*100000' 'test.OP(l)' \u000a1000000 loops, best of 3: 0.523 usec per loop\u000a$ python -mtimeit -s 'import test; l=[True]*100000' 'test.DavidRobinson(l)' \u000a1000 loops, best of 3: 516 usec per loop\u000a$ python -mtimeit -s 'import test; l=[True]*100000' 'test.FJ(l)' \u000a100000 loops, best of 3: 2.31 usec per loop\u000a$ python -mtimeit -s 'import test; l=[True]*100000' 'test.JonClements(l)' \u000a1000000 loops, best of 3: 0.446 usec per loop\u000a$ python -mtimeit -s 'import test; l=[True]*100000' 'test.moooeeeep(l)' \u000a1000000 loops, best of 3: 0.449 usec per loop\u000a</code></pre>\u000a\u000a<p>As can be seen, the OP solution is significantly better than most other solutions posted here. As expected, the best ones are those with short circuit behavior, especially that solution posted by Jon Clements. At least for the case of two early <code>True</code> values in a long list.</p>\u000a\u000a<p>Here the same for no <code>True</code> value at all:</p>\u000a\u000a<pre><code>$ python -mtimeit -s 'import test; l=[False]*100000' 'test.OP(l)' \u000a100 loops, best of 3: 4.26 msec per loop\u000a$ python -mtimeit -s 'import test; l=[False]*100000' 'test.DavidRobinson(l)' \u000a100 loops, best of 3: 2.09 msec per loop\u000a$ python -mtimeit -s 'import test; l=[False]*100000' 'test.FJ(l)' \u000a1000 loops, best of 3: 725 usec per loop\u000a$ python -mtimeit -s 'import test; l=[False]*100000' 'test.JonClements(l)' \u000a1000 loops, best of 3: 617 usec per loop\u000a$ python -mtimeit -s 'import test; l=[False]*100000' 'test.moooeeeep(l)' \u000a100 loops, best of 3: 1.85 msec per loop\u000a</code></pre>\u000a\u000a<p>I did not check the statistical significance, but interestingly, this time the approaches suggested by F.J. and especially that one by Jon Clements again appear to be clearly superior.</p>\u000a
p641
sVquestion_id
p642
I16801322
sVlast_activity_date
p643
I1399706898
sVcreation_date
p644
I1369775790
sVscore
p645
I31
sVowner
p646
(dp647
Vuser_id
p648
I1025391
sVprofile_image
p649
Vhttps://www.gravatar.com/avatar/76a088ae59745a0c4a377f362fec0fc4?s=128&d=identicon&r=PG
p650
sVuser_type
p651
Vregistered
p652
sVreputation
p653
I16327
sVlink
p654
Vhttp://stackoverflow.com/users/1025391/moooeeeep
p655
sVaccept_rate
p656
I92
sVdisplay_name
p657
Vmoooeeeep
p658
ssVis_accepted
p659
I01
sVlast_edit_date
p660
I1399706898
sVanswer_id
p661
I16801638
sa(dp662
Vbody
p663
V<p><code>__init__</code> returns the newly created object. You cannot (or at least shouldn't) return something else.</p>\u000a\u000a<p>Try making whatever you want to return an instance variable (or function).</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Foo:\u000a...     def __init__(self):\u000a...         return 42\u000a... \u000a&gt;&gt;&gt; foo = Foo()\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: __init__() should return None\u000a</code></pre>\u000a
p664
sVquestion_id
p665
I2491819
sVlast_activity_date
p666
I1399472978
sVcreation_date
p667
I1269257872
sVscore
p668
I58
sVowner
p669
(dp670
Vuser_id
p671
I2119
sVprofile_image
p672
Vhttps://www.gravatar.com/avatar/2c56a82b6d13e243848a55fedca24b71?s=128&d=identicon&r=PG
p673
sVuser_type
p674
Vregistered
p675
sVreputation
p676
I65479
sVlink
p677
Vhttp://stackoverflow.com/users/2119/can-berk-g%c3%bcder
p678
sVaccept_rate
p679
I71
sVdisplay_name
p680
VCan Berk G&#252;der
p681
ssVis_accepted
p682
I01
sVlast_edit_date
p683
I1399472978
sVanswer_id
p684
I2491831
sa(dp685
Vbody
p686
V<p>The caller's frame is one frame higher than the current frame. You can use <a href="http://docs.python.org/library/inspect.html#inspect.getouterframes" rel="noreferrer">inspect.getouterframes</a> to get the caller's frame, plus the filename and line number.</p>\u000a\u000a<pre><code>import inspect\u000a\u000adef hello():\u000a    (frame, filename, line_number,\u000a     function_name, lines, index) = inspect.getouterframes(inspect.currentframe())[1]\u000a    print(frame, filename, line_number, function_name, lines, index)\u000a\u000ahello()    \u000a# (&lt;frame object at 0x8ba7254&gt;, '/home/unutbu/pybin/test.py', 10, '&lt;module&gt;', ['hello()\u005cn'], 0)\u000a</code></pre>\u000a
p687
sVquestion_id
p688
I3711184
sVlast_activity_date
p689
I1396803616
sVcreation_date
p690
I1284484343
sVscore
p691
I54
sVowner
p692
(dp693
Vuser_id
p694
I190597
sVprofile_image
p695
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p696
sVuser_type
p697
Vregistered
p698
sVreputation
p699
I425294
sVlink
p700
Vhttp://stackoverflow.com/users/190597/unutbu
p701
sVaccept_rate
p702
I88
sVdisplay_name
p703
Vunutbu
p704
ssVis_accepted
p705
I01
sVlast_edit_date
p706
I1396803616
sVanswer_id
p707
I3711243
sa(dp708
Vbody
p709
V<p><code>and</code> tests whether both expressions are logically <code>True</code> while <code>&amp;</code> (when used with <code>True</code>/<code>False</code> values) tests if both are <code>True</code>.</p>\u000a\u000a<p>In Python, empty built-in objects are typically treated as logically <code>False</code> while non-empty built-ins are logically <code>True</code>. This facilitates the common use case where you want to do something if a list is empty and something else if the list is not. Note that this means that the list [False] is logically <code>True</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; if [False]:\u000a...    print 'True'\u000a...\u000aTrue\u000a</code></pre>\u000a\u000a<p>So in Example 1, the first list is non-empty and therefore logically <code>True</code>, so the truth value of the <code>and</code> is the same as that of the second list. (In our case, the second list is non-empty and therefore logically <code>True</code>, but identifying that would require an unnecessary step of calculation.)</p>\u000a\u000a<p>For example 2, lists cannot meaningfully be combined in a bitwise fashion because they can contain arbitrary unlike elements. Things that can be combined bitwise include: Trues and Falses, integers.</p>\u000a\u000a<p>NumPy objects, by contrast, support vectorized calculations. That is, they let you perform the same operations on multiple pieces of data.</p>\u000a\u000a<p>Example 3 fails because NumPy arrays (of length > 1) have no truth value as this prevents vector-based logic confusion.</p>\u000a\u000a<p>Example 4 is simply a vectorized bit <code>and</code> operation.</p>\u000a\u000a<p><strong>Bottom Line</strong></p>\u000a\u000a<ul>\u000a<li><p>If you are not dealing with arrays and are not performing math manipulations of integers, you probably want <code>and</code>.</p></li>\u000a<li><p>If you have vectors of truth values that you wish to combine, use <code>numpy</code> with <code>&amp;</code>.</p></li>\u000a</ul>\u000a
p710
sVquestion_id
p711
I22646463
sVlast_activity_date
p712
I1395784032
sVcreation_date
p713
I1395784032
sVscore
p714
I49
sVowner
p715
(dp716
Vuser_id
p717
I1649432
sVprofile_image
p718
Vhttps://www.gravatar.com/avatar/f29cee49cd2599f8d679ab17a81efc95?s=128&d=identicon&r=PG
p719
sVuser_type
p720
Vregistered
p721
sVreputation
p722
I987
sVlink
p723
Vhttp://stackoverflow.com/users/1649432/ramcdougal
p724
sVaccept_rate
p725
I83
sVdisplay_name
p726
Vramcdougal
p727
ssVis_accepted
p728
I01
sVanswer_id
p729
I22647006
sa(dp730
Vbody
p731
V<p>If you want a list of columns of a certain type, you can use <code>groupby</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df = pd.DataFrame([[1, 2.3456, 'c', 'd', 78]], columns=list("ABCDE"))\u000a&gt;&gt;&gt; df\u000a   A       B  C  D   E\u000a0  1  2.3456  c  d  78\u000a\u000a[1 rows x 5 columns]\u000a&gt;&gt;&gt; df.dtypes\u000aA      int64\u000aB    float64\u000aC     object\u000aD     object\u000aE      int64\u000adtype: object\u000a&gt;&gt;&gt; g = df.columns.to_series().groupby(df.dtypes).groups\u000a&gt;&gt;&gt; g\u000a{dtype('int64'): ['A', 'E'], dtype('float64'): ['B'], dtype('O'): ['C', 'D']}\u000a&gt;&gt;&gt; {k.name: v for k, v in g.items()}\u000a{'object': ['C', 'D'], 'int64': ['A', 'E'], 'float64': ['B']}\u000a</code></pre>\u000a
p732
sVquestion_id
p733
I22470690
sVlast_activity_date
p734
I1395134974
sVcreation_date
p735
I1395134974
sVscore
p736
I107
sVowner
p737
(dp738
Vuser_id
p739
I487339
sVprofile_image
p740
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p741
sVuser_type
p742
Vregistered
p743
sVreputation
p744
I147176
sVlink
p745
Vhttp://stackoverflow.com/users/487339/dsm
p746
sVdisplay_name
p747
VDSM
p748
ssVis_accepted
p749
I01
sVanswer_id
p750
I22475141
sa(dp751
Vbody
p752
V<p>You can either use the <code>action</code> with <code>store_true</code>|<code>store_false</code>, or you can use an int and let implicit casting check a boolean value.</p>\u000a\u000a<p>Using the <code>action</code>, you wouldn't pass a <code>--foo=true</code> and <code>--foo=false</code> argument, you would simply include it if it was to be set to true.</p>\u000a\u000a<pre><code>python myProgram.py --foo\u000a</code></pre>\u000a\u000a<p>In fact I think what you may want is</p>\u000a\u000a<pre><code>parser.add_argument('-b', action='store_true', default=False)\u000a</code></pre>\u000a
p753
sVquestion_id
p754
I9183936
sVlast_activity_date
p755
I1393618034
sVcreation_date
p756
I1328649091
sVscore
p757
I109
sVowner
p758
(dp759
Vuser_id
p760
I141555
sVprofile_image
p761
Vhttps://i.stack.imgur.com/g7wWn.jpg?s=128&g=1
p762
sVuser_type
p763
Vregistered
p764
sVreputation
p765
I61957
sVlink
p766
Vhttp://stackoverflow.com/users/141555/sberry
p767
sVaccept_rate
p768
I91
sVdisplay_name
p769
Vsberry
p770
ssVis_accepted
p771
I01
sVlast_edit_date
p772
I1393618034
sVanswer_id
p773
I9183998
sa(dp774
Vcommunity_owned_date
p775
I1357758231
sVbody
p776
V<h2>Notice</h2>\u000a\u000a<p>See also this answer: <a href="http://stackoverflow.com/a/21708215">http://stackoverflow.com/a/21708215</a> which was the base for the <strong>EDIT 2</strong> at the bottom here.</p>\u000a\u000a<hr>\u000a\u000a<p>I've augmented the loop to 1000000 to get a better timing measure.</p>\u000a\u000a<p>This is my Python timing:</p>\u000a\u000a<pre><code>real    0m2.038s\u000auser    0m2.009s\u000asys     0m0.024s\u000a</code></pre>\u000a\u000a<p>Here's an equivalent of your code, just a bit prettier:</p>\u000a\u000a<pre><code>#include &lt;regex&gt;\u000a#include &lt;vector&gt;\u000a#include &lt;string&gt;\u000a\u000astd::vector&lt;std::string&gt; split(const std::string &amp;s, const std::regex &amp;r)\u000a{\u000a    return {\u000a        std::sregex_token_iterator(s.begin(), s.end(), r, -1),\u000a        std::sregex_token_iterator()\u000a    };\u000a}\u000a\u000aint main()\u000a{\u000a    const std::regex r(" +");\u000a    for(auto i=0; i &lt; 1000000; ++i)\u000a       split("a b c", r);\u000a    return 0;\u000a}\u000a</code></pre>\u000a\u000a<p>Timing:</p>\u000a\u000a<pre><code>real    0m5.786s\u000auser    0m5.779s\u000asys     0m0.005s\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>This is an optimization to avoid construction/allocation of vector and string objects:</p>\u000a\u000a<pre><code>#include &lt;regex&gt;\u000a#include &lt;vector&gt;\u000a#include &lt;string&gt;\u000a\u000avoid split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;std::string&gt; &amp;v)\u000a{\u000a    auto rit = std::sregex_token_iterator(s.begin(), s.end(), r, -1);\u000a    auto rend = std::sregex_token_iterator();\u000a    v.clear();\u000a    while(rit != rend)\u000a    {\u000a        v.push_back(*rit);\u000a        ++rit;\u000a    }\u000a}\u000a\u000aint main()\u000a{\u000a    const std::regex r(" +");\u000a    std::vector&lt;std::string&gt; v;\u000a    for(auto i=0; i &lt; 1000000; ++i)\u000a       split("a b c", r, v);\u000a    return 0;\u000a}\u000a</code></pre>\u000a\u000a<p>Timing:</p>\u000a\u000a<pre><code>real    0m3.034s\u000auser    0m3.029s\u000asys     0m0.004s\u000a</code></pre>\u000a\u000a<p>This is near a 100% performance improvement.</p>\u000a\u000a<p>The vector is created before the loop, and can grow its memory in the first iteration. Afterwards there's no memory deallocation by <code>clear()</code>, the vector maintains the memory and construct strings <em>in-place</em>.</p>\u000a\u000a<hr>\u000a\u000a<p>Another performance increase would be to avoid construction/destruction <code>std::string</code> completely, and hence, allocation/deallocation of its objects.</p>\u000a\u000a<p>This is a tentative in this direction:</p>\u000a\u000a<pre><code>#include &lt;regex&gt;\u000a#include &lt;vector&gt;\u000a#include &lt;string&gt;\u000a\u000avoid split(const char *s, const std::regex &amp;r, std::vector&lt;std::string&gt; &amp;v)\u000a{\u000a    auto rit = std::cregex_token_iterator(s, s + std::strlen(s), r, -1);\u000a    auto rend = std::cregex_token_iterator();\u000a    v.clear();\u000a    while(rit != rend)\u000a    {\u000a        v.push_back(*rit);\u000a        ++rit;\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<p>Timing:</p>\u000a\u000a<pre><code>real    0m2.509s\u000auser    0m2.503s\u000asys     0m0.004s\u000a</code></pre>\u000a\u000a<p>An ultimate improvement would be to have a <code>std::vector</code> of <code>const char *</code> as return, where each char pointer would point to a substring inside the original <code>s</code> <em>c string</em> itself. The problem is that, you can't do that because each of them would not be null terminated (for this, see usage of C++1y <code>string_ref</code> in a later sample).</p>\u000a\u000a<hr>\u000a\u000a<p>This last improvement could also be achieved with this:</p>\u000a\u000a<pre><code>#include &lt;regex&gt;\u000a#include &lt;vector&gt;\u000a#include &lt;string&gt;\u000a\u000avoid split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;std::string&gt; &amp;v)\u000a{\u000a    auto rit = std::cregex_token_iterator(s.data(), s.data() + s.length(), r, -1);\u000a    auto rend = std::cregex_token_iterator();\u000a    v.clear();\u000a    while(rit != rend)\u000a    {\u000a        v.push_back(*rit);\u000a        ++rit;\u000a    }\u000a}\u000a\u000aint main()\u000a{\u000a    const std::regex r(" +");\u000a    std::vector&lt;std::string&gt; v;\u000a    for(auto i=0; i &lt; 1000000; ++i)\u000a       split("a b c", r, v); // the constant string("a b c") should be optimized\u000a                             // by the compiler. I got the same performance as\u000a                             // if it was an object outside the loop\u000a    return 0;\u000a}\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>I've built the samples with clang 3.3 (from trunk) with -O3. Maybe other regex libraries are able to perform better, but in any case, allocations/deallocations are frequently a performance hit.</p>\u000a\u000a<hr>\u000a\u000a<h1>Boost.Regex</h1>\u000a\u000a<p>This is the <code>boost::regex</code> timing for the <em>c string</em> arguments sample:</p>\u000a\u000a<pre><code>real    0m1.284s\u000auser    0m1.278s\u000asys     0m0.005s\u000a</code></pre>\u000a\u000a<p>Same code, <code>boost::regex</code> and <code>std::regex</code> interface in this sample are identical, just needed to change the namespace and include.</p>\u000a\u000a<p>Best wishes for it to get better over time, C++ stdlib regex implementations are in their infancy.</p>\u000a\u000a<h2>EDIT</h2>\u000a\u000a<p>For sake of completion, I've tried this (the above mentioned "ultimate improvement" suggestion) and it didn't improved performance of the equivalent <code>std::vector&lt;std::string&gt; &amp;v</code> version in anything:</p>\u000a\u000a<pre><code>#include &lt;regex&gt;\u000a#include &lt;vector&gt;\u000a#include &lt;string&gt;\u000a\u000atemplate&lt;typename Iterator&gt; class intrusive_substring\u000a{\u000aprivate:\u000a    Iterator begin_, end_;\u000a\u000apublic:\u000a    intrusive_substring(Iterator begin, Iterator end) : begin_(begin), end_(end) {}\u000a\u000a    Iterator begin() {return begin_;}\u000a    Iterator end() {return end_;}\u000a};\u000a\u000ausing intrusive_char_substring = intrusive_substring&lt;const char *&gt;;\u000a\u000avoid split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;intrusive_char_substring&gt; &amp;v)\u000a{\u000a    auto rit = std::cregex_token_iterator(s.data(), s.data() + s.length(), r, -1);\u000a    auto rend = std::cregex_token_iterator();\u000a    v.clear(); // This can potentially be optimized away by the compiler because\u000a               // the intrusive_char_substring destructor does nothing, so\u000a               // resetting the internal size is the only thing to be done.\u000a               // Formerly allocated memory is maintained.\u000a    while(rit != rend)\u000a    {\u000a        v.emplace_back(rit-&gt;first, rit-&gt;second);\u000a        ++rit;\u000a    }\u000a}\u000a\u000aint main()\u000a{\u000a    const std::regex r(" +");\u000a    std::vector&lt;intrusive_char_substring&gt; v;\u000a    for(auto i=0; i &lt; 1000000; ++i)\u000a       split("a b c", r, v);\u000a\u000a    return 0;\u000a}\u000a</code></pre>\u000a\u000a<p>This has to do with the <a href="http://cxx1y-array-string-ref.googlecode.com/git/paper.html" rel="noreferrer">array_ref and string_ref proposal</a>. Here's a sample code using it:</p>\u000a\u000a<pre><code>#include &lt;regex&gt;\u000a#include &lt;vector&gt;\u000a#include &lt;string&gt;\u000a#include &lt;string_ref&gt;\u000a\u000avoid split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;std::string_ref&gt; &amp;v)\u000a{\u000a    auto rit = std::cregex_token_iterator(s.data(), s.data() + s.length(), r, -1);\u000a    auto rend = std::cregex_token_iterator();\u000a    v.clear();\u000a    while(rit != rend)\u000a    {\u000a        v.emplace_back(rit-&gt;first, rit-&gt;length());\u000a        ++rit;\u000a    }\u000a}\u000a\u000aint main()\u000a{\u000a    const std::regex r(" +");\u000a    std::vector&lt;std::string_ref&gt; v;\u000a    for(auto i=0; i &lt; 1000000; ++i)\u000a       split("a b c", r, v);\u000a\u000a    return 0;\u000a}\u000a</code></pre>\u000a\u000a<p>It will also be cheaper to return a vector of <code>string_ref</code> rather than <code>string</code> copies for the case of <code>split</code> with vector return.</p>\u000a\u000a<h1>EDIT 2</h1>\u000a\u000a<p>This new solution is able to get output by return. I have used Marshall Clow's <code>string_view</code> (<code>string_ref</code> got renamed) libc++ implementation found at <a href="https://github.com/mclow/string_view" rel="noreferrer">https://github.com/mclow/string_view</a>.</p>\u000a\u000a<pre><code>#include &lt;string&gt;\u000a#include &lt;string_view&gt;\u000a#include &lt;boost/regex.hpp&gt;\u000a#include &lt;boost/range/iterator_range.hpp&gt;\u000a#include &lt;boost/iterator/transform_iterator.hpp&gt;\u000a\u000ausing namespace std;\u000ausing namespace std::experimental;\u000ausing namespace boost;\u000a\u000astring_view stringfier(const cregex_token_iterator::value_type &amp;match) {\u000a    return {match.first, static_cast&lt;size_t&gt;(match.length())};\u000a}\u000a\u000ausing string_view_iterator =\u000a    transform_iterator&lt;decltype(&amp;stringfier), cregex_token_iterator&gt;;\u000a\u000aiterator_range&lt;string_view_iterator&gt; split(string_view s, const regex &amp;r) {\u000a    return {\u000a        string_view_iterator(\u000a            cregex_token_iterator(s.begin(), s.end(), r, -1),\u000a            stringfier\u000a        ),\u000a        string_view_iterator()\u000a    };\u000a}\u000a\u000aint main() {\u000a    const regex r(" +");\u000a    for (size_t i = 0; i &lt; 1000000; ++i) {\u000a        split("a b c", r);\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<p>Timing:</p>\u000a\u000a<pre><code>real    0m0.385s\u000auser    0m0.385s\u000asys     0m0.000s\u000a</code></pre>\u000a\u000a<p>Note how faster this is compared to previous results. Of course, it's not filling a <code>vector</code> inside the loop (nor matching anything in advance probably too), but you get a range anyway, which you can range over with range-based <code>for</code>, or even use it to fill a <code>vector</code>.</p>\u000a\u000a<p>As ranging over the <code>iterator_range</code> creates <code>string_view</code>s over an original <code>string</code>(or a <em>null terminated string</em>), this gets very lightweight, never generating unnecessary string allocations.</p>\u000a\u000a<p>Just to compare using this <code>split</code> implementation but actually filling a <code>vector</code> we could do this:</p>\u000a\u000a<pre><code>int main() {\u000a    const regex r(" +");\u000a    vector&lt;string_view&gt; v;\u000a    v.reserve(10);\u000a    for (size_t i = 0; i &lt; 1000000; ++i) {\u000a        copy(split("a b c", r), back_inserter(v));\u000a        v.clear();\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<p>This uses boost range copy algorithm to fill the vector in each iteration, the timing is:</p>\u000a\u000a<pre><code>real    0m1.002s\u000auser    0m0.997s\u000asys     0m0.004s\u000a</code></pre>\u000a\u000a<p>As can be seen, no much difference in comparison with the optimized <code>string_view</code> output param version.</p>\u000a\u000a<p>Note also there's <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3593.html" rel="noreferrer">a proposal for a <code>std::split</code></a> that would work like this.</p>\u000a
p777
sVquestion_id
p778
I14205096
sVlast_activity_date
p779
I1392652497
sVcreation_date
p780
I1357711358
sVscore
p781
I68
sVowner
p782
(dp783
Vuser_id
p784
I1000282
sVprofile_image
p785
Vhttps://www.gravatar.com/avatar/371832f83b79a41443fa50d3793b0cfd?s=128&d=identicon&r=PG
p786
sVuser_type
p787
Vregistered
p788
sVreputation
p789
I4954
sVlink
p790
Vhttp://stackoverflow.com/users/1000282/pepper-chico
p791
sVaccept_rate
p792
I73
sVdisplay_name
p793
Vpepper_chico
p794
ssVis_accepted
p795
I01
sVlast_edit_date
p796
I1392652497
sVanswer_id
p797
I14229152
sa(dp798
Vbody
p799
V<pre><code>import pandas as pd\u000apd.options.display.float_format = '${:,.2f}'.format\u000adf = pd.DataFrame([123.4567, 234.5678, 345.6789, 456.7890],\u000a                  index=['foo','bar','baz','quux'],\u000a                  columns=['cost'])\u000aprint(df)\u000a</code></pre>\u000a\u000a<p>yields</p>\u000a\u000a<pre><code>        cost\u000afoo  $123.46\u000abar  $234.57\u000abaz  $345.68\u000aquux $456.79\u000a</code></pre>\u000a\u000a<p>but this only works if you want <em>every</em> float to be formatted with a dollar sign.</p>\u000a\u000a<p>Otherwise, if you want dollar formatting for some floats only, then I think you'll have to pre-modify the dataframe (converting those floats to strings):</p>\u000a\u000a<pre><code>import pandas as pd\u000adf = pd.DataFrame([123.4567, 234.5678, 345.6789, 456.7890],\u000a                  index=['foo','bar','baz','quux'],\u000a                  columns=['cost'])\u000adf['foo'] = df['cost']\u000adf['cost'] = df['cost'].map('${:,.2f}'.format)\u000aprint(df)\u000a</code></pre>\u000a\u000a<p>yields</p>\u000a\u000a<pre><code>         cost       foo\u000afoo   $123.46  123.4567\u000abar   $234.57  234.5678\u000abaz   $345.68  345.6789\u000aquux  $456.79  456.7890\u000a</code></pre>\u000a
p800
sVquestion_id
p801
I20937538
sVlast_activity_date
p802
I1388949576
sVcreation_date
p803
I1388947461
sVscore
p804
I92
sVowner
p805
(dp806
Vuser_id
p807
I190597
sVprofile_image
p808
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p809
sVuser_type
p810
Vregistered
p811
sVreputation
p812
I425294
sVlink
p813
Vhttp://stackoverflow.com/users/190597/unutbu
p814
sVaccept_rate
p815
I88
sVdisplay_name
p816
Vunutbu
p817
ssVis_accepted
p818
I01
sVlast_edit_date
p819
I1388949576
sVanswer_id
p820
I20937592
sa(dp821
Vbody
p822
V<p>You can use <code>.replace</code>.  For example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'col2': {0: 'a', 1: 2, 2: np.nan}, 'col1': {0: 'w', 1: 1, 2: 2}})\u000a&gt;&gt;&gt; di = {1: "A", 2: "B"}\u000a&gt;&gt;&gt; df\u000a  col1 col2\u000a0    w    a\u000a1    1    2\u000a2    2  NaN\u000a&gt;&gt;&gt; df.replace({"col1": di})\u000a  col1 col2\u000a0    w    a\u000a1    A    2\u000a2    B  NaN\u000a</code></pre>\u000a\u000a<p>or directly on the <code>Series</code>, i.e. <code>df["col1"].replace(di, inplace=True)</code>.</p>\u000a
p823
sVquestion_id
p824
I20250771
sVlast_activity_date
p825
I1385579213
sVcreation_date
p826
I1385579213
sVscore
p827
I72
sVowner
p828
(dp829
Vuser_id
p830
I487339
sVprofile_image
p831
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p832
sVuser_type
p833
Vregistered
p834
sVreputation
p835
I147176
sVlink
p836
Vhttp://stackoverflow.com/users/487339/dsm
p837
sVdisplay_name
p838
VDSM
p839
ssVis_accepted
p840
I01
sVanswer_id
p841
I20250996
sa(dp842
Vbody
p843
V<p>Because I had the same problem, I want to stress that actually the first comment by <a href="http://stackoverflow.com/users/489590/brian-cain">Brian Cain</a> is the solution to the "IOError: [Errno 13]"-problem:</p>\u000a\u000a<p>If executed in the temp directory (<code>cd /tmp</code>), the IOError does not occur anymore if I run <code>sudo pip install foo</code>.</p>\u000a
p844
sVquestion_id
p845
I15028648
sVlast_activity_date
p846
I1381768836
sVcreation_date
p847
I1381768836
sVscore
p848
I4
sVowner
p849
(dp850
Vuser_id
p851
I995056
sVprofile_image
p852
Vhttps://www.gravatar.com/avatar/e08f93d0e00492c1b61805c52e3caa3c?s=128&d=identicon&r=PG&f=1
p853
sVuser_type
p854
Vregistered
p855
sVreputation
p856
I208
sVlink
p857
Vhttp://stackoverflow.com/users/995056/edgar
p858
sVdisplay_name
p859
VEdgar
p860
ssVis_accepted
p861
I01
sVanswer_id
p862
I19364999
sa(dp863
Vbody
p864
V<p>[edit] matplotlib in now (2013-10) on version 1.3.0 which includes this</p>\u000a\u000a<p>That ability was actually just added, and you need the Subversion version for it.  You can see the example code <a href="http://matplotlib.org/examples/pylab_examples/spine_placement_demo.html" rel="noreferrer">here</a>.</p>\u000a\u000a<p>I am just updating to say that there's a better <a href="https://github.com/matplotlib/matplotlib/blob/master/doc/mpl_toolkits/axes_grid/figures/simple_axisline3.py" rel="noreferrer">example</a> online now.  Still need the Subversion version though, there hasn't been a release with this yet.</p>\u000a\u000a<p>[edit] Matplotlib 0.99.0 RC1 was just released, and includes this capability.</p>\u000a
p865
sVquestion_id
p866
I925024
sVlast_activity_date
p867
I1380943081
sVcreation_date
p868
I1243588880
sVscore
p869
I29
sVowner
p870
(dp871
Vuser_id
p872
I49994
sVprofile_image
p873
Vhttps://www.gravatar.com/avatar/8d5bbd0ea4ff8dbfe349bbb3a67a5723?s=128&d=identicon&r=PG
p874
sVuser_type
p875
Vregistered
p876
sVreputation
p877
I6075
sVlink
p878
Vhttp://stackoverflow.com/users/49994/autoplectic
p879
sVdisplay_name
p880
VAutoplectic
p881
ssVis_accepted
p882
I01
sVlast_edit_date
p883
I1380943081
sVanswer_id
p884
I925141
sa(dp885
Vbody
p886
V<p>The file is being read as a bunch of <code>str</code>s, but it should be <code>unicode</code>s. Python tries to implicitly convert, but fails. Change:</p>\u000a\u000a<pre><code>job_titles = [line.strip() for line in title_file.readlines()]\u000a</code></pre>\u000a\u000a<p>to explicitly decode the <code>str</code>s to <code>unicode</code> (here assuming UTF-8):</p>\u000a\u000a<pre><code>job_titles = [line.decode('utf-8').strip() for line in title_file.readlines()]\u000a</code></pre>\u000a\u000a<p>It could also be solved by importing <a href="http://docs.python.org/2/library/codecs.html">the <code>codecs</code> module</a> and using <a href="http://docs.python.org/2/library/codecs.html#codecs.open"><code>codecs.open</code></a> rather than the built-in <a href="http://docs.python.org/2/library/functions.html#open"><code>open</code></a>.</p>\u000a
p887
sVquestion_id
p888
I18649512
sVlast_activity_date
p889
I1378439650
sVcreation_date
p890
I1378439650
sVscore
p891
I69
sVowner
p892
(dp893
Vuser_id
p894
I200291
sVprofile_image
p895
Vhttps://www.gravatar.com/avatar/399cacf55045372a29f1f844d12ee777?s=128&d=identicon&r=PG
p896
sVuser_type
p897
Vregistered
p898
sVreputation
p899
I89021
sVlink
p900
Vhttp://stackoverflow.com/users/200291/icktoofay
p901
sVaccept_rate
p902
I88
sVdisplay_name
p903
Vicktoofay
p904
ssVis_accepted
p905
I01
sVanswer_id
p906
I18649608
sa(dp907
Vbody
p908
V<p>You can use <a href="http://docs.python.org/2/library/json.html#json.loads" rel="noreferrer"><code>json.loads</code></a>:</p>\u000a\u000a<pre><code>import json\u000aimport requests\u000a\u000aresponse = requests.get(...)\u000ajson_data = json.loads(response.text)\u000a</code></pre>\u000a\u000a<p>This converts a given string into a dictionary which allows you to access your JSON data easily within your code.</p>\u000a
p909
sVquestion_id
p910
I16877422
sVlast_activity_date
p911
I1370122110
sVcreation_date
p912
I1370122110
sVscore
p913
I81
sVowner
p914
(dp915
Vuser_id
p916
I1267329
sVprofile_image
p917
Vhttps://www.gravatar.com/avatar/f943c14b945cadc0ee0afa6ef70d2103?s=128&d=identicon&r=PG
p918
sVuser_type
p919
Vregistered
p920
sVreputation
p921
I59061
sVlink
p922
Vhttp://stackoverflow.com/users/1267329/simeon-visser
p923
sVdisplay_name
p924
VSimeon Visser
p925
ssVis_accepted
p926
I01
sVanswer_id
p927
I16877439
sa(dp928
Vbody
p929
V<p>Yes, <code>if bar is not None</code> is more explicit, and thus better, assuming it is indeed what you want. That's not always the case, there are subtle differences: <code>if not bar:</code> will execute if <code>bar</code> is any kind of zero or empty container, or <code>False</code>.\u000aMany people do use <code>not bar</code> where they <em>really do</em> mean <code>bar is not None</code>.</p>\u000a
p930
sVquestion_id
p931
I16739555
sVlast_activity_date
p932
I1369412975
sVcreation_date
p933
I1369412975
sVscore
p934
I72
sVowner
p935
(dp936
Vuser_id
p937
I395760
sVprofile_image
p938
Vhttps://www.gravatar.com/avatar/ce3278f4dfbb7287c89d749c95d6f805?s=128&d=identicon&r=PG
p939
sVuser_type
p940
Vregistered
p941
sVreputation
p942
I75808
sVlink
p943
Vhttp://stackoverflow.com/users/395760/delnan
p944
sVaccept_rate
p945
I75
sVdisplay_name
p946
Vdelnan
p947
ssVis_accepted
p948
I01
sVanswer_id
p949
I16739649
sa(dp950
Vbody
p951
V<pre><code>&gt;&gt;&gt; A = [{'name':'john','age':45},\u000a     {'name':'andi','age':23},\u000a     {'name':'john','age':22},\u000a     {'name':'paul','age':35},\u000a     {'name':'john','age':21}]\u000a&gt;&gt;&gt; sorted(A, key = lambda user: (user['name'], user['age']))\u000a[{'age': 23, 'name': 'andi'}, {'age': 21, 'name': 'john'}, {'age': 22, 'name': 'john'}, {'age': 45, 'name': 'john'}, {'age': 35, 'name': 'paul'}]\u000a</code></pre>\u000a\u000a<p>This sorts by a tuple of the two attributes, the following is equivalent and much faster/cleaner:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from operator import itemgetter\u000a&gt;&gt;&gt; sorted(A, key=itemgetter('name', 'age'))\u000a[{'age': 23, 'name': 'andi'}, {'age': 21, 'name': 'john'}, {'age': 22, 'name': 'john'}, {'age': 45, 'name': 'john'}, {'age': 35, 'name': 'paul'}]\u000a</code></pre>\u000a\u000a<p>From the comments: @Bakuriu</p>\u000a\u000a<blockquote>\u000a  <p>I bet there is not a big difference between the two, but <code>itemgetter</code> avoids a bit of overhead because it extracts the keys and make the <code>tuple</code> during a single opcode(<code>CALL_FUNCTION</code>), while calling the <code>lambda</code> will have to call the function, load the various constants(which are other bytecodes) finally call the subscript (<code>BINARY_SUBSCR</code>), build the <code>tuple</code> and return it... that's a lot more work for the interpreter. </p>\u000a</blockquote>\u000a\u000a<p>To summarize: <code>itemgetter</code> keeps the execution fully on the <code>C</code> level, so it's as fast as possible.</p>\u000a
p952
sVquestion_id
p953
I16082954
sVlast_activity_date
p954
I1366376220
sVcreation_date
p955
I1366288106
sVscore
p956
I79
sVowner
p957
(dp958
Vuser_id
p959
I1219006
sVprofile_image
p960
Vhttps://i.stack.imgur.com/M1ZlR.jpg?s=128&g=1
p961
sVuser_type
p962
Vregistered
p963
sVreputation
p964
I62408
sVlink
p965
Vhttp://stackoverflow.com/users/1219006/jamylak
p966
sVaccept_rate
p967
I100
sVdisplay_name
p968
Vjamylak
p969
ssVis_accepted
p970
I01
sVlast_edit_date
p971
I1366376220
sVanswer_id
p972
I16082979
sa(dp973
Vbody
p974
V<p>It looks like you don't have the python mysql package installed, try:</p>\u000a\u000a<pre><code>pip install mysql-python\u000a</code></pre>\u000a\u000a<p>or if not using a virtual environment (on *nix hosts):</p>\u000a\u000a<pre><code>sudo pip install mysql-python\u000a</code></pre>\u000a
p975
sVquestion_id
p976
I15312732
sVlast_activity_date
p977
I1362849529
sVcreation_date
p978
I1362844961
sVscore
p979
I96
sVowner
p980
(dp981
Vuser_id
p982
I71734
sVprofile_image
p983
Vhttps://www.gravatar.com/avatar/69dfe7f38901cb0db708165fa81b6dd6?s=128&d=identicon&r=PG
p984
sVuser_type
p985
Vregistered
p986
sVreputation
p987
I1602
sVlink
p988
Vhttp://stackoverflow.com/users/71734/ron-e
p989
sVdisplay_name
p990
VRon E
p991
ssVis_accepted
p992
I01
sVlast_edit_date
p993
I1362849529
sVanswer_id
p994
I15312750
sa(dp995
Vbody
p996
V<p>I think you're reading those stats incorrectly. They show that Python is up to about 400 times <em>slower</em> than C++ and with the exception of a single case, Python is more of a memory hog. When it comes to source size though, Python wins flat out.</p>\u000a\u000a<p>My experiences with Python show the same definite trend that Python is on the order of between 10 and 100 times slower than C++ when doing any serious number crunching.  There are many reasons for this, the major ones being: a) Python is interpreted, while C++ is compiled; b) Python has no primitives, everything including the builtin types (int, float, etc.) are objects; c) a Python list can hold objects of different type, so each entry has to store additional data about its type. These all severely hinder both runtime and memory consumption.</p>\u000a\u000a<p>This is no reason to ignore Python though. A lot of software doesn't require much time or memory even with the 100 time slowness factor. Development cost is where Python wins with the simple and concise style. This improvement on development cost often outweighs the cost of additional cpu and memory resources. When it doesn't, however, then C++ wins.</p>\u000a
p997
sVquestion_id
p998
I801657
sVlast_activity_date
p999
I1360975546
sVcreation_date
p1000
I1240998906
sVscore
p1001
I149
sVowner
p1002
(dp1003
Vuser_id
p1004
I89806
sVprofile_image
p1005
Vhttps://www.gravatar.com/avatar/89cff7a629a2782ebc5805675fcb09f0?s=128&d=identicon&r=PG
p1006
sVuser_type
p1007
Vregistered
p1008
sVreputation
p1009
I67328
sVlink
p1010
Vhttp://stackoverflow.com/users/89806/marcog
p1011
sVaccept_rate
p1012
I58
sVdisplay_name
p1013
Vmarcog
p1014
ssVis_accepted
p1015
I01
sVlast_edit_date
p1016
I1360975546
sVanswer_id
p1017
I801671
sa(dp1018
Vcommunity_owned_date
p1019
I1349953589
sVbody
p1020
V<p>Every migration is inside a transaction. In PostgreSQL you must not update the table and then alter the table schema in one transaction.</p>\u000a\u000a<p>You need to split the data migration and the schema migration. First create the data migration with this code:</p>\u000a\u000a<pre><code> for sender in orm['fooapp.EmailSender'].objects.filter(footer=None):\u000a    sender.footer=''\u000a    sender.save()\u000a</code></pre>\u000a\u000a<p>Then create the schema migration:</p>\u000a\u000a<pre><code>manage.py schemamigration fooapp --auto\u000a</code></pre>\u000a\u000a<p>Now you have two transactions and the migration in two steps should work.</p>\u000a
p1021
sVquestion_id
p1022
I12838111
sVlast_activity_date
p1023
I1349953589
sVcreation_date
p1024
I1349953589
sVscore
p1025
I67
sVowner
p1026
(dp1027
Vuser_id
p1028
I633961
sVprofile_image
p1029
Vhttps://i.stack.imgur.com/0c29q.jpg?s=128&g=1
p1030
sVuser_type
p1031
Vregistered
p1032
sVreputation
p1033
I3055
sVlink
p1034
Vhttp://stackoverflow.com/users/633961/guettli
p1035
sVaccept_rate
p1036
I64
sVdisplay_name
p1037
Vguettli
p1038
ssVis_accepted
p1039
I01
sVanswer_id
p1040
I12838113
sa(dp1041
Vbody
p1042
V<p>The counter variable inside the loop is called <strong>loop.index</strong> in jinja2.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from jinja2 import Template\u000a\u000a&gt;&gt;&gt; s = "{% for element in elements %}{{loop.index}} {% endfor %}"\u000a&gt;&gt;&gt; Template(s).render(elements=["a", "b", "c", "d"])\u000a1 2 3 4\u000a</code></pre>\u000a\u000a<p>See <a href="http://jinja.pocoo.org/docs/templates/" rel="noreferrer">http://jinja.pocoo.org/docs/templates/</a> for more.</p>\u000a
p1043
sVquestion_id
p1044
I12145434
sVlast_activity_date
p1045
I1346090939
sVcreation_date
p1046
I1346090939
sVscore
p1047
I115
sVowner
p1048
(dp1049
Vuser_id
p1050
I1624868
sVprofile_image
p1051
Vhttps://www.gravatar.com/avatar/18d22cff4fc7408396e8a91e5221eb5e?s=128&d=identicon&r=PG
p1052
sVuser_type
p1053
Vregistered
p1054
sVreputation
p1055
I1449
sVlink
p1056
Vhttp://stackoverflow.com/users/1624868/sigi
p1057
sVdisplay_name
p1058
Vsigi
p1059
ssVis_accepted
p1060
I01
sVanswer_id
p1061
I12147197
sa(dp1062
Vbody
p1063
V<p><code>dict((k, v) for k, v in metadata.iteritems() if v)</code></p>\u000a\u000a<p>Note that all of your keys have values.  It's just that some of those values are the empty string.  There's no such thing as a key in a dict without a value; if it didn't have a value, it wouldn't be in the dict.</p>\u000a
p1064
sVquestion_id
p1065
I12118695
sVlast_activity_date
p1066
I1345862202
sVcreation_date
p1067
I1345862202
sVscore
p1068
I92
sVowner
p1069
(dp1070
Vuser_id
p1071
I1427416
sVprofile_image
p1072
Vhttps://i.stack.imgur.com/QWHKg.png?s=128&g=1
p1073
sVuser_type
p1074
Vregistered
p1075
sVreputation
p1076
I123766
sVlink
p1077
Vhttp://stackoverflow.com/users/1427416/brenbarn
p1078
sVaccept_rate
p1079
I50
sVdisplay_name
p1080
VBrenBarn
p1081
ssVis_accepted
p1082
I01
sVanswer_id
p1083
I12118700
sa(dp1084
Vbody
p1085
V<pre><code>'%f' % (x/y)\u000a</code></pre>\u000a\u000a<p>but you need to manage precision yourself. e.g.,</p>\u000a\u000a<pre><code>'%f' % (1/10**8)\u000a</code></pre>\u000a\u000a<p>will display zeros only.<br>\u000a<a href="http://docs.python.org/library/stdtypes.html#string-formatting-operations" rel="noreferrer">details are in the docs</a></p>\u000a\u000a<p>Or for Python 3 <a href="http://docs.python.org/py3k/library/stdtypes.html#old-string-formatting-operations" rel="noreferrer">the equivalent old formatting</a> or the <a href="http://docs.python.org/py3k/library/string.html#string-formatting" rel="noreferrer">newer style formatting</a></p>\u000a
p1086
sVquestion_id
p1087
I658763
sVlast_activity_date
p1088
I1345648510
sVcreation_date
p1089
I1237390248
sVscore
p1090
I30
sVowner
p1091
(dp1092
Vuser_id
p1093
I12855
sVprofile_image
p1094
Vhttps://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG
p1095
sVuser_type
p1096
Vregistered
p1097
sVreputation
p1098
I142797
sVlink
p1099
Vhttp://stackoverflow.com/users/12855/silentghost
p1100
sVaccept_rate
p1101
I86
sVdisplay_name
p1102
VSilentGhost
p1103
ssVis_accepted
p1104
I01
sVlast_edit_date
p1105
I1345648510
sVanswer_id
p1106
I658777
sa(dp1107
Vbody
p1108
V<p>Regarding <code>seek()</code> there's not too much to worry about.</p>\u000a\u000a<p>First of all, it is useful when operating over an open file.</p>\u000a\u000a<p>It's important to note that its syntax is as follows:</p>\u000a\u000a<pre><code>fp.seek(offset, from_what)\u000a</code></pre>\u000a\u000a<p>where <code>fp</code> is the file pointer you're working with; <code>offset</code> means how many positions you will move; <code>from_what</code> defines your point of reference:</p>\u000a\u000a<ul>\u000a<li><strong>0</strong>: means your reference point is the <strong>beginning</strong> of the file</li>\u000a<li><strong>1</strong>: means your reference point is the <strong>current</strong> file position</li>\u000a<li><strong>2</strong>: means your reference point is the <strong>end</strong> of the file</li>\u000a</ul>\u000a\u000a<p>if omitted, <code>from_what</code> defaults to 0.</p>\u000a\u000a<p>Never forget that when managing files, there'll always be a position inside that file where you are currently working on. When just open, that position is the beginning of the file, but as you work with it, you may advance.<br>\u000a<code>seek</code> will be useful to you when you need to <code>walk</code> along that open file, just as a path you are traveling into.</p>\u000a
p1109
sVquestion_id
p1110
I11696472
sVlast_activity_date
p1111
I1343429032
sVcreation_date
p1112
I1343428728
sVscore
p1113
I103
sVowner
p1114
(dp1115
Vuser_id
p1116
I677022
sVprofile_image
p1117
Vhttps://i.stack.imgur.com/jJlWr.png?s=128&g=1
p1118
sVuser_type
p1119
Vregistered
p1120
sVreputation
p1121
I4994
sVlink
p1122
Vhttp://stackoverflow.com/users/677022/nicol%c3%a1s
p1123
sVaccept_rate
p1124
I100
sVdisplay_name
p1125
VNicol&#225;s
p1126
ssVis_accepted
p1127
I01
sVlast_edit_date
p1128
I1343429032
sVanswer_id
p1129
I11696554
sa(dp1130
Vbody
p1131
V<p><a href="http://code.activestate.com/recipes/415983/" rel="noreferrer">http://code.activestate.com/recipes/415983/</a></p>\u000a\u000a<p><a href="http://sourceforge.net/projects/pyxser/" rel="noreferrer">http://sourceforge.net/projects/pyxser/</a></p>\u000a\u000a<p><a href="http://soapy.sourceforge.net/" rel="noreferrer">http://soapy.sourceforge.net/</a></p>\u000a\u000a<p><a href="http://www.ibm.com/developerworks/webservices/library/ws-pyth5/" rel="noreferrer">http://www.ibm.com/developerworks/webservices/library/ws-pyth5/</a></p>\u000a\u000a<p><a href="http://gnosis.cx/publish/programming/xml_matters_1.txt" rel="noreferrer">http://gnosis.cx/publish/programming/xml_matters_1.txt</a></p>\u000a
p1132
sVquestion_id
p1133
I1019895
sVlast_activity_date
p1134
I1341909790
sVcreation_date
p1135
I1245443354
sVscore
p1136
I14
sVowner
p1137
(dp1138
Vuser_id
p1139
I10661
sVprofile_image
p1140
Vhttps://www.gravatar.com/avatar/c2c732bbf13dc96670b210b3c0c1ead5?s=128&d=identicon&r=PG
p1141
sVuser_type
p1142
Vregistered
p1143
sVreputation
p1144
I277525
sVlink
p1145
Vhttp://stackoverflow.com/users/10661/s-lott
p1146
sVaccept_rate
p1147
I92
sVdisplay_name
p1148
VS.Lott
p1149
ssVis_accepted
p1150
I01
sVlast_edit_date
p1151
I1341909790
sVanswer_id
p1152
I1019912
sa(dp1153
Vbody
p1154
V<p>There is too much data to be displayed on the screen, therefore a summary is displayed instead.</p>\u000a\u000a<p>If you want to output the data anyway (it won't probably fit on a screen and does not look very well):</p>\u000a\u000a<pre><code>print paramdata.values\u000a</code></pre>\u000a\u000a<p>converts the dataframe to its numpy-array matrix representation.</p>\u000a\u000a<pre><code>paramdata.columns\u000a</code></pre>\u000a\u000a<p>stores the respective column names and</p>\u000a\u000a<pre><code>paramdata.index\u000a</code></pre>\u000a\u000a<p>stores the respective index (row names).</p>\u000a
p1155
sVquestion_id
p1156
I11361985
sVlast_activity_date
p1157
I1341577106
sVcreation_date
p1158
I1341577106
sVscore
p1159
I35
sVowner
p1160
(dp1161
Vuser_id
p1162
I449449
sVprofile_image
p1163
Vhttps://www.gravatar.com/avatar/b52c27e86c87d931e654d6a2d2cdf974?s=128&d=identicon&r=PG
p1164
sVuser_type
p1165
Vregistered
p1166
sVreputation
p1167
I94835
sVlink
p1168
Vhttp://stackoverflow.com/users/449449/eumiro
p1169
sVaccept_rate
p1170
I100
sVdisplay_name
p1171
Veumiro
p1172
ssVis_accepted
p1173
I01
sVanswer_id
p1174
I11362056
sa(dp1175
Vbody
p1176
V<p>Move plt.xticks(rotation=70) to right <em>before</em> the two avail_plot calls, eg</p>\u000a\u000a<pre><code>plt.xticks(rotation=70)\u000aavail_plot(axs[0], dates, s1, 'testing', 'green')\u000aavail_plot(axs[1], dates, s1, 'testing2', 'red')\u000a</code></pre>\u000a\u000a<p>This sets the rotation property before setting up the labels. Since you have two axes here, I think plt.xticks gets confused after you've made the two plots. It seems that at the point when plt.xticks doesn't do anything, plt.gca() does <em>not</em> give you the axes you want to modify, and so plt.xticks, which acts on the current axes, is not going to work.</p>\u000a\u000a<p>Alternatively, for example, not using plt.xticks, you can use</p>\u000a\u000a<pre><code>plt.setp( axs[1].xaxis.get_majorticklabels(), rotation=70 )\u000a</code></pre>\u000a\u000a<p><em>after</em> the two avail_plot calls.</p>\u000a
p1177
sVquestion_id
p1178
I11264521
sVlast_activity_date
p1179
I1341006450
sVcreation_date
p1180
I1341006003
sVscore
p1181
I103
sVowner
p1182
(dp1183
Vuser_id
p1184
I599265
sVprofile_image
p1185
Vhttps://i.stack.imgur.com/NbetJ.jpg?s=128&g=1
p1186
sVuser_type
p1187
Vregistered
p1188
sVreputation
p1189
I5067
sVlink
p1190
Vhttp://stackoverflow.com/users/599265/cge
p1191
sVaccept_rate
p1192
I78
sVdisplay_name
p1193
Vcge
p1194
ssVis_accepted
p1195
I01
sVlast_edit_date
p1196
I1341006450
sVanswer_id
p1197
I11269325
sa(dp1198
Vbody
p1199
V<p>Adam is only partially right.   Many, if not most, mathematicians will never touch it.  If there is a computer tool used at all, it's going to be something like <a href="http://en.wikipedia.org/wiki/Mathematica" rel="noreferrer">Mathematica</a> or <a href="http://en.wikipedia.org/wiki/Maple_(software)" rel="noreferrer">Maple</a>.  Engineering departments, on the other hand, often rely on it and there are definitely useful things for some applied mathematicians.  It's also used heavily in industry in some areas.</p>\u000a\u000a<p>Something you have to realize about MATLAB is that it started off as a wrapper on <a href="http://en.wikipedia.org/wiki/Fortran" rel="noreferrer">Fortran</a> libraries for linear algebra. For a long time, it had an attitude that "all the world is an array of doubles (floats)".  As a language, it has grown very organically, and there are some flaws that are very much baked in, if you look at it just as a programming language.</p>\u000a\u000a<p>However, if you look at it as an environment for doing certain types of research in, it has some real strengths. It's about as good as it gets for doing floating point linear algebra.  The notation is simple and powerful, the implementation fast and trusted.  It is very good at generating plots and other interactive tasks.  There are a large number of `toolboxes' with good code for particular tasks, that are affordable.  There is a large community of users that share numerical codes (Python + <a href="http://en.wikipedia.org/wiki/NumPy" rel="noreferrer">NumPy</a> has nothing in the same league, at least yet)</p>\u000a\u000a<p>Python, warts and all, is a much better programming language (as are many others).  However, it's a decade or so behind in terms of the tools.</p>\u000a\u000a<p>The key point is that the majority of people who use MATLAB are not programmers really, and don't want to be. </p>\u000a\u000a<p>It's a lousy choice for a general programming language; it's quirky, slow for many tasks (you need to vectorize things to get efficient codes), and not easy to integrate with the outside world.  On the other hand, for the things it is good at, it is very very good.  Very few things compare.  There's a company with reasonable support and who knows how many man-years put into it.  This can matter in industry.</p>\u000a\u000a<p>Strictly looking at your Python vs. MATLAB comparison, they are mostly different tools for different jobs.  In the areas where they do overlap a bit, it's hard to say what the better route to go is (depends a lot on what you're trying to do).  But mostly Python isn't all that good at MATLAB's core strengths, and vice versa.</p>\u000a
p1200
sVquestion_id
p1201
I179904
sVlast_activity_date
p1202
I1340419196
sVcreation_date
p1203
I1223412457
sVscore
p1204
I78
sVowner
p1205
(dp1206
Vuser_id
p1207
I14143
sVprofile_image
p1208
Vhttps://www.gravatar.com/avatar/c7fb64856eda5af7f46b4996ab8fd37b?s=128&d=identicon&r=PG
p1209
sVuser_type
p1210
Vregistered
p1211
sVreputation
p1212
I6448
sVlink
p1213
Vhttp://stackoverflow.com/users/14143/simon
p1214
sVdisplay_name
p1215
Vsimon
p1216
ssVis_accepted
p1217
I01
sVlast_edit_date
p1218
I1340419196
sVanswer_id
p1219
I180341
sa(dp1220
Vbody
p1221
V<p>So make a temporary dict with the key being the <code>id</code>. This filters out the duplicates.\u000aThe <code>values()</code> of the dict will be the list</p>\u000a\u000a<p>In Python2.7</p>\u000a\u000a<pre><code>&gt;&gt;&gt; L=[\u000a... {'id':1,'name':'john', 'age':34},\u000a... {'id':1,'name':'john', 'age':34},\u000a... {'id':2,'name':'hanna', 'age':30},\u000a... ]\u000a&gt;&gt;&gt; {v['id']:v for v in L}.values()\u000a[{'age': 34, 'id': 1, 'name': 'john'}, {'age': 30, 'id': 2, 'name': 'hanna'}]\u000a</code></pre>\u000a\u000a<p>In Python3</p>\u000a\u000a<pre><code>&gt;&gt;&gt; L=[\u000a... {'id':1,'name':'john', 'age':34},\u000a... {'id':1,'name':'john', 'age':34},\u000a... {'id':2,'name':'hanna', 'age':30},\u000a... ] \u000a&gt;&gt;&gt; list({v['id']:v for v in L}.values())\u000a[{'age': 34, 'id': 1, 'name': 'john'}, {'age': 30, 'id': 2, 'name': 'hanna'}]\u000a</code></pre>\u000a\u000a<p>In Python2.5/2.6</p>\u000a\u000a<pre><code>&gt;&gt;&gt; L=[\u000a... {'id':1,'name':'john', 'age':34},\u000a... {'id':1,'name':'john', 'age':34},\u000a... {'id':2,'name':'hanna', 'age':30},\u000a... ] \u000a&gt;&gt;&gt; dict((v['id'],v) for v in L).values()\u000a[{'age': 34, 'id': 1, 'name': 'john'}, {'age': 30, 'id': 2, 'name': 'hanna'}]\u000a</code></pre>\u000a
p1222
sVquestion_id
p1223
I11092511
sVlast_activity_date
p1224
I1340063582
sVcreation_date
p1225
I1340062943
sVscore
p1226
I95
sVowner
p1227
(dp1228
Vuser_id
p1229
I174728
sVprofile_image
p1230
Vhttps://i.stack.imgur.com/eRO75.jpg?s=128&g=1
p1231
sVuser_type
p1232
Vregistered
p1233
sVreputation
p1234
I167078
sVlink
p1235
Vhttp://stackoverflow.com/users/174728/john-la-rooy
p1236
sVaccept_rate
p1237
I100
sVdisplay_name
p1238
VJohn La Rooy
p1239
ssVis_accepted
p1240
I01
sVlast_edit_date
p1241
I1340063582
sVanswer_id
p1242
I11092590
sa(dp1243
Vbody
p1244
V<p>By using <code>(</code>,<code>)</code>, you are capturing the group, if you simply remove them you will not have this problem.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; str1 = "a    b     c      d"\u000a&gt;&gt;&gt; re.split(" +", str1)\u000a['a', 'b', 'c', 'd']\u000a</code></pre>\u000a\u000a<p>However there is no need for regex, <code>str.split</code> without any delimiter specified will split this by whitespace for you. This would be the best way in this case.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; str1.split()\u000a['a', 'b', 'c', 'd']\u000a</code></pre>\u000a\u000a<p>If you really wanted regex you can use this (<code>'\u005cs'</code> represents whitespace and it's clearer):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; re.split("\u005cs+", str1)\u000a['a', 'b', 'c', 'd']\u000a</code></pre>\u000a\u000a<p>or you can find all non-whitespace characters</p>\u000a\u000a<pre><code>&gt;&gt;&gt; re.findall(r'\u005cS+',str1)\u000a['a', 'b', 'c', 'd']\u000a</code></pre>\u000a
p1245
sVquestion_id
p1246
I10974932
sVlast_activity_date
p1247
I1339394854
sVcreation_date
p1248
I1339393461
sVscore
p1249
I70
sVowner
p1250
(dp1251
Vuser_id
p1252
I1219006
sVprofile_image
p1253
Vhttps://i.stack.imgur.com/M1ZlR.jpg?s=128&g=1
p1254
sVuser_type
p1255
Vregistered
p1256
sVreputation
p1257
I62408
sVlink
p1258
Vhttp://stackoverflow.com/users/1219006/jamylak
p1259
sVaccept_rate
p1260
I100
sVdisplay_name
p1261
Vjamylak
p1262
ssVis_accepted
p1263
I01
sVlast_edit_date
p1264
I1339394854
sVanswer_id
p1265
I10974957
sa(dp1266
Vbody
p1267
V<p>If you use an operating system that uses copy-on-write <code>fork()</code> semantics (like any common unix), then as long as you never alter your data structure it will be available to all child processes without taking up additional memory.  You will not have to do anything special (except make absolutely sure you don't alter the object).</p>\u000a\u000a<p><strong>The most efficient thing <em>you</em> can do for your problem</strong> would be to pack your array into an efficient array structure (using <code>numpy</code> or <a href="http://docs.python.org/library/array.html"><code>array</code></a>), place that in shared memory, wrap it with <code>multiprocessing.Array</code>, and pass that to your functions. <a href="http://stackoverflow.com/a/5550156/1002469">This answer shows how to do that</a>.</p>\u000a\u000a<p>If you want a <em>writeable</em> shared object, then you will need to wrap it with some kind of synchronization or locking. <code>multiprocessing</code> provides <a href="http://docs.python.org/library/multiprocessing.html#sharing-state-between-processes">two methods of doing this</a>: one using shared memory (suitable for simple values, arrays, or ctypes) or a <code>Manager</code> proxy, where one process holds the memory and a manager arbitrates access to it from other processes (even over a network).</p>\u000a\u000a<p>The <code>Manager</code> approach can be used with arbitrary Python objects, but will be slower than the equivalent using shared memory because the objects need to be serialized/deserialized and sent between processes.</p>\u000a\u000a<p>There are a <a href="http://wiki.python.org/moin/ParallelProcessing">wealth of parallel processing libraries and approaches available in Python</a>. <code>multiprocessing</code> is an excellent and well rounded library, but if you have special needs perhaps one of the other approaches may be better.</p>\u000a
p1268
sVquestion_id
p1269
I10721915
sVlast_activity_date
p1270
I1337791374
sVcreation_date
p1271
I1337791374
sVscore
p1272
I58
sVowner
p1273
(dp1274
Vuser_id
p1275
I1002469
sVprofile_image
p1276
Vhttps://www.gravatar.com/avatar/802d9e3041f1f378a92d9d4e40c0f329?s=128&d=identicon&r=PG
p1277
sVuser_type
p1278
Vregistered
p1279
sVreputation
p1280
I23651
sVlink
p1281
Vhttp://stackoverflow.com/users/1002469/francis-avila
p1282
sVaccept_rate
p1283
I100
sVdisplay_name
p1284
VFrancis Avila
p1285
ssVis_accepted
p1286
I01
sVanswer_id
p1287
I10724332
sa(dp1288
Vbody
p1289
V<p>You could manually adjust the spacing using <code>plt.subplots_adjust(top=0.85)</code>:</p>\u000a\u000a<pre><code>import numpy as np\u000aimport matplotlib.pyplot as plt\u000a\u000af = np.random.random(100)\u000ag = np.random.random(100)\u000afig = plt.figure()\u000afig.suptitle('Long Suptitle', fontsize=24)\u000aplt.subplot(121)\u000aplt.plot(f)\u000aplt.title('Very Long Title 1', fontsize=20)\u000aplt.subplot(122)\u000aplt.plot(g)\u000aplt.title('Very Long Title 2', fontsize=20)\u000aplt.subplots_adjust(top=0.85)\u000aplt.show()\u000a</code></pre>\u000a
p1290
sVquestion_id
p1291
I8248467
sVlast_activity_date
p1292
I1322079416
sVcreation_date
p1293
I1322079416
sVscore
p1294
I53
sVowner
p1295
(dp1296
Vuser_id
p1297
I190597
sVprofile_image
p1298
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p1299
sVuser_type
p1300
Vregistered
p1301
sVreputation
p1302
I425294
sVlink
p1303
Vhttp://stackoverflow.com/users/190597/unutbu
p1304
sVaccept_rate
p1305
I88
sVdisplay_name
p1306
Vunutbu
p1307
ssVis_accepted
p1308
I01
sVanswer_id
p1309
I8248506
sa(dp1310
Vbody
p1311
V<p>I installed ordereddict on python 2.6 with pip</p>\u000a\u000a<pre><code>pip install ordereddict\u000a</code></pre>\u000a
p1312
sVquestion_id
p1313
I1617078
sVlast_activity_date
p1314
I1311812451
sVcreation_date
p1315
I1311812451
sVscore
p1316
I58
sVowner
p1317
(dp1318
Vuser_id
p1319
I90801
sVprofile_image
p1320
Vhttps://www.gravatar.com/avatar/6acc4764438b6f3e80e9645ec8259353?s=128&d=identicon&r=PG
p1321
sVuser_type
p1322
Vregistered
p1323
sVreputation
p1324
I66918
sVlink
p1325
Vhttp://stackoverflow.com/users/90801/arthur-ulfeldt
p1326
sVaccept_rate
p1327
I82
sVdisplay_name
p1328
VArthur Ulfeldt
p1329
ssVis_accepted
p1330
I01
sVanswer_id
p1331
I6852800
sa(dp1332
Vbody
p1333
V<p>This does what you want:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])\u000aTrue\u000a</code></pre>\u000a\u000a<p>Your result happens because python interprets your expression as a tuple:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 'a', 'b'\u000a('a', 'b')\u000a&gt;&gt;&gt; 'a', 5 + 2\u000a('a', 7)\u000a&gt;&gt;&gt; 'a', 'x' in 'xerxes'\u000a('a', True)\u000a</code></pre>\u000a
p1334
sVquestion_id
p1335
I6159313
sVlast_activity_date
p1336
I1306550138
sVcreation_date
p1337
I1306550138
sVscore
p1338
I85
sVowner
p1339
(dp1340
Vuser_id
p1341
I577088
sVprofile_image
p1342
Vhttps://i.stack.imgur.com/5UZyo.jpg?s=128&g=1
p1343
sVuser_type
p1344
Vregistered
p1345
sVreputation
p1346
I67900
sVlink
p1347
Vhttp://stackoverflow.com/users/577088/senderle
p1348
sVdisplay_name
p1349
Vsenderle
p1350
ssVis_accepted
p1351
I01
sVanswer_id
p1352
I6159329
sa(dp1353
Vbody
p1354
V<p><code>item</code> is most likely a string in your code; the string indices are the ones in the square brackets, e.g., <code>gravatar_id</code>. So I'd first check your <code>data</code> variable to see what you received there; I guess that <code>data</code> is a list of strings (or at least a list containing at least one string) while it should be a list of dictionaries.</p>\u000a
p1355
sVquestion_id
p1356
I6077675
sVlast_activity_date
p1357
I1305926213
sVcreation_date
p1358
I1305926213
sVscore
p1359
I31
sVowner
p1360
(dp1361
Vuser_id
p1362
I156771
sVprofile_image
p1363
Vhttps://www.gravatar.com/avatar/2163ccb26148ab885d6d827e7cb270a1?s=128&d=identicon&r=PG
p1364
sVuser_type
p1365
Vregistered
p1366
sVreputation
p1367
I31771
sVlink
p1368
Vhttp://stackoverflow.com/users/156771/tam%c3%a1s
p1369
sVaccept_rate
p1370
I100
sVdisplay_name
p1371
VTam&#225;s
p1372
ssVis_accepted
p1373
I01
sVanswer_id
p1374
I6077684
sa(dp1375
Vbody
p1376
V<p>I believe you need to create a file called <code>__init__.py</code> in the Models directory so that python treats it as a module.</p>\u000a\u000a<p>Then you can do:</p>\u000a\u000a<pre><code>from Models.user import User\u000a</code></pre>\u000a\u000a<p>You can include code in the <code>__init__.py</code> (for instance initialization code that a few different classes need) or leave it blank.  But it must be there.</p>\u000a
p1377
sVquestion_id
p1378
I456481
sVlast_activity_date
p1379
I1300226211
sVcreation_date
p1380
I1232337615
sVscore
p1381
I81
sVowner
p1382
(dp1383
Vuser_id
p1384
I7856
sVprofile_image
p1385
Vhttps://www.gravatar.com/avatar/192d4f403439df36217eade100e56281?s=128&d=identicon&r=PG
p1386
sVuser_type
p1387
Vregistered
p1388
sVreputation
p1389
I15604
sVlink
p1390
Vhttp://stackoverflow.com/users/7856/dana
p1391
sVaccept_rate
p1392
I95
sVdisplay_name
p1393
VDana
p1394
ssVis_accepted
p1395
I01
sVlast_edit_date
p1396
I1300226211
sVanswer_id
p1397
I456491
sa(dp1398
Vbody
p1399
V<p>With a list comprehension.</p>\u000a\u000a<pre><code>[x[1] for x in L]\u000a</code></pre>\u000a
p1400
sVquestion_id
p1401
I4800811
sVlast_activity_date
p1402
I1296007507
sVcreation_date
p1403
I1296007507
sVscore
p1404
I60
sVowner
p1405
(dp1406
Vuser_id
p1407
I20862
sVprofile_image
p1408
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p1409
sVuser_type
p1410
Vregistered
p1411
sVreputation
p1412
I481018
sVlink
p1413
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p1414
sVaccept_rate
p1415
I60
sVdisplay_name
p1416
VIgnacio Vazquez-Abrams
p1417
ssVis_accepted
p1418
I01
sVanswer_id
p1419
I4800816
sa(dp1420
Vbody
p1421
V<p>To get the output of <code>ls</code>, use <a href="http://docs.python.org/library/subprocess.html#subprocess.PIPE" rel="noreferrer"><code>stdout=subprocess.PIPE</code></a>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; proc = subprocess.Popen('ls', stdout=subprocess.PIPE)\u000a&gt;&gt;&gt; output = proc.stdout.read()\u000a&gt;&gt;&gt; print output\u000abar\u000abaz\u000afoo\u000a</code></pre>\u000a\u000a<p>The command <code>cdrecord --help</code> outputs to stderr, so you need to pipe that indstead. You should also break up the command into a list of tokens as I've done below, or the alternative is to pass the <code>shell=True</code> argument but this fires up a fully-blown shell which can be dangerous if you don't control the contents of the command string.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; proc = subprocess.Popen(['cdrecord', '--help'], stderr=subprocess.PIPE)\u000a&gt;&gt;&gt; output = proc.stderr.read()\u000a&gt;&gt;&gt; print output\u000aUsage: wodim [options] track1...trackn\u000aOptions:\u000a    -version    print version information and exit\u000a    dev=target  SCSI target to use as CD/DVD-Recorder\u000a    gracetime=# set the grace time before starting to write to #.\u000a...\u000a</code></pre>\u000a\u000a<p>If you have a command that outputs to both stdout and stderr and you want to merge them, you can do that by piping stderr to stdout and then catching stdout.</p>\u000a\u000a<pre><code>subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\u000a</code></pre>\u000a\u000a<p>As mentioned by <a href="http://stackoverflow.com/questions/4514751/pipe-subprocess-standard-output-to-a-variable/4514905#4514905">Chris Morgan</a>, you should be using <code>proc.communicate()</code> instead of <code>proc.read()</code>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; proc = subprocess.Popen(['cdrecord', '--help'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\u000a&gt;&gt;&gt; out, err = proc.communicate()\u000a&gt;&gt;&gt; print 'stdout:', out\u000astdout: \u000a&gt;&gt;&gt; print 'stderr:', err\u000astderr:Usage: wodim [options] track1...trackn\u000aOptions:\u000a    -version    print version information and exit\u000a    dev=target  SCSI target to use as CD/DVD-Recorder\u000a    gracetime=# set the grace time before starting to write to #.\u000a...\u000a</code></pre>\u000a
p1422
sVquestion_id
p1423
I4514751
sVlast_activity_date
p1424
I1293065038
sVcreation_date
p1425
I1293061780
sVscore
p1426
I87
sVowner
p1427
(dp1428
Vuser_id
p1429
I89806
sVprofile_image
p1430
Vhttps://www.gravatar.com/avatar/89cff7a629a2782ebc5805675fcb09f0?s=128&d=identicon&r=PG
p1431
sVuser_type
p1432
Vregistered
p1433
sVreputation
p1434
I67328
sVlink
p1435
Vhttp://stackoverflow.com/users/89806/marcog
p1436
sVaccept_rate
p1437
I58
sVdisplay_name
p1438
Vmarcog
p1439
ssVis_accepted
p1440
I01
sVlast_edit_date
p1441
I1293065038
sVanswer_id
p1442
I4514776
sa(dp1443
Vbody
p1444
V<p>I know this is an older post, but I spent a long time trying to find a solution.  I came across a decent one using only ReportLab and PyPDF so I thought I'd share:</p>\u000a\u000a<ol>\u000a<li>read your PDF using PdfFileReader(), we'll call this <em>input</em></li>\u000a<li>create a new pdf containing your text to add using ReportLab, save this as a string object</li>\u000a<li>read the string object using PdfFileReader(), we'll call this <em>text</em></li>\u000a<li>create a new PDF object using PdfFileWriter(), we'll call this <em>output</em></li>\u000a<li>iterate through <em>input</em> and apply .mergePage(<em>text</em>.getPage(0)) for each page you want the text added to, then use <em>output</em>.addPage() to add the modified pages to a new document</li>\u000a</ol>\u000a\u000a<p>This works well for simple text additions.  See PyPDF's sample for watermarking a document.</p>\u000a\u000a<p>Here is some code to answer the question below:</p>\u000a\u000a<pre><code>packet = StringIO.StringIO()\u000acan = canvas.Canvas(packet, pagesize=letter)\u000a&lt;do something with canvas&gt;\u000acan.save()\u000apacket.seek(0)\u000ainput = PdfFileReader(packet)\u000a</code></pre>\u000a\u000a<p>From here you can merge the pages of the input file with another document</p>\u000a
p1445
sVquestion_id
p1446
I1180115
sVlast_activity_date
p1447
I1291219414
sVcreation_date
p1448
I1265066911
sVscore
p1449
I59
sVowner
p1450
(dp1451
Vuser_id
p1452
I81439
sVprofile_image
p1453
Vhttps://www.gravatar.com/avatar/c976b85e7c95f5383dff8f7d58f5a7f4?s=128&d=identicon&r=PG
p1454
sVuser_type
p1455
Vregistered
p1456
sVreputation
p1457
I1807
sVlink
p1458
Vhttp://stackoverflow.com/users/81439/dwelch
p1459
sVaccept_rate
p1460
I50
sVdisplay_name
p1461
Vdwelch
p1462
ssVis_accepted
p1463
I01
sVlast_edit_date
p1464
I1291219414
sVanswer_id
p1465
I2180841
sa(dp1466
Vbody
p1467
V<p>One problem is that easy_install is set up to download and install .egg files or source distributions (contained within .tgz, .tar, .tar.gz, .tar.bz2, or .zip files). It doesn't know how to deal with the PyWin32 extensions because they are put <a href="http://sourceforge.net/projects/pywin32/files/" rel="noreferrer">within a separate installer executable</a>. You will need to download the appropriate PyWin32 installer file (for Python 2.7) and run it yourself. When you run easy_install again (provided you have it installed right, like in Sergio's instructions), you should see that your winpexpect package has been installed correctly.</p>\u000a\u000a<p>Since it's Windows and open source we are talking about, it can often be a messy combination of install methods to get things working properly. However, easy_install is still better than hand-editing configuration files, for sure.</p>\u000a
p1468
sVquestion_id
p1469
I4016151
sVlast_activity_date
p1470
I1288023037
sVcreation_date
p1471
I1288023037
sVscore
p1472
I8
sVowner
p1473
(dp1474
Vuser_id
p1475
I28916
sVprofile_image
p1476
Vhttps://www.gravatar.com/avatar/7ce90b5aa0b1bc9a39d371c7c7d85a24?s=128&d=identicon&r=PG
p1477
sVuser_type
p1478
Vregistered
p1479
sVreputation
p1480
I2489
sVlink
p1481
Vhttp://stackoverflow.com/users/28916/brandon
p1482
sVaccept_rate
p1483
I88
sVdisplay_name
p1484
VBrandon
p1485
ssVis_accepted
p1486
I01
sVanswer_id
p1487
I4016552
sa(dp1488
Vbody
p1489
V<p>you are not putting a <code>"</code> before the end of the line. </p>\u000a\u000a<p>use </p>\u000a\u000a<pre><code>""" a very long string ...... \u000a....that can span multiple lines\u000a"""\u000a</code></pre>\u000a\u000a<p>if you want to do this.</p>\u000a
p1490
sVquestion_id
p1491
I3561691
sVlast_activity_date
p1492
I1282691270
sVcreation_date
p1493
I1282691270
sVscore
p1494
I73
sVowner
p1495
(dp1496
Vuser_id
p1497
I376728
sVprofile_image
p1498
Vhttps://www.gravatar.com/avatar/908d58f023f47e0a7d07fc671606341d?s=128&d=identicon&r=PG
p1499
sVuser_type
p1500
Vregistered
p1501
sVreputation
p1502
I39276
sVlink
p1503
Vhttp://stackoverflow.com/users/376728/aaronasterling
p1504
sVaccept_rate
p1505
I94
sVdisplay_name
p1506
Vaaronasterling
p1507
ssVis_accepted
p1508
I01
sVanswer_id
p1509
I3561704
sa(dp1510
Vbody
p1511
V<ul>\u000a<li><p>At launch, <code>Java</code> was the only officially supported programming language for building distributable third-party Android software.</p></li>\u000a<li><p>Android Native Development Kit (Android NDK) which will allow developers to build Android software components with <code>C</code> and <code>C++</code>.</p></li>\u000a<li><p>In addition to delivering support for native code, Google is also extending Android to support popular <strong>dynamic scripting languages</strong>. Earlier this month, Google launched  the  <strong><a href="http://code.google.com/p/android-scripting/" rel="noreferrer">Android Scripting Environment (ASE) </a></strong> which allows third-party developers to build simple Android applications with <code>perl</code>, <code>JRuby</code>, <code>Python</code>, <code>LUA</code> and <code>BeanShell</code>. For having idea and usage of <strong>ASE</strong>, refer this <a href="http://google-opensource.blogspot.com/2009/06/introducing-android-scripting.html" rel="noreferrer"><strong><em>Example link</em></strong></a>.</p></li>\u000a<li><p><a href="http://www.assembla.com/wiki/show/scala-ide/Developing_for_Android" rel="noreferrer"> Scala </a> is also supported. For having examples of Scala, refer these <a href="http://www.scala-lang.org/node/219" rel="noreferrer"> <strong>Example link-1</strong> </a>,  <a href="http://www.artima.com/scalazine/articles/steps.html" rel="noreferrer"> <strong>Example link-2</strong> </a>, <a href="http://www.cs.helsinki.fi/u/wikla/OTS/Sisalto/examples/" rel="noreferrer"> <strong>Example link-3</strong> </a>.</p></li>\u000a<li><p>Just now i have referred one <strong><em><a href="http://www.codeproject.com/Articles/73089/Comparison-of-Android-vs-iPhone-vs-Nokia-vs-BlackB.aspx" rel="noreferrer"> Article Here </a></em></strong> in which i found some useful information as follows:</p>\u000a\u000a<ol>\u000a<li>programming language is Java but bridges from other languages exist <code>(C# .net - Mono, etc)</code>.</li>\u000a<li>can run script languages like <code>LUA</code>, <code>Perl</code>, <code>Python</code>, <code>BeanShell</code>, etc.\u000a<br/><br/></li>\u000a</ol></li>\u000a<li><p>I have read 2nd article at <a href="http://www.informationweek.com/news/internet/google/showArticle.jhtml?articleID=218700186" rel="noreferrer">Google Releases 'Simple' Android Programming Language </a>. For example of this, <A href="http://simplecompiler.blogspot.com/" rel="noreferrer">refer this </a>.  </p></li>\u000a<li><p>Just now (2 Aug 2010) i have read an article which describes regarding "<strong>Frink Programming language and Calculating Tool for Android</strong>", refer this links <a href="http://www.androidzoom.com/android_applications/tools/frink-programming-language_fbiv.html" rel="noreferrer"> <strong>Link-1</strong> </a>, <a href="http://futureboy.homeip.net/frinkdocs/android.html" rel="noreferrer"> <strong>Link-2</strong> </a></p></li>\u000a<li><p>On 4-Aug-2010, i have found Regarding <strong><em><code>RenderScript</code></em></strong>. Basically, It is said to be a C-like language for high performance graphics programming, which helps you easily write efficient Visual effects and animations in your Android Applications. Its not released yet as it isn't finished.</p></li>\u000a</ul>\u000a
p1512
sVquestion_id
p1513
I1994703
sVlast_activity_date
p1514
I1280903827
sVcreation_date
p1515
I1279946242
sVscore
p1516
I59
sVowner
p1517
(dp1518
Vuser_id
p1519
I379693
sVprofile_image
p1520
Vhttps://www.gravatar.com/avatar/2c9f04076de133db434c7d9966ac6f6b?s=128&d=identicon&r=PG
p1521
sVuser_type
p1522
Vregistered
p1523
sVreputation
p1524
I82553
sVlink
p1525
Vhttp://stackoverflow.com/users/379693/paresh-mayani
p1526
sVaccept_rate
p1527
I97
sVdisplay_name
p1528
VParesh Mayani
p1529
ssVis_accepted
p1530
I01
sVlast_edit_date
p1531
I1280903827
sVanswer_id
p1532
I3323834
sa(dp1533
Vbody
p1534
V<p>Perhaps if you flush the output</p>\u000a\u000a<pre><code>import sys\u000a\u000aV = range(100000)\u000afor x in V:\u000a    print x\u000a    sys.stdout.flush()\u000a</code></pre>\u000a
p1535
sVquestion_id
p1536
I3250749
sVlast_activity_date
p1537
I1279145511
sVcreation_date
p1538
I1279145511
sVscore
p1539
I21
sVowner
p1540
(dp1541
Vuser_id
p1542
I97160
sVprofile_image
p1543
Vhttps://www.gravatar.com/avatar/4b8ce2e5dff7e913642c84213353f6a3?s=128&d=identicon&r=PG
p1544
sVuser_type
p1545
Vregistered
p1546
sVreputation
p1547
I106681
sVlink
p1548
Vhttp://stackoverflow.com/users/97160/amro
p1549
sVaccept_rate
p1550
I100
sVdisplay_name
p1551
VAmro
p1552
ssVis_accepted
p1553
I01
sVanswer_id
p1554
I3250975
sa(dp1555
Vbody
p1556
V<blockquote>\u000a  <p>I want <code>form.data['field']</code> and\u000a  <code>form.field.value</code> to always have the\u000a  same value</p>\u000a</blockquote>\u000a\u000a<p>This is feasible, because it involves decorated names and indexing -- i.e., <strong>completely</strong> different constructs from the <strong>barenames</strong> <code>a</code> and <code>b</code> that you're asking about, and for with your request is utterly impossible.  Why ask for something impossible <strong>and</strong> totally different from the (possible) thing you actually <em>want</em>?!</p>\u000a\u000a<p>Maybe you don't realize how drastically different barenames and decorated names are.  When you refer to a barename <code>a</code>, you're getting exactly the object <code>a</code> was last bound to in this scope (or an exception if it wasn't bound in this scope) -- this is such a deep and fundamental aspect of Python that it can't possibly be subverted.  When you refer to a <em>decorated</em> name <code>x.y</code>, you're asking an object (the object <code>x</code> refers to) to please supply "the <code>y</code> attribute" -- and in response to that request, the object can perform totally arbitrary computations (and indexing is quite similar: it also allows arbitrary computations to be performed in response).</p>\u000a\u000a<p>Now, your "actual desiderata" example is mysterious because in each case two levels of indexing or attribute-getting are involved, so the subtlety you crave could be introduced in many ways.  What other attributes is <code>form.field</code> suppose to have, for example, besides <code>value</code>?  Without that further <code>.value</code> computations, possibilities would include:</p>\u000a\u000a<pre><code>class Form(object):\u000a   ...\u000a   def __getattr__(self, name):\u000a       return self.data[name]\u000a</code></pre>\u000a\u000a<p>and</p>\u000a\u000a<pre><code>class Form(object):\u000a   ...\u000a   @property\u000a   def data(self):\u000a       return self.__dict__\u000a</code></pre>\u000a\u000a<p>The presence of <code>.value</code> suggests picking the first form, plus a kind-of-useless wrapper:</p>\u000a\u000a<pre><code>class KouWrap(object):\u000a   def __init__(self, value):\u000a       self.value = value\u000a\u000aclass Form(object):\u000a   ...\u000a   def __getattr__(self, name):\u000a       return KouWrap(self.data[name])\u000a</code></pre>\u000a\u000a<p>If <em>assignments</em> such <code>form.field.value = 23</code> is also supposed to set the entry in <code>form.data</code>, then the wrapper must become more complex indeed, and not all that useless:</p>\u000a\u000a<pre><code>class MciWrap(object):\u000a   def __init__(self, data, k):\u000a       self._data = data\u000a       self._k = k\u000a   @property\u000a   def value(self):\u000a       return self._data[self._k]\u000a   @value.setter\u000a   def value(self, v)\u000a       self._data[self._k] = v\u000a\u000aclass Form(object):\u000a   ...\u000a   def __getattr__(self, name):\u000a       return MciWrap(self.data, name)\u000a</code></pre>\u000a\u000a<p>The latter example is roughly as close as it gets, in Python, to the sense of "a pointer" as you seem to want -- but it's crucial to understand that such subtleties can ever only work with <em>indexing</em> and/or <em>decorated names</em>, <strong>never</strong> with barenames as you originally asked!</p>\u000a
p1557
sVquestion_id
p1558
I3106689
sVlast_activity_date
p1559
I1277359109
sVcreation_date
p1560
I1277359109
sVscore
p1561
I26
sVowner
p1562
(dp1563
Vuser_id
p1564
I95810
sVprofile_image
p1565
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1566
sVuser_type
p1567
Vregistered
p1568
sVreputation
p1569
I516089
sVlink
p1570
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1571
sVaccept_rate
p1572
I80
sVdisplay_name
p1573
VAlex Martelli
p1574
ssVis_accepted
p1575
I01
sVanswer_id
p1576
I3107534
sa(dp1577
Vbody
p1578
V<p>It's not a custom-metaclass problem (though it's <em>diagnosed</em> at metaclass stage):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Normal(object): pass\u000a... \u000a&gt;&gt;&gt; class MyObject(object, Normal): pass\u000a... \u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: Error when calling the metaclass bases\u000a    Cannot create a consistent method resolution\u000aorder (MRO) for bases object, Normal\u000a</code></pre>\u000a\u000a<p>and the problem's just the same as this one:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; class Derived(Normal): pass\u000a... \u000a&gt;&gt;&gt; class Ok(Derived, Normal): pass\u000a... \u000a&gt;&gt;&gt; class Nope(Normal, Derived): pass\u000a... \u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: Error when calling the metaclass bases\u000a    Cannot create a consistent method resolution\u000aorder (MRO) for bases Normal, Derived\u000a</code></pre>\u000a\u000a<p>i.e., can't multiply inherit from a base class followed by a derived class -- it's impossible to define a consistent MRO that satisfies the usual MRO constraints/guarantees.</p>\u000a\u000a<p>Fortunately, you don't <em>want</em> to do that -- the subclass presumably overrides some method of the base class (that's what normal subclasses <em>do</em>;-), and having the base class "in front" would mean "shadowing the override away".</p>\u000a\u000a<p>Putting the base class <em>after</em> the derived one is pretty useless, but at least it's innocuous (and consistent with normal MRO guarantees).</p>\u000a\u000a<p>Your first example of course works because <code>MyMixin</code> is <em>not</em> derived from <code>list</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; MyMixin.__mro__\u000a(&lt;class '__main__.MyMixin'&gt;, &lt;type 'object'&gt;)\u000a</code></pre>\u000a\u000a<p>...but it <em>is</em> derived from <code>object</code> (like every modern-style Python class), so the second example cannot work (quite independently from <code>MyMixin</code> having a custom metaclass).</p>\u000a
p1579
sVquestion_id
p1580
I3003053
sVlast_activity_date
p1581
I1276061392
sVcreation_date
p1582
I1276061392
sVscore
p1583
I79
sVowner
p1584
(dp1585
Vuser_id
p1586
I95810
sVprofile_image
p1587
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1588
sVuser_type
p1589
Vregistered
p1590
sVreputation
p1591
I516089
sVlink
p1592
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1593
sVaccept_rate
p1594
I80
sVdisplay_name
p1595
VAlex Martelli
p1596
ssVis_accepted
p1597
I01
sVanswer_id
p1598
I3003284
sa(dp1599
Vbody
p1600
V<p><code>is</code> verifies object identity, and any implementation of Python, when it meets literal of immutable types, is perfectly free to <em>either</em> make a new object of that immutable type, <em>or</em> seek through existing objects of that type to see if some of them could be reused (by adding a new reference to the same underlying object).  This is a pragmatic choice of optimization and <strong>not</strong> subject to semantic constraints, so your code should never rely on which path a give implementation may take (or it could break with a bugfix/optimization release of Python!).</p>\u000a\u000a<p>Consider for example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import dis\u000a&gt;&gt;&gt; def f():\u000a...   x = 'google.com'\u000a...   return x is 'google.com'\u000a... \u000a&gt;&gt;&gt; dis.dis(f)\u000a  2           0 LOAD_CONST               1 ('google.com')\u000a              3 STORE_FAST               0 (x)\u000a\u000a  3           6 LOAD_FAST                0 (x)\u000a              9 LOAD_CONST               1 ('google.com')\u000a             12 COMPARE_OP               8 (is)\u000a             15 RETURN_VALUE    \u000a</code></pre>\u000a\u000a<p>so in this particular implementation, <strong>within a function</strong>, your observation does not apply and only one object is made for the literal (any literal), and, indeed:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; f()\u000aTrue\u000a</code></pre>\u000a\u000a<p>Pragmatically that's because within a function making a pass through the local table of constants (to save some memory by not making multiple constant immutable objects where one suffices) is pretty cheap and fast, and may offer good performance returns since the function may be called repeatedly afterwards.</p>\u000a\u000a<p>But, the very same implementation, <em>at the interactive prompt</em> (<strong>Edit</strong>: I originally thought this would also happen at a module's top level, but a comment by @Thomas set me right, see later):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = 'google.com'\u000a&gt;&gt;&gt; y = 'google.com'\u000a&gt;&gt;&gt; id(x), id(y)\u000a(4213000, 4290864)\u000a</code></pre>\u000a\u000a<p>does NOT bother trying to save memory that way -- the <code>id</code>s are different, i.e., distinct objects.  There are potentially higher costs and lower returns and so the heuristics of this implementation's optimizer tell it to not bother searching and just go ahead.</p>\u000a\u000a<p><strong>Edit</strong>: at module top level, per @Thomas' observation, given e.g.:</p>\u000a\u000a<pre><code>$ cat aaa.py\u000ax = 'google.com'\u000ay = 'google.com'\u000aprint id(x), id(y)\u000a</code></pre>\u000a\u000a<p>again we see the table-of-constants-based memory-optimization in this implementation:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import aaa\u000a4291104 4291104\u000a</code></pre>\u000a\u000a<p>(end of Edit per @Thomas' observation).</p>\u000a\u000a<p>Lastly, again on the same implementation:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = 'google'\u000a&gt;&gt;&gt; y = 'google'\u000a&gt;&gt;&gt; id(x), id(y)\u000a(2484672, 2484672)\u000a</code></pre>\u000a\u000a<p>the heuristics are different here because the literal string "looks like it might be an identifier" -- so it might be used in operation requiring interning... so the optimizer interns it anyway (and once interned, looking for it becomes very fast of course). And indeed, surprise surprise...:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; z = intern(x)\u000a&gt;&gt;&gt; id(z)\u000a2484672\u000a</code></pre>\u000a\u000a<p>...<code>x</code> <strong>has</strong> been <code>intern</code>ed the very first time (as you see, the return value of <code>intern</code> is <em>the same</em> object as <code>x</code> and <code>y</code>, as it has the same <code>id()</code>).  Of course, you shouldn't rely on this either -- the optimizer doesn't <strong>have</strong> to intern anything automatically, it's just an optimization heuristic; if you need <code>intern</code>ed string, <code>intern</code> them explicitly, just to be safe.  When you <strong>do</strong> intern strings explicitly...:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = intern('google.com')\u000a&gt;&gt;&gt; y = intern('google.com')\u000a&gt;&gt;&gt; id(x), id(y)\u000a(4213000, 4213000)\u000a</code></pre>\u000a\u000a<p>...then you <strong>do</strong> ensure exactly the same object (i.e., same <code>id()</code>) results each and every time -- so you can apply micro-optimizations such as checking with <code>is</code> rather than <code>==</code> (I've hardly ever found the miniscule performance gain to be worth the bother;-).</p>\u000a\u000a<p><strong>Edit</strong>: just to clarify, here are the kind of performance differences I'm talking about, on a slow Macbook Air...:</p>\u000a\u000a<pre><code>$ python -mtimeit -s"a='google';b='google'" 'a==b'\u000a10000000 loops, best of 3: 0.132 usec per loop\u000a$ python -mtimeit -s"a='google';b='google'" 'a is b'\u000a10000000 loops, best of 3: 0.107 usec per loop\u000a$ python -mtimeit -s"a='goo.gle';b='goo.gle'" 'a==b'\u000a10000000 loops, best of 3: 0.132 usec per loop\u000a$ python -mtimeit -s"a='google';b='google'" 'a is b'\u000a10000000 loops, best of 3: 0.106 usec per loop\u000a$ python -mtimeit -s"a=intern('goo.gle');b=intern('goo.gle')" 'a is b'\u000a10000000 loops, best of 3: 0.0966 usec per loop\u000a$ python -mtimeit -s"a=intern('goo.gle');b=intern('goo.gle')" 'a == b'\u000a10000000 loops, best of 3: 0.126 usec per loop\u000a</code></pre>\u000a\u000a<p>...a few tens of nanoseconds either way, at most.  So, worth even <em>thinking</em> about only in the most extreme "optimize the [expletive deleted] out of this [expletive deleted] performance bottleneck" situations!-)</p>\u000a
p1601
sVquestion_id
p1602
I2858603
sVlast_activity_date
p1603
I1274197971
sVcreation_date
p1604
I1274196409
sVscore
p1605
I87
sVowner
p1606
(dp1607
Vuser_id
p1608
I95810
sVprofile_image
p1609
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1610
sVuser_type
p1611
Vregistered
p1612
sVreputation
p1613
I516089
sVlink
p1614
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1615
sVaccept_rate
p1616
I80
sVdisplay_name
p1617
VAlex Martelli
p1618
ssVis_accepted
p1619
I01
sVlast_edit_date
p1620
I1274197971
sVanswer_id
p1621
I2858669
sa(dp1622
Vbody
p1623
V<pre><code>&gt;&gt;&gt; def rreplace(s, old, new, occurrence):\u000a...  li = s.rsplit(old, occurrence)\u000a...  return new.join(li)\u000a... \u000a&gt;&gt;&gt; s\u000a'1232425'\u000a&gt;&gt;&gt; rreplace(s, '2', ' ', 2)\u000a'123 4 5'\u000a&gt;&gt;&gt; rreplace(s, '2', ' ', 3)\u000a'1 3 4 5'\u000a&gt;&gt;&gt; rreplace(s, '2', ' ', 4)\u000a'1 3 4 5'\u000a&gt;&gt;&gt; rreplace(s, '2', ' ', 0)\u000a'1232425'\u000a</code></pre>\u000a
p1624
sVquestion_id
p1625
I2556108
sVlast_activity_date
p1626
I1270067375
sVcreation_date
p1627
I1270067375
sVscore
p1628
I95
sVowner
p1629
(dp1630
Vuser_id
p1631
I230454
sVprofile_image
p1632
Vhttps://www.gravatar.com/avatar/2b91f45c167f111b3cf0114b63052f2a?s=128&d=identicon&r=PG
p1633
sVuser_type
p1634
Vregistered
p1635
sVreputation
p1636
I4827
sVlink
p1637
Vhttp://stackoverflow.com/users/230454/mg
p1638
sVdisplay_name
p1639
Vmg.
p1640
ssVis_accepted
p1641
I01
sVanswer_id
p1642
I2556252
sa(dp1643
Vbody
p1644
V<p>It may help to think of how Python namespaces work: they're essentially dictionaries.  So when you do this:</p>\u000a\u000a<pre><code>from a_package.baz import do_something_expensive\u000ado_something_expensive = lambda: 'Something really cheap.'\u000a</code></pre>\u000a\u000a<p>think of it like this:</p>\u000a\u000a<pre><code>do_something_expensive = a_package.baz['do_something_expensive']\u000ado_something_expensive = lambda: 'Something really cheap.'\u000a</code></pre>\u000a\u000a<p>Hopefully you can realize why this doesn't work then :-)  Once you import a name into a namespace, the value of the name in the namespace you imported <em>from</em> is irrelevant.  You're only modifying the value of do_something_expensive in the local module's namespace, or in a_package.baz's namespace, above.  But because bar imports do_something_expensive directly, rather than referencing it from the module namespace, you need to write to its namespace:</p>\u000a\u000a<pre><code>import bar\u000abar.do_something_expensive = lambda: 'Something really cheap.'\u000a</code></pre>\u000a
p1645
sVquestion_id
p1646
I2375403
sVlast_activity_date
p1647
I1267654785
sVcreation_date
p1648
I1267654785
sVscore
p1649
I64
sVowner
p1650
(dp1651
Vuser_id
p1652
I6372
sVprofile_image
p1653
Vhttps://www.gravatar.com/avatar/fbff5bc41ed88240c76f35d6fe5bf12f?s=128&d=identicon&r=PG
p1654
sVuser_type
p1655
Vregistered
p1656
sVreputation
p1657
I33802
sVlink
p1658
Vhttp://stackoverflow.com/users/6372/nicholas-riley
p1659
sVaccept_rate
p1660
I86
sVdisplay_name
p1661
VNicholas Riley
p1662
ssVis_accepted
p1663
I01
sVanswer_id
p1664
I2375443
sa(dp1665
Vbody
p1666
V<pre><code>item = defaultvalue\u000afor item in my_iter:\u000a    pass\u000a</code></pre>\u000a
p1667
sVquestion_id
p1668
I2138873
sVlast_activity_date
p1669
I1264503402
sVcreation_date
p1670
I1264503402
sVscore
p1671
I50
sVowner
p1672
(dp1673
Vuser_id
p1674
I17624
sVprofile_image
p1675
Vhttps://www.gravatar.com/avatar/90285a816eda046ff55a0dcacc0c5ee8?s=128&d=identicon&r=PG
p1676
sVuser_type
p1677
Vregistered
p1678
sVreputation
p1679
I69283
sVlink
p1680
Vhttp://stackoverflow.com/users/17624/thomas-wouters
p1681
sVdisplay_name
p1682
VThomas Wouters
p1683
ssVis_accepted
p1684
I01
sVanswer_id
p1685
I2138894
sa(dp1686
Vbody
p1687
V<p>The negatives you list for IM/FPIM can often be ameliorated by appropriate use of an <code>as</code> clause.  <code>from some.package import mymodulewithalongname as mymod</code> can usefully shorten your code and enhance its readability, and if you rename <code>mymodulewithalongname</code> to <code>somethingcompletelydifferent</code> tomorrow, the <code>as</code> clause can be used as a single statement to edit.</p>\u000a\u000a<p>Consider your pro-FMIF point 3 (call it R for redirection) vs your pro-FPIM point 2 (call it F for flexibility): R amounts to facilitating the loss of integrity of module boundaries, while F strenghtens it.  Multiple functions, classes and variables in a module are often intended to work together: they should not be independently switched to different meanings.  For example, consider module <code>random</code> and its functions <code>seed</code> and <code>uniform</code>: if you were to switch the import of just one of them to a different module, then you'd break the normal connection between calls to <code>seed</code> and results of calls to <code>uniform</code>.  When a module is well designed, with cohesion and integrity, R's facilitation of breaking down the module's boundaries is actually a negative -- it makes it easier to do something you're better off <strong>not</strong> doing.</p>\u000a\u000a<p>Vice versa, F is what enables <em>coordinated</em> switching of coupled functions, classes, and variables (so, generally, of entities that <em>belong</em> together, by modularity). For example, to make testing repeatable (FPIM pro-point 1), you mock both <code>seed</code> and <code>random</code> in the <code>random</code> module, and if your code follows FPIM, you're all set, coordination guaranteed; but if you have code that has imported the functions directly, you have to hunt down each such module and repeat the mocking over and over and over again.  Making tests perfectly repeatable typically also requires "coordinated mocking" of date and time functions -- if you use <code>from datetime import datetime</code> in some modules, you need to find and mock them all (as well as all those doing <code>from time import time</code>, and so forth) to ensure that all the times received when the various parts of the system ask "so what time is it now?" are perfectly consistent (if you use FPIM, you just mock the two relevant modules).</p>\u000a\u000a<p>I like FPIM, because there's really not much added value by using a <em>multiply</em> qualified name rather than a singly qualified one (while the difference between barenames and qualified names is <em>huge</em> -- you get <strong>so</strong> much more control with a qualified name, be it singly or multiply, than you possibly ever can with a barename!).</p>\u000a\u000a<p>Ah well, can't devote all of the working day to responding to each and every one of your points -- your question should probably be half a dozen questions;-).  I hope this at least addresses "why is F better than R" and some of the mocking/testing issues -- it boils down to <em>preserving and enhancing well-designed modularity</em> (via F) rather than undermining it (via R).</p>\u000a
p1688
sVquestion_id
p1689
I1744258
sVlast_activity_date
p1690
I1258400955
sVcreation_date
p1691
I1258400955
sVscore
p1692
I36
sVowner
p1693
(dp1694
Vuser_id
p1695
I95810
sVprofile_image
p1696
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1697
sVuser_type
p1698
Vregistered
p1699
sVreputation
p1700
I516089
sVlink
p1701
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1702
sVaccept_rate
p1703
I80
sVdisplay_name
p1704
VAlex Martelli
p1705
ssVis_accepted
p1706
I01
sVanswer_id
p1707
I1744439
sa(dp1708
Vbody
p1709
V<p>In languages that rely on getters and setters, like Java, they're not supposed nor expected to do anything but what they say -- it would be astonishing if <code>x.getB()</code> did anything but return the current value of logical attribute <code>b</code>, or if <code>x.setB(2)</code> did anything but whatever small amount of internal work is needed to make <code>x.getB()</code> return <code>2</code>.</p>\u000a\u000a<p>However, there are no language-imposed <em>guarantees</em> about this expected behavior, i.e., compiler-enforced constraints on the body of methods whose names start with <code>get</code> or <code>set</code>: rather, it's left up to common sense, social convention, "style guides", and testing.</p>\u000a\u000a<p>The behavior of <code>x.b</code> accesses, and assignments such as <code>x.b = 2</code>, in languages which do have properties (a set of languages which includes but is not limited to Python) is <em>exactly</em> the same as for getter and setter methods in, e.g., Java: the same expectations, the same lack of language-enforced guarantees.</p>\u000a\u000a<p>The first win for properties is syntax and readability.  Having to write, e.g.,</p>\u000a\u000a<pre><code>x.setB(x.getB() + 1)\u000a</code></pre>\u000a\u000a<p>instead of the obvious</p>\u000a\u000a<pre><code>x.b += 1\u000a</code></pre>\u000a\u000a<p>cries out for vengeance to the gods.  In languages which support properties, there is absolutely no good reason to force users of the class to go through the gyrations of such Byzantine boilerplate, impacting their code's readability with no upside whatsoever.</p>\u000a\u000a<p>In Python specifically, there's one more great upside to using properties (or other descriptors) in lieu of getters and setters: if and when you reorganize your class so that the underlying setter and getter are not needed anymore, you can (without breaking the class's published API) simply eliminate those methods and the property that relies on them, making <code>b</code> a normal "stored" attribute of <code>x</code>'s class rather than a "logical" one obtained and set computationally.</p>\u000a\u000a<p>In Python, doing things directly (when feasible) instead of via methods is an important optimization, and systematically using properties enables you to perform this optimization whenever feasible (always exposing "normal stored attributes" directly, and only ones which do need computation upon access and/or setting via methods and properties).</p>\u000a\u000a<p>So, if you use getters and setters instead of properties, beyond impacting the readability of your users' code, you are <em>also</em> gratuitously wasting machine cycles (and the energy that goes to their computer during those cycles;-), <strong>again</strong> for no good reason whatsoever.</p>\u000a\u000a<p>Your only argument against properties is e.g. that "an outside user wouldn't expect any side effects as a result of an assignment, usually"; but you miss the fact that the same user (in a language such as Java where getters and setters are pervasive) wouldn't expect (observable) "side effects" as a result of calling a setter, either (and even less for a getter;-). They're reasonable expectations and it's up to you, as the class author, to try and accommodate them -- whether your setter and getter are used directly or through a property, makes no difference.  If you have methods with important observable side effects, do <strong>not</strong> name them <code>getThis</code>, <code>setThat</code>, and do not use them via properties.</p>\u000a\u000a<p>The complaint that properties "hide the implementation" is wholly unjustified: most <em>all</em> of OOP is about implementing information hiding -- making a class responsible for presenting a logical interface to the outside world and implementing it internally as best it can. Getters and setters, exactly like properties, are tools towards this goal. Properties just do a better job at it (in languages that support them;-).</p>\u000a
p1710
sVquestion_id
p1711
I1554546
sVlast_activity_date
p1712
I1255360614
sVcreation_date
p1713
I1255360614
sVscore
p1714
I108
sVowner
p1715
(dp1716
Vuser_id
p1717
I95810
sVprofile_image
p1718
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1719
sVuser_type
p1720
Vregistered
p1721
sVreputation
p1722
I516089
sVlink
p1723
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1724
sVaccept_rate
p1725
I80
sVdisplay_name
p1726
VAlex Martelli
p1727
ssVis_accepted
p1728
I01
sVanswer_id
p1729
I1555169
sa(dp1730
Vbody
p1731
V<p>Sure!  The code's <a href="http://svn.python.org/view/python/trunk/Objects/listobject.c?revision=69227&amp;view=markup" rel="noreferrer">here</a>, starting with function <code>islt</code> and proceeding for QUITE a while;-). As Chris's comment suggests, it's C code.  You'll also want to read <a href="http://svn.python.org/view/python/trunk/Objects/listsort.txt?revision=69846&amp;view=markup" rel="noreferrer">this</a> text file for a textual explanation, results, etc etc.</p>\u000a\u000a<p>If you prefer reading Java code than C code, you could look at Joshua Bloch's implementation of timsort in and for Java (Joshua's also the guy who implemented, in 1997, the modified mergesort that's still used in Java, and one can hope that Java will eventually switch to his recent port of timsort).</p>\u000a\u000a<p>Some explanation of the Java port of timsort is <a href="http://bugs.sun.com/bugdatabase/view%5Fbug.do?bug%5Fid=6804124" rel="noreferrer">here</a>, the diff is <a href="http://hg.openjdk.java.net/jdk7/tl/jdk/rev/bfd7abda8f79" rel="noreferrer">here</a> (with pointers to all needed files), the key file is <a href="http://hg.openjdk.java.net/jdk7/tl/jdk/file/bfd7abda8f79/src/share/classes/java/util/TimSort.java" rel="noreferrer">here</a> -- FWIW, while I'm a better C programmer than Java programmer, in this case I find Joshua's Java code more readable overall than Tim's C code;-).</p>\u000a
p1732
sVquestion_id
p1733
I1517347
sVlast_activity_date
p1734
I1254690230
sVcreation_date
p1735
I1254689590
sVscore
p1736
I68
sVowner
p1737
(dp1738
Vuser_id
p1739
I95810
sVprofile_image
p1740
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1741
sVuser_type
p1742
Vregistered
p1743
sVreputation
p1744
I516089
sVlink
p1745
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1746
sVaccept_rate
p1747
I80
sVdisplay_name
p1748
VAlex Martelli
p1749
ssVis_accepted
p1750
I01
sVlast_edit_date
p1751
I1254690230
sVanswer_id
p1752
I1517363
sa(dp1753
Vbody
p1754
V<p>If you don't want to modify blank setting for your fields inside models (doing so will break normal validation in admin site), you can do the following in your Form class:</p>\u000a\u000a<pre><code>def __init__(self, *args, **kwargs):\u000a    super(CircuitForm, self).__init__(*args, **kwargs)\u000a\u000a    for key in self.fields:\u000a        self.fields[key].required = False \u000a</code></pre>\u000a\u000a<p>The redefined constructor won't harm any functionality.</p>\u000a
p1755
sVquestion_id
p1756
I1134667
sVlast_activity_date
p1757
I1253049062
sVcreation_date
p1758
I1253049062
sVscore
p1759
I91
sVowner
p1760
(dp1761
Vuser_id
p1762
I113678
sVprofile_image
p1763
Vhttps://i.stack.imgur.com/oTPdQ.jpg?s=128&g=1
p1764
sVuser_type
p1765
Vregistered
p1766
sVreputation
p1767
I3966
sVlink
p1768
Vhttp://stackoverflow.com/users/113678/datagreed
p1769
sVaccept_rate
p1770
I87
sVdisplay_name
p1771
VDataGreed
p1772
ssVis_accepted
p1773
I01
sVanswer_id
p1774
I1429646
sa(dp1775
Vbody
p1776
V<p>I think you want the <a href="http://docs.python.org/library/copy.html" rel="noreferrer">copy module</a></p>\u000a\u000a<pre><code>import copy\u000a\u000ax = copy.copy(y)        # make a shallow copy of y\u000ax = copy.deepcopy(y)    # make a deep copy of y\u000a</code></pre>\u000a\u000a<p>you can control copying in much the same way as you control <a href="http://docs.python.org/library/pickle.html#module-pickle" rel="noreferrer">pickle</a>.</p>\u000a
p1777
sVquestion_id
p1778
I1241148
sVlast_activity_date
p1779
I1249590094
sVcreation_date
p1780
I1249590094
sVscore
p1781
I44
sVowner
p1782
(dp1783
Vuser_id
p1784
I6402
sVprofile_image
p1785
Vhttps://www.gravatar.com/avatar/9d68bc2af1d5ab2569aedb347a6ab946?s=128&d=identicon&r=PG
p1786
sVuser_type
p1787
Vregistered
p1788
sVreputation
p1789
I3524
sVlink
p1790
Vhttp://stackoverflow.com/users/6402/tom-dunham
p1791
sVaccept_rate
p1792
I60
sVdisplay_name
p1793
VTom Dunham
p1794
ssVis_accepted
p1795
I01
sVanswer_id
p1796
I1241170
sa(dp1797
Vbody
p1798
V<p>For nginx/mod_wsgi, ensure you read:</p>\u000a\u000a<p><a href="http://blog.dscpl.com.au/2009/05/blocking-requests-and-nginx-version-of.html" rel="noreferrer">http://blog.dscpl.com.au/2009/05/blocking-requests-and-nginx-version-of.html</a></p>\u000a\u000a<p>Because of how nginx is an event driven system underneath, it has behavioural characteristics which are detrimental to blocking applications such as is the case with WSGI based applications. Worse case scenario is that with multiprocess nginx configuration, you can see user requests be blocked even though some nginx worker processes may be idle. Apache/mod_wsgi doesn't have this issue as Apache processes will only accept requests when it has the resources to actually handle the request. Apache/mod_wsgi will thus give more predictable and reliable behaviour.</p>\u000a
p1799
sVquestion_id
p1800
I195534
sVlast_activity_date
p1801
I1245846361
sVcreation_date
p1802
I1245846361
sVscore
p1803
I69
sVowner
p1804
(dp1805
Vuser_id
p1806
I128141
sVprofile_image
p1807
Vhttps://www.gravatar.com/avatar/70dfb4afd84b106d0855184bf0ae4675?s=128&d=identicon&r=PG
p1808
sVuser_type
p1809
Vregistered
p1810
sVreputation
p1811
I36276
sVlink
p1812
Vhttp://stackoverflow.com/users/128141/graham-dumpleton
p1813
sVdisplay_name
p1814
VGraham Dumpleton
p1815
ssVis_accepted
p1816
I01
sVanswer_id
p1817
I1038043
sa(dp1818
Vbody
p1819
V<p>As unwind noted, keyword arguments with default values can go a long way.</p>\u000a\u000a<p>I'll also state that in my opinion, it goes against the spirit of Python to worry a lot about what types are passed into methods. In Python, I think it's more accepted to use duck typing -- asking what an object can do, rather than what it is.</p>\u000a\u000a<p>Thus, if your method may accept a string or a tuple, you might do something like this:</p>\u000a\u000a<pre><code>def print_names(names):\u000a    """Takes a space-delimited string or an iterable"""\u000a    try:\u000a        for name in names.split(): # string case\u000a            print name\u000a    except AttributeError:\u000a        for name in names:\u000a            print name\u000a</code></pre>\u000a\u000a<p>Then you could do either of these:</p>\u000a\u000a<pre><code>print_names("Ryan Billy")\u000aprint_names(("Ryan", "Billy"))\u000a</code></pre>\u000a\u000a<p>Although an API like that sometimes indicates a design problem.</p>\u000a
p1820
sVquestion_id
p1821
I733264
sVlast_activity_date
p1822
I1239270487
sVcreation_date
p1823
I1239270487
sVscore
p1824
I31
sVowner
p1825
(dp1826
Vuser_id
p1827
I10658
sVprofile_image
p1828
Vhttps://www.gravatar.com/avatar/f932f014eda607b8d2424407f82f7528?s=128&d=identicon&r=PG
p1829
sVuser_type
p1830
Vregistered
p1831
sVreputation
p1832
I10700
sVlink
p1833
Vhttp://stackoverflow.com/users/10658/ryan-ginstrom
p1834
sVaccept_rate
p1835
I100
sVdisplay_name
p1836
VRyan Ginstrom
p1837
ssVis_accepted
p1838
I01
sVanswer_id
p1839
I733548
sa(dp1840
Vbody
p1841
V<p>According to the docs, your second attempt should work:</p>\u000a\u000a<blockquote>\u000a  <p>To refer to models defined in another application, you must instead explicitly specify the application label. For example, if the Manufacturer model above is defined in another application called production, you'd need to use:</p>\u000a</blockquote>\u000a\u000a<pre><code>class Car(models.Model):\u000a    manufacturer = models.ForeignKey('production.Manufacturer')\u000a</code></pre>\u000a\u000a<p>Have you tried putting it into quotes?</p>\u000a
p1842
sVquestion_id
p1843
I323763
sVlast_activity_date
p1844
I1227796065
sVcreation_date
p1845
I1227796065
sVscore
p1846
I93
sVowner
p1847
(dp1848
Vuser_id
p1849
I422277
sVprofile_image
p1850
Vhttps://www.gravatar.com/avatar/219e6891cd29919cfad373a72eca17dd?s=128&d=identicon&r=PG
p1851
sVuser_type
p1852
Vregistered
p1853
sVreputation
p1854
I1468
sVlink
p1855
Vhttp://stackoverflow.com/users/422277/michael-warkentin
p1856
sVdisplay_name
p1857
VMichael Warkentin
p1858
ssVis_accepted
p1859
I01
sVanswer_id
p1860
I323905
sa(dp1861
Vbody
p1862
V<p>You might want to do this when the "inner" class is a one-off, which will never be used outside the <em>definition</em> of the outer class. For example to use a metaclass, it's sometimes handy to do</p>\u000a\u000a<pre><code>class Foo(object):\u000a    class __metaclass__(type):\u000a        .... \u000a</code></pre>\u000a\u000a<p>instead of defining a metaclass separately, if you're only using it once.</p>\u000a\u000a<p>The only other time I've used nested classes like that, I used the outer class only as a namespace to group a bunch of closely related classes together:</p>\u000a\u000a<pre><code>class Group(object):\u000a    class cls1(object):\u000a       ...\u000a\u000a    class cls2(object):\u000a       ...\u000a</code></pre>\u000a\u000a<p>Then from another module, you can import Group and refer to these as Group.cls1, Group.cls2 etc. However one might argue that you can accomplish exactly the same (perhaps in a less confusing way) by using a module.</p>\u000a
p1863
sVquestion_id
p1864
I78799
sVlast_activity_date
p1865
I1221614288
sVcreation_date
p1866
I1221613979
sVscore
p1867
I78
sVowner
p1868
(dp1869
Vuser_id
p1870
I3002
sVprofile_image
p1871
Vhttps://www.gravatar.com/avatar/a9929763a96cad537d72c9eda8fe3741?s=128&d=identicon&r=PG
p1872
sVuser_type
p1873
Vregistered
p1874
sVreputation
p1875
I43484
sVlink
p1876
Vhttp://stackoverflow.com/users/3002/df
p1877
sVaccept_rate
p1878
I100
sVdisplay_name
p1879
VdF.
p1880
ssVis_accepted
p1881
I01
sVlast_edit_date
p1882
I1221614288
sVanswer_id
p1883
I78858
sasVquota_max
p1884
I300
sVquota_remaining
p1885
I146
s.