(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>The whole key to such encoding problems is to understand that there are in principle <strong>two distinct concepts of "string"</strong>: (1) string of <em>characters</em>, and (2) string/array of <em>bytes</em>. This distinction has been mostly ignored for a long time because of the historic ubiquity of encodings with no more than 256 characters (ASCII, Latin-1, Windows-1252, Mac OS Roman,\u2026): these encodings map a set of common characters to numbers between 0 and 255 (bytes); the relatively limited exchange of files before the advent of the web made this situation of incompatible encodings tolerable, as most programs could ignore the fact that there were multiple encodings as long as they produced text that remained on the same operating system: such programs would simply treat text as bytes (through the encoding used by the operating system). The correct, modern view properly separates these two string concepts, based on the following two points:</p>\u000a\u000a<ol>\u000a<li><p><strong>Characters</strong> are mostly <em>unrelated to computers</em>: one can draw them on a chalk board, etc., like for instance \u0628\u0627\u064a\u062b\u0648\u0646, \u4e2d\u87d2 and \U0001f40d.  "Characters" for machines also include "drawing instructions" like for example spaces, carriage return, instructions to set the writing direction (for Arabic, etc.), accents, etc. A <a href="http://en.wikipedia.org/wiki/List_of_unicode_characters" rel="nofollow noreferrer">very large character list</a> is included in the <a href="http://en.wikipedia.org/wiki/Unicode" rel="nofollow noreferrer">Unicode</a> standard; it covers most of the known characters.</p></li>\u000a<li><p>On the other hand, computers do need to represent abstract characters in some way: for this, they use <strong>arrays of bytes</strong> (numbers between 0 and 255 included), because their memory comes in byte chunks. The necessary process that converts characters to bytes is called <em>encoding</em>.  Thus, a computer <em>requires</em> an encoding in order to represent characters.  Any text present on your computer is encoded (until it is displayed), whether it be sent to a terminal (which expects characters encoded in a specific way), or saved in a file.  In order to be displayed or properly "understood" (by, say, the Python interpreter), streams of bytes are <em>decoded</em> into characters. <a href="http://en.wikipedia.org/wiki/Unicode#Mapping_and_encodings" rel="nofollow noreferrer">A few encodings</a> (UTF-8, UTF-16,\u2026) are defined by Unicode for its list of characters (Unicode thus defines both a list of characters and encodings for these characters\u2014there are still places where one sees the expression "Unicode encoding" as a way to refer to the ubiquitous UTF-8, but this is incorrect terminology, as Unicode provides <em>multiple</em> encodings).</p></li>\u000a</ol>\u000a\u000a<p>In summary, <strong>computers need to internally represent characters with bytes</strong>, and they do so through two operations:</p>\u000a\u000a<blockquote>\u000a  <p><strong>Encoding</strong>: characters \u2192 bytes</p>\u000a  \u000a  <p><strong>Decoding</strong>: bytes \u2192 characters</p>\u000a</blockquote>\u000a\u000a<p>Some encodings cannot encode all characters (e.g., ASCII), while (some) Unicode encodings allow you to encode all Unicode characters. <em>The encoding is also not necessarily unique</em>, because some characters can be represented either directly or as a <em>combination</em> (e.g. of a base character and of accents).</p>\u000a\u000a<p>Note that the concept of <strong>newline</strong> <a href="https://en.wikipedia.org/wiki/Newline" rel="nofollow noreferrer">adds a layer of complication</a>, since it can be represented by different (control) characters that depend on the operating system (this is the reason for Python's <a href="https://docs.python.org/2/library/functions.html#open" rel="nofollow noreferrer">universal newline file reading mode</a>).</p>\u000a\u000a<p>Now, what I have called "character" above is what Unicode calls a "<strong>user-perceived character</strong>". A single user-perceived character can sometimes be represented in Unicode by combining character parts (base character, accents,\u2026) found at different <a href="http://en.wikipedia.org/wiki/List_of_unicode_characters" rel="nofollow noreferrer">indexes</a> in the Unicode list, which are called "<strong><a href="http://unicode.org/glossary/" rel="nofollow noreferrer">code points</a></strong>"\u2014these codes points can be combined together to form a "grapheme cluster". \u000aUnicode thus leads to a third concept of string, made of a sequence of Unicode code points, that sits between byte and character strings, and which is closer to the latter. I will call them "<strong>Unicode strings</strong>" (like in Python 2).</p>\u000a\u000a<p>While Python can <em>print</em> strings of (user-perceived) characters, <strong>Python non-byte strings are actually sequences of Unicode code points</strong>, not of user-perceived characters. The code point values are the ones used in Python's <code>\u005cu</code> and <code>\u005cU</code> Unicode string syntax.  They should not be confused with the encoding of a character (and do not have to bear any relationship with it: Unicode code points can be encoded in various ways). </p>\u000a\u000a<p>Concretely, this implies that <strong>the length of a Python (Unicode) string is <em>not</em> always its number of user-perceived characters</strong>: thus <code>s = "\u005cu1100\u005cu1161\u005cu11a8"; print(s, "len", len(s))</code> (Python 3) gives <code>\uac01 len 3</code> despite <code>s</code> having a single user-perceived (Korean) character (because it is represented with 3 code points\u2014even if it does not have to, as <code>print("\u005cuac01")</code> shows). However, in many practical circumstances, the length of a string is its number of user-perceived characters, because many characters are typically stored by Python as a single Unicode code point.</p>\u000a\u000a<p>In <strong>Python 2</strong>, Unicode strings are called\u2026 "Unicode strings" (<code>unicode</code> type, literal form <code>u"\u2026"</code>), while byte arrays are "strings" (<code>str</code> type, where the array of bytes can for instance be constructed with string literals <code>"\u2026"</code>).  In <strong>Python 3</strong>, Unicode strings are simply called "strings" (<code>str</code> type, literal form <code>"\u2026"</code>), while byte arrays are "bytes" (<code>bytes</code> type, literal form <code>b"\u2026"</code>).</p>\u000a\u000a<p>With these few key points, you should be able to understand most encoding related questions!</p>\u000a\u000a<hr>\u000a\u000a<p>Normally, when you <strong>print</strong> <code>u"\u2026"</code> <strong>to a terminal</strong>, you should not get garbage: Python knows the encoding of your terminal.  In fact, you can check what encoding the terminal expects:</p>\u000a\u000a<pre><code>% python\u000aPython 2.7.6 (default, Nov 15 2013, 15:20:37) \u000a[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.2.79)] on darwin\u000aType "help", "copyright", "credits" or "license" for more information.\u000a&gt;&gt;&gt; import sys\u000a&gt;&gt;&gt; print sys.stdout.encoding\u000aUTF-8\u000a</code></pre>\u000a\u000a<p>If your input characters can be encoded with the terminal's encoding, Python will do so and will send the corresponding bytes to your terminal without complaining. The terminal will then do its best to display the characters after decoding the input bytes (at worst the terminal font does not have some of the characters and will print some kind of blank instead).</p>\u000a\u000a<p>If your input characters cannot be encoded with the terminal's encoding, then it means that the terminal is not configured for displaying these characters. Python will complain (in Python with a <code>UnicodeEncodeError</code> since the character string cannot be encoded in a way that suits your terminal). The only possible solution is to use a terminal that can display the characters (either by configuring the terminal so that it accepts an encoding that can represent your characters, or by using a different terminal program). This is important when you distribute programs that can be used in different environments: messages that you print should be representable in the user's terminal. Sometimes it is thus best to stick to strings that only contain ASCII characters.</p>\u000a\u000a<p>However, when you <strong>redirect or pipe the output</strong> of your program, then it is generally not possible to know what the input encoding of the receiving program is, and the above code returns some default encoding: None (Python 2.7) or UTF-8 (Python 3):</p>\u000a\u000a<pre><code>% python2.7 -c "import sys; print sys.stdout.encoding" | cat\u000aNone\u000a% python3.4 -c "import sys; print(sys.stdout.encoding)" | cat\u000aUTF-8\u000a</code></pre>\u000a\u000a<p>The encoding of stdin, stdout and stderr can however be <a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONIOENCODING" rel="nofollow noreferrer">set</a> through the <code>PYTHONIOENCODING</code> environment variable, if needed:</p>\u000a\u000a<pre><code>% PYTHONIOENCODING=UTF-8 python2.7 -c "import sys; print sys.stdout.encoding" | cat\u000aUTF-8\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>If the printing to a terminal does not produce what you expect, you can check the UTF-8 encoding that you put manually in is correct; for instance, your first character (<code>\u005cu001A</code>) is not printable, <a href="http://www.tamasoft.co.jp/en/general-info/unicode.html" rel="nofollow noreferrer">if I'm not mistaken</a>.</p>\u000a\u000a<p>For more info: <a href="http://wiki.python.org/moin/PrintFails" rel="nofollow noreferrer">http://wiki.python.org/moin/PrintFails</a>.  From this link you can find a solution like this, for Python 2.x:</p>\u000a\u000a<pre><code>import codecs\u000aimport locale\u000aimport sys\u000a\u000a# Wrap sys.stdout into a StreamWriter to allow writing unicode.\u000asys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout) \u000a\u000auni = u"\u005cu001A\u005cu0BC3\u005cu1451\u005cU0001D10C"\u000aprint uni\u000a</code></pre>\u000a\u000a<p>For Python 3, you can check <a href="http://stackoverflow.com/questions/4374455/how-to-set-sys-stdout-encoding-in-python-3">one of the questions asked previously</a> on StackOverflow.</p>\u000a
p6
sVquestion_id
p7
I4545661
sVlast_activity_date
p8
I1495130111
sVcreation_date
p9
I1293540263
sVscore
p10
I208
sVowner
p11
(dp12
Vuser_id
p13
I42973
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/e1e331c88fcddfe245f4be299389270d?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I43633
sVlink
p19
Vhttp://stackoverflow.com/users/42973/eol
p20
sVaccept_rate
p21
I87
sVdisplay_name
p22
VEOL
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1495130111
sVanswer_id
p26
I4546129
sa(dp27
Vbody
p28
V<p>All functions are also <em>descriptors</em>, so you can bind them by calling their <code>__get__</code> method:</p>\u000a\u000a<pre><code>bound_handler = handler.__get__(self, MyWidget)\u000a</code></pre>\u000a\u000a<p>Here's R. Hettinger's excellent <a href="https://docs.python.org/2/howto/descriptor.html" rel="nofollow noreferrer">guide</a> to descriptors.</p>\u000a
p29
sVquestion_id
p30
I1015307
sVlast_activity_date
p31
I1495126946
sVcreation_date
p32
I1245362069
sVscore
p33
I130
sVowner
p34
(dp35
Vuser_id
p36
I95810
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I516079
sVlink
p42
Vhttp://stackoverflow.com/users/95810/alex-martelli
p43
sVaccept_rate
p44
I80
sVdisplay_name
p45
VAlex Martelli
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1495126946
sVanswer_id
p49
I1015405
sa(dp50
Vbody
p51
V<pre><code>&gt;&gt;&gt; x = 'foo'\u000a&gt;&gt;&gt; x\u000a'foo'\u000a</code></pre>\u000a\u000a<p>So the name <code>x</code> is attached to <code>'foo'</code> string. When you call for example <code>repr(x)</code> the interpreter puts <code>'foo'</code> instead of <code>x</code> and then calls <code>repr('foo')</code>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; repr(x)\u000a"'foo'"\u000a&gt;&gt;&gt; x.__repr__()\u000a"'foo'"\u000a</code></pre>\u000a\u000a<p><code>repr</code> actually calls a magic method <code>__repr__</code> of <code>x</code>, which gives the <strong>string</strong> containing the representation of the value <code>'foo'</code> assigned to <code>x</code>. So it returns <code>'foo'</code> inside the string <code>""</code> resulting in <code>"'foo'"</code>. The idea of <code>repr</code> is to give a string which contains a series of symbols which we can type in the interpreter and get the same value which was sent as an argument to <code>repr</code>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; eval("'foo'")\u000a'foo'\u000a</code></pre>\u000a\u000a<p>When we call <code>eval("'foo'")</code>, it's the same as we type <code>'foo'</code> in the interpreter. It's as we directly type the contents of the outer string <code>""</code> in the interpreter.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; eval('foo')\u000a\u000aTraceback (most recent call last):\u000a  File "&lt;pyshell#5&gt;", line 1, in &lt;module&gt;\u000a    eval('foo')\u000a  File "&lt;string&gt;", line 1, in &lt;module&gt;\u000aNameError: name 'foo' is not defined\u000a</code></pre>\u000a\u000a<p>If we call <code>eval('foo')</code>, it's the same as we type <code>foo</code> in the interpreter. But there is no <code>foo</code> variable available and an exception is raised.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; str(x)\u000a'foo'\u000a&gt;&gt;&gt; x.__str__()\u000a'foo'\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a\u000a<p><code>str</code> is just the string representation of the object (remember, <code>x</code> variable refers to <code>'foo'</code>), so this function returns string.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; str(5)\u000a'5'\u000a</code></pre>\u000a\u000a<p>String representation of integer <code>5</code> is <code>'5'</code>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; str('foo')\u000a'foo'\u000a</code></pre>\u000a\u000a<p>And string representation of string <code>'foo'</code> is the same string <code>'foo'</code>.</p>\u000a
p52
sVquestion_id
p53
I7784148
sVlast_activity_date
p54
I1492159456
sVcreation_date
p55
I1318767734
sVscore
p56
I110
sVowner
p57
(dp58
Vuser_id
p59
I862380
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/f59afc45d1155d16d753dd8654fc8900?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I8152
sVlink
p65
Vhttp://stackoverflow.com/users/862380/ovgolovin
p66
sVaccept_rate
p67
I91
sVdisplay_name
p68
Vovgolovin
p69
ssVis_accepted
p70
I01
sVlast_edit_date
p71
I1492159456
sVanswer_id
p72
I7784214
sa(dp73
Vbody
p74
V<h3><strong>UPDATE: 2017-03-34</strong></h3>\u000a\u000a<p><em>There have been no updates to Python(x,y) since June of 2015, so I think it's safe to assume it has been abandoned.</em></p>\u000a\u000a<h3><strong>UPDATE</strong>: 2016-11-11</h3>\u000a\u000a<p>As <a href="http://stackoverflow.com/questions/15102943/how-to-update-python/17954487#comment68062745_17954487">@cxw comments below</a>, these answers are for the same bit-versions, and by bit-version I mean 64-bit vs. 32-bit. For example, these answers would apply to updating from 64-bit Python-2.7.10 to 64-bit Python-2.7.11, <em>ie</em>: the <em>same</em> bit-version. While it is possible to install two different bit versions of Python together, it would require some hacking, so I'll save that exercise for the reader. If you don't want to hack, I suggest that if switching bit-versions, remove the other bit-version first.</p>\u000a\u000a<h3><strong>UPDATES</strong>: 2016-05-16</h3>\u000a\u000a<ul>\u000a<li><a href="https://docs.continuum.io/anaconda/install#windows-install" rel="nofollow noreferrer">Anaconda</a> and <a href="http://conda.pydata.org/docs/install/quick.html#windows-miniconda-install" rel="nofollow noreferrer">MiniConda</a> can be used with an existing Python installation by disabling the options to alter the Windows <code>PATH</code> and Registry. After extraction, create a symlink to <code>conda</code> in your <code>bin</code> or install conda from PyPI. Then create another symlink called <code>conda-activate</code> to <code>activate</code> in the Anaconda/Miniconda root bin folder. Now Anaconda/Miniconda is just like Ruby RVM. Just use <code>conda-activate root</code> to enable Anaconda/Miniconda.</li>\u000a<li>Portable Python is no longer being developed or maintained.</li>\u000a</ul>\u000a\u000a<h3><em>TL;DR</em></h3>\u000a\u000a<ul>\u000a<li><strong>same <em>major</em> version</strong> (<em>e.g.</em> 2.7.5), just install over old (<em>e.g.</em> 2.7.4), </li>\u000a<li><strong>different <em>major</em> version</strong> (<em>e.g.</em> 3.3), install side-by-side with old, set paths/associations to point to dominant (<em>e.g.</em> 2.7), shortcut to other (<em>e.g.</em> in BASH <code>$ ln /c/Python33/python.exe python3</code>).</li>\u000a</ul>\u000a\u000a<h3>The answer depends:</h3>\u000a\u000a<ol>\u000a<li><p>If OP has 2.7.x and wants to install newer version of 2.7.x, then</p>\u000a\u000a<ul>\u000a<li>if using <a href="http://en.wikipedia.org/wiki/Windows_Installer" rel="nofollow noreferrer">MSI installer</a> from the <a href="http://www.python.org/download/" rel="nofollow noreferrer">official Python website</a>, just install over old version, installer will issue warning that it will remove and replace the older version; looking in "installed programs" in "control panel" before and after confirms that the old version has been replaced by the new version; newer versions of 2.7.x are backwards compatible so this is completely safe and therefore IMHO multiple versions of 2.7.x should never necessary.</li>\u000a<li>if building from source, then you should probably build in a fresh, clean directory, and then point your path to the new build once it passes all tests and you are confident that it has been built successfully, but you may wish to keep the old build around because building from source may occasionally have issues. See my <a href="http://poquitopicante.blogspot.com/2015/03/building-python-x64-on-windows-7-with.html" rel="nofollow noreferrer">guide for building Python x64 on Windows 7 with SDK 7.0</a>.</li>\u000a<li>if installing from a distribution such as <a href="https://code.google.com/p/pythonxy/" rel="nofollow noreferrer">Python(x,y)</a>, see their website. <strong><a href="http://python-xy.github.io/" rel="nofollow noreferrer">Python(x,y)</a> has been abandoned.</strong> <s>I believe that updates can be handled from within Python(x,y) with their package manager, but <a href="https://code.google.com/p/pythonxy/wiki/Downloads#Updates" rel="nofollow noreferrer">updates are also included on their website</a>. I could not find a specific reference so perhaps someone else can speak to this. Similar to ActiveState and probably Enthought, Python (x,y) clearly states it is incompatible with other installations of Python:</s>\u000a\u000a<blockquote>\u000a  <p>It is recommended to uninstall any other Python distribution before installing Python(x,y)  </p>\u000a</blockquote></li>\u000a<li><a href="https://www.enthought.com/downloads/" rel="nofollow noreferrer">Enthought Canopy</a> uses an MSI and will install either into <code>Program Files\u005cEnthought</code> or <code>home\u005cAppData\u005cLocal\u005cEnthought\u005cCanopy\u005cApp</code> for all users or per user respectively. Newer installations are updated by using the built in update tool. See their <a href="http://docs.enthought.com/canopy/quick-start/install_windows.html" rel="nofollow noreferrer">documentation</a>.</li>\u000a<li><a href="http://www.activestate.com/activepython/downloads" rel="nofollow noreferrer">ActiveState</a> also uses an MSI so newer installations can be installed on top of older ones. See their <a href="http://docs.activestate.com/activepython/2.7/installnotes.html#msi" rel="nofollow noreferrer">installation notes</a>.\u000a\u000a<blockquote>\u000a  <p>Other Python 2.7 Installations On Windows, ActivePython 2.7 cannot coexist with other Python 2.7 installations (for example, a Python 2.7 build from python.org). Uninstall any other Python 2.7 installations before installing ActivePython 2.7.</p>\u000a</blockquote></li>\u000a<li><a href="http://www.sagemath.org/download-windows.html" rel="nofollow noreferrer">Sage</a> recommends that you install it into a virtual machine, and provides a Oracle VirtualBox image file that can be used for this purpose. Upgrades are handled internally by issuing the <code>sage -upgrade</code> command.</li>\u000a<li><p><a href="https://store.continuum.io/cshop/anaconda/" rel="nofollow noreferrer">Anaconda</a> can be <a href="http://docs.continuum.io/anaconda/install.html#updating-from-older-anaconda-versions" rel="nofollow noreferrer">updated by using the <code>conda</code> command</a>:</p>\u000a\u000a<pre><code>conda update conda\u000aconda update anaconda\u000a</code></pre>\u000a\u000a<p>Anaconda/Miniconda lets users create <em>environments</em> to manage multiple Python versions including Python-2.6, 2.7, 3.3, 3.4 and 3.5. The root Anaconda/Miniconda installations are currently based on either Python-2.7 or Python-3.5.</p>\u000a\u000a<p><s>Anaconda will likely disrupt any other Python installations. Installation uses MSI installer.</s>\u000a[<strong>UPDATE</strong>: 2016-05-16] <em>Anaconda and Miniconda now use <code>.exe</code> installers and provide options to disable Windows <code>PATH</code> and Registry alterations.</em></p>\u000a\u000a<p>Therefore Anaconda/Miniconda can be installed without disrupting existing Python installations depending on how it was installed and the options that were selected during installation. If the <code>.exe</code> installer is used and the options to alter Windows <code>PATH</code> and Registry are <em>not</em> disabled, then any previous Python installations <em>will be disabled</em>, but simply uninstalling the Anaconda/Miniconda installation should restore the original Python installation, except maybe the Windows Registry <code>Python\u005cPythonCore</code> keys.</p>\u000a\u000a<p>Anaconda/Miniconda makes the following registry edits regardless of the installation options: <code>HKCU\u005cSoftware\u005cPython\u005cContinuumAnalytics\u005c</code> with the following keys: <code>Help</code>, <code>InstallPath</code>, <code>Modules</code> and <code>PythonPath</code> - official Python registers these keys too, but under <code>Python\u005cPythonCore</code>. Also uninstallation info is registered for Anaconda\u005cMiniconda. Unless you select the "Register with Windows" option during installation, it doesn't create <code>PythonCore</code>, so integrations like Python Tools for Visual Studio do not automatically see Anaconda/Miniconda. If the option to register Anaconda/Miniconda <em>is</em> enabled, then I think your existing Python Windows Registry keys will be altered and uninstallation will probably not restore them.</p></li>\u000a<li><a href="https://winpython.github.io/" rel="nofollow noreferrer">WinPython</a> updates, I think, can be handled through the <a href="https://github.com/winpython/winpython/wiki/Winpython-Control-Panel" rel="nofollow noreferrer">WinPython  Control Panel</a>.</li>\u000a<li><a href="http://portablepython.com/" rel="nofollow noreferrer">PortablePython</a> is <strong>no longer being developed</strong>. <s>It had no update method. Possibly updates could be unzipped into a fresh directory and then <code>App\u005clib\u005csite-packages</code> and <code>App\u005cScripts</code> could be copied to the new installation, but if this didn't work then reinstalling all packages might have been necessary. Use <code>pip list</code> to see what packages were installed and their versions. Some were installed by PortablePython. Use <code>easy_install pip</code> to install pip if it wasn't installed.</s></li>\u000a</ul></li>\u000a<li><p>If OP has 2.7.x and wants to install a different version, <em>e.g.</em> &lt;=2.6.x or >=3.x.x, then installing different versions side-by-side is fine. You must choose which version of Python (if any) to associate with <code>*.py</code> files and which you want on your path, although you should be able to set up shells with different paths if you use <a href="http://tiswww.case.edu/php/chet/bash/bashtop.html" rel="nofollow noreferrer">BASH</a>. AFAIK 2.7.x is backwards compatible with 2.6.x, so IMHO side-by-side installs is not necessary, however Python-3.x.x is not backwards compatible, so my recommendation would be to put Python-2.7 on your path and have Python-3 be an optional version by creating a shortcut to its executable called python3 (this is a common setup on Linux). The official Python default install path on Windows is</p>\u000a\u000a<ul>\u000a<li>C:\u005cPython33 for 3.3.x (latest 2013-07-29)</li>\u000a<li>C:\u005cPython32 for 3.2.x</li>\u000a<li>&amp;c.</li>\u000a<li>C:\u005cPython27 for 2.7.x (latest 2013-07-29)</li>\u000a<li>C:\u005cPython26 for 2.6.x</li>\u000a<li>&amp;c.</li>\u000a</ul></li>\u000a<li><p>If OP is not updating Python, but merely updating packages, they may wish to look into <a href="https://pypi.python.org/pypi/virtualenv" rel="nofollow noreferrer">virtualenv</a> to keep the different versions of packages specific to their development projects separate. <a href="https://pypi.python.org/pypi/pip" rel="nofollow noreferrer">Pip</a> is also a great tool to update packages. If packages use binary installers I usually uninstall the old package before installing the new one.</p></li>\u000a</ol>\u000a\u000a<p>I hope this clears up any confusion.</p>\u000a
p75
sVquestion_id
p76
I15102943
sVlast_activity_date
p77
I1490390478
sVcreation_date
p78
I1375208415
sVscore
p79
I74
sVowner
p80
(dp81
Vuser_id
p82
I1020470
sVprofile_image
p83
Vhttps://www.gravatar.com/avatar/155b46c9d301fa5a4c1a2a9ad4f2849e?s=128&d=identicon&r=PG
p84
sVuser_type
p85
Vregistered
p86
sVreputation
p87
I9503
sVlink
p88
Vhttp://stackoverflow.com/users/1020470/mark-mikofski
p89
sVdisplay_name
p90
VMark Mikofski
p91
ssVis_accepted
p92
I01
sVlast_edit_date
p93
I1490390478
sVanswer_id
p94
I17954487
sa(dp95
Vbody
p96
V<p>To verify that a string is a keyword you can use <a href="https://docs.python.org/3/library/keyword.html#keyword.iskeyword" rel="nofollow noreferrer"><code>keyword.iskeyword</code></a>; to get the list of reserved keywords you can use <a href="https://docs.python.org/3/library/keyword.html#keyword.kwlist" rel="nofollow noreferrer"><code>keyword.kwlist</code></a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import keyword\u000a&gt;&gt;&gt; keyword.iskeyword('break')\u000aTrue\u000a&gt;&gt;&gt; keyword.kwlist\u000a['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', \u000a 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', \u000a 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', \u000a 'while', 'with', 'yield']\u000a</code></pre>\u000a\u000a<p>If you want to include built-in names as well (Python 3), then:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import builtins\u000a&gt;&gt;&gt; dir(builtins)\u000a['ArithmeticError', 'AssertionError', 'AttributeError',\u000a 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',\u000a 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',\u000a 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError',\u000a 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError',\u000a 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError',\u000a 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError',\u000a 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',\u000a 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',\u000a 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning',\u000a 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError',\u000a 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration',\u000a 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit',\u000a 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError',\u000a 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError',\u000a 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_',\u000a '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__',\u000a '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool',\u000a 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex',\u000a 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval',\u000a 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr',\u000a 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int',\u000a 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map',\u000a 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow',\u000a 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set',\u000a 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple',\u000a 'type', 'vars', 'zip']\u000a</code></pre>\u000a\u000a<p>For Python 2 you'll need to use <code>__builtin__</code> module</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import __builtin__\u000a&gt;&gt;&gt; dir(__builtin__)\u000a['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '_', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']\u000a</code></pre>\u000a
p97
sVquestion_id
p98
I22864221
sVlast_activity_date
p99
I1487716648
sVcreation_date
p100
I1396618221
sVscore
p101
I121
sVowner
p102
(dp103
Vuser_id
p104
I846892
sVprofile_image
p105
Vhttps://i.stack.imgur.com/E9dZn.png?s=128&g=1
p106
sVuser_type
p107
Vregistered
p108
sVreputation
p109
I142521
sVlink
p110
Vhttp://stackoverflow.com/users/846892/ashwini-chaudhary
p111
sVaccept_rate
p112
I88
sVdisplay_name
p113
VAshwini Chaudhary
p114
ssVis_accepted
p115
I01
sVlast_edit_date
p116
I1487716648
sVanswer_id
p117
I22864250
sa(dp118
Vbody
p119
V<p>The interesting bit is that it depends on the order in which the integers are <strong>first</strong> created. For example instead of <code>shuffle</code> create a random sequence with <code>random.randint</code>:</p>\u000a\u000a<pre><code>from timeit import timeit\u000aimport random\u000a\u000aa = [random.randint(0, 10**6) for _ in range(10**6)]\u000afor _ in range(5):\u000a    print(timeit(lambda: list(a), number=10))\u000a</code></pre>\u000a\u000a<p>This is as fast as copying your <code>list(range(10**6))</code> (first and fast example).</p>\u000a\u000a<p>However when you shuffle - then your integers aren't in the order they were first created anymore, that's what makes it slow. </p>\u000a\u000a<p>A quick intermezzo:</p>\u000a\u000a<ul>\u000a<li>All Python objects are on the heap, so every object is a pointer.</li>\u000a<li>Copying a list is a shallow operation.</li>\u000a<li>However Python uses reference counting so when an object is put in a new container it's reference count must be incremented (<a href="https://github.com/python/cpython/blob/403ccddb9598bac6e0e6db4ba5aa2fe494512a98/Objects/listobject.c#L454"><code>Py_INCREF</code> in <code>list_slice</code></a>), so Python really needs to go to where the object is. It can't just copy the reference.</li>\u000a</ul>\u000a\u000a<p>So when you copy your list you get each item of that list and put it "as is" in the new list. When your next item was created shortly after the current one there is a good chance (no guarantee!) that it's saved next to it on the heap. </p>\u000a\u000a<p>Let's assume that whenever your computer loads an item in the cache it also loads the <code>x</code> next-in-memory items (cache locality). Then your computer can perform the reference count increment for <code>x+1</code> items on the same cache!</p>\u000a\u000a<p>With the shuffled sequence it still loads the next-in-memory items but these aren't the ones next-in-list. So it can't perform the reference-count increment without "really" looking for the next item.</p>\u000a\u000a<p><strong>TL;DR:</strong> The actual speed depends on what happened before the copy: in what order were these items created and in what order are these in the list.</p>\u000a\u000a<hr>\u000a\u000a<p>You can verify this by looking at the <a href="https://docs.python.org/3/library/functions.html#id"><code>id</code></a>:</p>\u000a\u000a<blockquote>\u000a  <p>CPython implementation detail: This is the address of the object in memory.</p>\u000a</blockquote>\u000a\u000a<pre><code>a = list(range(10**6, 10**6+100))\u000afor item in a:\u000a    print(id(item))\u000a</code></pre>\u000a\u000a<p>Just to show a short excerpt:</p>\u000a\u000a<pre><code>1496489995888\u000a1496489995920  # +32\u000a1496489995952  # +32\u000a1496489995984  # +32\u000a1496489996016  # +32\u000a1496489996048  # +32\u000a1496489996080  # +32\u000a1496489996112\u000a1496489996144\u000a1496489996176\u000a1496489996208\u000a1496489996240\u000a1496507297840\u000a1496507297872\u000a1496507297904\u000a1496507297936\u000a1496507297968\u000a1496507298000\u000a1496507298032\u000a1496507298064\u000a1496507298096\u000a1496507298128\u000a1496507298160\u000a1496507298192\u000a</code></pre>\u000a\u000a<p>So these objects are really "next to each other on the heap". With <code>shuffle</code> they aren't:</p>\u000a\u000a<pre><code>import random\u000aa = list(range(10**6, 100+10**6))\u000arandom.shuffle(a)\u000alast = None\u000afor item in a:\u000a    if last is not None:\u000a        print('diff', id(item) - id(last))\u000a    last = item\u000a</code></pre>\u000a\u000a<p>Which shows these are not really next to each other in memory:</p>\u000a\u000a<pre><code>diff 736\u000adiff -64\u000adiff -17291008\u000adiff -128\u000adiff 288\u000adiff -224\u000adiff 17292032\u000adiff -1312\u000adiff 1088\u000adiff -17292384\u000adiff 17291072\u000adiff 608\u000adiff -17290848\u000adiff 17289856\u000adiff 928\u000adiff -672\u000adiff 864\u000adiff -17290816\u000adiff -128\u000adiff -96\u000adiff 17291552\u000adiff -192\u000adiff 96\u000adiff -17291904\u000adiff 17291680\u000adiff -1152\u000adiff 896\u000adiff -17290528\u000adiff 17290816\u000adiff -992\u000adiff 448\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>Important note:</strong></p>\u000a\u000a<p>I haven't thought this up myself. Most of the informations can be found in the <a href="https://rickystewart.wordpress.com/2013/09/03/why-sorting-an-array-makes-a-python-loop-faster/">blogpost of Ricky Stewart</a>.</p>\u000a\u000a<p>This answer is based on the "official" CPython implementation of Python. The details in other implementations (Jython, PyPy, IronPython, ...) may be different. Thanks @JörgWMittag <a href="http://stackoverflow.com/questions/42107442/why-is-copying-a-shuffled-list-much-slower/42108043#comment71388367_42108043">for pointing this out</a>.</p>\u000a
p120
sVquestion_id
p121
I42107442
sVlast_activity_date
p122
I1486595106
sVcreation_date
p123
I1486542357
sVscore
p124
I94
sVowner
p125
(dp126
Vuser_id
p127
I5393381
sVprofile_image
p128
Vhttps://www.gravatar.com/avatar/308ffa6266fda6d94bc56fbd9e9798f9?s=128&d=identicon&r=PG&f=1
p129
sVuser_type
p130
Vregistered
p131
sVreputation
p132
I28808
sVlink
p133
Vhttp://stackoverflow.com/users/5393381/mseifert
p134
sVaccept_rate
p135
I92
sVdisplay_name
p136
VMSeifert
p137
ssVis_accepted
p138
I01
sVlast_edit_date
p139
I1486595106
sVanswer_id
p140
I42108043
sa(dp141
Vbody
p142
V<p>There isn't one because you can't do it in the general case - what if you have a lazy infinite generator?  For example:</p>\u000a\u000a<pre><code>def fib():\u000a    a, b = 0, 1\u000a    while True:\u000a        a, b = b, a + b\u000a        yield a\u000a</code></pre>\u000a\u000a<p>This never terminates but will generate the Fibonacci numbers.  You can get as many Fibonacci numbers as you want by calling <code>next()</code>.</p>\u000a\u000a<p>If you really need to know the number of items there are, then you can't iterate through them linearly one time anyway, so just use a different data structure such as a regular list.</p>\u000a
p143
sVquestion_id
p144
I393053
sVlast_activity_date
p145
I1480957419
sVcreation_date
p146
I1230231219
sVscore
p147
I26
sVowner
p148
(dp149
Vuser_id
p150
I9530
sVprofile_image
p151
Vhttps://www.gravatar.com/avatar/924800e76876546c5c575c0175e1f434?s=128&d=identicon&r=PG
p152
sVuser_type
p153
Vregistered
p154
sVreputation
p155
I259251
sVlink
p156
Vhttp://stackoverflow.com/users/9530/adam-rosenfield
p157
sVaccept_rate
p158
I78
sVdisplay_name
p159
VAdam Rosenfield
p160
ssVis_accepted
p161
I01
sVlast_edit_date
p162
I1480957419
sVanswer_id
p163
I393059
sa(dp164
Vbody
p165
V<p>it seems that</p>\u000a\u000a<pre><code>python -m pip install XXX \u000a</code></pre>\u000a\u000a<p>will work anyway (worked for me)\u000a(see <a href="http://stackoverflow.com/a/25812942/3368958">link by user474491</a>)</p>\u000a
p166
sVquestion_id
p167
I24627525
sVlast_activity_date
p168
I1477354286
sVcreation_date
p169
I1413560229
sVscore
p170
I195
sVowner
p171
(dp172
Vuser_id
p173
I4154243
sVprofile_image
p174
Vhttps://www.gravatar.com/avatar/5dcdf28d944831f2fb87d48b81500c66?s=128&d=identicon&r=PG
p175
sVuser_type
p176
Vunregistered
p177
sVreputation
p178
I1990
sVlink
p179
Vhttp://stackoverflow.com/users/4154243/user4154243
p180
sVdisplay_name
p181
Vuser4154243
p182
ssVis_accepted
p183
I01
sVlast_edit_date
p184
I1477354286
sVanswer_id
p185
I26428562
sa(dp186
Vbody
p187
V<p>Create an generator using</p>\u000a\u000a<pre><code>g = myfunct()\u000a</code></pre>\u000a\u000a<p>Everytime you would like an item, use</p>\u000a\u000a<pre><code>g.next()\u000a</code></pre>\u000a\u000a<p>or</p>\u000a\u000a<pre><code>next(g)\u000a</code></pre>\u000a\u000a<p>If the generator exits, it will raise <code>StopIteration</code>.  You can either catch this exception if necessary, or use the <code>default</code> argument to <code>next()</code>:</p>\u000a\u000a<pre><code>next(g, default_value)\u000a</code></pre>\u000a
p188
sVquestion_id
p189
I4741243
sVlast_activity_date
p190
I1476877201
sVcreation_date
p191
I1295474290
sVscore
p192
I126
sVowner
p193
(dp194
Vuser_id
p195
I279627
sVprofile_image
p196
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p197
sVuser_type
p198
Vregistered
p199
sVreputation
p200
I252330
sVlink
p201
Vhttp://stackoverflow.com/users/279627/sven-marnach
p202
sVaccept_rate
p203
I78
sVdisplay_name
p204
VSven Marnach
p205
ssVis_accepted
p206
I01
sVlast_edit_date
p207
I1476877201
sVanswer_id
p208
I4741269
sa(dp209
Vbody
p210
V<p>As of PyDev 2.3.0, <code>pep8</code> is integrated in PyDev by default, even shipping with a default version of it.</p>\u000a\u000a<p>Open Window > Preferences</p>\u000a\u000a<p>It must be enabled in PyDev > Editor > Code Analysis > pep8.py</p>\u000a\u000a<p>Errors/Warnings should be shown as markers (as other things in the regular code analysis).</p>\u000a\u000a<p>In the event a file is not analyzed, see <a href="https://stackoverflow.com/a/31001619/832230">https://stackoverflow.com/a/31001619/832230</a>.</p>\u000a
p211
sVquestion_id
p212
I399956
sVlast_activity_date
p213
I1475613851
sVcreation_date
p214
I1324027939
sVscore
p215
I83
sVowner
p216
(dp217
Vuser_id
p218
I110451
sVprofile_image
p219
Vhttps://www.gravatar.com/avatar/70fc26faedcbfc82344a0b347053aaa0?s=128&d=identicon&r=PG
p220
sVuser_type
p221
Vregistered
p222
sVreputation
p223
I18399
sVlink
p224
Vhttp://stackoverflow.com/users/110451/fabio-zadrozny
p225
sVdisplay_name
p226
VFabio Zadrozny
p227
ssVis_accepted
p228
I01
sVlast_edit_date
p229
I1475613851
sVanswer_id
p230
I8532188
sa(dp231
Vbody
p232
V<p><code>pi</code> isn't exactly representable as Python float (same as the platform C's <code>double</code> type).  The closest representable approximation is used.</p>\u000a\u000a<p>Here's the exact approximation in use on my box (probably the same as on your box):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import math\u000a&gt;&gt;&gt; (math.pi / 2).as_integer_ratio()\u000a(884279719003555, 562949953421312)\u000a</code></pre>\u000a\u000a<p>To find the tangent of that ratio, I'm going to switch to wxMaxima now:</p>\u000a\u000a<pre><code>(%i1) fpprec: 32;\u000a(%o1) 32\u000a(%i2) tan(bfloat(884279719003555) / 562949953421312);\u000a(%o2) 1.6331239353195369755967737041529b16\u000a</code></pre>\u000a\u000a<p>So essentially identical to what you got.  The binary approximation to <code>pi/2</code> used is a little bit less than the mathematical ("infinite precision") value of <code>pi/2</code>.  So you get a very large tangent instead of <code>infinity</code>.  The computed <code>tan()</code> is appropriate for the actual input!</p>\u000a\u000a<p>For exactly the same kinds of reasons, e.g.,</p>\u000a\u000a<pre><code>&gt;&gt;&gt; math.sin(math.pi)\u000a1.2246467991473532e-16\u000a</code></pre>\u000a\u000a<p>doesn't return 0.  The approximation <code>math.pi</code> is a little bit less than <code>pi</code>, and the displayed result is correct <em>given</em> that truth.</p>\u000a\u000a<h2>OTHER WAYS OF SEEING math.pi</h2>\u000a\u000a<p>There are several ways to see the exact approximation in use:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import math\u000a&gt;&gt;&gt; math.pi.as_integer_ratio()\u000a(884279719003555, 281474976710656)\u000a</code></pre>\u000a\u000a<p><code>math.pi</code> is exactly equal to the mathematical ("infinite precision") value of that ratio.</p>\u000a\u000a<p>Or as an exact float in hex notation:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; math.pi.hex()\u000a'0x1.921fb54442d18p+1'\u000a</code></pre>\u000a\u000a<p>Or in a way most easily understood by just about everyone:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import decimal\u000a&gt;&gt;&gt; decimal.Decimal(math.pi)\u000aDecimal('3.141592653589793115997963468544185161590576171875')\u000a</code></pre>\u000a\u000a<p>While it may not be immediately obvious, every finite binary float is exactly representable as a finite decimal float (the reverse is <em>not</em> true; e.g. the decimal <code>0.1</code> is not exactly representable as a finite binary float), and the <code>Decimal(some_float)</code> constructor produces the exact equivalent.</p>\u000a\u000a<p>Here's the true value of <code>pi</code> followed by the exact decimal value of <code>math.pi</code>, and a caret on the third line points to the first digit where they differ:</p>\u000a\u000a<pre><code>true    3.14159265358979323846264338327950288419716939937510...\u000amath.pi 3.141592653589793115997963468544185161590576171875\u000a                         ^\u000a</code></pre>\u000a\u000a<p><code>math.pi</code> is the same across "almost all" boxes now, because almost all boxes now use the same binary floating-point format (IEEE 754 double precision).  You can use any of the ways above to confirm that on <em>your</em> box, or to find the precise approximation in use if your box is an exception.</p>\u000a
p233
sVquestion_id
p234
I38295501
sVlast_activity_date
p235
I1468520336
sVcreation_date
p236
I1468178702
sVscore
p237
I111
sVowner
p238
(dp239
Vuser_id
p240
I2705542
sVprofile_image
p241
Vhttps://www.gravatar.com/avatar/ffc22708f70324dcbfe34f247637ca01?s=128&d=identicon&r=PG&f=1
p242
sVuser_type
p243
Vregistered
p244
sVreputation
p245
I29776
sVlink
p246
Vhttp://stackoverflow.com/users/2705542/tim-peters
p247
sVdisplay_name
p248
VTim Peters
p249
ssVis_accepted
p250
I01
sVlast_edit_date
p251
I1468520336
sVanswer_id
p252
I38295695
sa(dp253
Vbody
p254
V<p><a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#creating-objects">https://docs.djangoproject.com/en/dev/topics/db/queries/#creating-objects</a></p>\u000a\u000a<blockquote>\u000a  <p>To create and save an object in a single step, use the <code>create()</code> method.</p>\u000a</blockquote>\u000a
p255
sVquestion_id
p256
I26672077
sVlast_activity_date
p257
I1465837228
sVcreation_date
p258
I1414750482
sVscore
p259
I76
sVowner
p260
(dp261
Vuser_id
p262
I3033586
sVprofile_image
p263
Vhttps://www.gravatar.com/avatar/81624733b64a3b891be13544da85323f?s=128&d=identicon&r=PG
p264
sVuser_type
p265
Vregistered
p266
sVreputation
p267
I4421
sVlink
p268
Vhttp://stackoverflow.com/users/3033586/madzohan
p269
sVaccept_rate
p270
I100
sVdisplay_name
p271
Vmadzohan
p272
ssVis_accepted
p273
I01
sVlast_edit_date
p274
I1465837228
sVanswer_id
p275
I26672182
sa(dp276
Vbody
p277
V<p>Install the <a href="https://pypi.python.org/pypi/wheel"><code>wheel</code> package</a> first:</p>\u000a\u000a<pre><code>pip install wheel\u000a</code></pre>\u000a\u000a<p>The documentation isn't overly clear on this, but <em>"the wheel project provides a bdist_wheel command for setuptools"</em> actually means <em>"the wheel <strong>package</strong>..."</em>.</p>\u000a
p278
sVquestion_id
p279
I26664102
sVlast_activity_date
p280
I1465381130
sVcreation_date
p281
I1414706920
sVscore
p282
I130
sVowner
p283
(dp284
Vuser_id
p285
I873145
sVprofile_image
p286
Vhttps://www.gravatar.com/avatar/0ab6f2836e0722ea0cbfeb97a74f131d?s=128&d=identicon&r=PG
p287
sVuser_type
p288
Vregistered
p289
sVreputation
p290
I27549
sVlink
p291
Vhttp://stackoverflow.com/users/873145/thomas-orozco
p292
sVaccept_rate
p293
I100
sVdisplay_name
p294
VThomas Orozco
p295
ssVis_accepted
p296
I01
sVlast_edit_date
p297
I1465381130
sVanswer_id
p298
I26664184
sa(dp299
Vbody
p300
V<p>At the end of <code>foo()</code>, create a <code>Timer</code> which calls <code>foo()</code> itself after 10 seconds.<br>\u000aBecause, <code>Timer</code> create a new <code>thread</code> to call <code>foo()</code>.<br>\u000a You can do other stuff without being blocked.</p>\u000a\u000a<pre><code>import time, threading\u000adef foo():\u000a    print(time.ctime())\u000a    threading.Timer(10, foo).start()\u000a\u000afoo()\u000a\u000a#output:\u000a#Thu Dec 22 14:46:08 2011\u000a#Thu Dec 22 14:46:18 2011\u000a#Thu Dec 22 14:46:28 2011\u000a#Thu Dec 22 14:46:38 2011\u000a</code></pre>\u000a
p301
sVquestion_id
p302
I8600161
sVlast_activity_date
p303
I1456820798
sVcreation_date
p304
I1324536410
sVscore
p305
I109
sVowner
p306
(dp307
Vuser_id
p308
I348785
sVprofile_image
p309
Vhttps://www.gravatar.com/avatar/7f3dcb0c380783d1be77bfdd5fc5fda6?s=128&d=identicon&r=PG
p310
sVuser_type
p311
Vregistered
p312
sVreputation
p313
I80070
sVlink
p314
Vhttp://stackoverflow.com/users/348785/kev
p315
sVaccept_rate
p316
I97
sVdisplay_name
p317
Vkev
p318
ssVis_accepted
p319
I01
sVlast_edit_date
p320
I1456820798
sVanswer_id
p321
I8600301
sa(dp322
Vbody
p323
V<p>The reason doing <code>urllib3.disable_warnings()</code> didn't work for you is because it looks like you're using a separate instance of urllib3 vendored inside of requests.</p>\u000a\u000a<p>I gather this based on the path here: <code>/usr/lib/python2.6/site-packages/requests/packages/urllib3/connectionpool.py</code></p>\u000a\u000a<p>To disable warnings in requests' vendored urllib3, you'll need to import that specific instance of the module:</p>\u000a\u000a<pre><code>import requests\u000afrom requests.packages.urllib3.exceptions import InsecureRequestWarning\u000a\u000arequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\u000a</code></pre>\u000a
p324
sVquestion_id
p325
I27981545
sVlast_activity_date
p326
I1456012091
sVcreation_date
p327
I1421518640
sVscore
p328
I259
sVowner
p329
(dp330
Vuser_id
p331
I187878
sVprofile_image
p332
Vhttps://www.gravatar.com/avatar/c355dd26a5f80e1605d2ff1ecb6e719e?s=128&d=identicon&r=PG
p333
sVuser_type
p334
Vregistered
p335
sVreputation
p336
I4875
sVlink
p337
Vhttp://stackoverflow.com/users/187878/shazow
p338
sVdisplay_name
p339
Vshazow
p340
ssVis_accepted
p341
I01
sVlast_edit_date
p342
I1456012091
sVanswer_id
p343
I28002687
sa(dp344
Vbody
p345
V<p>This grabs subdirectories:</p>\u000a\u000a<pre><code>import os\u000adef get_size(start_path = '.'):\u000a    total_size = 0\u000a    for dirpath, dirnames, filenames in os.walk(start_path):\u000a        for f in filenames:\u000a            fp = os.path.join(dirpath, f)\u000a            total_size += os.path.getsize(fp)\u000a    return total_size\u000a\u000aprint get_size()\u000a</code></pre>\u000a\u000a<p>And a oneliner for fun using <a href="http://docs.python.org/library/os.html?highlight=shutil#os.listdir" rel="noreferrer">os.listdir</a> (<em>Does not include sub-directories</em>):</p>\u000a\u000a<pre><code>import os\u000asum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f))\u000a</code></pre>\u000a\u000a<p>Reference:</p>\u000a\u000a<p><a href="http://docs.python.org/library/os.path.html#os.path.getsize" rel="noreferrer">os.path.getsize</a> - Gives the size in bytes</p>\u000a\u000a<p><a href="http://docs.python.org/library/os.html?highlight=shutil#os.walk" rel="noreferrer">os.walk</a></p>\u000a\u000a<p><strong>Updated</strong>\u000aTo use <em>os.path.getsize</em>, this is clearer than using the os.stat().st_size method.</p>\u000a\u000a<p><em>Thanks to ghostdog74 for pointing this out!</em></p>\u000a\u000a<p><a href="http://docs.python.org/library/os.html?highlight=shutil#os.stat" rel="noreferrer">os.stat</a> - <em>st_size</em> Gives the size in bytes.  Can also be used to get file size and other file related information.</p>\u000a\u000a<p><strong>Update 2015</strong></p>\u000a\u000a<p><code>scandir</code> is available and may be faster than the <code>os.walk</code> method.  A package is available from pypi, and <code>os.scandir()</code> is to be included in python 3.5:</p>\u000a\u000a<p><a href="https://pypi.python.org/pypi/scandir" rel="noreferrer">https://pypi.python.org/pypi/scandir</a></p>\u000a
p346
sVquestion_id
p347
I1392413
sVlast_activity_date
p348
I1454030120
sVcreation_date
p349
I1252396095
sVscore
p350
I120
sVowner
p351
(dp352
Vuser_id
p353
I24718
sVprofile_image
p354
Vhttps://i.stack.imgur.com/0kiYe.jpg?s=128&g=1
p355
sVuser_type
p356
Vregistered
p357
sVreputation
p358
I21625
sVlink
p359
Vhttp://stackoverflow.com/users/24718/monkut
p360
sVaccept_rate
p361
I77
sVdisplay_name
p362
Vmonkut
p363
ssVis_accepted
p364
I01
sVlast_edit_date
p365
I1454030120
sVanswer_id
p366
I1392549
sa(dp367
Vbody
p368
V<p>Courtesy of <a href="http://python.6.n6.nabble.com/IPython-User-ipython-notebook-how-to-display-image-not-from-pylab-td4497427.html" rel="noreferrer">this post</a>, you can do the following:</p>\u000a\u000a<pre><code>from IPython.display import Image\u000aImage(filename='test.png') \u000a</code></pre>\u000a
p369
sVquestion_id
p370
I11854847
sVlast_activity_date
p371
I1453846549
sVcreation_date
p372
I1344379037
sVscore
p373
I159
sVowner
p374
(dp375
Vuser_id
p376
I983191
sVprofile_image
p377
Vhttps://www.gravatar.com/avatar/e560fcc186a4719ccd501fec19cec6dc?s=128&d=identicon&r=PG
p378
sVuser_type
p379
Vregistered
p380
sVreputation
p381
I5244
sVlink
p382
Vhttp://stackoverflow.com/users/983191/zach
p383
sVaccept_rate
p384
I100
sVdisplay_name
p385
Vzach
p386
ssVis_accepted
p387
I01
sVlast_edit_date
p388
I1453846549
sVanswer_id
p389
I11855133
sa(dp390
Vbody
p391
V<p>You could use the <code>or</code> operator:</p>\u000a\u000a<pre><code>return x or "default"\u000a</code></pre>\u000a\u000a<p>Note that this returns <code>"default"</code> also if <code>x</code> is any other falsy value, including an empty list, 0, empty string, or even <code>datetime.time(0)</code> (midnight).</p>\u000a
p392
sVquestion_id
p393
I13710631
sVlast_activity_date
p394
I1453246338
sVcreation_date
p395
I1354650279
sVscore
p396
I114
sVowner
p397
(dp398
Vuser_id
p399
I133496
sVprofile_image
p400
Vhttps://www.gravatar.com/avatar/b78b575f750a5411b3c86af9689135e4?s=128&d=identicon&r=PG
p401
sVuser_type
p402
Vregistered
p403
sVreputation
p404
I1571
sVlink
p405
Vhttp://stackoverflow.com/users/133496/starhusker
p406
sVdisplay_name
p407
Vstarhusker
p408
ssVis_accepted
p409
I01
sVlast_edit_date
p410
I1453246338
sVanswer_id
p411
I13710667
sa(dp412
Vbody
p413
V<p>You can use negative numbers to round integers:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; round(1234, -3)\u000a1000.0\u000a</code></pre>\u000a\u000a<p>Thus if you need only most significant digit:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from math import log10, floor\u000a&gt;&gt;&gt; def round_to_1(x):\u000a...   return round(x, -int(floor(log10(abs(x)))))\u000a... \u000a&gt;&gt;&gt; round_to_1(0.0232)\u000a0.02\u000a&gt;&gt;&gt; round_to_1(1234243)\u000a1000000.0\u000a&gt;&gt;&gt; round_to_1(13)\u000a10.0\u000a&gt;&gt;&gt; round_to_1(4)\u000a4.0\u000a&gt;&gt;&gt; round_to_1(19)\u000a20.0\u000a</code></pre>\u000a\u000a<p>You'll probably have to take care of turning float to integer if it's bigger than 1.</p>\u000a
p414
sVquestion_id
p415
I3410976
sVlast_activity_date
p416
I1452148985
sVcreation_date
p417
I1280977053
sVscore
p418
I99
sVowner
p419
(dp420
Vuser_id
p421
I331701
sVprofile_image
p422
Vhttps://www.gravatar.com/avatar/d7acf7758537fdeaa2282add8d8c674a?s=128&d=identicon&r=PG
p423
sVuser_type
p424
Vregistered
p425
sVreputation
p426
I1403
sVlink
p427
Vhttp://stackoverflow.com/users/331701/evgeny
p428
sVaccept_rate
p429
I75
sVdisplay_name
p430
VEvgeny
p431
ssVis_accepted
p432
I01
sVlast_edit_date
p433
I1452148985
sVanswer_id
p434
I3411435
sa(dp435
Vbody
p436
V<p>You need more than a <code>timedelta</code> to tell how many years have passed; you also need to know the beginning (or ending) date.  (It's a leap year thing.)  </p>\u000a\u000a<p>Your best bet is to use the <code>dateutil.relativedelta</code> <a href="http://labix.org/python-dateutil" rel="noreferrer">object</a>, but that's a 3rd party module.  If you want to know the <code>datetime</code> that was <code>n</code> years from some date (defaulting to right now), you can do the following::</p>\u000a\u000a<pre><code>from dateutil.relativedelta import relativedelta\u000a\u000adef yearsago(years, from_date=None):\u000a    if from_date is None:\u000a        from_date = datetime.now()\u000a    return from_date - relativedelta(years=years)\u000a</code></pre>\u000a\u000a<p>If you'd rather stick with the standard library, the answer is a little more complex::</p>\u000a\u000a<pre><code>from datetime import datetime\u000adef yearsago(years, from_date=None):\u000a    if from_date is None:\u000a        from_date = datetime.now()\u000a    try:\u000a        return from_date.replace(year=from_date.year - years)\u000a    except ValueError:\u000a        # Must be 2/29!\u000a        assert from_date.month == 2 and from_date.day == 29 # can be removed\u000a        return from_date.replace(month=2, day=28,\u000a                                 year=from_date.year-years)\u000a</code></pre>\u000a\u000a<p>If it's 2/29, and 18 years ago there was no 2/29, this function will return 2/28.  If you'd rather return 3/1, just change the last <code>return</code> statement to read::</p>\u000a\u000a<pre><code>    return from_date.replace(month=3, day=1,\u000a                             year=from_date.year-years)\u000a</code></pre>\u000a\u000a<p>Your question originally said you wanted to know how many years it's been since some date.  Assuming you want an integer number of years, you can guess based on 365.25 days per year and then check using either of the <code>yearsago</code> functions defined above::</p>\u000a\u000a<pre><code>def num_years(begin, end=None):\u000a    if end is None:\u000a        end = datetime.now()\u000a    num_years = int((end - begin).days / 365.25)\u000a    if begin &gt; yearsago(num_years, end):\u000a        return num_years - 1\u000a    else:\u000a        return num_years\u000a</code></pre>\u000a
p437
sVquestion_id
p438
I765797
sVlast_activity_date
p439
I1449844001
sVcreation_date
p440
I1240171515
sVscore
p441
I95
sVowner
p442
(dp443
Vuser_id
p444
I89535
sVprofile_image
p445
Vhttps://www.gravatar.com/avatar/55455771d6771dfd58860695d3e597e6?s=128&d=identicon&r=PG
p446
sVuser_type
p447
Vregistered
p448
sVreputation
p449
I7721
sVlink
p450
Vhttp://stackoverflow.com/users/89535/rick-copeland
p451
sVdisplay_name
p452
VRick Copeland
p453
ssVis_accepted
p454
I01
sVlast_edit_date
p455
I1449844001
sVanswer_id
p456
I765990
sa(dp457
Vbody
p458
V<p>What you see is the <em>interpreter</em> echoing back the return value of <code>next()</code> in addition to <code>i</code> being printed each iteration:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = iter(list(range(10)))\u000a&gt;&gt;&gt; for i in a:\u000a...    print(i)\u000a...    next(a)\u000a... \u000a0\u000a1\u000a2\u000a3\u000a4\u000a5\u000a6\u000a7\u000a8\u000a9\u000a</code></pre>\u000a\u000a<p>So <code>0</code> is the output of <code>print(i)</code>, <code>1</code> the return value from <code>next()</code>, echoed by the interactive interpreter, etc. There are just 5 iterations, each iteration resulting in 2 lines being written to the terminal.</p>\u000a\u000a<p>If you assign the output of <code>next()</code> things work as expected:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = iter(list(range(10)))\u000a&gt;&gt;&gt; for i in a:\u000a...    print(i)\u000a...    _ = next(a)\u000a... \u000a0\u000a2\u000a4\u000a6\u000a8\u000a</code></pre>\u000a\u000a<p>or print <em>extra</em> information to differentiate the <code>print()</code> output from the interactive interpreter echo:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a = iter(list(range(10)))\u000a&gt;&gt;&gt; for i in a:\u000a...    print('Printing: {}'.format(i))\u000a...    next(a)\u000a... \u000aPrinting: 0\u000a1\u000aPrinting: 2\u000a3\u000aPrinting: 4\u000a5\u000aPrinting: 6\u000a7\u000aPrinting: 8\u000a9\u000a</code></pre>\u000a\u000a<p>In other words, <code>next()</code> is working as expected, but because it returns the next value from the iterator, echoed by the interactive interpreter, you are led to believe that the loop has its own iterator copy somehow.</p>\u000a
p459
sVquestion_id
p460
I16814984
sVlast_activity_date
p461
I1444147622
sVcreation_date
p462
I1369833677
sVscore
p463
I112
sVowner
p464
(dp465
Vuser_id
p466
I100297
sVprofile_image
p467
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p468
sVuser_type
p469
Vmoderator
p470
sVreputation
p471
I554877
sVlink
p472
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p473
sVdisplay_name
p474
VMartijn Pieters
p475
ssVis_accepted
p476
I01
sVlast_edit_date
p477
I1444147622
sVanswer_id
p478
I16815056
sa(dp479
Vbody
p480
V<p>Probably the best way to do this is to use the setuptools package_data directive.  This does mean using <a href="http://peak.telecommunity.com/DevCenter/setuptools" rel="noreferrer">setuptools</a> (or <a href="http://pypi.python.org/pypi/distribute/" rel="noreferrer">distribute</a>) instead of distutils, but this is a very seamless "upgrade".</p>\u000a\u000a<p>Here's a full (but untested) example:</p>\u000a\u000a<pre><code>from setuptools import setup, find_packages\u000a\u000asetup(\u000a    name='your_project_name',\u000a    version='0.1',\u000a    description='A description.',\u000a    packages=find_packages(exclude=['ez_setup', 'tests', 'tests.*']),\u000a    package_data={'': ['license.txt']},\u000a    include_package_data=True,\u000a    install_requires=[],\u000a)\u000a</code></pre>\u000a\u000a<p>Note the specific line that's critical here:</p>\u000a\u000a<pre><code>package_data={'': ['license.txt']}\u000a</code></pre>\u000a\u000a<p>This is a dict of package names (empty = all packages) to a list of patterns (can include globs).  For example, if you want to only specify files within your package, you can do that too:</p>\u000a\u000a<pre><code>package_data={'yourpackage': ['*.txt', 'path/to/resources/*.txt']}\u000a</code></pre>\u000a\u000a<p>The solution here is definitely <em>not</em> to rename your non-py files with a .py extension.</p>\u000a\u000a<p>See <a href="http://svn.colorstudy.com/home/ianb/setuptools-presentation/setuptools-slides.txt" rel="noreferrer">Ian Bicking's presentation</a> for more info.</p>\u000a\u000a<h1>UPDATE: Another [Better] Approach</h1>\u000a\u000a<p>Another approach that works well if you just want to control the contents of the source distribution (sdist) and have files outside of the package (e.g. top-level directory) is to add a MANIFEST.in file.  See <a href="http://docs.python.org/distutils/sourcedist.html#the-manifest-in-template" rel="noreferrer">the Python documentation</a> for the format of this file.</p>\u000a\u000a<p>Since writing this response, I have found that using MANIFEST.in is typically a less frustrating approach to just make sure your source distribution (tar.gz) has the files you need. </p>\u000a\u000a<p>For example, if you wanted to include the requirements.txt from top-level, recursively include the top-level "data" directory:</p>\u000a\u000a<pre><code>include requirements.txt\u000arecursive-include data *\u000a</code></pre>\u000a
p481
sVquestion_id
p482
I1612733
sVlast_activity_date
p483
I1440678443
sVcreation_date
p484
I1260152416
sVscore
p485
I89
sVowner
p486
(dp487
Vuser_id
p488
I63296
sVprofile_image
p489
Vhttps://www.gravatar.com/avatar/2c32b52f6d7c057f0c54afd069eeb98f?s=128&d=identicon&r=PG
p490
sVuser_type
p491
Vregistered
p492
sVreputation
p493
I2380
sVlink
p494
Vhttp://stackoverflow.com/users/63296/hans-l
p495
sVaccept_rate
p496
I75
sVdisplay_name
p497
VHans L
p498
ssVis_accepted
p499
I01
sVlast_edit_date
p500
I1440678443
sVanswer_id
p501
I1857436
sa(dp502
Vbody
p503
V<p>You can make a view with a different dtype (as long as the itemsize remains the same), and then copy in-place into the view:</p>\u000a\u000a<pre><code>import numpy as np\u000ax = np.arange(10, dtype='int32')\u000ay = x.view('float32')\u000ay[:] = x\u000a\u000aprint(y)\u000a</code></pre>\u000a\u000a<p>yields</p>\u000a\u000a<pre><code>array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.], dtype=float32)\u000a</code></pre>\u000a\u000a<p>To show the conversion was in-place, note that copying <em>from</em> <code>x</code> to <code>y</code> altered <code>x</code>:</p>\u000a\u000a<pre><code>print(x)\u000a</code></pre>\u000a\u000a<p>prints</p>\u000a\u000a<pre><code>array([         0, 1065353216, 1073741824, 1077936128, 1082130432,\u000a       1084227584, 1086324736, 1088421888, 1090519040, 1091567616])\u000a</code></pre>\u000a
p504
sVquestion_id
p505
I4389517
sVlast_activity_date
p506
I1435227548
sVcreation_date
p507
I1291883463
sVscore
p508
I66
sVowner
p509
(dp510
Vuser_id
p511
I190597
sVprofile_image
p512
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p513
sVuser_type
p514
Vregistered
p515
sVreputation
p516
I425294
sVlink
p517
Vhttp://stackoverflow.com/users/190597/unutbu
p518
sVaccept_rate
p519
I88
sVdisplay_name
p520
Vunutbu
p521
ssVis_accepted
p522
I01
sVlast_edit_date
p523
I1435227548
sVanswer_id
p524
I4396247
sa(dp525
Vbody
p526
V<p>Using multiple threads on CPython won't give you better performance for pure-Python code due to the global interpreter lock (GIL).  I suggest using the <a href="http://docs.python.org/library/multiprocessing.html"><code>multiprocessing</code></a> module instead:</p>\u000a\u000a<pre><code>pool = multiprocessing.Pool(4)\u000aout1, out2, out3 = zip(*pool.map(calc_stuff, range(0, 10 * offset, offset)))\u000a</code></pre>\u000a\u000a<p>Note that this won't work in the interactive interpreter.</p>\u000a\u000a<p>To avoid the usual FUD around the GIL: There wouldn't be any advantage to using threads for this example anyway.  You <em>want</em> to use processes here, not threads, because they avoid a whole bunch of problems.</p>\u000a
p527
sVquestion_id
p528
I9786102
sVlast_activity_date
p529
I1434561272
sVcreation_date
p530
I1332244378
sVscore
p531
I79
sVowner
p532
(dp533
Vuser_id
p534
I279627
sVprofile_image
p535
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p536
sVuser_type
p537
Vregistered
p538
sVreputation
p539
I252330
sVlink
p540
Vhttp://stackoverflow.com/users/279627/sven-marnach
p541
sVaccept_rate
p542
I78
sVdisplay_name
p543
VSven Marnach
p544
ssVis_accepted
p545
I01
sVlast_edit_date
p546
I1434561272
sVanswer_id
p547
I9786225
sa(dp548
Vbody
p549
V<p>If you have same columns in all your <code>csv</code> files then you can try the code below.\u000aI have added <code>header=0</code> so that after reading <code>csv</code> first row can be assigned as the column names.</p>\u000a\u000a<pre><code>path =r'C:\u005cDRO\u005cDCL_rawdata_files' # use your path\u000aallFiles = glob.glob(path + "/*.csv")\u000aframe = pd.DataFrame()\u000alist_ = []\u000afor file_ in allFiles:\u000a    df = pd.read_csv(file_,index_col=None, header=0)\u000a    list_.append(df)\u000aframe = pd.concat(list_)\u000a</code></pre>\u000a
p550
sVquestion_id
p551
I20906474
sVlast_activity_date
p552
I1429798432
sVcreation_date
p553
I1390217359
sVscore
p554
I93
sVowner
p555
(dp556
Vuser_id
p557
I1983512
sVprofile_image
p558
Vhttps://i.stack.imgur.com/GEqtR.jpg?s=128&g=1
p559
sVuser_type
p560
Vregistered
p561
sVreputation
p562
I1396
sVlink
p563
Vhttp://stackoverflow.com/users/1983512/gaurav-singh
p564
sVaccept_rate
p565
I33
sVdisplay_name
p566
VGaurav Singh
p567
ssVis_accepted
p568
I01
sVlast_edit_date
p569
I1429798432
sVanswer_id
p570
I21232849
sa(dp571
Vbody
p572
V<p>The datetime class has a method strftime. <a href="https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior" rel="noreferrer">strftime() Behavior</a> in the Python docs documents the different formats it accepts. </p>\u000a\u000a<p>For this specific example, it would look something like:</p>\u000a\u000a<pre><code>my_datetime.strftime("%B %d, %Y")\u000a</code></pre>\u000a
p573
sVquestion_id
p574
I2158347
sVlast_activity_date
p575
I1424823097
sVcreation_date
p576
I1264717424
sVscore
p577
I114
sVowner
p578
(dp579
Vuser_id
p580
I680
sVprofile_image
p581
Vhttps://www.gravatar.com/avatar/4829c840d6358510b7ab02aa52c2f2ce?s=128&d=identicon&r=PG
p582
sVuser_type
p583
Vregistered
p584
sVreputation
p585
I17449
sVlink
p586
Vhttp://stackoverflow.com/users/680/cristian
p587
sVaccept_rate
p588
I72
sVdisplay_name
p589
VCristian
p590
ssVis_accepted
p591
I01
sVlast_edit_date
p592
I1424823097
sVanswer_id
p593
I2158454
sa(dp594
Vbody
p595
V<p>The <a href="http://docs.python.org/library/datetime.html#datetime.datetime.strptime" rel="noreferrer"><code>datetime</code> module documentation</a> says:</p>\u000a\u000a<blockquote>\u000a  <p>Return a datetime corresponding to date_string, parsed according to format. This is equivalent to <code>datetime(*(time.strptime(date_string, format)[0:6]))</code>.</p>\u000a</blockquote>\u000a\u000a<p>See that <code>[0:6]</code>? That gets you <code>(year, month, day, hour, minute, second)</code>. Nothing else. No mention of timezones.</p>\u000a\u000a<p>Interestingly, [Win XP SP2, Python 2.6, 2.7] passing your example to <code>time.strptime</code> doesn't work but if you strip off the " %Z" and the " EST" it does work. Also using "UTC" or "GMT" instead of "EST" works. "PST" and "MEZ" don't work. Puzzling.</p>\u000a
p596
sVquestion_id
p597
I3305413
sVlast_activity_date
p598
I1419054558
sVcreation_date
p599
I1279786116
sVscore
p600
I22
sVowner
p601
(dp602
Vuser_id
p603
I84270
sVprofile_image
p604
Vhttps://www.gravatar.com/avatar/da2c0de47c3681c58f25b1eb821f7221?s=128&d=identicon&r=PG
p605
sVuser_type
p606
Vregistered
p607
sVreputation
p608
I55767
sVlink
p609
Vhttp://stackoverflow.com/users/84270/john-machin
p610
sVdisplay_name
p611
VJohn Machin
p612
ssVis_accepted
p613
I01
sVlast_edit_date
p614
I1419054558
sVanswer_id
p615
I3306887
sa(dp616
Vbody
p617
V<p>Your <code>reader</code> variable is an iterable, by looping over it you retrieve the rows.</p>\u000a\u000a<p>To make it skip one item before your loop, simply call <a href="http://docs.python.org/2/library/functions.html#next"><code>next(reader, None)</code></a> and ignore the return value.</p>\u000a\u000a<p>You can also simplify your code a little; use the opened files as context managers to have them closed automatically:</p>\u000a\u000a<pre><code>with open("tmob_notcleaned.csv", "rb") as infile, open("tmob_cleaned.csv", "wb") as outfile:\u000a   reader = csv.reader(infile)\u000a   next(reader, None)  # skip the headers\u000a   writer = csv.writer(outfile)\u000a   for row in reader:\u000a       # process each row\u000a       writer.writerow(row)\u000a\u000a# no need to close, the files are closed automatically when you get to this point.\u000a</code></pre>\u000a\u000a<p>If you wanted to write the header to the output file unprocessed, that's easy too, pass the output of <code>next()</code> to <code>writer.writerow()</code>:</p>\u000a\u000a<pre><code>headers = next(reader, None)  # returns the headers or `None` if the input is empty\u000aif headers:\u000a    writer.writerow(headers)\u000a</code></pre>\u000a
p618
sVquestion_id
p619
I14257373
sVlast_activity_date
p620
I1418883031
sVcreation_date
p621
I1357819673
sVscore
p622
I149
sVowner
p623
(dp624
Vuser_id
p625
I100297
sVprofile_image
p626
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p627
sVuser_type
p628
Vmoderator
p629
sVreputation
p630
I554877
sVlink
p631
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p632
sVdisplay_name
p633
VMartijn Pieters
p634
ssVis_accepted
p635
I01
sVlast_edit_date
p636
I1418883031
sVanswer_id
p637
I14257599
sa(dp638
Vbody
p639
V<ul>\u000a<li><p>A <a href="http://docs.python.org/library/multiprocessing.html#multiprocessing.Pipe" rel="noreferrer"><code>Pipe()</code></a> can only have two endpoints.</p></li>\u000a<li><p>A <a href="http://docs.python.org/library/multiprocessing.html#multiprocessing.Queue" rel="noreferrer"><code>Queue()</code></a> can have multiple producers and consumers.</p></li>\u000a</ul>\u000a\u000a<p><strong>When to use them</strong></p>\u000a\u000a<p>If you need more than two points to communicate, use a <a href="http://docs.python.org/library/multiprocessing.html#multiprocessing.Queue" rel="noreferrer"><code>Queue()</code></a>.</p>\u000a\u000a<p>If you need absolute performance, a <a href="http://docs.python.org/library/multiprocessing.html#multiprocessing.Pipe" rel="noreferrer"><code>Pipe()</code></a> is much faster because <code>Queue()</code> is built on top of <code>Pipe()</code>.</p>\u000a\u000a<p><strong>Performance Benchmarking</strong></p>\u000a\u000a<p>Let's assume you want to spawn two processes and send messages between them as quickly as possible.  These are the timing results of a drag race between similar tests using <code>Pipe()</code> and <code>Queue()</code>... This is on a ThinkpadT61 running Ubuntu 11.10, and Python 2.7.2.</p>\u000a\u000a<p>FYI, I threw in results for <a href="http://docs.python.org/library/multiprocessing.html#multiprocessing.JoinableQueue" rel="noreferrer"><code>JoinableQueue()</code></a> as a bonus; <code>JoinableQueue()</code> accounts for tasks when <code>queue.task_done()</code> is called (it doesn't even know about the specific task, it just counts unfinished tasks in the queue), so that <code>queue.join()</code> knows the work is finished.</p>\u000a\u000a<p>The code for each at bottom of this answer...</p>\u000a\u000a<pre><code>mpenning@mpenning-T61:~$ python multi_pipe.py \u000aSending 10000 numbers to Pipe() took 0.0369849205017 seconds\u000aSending 100000 numbers to Pipe() took 0.328398942947 seconds\u000aSending 1000000 numbers to Pipe() took 3.17266988754 seconds\u000ampenning@mpenning-T61:~$ python multi_queue.py \u000aSending 10000 numbers to Queue() took 0.105256080627 seconds\u000aSending 100000 numbers to Queue() took 0.980564117432 seconds\u000aSending 1000000 numbers to Queue() took 10.1611330509 seconds\u000ampnening@mpenning-T61:~$ python multi_joinablequeue.py \u000aSending 10000 numbers to JoinableQueue() took 0.172781944275 seconds\u000aSending 100000 numbers to JoinableQueue() took 1.5714070797 seconds\u000aSending 1000000 numbers to JoinableQueue() took 15.8527247906 seconds\u000ampenning@mpenning-T61:~$\u000a</code></pre>\u000a\u000a<p>In summary <code>Pipe()</code> is about three times faster than a <code>Queue()</code>.  Don't even think about the <code>JoinableQueue()</code> unless you really must have the benefits.</p>\u000a\u000a<p><strong>BONUS MATERIAL 2</strong></p>\u000a\u000a<p>Multiprocessing introduces subtle changes in information flow that make debugging hard unless you know some shortcuts.  For instance, you might have a script that works fine when indexing through a dictionary in under many conditions, but infrequently fails with certain inputs.</p>\u000a\u000a<p>Normally we get clues to the failure when the entire python process crashes; however, you don't get unsolicited crash tracebacks printed to the console if the multiprocessing function crashes.  Tracking down unknown multiprocessing crashes is hard without a clue to what crashed the process.</p>\u000a\u000a<p>The simplest way I have found to track down multiprocessing crash informaiton is to wrap the entire multiprocessing function in a <code>try</code> / <code>except</code> and use <code>traceback.print_exc()</code>:</p>\u000a\u000a<pre><code>import traceback\u000adef reader(args):\u000a    try:\u000a        # Insert stuff to be multiprocessed here\u000a        return args[0]['that']\u000a    except:\u000a        print "FATAL: reader({0}) exited while multiprocessing".format(args) \u000a        traceback.print_exc()\u000a</code></pre>\u000a\u000a<p>Now, when you find a crash you see something like:</p>\u000a\u000a<pre><code>FATAL: reader([{'crash', 'this'}]) exited while multiprocessing\u000aTraceback (most recent call last):\u000a  File "foo.py", line 19, in __init__\u000a    self.run(task_q, result_q)\u000a  File "foo.py", line 46, in run\u000a    raise ValueError\u000aValueError\u000a</code></pre>\u000a\u000a<p><strong>Source Code:</strong></p>\u000a\u000a<hr>\u000a\u000a<pre><code>"""\u000amulti_pipe.py\u000a"""\u000afrom multiprocessing import Process, Pipe\u000aimport time\u000a\u000adef reader(pipe):\u000a    output_p, input_p = pipe\u000a    input_p.close()    # We are only reading\u000a    while True:\u000a        try:\u000a            msg = output_p.recv()    # Read from the output pipe and do nothing\u000a        except EOFError:\u000a            break\u000a\u000adef writer(count, input_p):\u000a    for ii in xrange(0, count):\u000a        input_p.send(ii)             # Write 'count' numbers into the input pipe\u000a\u000aif __name__=='__main__':\u000a    for count in [10**4, 10**5, 10**6]:\u000a        output_p, input_p = Pipe()\u000a        reader_p = Process(target=reader, args=((output_p, input_p),))\u000a        reader_p.start()     # Launch the reader process\u000a\u000a        output_p.close()       # We no longer need this part of the Pipe()\u000a        _start = time.time()\u000a        writer(count, input_p) # Send a lot of stuff to reader()\u000a        input_p.close()        # Ask the reader to stop when it reads EOF\u000a        reader_p.join()\u000a        print "Sending %s numbers to Pipe() took %s seconds" % (count, \u000a            (time.time() - _start))\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<pre><code>"""\u000amulti_queue.py\u000a"""\u000afrom multiprocessing import Process, Queue\u000aimport time\u000a\u000adef reader(queue):\u000a    while True:\u000a        msg = queue.get()         # Read from the queue and do nothing\u000a        if (msg == 'DONE'):\u000a            break\u000a\u000adef writer(count, queue):\u000a    for ii in xrange(0, count):\u000a        queue.put(ii)             # Write 'count' numbers into the queue\u000a    queue.put('DONE')\u000a\u000aif __name__=='__main__':\u000a    for count in [10**4, 10**5, 10**6]:\u000a        queue = Queue()   # reader() reads from queue\u000a                          # writer() writes to queue\u000a        reader_p = Process(target=reader, args=((queue),))\u000a        reader_p.daemon = True\u000a        reader_p.start()     # Launch the reader process\u000a\u000a        _start = time.time()\u000a        writer(count, queue)    # Send a lot of stuff to reader()\u000a        reader_p.join()         # Wait for the reader to finish\u000a        print "Sending %s numbers to Queue() took %s seconds" % (count, \u000a            (time.time() - _start))\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<pre><code>"""\u000amulti_joinablequeue.py\u000a"""\u000afrom multiprocessing import Process, JoinableQueue\u000aimport time\u000a\u000adef reader(queue):\u000a    while True:\u000a        msg = queue.get()         # Read from the queue and do nothing\u000a        queue.task_done()\u000a\u000adef writer(count, queue):\u000a    for ii in xrange(0, count):\u000a        queue.put(ii)             # Write 'count' numbers into the queue\u000a\u000aif __name__=='__main__':\u000a    for count in [10**4, 10**5, 10**6]:\u000a        queue = JoinableQueue()   # reader() reads from queue\u000a                                  # writer() writes to queue\u000a        reader_p = Process(target=reader, args=((queue),))\u000a        reader_p.daemon = True\u000a        reader_p.start()     # Launch the reader process\u000a\u000a        _start = time.time()\u000a        writer(count, queue) # Send a lot of stuff to reader()\u000a        queue.join()         # Wait for the reader to finish\u000a        print "Sending %s numbers to JoinableQueue() took %s seconds" % (count, \u000a            (time.time() - _start))\u000a</code></pre>\u000a
p640
sVquestion_id
p641
I8463008
sVlast_activity_date
p642
I1417877240
sVcreation_date
p643
I1323596197
sVscore
p644
I151
sVowner
p645
(dp646
Vuser_id
p647
I667301
sVprofile_image
p648
Vhttps://www.gravatar.com/avatar/ce84c3fb1d8cbce03a2f03f0011f52d3?s=128&d=identicon&r=PG
p649
sVuser_type
p650
Vregistered
p651
sVreputation
p652
I25377
sVlink
p653
Vhttp://stackoverflow.com/users/667301/mike-pennington
p654
sVaccept_rate
p655
I98
sVdisplay_name
p656
VMike Pennington
p657
ssVis_accepted
p658
I01
sVlast_edit_date
p659
I1417877240
sVanswer_id
p660
I8463046
sa(dp661
Vbody
p662
V<p>Webkit based browsers (like Google Chrome or Safari) has built-in developer tools. In Chrome you can open it <code>Menu-&gt;Tools-&gt;Developer Tools</code>. The <code>Network</code> tab allows you to see all information about every request and response:</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/8w860.png" alt="enter image description here"></p>\u000a\u000a<p>In the bottom of the picture you can see that I've filtered request down to <code>XHR</code> - these are requests made by javascript code.</p>\u000a\u000a<p><em>Tip: log is cleared every time you load a page, at the bottom of the picture, the black dot button will preserve log.</em></p>\u000a\u000a<p>After analyzing requests and responses you can simulate these requests from your web-crawler and extract valuable data. In many cases it will be easier to get your data than parsing HTML, because that data does not contain presentation logic and is formatted to be accessed by javascript code.</p>\u000a\u000a<p>Firefox has similar extension, it is called <a href="http://getfirebug.com/" rel="noreferrer">firebug</a>. Some will argue that firebug is even more powerful but I like the simplicity of webkit.</p>\u000a
p663
sVquestion_id
p664
I8550114
sVlast_activity_date
p665
I1414663137
sVcreation_date
p666
I1324493502
sVscore
p667
I57
sVowner
p668
(dp669
Vuser_id
p670
I296069
sVprofile_image
p671
Vhttps://i.stack.imgur.com/hhcvO.png?s=128&g=1
p672
sVuser_type
p673
Vregistered
p674
sVreputation
p675
I8840
sVlink
p676
Vhttp://stackoverflow.com/users/296069/ski
p677
sVaccept_rate
p678
I75
sVdisplay_name
p679
Vski
p680
ssVis_accepted
p681
I01
sVlast_edit_date
p682
I1414663137
sVanswer_id
p683
I8594831
sa(dp684
Vbody
p685
V<p>In Python 2.*, by far the fastest approach is the <code>.translate</code> method:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x='aaa12333bb445bb54b5b52'\u000a&gt;&gt;&gt; import string\u000a&gt;&gt;&gt; all=string.maketrans('','')\u000a&gt;&gt;&gt; nodigs=all.translate(all, string.digits)\u000a&gt;&gt;&gt; x.translate(all, nodigs)\u000a'1233344554552'\u000a&gt;&gt;&gt; \u000a</code></pre>\u000a\u000a<p><code>string.maketrans</code> makes a translation table (a string of length 256) which in this case is the same as <code>''.join(chr(x) for x in range(256))</code> (just faster to make;-). <code>.translate</code> applies the translation table (which here is irrelevant since <code>all</code> essentially means identity) AND deletes characters present in the second argument -- the key part.</p>\u000a\u000a<p><code>.translate</code> works very differently on Unicode strings (and strings in Python 3 -- I <strong>do</strong> wish questions specified which major-release of Python is of interest!) -- not quite this simple, not quite this fast, though still quite usable.</p>\u000a\u000a<p>Back to 2.*, the performance difference is impressive...:</p>\u000a\u000a<pre><code>$ python -mtimeit -s'import string; all=string.maketrans("", ""); nodig=all.translate(all, string.digits); x="aaa12333bb445bb54b5b52"' 'x.translate(all, nodig)'\u000a1000000 loops, best of 3: 1.04 usec per loop\u000a$ python -mtimeit -s'import re;  x="aaa12333bb445bb54b5b52"' 're.sub(r"\u005cD", "", x)'\u000a100000 loops, best of 3: 7.9 usec per loop\u000a</code></pre>\u000a\u000a<p>Speeding things up by 7-8 times is hardly peanuts, so the <code>translate</code> method is well worth knowing and using. The other popular non-RE approach...:</p>\u000a\u000a<pre><code>$ python -mtimeit -s'x="aaa12333bb445bb54b5b52"' '"".join(i for i in x if i.isdigit())'\u000a100000 loops, best of 3: 11.5 usec per loop\u000a</code></pre>\u000a\u000a<p>is 50% slower than RE, so the <code>.translate</code> approach beats it by over an order of magnitude.</p>\u000a\u000a<p>In Python 3, or for Unicode, you need to pass <code>.translate</code> a mapping (with ordinals, not characters directly, as keys) that returns <code>None</code> for what you want to delete. Here's a convenient way to express this for deletion of "everything but" a few characters:</p>\u000a\u000a<pre><code>import string\u000a\u000aclass Del:\u000a  def __init__(self, keep=string.digits):\u000a    self.comp = dict((ord(c),c) for c in keep)\u000a  def __getitem__(self, k):\u000a    return self.comp.get(k)\u000a\u000aDD = Del()\u000a\u000ax='aaa12333bb445bb54b5b52'\u000ax.translate(DD)\u000a</code></pre>\u000a\u000a<p>also emits <code>'1233344554552'</code>.  However, putting this in xx.py we have...:</p>\u000a\u000a<pre><code>$ python3.1 -mtimeit -s'import re;  x="aaa12333bb445bb54b5b52"' 're.sub(r"\u005cD", "", x)'\u000a100000 loops, best of 3: 8.43 usec per loop\u000a$ python3.1 -mtimeit -s'import xx; x="aaa12333bb445bb54b5b52"' 'x.translate(xx.DD)'\u000a10000 loops, best of 3: 24.3 usec per loop\u000a</code></pre>\u000a\u000a<p>...which shows the performance advantage disappears, for this kind of "deletion" tasks, and becomes a performance decrease.</p>\u000a
p686
sVquestion_id
p687
I1450897
sVlast_activity_date
p688
I1414012642
sVcreation_date
p689
I1253464639
sVscore
p690
I89
sVowner
p691
(dp692
Vuser_id
p693
I95810
sVprofile_image
p694
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p695
sVuser_type
p696
Vregistered
p697
sVreputation
p698
I516079
sVlink
p699
Vhttp://stackoverflow.com/users/95810/alex-martelli
p700
sVaccept_rate
p701
I80
sVdisplay_name
p702
VAlex Martelli
p703
ssVis_accepted
p704
I01
sVlast_edit_date
p705
I1414012642
sVanswer_id
p706
I1451407
sa(dp707
Vbody
p708
V<p>ElementTree is not too smart about namespaces. You need to give the <code>.find()</code>, <code>findall()</code> and <code>iterfind()</code> methods an explicit namespace dictionary. This is not documented very well:</p>\u000a\u000a<pre><code>namespaces = {'owl': 'http://www.w3.org/2002/07/owl#'} # add more as needed\u000a\u000aroot.findall('owl:Class', namespaces)\u000a</code></pre>\u000a\u000a<p>Prefixes are <em>only</em> looked up in the <code>namespaces</code> parameter you pass in. This means you can use any namespace prefix you like; the API splits off the <code>owl:</code> part, looks up the corresponding namespace URL in the <code>namespaces</code> dictionary, then changes the search to look for the XPath expression <code>{http://www.w3.org/2002/07/owl}Class</code> instead. You can use the same syntax yourself too of course:</p>\u000a\u000a<pre><code>root.findall('{http://www.w3.org/2002/07/owl#}Class')\u000a</code></pre>\u000a\u000a<p>If you can switch to the <a href="http://lxml.de/" rel="noreferrer"><code>lxml</code> library</a> things are better; that library supports the same ElementTree API, but collects namespaces for you in a <code>.nsmap</code> attribute on elements.</p>\u000a
p709
sVquestion_id
p710
I14853243
sVlast_activity_date
p711
I1412090449
sVcreation_date
p712
I1360757902
sVscore
p713
I133
sVowner
p714
(dp715
Vuser_id
p716
I100297
sVprofile_image
p717
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p718
sVuser_type
p719
Vmoderator
p720
sVreputation
p721
I554877
sVlink
p722
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p723
sVdisplay_name
p724
VMartijn Pieters
p725
ssVis_accepted
p726
I01
sVlast_edit_date
p727
I1412090449
sVanswer_id
p728
I14853417
sa(dp729
Vbody
p730
V<p>As Ned pointed out, <code>sys.excepthook</code> is invoked every time an exception is raised and uncaught.  The practical implication of this is that in your code you can override the default behavior of <code>sys.excepthook</code> to do whatever you want (including using <code>logging.exception</code>).</p>\u000a\u000a<p>As a straw man example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import sys\u000a&gt;&gt;&gt; def foo(exctype, value, tb):\u000a...     print 'My Error Information'\u000a...     print 'Type:', exctype\u000a...     print 'Value:', value\u000a...     print 'Traceback:', tb\u000a... \u000a</code></pre>\u000a\u000a<p>Override <code>sys.excepthook</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; sys.excepthook = foo\u000a</code></pre>\u000a\u000a<p>Commit obvious syntax error (leave out the colon) and get back custom error information:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def bar(a, b)\u000aMy Error Information\u000aType: &lt;type 'exceptions.SyntaxError'&gt;\u000aValue: invalid syntax (&lt;stdin&gt;, line 1)\u000aTraceback: None\u000a</code></pre>\u000a\u000a<p>For more information about <code>sys.excepthook</code>: <a href="http://docs.python.org/library/sys.html#sys.excepthook" rel="noreferrer">http://docs.python.org/library/sys.html#sys.excepthook</a></p>\u000a
p731
sVquestion_id
p732
I6234405
sVlast_activity_date
p733
I1407505494
sVcreation_date
p734
I1307157974
sVscore
p735
I82
sVowner
p736
(dp737
Vuser_id
p738
I307293
sVprofile_image
p739
Vhttps://www.gravatar.com/avatar/8abc78adacf50a15e104e77e28e38411?s=128&d=identicon&r=PG
p740
sVuser_type
p741
Vregistered
p742
sVreputation
p743
I2711
sVlink
p744
Vhttp://stackoverflow.com/users/307293/jacinda
p745
sVdisplay_name
p746
VJacinda
p747
ssVis_accepted
p748
I01
sVlast_edit_date
p749
I1407505494
sVanswer_id
p750
I6234491
sa(dp751
Vbody
p752
V<p>There are a few options:</p>\u000a\u000a<ul>\u000a<li><p>You could use Selenium Grid so that the browser is opened on a completely different machine (or virtual machine) that you can then connect to via VNC or Remote Desktop Connection if you wanted to see the browser.   Also, another option: if you run a Jenkins foreground process on that remote server, it can execute your test project on the desktop.</p></li>\u000a<li><p>You can run Selenium 'headless' on Linux in XVFB. I've never tried doing this and doubt it's really worth the effort. <a href="http://www.alittlemadness.com/2008/03/05/running-selenium-headless/" rel="noreferrer">http://www.alittlemadness.com/2008/03/05/running-selenium-headless/</a></p></li>\u000a<li><p>You can wrap Selenium RC in a Windows service. <a href="http://support.microsoft.com/kb/137890" rel="noreferrer">http://support.microsoft.com/kb/137890</a> . Except that permissions constraints on later versions of windows will probably prevent Selenium from accessing the desktop like Windows 2000 used to allow us to do.</p></li>\u000a<li><p>Another option would be to use something like WebDriver HTMLUnitDriver, which doesn't launch a 'real' browser. <a href="http://code.google.com/p/webdriver/" rel="noreferrer">http://code.google.com/p/webdriver/</a>  .  Also there is a PhantomJS option as well as a 'headless Chrome' that you could use.</p></li>\u000a<li><p>Of course there's also the option of using a service like SauceLabs, where you can get your tests to be run in the cloud. After your tests have completed you can watch a video of them running.</p></li>\u000a</ul>\u000a
p753
sVquestion_id
p754
I1418082
sVlast_activity_date
p755
I1403209501
sVcreation_date
p756
I1252865073
sVscore
p757
I81
sVowner
p758
(dp759
Vuser_id
p760
I154975
sVprofile_image
p761
Vhttps://www.gravatar.com/avatar/fd74178aadc963ffc6397ad1e22d8ce7?s=128&d=identicon&r=PG
p762
sVuser_type
p763
Vregistered
p764
sVreputation
p765
I7358
sVlink
p766
Vhttp://stackoverflow.com/users/154975/dave-hunt
p767
sVaccept_rate
p768
I100
sVdisplay_name
p769
VDave Hunt
p770
ssVis_accepted
p771
I01
sVlast_edit_date
p772
I1403209501
sVanswer_id
p773
I1418419
sa(dp774
Vbody
p775
V<p><a href="http://www.diveintopython.net/http_web_services/user_agent.html" rel="noreferrer">Setting the User-Agent</a> from everyone's favorite <a href="http://diveintopython.net/" rel="noreferrer">Dive Into Python</a>.</p>\u000a\u000a<p>The short story: You can use <a href="http://docs.python.org/library/urllib2.html#urllib2.Request.add_header" rel="noreferrer">Request.add_header</a> to do this.</p>\u000a\u000a<p>You can also pass the headers as a dictionary when creating the Request itself, <a href="http://docs.python.org/library/urllib2.html#urllib2.Request" rel="noreferrer">as the docs note</a>:</p>\u000a\u000a<blockquote>\u000a  <p><em>headers</em> should be a dictionary, and will be treated as if <code>add_header()</code> was called with each key and value as arguments. This is often used to \u201cspoof\u201d the <code>User-Agent</code> header, which is used by a browser to identify itself \u2013 some HTTP servers only allow requests coming from common browsers as opposed to scripts. For example, Mozilla Firefox may identify itself as <code>"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11"</code>, while <code>urllib2</code>\u2018s default user agent string is <code>"Python-urllib/2.6"</code> (on Python 2.6).</p>\u000a</blockquote>\u000a
p776
sVquestion_id
p777
I802134
sVlast_activity_date
p778
I1403019798
sVcreation_date
p779
I1241008470
sVscore
p780
I54
sVowner
p781
(dp782
Vuser_id
p783
I16417
sVprofile_image
p784
Vhttps://www.gravatar.com/avatar/80ae8ec34e9e3e66c5be50733afaa44e?s=128&d=identicon&r=PG
p785
sVuser_type
p786
Vregistered
p787
sVreputation
p788
I313636
sVlink
p789
Vhttp://stackoverflow.com/users/16417/paolo-bergantino
p790
sVaccept_rate
p791
I93
sVdisplay_name
p792
VPaolo Bergantino
p793
ssVis_accepted
p794
I01
sVlast_edit_date
p795
I1403019798
sVanswer_id
p796
I802146
sa(dp797
Vbody
p798
V<p>I would just use numpy's <code>randn</code>:</p>\u000a\u000a<pre><code>In [11]: df = pd.DataFrame(np.random.randn(100, 2))\u000a\u000aIn [12]: msk = np.random.rand(len(df)) &lt; 0.8\u000a\u000aIn [13]: train = df[msk]\u000a\u000aIn [14]: test = df[~msk]\u000a</code></pre>\u000a\u000a<p>And just to see this has worked:</p>\u000a\u000a<pre><code>In [15]: len(test)\u000aOut[15]: 21\u000a\u000aIn [16]: len(train)\u000aOut[16]: 79\u000a</code></pre>\u000a
p799
sVquestion_id
p800
I24147278
sVlast_activity_date
p801
I1402446642
sVcreation_date
p802
I1402421365
sVscore
p803
I89
sVowner
p804
(dp805
Vuser_id
p806
I1240268
sVprofile_image
p807
Vhttps://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1
p808
sVuser_type
p809
Vregistered
p810
sVreputation
p811
I108899
sVlink
p812
Vhttp://stackoverflow.com/users/1240268/andy-hayden
p813
sVaccept_rate
p814
I90
sVdisplay_name
p815
VAndy Hayden
p816
ssVis_accepted
p817
I01
sVlast_edit_date
p818
I1402446642
sVanswer_id
p819
I24147363
sa(dp820
Vbody
p821
V<p>This is a Python bug.  When waiting for a condition in threading.Condition.wait(), KeyboardInterrupt is never sent.  Repro:</p>\u000a\u000a<pre><code>import threading\u000acond = threading.Condition(threading.Lock())\u000acond.acquire()\u000acond.wait(None)\u000aprint "done"\u000a</code></pre>\u000a\u000a<p>The KeyboardInterrupt exception won't be delivered until wait() returns, and it never returns, so the interrupt never happens.  KeyboardInterrupt should almost certainly interrupt a condition wait.</p>\u000a\u000a<p>Note that this doesn't happen if a timeout is specified; cond.wait(1) will receive the interrupt immediately.  So, a workaround is to specify a timeout.  To do that, replace</p>\u000a\u000a<pre><code>    results = pool.map(slowly_square, range(40))\u000a</code></pre>\u000a\u000a<p>with</p>\u000a\u000a<pre><code>    results = pool.map_async(slowly_square, range(40)).get(9999999)\u000a</code></pre>\u000a\u000a<p>or similar.</p>\u000a
p822
sVquestion_id
p823
I1408356
sVlast_activity_date
p824
I1402173937
sVcreation_date
p825
I1252629917
sVscore
p826
I97
sVowner
p827
(dp828
Vuser_id
p829
I136829
sVprofile_image
p830
Vhttps://www.gravatar.com/avatar/e92146e270ae11efac6405927b6439af?s=128&d=identicon&r=PG
p831
sVuser_type
p832
Vregistered
p833
sVreputation
p834
I35840
sVlink
p835
Vhttp://stackoverflow.com/users/136829/glenn-maynard
p836
sVdisplay_name
p837
VGlenn Maynard
p838
ssVis_accepted
p839
I01
sVlast_edit_date
p840
I1402173937
sVanswer_id
p841
I1408476
sa(dp842
Vbody
p843
V<p>Files inside the notebook dir are available under a "files/" url.  So if it's in the base path, it would be <code>&lt;img src="files/image.png"&gt;</code>, and subdirs etc. are also available: <code>&lt;img src="files/subdir/image.png"&gt;</code>, etc.</p>\u000a\u000a<p><em>Update</em>: starting with IPython 2.0, the <code>files/</code> prefix is no longer needed (cf. <a href="http://ipython.org/ipython-doc/2/whatsnew/version2.0.html#directory-navigation" rel="noreferrer">release notes</a>). So now the solution <code>&lt;img src="image.png"&gt;</code> simply works as expected.</p>\u000a
p844
sVquestion_id
p845
I10628262
sVlast_activity_date
p846
I1401277516
sVcreation_date
p847
I1337213304
sVscore
p848
I86
sVowner
p849
(dp850
Vuser_id
p851
I938949
sVprofile_image
p852
Vhttps://www.gravatar.com/avatar/d5b897c37001627c2e3ad3c1e8a7e6fb?s=128&d=identicon&r=PG
p853
sVuser_type
p854
Vregistered
p855
sVreputation
p856
I20107
sVlink
p857
Vhttp://stackoverflow.com/users/938949/minrk
p858
sVdisplay_name
p859
Vminrk
p860
ssVis_accepted
p861
I01
sVlast_edit_date
p862
I1401277516
sVanswer_id
p863
I10628360
sa(dp864
Vbody
p865
V<p>You can use <a href="http://matplotlib.org/users/gridspec.html"><code>gridspec</code></a> and <code>figure</code>:</p>\u000a\u000a<pre><code>import numpy as np\u000aimport matplotlib.pyplot as plt \u000afrom matplotlib import gridspec\u000a\u000a# generate some data\u000ax = np.arange(0, 10, 0.2)\u000ay = np.sin(x)\u000a\u000a# plot it\u000afig = plt.figure(figsize=(8, 6)) \u000ags = gridspec.GridSpec(1, 2, width_ratios=[3, 1]) \u000aax0 = plt.subplot(gs[0])\u000aax0.plot(x, y)\u000aax1 = plt.subplot(gs[1])\u000aax1.plot(y, x)\u000a\u000aplt.tight_layout()\u000aplt.savefig('grid_figure.pdf')\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/AAnMK.png" alt="resulting plot"></p>\u000a
p866
sVquestion_id
p867
I10388462
sVlast_activity_date
p868
I1397641749
sVcreation_date
p869
I1335952415
sVscore
p870
I123
sVowner
p871
(dp872
Vuser_id
p873
I1301710
sVprofile_image
p874
Vhttps://www.gravatar.com/avatar/c09e91f8758f4ea83dbaa5e199ebb71a?s=128&d=identicon&r=PG
p875
sVuser_type
p876
Vregistered
p877
sVreputation
p878
I14938
sVlink
p879
Vhttp://stackoverflow.com/users/1301710/bmu
p880
sVdisplay_name
p881
Vbmu
p882
ssVis_accepted
p883
I01
sVlast_edit_date
p884
I1397641749
sVanswer_id
p885
I10411424
sa(dp886
Vbody
p887
V<p>A one liner does exist:</p>\u000a\u000a<pre><code>In [27]: df=df.rename(columns = {'two':'new_name'})\u000a\u000aIn [28]: df\u000aOut[28]: \u000a  one three  new_name\u000a0    1     a         9\u000a1    2     b         8\u000a2    3     c         7\u000a3    4     d         6\u000a4    5     e         5\u000a</code></pre>\u000a\u000a<p>Following is the docstring for the <code>rename</code> method.</p>\u000a\u000a<pre>\u000aDefinition: df.rename(self, index=None, columns=None, copy=True, inplace=False)\u000aDocstring:\u000aAlter index and / or columns using input function or\u000afunctions. Function / dict values must be unique (1-to-1). Labels not\u000acontained in a dict / Series will be left as-is.\u000a\u000aParameters\u000a----------\u000aindex : dict-like or function, optional\u000a    Transformation to apply to index values\u000acolumns : dict-like or function, optional\u000a    Transformation to apply to column values\u000acopy : boolean, default True\u000a    Also copy underlying data\u000ainplace : boolean, default False\u000a    Whether to return a new DataFrame. If True then value of copy is\u000a    ignored.\u000a\u000aSee also\u000a--------\u000aSeries.rename\u000a\u000aReturns\u000a-------\u000arenamed : DataFrame (new object)\u000a</pre>\u000a
p888
sVquestion_id
p889
I20868394
sVlast_activity_date
p890
I1388578006
sVcreation_date
p891
I1388578006
sVscore
p892
I163
sVowner
p893
(dp894
Vuser_id
p895
I743775
sVprofile_image
p896
Vhttps://www.gravatar.com/avatar/d2f3703551edb49da47d9a3b637cf71f?s=128&d=identicon&r=PG
p897
sVuser_type
p898
Vregistered
p899
sVreputation
p900
I3209
sVlink
p901
Vhttp://stackoverflow.com/users/743775/nipun-batra
p902
sVaccept_rate
p903
I88
sVdisplay_name
p904
VNipun Batra
p905
ssVis_accepted
p906
I01
sVanswer_id
p907
I20868446
sa(dp908
Vbody
p909
V<p><code>reset_index()</code> is what you're looking for. if you don't want it saved as a column, then</p>\u000a\u000a<pre><code>df = df.reset_index(drop=True)\u000a</code></pre>\u000a
p910
sVquestion_id
p911
I20490274
sVlast_activity_date
p912
I1386670792
sVcreation_date
p913
I1386670792
sVscore
p914
I178
sVowner
p915
(dp916
Vuser_id
p917
I2775630
sVprofile_image
p918
Vhttps://i.stack.imgur.com/sViwd.jpg?s=128&g=1
p919
sVuser_type
p920
Vregistered
p921
sVreputation
p922
I2750
sVlink
p923
Vhttp://stackoverflow.com/users/2775630/mkln
p924
sVaccept_rate
p925
I100
sVdisplay_name
p926
Vmkln
p927
ssVis_accepted
p928
I01
sVanswer_id
p929
I20491748
sa(dp930
Vbody
p931
V<p>Looking at the <a href="http://hg.python.org/cpython/file/tip/Objects/dictobject.c">C source</a> for the Python <code>dict</code> operations, you can see that they do a pretty naive (but efficient) copy.  It essentially boils down to a call to <code>PyDict_Merge</code>:</p>\u000a\u000a<pre><code>PyDict_Merge(PyObject *a, PyObject *b, int override)\u000a</code></pre>\u000a\u000a<p>This does the quick checks for things like if they're the same object and if they've got objects in them.  After that it does a generous one-time resize/alloc to the target dict and then copies the elements one by one.  I don't see you getting much faster than the built-in <code>copy()</code>.</p>\u000a
p932
sVquestion_id
p933
I5861498
sVlast_activity_date
p934
I1375910353
sVcreation_date
p935
I1304365335
sVscore
p936
I62
sVowner
p937
(dp938
Vuser_id
p939
I9453
sVprofile_image
p940
Vhttps://www.gravatar.com/avatar/5548ce8747dd83e1ff1159dcf2d07ff0?s=128&d=identicon&r=PG
p941
sVuser_type
p942
Vregistered
p943
sVreputation
p944
I36195
sVlink
p945
Vhttp://stackoverflow.com/users/9453/daniel-dipaolo
p946
sVdisplay_name
p947
VDaniel DiPaolo
p948
ssVis_accepted
p949
I01
sVlast_edit_date
p950
I1375910353
sVanswer_id
p951
I5861694
sa(dp952
Vbody
p953
V<p>In Django <strong>1.6</strong> you can use the <code>first()</code> Queryset method. It returns the first object matched by the queryset, or None if there is no matching object.</p>\u000a\u000a<p>Usage:</p>\u000a\u000a<pre><code>p = Article.objects.order_by('title', 'pub_date').first()\u000a</code></pre>\u000a
p954
sVquestion_id
p955
I1512059
sVlast_activity_date
p956
I1375159022
sVcreation_date
p957
I1375159022
sVscore
p958
I65
sVowner
p959
(dp960
Vuser_id
p961
I360829
sVprofile_image
p962
Vhttps://www.gravatar.com/avatar/ee15e6830c1ecfb4b0970e1c9966b1bc?s=128&d=identicon&r=PG
p963
sVuser_type
p964
Vregistered
p965
sVreputation
p966
I6108
sVlink
p967
Vhttp://stackoverflow.com/users/360829/cesar-canassa
p968
sVaccept_rate
p969
I100
sVdisplay_name
p970
VCesar Canassa
p971
ssVis_accepted
p972
I01
sVanswer_id
p973
I17938407
sa(dp974
Vbody
p975
V<p>A simple recursive function can be used to convert an entity (and any referents) to a nested dictionary that can be passed to <code>simplejson</code>:</p>\u000a\u000a<pre><code>import datetime\u000aimport time\u000a\u000aSIMPLE_TYPES = (int, long, float, bool, dict, basestring, list)\u000a\u000adef to_dict(model):\u000a    output = {}\u000a\u000a    for key, prop in model.properties().iteritems():\u000a        value = getattr(model, key)\u000a\u000a        if value is None or isinstance(value, SIMPLE_TYPES):\u000a            output[key] = value\u000a        elif isinstance(value, datetime.date):\u000a            # Convert date/datetime to MILLISECONDS-since-epoch (JS "new Date()").\u000a            ms = time.mktime(value.utctimetuple()) * 1000\u000a            ms += getattr(value, 'microseconds', 0) / 1000\u000a            output[key] = int(ms)\u000a        elif isinstance(value, db.GeoPt):\u000a            output[key] = {'lat': value.lat, 'lon': value.lon}\u000a        elif isinstance(value, db.Model):\u000a            output[key] = to_dict(value)\u000a        else:\u000a            raise ValueError('cannot encode ' + repr(prop))\u000a\u000a    return output\u000a</code></pre>\u000a
p976
sVquestion_id
p977
I1531501
sVlast_activity_date
p978
I1373301452
sVcreation_date
p979
I1254926212
sVscore
p980
I61
sVowner
p981
(dp982
Vuser_id
p983
I53846
sVprofile_image
p984
Vhttps://www.gravatar.com/avatar/e66985e4490f78a3b3a4bea842f2ee02?s=128&d=identicon&r=PG
p985
sVuser_type
p986
Vregistered
p987
sVreputation
p988
I1189
sVlink
p989
Vhttp://stackoverflow.com/users/53846/dmw
p990
sVaccept_rate
p991
I100
sVdisplay_name
p992
Vdmw
p993
ssVis_accepted
p994
I01
sVlast_edit_date
p995
I1373301452
sVanswer_id
p996
I1532035
sa(dp997
Vbody
p998
V<p>If you want to know how many values match in both the dictionaries, you should have said that :) </p>\u000a\u000a<p>Maybe something like this:</p>\u000a\u000a<pre><code>shared_items = set(x.items()) &amp; set(y.items())\u000aprint len(shared_items)\u000a</code></pre>\u000a
p999
sVquestion_id
p1000
I4527942
sVlast_activity_date
p1001
I1372877169
sVcreation_date
p1002
I1293218246
sVscore
p1003
I78
sVowner
p1004
(dp1005
Vuser_id
p1006
I479633
sVprofile_image
p1007
Vhttps://www.gravatar.com/avatar/b20ea946315fbe062c0221c8136c8c9b?s=128&d=identicon&r=PG
p1008
sVuser_type
p1009
Vregistered
p1010
sVreputation
p1011
I36091
sVlink
p1012
Vhttp://stackoverflow.com/users/479633/mouad
p1013
sVdisplay_name
p1014
Vmouad
p1015
ssVis_accepted
p1016
I01
sVlast_edit_date
p1017
I1372877169
sVanswer_id
p1018
I4527978
sa(dp1019
Vbody
p1020
V<p>There is a built in.</p>\u000a\u000a<pre><code>from difflib import SequenceMatcher\u000a\u000adef similar(a, b):\u000a    return SequenceMatcher(None, a, b).ratio()\u000a</code></pre>\u000a\u000a<p>Using it:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; similar("Apple","Appel")\u000a0.8\u000a&gt;&gt;&gt; similar("Apple","Mango")\u000a0.0\u000a</code></pre>\u000a
p1021
sVquestion_id
p1022
I17388213
sVlast_activity_date
p1023
I1372580332
sVcreation_date
p1024
I1372580332
sVscore
p1025
I216
sVowner
p1026
(dp1027
Vuser_id
p1028
I1561176
sVprofile_image
p1029
Vhttps://www.gravatar.com/avatar/022b5d51f385a2b717c90e8cd371f2fe?s=128&d=identicon&r=PG
p1030
sVuser_type
p1031
Vregistered
p1032
sVreputation
p1033
I19731
sVlink
p1034
Vhttp://stackoverflow.com/users/1561176/inbar-rose
p1035
sVaccept_rate
p1036
I90
sVdisplay_name
p1037
VInbar Rose
p1038
ssVis_accepted
p1039
I01
sVanswer_id
p1040
I17388505
sa(dp1041
Vbody
p1042
V<p>It'll be good to see the csv file itself, but this might work for you, give it a try, replace:</p>\u000a\u000a<pre><code>file_read = csv.reader(self.file)\u000a</code></pre>\u000a\u000a<p>with:</p>\u000a\u000a<pre><code>file_read = csv.reader(self.file, dialect=csv.excel_tab)\u000a</code></pre>\u000a\u000a<p>Or, open a file with <code>universal newline mode</code> and pass it to <code>csv.reader</code>, like:</p>\u000a\u000a<pre><code>reader = csv.reader(open(self.file, 'rU'), dialect=csv.excel_tab)\u000a</code></pre>\u000a\u000a<p>Or, use <code>splitlines()</code>, like this:</p>\u000a\u000a<pre><code>def read_file(self):\u000a    with open(self.file, 'r') as f:\u000a        data = [row for row in csv.reader(f.read().splitlines())]\u000a    return data\u000a</code></pre>\u000a
p1043
sVquestion_id
p1044
I17315635
sVlast_activity_date
p1045
I1372238088
sVcreation_date
p1046
I1372237781
sVscore
p1047
I138
sVowner
p1048
(dp1049
Vuser_id
p1050
I771848
sVprofile_image
p1051
Vhttps://i.stack.imgur.com/2DTBv.jpg?s=128&g=1
p1052
sVuser_type
p1053
Vregistered
p1054
sVreputation
p1055
I251749
sVlink
p1056
Vhttp://stackoverflow.com/users/771848/alecxe
p1057
sVaccept_rate
p1058
I99
sVdisplay_name
p1059
Valecxe
p1060
ssVis_accepted
p1061
I01
sVlast_edit_date
p1062
I1372238088
sVanswer_id
p1063
I17315921
sa(dp1064
Vbody
p1065
V<p>Your first example is perfectly fine. Even the official Python docs recommend this style known as <a href="http://docs.python.org/3/glossary.html#term-eafp" rel="noreferrer">EAFP</a>.</p>\u000a\u000a<p>Personally, I prefer to avoid nesting when it's not necessary:</p>\u000a\u000a<pre><code>def __getattribute__(self, item):\u000a    try:\u000a        return object.__getattribute__(item)\u000a    except AttributeError:\u000a        pass  # fallback to dict\u000a    try:\u000a        return self.dict[item]\u000a    except KeyError:\u000a        raise AttributeError("The object doesn't have such attribute") from None\u000a</code></pre>\u000a\u000a<p>PS. <code>has_key()</code> has been deprecated for a long time in Python 2. Use <code>item in self.dict</code> instead.</p>\u000a
p1066
sVquestion_id
p1067
I17015230
sVlast_activity_date
p1068
I1370821973
sVcreation_date
p1069
I1370821605
sVscore
p1070
I79
sVowner
p1071
(dp1072
Vuser_id
p1073
I324389
sVprofile_image
p1074
Vhttps://www.gravatar.com/avatar/82ad175014437c2616703f5804a80f8b?s=128&d=identicon&r=PG
p1075
sVuser_type
p1076
Vregistered
p1077
sVreputation
p1078
I4299
sVlink
p1079
Vhttp://stackoverflow.com/users/324389/lqc
p1080
sVdisplay_name
p1081
Vlqc
p1082
ssVis_accepted
p1083
I01
sVlast_edit_date
p1084
I1370821973
sVanswer_id
p1085
I17015303
sa(dp1086
Vbody
p1087
V<p>The only way you would be getting the last column from this code is if you don't include your print statement <strong>in</strong> your <code>for</code> loop. </p>\u000a\u000a<p>This is most likely the end of your code:</p>\u000a\u000a<pre><code>for row in reader:\u000a    content = list(row[i] for i in included_cols)\u000aprint content\u000a</code></pre>\u000a\u000a<p>You want it to be this:</p>\u000a\u000a<pre><code>for row in reader:\u000a        content = list(row[i] for i in included_cols)\u000a        print content\u000a</code></pre>\u000a\u000a<p>Now that we have covered your mistake, I would like to take this time to introduce you to the <a href="http://pandas.pydata.org/" rel="noreferrer">pandas</a> module.</p>\u000a\u000a<p>Pandas is spectacular for dealing with csv files, and the following code would be all you need to read a csv and save an entire column into a variable:</p>\u000a\u000a<pre><code>import pandas as pd\u000adf = pd.read_csv(csv_file)\u000asaved_column = df.column_name #you can also use df['column_name']\u000a</code></pre>\u000a\u000a<p>so if you wanted to save all of the info in your column <code>Names</code> into a variable, this is all you need to do:</p>\u000a\u000a<pre><code>names = df.Names\u000a</code></pre>\u000a\u000a<p>It's a great module and I suggest you look into it. If for some reason your print statement was in <code>for</code> loop and it was still only printing out the last column, which shouldn't happen, but let me know if my assumption was wrong. Your posted code has a lot of indentation errors so it was hard to know what was supposed to be where. Hope this was helpful!</p>\u000a
p1088
sVquestion_id
p1089
I16503560
sVlast_activity_date
p1090
I1368327990
sVcreation_date
p1091
I1368327990
sVscore
p1092
I87
sVowner
p1093
(dp1094
Vuser_id
p1095
I2127988
sVprofile_image
p1096
Vhttps://www.gravatar.com/avatar/93666d9da1b7759ea360d30048332f15?s=128&d=identicon&r=PG
p1097
sVuser_type
p1098
Vregistered
p1099
sVreputation
p1100
I5673
sVlink
p1101
Vhttp://stackoverflow.com/users/2127988/ryan-saxe
p1102
sVaccept_rate
p1103
I69
sVdisplay_name
p1104
VRyan Saxe
p1105
ssVis_accepted
p1106
I01
sVanswer_id
p1107
I16503807
sa(dp1108
Vbody
p1109
V<p>There's one in an old version of the Python docs with <a href="http://docs.python.org/release/2.3.5/lib/itertools-example.html"><code>itertools</code> examples</a>:</p>\u000a\u000a<pre><code>from itertools import islice\u000a\u000adef window(seq, n=2):\u000a    "Returns a sliding window (of width n) over data from the iterable"\u000a    "   s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "\u000a    it = iter(seq)\u000a    result = tuple(islice(it, n))\u000a    if len(result) == n:\u000a        yield result    \u000a    for elem in it:\u000a        result = result[1:] + (elem,)\u000a        yield result\u000a</code></pre>\u000a\u000a<p>The one from the docs is a little more succinct and uses <code>itertools</code> to greater effect I imagine.</p>\u000a
p1110
sVquestion_id
p1111
I6822725
sVlast_activity_date
p1112
I1366628901
sVcreation_date
p1113
I1311630430
sVscore
p1114
I72
sVowner
p1115
(dp1116
Vuser_id
p1117
I9453
sVprofile_image
p1118
Vhttps://www.gravatar.com/avatar/5548ce8747dd83e1ff1159dcf2d07ff0?s=128&d=identicon&r=PG
p1119
sVuser_type
p1120
Vregistered
p1121
sVreputation
p1122
I36195
sVlink
p1123
Vhttp://stackoverflow.com/users/9453/daniel-dipaolo
p1124
sVdisplay_name
p1125
VDaniel DiPaolo
p1126
ssVis_accepted
p1127
I01
sVlast_edit_date
p1128
I1366628901
sVanswer_id
p1129
I6822773
sa(dp1130
Vbody
p1131
V<p>Well, <code>np.array</code> is just a convenience function to create an <code>ndarray</code>, it is not a class itself.  </p>\u000a\u000a<p>You can also create an array using <code>np.ndarray</code>, but it is not the recommended way.  From the docstring of <code>np.ndarray</code>:  </p>\u000a\u000a<blockquote>\u000a  <p>Arrays should be constructed using <code>array</code>, <code>zeros</code> or <code>empty</code> ...  The parameters given here refer to a\u000a  low-level method (<code>ndarray(...)</code>) for instantiating an array.</p>\u000a</blockquote>\u000a\u000a<p>Most of the meat of the implementation is in C code, <a href="https://github.com/numpy/numpy/tree/master/numpy/core/src/multiarray">here in multiarray</a>, but you can start looking at the ndarray interfaces here:</p>\u000a\u000a<p><a href="https://github.com/numpy/numpy/blob/master/numpy/core/numeric.py">https://github.com/numpy/numpy/blob/master/numpy/core/numeric.py</a></p>\u000a
p1132
sVquestion_id
p1133
I15879315
sVlast_activity_date
p1134
I1365425779
sVcreation_date
p1135
I1365425461
sVscore
p1136
I59
sVowner
p1137
(dp1138
Vuser_id
p1139
I674039
sVprofile_image
p1140
Vhttps://i.stack.imgur.com/leoFi.gif?s=128&g=1
p1141
sVuser_type
p1142
Vregistered
p1143
sVreputation
p1144
I97604
sVlink
p1145
Vhttp://stackoverflow.com/users/674039/wim
p1146
sVaccept_rate
p1147
I95
sVdisplay_name
p1148
Vwim
p1149
ssVis_accepted
p1150
I01
sVlast_edit_date
p1151
I1365425779
sVanswer_id
p1152
I15879527
sa(dp1153
Vbody
p1154
V<p><a href="https://speakerdeck.com/mitsuhiko/advanced-flask-patterns-1" rel="noreferrer">Advanced Flask Patterns</a>, as linked by Markus, explains some of the changes to <code>g</code> in 0.10:</p>\u000a\u000a<ul>\u000a<li><code>g</code> now lives in the application context.</li>\u000a<li><a href="https://github.com/mitsuhiko/flask/blob/1949c4a9abc174bf29620f6dd8ceab9ed3ace2eb/flask/ctx.py#L230" rel="noreferrer">Every request pushes a new application context</a>, wiping the old one, so <code>g</code> can still be used to set flags per-request without change to code.</li>\u000a<li>The application context is popped <em>after</em> <code>teardown_request</code> is called. (Armin's presentation explains this is because things like creating DB connections are tasks which <em>setup</em> the environment for the request, and should not be handled inside <code>before_request</code> and <code>after_request</code>)</li>\u000a</ul>\u000a
p1155
sVquestion_id
p1156
I15083967
sVlast_activity_date
p1157
I1362061869
sVcreation_date
p1158
I1361920006
sVscore
p1159
I61
sVowner
p1160
(dp1161
Vuser_id
p1162
I148585
sVprofile_image
p1163
Vhttps://i.stack.imgur.com/tT28k.jpg?s=128&g=1
p1164
sVuser_type
p1165
Vregistered
p1166
sVreputation
p1167
I890
sVlink
p1168
Vhttp://stackoverflow.com/users/148585/they4kman
p1169
sVdisplay_name
p1170
VtheY4Kman
p1171
ssVis_accepted
p1172
I01
sVlast_edit_date
p1173
I1362061869
sVanswer_id
p1174
I15101229
sa(dp1175
Vbody
p1176
V<p>The difference mainly arises with mutable vs immutable types.</p>\u000a\u000a<p><code>__new__</code> accepts a <em>type</em> as the first argument, and (usually) returns a new instance of that type. Thus it is suitable for use with both mutable and immutable types.</p>\u000a\u000a<p><code>__init__</code> accepts an <em>instance</em> as the first argument and modifies the attributes of that instance. This is inappropriate for an immutable type, as it would allow them to be modified after creation by calling <code>obj.__init__(*args)</code>.</p>\u000a\u000a<p>Compare the behaviour of <code>tuple</code> and <code>list</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = (1, 2)\u000a&gt;&gt;&gt; x\u000a(1, 2)\u000a&gt;&gt;&gt; x.__init__([3, 4])\u000a&gt;&gt;&gt; x # tuple.__init__ does nothing\u000a(1, 2)\u000a&gt;&gt;&gt; y = [1, 2]\u000a&gt;&gt;&gt; y\u000a[1, 2]\u000a&gt;&gt;&gt; y.__init__([3, 4])\u000a&gt;&gt;&gt; y # list.__init__ reinitialises the object\u000a[3, 4]\u000a</code></pre>\u000a\u000a<p>As to why they're separate (aside from simple historical reasons): <code>__new__</code> methods require a bunch of boilerplate to get right (the initial object creation, and then remembering to return the object at the end). <code>__init__</code> methods, by contrast, are dead simple, since you just set whatever attributes you need to set.</p>\u000a\u000a<p>Aside from <code>__init__</code> methods being easier to write, and the mutable vs immutable distinction noted above, the separation can also be exploited to make calling the parent class <code>__init__</code> in subclasses optional by setting up any absolutely required instance invariants in <code>__new__</code>. This is generally a dubious practice though - it's usually clearer to just call the parent class <code>__init__</code> methods as necessary.</p>\u000a
p1177
sVquestion_id
p1178
I4859129
sVlast_activity_date
p1179
I1359022359
sVcreation_date
p1180
I1296537387
sVscore
p1181
I96
sVowner
p1182
(dp1183
Vuser_id
p1184
I597742
sVprofile_image
p1185
Vhttps://www.gravatar.com/avatar/f3ba3ecffd20251d73749afbfa636786?s=128&d=identicon&r=PG
p1186
sVuser_type
p1187
Vregistered
p1188
sVreputation
p1189
I20632
sVlink
p1190
Vhttp://stackoverflow.com/users/597742/ncoghlan
p1191
sVaccept_rate
p1192
I100
sVdisplay_name
p1193
Vncoghlan
p1194
ssVis_accepted
p1195
I01
sVlast_edit_date
p1196
I1359022359
sVanswer_id
p1197
I4859181
sa(dp1198
Vbody
p1199
V<p>The <a href="http://pytest.org/latest/capture.html" rel="noreferrer"><code>-s</code> switch</a> disables per-test capturing.</p>\u000a
p1200
sVquestion_id
p1201
I14405063
sVlast_activity_date
p1202
I1358910787
sVcreation_date
p1203
I1358598177
sVscore
p1204
I111
sVowner
p1205
(dp1206
Vuser_id
p1207
I137901
sVprofile_image
p1208
Vhttps://www.gravatar.com/avatar/1d40af73bd088f5f7b487b42b799881d?s=128&d=identicon&r=PG
p1209
sVuser_type
p1210
Vregistered
p1211
sVreputation
p1212
I6999
sVlink
p1213
Vhttp://stackoverflow.com/users/137901/hpk42
p1214
sVaccept_rate
p1215
I100
sVdisplay_name
p1216
Vhpk42
p1217
ssVis_accepted
p1218
I01
sVlast_edit_date
p1219
I1358910787
sVanswer_id
p1220
I14414325
sa(dp1221
Vbody
p1222
V<p><strong>Update:</strong></p>\u000a\u000a<p>Selenium team fixed in latest version. For almost all environments the fix is: </p>\u000a\u000a<blockquote>\u000a  <p>pip install -U selenium</p>\u000a</blockquote>\u000a\u000a<p>Unclear at which version it was fixed (apparently <a href="https://code.google.com/p/selenium/source/detail?r=13122">r13122</a>), but certainly by 2.26.0 (current at time of update) it is fixed.</p>\u000a\u000a<hr>\u000a\u000a<p>This error means that _wait_until_connectable is timing out, because for some reason, the code cannot connect to the webdriver extension that has been loaded into the firefox.</p>\u000a\u000a<p>I have just reported an error to selenium where I am getting this error because I'm trying to use a proxy and only 2 of the 4 configured changes in the profile have been accepted by firefox, so the proxy isn't configured to talk to the extension. Not sure why this is happening...</p>\u000a\u000a<p><a href="http://code.google.com/p/selenium/issues/detail?id=2061">http://code.google.com/p/selenium/issues/detail?id=2061</a></p>\u000a
p1223
sVquestion_id
p1224
I6682009
sVlast_activity_date
p1225
I1352765714
sVcreation_date
p1226
I1310747618
sVscore
p1227
I123
sVowner
p1228
(dp1229
Vuser_id
p1230
I224077
sVprofile_image
p1231
Vhttps://www.gravatar.com/avatar/d51d35977ddf23ee9f19e249d986366d?s=128&d=identicon&r=PG
p1232
sVuser_type
p1233
Vregistered
p1234
sVreputation
p1235
I1918
sVlink
p1236
Vhttp://stackoverflow.com/users/224077/rachel
p1237
sVaccept_rate
p1238
I20
sVdisplay_name
p1239
VRachel
p1240
ssVis_accepted
p1241
I01
sVlast_edit_date
p1242
I1352765714
sVanswer_id
p1243
I6710264
sa(dp1244
Vbody
p1245
V<p>Replace</p>\u000a\u000a<pre><code>args = parser.parse_args()\u000a</code></pre>\u000a\u000a<p>with </p>\u000a\u000a<pre><code>args, unknown = parser.parse_known_args()\u000a</code></pre>\u000a\u000a<p>For example,</p>\u000a\u000a<pre><code>import argparse\u000aparser = argparse.ArgumentParser()\u000aparser.add_argument('--foo')\u000aargs, unknown = parser.parse_known_args(['--foo', 'BAR', 'spam'])\u000aprint(args)\u000a# Namespace(foo='BAR')\u000aprint(unknown)\u000a# ['spam']\u000a</code></pre>\u000a
p1246
sVquestion_id
p1247
I12818146
sVlast_activity_date
p1248
I1349868489
sVcreation_date
p1249
I1349868489
sVscore
p1250
I152
sVowner
p1251
(dp1252
Vuser_id
p1253
I190597
sVprofile_image
p1254
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p1255
sVuser_type
p1256
Vregistered
p1257
sVreputation
p1258
I425294
sVlink
p1259
Vhttp://stackoverflow.com/users/190597/unutbu
p1260
sVaccept_rate
p1261
I88
sVdisplay_name
p1262
Vunutbu
p1263
ssVis_accepted
p1264
I01
sVanswer_id
p1265
I12818237
sa(dp1266
Vbody
p1267
V<p>You cannot create m2m relations from unsaved objects. If you have the pks, try this:</p>\u000a\u000a<pre><code>sample_object = Sample()\u000asample_object.save()\u000asample_object.users.add(1,2)\u000a</code></pre>\u000a\u000a<p><strong>Update:</strong> After reading the <a href="http://stackoverflow.com/questions/6996176/how-to-create-an-object-for-a-django-model-with-a-many-to-many-field/6999006#6999006">saverio's answer</a>, I decided to investigate the issue a bit more in depth. Here are my findings.</p>\u000a\u000a<p>This was my original suggestion. It works, but isn't optimal. (Note: I'm using <code>Bar</code>s and a <code>Foo</code> instead of <code>User</code>s and a <code>Sample</code>, but you get the idea).</p>\u000a\u000a<pre><code>bar1 = Bar.objects.get(pk=1)\u000abar2 = Bar.objects.get(pk=2)\u000afoo = Foo()\u000afoo.save()\u000afoo.bars.add(bar1)\u000afoo.bars.add(bar2)\u000a</code></pre>\u000a\u000a<p>It generates a whopping total of 7 queries:</p>\u000a\u000a<pre><code>SELECT "app_bar"."id", "app_bar"."name" FROM "app_bar" WHERE "app_bar"."id" = 1\u000aSELECT "app_bar"."id", "app_bar"."name" FROM "app_bar" WHERE "app_bar"."id" = 2\u000aINSERT INTO "app_foo" ("name") VALUES ()\u000aSELECT "app_foo_bars"."bar_id" FROM "app_foo_bars" WHERE ("app_foo_bars"."foo_id" = 1  AND "app_foo_bars"."bar_id" IN (1))\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 1)\u000aSELECT "app_foo_bars"."bar_id" FROM "app_foo_bars" WHERE ("app_foo_bars"."foo_id" = 1  AND "app_foo_bars"."bar_id" IN (2))\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 2)\u000a</code></pre>\u000a\u000a<p>I'm sure we can do better. You can pass multiple objects to the <code>add()</code> method:</p>\u000a\u000a<pre><code>bar1 = Bar.objects.get(pk=1)\u000abar2 = Bar.objects.get(pk=2)\u000afoo = Foo()\u000afoo.save()\u000afoo.bars.add(bar1, bar2)\u000a</code></pre>\u000a\u000a<p>As we can see, passing multiple objects saves one <code>SELECT</code>:</p>\u000a\u000a<pre><code>SELECT "app_bar"."id", "app_bar"."name" FROM "app_bar" WHERE "app_bar"."id" = 1\u000aSELECT "app_bar"."id", "app_bar"."name" FROM "app_bar" WHERE "app_bar"."id" = 2\u000aINSERT INTO "app_foo" ("name") VALUES ()\u000aSELECT "app_foo_bars"."bar_id" FROM "app_foo_bars" WHERE ("app_foo_bars"."foo_id" = 1  AND "app_foo_bars"."bar_id" IN (1, 2))\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 1)\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 2)\u000a</code></pre>\u000a\u000a<p>I wasn't aware that you can also assign a list of objects:</p>\u000a\u000a<pre><code>bar1 = Bar.objects.get(pk=1)\u000abar2 = Bar.objects.get(pk=2)\u000afoo = Foo()\u000afoo.save()\u000afoo.bars = [bar1, bar2]\u000a</code></pre>\u000a\u000a<p>Unfortunately, that creates one additional <code>SELECT</code>:</p>\u000a\u000a<pre><code>SELECT "app_bar"."id", "app_bar"."name" FROM "app_bar" WHERE "app_bar"."id" = 1\u000aSELECT "app_bar"."id", "app_bar"."name" FROM "app_bar" WHERE "app_bar"."id" = 2\u000aINSERT INTO "app_foo" ("name") VALUES ()\u000aSELECT "app_foo_bars"."id", "app_foo_bars"."foo_id", "app_foo_bars"."bar_id" FROM "app_foo_bars" WHERE "app_foo_bars"."foo_id" = 1\u000aSELECT "app_foo_bars"."bar_id" FROM "app_foo_bars" WHERE ("app_foo_bars"."foo_id" = 1  AND "app_foo_bars"."bar_id" IN (1, 2))\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 1)\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 2)\u000a</code></pre>\u000a\u000a<p>Let's try to assign a list of `pk's, as saverio suggested:</p>\u000a\u000a<pre><code>foo = Foo()\u000afoo.save()\u000afoo.bars = [1,2]\u000a</code></pre>\u000a\u000a<p>As we don't fetch the two <code>Bar</code>s, we save two <code>SELECT</code> statements, resulting in a total of 5:</p>\u000a\u000a<pre><code>INSERT INTO "app_foo" ("name") VALUES ()\u000aSELECT "app_foo_bars"."id", "app_foo_bars"."foo_id", "app_foo_bars"."bar_id" FROM "app_foo_bars" WHERE "app_foo_bars"."foo_id" = 1\u000aSELECT "app_foo_bars"."bar_id" FROM "app_foo_bars" WHERE ("app_foo_bars"."foo_id" = 1  AND "app_foo_bars"."bar_id" IN (1, 2))\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 1)\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 2)\u000a</code></pre>\u000a\u000a<p>And the winner is:</p>\u000a\u000a<pre><code>foo = Foo()\u000afoo.save()\u000afoo.bars.add(1,2)\u000a</code></pre>\u000a\u000a<p>Passing <code>pk</code>s to add() gives us a total of 4 queries:</p>\u000a\u000a<pre><code>INSERT INTO "app_foo" ("name") VALUES ()\u000aSELECT "app_foo_bars"."bar_id" FROM "app_foo_bars" WHERE ("app_foo_bars"."foo_id" = 1  AND "app_foo_bars"."bar_id" IN (1, 2))\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 1)\u000aINSERT INTO "app_foo_bars" ("foo_id", "bar_id") VALUES (1, 2)\u000a</code></pre>\u000a
p1268
sVquestion_id
p1269
I6996176
sVlast_activity_date
p1270
I1348577338
sVcreation_date
p1271
I1312893822
sVscore
p1272
I163
sVowner
p1273
(dp1274
Vuser_id
p1275
I211960
sVprofile_image
p1276
Vhttps://www.gravatar.com/avatar/2826aed4813bf3e2b3eff1eb075d387a?s=128&d=identicon&r=PG
p1277
sVuser_type
p1278
Vregistered
p1279
sVreputation
p1280
I11443
sVlink
p1281
Vhttp://stackoverflow.com/users/211960/daniel-hepper
p1282
sVaccept_rate
p1283
I92
sVdisplay_name
p1284
VDaniel Hepper
p1285
ssVis_accepted
p1286
I01
sVlast_edit_date
p1287
I1348577338
sVanswer_id
p1288
I6996358
sa(dp1289
Vbody
p1290
V<p>Take a look at <code>np.bincount</code>:</p>\u000a\u000a<p><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html" rel="noreferrer">http://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html</a></p>\u000a\u000a<pre><code>import numpy as np\u000ax = np.array([1,1,1,2,2,2,5,25,1,1])\u000ay = np.bincount(x)\u000aii = np.nonzero(y)[0]\u000a</code></pre>\u000a\u000a<p>And then:</p>\u000a\u000a<pre><code>zip(ii,y[ii]) \u000a# [(1, 5), (2, 3), (5, 1), (25, 1)]\u000a</code></pre>\u000a\u000a<p>or:</p>\u000a\u000a<pre><code>np.vstack((ii,y[ii])).T\u000a# array([[ 1,  5],\u000a         [ 2,  3],\u000a         [ 5,  1],\u000a         [25,  1]])\u000a</code></pre>\u000a\u000a<p>or however you want to combine the counts and the unique values.</p>\u000a
p1291
sVquestion_id
p1292
I10741346
sVlast_activity_date
p1293
I1337878385
sVcreation_date
p1294
I1337877346
sVscore
p1295
I68
sVowner
p1296
(dp1297
Vuser_id
p1298
I392949
sVprofile_image
p1299
Vhttps://www.gravatar.com/avatar/ef7a66dcbb260f54c3d06b0490b844bf?s=128&d=identicon&r=PG
p1300
sVuser_type
p1301
Vregistered
p1302
sVreputation
p1303
I28899
sVlink
p1304
Vhttp://stackoverflow.com/users/392949/joshadel
p1305
sVaccept_rate
p1306
I70
sVdisplay_name
p1307
VJoshAdel
p1308
ssVis_accepted
p1309
I01
sVlast_edit_date
p1310
I1337878385
sVanswer_id
p1311
I10741692
sa(dp1312
Vbody
p1313
V<p><code>'%s' % 100000</code> is evaluated by the compiler and is equivalent to a constant at run-time.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import dis\u000a&gt;&gt;&gt; dis.dis(lambda: str(100000))\u000a  8           0 LOAD_GLOBAL              0 (str)\u000a              3 LOAD_CONST               1 (100000)\u000a              6 CALL_FUNCTION            1\u000a              9 RETURN_VALUE        \u000a&gt;&gt;&gt; dis.dis(lambda: '%s' % 100000)\u000a  9           0 LOAD_CONST               3 ('100000')\u000a              3 RETURN_VALUE        \u000a</code></pre>\u000a\u000a<p><code>%</code> with a run-time expression is not (significantly) faster than <code>str</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; Timer('str(x)', 'x=100').timeit()\u000a0.25641703605651855\u000a&gt;&gt;&gt; Timer('"%s" % x', 'x=100').timeit()\u000a0.2169809341430664\u000a</code></pre>\u000a\u000a<p>Do note that <code>str</code> is still slightly slower, as @DietrichEpp said, this is because <code>str</code> involves lookup and function call operations, while <code>%</code> compiles to a single immediate bytecode:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; dis.dis(lambda x: str(x))\u000a  9           0 LOAD_GLOBAL              0 (str)\u000a              3 LOAD_FAST                0 (x)\u000a              6 CALL_FUNCTION            1\u000a              9 RETURN_VALUE        \u000a&gt;&gt;&gt; dis.dis(lambda x: '%s' % x)\u000a 10           0 LOAD_CONST               1 ('%s')\u000a              3 LOAD_FAST                0 (x)\u000a              6 BINARY_MODULO       \u000a              7 RETURN_VALUE        \u000a</code></pre>\u000a\u000a<p>Of course the above is true for the system I tested on (CPython 2.7); other implementations may differ.</p>\u000a
p1314
sVquestion_id
p1315
I10530315
sVlast_activity_date
p1316
I1336640358
sVcreation_date
p1317
I1336639408
sVscore
p1318
I104
sVowner
p1319
(dp1320
Vuser_id
p1321
I989121
sVprofile_image
p1322
Vhttps://i.stack.imgur.com/1Cvf7.png?s=128&g=1
p1323
sVuser_type
p1324
Vregistered
p1325
sVreputation
p1326
I107734
sVlink
p1327
Vhttp://stackoverflow.com/users/989121/georg
p1328
sVaccept_rate
p1329
I93
sVdisplay_name
p1330
Vgeorg
p1331
ssVis_accepted
p1332
I01
sVlast_edit_date
p1333
I1336640358
sVanswer_id
p1334
I10530415
sa(dp1335
Vbody
p1336
V<p>First Option - Online Installation (i.e. remaining connected to the Internet during the entire installation process):</p>\u000a\u000a<ol>\u000a<li>Download <a href="http://pypi.python.org/pypi/setuptools#files" rel="noreferrer">setuptools-0.6c9.tar.gz</a></li>\u000a<li>Use <a href="http://www.7-zip.org/" rel="noreferrer">7-zip</a> to extract it to a folder(directory) outside your Windows Python installation folder</li>\u000a<li>Go the folder (refer step 2) and run ez_setup.py from the corresponding dos (command) prompt</li>\u000a<li>Ensure that your PATH includes the appropriate C:\u005cPython2X\u005cScripts directory</li>\u000a</ol>\u000a\u000a<p>Second Option:</p>\u000a\u000a<ol>\u000a<li>Download <a href="http://pypi.python.org/pypi/setuptools#files" rel="noreferrer">setuptools-0.6c9.tar.gz</a></li>\u000a<li>Download <a href="http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c9-py2.6.egg#md5=ca37b1ff16fa2ede6e19383e7b59245a" rel="noreferrer">setuptools-0.6c9-py2.6.egg</a> to a folder(directory) outside your Windows Python installation folder</li>\u000a<li>Use <a href="http://www.7-zip.org/" rel="noreferrer">7-zip</a> to extract ez_setup.py in the same folder as <a href="http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c9-py2.6.egg#md5=ca37b1ff16fa2ede6e19383e7b59245a" rel="noreferrer">setuptools-0.6c9-py2.6.egg</a></li>\u000a<li>Go to the corresponding dos prompt and run python ez_setup.py setuptools-0.6c9-py2.6.egg from the command prompt</li>\u000a<li>Ensure that your PATH includes the appropriate C:\u005cPython2X\u005cScripts directory</li>\u000a</ol>\u000a\u000a<p>Third Option (assuming that you have Visual Studio 2005 or MinGW on your machine)</p>\u000a\u000a<ol>\u000a<li>Download <a href="http://pypi.python.org/pypi/setuptools#files" rel="noreferrer">setuptools-0.6c9.tar.gz</a></li>\u000a<li>Use <a href="http://www.7-zip.org/" rel="noreferrer">7-zip</a> to extract it to a folder(directory) outside your Windows Python installation folder</li>\u000a<li>Go the folder (refer step 2) and run python setup.py install from the corresponding dos (command) prompt</li>\u000a</ol>\u000a\u000a<p>Please provide feedback.</p>\u000a
p1337
sVquestion_id
p1338
I309412
sVlast_activity_date
p1339
I1333810908
sVcreation_date
p1340
I1227293800
sVscore
p1341
I102
sVowner
p1342
(dp1343
Vuser_id
p1344
I30289
sVprofile_image
p1345
Vhttps://www.gravatar.com/avatar/4ae87ee18d6cfa6d1b07ee6622d9b0ac?s=128&d=identicon&r=PG
p1346
sVuser_type
p1347
Vregistered
p1348
sVreputation
p1349
I10345
sVlink
p1350
Vhttp://stackoverflow.com/users/30289/bhadra
p1351
sVaccept_rate
p1352
I71
sVdisplay_name
p1353
Vbhadra
p1354
ssVis_accepted
p1355
I01
sVlast_edit_date
p1356
I1333810908
sVanswer_id
p1357
I309783
sa(dp1358
Vbody
p1359
V<p>If you don't want a terminal window to pop up when you run your program use <code>pythonw.exe</code>;<br>\u000aOtherwise, use <code>python.exe</code></p>\u000a\u000a<p>Regarding the syntax error: <code>print</code> <a href="http://www.python.org/dev/peps/pep-3105/" rel="noreferrer">is now a function in 3.x</a><br>\u000aSo use instead: </p>\u000a\u000a<pre><code>print("a")\u000a</code></pre>\u000a
p1360
sVquestion_id
p1361
I9705982
sVlast_activity_date
p1362
I1331742814
sVcreation_date
p1363
I1331742814
sVscore
p1364
I101
sVowner
p1365
(dp1366
Vuser_id
p1367
I42346
sVprofile_image
p1368
Vhttps://i.stack.imgur.com/ZikEw.jpg?s=128&g=1
p1369
sVuser_type
p1370
Vregistered
p1371
sVreputation
p1372
I84007
sVlink
p1373
Vhttp://stackoverflow.com/users/42346/bernie
p1374
sVdisplay_name
p1375
Vbernie
p1376
ssVis_accepted
p1377
I01
sVanswer_id
p1378
I9706045
sa(dp1379
Vbody
p1380
V<p>Python uses distutils and setuptools for dependency and packaging.</p>\u000a\u000a<p>Heres a tutorial which explains basics: <a href="http://docs.activestate.com/activepython/3.2/diveintopython3/html/packaging.html" rel="noreferrer">http://docs.activestate.com/activepython/3.2/diveintopython3/html/packaging.html</a></p>\u000a\u000a<p>In short, you will have setup.py file, which has dependency and script compilation/installation information, and you can build eggs, dist tarballs, binary tarballs, etc with it.</p>\u000a
p1381
sVquestion_id
p1382
I3324108
sVlast_activity_date
p1383
I1328796942
sVcreation_date
p1384
I1279953949
sVscore
p1385
I44
sVowner
p1386
(dp1387
Vuser_id
p1388
I396811
sVprofile_image
p1389
Vhttps://www.gravatar.com/avatar/e168fb341e338d5c44743b48be6e6e80?s=128&d=identicon&r=PG
p1390
sVuser_type
p1391
Vregistered
p1392
sVreputation
p1393
I6352
sVlink
p1394
Vhttp://stackoverflow.com/users/396811/daniel-kluev
p1395
sVaccept_rate
p1396
I83
sVdisplay_name
p1397
VDaniel Kluev
p1398
ssVis_accepted
p1399
I01
sVlast_edit_date
p1400
I1328796942
sVanswer_id
p1401
I3324124
sa(dp1402
Vbody
p1403
V<p>Use <a href="http://docs.python.org/library/getpass.html#getpass.getpass"><code>getpass.getpass()</code></a>.</p>\u000a
p1404
sVquestion_id
p1405
I9202224
sVlast_activity_date
p1406
I1328738699
sVcreation_date
p1407
I1328738699
sVscore
p1408
I138
sVowner
p1409
(dp1410
Vuser_id
p1411
I279627
sVprofile_image
p1412
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1413
sVuser_type
p1414
Vregistered
p1415
sVreputation
p1416
I252330
sVlink
p1417
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1418
sVaccept_rate
p1419
I78
sVdisplay_name
p1420
VSven Marnach
p1421
ssVis_accepted
p1422
I01
sVanswer_id
p1423
I9202236
sa(dp1424
Vbody
p1425
V<p>There are probably two major differences:</p>\u000a\u000a<h3>Ruby has elegant, anonymous closures.</h3>\u000a\u000a<p>Rails uses them to good effect. Here's an example:</p>\u000a\u000a<pre><code>class WeblogController &lt; ActionController::Base\u000a  def index\u000a    @posts = Post.find :all\u000a    respond_to do |format|\u000a      format.html\u000a      format.xml { render :xml =&gt; @posts.to_xml }\u000a      format.rss { render :action =&gt; "feed.rxml" }\u000a    end\u000a  end\u000aend\u000a</code></pre>\u000a\u000a<p>Anonymous closures/lambdas make it easier to emulate new language features that would take blocks. In Python, closures exist, but they must be named in order to be used. So instead of being able to use closures to emulate new language features, you're forced to be explicit about the fact that you're using a closure.</p>\u000a\u000a<h3>Ruby has cleaner, easier to use metaprogramming.</h3>\u000a\u000a<p>This is used extensively in Rails, primarily because of how easy it is to use. To be specific, in Ruby, you can execute arbitrary code in the context of the class. The following snippets are equivalent:</p>\u000a\u000a<pre><code>class Foo\u000a  def self.make_hello_method\u000a    class_eval do\u000a      def hello\u000a        puts "HELLO"\u000a      end\u000a    end\u000a  end\u000aend\u000a\u000aclass Bar &lt; Foo # snippet 1\u000a  make_hello_method\u000aend\u000a\u000aclass Bar &lt; Foo; end # snippet 2\u000aBar.make_hello_method\u000a</code></pre>\u000a\u000a<p>In both cases, you can then do:</p>\u000a\u000a<pre><code>Bar.new.hello  \u000a</code></pre>\u000a\u000a<p>which will print "HELLO". The <code>class_eval</code> method also takes a String, so it's possible to create methods on the fly, as a class is being created, that have differing semantics based on the parameters that are passed in.</p>\u000a\u000a<p>It is, in fact, possible to do this sort of metaprogramming in Python (and other languages, too), but Ruby has a leg up because metaprogramming isn't a special style of programming. It flows from the fact that in Ruby, everything is an object and all lines of code are directly executed. As a result, <code>Class</code>es are themselves objects, class bodies have a <code>self</code> pointing at the Class, and you can call methods on the class as you are creating one.</p>\u000a\u000a<p>This is to large degree responsible for the degree of declarativeness possible in Rails, and the ease by which we are able to implement new declarative features that look like keywords or new block language features.</p>\u000a
p1426
sVquestion_id
p1427
I1099305
sVlast_activity_date
p1428
I1320850435
sVcreation_date
p1429
I1247073018
sVscore
p1430
I167
sVowner
p1431
(dp1432
Vuser_id
p1433
I122162
sVprofile_image
p1434
Vhttps://www.gravatar.com/avatar/428167a3ec72235ba971162924492609?s=128&d=identicon&r=PG
p1435
sVuser_type
p1436
Vregistered
p1437
sVreputation
p1438
I24541
sVlink
p1439
Vhttp://stackoverflow.com/users/122162/yehuda-katz
p1440
sVaccept_rate
p1441
I78
sVdisplay_name
p1442
VYehuda Katz
p1443
ssVis_accepted
p1444
I01
sVlast_edit_date
p1445
I1320850435
sVanswer_id
p1446
I1099367
sa(dp1447
Vbody
p1448
V<p>There's typically two levels of buffering involved:</p>\u000a\u000a<ol>\u000a<li>Internal buffers</li>\u000a<li>Operating system buffers</li>\u000a</ol>\u000a\u000a<p>The internal buffers are buffers created by the runtime/library/language that you're programming against and is meant to speed things up by avoiding system calls for every write. Instead, when you write to a file object, you write into its buffer, and whenever the buffer fills up, the data is written to the actual file using system calls.</p>\u000a\u000a<p>However, due to the operating system buffers, this might not mean that the data is written <em>to disk</em>. It may just mean that the data is copied from the buffers maintained by your runtime into the buffers maintained by the operating system.</p>\u000a\u000a<p>If you write something, and it ends up in the buffer (only), and the power is cut to your machine, that data is not on disk when the machine turns off.</p>\u000a\u000a<p>So, in order to help with that you have the <code>flush</code> and <code>fsync</code> methods, on their respective objects.</p>\u000a\u000a<p>The first, <code>flush</code>, will simply write out any data that lingers in a program buffer to the actual file. Typically this means that the data will be copied from the program buffer to the operating system buffer.</p>\u000a\u000a<p>Specifically what this means is that if another process has that same file open for reading, it will be able to access the data you just flushed to the file. However, it does not necessarily mean it has been "permanently" stored on disk.</p>\u000a\u000a<p>To do that, you need to call the <code>os.fsync</code> method which ensures all operating system buffers are synchronized with the storage devices they're for, in other words, that method will copy data from the operating system buffers to the disk.</p>\u000a\u000a<p>Typically you don't need to bother with either method, but if you're in a scenario where paranoia about what actually ends up on disk is a good thing, you should make both calls as instructed.</p>\u000a
p1449
sVquestion_id
p1450
I7127075
sVlast_activity_date
p1451
I1313786436
sVcreation_date
p1452
I1313786436
sVscore
p1453
I135
sVowner
p1454
(dp1455
Vuser_id
p1456
I267
sVprofile_image
p1457
Vhttps://www.gravatar.com/avatar/1b11262da6d1cd26b1b0bc99a2620cee?s=128&d=identicon&r=PG
p1458
sVuser_type
p1459
Vregistered
p1460
sVreputation
p1461
I240091
sVlink
p1462
Vhttp://stackoverflow.com/users/267/lasse-v-karlsen
p1463
sVaccept_rate
p1464
I87
sVdisplay_name
p1465
VLasse V. Karlsen
p1466
ssVis_accepted
p1467
I01
sVanswer_id
p1468
I7127162
sa(dp1469
Vbody
p1470
V<p>In the properties for your pydev project, there's a pane called "PyDev - PYTHONPATH", with a sub-pane called "External Libraries".  You can add source folders (any folder that has an <code>__init__.py</code>) to the path using that pane.  Your project code will then be able to import modules from those source folders.</p>\u000a
p1471
sVquestion_id
p1472
I4631377
sVlast_activity_date
p1473
I1303240681
sVcreation_date
p1474
I1294453579
sVscore
p1475
I114
sVowner
p1476
(dp1477
Vuser_id
p1478
I566403
sVprofile_image
p1479
Vhttps://www.gravatar.com/avatar/890a6cdaf6f2a1a1603d49705e1fb405?s=128&d=identicon&r=PG
p1480
sVuser_type
p1481
Vregistered
p1482
sVreputation
p1483
I1576
sVlink
p1484
Vhttp://stackoverflow.com/users/566403/david-german
p1485
sVdisplay_name
p1486
VDavid German
p1487
ssVis_accepted
p1488
I01
sVlast_edit_date
p1489
I1303240681
sVanswer_id
p1490
I4632022
sa(dp1491
Vbody
p1492
V<p>Use <code>raw_input()</code> instead of <code>input()</code>:</p>\u000a\u000a<pre><code>testVar = raw_input("Ask user for something.")\u000a</code></pre>\u000a\u000a<p><code>input()</code> actually evaluates the input as Python code.  I suggest to never use it.  <code>raw_input()</code> returns the verbatim string entered by the user.</p>\u000a
p1493
sVquestion_id
p1494
I4960208
sVlast_activity_date
p1495
I1297357293
sVcreation_date
p1496
I1297357293
sVscore
p1497
I149
sVowner
p1498
(dp1499
Vuser_id
p1500
I279627
sVprofile_image
p1501
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1502
sVuser_type
p1503
Vregistered
p1504
sVreputation
p1505
I252330
sVlink
p1506
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1507
sVaccept_rate
p1508
I78
sVdisplay_name
p1509
VSven Marnach
p1510
ssVis_accepted
p1511
I01
sVanswer_id
p1512
I4960216
sa(dp1513
Vbody
p1514
V<p>Text printed to stderr will show up in httpd's error log when running under mod_wsgi. You can either use <code>print</code> directly, or use <code>logging</code> instead.</p>\u000a\u000a<pre><code>print &gt;&gt;sys.stderr, 'Goodbye, cruel world!'\u000a</code></pre>\u000a
p1515
sVquestion_id
p1516
I4558879
sVlast_activity_date
p1517
I1293666503
sVcreation_date
p1518
I1293666503
sVscore
p1519
I66
sVowner
p1520
(dp1521
Vuser_id
p1522
I20862
sVprofile_image
p1523
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p1524
sVuser_type
p1525
Vregistered
p1526
sVreputation
p1527
I481008
sVlink
p1528
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p1529
sVaccept_rate
p1530
I60
sVdisplay_name
p1531
VIgnacio Vazquez-Abrams
p1532
ssVis_accepted
p1533
I01
sVanswer_id
p1534
I4558901
sa(dp1535
Vbody
p1536
V<p>List comprehensions leak the loop control variable in Python 2 but not in Python 3.  Here's Guido van Rossum (creator of Python) <a href="http://python-history.blogspot.com/2010/06/from-list-comprehensions-to-generator.html" rel="noreferrer">explaining</a> the history behind this:</p>\u000a\u000a<blockquote>\u000a  <p>We also made another change in Python\u000a  3, to improve equivalence between list\u000a  comprehensions and generator\u000a  expressions. In Python 2, the list\u000a  comprehension "leaks" the loop control\u000a  variable into the surrounding scope:</p>\u000a\u000a<pre><code>x = 'before'\u000aa = [x for x in 1, 2, 3]\u000aprint x # this prints '3', not 'before'\u000a</code></pre>\u000a  \u000a  <p>This was an artifact of the original\u000a  implementation of list comprehensions;\u000a  it was one of Python's "dirty little\u000a  secrets" for years. It started out as\u000a  an intentional compromise to make list\u000a  comprehensions blindingly fast, and\u000a  while it was not a common pitfall for\u000a  beginners, it definitely stung people\u000a  occasionally. For generator\u000a  expressions we could not do this.\u000a  Generator expressions are implemented\u000a  using generators, whose execution\u000a  requires a separate execution frame.\u000a  Thus, generator expressions\u000a  (especially if they iterate over a\u000a  short sequence) were less efficient\u000a  than list comprehensions.</p>\u000a  \u000a  <p>However, in Python 3, we decided to\u000a  fix the "dirty little secret" of list\u000a  comprehensions by using the same\u000a  implementation strategy as for\u000a  generator expressions. Thus, in Python\u000a  3, the above example (after\u000a  modification to use print(x) :-) will\u000a  print 'before', proving that the 'x'\u000a  in the list comprehension temporarily\u000a  shadows but does not override the 'x'\u000a  in the surrounding scope.</p>\u000a</blockquote>\u000a
p1537
sVquestion_id
p1538
I4198906
sVlast_activity_date
p1539
I1289944092
sVcreation_date
p1540
I1289944092
sVscore
p1541
I116
sVowner
p1542
(dp1543
Vuser_id
p1544
I1322401
sVprofile_image
p1545
Vhttps://www.gravatar.com/avatar/142cc2ccd5606eaac6ede2f48c4c60e9?s=128&d=identicon&r=PG
p1546
sVuser_type
p1547
Vregistered
p1548
sVreputation
p1549
I27426
sVlink
p1550
Vhttp://stackoverflow.com/users/1322401/steven-rumbalski
p1551
sVaccept_rate
p1552
I100
sVdisplay_name
p1553
VSteven Rumbalski
p1554
ssVis_accepted
p1555
I01
sVanswer_id
p1556
I4199355
sa(dp1557
Vbody
p1558
V<pre><code>list(your_iterator)\u000a</code></pre>\u000a
p1559
sVquestion_id
p1560
I3790848
sVlast_activity_date
p1561
I1285440079
sVcreation_date
p1562
I1285361290
sVscore
p1563
I160
sVowner
p1564
(dp1565
Vuser_id
p1566
I1617926
sVprofile_image
p1567
Vhttps://www.gravatar.com/avatar/4305daee9fe9d9b6ca2824a493983a23?s=128&d=identicon&r=PG
p1568
sVuser_type
p1569
Vregistered
p1570
sVreputation
p1571
I13942
sVlink
p1572
Vhttp://stackoverflow.com/users/1617926/mikerobi
p1573
sVdisplay_name
p1574
Vmikerobi
p1575
ssVis_accepted
p1576
I01
sVlast_edit_date
p1577
I1285440079
sVanswer_id
p1578
I3790862
sa(dp1579
Vbody
p1580
V<p>The likeliest answer is that it just keeps the grammar simple, hasn't been a stumbling block for adoption, and many have been happy with not having to disambiguate the scope to which a name belongs when assigning to it within a loop construct.  Variables are not declared within a scope, it is implied by the location of assignment statements.  The <code>global</code> keyword exists just for this reason (to signify that assignment is done at a global scope).</p>\u000a\u000a<p><strong>Update</strong></p>\u000a\u000a<p>Here's a good discussion on the topic:  <a href="http://mail.python.org/pipermail/python-ideas/2008-October/002109.html" rel="noreferrer">http://mail.python.org/pipermail/python-ideas/2008-October/002109.html</a></p>\u000a\u000a<blockquote>\u000a  <p>Previous proposals to make for-loop\u000a  variables local to the loop have\u000a  stumbled on the problem of existing\u000a  code that relies on the loop variable\u000a  keeping its value after exiting the\u000a  loop, and it seems that this is\u000a  regarded as a desirable feature.</p>\u000a</blockquote>\u000a\u000a<p>In short, you can probably blame it on the Python community :P</p>\u000a
p1581
sVquestion_id
p1582
I3611760
sVlast_activity_date
p1583
I1283279910
sVcreation_date
p1584
I1283278923
sVscore
p1585
I54
sVowner
p1586
(dp1587
Vuser_id
p1588
I21776
sVprofile_image
p1589
Vhttps://www.gravatar.com/avatar/13d63a48cb238e6c50836700ebc45db2?s=128&d=identicon&r=PG&f=1
p1590
sVuser_type
p1591
Vregistered
p1592
sVreputation
p1593
I9688
sVlink
p1594
Vhttp://stackoverflow.com/users/21776/jeremy-brown
p1595
sVdisplay_name
p1596
VJeremy Brown
p1597
ssVis_accepted
p1598
I01
sVlast_edit_date
p1599
I1283279910
sVanswer_id
p1600
I3611987
sa(dp1601
Vbody
p1602
V<p><code>range()</code> and <code>xrange()</code> take a third parameter that specifies a step. So you can do the following.</p>\u000a\u000a<pre><code>range(10, 0, -1)\u000a</code></pre>\u000a\u000a<p>Which gives</p>\u000a\u000a<pre><code>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1] \u000a</code></pre>\u000a\u000a<p>But for iteration, you should really be using <code>xrange</code> instead. So,</p>\u000a\u000a<pre><code>xrange(10, 0, -1)\u000a</code></pre>\u000a
p1603
sVquestion_id
p1604
I3476732
sVlast_activity_date
p1605
I1281705019
sVcreation_date
p1606
I1281702538
sVscore
p1607
I132
sVowner
p1608
(dp1609
Vuser_id
p1610
I148765
sVprofile_image
p1611
Vhttps://www.gravatar.com/avatar/07d542a58ef9867b4ac2309ecdac3d2e?s=128&d=identicon&r=PG
p1612
sVuser_type
p1613
Vregistered
p1614
sVreputation
p1615
I30438
sVlink
p1616
Vhttp://stackoverflow.com/users/148765/chinmay-kanchi
p1617
sVaccept_rate
p1618
I88
sVdisplay_name
p1619
VChinmay Kanchi
p1620
ssVis_accepted
p1621
I01
sVlast_edit_date
p1622
I1281705019
sVanswer_id
p1623
I3476768
sa(dp1624
Vbody
p1625
V<p>Some uses that I have come across:</p>\u000a\u000a<p>1) saving a program's state data to disk so that it can carry on where it left off when restarted (persistence)</p>\u000a\u000a<p>2) sending python data over a TCP connection in a multi-core or distributed system (marshalling)</p>\u000a\u000a<p>3) storing python objects in a database</p>\u000a\u000a<p>4) converting an arbitrary python object to a string so that it can be used as a dictionary key (e.g. for caching &amp; memoization).</p>\u000a\u000a<p>There are some issues with the last one - two identical objects can be pickled and result in different strings - or even the same object pickled twice can have different representations.  This is because the pickle can include reference count information.</p>\u000a
p1626
sVquestion_id
p1627
I3438675
sVlast_activity_date
p1628
I1281356513
sVcreation_date
p1629
I1281356513
sVscore
p1630
I40
sVowner
p1631
(dp1632
Vuser_id
p1633
I206417
sVprofile_image
p1634
Vhttps://www.gravatar.com/avatar/448da181fc6df1794b855848b84f0be9?s=128&d=identicon&r=PG
p1635
sVuser_type
p1636
Vregistered
p1637
sVreputation
p1638
I16282
sVlink
p1639
Vhttp://stackoverflow.com/users/206417/dave-kirby
p1640
sVaccept_rate
p1641
I71
sVdisplay_name
p1642
VDave Kirby
p1643
ssVis_accepted
p1644
I01
sVanswer_id
p1645
I3439921
sa(dp1646
Vbody
p1647
V<p>Those are two different things, as others have mentioned.  </p>\u000a\u000a<p><strong>When you specify <code># -*- coding: utf-8 -*-</code></strong>, you're telling Python the source file you've saved is <code>utf-8</code>.  The default for Python 2 is ASCII (for Python 3 it's <code>utf-8</code>).  This just affects how the interpreter reads the characters in the file.</p>\u000a\u000a<p>In general, it's probably not the best idea to embed high unicode characters into your file no matter what the encoding is; you can use string unicode escapes, which work in either encoding.</p>\u000a\u000a<hr>\u000a\u000a<p><strong>When you declare a string with a <code>u</code> in front</strong>, like <code>u'This is a string'</code>, it tells the Python compiler that the string is Unicode, not bytes.  This is handled mostly transparently by the interpreter; the most obvious difference is that you can now embed unicode characters in the string (that is, <code>u'\u005cu2665'</code> is now legal).  You can use <code>from __future__ import unicode_literals</code> to make it the default.</p>\u000a\u000a<p>This only applies to Python 2; in Python 3 the default is Unicode, and you need to specify a <code>b</code> in front (like <code>b'These are bytes'</code>, to declare a sequence of bytes). </p>\u000a
p1648
sVquestion_id
p1649
I3170211
sVlast_activity_date
p1650
I1278136296
sVcreation_date
p1651
I1278131657
sVscore
p1652
I126
sVowner
p1653
(dp1654
Vuser_id
p1655
I9161
sVprofile_image
p1656
Vhttps://www.gravatar.com/avatar/f7a299bf5d76571cdaa91d2d1ff3805e?s=128&d=identicon&r=PG
p1657
sVuser_type
p1658
Vregistered
p1659
sVreputation
p1660
I31792
sVlink
p1661
Vhttp://stackoverflow.com/users/9161/chris-b
p1662
sVaccept_rate
p1663
I53
sVdisplay_name
p1664
VChris B.
p1665
ssVis_accepted
p1666
I01
sVlast_edit_date
p1667
I1278136296
sVanswer_id
p1668
I3170331
sa(dp1669
Vbody
p1670
V<p>There is no 'built in' way to do this. Django will raise the DoesNotExist exception every time.\u000aThe idiomatic way to handle this in python is to wrap it in a try catch:</p>\u000a\u000a<pre><code>try:\u000a   x = SomeModel.objects.get(foo='bar')\u000aexcept SomeModel.DoesNotExist:\u000a   x = None\u000a</code></pre>\u000a\u000a<p>What I did do, is to sublcass models.Manager, create a <code>safe_get</code> like the code above and use that manager for my models. That way you can write: SomeModel.objects.safe_get(foo='bar')</p>\u000a
p1671
sVquestion_id
p1672
I3090302
sVlast_activity_date
p1673
I1278094992
sVcreation_date
p1674
I1277182029
sVscore
p1675
I138
sVowner
p1676
(dp1677
Vuser_id
p1678
I65490
sVprofile_image
p1679
Vhttps://www.gravatar.com/avatar/9bfcdf9a72021d081a4cebf69a49ada8?s=128&d=identicon&r=PG
p1680
sVuser_type
p1681
Vregistered
p1682
sVreputation
p1683
I5379
sVlink
p1684
Vhttp://stackoverflow.com/users/65490/arthur-debert
p1685
sVdisplay_name
p1686
VArthur Debert
p1687
ssVis_accepted
p1688
I01
sVlast_edit_date
p1689
I1278094992
sVanswer_id
p1690
I3090342
sa(dp1691
Vbody
p1692
V<blockquote>\u000a  <p>Does it re-import every time the function is run?</p>\u000a</blockquote>\u000a\u000a<p>No; or rather, Python modules are essentially cached every time they are imported, so importing a second (or third, or fourth...) time doesn't actually force them to go through the whole import process again.</p>\u000a\u000a<blockquote>\u000a  <p>Does it import once at the beginning whether or not the function is run?</p>\u000a</blockquote>\u000a\u000a<p>No, it is only imported if and when the function is executed.</p>\u000a\u000a<p>As for the benefits: it depends, I guess. If you may only run a function very rarely and don't need the module imported anywhere else, it <em>may</em> be beneficial to only import it in that function. Or if there is a name clash or other reason you don't want the module or symbols from the module available <em>everywhere</em>, you may only want to import it in a specific function. (Of course, there's always <code>from my_module import my_function as f</code> for those cases.)</p>\u000a\u000a<p>In general practice, it's probably not that beneficial. In fact, most Python style guides encourage programmers to place all imports at the beginning of the module file.</p>\u000a
p1693
sVquestion_id
p1694
I3095071
sVlast_activity_date
p1695
I1277224187
sVcreation_date
p1696
I1277224187
sVscore
p1697
I72
sVowner
p1698
(dp1699
Vuser_id
p1700
I28804
sVprofile_image
p1701
Vhttps://www.gravatar.com/avatar/015c999a9db79ffb3030b3cc207d0be8?s=128&d=identicon&r=PG
p1702
sVuser_type
p1703
Vregistered
p1704
sVreputation
p1705
I234785
sVlink
p1706
Vhttp://stackoverflow.com/users/28804/mipadi
p1707
sVaccept_rate
p1708
I75
sVdisplay_name
p1709
Vmipadi
p1710
ssVis_accepted
p1711
I01
sVanswer_id
p1712
I3095124
sa(dp1713
Vbody
p1714
V<pre><code>import os\u000aos.listdir("path") # returns list\u000a</code></pre>\u000a
p1715
sVquestion_id
p1716
I2759323
sVlast_activity_date
p1717
I1272902250
sVcreation_date
p1718
I1272902250
sVscore
p1719
I129
sVowner
p1720
(dp1721
Vuser_id
p1722
I85461
sVprofile_image
p1723
Vhttps://www.gravatar.com/avatar/aec676e2a7e970dba983dd3e6a8dcbb0?s=128&d=identicon&r=PG
p1724
sVuser_type
p1725
Vregistered
p1726
sVreputation
p1727
I2843
sVlink
p1728
Vhttp://stackoverflow.com/users/85461/user85461
p1729
sVaccept_rate
p1730
I79
sVdisplay_name
p1731
Vuser85461
p1732
ssVis_accepted
p1733
I01
sVanswer_id
p1734
I2759331
sa(dp1735
Vbody
p1736
V<p>Use <a href="http://docs.python.org/reference/simple_stmts.html#the-pass-statement" rel="noreferrer">pass</a> for no-op:</p>\u000a\u000a<pre><code>if x == 0:\u000a  pass\u000aelse:\u000a  print "x not equal 0"\u000a</code></pre>\u000a\u000a<p>And here's another example:</p>\u000a\u000a<pre><code>def f():\u000a  pass\u000a</code></pre>\u000a\u000a<p>Or:</p>\u000a\u000a<pre><code>class c:\u000a  pass\u000a</code></pre>\u000a
p1737
sVquestion_id
p1738
I690622
sVlast_activity_date
p1739
I1261107698
sVcreation_date
p1740
I1238173517
sVscore
p1741
I176
sVowner
p1742
(dp1743
Vuser_id
p1744
I3153
sVprofile_image
p1745
Vhttps://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=128&d=identicon&r=PG
p1746
sVuser_type
p1747
Vregistered
p1748
sVreputation
p1749
I213096
sVlink
p1750
Vhttp://stackoverflow.com/users/3153/brian-r-bondy
p1751
sVaccept_rate
p1752
I99
sVdisplay_name
p1753
VBrian R. Bondy
p1754
ssVis_accepted
p1755
I01
sVlast_edit_date
p1756
I1261107698
sVanswer_id
p1757
I690625
sa(dp1758
Vbody
p1759
V<p>The getcode() method (Added in python2.6) returns the HTTP status code that was sent with the response, or None if the URL is no HTTP URL.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a=urllib.urlopen('http://www.google.com/asdfsf')\u000a&gt;&gt;&gt; a.getcode()\u000a404\u000a&gt;&gt;&gt; a=urllib.urlopen('http://www.google.com/')\u000a&gt;&gt;&gt; a.getcode()\u000a200\u000a</code></pre>\u000a
p1760
sVquestion_id
p1761
I1726402
sVlast_activity_date
p1762
I1258073740
sVcreation_date
p1763
I1258073114
sVscore
p1764
I134
sVowner
p1765
(dp1766
Vuser_id
p1767
I97828
sVprofile_image
p1768
Vhttps://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG
p1769
sVuser_type
p1770
Vregistered
p1771
sVreputation
p1772
I64017
sVlink
p1773
Vhttp://stackoverflow.com/users/97828/nadia-alramli
p1774
sVdisplay_name
p1775
VNadia Alramli
p1776
ssVis_accepted
p1777
I01
sVlast_edit_date
p1778
I1258073740
sVanswer_id
p1779
I1726431
sa(dp1780
Vbody
p1781
V<p>I do not think that what you are looking for is provided by SciPy.  I would write the code myself, in this situation.</p>\u000a\u000a<p>The spline interpolation and smoothing from scipy.interpolate are quite nice and might be quite helpful in fitting peaks and then finding the location of their maximum.</p>\u000a
p1782
sVquestion_id
p1783
I1713335
sVlast_activity_date
p1784
I1258014971
sVcreation_date
p1785
I1258014971
sVscore
p1786
I10
sVowner
p1787
(dp1788
Vuser_id
p1789
I42973
sVprofile_image
p1790
Vhttps://www.gravatar.com/avatar/e1e331c88fcddfe245f4be299389270d?s=128&d=identicon&r=PG
p1791
sVuser_type
p1792
Vregistered
p1793
sVreputation
p1794
I43633
sVlink
p1795
Vhttp://stackoverflow.com/users/42973/eol
p1796
sVaccept_rate
p1797
I87
sVdisplay_name
p1798
VEOL
p1799
ssVis_accepted
p1800
I01
sVanswer_id
p1801
I1720766
sa(dp1802
Vbody
p1803
V<pre><code>&gt;&gt;&gt; l = range(165)\u000a&gt;&gt;&gt; l[0::10]\u000a[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]\u000a</code></pre>\u000a\u000a<p>EDIT: just for fun, a little timing comparison (ignoring the boundary condition):</p>\u000a\u000a<pre><code>$ python -m timeit -s "l = range(1000)" "l1 = [x for x in l if x % 10 == 0]"\u000a1000 loops, best of 3: 525 usec per loop\u000a$ python -m timeit -s "l = range(1000)" "l1 = l[0::10]"\u000a100000 loops, best of 3: 4.02 usec per loop\u000a</code></pre>\u000a
p1804
sVquestion_id
p1805
I1403674
sVlast_activity_date
p1806
I1252567109
sVcreation_date
p1807
I1252564648
sVscore
p1808
I154
sVowner
p1809
(dp1810
Vuser_id
p1811
I145403
sVprofile_image
p1812
Vhttps://www.gravatar.com/avatar/137b739a75a31399e6d07140302c8efc?s=128&d=identicon&r=PG
p1813
sVuser_type
p1814
Vregistered
p1815
sVreputation
p1816
I57104
sVlink
p1817
Vhttp://stackoverflow.com/users/145403/ned-deily
p1818
sVdisplay_name
p1819
VNed Deily
p1820
ssVis_accepted
p1821
I01
sVlast_edit_date
p1822
I1252567109
sVanswer_id
p1823
I1403693
sa(dp1824
Vbody
p1825
V<p>Here, as I just discovered, is how to do this with the Django 1.1 aggregation API:</p>\u000a\u000a<pre><code>from django.db.models import Count\u000atheanswer = Item.objects.values('category').annotate(Count('category'))\u000a</code></pre>\u000a
p1826
sVquestion_id
p1827
I327807
sVlast_activity_date
p1828
I1251004869
sVcreation_date
p1829
I1251004869
sVscore
p1830
I123
sVowner
p1831
(dp1832
Vuser_id
p1833
I161109
sVprofile_image
p1834
Vhttps://www.gravatar.com/avatar/cb0c540dfd2d62576c4cdeb766e75752?s=128&d=identicon&r=PG
p1835
sVuser_type
p1836
Vregistered
p1837
sVreputation
p1838
I1538
sVlink
p1839
Vhttp://stackoverflow.com/users/161109/michael
p1840
sVdisplay_name
p1841
Vmichael
p1842
ssVis_accepted
p1843
I01
sVanswer_id
p1844
I1317837
sa(dp1845
Vbody
p1846
V<p>If you actually want your function to behave like the <code>str()</code> built-in, but return an empty string when the argument is None, do this:</p>\u000a\u000a<pre><code>def xstr(s):\u000a    if s is None:\u000a        return ''\u000a    return str(s)\u000a</code></pre>\u000a
p1847
sVquestion_id
p1848
I1034573
sVlast_activity_date
p1849
I1245785298
sVcreation_date
p1850
I1245785298
sVscore
p1851
I45
sVowner
p1852
(dp1853
Vuser_id
p1854
I43089
sVprofile_image
p1855
Vhttps://www.gravatar.com/avatar/cbdcba7870660c048cf9d6db74a3ef29?s=128&d=identicon&r=PG
p1856
sVuser_type
p1857
Vregistered
p1858
sVreputation
p1859
I124007
sVlink
p1860
Vhttp://stackoverflow.com/users/43089/triptych
p1861
sVaccept_rate
p1862
I57
sVdisplay_name
p1863
VTriptych
p1864
ssVis_accepted
p1865
I01
sVanswer_id
p1866
I1034633
sa(dp1867
Vbody
p1868
V<p>Just use globals()</p>\u000a\u000a<blockquote>\u000a  <p>globals() \u2014 Return a dictionary\u000a  representing the current global symbol\u000a  table. This is always the dictionary\u000a  of the current module (inside a\u000a  function or method, this is the module\u000a  where it is defined, not the module\u000a  from which it is called).</p>\u000a</blockquote>\u000a\u000a<p><a href="http://docs.python.org/library/functions.html#globals" rel="noreferrer">http://docs.python.org/library/functions.html#globals</a></p>\u000a
p1869
sVquestion_id
p1870
I990422
sVlast_activity_date
p1871
I1244887316
sVcreation_date
p1872
I1244887316
sVscore
p1873
I95
sVowner
p1874
(dp1875
Vuser_id
p1876
I16390
sVprofile_image
p1877
Vhttps://www.gravatar.com/avatar/1bd1f0ff92bed69bfb53eefa9fd606f8?s=128&d=identicon&r=PG
p1878
sVuser_type
p1879
Vregistered
p1880
sVreputation
p1881
I1844
sVlink
p1882
Vhttp://stackoverflow.com/users/16390/maciej-pasternacki
p1883
sVdisplay_name
p1884
VMaciej Pasternacki
p1885
ssVis_accepted
p1886
I01
sVanswer_id
p1887
I990450
sa(dp1888
Vbody
p1889
V<p>Personally I can't convince myself to litter my code with the markers. I've become pretty used to (and efficient) at using indent-folding. Together with my mapping of space bar (see below) to open/close folds and the zR and zM commands, I'm right at home. Perfect for Python!</p>\u000a\u000a<blockquote>\u000a  <p><code>nnoremap &lt;space&gt; za</code></p>\u000a  \u000a  <p><code>vnoremap &lt;space&gt; zf</code></p>\u000a</blockquote>\u000a
p1890
sVquestion_id
p1891
I357785
sVlast_activity_date
p1892
I1229024863
sVcreation_date
p1893
I1229024863
sVscore
p1894
I87
sVowner
p1895
(dp1896
Vuser_id
p1897
I23840
sVprofile_image
p1898
Vhttps://i.stack.imgur.com/QQzmF.png?s=128&g=1
p1899
sVuser_type
p1900
Vregistered
p1901
sVreputation
p1902
I5160
sVlink
p1903
Vhttp://stackoverflow.com/users/23840/walter
p1904
sVdisplay_name
p1905
VWalter
p1906
ssVis_accepted
p1907
I01
sVanswer_id
p1908
I360634
sa(dp1909
Vcommunity_owned_date
p1910
I1307687867
sVbody
p1911
V<p>There's not really a huge difference between python and ruby at least at an ideological level.  For the most part, they're just different flavors of the same thing.  Thus, I would recommend seeing which one matches your programming style more.</p>\u000a
p1912
sVquestion_id
p1913
I144661
sVlast_activity_date
p1914
I1222561869
sVcreation_date
p1915
I1222561869
sVscore
p1916
I15
sVowner
p1917
(dp1918
Vuser_id
p1919
I2147
sVprofile_image
p1920
Vhttps://www.gravatar.com/avatar/b8e26b9942e7193a4fe32c407aacfef5?s=128&d=identicon&r=PG
p1921
sVuser_type
p1922
Vregistered
p1923
sVreputation
p1924
I86169
sVlink
p1925
Vhttp://stackoverflow.com/users/2147/jason-baker
p1926
sVaccept_rate
p1927
I85
sVdisplay_name
p1928
VJason Baker
p1929
ssVis_accepted
p1930
I01
sVanswer_id
p1931
I144864
sasVquota_max
p1932
I300
sVquota_remaining
p1933
I214
s.