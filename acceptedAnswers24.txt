(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<pre><code>import csv\u000a\u000awith open(..., 'wb') as myfile:\u000a    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)\u000a    wr.writerow(mylist)\u000a</code></pre>\u000a
p6
sVquestion_id
p7
I2084069
sVlast_activity_date
p8
I1494666546
sVcreation_date
p9
I1263794005
sVscore
p10
I107
sVowner
p11
(dp12
Vuser_id
p13
I95810
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I516089
sVlink
p19
Vhttp://stackoverflow.com/users/95810/alex-martelli
p20
sVaccept_rate
p21
I80
sVdisplay_name
p22
VAlex Martelli
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1494666546
sVanswer_id
p26
I2084135
sa(dp27
Vbody
p28
V<p>Imports are generally sorted alphabetically and described in various places beside PEP 8.</p>\u000a\u000a<p><strong>Alphabetically sorted modules are quicker to read and searchable</strong>. After all python is all about readability.\u000aAlso It is easier to verify that something is imported, and avoids duplicated imports</p>\u000a\u000a<p>There is nothing available in PEP 8 regarding sorting.So its all about choice what you use.</p>\u000a\u000a<p>According to few references from reputable sites and repositories also popularity, Alphabetical ordering is the way.</p>\u000a\u000a<p>for eg like this:</p>\u000a\u000a<pre><code>import httplib\u000aimport logging\u000aimport random\u000aimport StringIO\u000aimport time\u000aimport unittest\u000afrom nova.api import openstack\u000afrom nova.auth import users\u000afrom nova.endpoint import cloud\u000a</code></pre>\u000a\u000a<p>OR</p>\u000a\u000a<pre><code>import a_standard\u000aimport b_standard\u000a\u000aimport a_third_party\u000aimport b_third_party\u000a\u000afrom a_soc import f\u000afrom a_soc import g\u000afrom b_soc import d\u000a</code></pre>\u000a\u000a<p>Reddit official repository also states that, In general PEP-8 import ordering should be used. However there are a few additions which is</p>\u000a\u000a<pre><code>for each imported group the order of imports should be:\u000aimport &lt;package&gt;.&lt;module&gt; style lines in alphabetical order\u000afrom &lt;package&gt;.&lt;module&gt; import &lt;symbol&gt; style in alphabetical order\u000a</code></pre>\u000a\u000a<p>References:</p>\u000a\u000a<ul>\u000a<li><a href="https://code.google.com/p/soc/wiki/PythonStyleGuide" rel="nofollow noreferrer">https://code.google.com/p/soc/wiki/PythonStyleGuide</a></li>\u000a<li><a href="https://github.com/reddit/reddit/wiki/PythonImportGuidelines" rel="nofollow noreferrer">https://github.com/reddit/reddit/wiki/PythonImportGuidelines</a></li>\u000a<li><a href="http://docs.openstack.org/developer/hacking/" rel="nofollow noreferrer">http://docs.openstack.org/developer/hacking/</a></li>\u000a<li><a href="http://developer.plone.org/reference_manuals/external/plone.api/contribute/conventions.html#grouping-and-sorting" rel="nofollow noreferrer">http://developer.plone.org/reference_manuals/external/plone.api/contribute/conventions.html#grouping-and-sorting</a></li>\u000a</ul>\u000a\u000a<p>PS: the <a href="https://pypi.python.org/pypi/isort/" rel="nofollow noreferrer">isort utility</a> automatically sorts your imports.</p>\u000a
p29
sVquestion_id
p30
I20762662
sVlast_activity_date
p31
I1491824663
sVcreation_date
p32
I1387900130
sVscore
p33
I44
sVowner
p34
(dp35
Vuser_id
p36
I1560806
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/f4429a2e7d0fea8e3f3bc5c436e25c85?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I3536
sVlink
p42
Vhttp://stackoverflow.com/users/1560806/abhishek
p43
sVaccept_rate
p44
I100
sVdisplay_name
p45
VAbhishek
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1491824663
sVanswer_id
p49
I20763446
sa(dp50
Vbody
p51
V<p>Use the environment variable <a href="http://docs.python.org/using/cmdline.html#envvar-PYTHONSTARTUP" rel="nofollow noreferrer">PYTHONSTARTUP</a>. From the official documentation:</p>\u000a\u000a<blockquote>\u000a  <p>If this is the name of a readable file, the Python commands in that\u000a  file are executed before the first prompt is displayed in interactive\u000a  mode. The file is executed in the same namespace where interactive\u000a  commands are executed so that objects defined or imported in it can be\u000a  used without qualification in the interactive session.</p>\u000a</blockquote>\u000a\u000a<p>So, just create a python script with the import statement and point the environment variable to it. Having said that, remember that 'Explicit is always better than implicit', so don't rely on this behavior for production scripts.</p>\u000a\u000a<p>For Ipython, see <a href="http://ipython.readthedocs.io/en/stable/config/intro.html" rel="nofollow noreferrer">this</a> tutorial on how to make a ipython_config file</p>\u000a
p52
sVquestion_id
p53
I11124578
sVlast_activity_date
p54
I1490824169
sVcreation_date
p55
I1340212028
sVscore
p56
I37
sVowner
p57
(dp58
Vuser_id
p59
I1196900
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/eba48b5fb8b0d75128a22da8b31426e6?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I3305
sVlink
p65
Vhttp://stackoverflow.com/users/1196900/dhara
p66
sVaccept_rate
p67
I100
sVdisplay_name
p68
VDhara
p69
ssVis_accepted
p70
I01
sVlast_edit_date
p71
I1490824169
sVanswer_id
p72
I11124610
sa(dp73
Vbody
p74
V<p>According to <a href="http://groups.google.com/group/comp.lang.python/browse_thread/thread/e3e9dfdb5cbe33c8/83361c0f975add77?lnk=raot&amp;pli=1" rel="noreferrer">this thread</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Indeed, CPython's sets are implemented as something like dictionaries \u000a  with dummy values (the keys being the members of the set), with some \u000a  optimization(s) that exploit this lack of values</p>\u000a</blockquote>\u000a\u000a<p>So basically a <code>set</code> uses a hashtable as its underlying data structure. This explains the O(1) membership checking, since looking up an item in a hashtable is an O(1) operation, on average.</p>\u000a\u000a<p>If you are so inclined you can even browse the <a href="http://svn.python.org/view/python/trunk/Objects/setobject.c?view=markup" rel="noreferrer">CPython source code for set</a> which, according to <a href="http://markmail.org/message/ktzomp4uwrmnzao6" rel="noreferrer">Achim Domma</a>, is mostly a cut-and-paste from the <code>dict</code> implementation.</p>\u000a
p75
sVquestion_id
p76
I3949310
sVlast_activity_date
p77
I1489285070
sVcreation_date
p78
I1287240463
sVscore
p79
I62
sVowner
p80
(dp81
Vuser_id
p82
I101258
sVprofile_image
p83
Vhttps://www.gravatar.com/avatar/a81805e545b4996b36c7d011a5249b2c?s=128&d=identicon&r=PG
p84
sVuser_type
p85
Vregistered
p86
sVreputation
p87
I81232
sVlink
p88
Vhttp://stackoverflow.com/users/101258/justin-ethier
p89
sVaccept_rate
p90
I100
sVdisplay_name
p91
VJustin Ethier
p92
ssVis_accepted
p93
I01
sVlast_edit_date
p94
I1489285070
sVanswer_id
p95
I3949350
sa(dp96
Vbody
p97
V<p>You must first convert your timestamps to Python <code>datetime</code> objects (use <code>datetime.strptime</code>). Then use <code>date2num</code> to convert the dates to matplotlib format.</p>\u000a\u000a<p>Plot the dates and values using <a href="http://matplotlib.org/api/pyplot_api.html?highlight=plot_date#matplotlib.pyplot.plot_date" rel="noreferrer"><code>plot_date</code></a>:</p>\u000a\u000a<pre><code>dates = matplotlib.dates.date2num(list_of_datetimes)\u000amatplotlib.pyplot.plot_date(dates, values)\u000a</code></pre>\u000a
p98
sVquestion_id
p99
I1574088
sVlast_activity_date
p100
I1483363099
sVcreation_date
p101
I1255630706
sVscore
p102
I91
sVowner
p103
(dp104
Vuser_id
p105
I3571
sVprofile_image
p106
Vhttps://www.gravatar.com/avatar/b1d6ed6863a3b4aab3565f1f9625f156?s=128&d=identicon&r=PG
p107
sVuser_type
p108
Vregistered
p109
sVreputation
p110
I58092
sVlink
p111
Vhttp://stackoverflow.com/users/3571/codeape
p112
sVaccept_rate
p113
I56
sVdisplay_name
p114
Vcodeape
p115
ssVis_accepted
p116
I01
sVlast_edit_date
p117
I1483363099
sVanswer_id
p118
I1574146
sa(dp119
Vbody
p120
V<p>To invert a boolean Series, <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing">use <code>~s</code></a>:</p>\u000a\u000a<pre><code>In [7]: s = pd.Series([True, True, False, True])\u000a\u000aIn [8]: ~s\u000aOut[8]: \u000a0    False\u000a1    False\u000a2     True\u000a3    False\u000adtype: bool\u000a</code></pre>\u000a\u000a<p>Using Python2.7, NumPy 1.8.0, Pandas 0.13.1:</p>\u000a\u000a<pre><code>In [119]: s = pd.Series([True, True, False, True]*10000)\u000a\u000aIn [10]:  %timeit np.invert(s)\u000a10000 loops, best of 3: 91.8 µs per loop\u000a\u000aIn [11]: %timeit ~s\u000a10000 loops, best of 3: 73.5 µs per loop\u000a\u000aIn [12]: %timeit (-s)\u000a10000 loops, best of 3: 73.5 µs per loop\u000a</code></pre>\u000a\u000a<p>As of Pandas 0.13.0, Series are no longer subclasses of <code>numpy.ndarray</code>; they are now subclasses of <code>pd.NDFrame</code>. This might have something to do with why <code>np.invert(s)</code> is no longer as fast as <code>~s</code> or <code>-s</code>.</p>\u000a\u000a<p>Caveat: <code>timeit</code> results may vary depending on many factors including hardware, compiler, OS, Python, NumPy and Pandas versions. </p>\u000a
p121
sVquestion_id
p122
I15998188
sVlast_activity_date
p123
I1477681139
sVcreation_date
p124
I1365942027
sVscore
p125
I83
sVowner
p126
(dp127
Vuser_id
p128
I190597
sVprofile_image
p129
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p130
sVuser_type
p131
Vregistered
p132
sVreputation
p133
I425294
sVlink
p134
Vhttp://stackoverflow.com/users/190597/unutbu
p135
sVaccept_rate
p136
I88
sVdisplay_name
p137
Vunutbu
p138
ssVis_accepted
p139
I01
sVlast_edit_date
p140
I1477681139
sVanswer_id
p141
I15998993
sa(dp142
Vbody
p143
V<p>There are many ways to convert instance to a dictionary, with varying degrees of corner case handling and closeness to the desired result.</p>\u000a\u000a<hr>\u000a\u000a<h2>1. <code>instance.__dict__</code></h2>\u000a\u000a<pre><code>instance.__dict__\u000a</code></pre>\u000a\u000a<p>which returns</p>\u000a\u000a<pre><code>{'_reference1_cache': &lt;OtherModel: OtherModel object&gt;,\u000a '_state': &lt;django.db.models.base.ModelState at 0x1f63310&gt;,\u000a 'created': datetime.datetime(2014, 2, 21, 4, 38, 51, 844795, tzinfo=&lt;UTC&gt;),\u000a 'id': 1L,\u000a 'reference1_id': 1L,\u000a 'value': 1,\u000a 'value2': 2}\u000a</code></pre>\u000a\u000a<p>This is by far the simplest, but is missing reference2, reference1 is misnamed, and it has two extra things in it.</p>\u000a\u000a<hr>\u000a\u000a<h2>2. model_to_dict</h2>\u000a\u000a<pre><code>from django.forms.models import model_to_dict\u000amodel_to_dict(instance)\u000a</code></pre>\u000a\u000a<p>which returns</p>\u000a\u000a<pre><code>{u'id': 1L, 'reference1': 1L, 'reference2': [1L], 'value': 1}\u000a</code></pre>\u000a\u000a<p>This is the only one with reference2, but is missing the uneditable fields.</p>\u000a\u000a<hr>\u000a\u000a<h2>3. model_to_dict with fields</h2>\u000a\u000a<pre><code>from django.forms.models import model_to_dict\u000amodel_to_dict(instance, fields=[field.name for field in instance._meta.fields])\u000a</code></pre>\u000a\u000a<p>which returns</p>\u000a\u000a<pre><code>{u'id': 1L, 'reference1': 1L, 'value': 1}\u000a</code></pre>\u000a\u000a<p>This is strictly worse than the standard model_to_dict invocation.</p>\u000a\u000a<hr>\u000a\u000a<h2>4. query_set.values()</h2>\u000a\u000a<pre><code>SomeModel.objects.filter(id=instance.id).values()[0]\u000a</code></pre>\u000a\u000a<p>which returns</p>\u000a\u000a<pre><code>{'created': datetime.datetime(2014, 2, 21, 4, 38, 51, tzinfo=&lt;UTC&gt;),\u000a u'id': 1L,\u000a 'reference1_id': 1L,\u000a 'value': 1L,\u000a 'value2': 2L}\u000a</code></pre>\u000a\u000a<p>This is the same output as <code>instance.__dict__</code> but without the extra fields.</p>\u000a\u000a<hr>\u000a\u000a<h2>5. Custom Function</h2>\u000a\u000a<p>The code for django's model_to_dict had most of the answer.  It explicitly removed non-editable fields, so removing that check results in the following code which behaves as desired:</p>\u000a\u000a<pre><code>from django.db.models.fields.related import ManyToManyField\u000a\u000adef to_dict(instance):\u000a    opts = instance._meta\u000a    data = {}\u000a    for f in opts.concrete_fields + opts.many_to_many:\u000a        if isinstance(f, ManyToManyField):\u000a            if instance.pk is None:\u000a                data[f.name] = []\u000a            else:\u000a                data[f.name] = list(f.value_from_object(instance).values_list('pk', flat=True))\u000a        else:\u000a            data[f.name] = f.value_from_object(instance)\u000a    return data\u000a</code></pre>\u000a\u000a<p>While this is the most complicated option, calling <code>to_dict(instance)</code> gives us exactly the desired result:</p>\u000a\u000a<pre><code>{'created': datetime.datetime(2015, 3, 16, 21, 34, 14, 926738, tzinfo=&lt;UTC&gt;),\u000a u'id': 1,\u000a 'reference1': 1,\u000a 'reference2': [1],\u000a 'value': 1,\u000a 'value2': 2}\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<h2>Bonus Round</h2>\u000a\u000a<p>If you want a django model that has a better python command-line display, have your models child class the following:</p>\u000a\u000a<pre><code>from django.db import models\u000afrom django.db.models.fields.related import ManyToManyField\u000a\u000aclass PrintableModel(models.Model):\u000a    def __repr__(self):\u000a        return str(self.to_dict())\u000a\u000a    def to_dict(self):\u000a        opts = self._meta\u000a        data = {}\u000a        for f in opts.concrete_fields + opts.many_to_many:\u000a            if isinstance(f, ManyToManyField):\u000a                if self.pk is None:\u000a                    data[f.name] = []\u000a                else:\u000a                    data[f.name] = list(f.value_from_object(self).values_list('pk', flat=True))\u000a            else:\u000a                data[f.name] = f.value_from_object(self)\u000a        return data\u000a\u000a    class Meta:\u000a        abstract = True\u000a</code></pre>\u000a\u000a<p>So, for example, if we define our models as such:</p>\u000a\u000a<pre><code>class OtherModel(PrintableModel): pass\u000a\u000aclass SomeModel(PrintableModel):\u000a    value = models.IntegerField()\u000a    value2 = models.IntegerField(editable=False)\u000a    created = models.DateTimeField(auto_now_add=True)\u000a    reference1 = models.ForeignKey(OtherModel, related_name="ref1")\u000a    reference2 = models.ManyToManyField(OtherModel, related_name="ref2")\u000a</code></pre>\u000a\u000a<p>Calling <code>SomeModel.objects.first()</code> now gives output like this:</p>\u000a\u000a<pre><code>{'created': datetime.datetime(2015, 3, 16, 21, 34, 14, 926738, tzinfo=&lt;UTC&gt;),\u000a'value': 1, 'value2': 2, 'reference1': 1, u'id': 1, 'reference2': [1]}\u000a</code></pre>\u000a
p144
sVquestion_id
p145
I21925671
sVlast_activity_date
p146
I1476822652
sVcreation_date
p147
I1426545474
sVscore
p148
I87
sVowner
p149
(dp150
Vuser_id
p151
I2800876
sVprofile_image
p152
Vhttps://www.gravatar.com/avatar/94e79f29e946660a425b518ea6be8914?s=128&d=identicon&r=PG&f=1
p153
sVuser_type
p154
Vregistered
p155
sVreputation
p156
I6209
sVlink
p157
Vhttp://stackoverflow.com/users/2800876/zags
p158
sVaccept_rate
p159
I80
sVdisplay_name
p160
VZags
p161
ssVis_accepted
p162
I01
sVlast_edit_date
p163
I1476822652
sVanswer_id
p164
I29088221
sa(dp165
Vbody
p166
V<p>This should be possible utilizing <code>type</code>. You'll still need to define an actual method that decides this for you:</p>\u000a\u000a<pre><code>def check_positive(value):\u000a    ivalue = int(value)\u000a    if ivalue &lt;= 0:\u000a         raise argparse.ArgumentTypeError("%s is an invalid positive int value" % value)\u000a    return ivalue\u000a\u000aparser = argparse.ArgumentParser(...)\u000aparser.add_argument('foo', type=check_positive)\u000a</code></pre>\u000a\u000a<p>This is basically just an adapted example from the <code>perfect_square</code> function in the <a href="https://docs.python.org/library/argparse.html#type" rel="noreferrer">docs</a> on <code>argparse</code>.</p>\u000a
p167
sVquestion_id
p168
I14117415
sVlast_activity_date
p169
I1476042407
sVcreation_date
p170
I1357106284
sVscore
p171
I96
sVowner
p172
(dp173
Vuser_id
p174
I1085573
sVprofile_image
p175
Vhttps://i.stack.imgur.com/1a2Da.jpg?s=128&g=1
p176
sVuser_type
p177
Vregistered
p178
sVreputation
p179
I15134
sVlink
p180
Vhttp://stackoverflow.com/users/1085573/yuushi
p181
sVaccept_rate
p182
I80
sVdisplay_name
p183
VYuushi
p184
ssVis_accepted
p185
I01
sVlast_edit_date
p186
I1476042407
sVanswer_id
p187
I14117511
sa(dp188
Vbody
p189
V<p>I don't know a built-in function, but writing one like <a href="http://stackoverflow.com/a/477610/623735">this</a> shouldn't be too complicated.</p>\u000a\u000a<pre><code>def frange(x, y, jump):\u000a  while x &lt; y:\u000a    yield x\u000a    x += jump\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>As the comments mention, this could produce unpredictable results like:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; list(frange(0, 100, 0.1))[-1]\u000a99.9999999999986\u000a</code></pre>\u000a\u000a<p>To get the expected result, you can use one of the other answers in this question, or as @Tadhg mentioned, you can use <code>decimal.Decimal</code> as the <code>jump</code> argument. Make sure to initialize it with a string rather than a float.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import decimal\u000a&gt;&gt;&gt; list(frange(0, 100, decimal.Decimal('0.1')))[-1]\u000aDecimal('99.9')\u000a</code></pre>\u000a\u000a<p>Or even:</p>\u000a\u000a<pre><code>import decimal\u000a\u000adef drange(x, y, jump):\u000a  while x &lt; y:\u000a    yield float(x)\u000a    x += decimal.Decimal(jump)\u000a</code></pre>\u000a\u000a<p>And then:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; list(drange(0, 100, '0.1'))[-1]\u000a99.9\u000a</code></pre>\u000a
p190
sVquestion_id
p191
I7267226
sVlast_activity_date
p192
I1474845418
sVcreation_date
p193
I1314862561
sVscore
p194
I66
sVowner
p195
(dp196
Vuser_id
p197
I492773
sVprofile_image
p198
Vhttps://www.gravatar.com/avatar/b4c30dea4ed3e1c2efc5e877f1f3c971?s=128&d=identicon&r=PG
p199
sVuser_type
p200
Vregistered
p201
sVreputation
p202
I12514
sVlink
p203
Vhttp://stackoverflow.com/users/492773/kichik
p204
sVdisplay_name
p205
Vkichik
p206
ssVis_accepted
p207
I01
sVlast_edit_date
p208
I1474845418
sVanswer_id
p209
I7267280
sa(dp210
Vbody
p211
V<pre><code>x[index] if len(x) &gt; index else default\u000a</code></pre>\u000a\u000a<p>to support negative indices we can use:</p>\u000a\u000a<pre><code>x[index] if -len(l) &lt;= index &lt; len(l) else default\u000a</code></pre>\u000a
p212
sVquestion_id
p213
I2492087
sVlast_activity_date
p214
I1469229989
sVcreation_date
p215
I1269260328
sVscore
p216
I68
sVowner
p217
(dp218
Vuser_id
p219
I98494
sVprofile_image
p220
Vhttps://www.gravatar.com/avatar/c09be62155d4c437c7bfafff9b38aaa0?s=128&d=identicon&r=PG
p221
sVuser_type
p222
Vregistered
p223
sVreputation
p224
I23051
sVlink
p225
Vhttp://stackoverflow.com/users/98494/gruszczy
p226
sVaccept_rate
p227
I90
sVdisplay_name
p228
Vgruszczy
p229
ssVis_accepted
p230
I01
sVlast_edit_date
p231
I1469229989
sVanswer_id
p232
I2492093
sa(dp233
Vbody
p234
V<p>If you're splitting into just two parts (like in your example) you can use <a href="https://docs.python.org/3.5/library/stdtypes.html#str.partition"><code>str.partition()</code></a> to get a guaranteed argument unpacking size of 3: </p>\u000a\u000a<pre><code>&gt;&gt;&gt; a, sep, b = "foo".partition(":")\u000a&gt;&gt;&gt; a, sep, b\u000a('foo', '', '')\u000a</code></pre>\u000a\u000a<p><code>str.partition()</code> always returns a 3-tuple, whether the separator is found or not.</p>\u000a\u000a<p>Another alternative for Python 3 is to use extended unpacking, as described in <a href="http://stackoverflow.com/a/38149677/244297">@cdarke's answer</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a, *b = "foo".split(":")\u000a&gt;&gt;&gt; a, b\u000a('foo', [])\u000a</code></pre>\u000a\u000a<p>This assigns the first split item to <code>a</code> and the list of remaining items (if any) to <code>b</code>.</p>\u000a
p235
sVquestion_id
p236
I38149470
sVlast_activity_date
p237
I1467531421
sVcreation_date
p238
I1467388322
sVscore
p239
I105
sVowner
p240
(dp241
Vuser_id
p242
I244297
sVprofile_image
p243
Vhttps://www.gravatar.com/avatar/0e726125e86b084ffec695e845b360b7?s=128&d=identicon&r=PG
p244
sVuser_type
p245
Vregistered
p246
sVreputation
p247
I62922
sVlink
p248
Vhttp://stackoverflow.com/users/244297/eugene-y
p249
sVaccept_rate
p250
I98
sVdisplay_name
p251
Veugene y
p252
ssVis_accepted
p253
I01
sVlast_edit_date
p254
I1467531421
sVanswer_id
p255
I38149500
sa(dp256
Vbody
p257
V<p>Actually, it is as simple as setting <code>major</code> and <code>minor</code> separately:</p>\u000a\u000a<pre><code>In [9]: plot([23, 456, 676, 89, 906, 34, 2345])\u000aOut[9]: [&lt;matplotlib.lines.Line2D at 0x6112f90&gt;]\u000a\u000aIn [10]: yscale('log')\u000a\u000aIn [11]: grid(b=True, which='major', color='b', linestyle='-')\u000a\u000aIn [12]: grid(b=True, which='minor', color='r', linestyle='--')\u000a</code></pre>\u000a\u000a<p>The gotcha with minor grids is that you have to have minor tick marks turned on too.  In the above code this is done by <code>yscale('log')</code>, but it can also be done with <code>plt.minorticks_on()</code>.</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/C0Jen.png" alt="enter image description here"></p>\u000a
p258
sVquestion_id
p259
I9127434
sVlast_activity_date
p260
I1462544859
sVcreation_date
p261
I1328448460
sVscore
p262
I97
sVowner
p263
(dp264
Vuser_id
p265
I308903
sVprofile_image
p266
Vhttps://www.gravatar.com/avatar/712ac24edc67b5e789ed86dcc11ca6b9?s=128&d=identicon&r=PG
p267
sVuser_type
p268
Vregistered
p269
sVreputation
p270
I39587
sVlink
p271
Vhttp://stackoverflow.com/users/308903/joaquin
p272
sVaccept_rate
p273
I89
sVdisplay_name
p274
Vjoaquin
p275
ssVis_accepted
p276
I01
sVlast_edit_date
p277
I1462544859
sVanswer_id
p278
I9149619
sa(dp279
Vbody
p280
V<p>Specify the keyword args <code>linestyle</code> and/or <code>marker</code> in your call to <code>plot</code>.</p>\u000a\u000a<p>For example, using a dashed line and blue circle markers: </p>\u000a\u000a<pre><code>plt.plot(range(10), linestyle='--', marker='o', color='b')\u000a</code></pre>\u000a\u000a<p>A shortcut call for the same thing:</p>\u000a\u000a<pre><code>plt.plot(range(10), '--bo')\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/eO86T.png" alt="example1"></p>\u000a\u000a<p>Here is a list of the possible line and marker styles: </p>\u000a\u000a<pre><code>================    ===============================\u000acharacter           description\u000a================    ===============================\u000a   -                solid line style\u000a   --               dashed line style\u000a   -.               dash-dot line style\u000a   :                dotted line style\u000a   .                point marker\u000a   ,                pixel marker\u000a   o                circle marker\u000a   v                triangle_down marker\u000a   ^                triangle_up marker\u000a   &lt;                triangle_left marker\u000a   &gt;                triangle_right marker\u000a   1                tri_down marker\u000a   2                tri_up marker\u000a   3                tri_left marker\u000a   4                tri_right marker\u000a   s                square marker\u000a   p                pentagon marker\u000a   *                star marker\u000a   h                hexagon1 marker\u000a   H                hexagon2 marker\u000a   +                plus marker\u000a   x                x marker\u000a   D                diamond marker\u000a   d                thin_diamond marker\u000a   |                vline marker\u000a   _                hline marker\u000a================    ===============================\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><em>edit:</em>  with an example of marking an arbitrary subset of points, as requested in the comments:</p>\u000a\u000a<pre><code>import numpy as np\u000aimport matplotlib.pyplot as plt\u000a\u000axs = np.linspace(-np.pi, np.pi, 30)\u000ays = np.sin(xs)\u000amarkers_on = [12, 17, 18, 19]\u000aplt.plot(xs, ys, '-gD', markevery=markers_on)\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><a href="https://i.stack.imgur.com/pE4Bh.png" rel="noreferrer"><img src="https://i.stack.imgur.com/pE4Bh.png" alt="example2"></a></p>\u000a\u000a<p>This last example using the <code>markevery</code> kwarg is possible in since 1.4+, due to the merge of <a href="https://github.com/matplotlib/matplotlib/pull/2662" rel="noreferrer">this feature branch</a>.  If you are stuck on an older version of matplotlib, you can still achieve the result by overlaying a scatterplot on the line plot.  See the <a href="http://stackoverflow.com/posts/8409110/revisions">edit history</a> for more details.  </p>\u000a
p281
sVquestion_id
p282
I8409095
sVlast_activity_date
p283
I1462219770
sVcreation_date
p284
I1323219465
sVscore
p285
I130
sVowner
p286
(dp287
Vuser_id
p288
I674039
sVprofile_image
p289
Vhttps://i.stack.imgur.com/leoFi.gif?s=128&g=1
p290
sVuser_type
p291
Vregistered
p292
sVreputation
p293
I97604
sVlink
p294
Vhttp://stackoverflow.com/users/674039/wim
p295
sVaccept_rate
p296
I95
sVdisplay_name
p297
Vwim
p298
ssVis_accepted
p299
I01
sVlast_edit_date
p300
I1462219770
sVanswer_id
p301
I8409110
sa(dp302
Vbody
p303
V<p>In Python 2.x <code>print</code> is actually a special statement and not a function*.</p>\u000a\u000a<p>This is also why it can't be used like: <code>lambda x: print x</code></p>\u000a\u000a<p>Note that <code>(expr)</code> does not create a Tuple (it results in <code>expr</code>), but <code>,</code> does. This likely results in the confusion between <code>print (x)</code> and <code>print (x, y)</code> in Python 2.7</p>\u000a\u000a<pre><code>(1)   # 1 -- no tuple Mister!\u000a(1,)  # (1)\u000a(1,2) # (1,2)\u000a1,2   # 1 2 -- no tuple and no parenthesis :) [See below for print caveat.]\u000a</code></pre>\u000a\u000a<p>However, since <code>print</code> is a <em>special syntax statement/grammar construct</em> in Python 2.x then, without the parenthesis, it treats the <code>,</code>'s in a special manner - and <em>does not</em> create a Tuple. This special treatment of the <code>print</code> statement enables it to act differently if there is a trailing <code>,</code> or not.</p>\u000a\u000a<p>Happy coding.</p>\u000a\u000a<hr>\u000a\u000a<p>*This <code>print</code> behavior in Python 2 can be changed to that of Python 3:</p>\u000a\u000a<pre><code>from __future__ import print_function\u000a</code></pre>\u000a
p304
sVquestion_id
p305
I6182964
sVlast_activity_date
p306
I1460912444
sVcreation_date
p307
I1306815902
sVscore
p308
I82
sVowner
p309
(dp310
Vdisplay_name
p311
Vuser166390
p312
sVuser_type
p313
Vdoes_not_exist
p314
ssVis_accepted
p315
I01
sVlast_edit_date
p316
I1460912444
sVanswer_id
p317
I6183002
sa(dp318
Vbody
p319
V<p>It seems that your configuration is using the <code>print</code> option for <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.seterr.html" rel="noreferrer"><code>numpy.seterr</code></a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import numpy as np\u000a&gt;&gt;&gt; np.array([1])/0   #'warn' mode\u000a__main__:1: RuntimeWarning: divide by zero encountered in divide\u000aarray([0])\u000a&gt;&gt;&gt; np.seterr(all='print')\u000a{'over': 'warn', 'divide': 'warn', 'invalid': 'warn', 'under': 'ignore'}\u000a&gt;&gt;&gt; np.array([1])/0   #'print' mode\u000aWarning: divide by zero encountered in divide\u000aarray([0])\u000a</code></pre>\u000a\u000a<p>This means that the warning you see is <strong>not</strong> a real warning, but it's just some characters printed to <code>stdout</code>(see the documentation for <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.seterr.html" rel="noreferrer"><code>seterr</code></a>). If you want to catch it you can:</p>\u000a\u000a<ol>\u000a<li>Use <code>numpy.seterr(all='raise')</code> which will directly raise the exception. This however changes the behaviour of all the operations, so it's a pretty big change in behaviour.</li>\u000a<li>Use <code>numpy.seterr(all='warn')</code>, which will transform the printed warning in a real warning and you'll be able to use the above solution to localize this change in behaviour.</li>\u000a</ol>\u000a\u000a<p>Once you actually have a warning, you can use the <code>warnings</code> module to control how the warnings should be treated:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import warnings\u000a&gt;&gt;&gt; \u000a&gt;&gt;&gt; warnings.filterwarnings('error')\u000a&gt;&gt;&gt; \u000a&gt;&gt;&gt; try:\u000a...     warnings.warn(Warning())\u000a... except Warning:\u000a...     print 'Warning was raised as an exception!'\u000a... \u000aWarning was raised as an exception!\u000a</code></pre>\u000a\u000a<p>Read carefully the documentation for <a href="http://docs.python.org/2/library/warnings.html#warnings.filterwarnings" rel="noreferrer"><code>filterwarnings</code></a> since it allows you to filter only the warning you want and has other options. I'd also consider looking at <a href="http://docs.python.org/2/library/warnings.html#warnings.catch_warnings" rel="noreferrer"><code>catch_warnings</code></a> which is a context manager which automatically resets the original <code>filterwarnings</code> function:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import warnings\u000a&gt;&gt;&gt; with warnings.catch_warnings():\u000a...     warnings.filterwarnings('error')\u000a...     try:\u000a...         warnings.warn(Warning())\u000a...     except Warning: print 'Raised!'\u000a... \u000aRaised!\u000a&gt;&gt;&gt; try:\u000a...     warnings.warn(Warning())\u000a... except Warning: print 'Not raised!'\u000a... \u000a__main__:2: Warning: \u000a</code></pre>\u000a
p320
sVquestion_id
p321
I15933741
sVlast_activity_date
p322
I1460306079
sVcreation_date
p323
I1365620030
sVscore
p324
I94
sVowner
p325
(dp326
Vuser_id
p327
I510937
sVprofile_image
p328
Vhttps://www.gravatar.com/avatar/70b13a9ae1aae1ca1aa6ac8dab4643f2?s=128&d=identicon&r=PG
p329
sVuser_type
p330
Vregistered
p331
sVreputation
p332
I50485
sVlink
p333
Vhttp://stackoverflow.com/users/510937/bakuriu
p334
sVaccept_rate
p335
I82
sVdisplay_name
p336
VBakuriu
p337
ssVis_accepted
p338
I01
sVlast_edit_date
p339
I1460306079
sVanswer_id
p340
I15934081
sa(dp341
Vbody
p342
V<p>You could serialise the function bytecode and then reconstruct it on the caller.  The <a href="https://docs.python.org/3/library/marshal.html" rel="noreferrer">marshal</a> module can be used to serialise code objects, which can then be reassembled into a function.  ie:</p>\u000a\u000a<pre><code>import marshal\u000adef foo(x): return x*x\u000acode_string = marshal.dumps(foo.func_code)\u000a</code></pre>\u000a\u000a<p>Then in the remote process (after transferring code_string):</p>\u000a\u000a<pre><code>import marshal, types\u000a\u000acode = marshal.loads(code_string)\u000afunc = types.FunctionType(code, globals(), "some_func_name")\u000a\u000afunc(10)  # gives 100\u000a</code></pre>\u000a\u000a<p>A few caveats:</p>\u000a\u000a<ul>\u000a<li><p>marshal's format (any python bytecode for that matter) may not be compatable between major python versions.</p></li>\u000a<li><p>Will only work for cpython implementation.</p></li>\u000a<li><p>If the function references globals (including imported modules, other functions etc) that you need to pick up, you'll need to serialise these too, or recreate them on the remote side.  My example just gives it the remote process's global namespace.</p></li>\u000a<li><p>You'll probably need to do a bit more to support more complex cases, like closures or generator functions.</p></li>\u000a</ul>\u000a
p343
sVquestion_id
p344
I1253528
sVlast_activity_date
p345
I1457103581
sVcreation_date
p346
I1249894702
sVscore
p347
I96
sVowner
p348
(dp349
Vuser_id
p350
I9493
sVprofile_image
p351
Vhttps://www.gravatar.com/avatar/7895e5fdbabe3fc5e09272bb602257d7?s=128&d=identicon&r=PG
p352
sVuser_type
p353
Vregistered
p354
sVreputation
p355
I73471
sVlink
p356
Vhttp://stackoverflow.com/users/9493/brian
p357
sVdisplay_name
p358
VBrian
p359
ssVis_accepted
p360
I01
sVlast_edit_date
p361
I1457103581
sVanswer_id
p362
I1253813
sa(dp363
Vbody
p364
V<p><a href="https://docs.python.org/2/library/functions.html#iter" rel="noreferrer"><code>iter()</code></a> is an iterator over a sequence. <code>[x] * n</code> produces a list containing <code>n</code> quantity of <code>x</code>, i.e. a list of length <code>n</code>, where each element is <code>x</code>. <code>*arg</code> unpacks a sequence into arguments for a function call. Therefore you're passing the same iterator 3 times to <a href="https://docs.python.org/2/library/functions.html#zip" rel="noreferrer"><code>zip()</code></a>, and it pulls an item from the iterator each time.</p>\u000a\u000a<pre><code>x = iter([1,2,3,4,5,6,7,8,9])\u000aprint zip(x, x, x)\u000a</code></pre>\u000a
p365
sVquestion_id
p366
I2233204
sVlast_activity_date
p367
I1449537437
sVcreation_date
p368
I1265757310
sVscore
p369
I72
sVowner
p370
(dp371
Vuser_id
p372
I20862
sVprofile_image
p373
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p374
sVuser_type
p375
Vregistered
p376
sVreputation
p377
I481018
sVlink
p378
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p379
sVaccept_rate
p380
I60
sVdisplay_name
p381
VIgnacio Vazquez-Abrams
p382
ssVis_accepted
p383
I01
sVlast_edit_date
p384
I1449537437
sVanswer_id
p385
I2233247
sa(dp386
Vbody
p387
V<pre><code>for x in y[:-1]\u000a</code></pre>\u000a\u000a<p>If <code>y</code> is a generator, then the above will not work.</p>\u000a
p388
sVquestion_id
p389
I914715
sVlast_activity_date
p390
I1442998028
sVcreation_date
p391
I1243415076
sVscore
p392
I158
sVowner
p393
(dp394
Vuser_id
p395
I8297
sVprofile_image
p396
Vhttps://www.gravatar.com/avatar/f18d0b80e1c47c64fd300c1895279099?s=128&d=identicon&r=PG
p397
sVuser_type
p398
Vregistered
p399
sVreputation
p400
I11839
sVlink
p401
Vhttp://stackoverflow.com/users/8297/freespace
p402
sVdisplay_name
p403
Vfreespace
p404
ssVis_accepted
p405
I01
sVlast_edit_date
p406
I1442998028
sVanswer_id
p407
I914733
sa(dp408
Vbody
p409
V<p>As of Django 1.8 refreshing objects is built in. <a href="https://docs.djangoproject.com/en/1.8/ref/models/instances/#refreshing-objects-from-database">Link to docs</a>.</p>\u000a\u000a<pre class="lang-python prettyprint-override"><code>def test_update_result(self):\u000a    obj = MyModel.objects.create(val=1)\u000a    MyModel.objects.filter(pk=obj.pk).update(val=F('val') + 1)\u000a    # At this point obj.val is still 1, but the value in the database\u000a    # was updated to 2. The object's updated value needs to be reloaded\u000a    # from the database.\u000a    obj.refresh_from_db()\u000a    self.assertEqual(obj.val, 2)\u000a</code></pre>\u000a
p410
sVquestion_id
p411
I4377861
sVlast_activity_date
p412
I1436890970
sVcreation_date
p413
I1436890970
sVscore
p414
I94
sVowner
p415
(dp416
Vuser_id
p417
I453405
sVprofile_image
p418
Vhttps://www.gravatar.com/avatar/c3257e950fbaf8c542cfafa92075f81e?s=128&d=identicon&r=PG
p419
sVuser_type
p420
Vregistered
p421
sVreputation
p422
I3017
sVlink
p423
Vhttp://stackoverflow.com/users/453405/tim-fletcher
p424
sVaccept_rate
p425
I87
sVdisplay_name
p426
VTim Fletcher
p427
ssVis_accepted
p428
I01
sVanswer_id
p429
I31412166
sa(dp430
Vbody
p431
V<p>Assuming you have a fixture file in <code>&lt;yourapp&gt;/fixtures/initial_data.json</code></p>\u000a\u000a<ol>\u000a<li><p>Create your empty migration:</p>\u000a\u000a<p>In Django 1.7:</p>\u000a\u000a<pre><code>python manage.py makemigrations --empty &lt;yourapp&gt;\u000a</code></pre>\u000a\u000a<p>In Django 1.8+, you can provide a name:</p>\u000a\u000a<pre><code>python manage.py makemigrations --empty &lt;yourapp&gt; --name load_intial_data\u000a</code></pre></li>\u000a<li><p>Edit your migration file <code>&lt;yourapp&gt;/migrations/0002_auto_xxx.py</code></p>\u000a\u000a<p>2.1. Custom implementation, inspired by Django' <code>loaddata</code> (initial answer):</p>\u000a\u000a<pre><code>import os\u000afrom sys import path\u000afrom django.core import serializers\u000a\u000afixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))\u000afixture_filename = 'initial_data.json'\u000a\u000adef load_fixture(apps, schema_editor):\u000a    fixture_file = os.path.join(fixture_dir, fixture_filename)\u000a\u000a    fixture = open(fixture_file, 'rb')\u000a    objects = serializers.deserialize('json', fixture, ignorenonexistent=True)\u000a    for obj in objects:\u000a        obj.save()\u000a    fixture.close()\u000a\u000adef unload_fixture(apps, schema_editor):\u000a    "Brutally deleting all entries for this model..."\u000a\u000a    MyModel = apps.get_model("yourapp", "ModelName")\u000a    MyModel.objects.all().delete()\u000a\u000aclass Migration(migrations.Migration):  \u000a\u000a    dependencies = [\u000a        ('yourapp', '0001_initial'),\u000a    ]\u000a\u000a    operations = [\u000a        migrations.RunPython(load_fixture, reverse_code=unload_fixture),\u000a    ]\u000a</code></pre>\u000a\u000a<p>2.2. A simpler solution for <code>load_fixture</code> (per @juliocesar's suggestion):</p>\u000a\u000a<pre><code>from django.core.management import call_command\u000a\u000afixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))\u000afixture_filename = 'initial_data.json'\u000a\u000adef load_fixture(apps, schema_editor):\u000a    fixture_file = os.path.join(fixture_dir, fixture_filename)\u000a    call_command('loaddata', fixture_file) \u000a</code></pre>\u000a\u000a<p><em>Useful if you want to use a custom directory.</em></p>\u000a\u000a<p>2.3. <strong>Simplest:</strong> calling <code>loaddata</code> with <code>app_label</code> will load fixtures from the <code>&lt;yourapp&gt;</code>'s <code>fixtures</code> dir automatically :            </p>\u000a\u000a<pre><code>from django.core.management import call_command\u000a\u000afixture = 'initial_data'\u000a\u000adef load_fixture(apps, schema_editor):\u000a    call_command('loaddata', fixture, app_label='yourapp') \u000a</code></pre>\u000a\u000a<p><em>If you don't specify <code>app_label</code>, loaddata will try to load <code>fixture</code> filename from <strong>all</strong> apps fixtures directories (which you probably don't want).</em> </p></li>\u000a<li><p>Run it</p>\u000a\u000a<pre><code>python manage.py migrate &lt;yourapp&gt;\u000a</code></pre></li>\u000a</ol>\u000a
p432
sVquestion_id
p433
I25960850
sVlast_activity_date
p434
I1436460615
sVcreation_date
p435
I1411414694
sVscore
p436
I70
sVowner
p437
(dp438
Vuser_id
p439
I1902874
sVprofile_image
p440
Vhttps://www.gravatar.com/avatar/32d73cd88f3e322e14713f9410b4f010?s=128&d=identicon&r=PG
p441
sVuser_type
p442
Vregistered
p443
sVreputation
p444
I1144
sVlink
p445
Vhttp://stackoverflow.com/users/1902874/n-o
p446
sVdisplay_name
p447
Vn__o
p448
ssVis_accepted
p449
I01
sVlast_edit_date
p450
I1436460615
sVanswer_id
p451
I25981899
sa(dp452
Vbody
p453
V<p>My general rule is this - <em>is the operation performed on the object or by the object?</em> </p>\u000a\u000a<p>if it is done by the object, it should be a member operation. If it could apply to other things too, or is done by something else to the object then it should be a function (or perhaps a member of something else).</p>\u000a\u000a<p>When introducing programming, it is traditional (albeit implementation incorrect) to describe objects in terms of real-world objects such as cars. You mention a duck, so let's go with that.</p>\u000a\u000a<pre><code>class duck: \u000a    def __init__(self):pass\u000a    def eat(self, o): pass \u000a    def crap(self) : pass\u000a    def die(self)\u000a    ....\u000a</code></pre>\u000a\u000a<p>In the context of the "objects are real things" analogy, it is "correct" to add a class method for anything which the object can do. So say I want to kill off a duck, do I add a\u000a.kill() to the duck? No... as far as I know animals do not commit suicide. Therefore if I want to kill a duck I should do this:</p>\u000a\u000a<pre><code>def kill(o):\u000a    if o is duck:\u000a        o.die()\u000a    elif o is dog:\u000a        print "WHY????"\u000a        o.die()\u000a    elif o is nyancat:\u000a        raise Exception("NYAN "*9001)\u000a    else:\u000a       print "can't kill it."\u000a</code></pre>\u000a\u000a<p>Moving away from this analogy, why do we use methods and classes? Because we want to contain data and hopefully structure our code in a manner such that it will be reusable and extensible in the future. This brings us to the notion of encapsulation which is so dear to OO design. </p>\u000a\u000a<p>The encapsulation principal is really what this comes down to: as a designer you should hide everything about the implementation and class internals which it is not absolutely necessarily for any user or other developer to access. Because we deal with instances of classes, this reduces to "what operations are crucial <strong>on this instance</strong>". If an operation is not instance specific, then it should not be a member function.</p>\u000a\u000a<p><strong>TL;DR</strong>:\u000awhat @Bryan said. If it operates on an instance and needs to access data which is internal to the class instance, it should be a member function.</p>\u000a
p454
sVquestion_id
p455
I8108688
sVlast_activity_date
p456
I1436070977
sVcreation_date
p457
I1321146848
sVscore
p458
I51
sVowner
p459
(dp460
Vuser_id
p461
I615234
sVprofile_image
p462
Vhttps://i.stack.imgur.com/Lp8QH.jpg?s=128&g=1
p463
sVuser_type
p464
Vregistered
p465
sVreputation
p466
I1747
sVlink
p467
Vhttp://stackoverflow.com/users/615234/arrdem
p468
sVdisplay_name
p469
Varrdem
p470
ssVis_accepted
p471
I01
sVlast_edit_date
p472
I1436070977
sVanswer_id
p473
I8108821
sa(dp474
Vbody
p475
V<p>You need to pass in a sequence, but you forgot the comma to make your parameters a tuple:</p>\u000a\u000a<pre><code>cursor.execute('INSERT INTO images VALUES(?)', (img,))\u000a</code></pre>\u000a\u000a<p>Without the comma, <code>(img)</code> is just a grouped expression, not a tuple, and thus the <code>img</code> string is treated as the input sequence. If that string is 74 characters long, then Python sees that as 74 separate bind values, each one character long.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; len(img)\u000a74\u000a&gt;&gt;&gt; len((img,))\u000a1\u000a</code></pre>\u000a\u000a<p>If you find it easier to read, you can also use a list literal:</p>\u000a\u000a<pre><code>cursor.execute('INSERT INTO images VALUES(?)', [img])\u000a</code></pre>\u000a
p476
sVquestion_id
p477
I16856647
sVlast_activity_date
p478
I1435254191
sVcreation_date
p479
I1370001393
sVscore
p480
I148
sVowner
p481
(dp482
Vuser_id
p483
I100297
sVprofile_image
p484
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p485
sVuser_type
p486
Vmoderator
p487
sVreputation
p488
I554897
sVlink
p489
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p490
sVdisplay_name
p491
VMartijn Pieters
p492
ssVis_accepted
p493
I01
sVlast_edit_date
p494
I1435254191
sVanswer_id
p495
I16856730
sa(dp496
Vbody
p497
V<p><a href="http://stackoverflow.com/a/11015381/577088">Unwind</a> is essentially correct that there are many different ways to implement a trie; and for a large, scalable trie, nested dictionaries might become cumbersome -- or at least space inefficient. But since you're just getting started, I think that's the easiest approach; you could code up a simple <code>trie</code> in just a few lines. First, a function to construct the trie:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; _end = '_end_'\u000a&gt;&gt;&gt; \u000a&gt;&gt;&gt; def make_trie(*words):\u000a...     root = dict()\u000a...     for word in words:\u000a...         current_dict = root\u000a...         for letter in word:\u000a...             current_dict = current_dict.setdefault(letter, {})\u000a...         current_dict[_end] = _end\u000a...     return root\u000a... \u000a&gt;&gt;&gt; make_trie('foo', 'bar', 'baz', 'barz')\u000a{'b': {'a': {'r': {'_end_': '_end_', 'z': {'_end_': '_end_'}}, \u000a             'z': {'_end_': '_end_'}}}, \u000a 'f': {'o': {'o': {'_end_': '_end_'}}}}\u000a</code></pre>\u000a\u000a<p>If you're not familiar with <code>setdefault</code>, it simply looks up a key in the dictionary (here, <code>letter</code> or <code>_end</code>). If the key is present, it returns the associated value; if not, it assigns a default value to that key and returns the value (<code>{}</code> or <code>_end</code>). (It's like a version of <code>get</code> that also updates the dictionary.) </p>\u000a\u000a<p>Next, a function to test whether the word is in the trie. This could be more terse, but I'm leaving it verbose so that the logic is clear:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def in_trie(trie, word):\u000a...     current_dict = trie\u000a...     for letter in word:\u000a...         if letter in current_dict:\u000a...             current_dict = current_dict[letter]\u000a...         else:\u000a...             return False\u000a...     else:\u000a...         if _end in current_dict:\u000a...             return True\u000a...         else:\u000a...             return False\u000a... \u000a&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'baz')\u000aTrue\u000a&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'barz')\u000aTrue\u000a&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'barzz')\u000aFalse\u000a&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'bart')\u000aFalse\u000a&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'ba')\u000aFalse\u000a</code></pre>\u000a\u000a<p>I'll leave insertion and removal to you as an exercise.</p>\u000a\u000a<p>Of course, Unwind's suggestion wouldn't be much harder. There might be a slight speed disadvantage in that finding the correct sub-node would require a linear search. But the search would be limited to the number of possible characters -- 27 if we include <code>_end</code>. Also, there's nothing to be gained by creating a massive list of nodes and accessing them by index as he suggests; you might as well just nest the lists.</p>\u000a\u000a<p>Finally, I'll add that creating a DAWG would be a bit more complex, because you have to detect situations in which your current word shares a suffix with another word in the structure. In fact, this can get rather complex, depending on how you want to structure the DAWG! You may have to learn some stuff about <a href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein</a> <a href="http://stackoverflow.com/q/10638597/577088">distance</a> to get it right. </p>\u000a
p498
sVquestion_id
p499
I11015320
sVlast_activity_date
p500
I1434973733
sVcreation_date
p501
I1339595768
sVscore
p502
I91
sVowner
p503
(dp504
Vuser_id
p505
I577088
sVprofile_image
p506
Vhttps://i.stack.imgur.com/5UZyo.jpg?s=128&g=1
p507
sVuser_type
p508
Vregistered
p509
sVreputation
p510
I67900
sVlink
p511
Vhttp://stackoverflow.com/users/577088/senderle
p512
sVdisplay_name
p513
Vsenderle
p514
ssVis_accepted
p515
I01
sVlast_edit_date
p516
I1434973733
sVanswer_id
p517
I11016430
sa(dp518
Vbody
p519
V<p>Looks like OpenGL is trying to report some error on Win2003, however you've not configured your system where to output logging info.</p>\u000a\u000a<p>You can add the following to the beginning of your program and you'll see details of the error in stderr.</p>\u000a\u000a<pre><code>import logging\u000alogging.basicConfig()\u000a</code></pre>\u000a\u000a<p>Checkout documentation on <a href="https://docs.python.org/2/library/logging.html" rel="noreferrer">logging</a> module to get more config info, conceptually it's similar to log4J.</p>\u000a
p520
sVquestion_id
p521
I345991
sVlast_activity_date
p522
I1432272663
sVcreation_date
p523
I1228583914
sVscore
p524
I174
sVowner
p525
(dp526
Vuser_id
p527
I52490
sVprofile_image
p528
Vhttps://www.gravatar.com/avatar/11118ae56897b53161f737a0131d865b?s=128&d=identicon&r=PG
p529
sVuser_type
p530
Vregistered
p531
sVreputation
p532
I8016
sVlink
p533
Vhttp://stackoverflow.com/users/52490/kozyarchuk
p534
sVaccept_rate
p535
I75
sVdisplay_name
p536
VKozyarchuk
p537
ssVis_accepted
p538
I01
sVlast_edit_date
p539
I1432272663
sVanswer_id
p540
I346501
sa(dp541
Vbody
p542
V<p>No big deal in your above snippet, but imagine a function with a few more arguments and quite a few more lines of code. Then you decide to rename your <code>data</code> argument as <code>yadda</code> but miss one of the places it is used in the function's body... Now <code>data</code> refers to the global, and you start having weird behaviour - where you would have a much more obvious <code>NameError</code> if you didn't have a global name <code>data</code>. </p>\u000a\u000a<p>Also remember that in Python everything is an object (including modules, classes and functions) so there's no distinct namespaces for functions, modules or classes. Another scenario is that you import function <code>foo</code> at the top of your module, and use it somewhere in your function body. Then you add a new argument to your function and named it - bad luck - <code>foo</code>. </p>\u000a\u000a<p>Finally, built-in functions and types also live in the same namespace and can be shadowed the same way.</p>\u000a\u000a<p>None of this is much of a problem if you have short functions, good naming and a decent unittest coverage, but well, sometimes you have to maintain less than perfect code and being warned about such possible issues might help.</p>\u000a
p543
sVquestion_id
p544
I20125172
sVlast_activity_date
p545
I1431286016
sVcreation_date
p546
I1385049416
sVscore
p547
I86
sVowner
p548
(dp549
Vuser_id
p550
I41316
sVprofile_image
p551
Vhttps://www.gravatar.com/avatar/e2c31ca37c09ab42763f690e0d1355d7?s=128&d=identicon&r=PG
p552
sVuser_type
p553
Vregistered
p554
sVreputation
p555
I27434
sVlink
p556
Vhttp://stackoverflow.com/users/41316/bruno-desthuilliers
p557
sVdisplay_name
p558
Vbruno desthuilliers
p559
ssVis_accepted
p560
I01
sVlast_edit_date
p561
I1431286016
sVanswer_id
p562
I20125739
sa(dp563
Vbody
p564
V<p>Use either <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.item.html"><code>a.item()</code></a> or <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.asscalar.html"><code>np.asscalar(a)</code></a> to convert most NumPy values to a native Python type:</p>\u000a\u000a<pre><code>import numpy as np\u000a# examples using a.item()\u000atype(np.float32(0).item()) # &lt;type 'float'&gt;\u000atype(np.float64(0).item()) # &lt;type 'float'&gt;\u000atype(np.uint32(0).item())  # &lt;type 'long'&gt;\u000a# examples using np.asscalar(a)\u000atype(np.asscalar(np.int16(0)))   # &lt;type 'int'&gt;\u000atype(np.asscalar(np.cfloat(0)))  # &lt;type 'complex'&gt;\u000atype(np.asscalar(np.datetime64(0)))  # &lt;type 'datetime.datetime'&gt;\u000atype(np.asscalar(np.timedelta64(0))) # &lt;type 'datetime.timedelta'&gt;\u000a...\u000a</code></pre>\u000a\u000a<p>Read more <a href="http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html">in the NumPy manual</a>. For the curious, to build a table of conversions for your system:</p>\u000a\u000a<pre><code>for name in dir(np):\u000a    obj = getattr(np, name)\u000a    if hasattr(obj, 'dtype'):\u000a        try:\u000a            npn = obj(0)\u000a            nat = npn.item()\u000a            print('%s (%r) -&gt; %s'%(name, npn.dtype.char, type(nat)))\u000a        except:\u000a            pass\u000a</code></pre>\u000a\u000a<p>There are a few NumPy types that have no native Python equivalent on some systems, including: <code>clongdouble</code>, <code>clongfloat</code>, <code>complex192</code>, <code>complex256</code>, <code>float128</code>, <code>longcomplex</code>, <code>longdouble</code> and <code>longfloat</code>. These need to be converted to their nearest NumPy equivalent before using <code>asscalar</code>.</p>\u000a
p565
sVquestion_id
p566
I9452775
sVlast_activity_date
p567
I1412545387
sVcreation_date
p568
I1341815220
sVscore
p569
I96
sVowner
p570
(dp571
Vuser_id
p572
I327026
sVprofile_image
p573
Vhttps://www.gravatar.com/avatar/08ad5928b416f9de4bb957ac8189bf00?s=128&d=identicon&r=PG
p574
sVuser_type
p575
Vregistered
p576
sVreputation
p577
I16306
sVlink
p578
Vhttp://stackoverflow.com/users/327026/mike-t
p579
sVaccept_rate
p580
I74
sVdisplay_name
p581
VMike T
p582
ssVis_accepted
p583
I01
sVlast_edit_date
p584
I1412545387
sVanswer_id
p585
I11389998
sa(dp586
Vbody
p587
V<p>I'm not sure I understand your question. I assume you are doing something along the lines of:</p>\u000a\u000a<pre><code>import base64\u000a\u000awith open("yourfile.ext", "rb") as image_file:\u000a    encoded_string = base64.b64encode(image_file.read())\u000a</code></pre>\u000a\u000a<p>You have to open the file first of course, and read its contents - you cannot simply pass the path to the encode function.</p>\u000a\u000a<p><strong>Edit:</strong>\u000aOk, here is an update after you have edited your original question.</p>\u000a\u000a<p>First of all, remember to use raw strings (prefix the string with 'r') when using path delimiters on Windows, to prevent accidentally hitting an escape character. Second, PIL's Image.open either accepts a filename, or a file-like (that is, the object has to provide read, seek and tell methods). </p>\u000a\u000a<p>That being said, you can use cStringIO to create such an object from a memory buffer:</p>\u000a\u000a<pre><code>import cStringIO\u000aimport PIL.Image\u000a\u000a# assume data contains your decoded image\u000afile_like = cStringIO.StringIO(data)\u000a\u000aimg = PIL.Image.open(file_like)\u000aimg.show()\u000a</code></pre>\u000a
p588
sVquestion_id
p589
I3715493
sVlast_activity_date
p590
I1406836420
sVcreation_date
p591
I1284535885
sVscore
p592
I130
sVowner
p593
(dp594
Vuser_id
p595
I407438
sVprofile_image
p596
Vhttps://www.gravatar.com/avatar/562e6f72fbcff8bfe7a664e0eb068bb5?s=128&d=identicon&r=PG
p597
sVuser_type
p598
Vregistered
p599
sVreputation
p600
I15693
sVlink
p601
Vhttp://stackoverflow.com/users/407438/jim-brissom
p602
sVdisplay_name
p603
VJim Brissom
p604
ssVis_accepted
p605
I01
sVlast_edit_date
p606
I1406836420
sVanswer_id
p607
I3715530
sa(dp608
Vbody
p609
V<h3>1. To get an encoding parameter in Python 2:</h3>\u000a\u000a<p>If you only need to support Python 2.6 and 2.7 you can use <a href="https://docs.python.org/2/library/io.html#io.open" rel="noreferrer"><code>io.open</code></a> instead of <code>open</code>. <code>io</code> is the new io subsystem for Python 3, and it exists in Python 2,6 ans 2.7 as well. Please be aware that in Python 2.6 (as well as 3.0) it's implemented purely in python and very slow, so if you need speed in reading files, it's not a good option.</p>\u000a\u000a<p>If you need speed, or you need to support Python 2.5 or earlier, you can use <a href="https://docs.python.org/2/library/codecs.html#codecs.open" rel="noreferrer"><code>codecs.open</code></a> instead. It also has an encoding parameter, and is quite similar to <code>io.open</code> except it handles line-endings differently.</p>\u000a\u000a<h3>2. To get a Python 3 <code>open()</code> style file handler which streams bytestrings:</h3>\u000a\u000a<pre><code>open(filename, 'rb')\u000a</code></pre>\u000a\u000a<p>Note the 'b', meaning 'bytes'.</p>\u000a
p610
sVquestion_id
p611
I10971033
sVlast_activity_date
p612
I1402491093
sVcreation_date
p613
I1339396361
sVscore
p614
I86
sVowner
p615
(dp616
Vuser_id
p617
I126214
sVprofile_image
p618
Vhttps://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=128&d=identicon&r=PG
p619
sVuser_type
p620
Vregistered
p621
sVreputation
p622
I82828
sVlink
p623
Vhttp://stackoverflow.com/users/126214/lennart-regebro
p624
sVaccept_rate
p625
I100
sVdisplay_name
p626
VLennart Regebro
p627
ssVis_accepted
p628
I01
sVlast_edit_date
p629
I1402491093
sVanswer_id
p630
I10975371
sa(dp631
Vbody
p632
V<p>The very bottom of the <a href="http://docs.python.org/dev/library/argparse.html#sub-commands" rel="noreferrer">Python docs on argparse sub-commands</a> explains how to do this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; parser = argparse.ArgumentParser()\u000a&gt;&gt;&gt; parser.add_argument('-g', '--global')\u000a&gt;&gt;&gt; subparsers = parser.add_subparsers(dest="subparser_name") # this line changed\u000a&gt;&gt;&gt; foo_parser = subparsers.add_parser('foo')\u000a&gt;&gt;&gt; foo_parser.add_argument('-c', '--count')\u000a&gt;&gt;&gt; bar_parser = subparsers.add_parser('bar')\u000a&gt;&gt;&gt; args = parser.parse_args(['-g', 'xyz', 'foo', '--count', '42'])\u000a&gt;&gt;&gt; args\u000aNamespace(count='42', global='xyz', subparser_name='foo')\u000a</code></pre>\u000a\u000a<p>You can also use the <code>set_defaults()</code> method referenced just above the example I found.</p>\u000a
p633
sVquestion_id
p634
I4575747
sVlast_activity_date
p635
I1402063286
sVcreation_date
p636
I1293916250
sVscore
p637
I116
sVowner
p638
(dp639
Vuser_id
p640
I382471
sVprofile_image
p641
Vhttps://www.gravatar.com/avatar/804ee314e1022f48ddd7d9cebe329afc?s=128&d=identicon&r=PG
p642
sVuser_type
p643
Vregistered
p644
sVreputation
p645
I17086
sVlink
p646
Vhttp://stackoverflow.com/users/382471/robert
p647
sVaccept_rate
p648
I80
sVdisplay_name
p649
Vrobert
p650
ssVis_accepted
p651
I01
sVlast_edit_date
p652
I1402063286
sVanswer_id
p653
I4575792
sa(dp654
Vbody
p655
V<p>I may have found a way to do it.</p>\u000a\u000a<p>Create a file .pythonrc</p>\u000a\u000a<pre><code># ~/.pythonrc\u000a# enable syntax completion\u000atry:\u000a    import readline\u000aexcept ImportError:\u000a    print("Module readline not available.")\u000aelse:\u000a    import rlcompleter\u000a    readline.parse_and_bind("tab: complete")\u000a</code></pre>\u000a\u000a<p>then in your .bashrc file, add</p>\u000a\u000a<pre><code>export PYTHONSTARTUP=~/.pythonrc\u000a</code></pre>\u000a\u000a<p>That seems to work.</p>\u000a
p656
sVquestion_id
p657
I246725
sVlast_activity_date
p658
I1395404137
sVcreation_date
p659
I1225286679
sVscore
p660
I116
sVowner
p661
(dp662
Vuser_id
p663
I22306
sVprofile_image
p664
Vhttps://www.gravatar.com/avatar/0ba94480bf4840a6957fa83303be919e?s=128&d=identicon&r=PG
p665
sVuser_type
p666
Vregistered
p667
sVreputation
p668
I7297
sVlink
p669
Vhttp://stackoverflow.com/users/22306/ashchristopher
p670
sVaccept_rate
p671
I79
sVdisplay_name
p672
Vashchristopher
p673
ssVis_accepted
p674
I01
sVlast_edit_date
p675
I1395404137
sVanswer_id
p676
I246779
sa(dp677
Vbody
p678
V<p>Your problem is that you <em>didn't</em> set the environment variable.</p>\u000a\u000a<p>The error clearly says this:</p>\u000a\u000a<pre><code>gyp ERR! stack Error: Can't find Python executable "python", you can set the PYTHON env variable.\u000a</code></pre>\u000a\u000a<p>And in your comment, you say you did this:</p>\u000a\u000a<pre><code>set PYTHONPATH=%PYTHONPATH%;C:\u005cMy_python_lib\u000a</code></pre>\u000a\u000a<p>That's nice, but that doesn't set the <code>PYTHON</code> variable, it sets the <code>PYTHONPATH</code> variable.</p>\u000a\u000a<hr>\u000a\u000a<p>Meanwhile, just using the <code>set</code> command only affects the current <code>cmd</code> session. If you reboot after that, as you say you did, you end up with a whole new <code>cmd</code> session that doesn't have that variable set in it.</p>\u000a\u000a<p>There are a few ways to set environment variables permanently\u2014the easiest is in the System Control Panel in XP, which is of course different in Vista, different again in 7, and different again in 8, but you can google for it.</p>\u000a\u000a<p>Alternatively, just do the <code>set</code> right before the <code>npm</code> command, without rebooting in between.</p>\u000a\u000a<hr>\u000a\u000a<p>You can test whether you've done things right by doing the exact same thing the config script is trying to do: Before running <code>npm</code>, try running <code>%PYTHON%</code>. If you've done it right, you'll get a Python interpreter (which you can immediately quit). If you get an error, you haven't done it right.</p>\u000a\u000a<hr>\u000a\u000a<p>There are two problems with this:</p>\u000a\u000a<pre><code>set PYTHON=%PYTHON%;D:\u005cPython\u000a</code></pre>\u000a\u000a<p>First, you're setting <code>PYTHON</code> to <code>;D:\u005cPython</code>. That extra semicolon is fine for a semicolon-separated list of paths, like <code>PATH</code> or <code>PYTHONPATH</code>, but not for a single value like <code>PYTHON</code>. And likewise, adding a new value to the existing value is what you want when you want to add another path to a list of paths, but not for a single value. So, you just want <code>set PYTHON=D:\u005cPython</code>.</p>\u000a\u000a<p>Second, <code>D:\u005cPython</code> is not the path to your Python interpreter. It's something like <code>D:\u005cPython\u005cPython.exe</code>, or <code>D:\u005cPython\u005cbin\u005cPython.exe</code>. Find the right path, make sure it works on its own (e.g., type <code>D:\u005cPython\u005cbin\u005cPython.exe</code> and make sure you get a Python interpreter), then set the variable and use it.</p>\u000a\u000a<hr>\u000a\u000a<p>So:</p>\u000a\u000a<pre><code>set PYTHON=D:\u005cPython\u005cbin\u005cPython.exe\u000a</code></pre>\u000a\u000a<p>Or, if you want to make it permanent, do the equivalent in the Control Panel.</p>\u000a
p679
sVquestion_id
p680
I15126050
sVlast_activity_date
p681
I1392323017
sVcreation_date
p682
I1362016839
sVscore
p683
I65
sVowner
p684
(dp685
Vuser_id
p686
I908494
sVprofile_image
p687
Vhttps://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=128&d=identicon&r=PG
p688
sVuser_type
p689
Vregistered
p690
sVreputation
p691
I178780
sVlink
p692
Vhttp://stackoverflow.com/users/908494/abarnert
p693
sVaccept_rate
p694
I25
sVdisplay_name
p695
Vabarnert
p696
ssVis_accepted
p697
I01
sVlast_edit_date
p698
I1392323017
sVanswer_id
p699
I15126180
sa(dp700
Vbody
p701
V<p>The Pythonic approach would be to use <a href="http://docs.python.org/3/library/functions.html#any" rel="noreferrer"><code>any()</code></a>:</p>\u000a\u000a<pre><code>if any(s in x for s in (a,b,c,d,e,f,g)):\u000a</code></pre>\u000a\u000a<p>From the linked documentation: </p>\u000a\u000a<blockquote>\u000a  <p><strong><code>any</code></strong>(<em>iterable</em>)</p>\u000a  \u000a  <p>Return True if any element of the <em>iterable</em> is true. If the iterable is empty, return False. Equivalent to:</p>\u000a\u000a<pre><code>def any(iterable):\u000a    for element in iterable:\u000a        if element:\u000a            return True\u000a    return False\u000a</code></pre>\u000a</blockquote>\u000a\u000a<p>Also, notice that I've used a tuple instead of a list here. If your <code>a</code>-<code>g</code> values are pre-defined, then a tuple would indeed be preferred. See: <a href="http://stackoverflow.com/questions/68630/are-tuples-more-efficient-than-lists-in-python">Are tuples more efficient than lists in Python?</a></p>\u000a
p702
sVquestion_id
p703
I19714041
sVlast_activity_date
p704
I1387310546
sVcreation_date
p705
I1383244352
sVscore
p706
I113
sVowner
p707
(dp708
Vuser_id
p709
I1357341
sVprofile_image
p710
Vhttps://i.stack.imgur.com/Vzjkd.jpg?s=128&g=1
p711
sVuser_type
p712
Vregistered
p713
sVreputation
p714
I85586
sVlink
p715
Vhttp://stackoverflow.com/users/1357341/arshajii
p716
sVaccept_rate
p717
I100
sVdisplay_name
p718
Varshajii
p719
ssVis_accepted
p720
I01
sVlast_edit_date
p721
I1387310546
sVanswer_id
p722
I19714092
sa(dp723
Vcommunity_owned_date
p724
I1290194956
sVbody
p725
V<p>Here's a list of resources to get started with the Python debugger:</p>\u000a\u000a<ol>\u000a<li>Read Steve Ferb's article <a href="http://pythonconquerstheuniverse.wordpress.com/2009/09/10/debugging-in-python/" rel="noreferrer">"Debugging in Python"</a></li>\u000a<li>Watch Eric Holscher's screencast <a href="http://ericholscher.com/blog/2008/aug/30/using-pdb-python-debugger-django-debugging-series-/" rel="noreferrer">"Using pdb, the Python Debugger"</a></li>\u000a<li>Read Ayman Hourieh's article <a href="https://gimmebar-assets.s3.amazonaws.com/4fe38b76be0a5.html" rel="noreferrer">"Python Debugging Techniques"</a></li>\u000a<li>Read the <a href="http://docs.python.org/library/pdb.html" rel="noreferrer">Python documentation for pdb \u2014 The Python Debugger</a></li>\u000a<li>Read Chapter 9\u2014When You Don't Even Know What to Log: Using Debuggers\u2014of Karen Tracey's <a href="https://www.packtpub.com/django-1-1-testing-and-debugging/book" rel="noreferrer"><em>Django 1.1 Testing and Debugging</em></a>.</li>\u000a</ol>\u000a
p726
sVquestion_id
p727
I4228637
sVlast_activity_date
p728
I1386428184
sVcreation_date
p729
I1290194956
sVscore
p730
I108
sVowner
p731
(dp732
Vuser_id
p733
I95592
sVprofile_image
p734
Vhttps://i.stack.imgur.com/utY5u.jpg?s=128&g=1
p735
sVuser_type
p736
Vregistered
p737
sVreputation
p738
I192279
sVlink
p739
Vhttp://stackoverflow.com/users/95592/matthew-rankin
p740
sVaccept_rate
p741
I78
sVdisplay_name
p742
VMatthew Rankin
p743
ssVis_accepted
p744
I01
sVlast_edit_date
p745
I1386428184
sVanswer_id
p746
I4228643
sa(dp747
Vbody
p748
V<p>You can use <code>something.isin(somewhere)</code> and <code>~something.isin(somewhere)</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df\u000a  countries\u000a0        US\u000a1        UK\u000a2   Germany\u000a3     China\u000a&gt;&gt;&gt; countries\u000a['UK', 'China']\u000a&gt;&gt;&gt; df.countries.isin(countries)\u000a0    False\u000a1     True\u000a2    False\u000a3     True\u000aName: countries, dtype: bool\u000a&gt;&gt;&gt; df[df.countries.isin(countries)]\u000a  countries\u000a1        UK\u000a3     China\u000a&gt;&gt;&gt; df[~df.countries.isin(countries)]\u000a  countries\u000a0        US\u000a2   Germany\u000a</code></pre>\u000a
p749
sVquestion_id
p750
I19960077
sVlast_activity_date
p751
I1384362819
sVcreation_date
p752
I1384362819
sVscore
p753
I171
sVowner
p754
(dp755
Vuser_id
p756
I487339
sVprofile_image
p757
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p758
sVuser_type
p759
Vregistered
p760
sVreputation
p761
I147176
sVlink
p762
Vhttp://stackoverflow.com/users/487339/dsm
p763
sVdisplay_name
p764
VDSM
p765
ssVis_accepted
p766
I01
sVanswer_id
p767
I19960116
sa(dp768
Vbody
p769
V<p>Sure!  Setup:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import pandas as pd\u000a&gt;&gt;&gt; from random import randint\u000a&gt;&gt;&gt; df = pd.DataFrame({'A': [randint(1, 9) for x in xrange(10)],\u000a                   'B': [randint(1, 9)*10 for x in xrange(10)],\u000a                   'C': [randint(1, 9)*100 for x in xrange(10)]})\u000a&gt;&gt;&gt; df\u000a   A   B    C\u000a0  9  40  300\u000a1  9  70  700\u000a2  5  70  900\u000a3  8  80  900\u000a4  7  50  200\u000a5  9  30  900\u000a6  2  80  700\u000a7  2  80  400\u000a8  5  80  300\u000a9  7  70  800\u000a</code></pre>\u000a\u000a<p>We can apply column operations and get boolean Series objects:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df["B"] &gt; 50\u000a0    False\u000a1     True\u000a2     True\u000a3     True\u000a4    False\u000a5    False\u000a6     True\u000a7     True\u000a8     True\u000a9     True\u000aName: B\u000a&gt;&gt;&gt; (df["B"] &gt; 50) &amp; (df["C"] == 900)\u000a0    False\u000a1    False\u000a2     True\u000a3     True\u000a4    False\u000a5    False\u000a6    False\u000a7    False\u000a8    False\u000a9    False\u000a</code></pre>\u000a\u000a<p>[Update, to switch to new-style <code>.loc</code>]:</p>\u000a\u000a<p>And then we can use these to index into the object.  For read access, you can chain indices:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df["A"][(df["B"] &gt; 50) &amp; (df["C"] == 900)]\u000a2    5\u000a3    8\u000aName: A, dtype: int64\u000a</code></pre>\u000a\u000a<p>but you can get yourself into trouble because of the difference between a view and a copy doing this for write access.  You can use <code>.loc</code> instead:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; df.loc[(df["B"] &gt; 50) &amp; (df["C"] == 900), "A"]\u000a2    5\u000a3    8\u000aName: A, dtype: int64\u000a&gt;&gt;&gt; df.loc[(df["B"] &gt; 50) &amp; (df["C"] == 900), "A"].values\u000aarray([5, 8], dtype=int64)\u000a&gt;&gt;&gt; df.loc[(df["B"] &gt; 50) &amp; (df["C"] == 900), "A"] *= 1000\u000a&gt;&gt;&gt; df\u000a      A   B    C\u000a0     9  40  300\u000a1     9  70  700\u000a2  5000  70  900\u000a3  8000  80  900\u000a4     7  50  200\u000a5     9  30  900\u000a6     2  80  700\u000a7     2  80  400\u000a8     5  80  300\u000a9     7  70  800\u000a</code></pre>\u000a\u000a<p>Note that I accidentally did <code>== 900</code> and not <code>!= 900</code>, or <code>~(df["C"] == 900)</code>, but I'm too lazy to fix it. Exercise for the reader. :^)</p>\u000a
p770
sVquestion_id
p771
I15315452
sVlast_activity_date
p772
I1384185250
sVcreation_date
p773
I1362860663
sVscore
p774
I146
sVowner
p775
(dp776
Vuser_id
p777
I487339
sVprofile_image
p778
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p779
sVuser_type
p780
Vregistered
p781
sVreputation
p782
I147176
sVlink
p783
Vhttp://stackoverflow.com/users/487339/dsm
p784
sVdisplay_name
p785
VDSM
p786
ssVis_accepted
p787
I01
sVlast_edit_date
p788
I1384185250
sVanswer_id
p789
I15315507
sa(dp790
Vbody
p791
V<p>Python\u2019s creator, Guido van Rossum, mentions this when he wrote about <a href="http://python-history.blogspot.de/2010/06/from-list-comprehensions-to-generator.html" rel="noreferrer">generator expressions</a> that were uniformly built into Python 3: (emphasis mine)</p>\u000a\u000a<blockquote>\u000a  <p>We also made another change in Python 3, to improve equivalence between list comprehensions and generator expressions. In Python 2, the list comprehension "leaks" the loop control variable into the surrounding scope:</p>\u000a\u000a<pre><code>x = 'before'\u000aa = [x for x in 1, 2, 3]\u000aprint x # this prints '3', not 'before'\u000a</code></pre>\u000a  \u000a  <p><strong>This was an artifact of the original implementation of list comprehensions; it was one of Python's "dirty little secrets" for years. It started out as an intentional compromise to make list comprehensions blindingly fast, and while it was not a common pitfall for beginners, it definitely stung people occasionally.</strong> For generator expressions we could not do this. Generator expressions are implemented using generators, whose execution requires a separate execution frame. Thus, generator expressions (especially if they iterate over a short sequence) were less efficient than list comprehensions.</p>\u000a  \u000a  <p>However, in Python 3, we decided to fix the "dirty little secret" of list comprehensions by using the same implementation strategy as for generator expressions. Thus, in Python 3, the above example (after modification to use print(x) :-) will print 'before', proving that the 'x' in the list comprehension temporarily shadows but does not override the 'x' in the surrounding scope.</p>\u000a</blockquote>\u000a\u000a<p>So in Python 3 you won\u2019t see this happen anymore.</p>\u000a\u000a<p>Interestingly, <em>dict comprehensions</em> in Python 2 don\u2019t do this either; this is mostly because dict comprehensions were backported from Python 3 and as such already had that fix in them.</p>\u000a\u000a<p>There are some other questions that cover this topic too, but I\u2019m sure you have already seen those when you searched for the topic, right? ;)</p>\u000a\u000a<ul>\u000a<li><a href="http://stackoverflow.com/questions/4198906/python-list-comprehension-rebind-names-even-after-scope-of-comprehension-is-thi">Python list comprehension rebind names even after scope of comprehension. Is this right?</a></li>\u000a<li><a href="http://stackoverflow.com/questions/16612575/why-the-list-comprehension-variable-is-accessible-after-the-operation-is-done">Why the list comprehension variable is accessible after the operation is done?</a></li>\u000a</ul>\u000a
p792
sVquestion_id
p793
I19848082
sVlast_activity_date
p794
I1383864381
sVcreation_date
p795
I1383863925
sVscore
p796
I71
sVowner
p797
(dp798
Vuser_id
p799
I216074
sVprofile_image
p800
Vhttps://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG
p801
sVuser_type
p802
Vregistered
p803
sVreputation
p804
I145981
sVlink
p805
Vhttp://stackoverflow.com/users/216074/poke
p806
sVaccept_rate
p807
I91
sVdisplay_name
p808
Vpoke
p809
ssVis_accepted
p810
I01
sVlast_edit_date
p811
I1383864381
sVanswer_id
p812
I19848168
sa(dp813
Vbody
p814
V<p>you could also try;</p>\u000a\u000a<pre><code>data = pd.read_csv('file1.csv', error_bad_lines=False)\u000a</code></pre>\u000a
p815
sVquestion_id
p816
I18039057
sVlast_activity_date
p817
I1375973235
sVcreation_date
p818
I1375973235
sVscore
p819
I106
sVowner
p820
(dp821
Vuser_id
p822
I1948860
sVprofile_image
p823
Vhttps://www.gravatar.com/avatar/7f0b71281b4619cd084794b9654d227e?s=128&d=identicon&r=PG
p824
sVuser_type
p825
Vregistered
p826
sVreputation
p827
I2323
sVlink
p828
Vhttp://stackoverflow.com/users/1948860/richie
p829
sVaccept_rate
p830
I78
sVdisplay_name
p831
Vrichie
p832
ssVis_accepted
p833
I01
sVanswer_id
p834
I18129082
sa(dp835
Vbody
p836
V<pre><code>date = datetime.datetime(2003,8,1,12,4,5)\u000afor i in range(5): \u000a    date += datetime.timedelta(days=1)\u000a    print(date) \u000a</code></pre>\u000a
p837
sVquestion_id
p838
I3240458
sVlast_activity_date
p839
I1374532046
sVcreation_date
p840
I1279047706
sVscore
p841
I138
sVowner
p842
(dp843
Vuser_id
p844
I190597
sVprofile_image
p845
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p846
sVuser_type
p847
Vregistered
p848
sVreputation
p849
I425294
sVlink
p850
Vhttp://stackoverflow.com/users/190597/unutbu
p851
sVaccept_rate
p852
I88
sVdisplay_name
p853
Vunutbu
p854
ssVis_accepted
p855
I01
sVlast_edit_date
p856
I1374532046
sVanswer_id
p857
I3240486
sa(dp858
Vbody
p859
V<p>Yes, because of the Global Interpreter Lock (GIL) there can only run one thread at a time. Here are some links with some insights about this:</p>\u000a\u000a<ul>\u000a<li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=214235" rel="noreferrer">http://www.artima.com/weblogs/viewpost.jsp?thread=214235</a></li>\u000a<li><a href="http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/" rel="noreferrer">http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/</a></li>\u000a</ul>\u000a\u000a<p>From the last link an interesting quote:</p>\u000a\u000a<blockquote>\u000a  <p>Let me explain what all that means. \u000a  Threads run inside the same virtual\u000a  machine, and hence run on the same\u000a  physical machine.  Processes can run\u000a  on the same physical machine or in\u000a  another physical machine.  If you\u000a  architect your application around\u000a  threads, you\u2019ve done nothing to access\u000a  multiple machines.  So, you can scale\u000a  to as many cores are on the single\u000a  machine (which will be quite a few\u000a  over time), but to really reach web\u000a  scales, you\u2019ll need to solve the\u000a  multiple machine problem anyway.</p>\u000a</blockquote>\u000a\u000a<p>If you want to use multi core, <a href="http://www.python.org/dev/peps/pep-0371/" rel="noreferrer">pyprocessing</a> defines an process based API to do real parallelization. The <a href="http://en.wikipedia.org/wiki/Python_Enhancement_Proposal#Development" rel="noreferrer">PEP</a> also includes some interesting benchmarks.</p>\u000a
p860
sVquestion_id
p861
I31340
sVlast_activity_date
p862
I1372268356
sVcreation_date
p863
I1219882790
sVscore
p864
I45
sVowner
p865
(dp866
Vuser_id
p867
I720
sVprofile_image
p868
Vhttps://www.gravatar.com/avatar/3c57f2a468f2fc945f1e5c47d1afee66?s=128&d=identicon&r=PG
p869
sVuser_type
p870
Vregistered
p871
sVreputation
p872
I25613
sVlink
p873
Vhttp://stackoverflow.com/users/720/peter-hoffmann
p874
sVaccept_rate
p875
I69
sVdisplay_name
p876
VPeter Hoffmann
p877
ssVis_accepted
p878
I01
sVlast_edit_date
p879
I1372268356
sVanswer_id
p880
I31398
sa(dp881
Vbody
p882
V<p>The code...</p>\u000a\u000a<pre><code>options.get(something, doThisMostOfTheTime)()\u000a</code></pre>\u000a\u000a<p>...looks like it ought to be faster, but it's actually slower than the <code>if</code> ... <code>elif</code> ... <code>else</code> construct, because it has to call a function, which can be a significant performance overhead in a tight loop.</p>\u000a\u000a<p>Consider these examples...</p>\u000a\u000a<p><strong>1.py</strong></p>\u000a\u000a<pre><code>something = 'something'\u000a\u000afor i in xrange(1000000):\u000a    if something == 'this':\u000a        the_thing = 1\u000a    elif something == 'that':\u000a        the_thing = 2\u000a    elif something == 'there':\u000a        the_thing = 3\u000a    else:\u000a        the_thing = 4\u000a</code></pre>\u000a\u000a<p><strong>2.py</strong></p>\u000a\u000a<pre><code>something = 'something'\u000aoptions = {'this': 1, 'that': 2, 'there': 3}\u000a\u000afor i in xrange(1000000):\u000a    the_thing = options.get(something, 4)\u000a</code></pre>\u000a\u000a<p><strong>3.py</strong></p>\u000a\u000a<pre><code>something = 'something'\u000aoptions = {'this': 1, 'that': 2, 'there': 3}\u000a\u000afor i in xrange(1000000):\u000a    if something in options:\u000a        the_thing = options[something]\u000a    else:\u000a        the_thing = 4\u000a</code></pre>\u000a\u000a<p><strong>4.py</strong></p>\u000a\u000a<pre><code>from collections import defaultdict\u000a\u000asomething = 'something'\u000aoptions = defaultdict(lambda: 4, {'this': 1, 'that': 2, 'there': 3})\u000a\u000afor i in xrange(1000000):\u000a    the_thing = options[something]\u000a</code></pre>\u000a\u000a<p>...and note the amount of CPU time they use...</p>\u000a\u000a<pre><code>1.py: 160ms\u000a2.py: 170ms\u000a3.py: 110ms\u000a4.py: 100ms\u000a</code></pre>\u000a\u000a<p>...using the user time from <a href="http://linux.die.net/man/1/time" rel="noreferrer"><code>time(1)</code></a>.</p>\u000a\u000a<p>Option #4 does have the additional memory overhead of adding a new item for every distinct key miss, so if you're expecting an unbounded number of distinct key misses, I'd go with option #3, which is still a significant improvement on the original construct.</p>\u000a
p883
sVquestion_id
p884
I17166074
sVlast_activity_date
p885
I1371738256
sVcreation_date
p886
I1371551364
sVscore
p887
I70
sVowner
p888
(dp889
Vuser_id
p890
I172176
sVprofile_image
p891
Vhttps://www.gravatar.com/avatar/53ea9ceaca555fc33de2069b747554e5?s=128&d=identicon&r=PG
p892
sVuser_type
p893
Vregistered
p894
sVreputation
p895
I21602
sVlink
p896
Vhttp://stackoverflow.com/users/172176/aya
p897
sVdisplay_name
p898
VAya
p899
ssVis_accepted
p900
I01
sVlast_edit_date
p901
I1371738256
sVanswer_id
p902
I17166604
sa(dp903
Vbody
p904
V<p>The best way is to set <strong>static_url_path</strong> to root url</p>\u000a\u000a<pre><code>from flask import Flask\u000a\u000aapp = Flask(__name__, static_folder='static', static_url_path='')\u000a</code></pre>\u000a
p905
sVquestion_id
p906
I4239825
sVlast_activity_date
p907
I1371064939
sVcreation_date
p908
I1371064939
sVscore
p909
I47
sVowner
p910
(dp911
Vuser_id
p912
I2300614
sVprofile_image
p913
Vhttps://www.gravatar.com/avatar/cfb77e897bb239233e4a37bc0505bcb7?s=128&d=identicon&r=PG&f=1
p914
sVuser_type
p915
Vregistered
p916
sVreputation
p917
I1549
sVlink
p918
Vhttp://stackoverflow.com/users/2300614/dns
p919
sVaccept_rate
p920
I70
sVdisplay_name
p921
Vdns
p922
ssVis_accepted
p923
I01
sVanswer_id
p924
I17073583
sa(dp925
Vbody
p926
V<p>In order of increasing complexity:</p>\u000a\u000a<h1>Use the <a href="http://docs.python.org/library/threading.html" rel="noreferrer">threading module</a></h1>\u000a\u000a<p>Pros:</p>\u000a\u000a<ul>\u000a<li>It's really easy to run any function (any callable in fact) in its\u000aown thread.</li>\u000a<li>Sharing data is if not easy (locks are never easy :), at\u000aleast simple.</li>\u000a</ul>\u000a\u000a<p>Cons:</p>\u000a\u000a<ul>\u000a<li>As mentioned <a href="http://stackoverflow.com/questions/1190206/threading-in-python/1190428#1190428">by Juergen</a> Python threads cannot actually concurrently access state in the interpreter (there's one big lock, the infamous <a href="http://en.wikipedia.org/wiki/Global_Interpreter_Lock" rel="noreferrer">Global Interpreter Lock</a>.)  What that means in practice is that threads are useful for I/O bound tasks (networking, writing to disk, and so on), but not at all useful for doing concurrent computation.</li>\u000a</ul>\u000a\u000a<h1>Use the <a href="http://docs.python.org/library/multiprocessing.html" rel="noreferrer">multiprocessing</a> module</h1>\u000a\u000a<p>In the simple use case this looks exactly like using <code>threading</code> except each task is run in its own process not its own thread.  (Almost literally: If you take <a href="http://stackoverflow.com/questions/1190206/threading-in-python/1190232#1190232">Eli's example</a>, and replace <code>threading</code> with <code>multiprocessing</code>, <code>Thread</code>, with <code>Process</code>, and <code>Queue</code> (the module) with <code>multiprocessing.Queue</code>, it should run just fine.)</p>\u000a\u000a<p>Pros:</p>\u000a\u000a<ul>\u000a<li>Actual concurrency for all tasks (no Global Interpreter Lock).</li>\u000a<li>Scales to multiple processors, can even scale to multiple <em>machines</em>.</li>\u000a</ul>\u000a\u000a<p>Cons:</p>\u000a\u000a<ul>\u000a<li>Processes are slower than threads.</li>\u000a<li>Data sharing between processes is trickier than with threads.</li>\u000a<li>Memory is not implicitly shared.  You either have to explicitly share it or you have to pickle variables and send them back and forth.  This is safer, but harder.  (If it matters increasingly the Python developers seem to be pushing people in this direction.)</li>\u000a</ul>\u000a\u000a<h1>Use an event model, such as <a href="http://twistedmatrix.com/" rel="noreferrer">Twisted</a></h1>\u000a\u000a<p>Pros:</p>\u000a\u000a<ul>\u000a<li>You get extremely fine control over priority, over what executes when.</li>\u000a</ul>\u000a\u000a<p>Cons:</p>\u000a\u000a<ul>\u000a<li>Even with a good library, asynchronous programming is usually harder than threaded programming, hard both in terms of understanding what's supposed to happen and in terms of debugging what actually is happening.</li>\u000a</ul>\u000a\u000a<hr>\u000a\u000a<p>In <strong>all</strong> cases I'm assuming you already understand many of the issues involved with multitasking, specifically the tricky issue of how to share data between tasks.  If for some reason you don't know when and how to use locks and conditions you have to start with those.  Multitasking code is full of subtleties and gotchas, and it's really best to have a good understanding of concepts before you start.</p>\u000a
p927
sVquestion_id
p928
I1190206
sVlast_activity_date
p929
I1370118621
sVcreation_date
p930
I1248731608
sVscore
p931
I101
sVowner
p932
(dp933
Vuser_id
p934
I29057
sVprofile_image
p935
Vhttps://www.gravatar.com/avatar/1c3b38182199942fb6146ecbfb26bd42?s=128&d=identicon&r=PG
p936
sVuser_type
p937
Vregistered
p938
sVreputation
p939
I10894
sVlink
p940
Vhttp://stackoverflow.com/users/29057/quark
p941
sVdisplay_name
p942
Vquark
p943
ssVis_accepted
p944
I01
sVlast_edit_date
p945
I1370118621
sVanswer_id
p946
I1190856
sa(dp947
Vbody
p948
V<p>Here's an implementation with <a href="http://luispedro.org/software/mahotas" rel="noreferrer" title="mahotas homepage">mahotas</a></p>\u000a\u000a<pre><code>from pylab import imshow\u000aimport numpy as np\u000aimport mahotas\u000awally = mahotas.imread('DepartmentStore.jpg')\u000a\u000awfloat = wally.astype(float)\u000ar,g,b = wfloat.transpose((2,0,1))\u000a</code></pre>\u000a\u000a<p>Split into red, green, and blue channels. It's better to use floating point arithmetic below, so we convert at the top.</p>\u000a\u000a<pre><code>w = wfloat.mean(2)\u000a</code></pre>\u000a\u000a<p><code>w</code> is the white channel.</p>\u000a\u000a<pre><code>pattern = np.ones((24,16), float)\u000afor i in xrange(2):\u000a    pattern[i::4] = -1\u000a</code></pre>\u000a\u000a<p>Build up a pattern of +1,+1,-1,-1 on the vertical axis. This is wally's shirt.</p>\u000a\u000a<pre><code>v = mahotas.convolve(r-w, pattern)\u000a</code></pre>\u000a\u000a<p>Convolve with red minus white. This will give a strong response where the shirt is.</p>\u000a\u000a<pre><code>mask = (v == v.max())\u000amask = mahotas.dilate(mask, np.ones((48,24)))\u000a</code></pre>\u000a\u000a<p>Look for the maximum value and dilate it to make it visible. Now, we tone down the whole image, except the region or interest:</p>\u000a\u000a<pre><code>wally -= .8*wally * ~mask[:,:,None]\u000aimshow(wally)\u000a</code></pre>\u000a\u000a<p>And we get <img src="https://i.stack.imgur.com/5O2sQ.png" alt="waldo">!</p>\u000a
p949
sVquestion_id
p950
I8849869
sVlast_activity_date
p951
I1368186239
sVcreation_date
p952
I1352297505
sVscore
p953
I52
sVowner
p954
(dp955
Vuser_id
p956
I248279
sVprofile_image
p957
Vhttps://www.gravatar.com/avatar/9cf2d31c7d0354a055a19c15a94ca73c?s=128&d=identicon&r=PG
p958
sVuser_type
p959
Vregistered
p960
sVreputation
p961
I4504
sVlink
p962
Vhttp://stackoverflow.com/users/248279/luispedro
p963
sVaccept_rate
p964
I94
sVdisplay_name
p965
Vluispedro
p966
ssVis_accepted
p967
I01
sVlast_edit_date
p968
I1368186239
sVanswer_id
p969
I13271478
sa(dp970
Vbody
p971
V<p>Seems you forgot the <code>''</code> of your string.</p>\u000a\u000a<pre><code>In [43]: df['Value'] = df.apply(lambda row: my_test(row['a'], row['c']), axis=1)\u000a\u000aIn [44]: df\u000aOut[44]:\u000a                    a    b         c     Value\u000a          0 -1.674308  foo  0.343801  0.044698\u000a          1 -2.163236  bar -2.046438 -0.116798\u000a          2 -0.199115  foo -0.458050 -0.199115\u000a          3  0.918646  bar -0.007185 -0.001006\u000a          4  1.336830  foo  0.534292  0.268245\u000a          5  0.976844  bar -0.773630 -0.570417\u000a</code></pre>\u000a\u000a<p>BTW, in my opinion, following way is more elegant:</p>\u000a\u000a<pre><code>In [53]: def my_test2(row):\u000a....:     return row['a'] % row['c']\u000a....:     \u000a\u000aIn [54]: df['Value'] = df.apply(my_test2, axis=1)\u000a</code></pre>\u000a
p972
sVquestion_id
p973
I16353729
sVlast_activity_date
p974
I1367570431
sVcreation_date
p975
I1367570431
sVscore
p976
I117
sVowner
p977
(dp978
Vuser_id
p979
I1426056
sVprofile_image
p980
Vhttps://www.gravatar.com/avatar/3ac815b6fca201737db888a28efd7248?s=128&d=identicon&r=PG
p981
sVuser_type
p982
Vregistered
p983
sVreputation
p984
I19755
sVlink
p985
Vhttp://stackoverflow.com/users/1426056/waitingkuo
p986
sVaccept_rate
p987
I87
sVdisplay_name
p988
Vwaitingkuo
p989
ssVis_accepted
p990
I01
sVanswer_id
p991
I16354730
sa(dp992
Vbody
p993
V<p>You need <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#divisibleby" rel="noreferrer">divisibleby</a>, a built-in django filter.</p>\u000a\u000a<pre><code>{% for p in posts %}\u000a    &lt;div class="post width1 height2 column {% if forloop.counter0|divisibleby:4 %}first{% endif %}"&gt;\u000a        &lt;div class="preview"&gt;\u000a\u000a        &lt;/div&gt;\u000a        &lt;div class="overlay"&gt;\u000a\u000a        &lt;/div&gt;\u000a        &lt;h2&gt;p.title&lt;/h2&gt;\u000a    &lt;/div&gt;\u000a{% endfor %}\u000a</code></pre>\u000a
p994
sVquestion_id
p995
I8494209
sVlast_activity_date
p996
I1363850827
sVcreation_date
p997
I1323801758
sVscore
p998
I129
sVowner
p999
(dp1000
Vuser_id
p1001
I790387
sVprofile_image
p1002
Vhttps://www.gravatar.com/avatar/450fd2737dd0355700a574bd12842509?s=128&d=identicon&r=PG
p1003
sVuser_type
p1004
Vregistered
p1005
sVreputation
p1006
I97321
sVlink
p1007
Vhttp://stackoverflow.com/users/790387/burhan-khalid
p1008
sVaccept_rate
p1009
I83
sVdisplay_name
p1010
VBurhan Khalid
p1011
ssVis_accepted
p1012
I01
sVlast_edit_date
p1013
I1363850827
sVanswer_id
p1014
I8494425
sa(dp1015
Vbody
p1016
V<p>For (much) more power and flexibility, use a dedicated spellchecking library like <a href="http://pythonhosted.org/pyenchant/" rel="noreferrer"><code>PyEnchant</code></a>. There's a <a href="http://pythonhosted.org/pyenchant/tutorial.html" rel="noreferrer">tutorial</a>, or you could just dive straight in:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import enchant\u000a&gt;&gt;&gt; d = enchant.Dict("en_US")\u000a&gt;&gt;&gt; d.check("Hello")\u000aTrue\u000a&gt;&gt;&gt; d.check("Helo")\u000aFalse\u000a&gt;&gt;&gt; d.suggest("Helo")\u000a['He lo', 'He-lo', 'Hello', 'Helot', 'Help', 'Halo', 'Hell', 'Held', 'Helm', 'Hero', "He'll"]\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a\u000a<p><code>PyEnchant</code> comes with a few dictionaries (en_GB, en_US, de_DE, fr_FR), but can use any of the <a href="http://wiki.services.openoffice.org/wiki/Dictionaries" rel="noreferrer">OpenOffice ones</a> if you want more languages.</p>\u000a\u000a<p>There appears to be a pluralisation library called <a href="http://pypi.python.org/pypi/inflect" rel="noreferrer"><code>inflect</code></a>, but I've no idea whether it's any good.</p>\u000a
p1017
sVquestion_id
p1018
I3788870
sVlast_activity_date
p1019
I1363757325
sVcreation_date
p1020
I1285345571
sVscore
p1021
I118
sVowner
p1022
(dp1023
Vuser_id
p1024
I398968
sVprofile_image
p1025
Vhttps://graph.facebook.com/619530723/picture?type=large
p1026
sVuser_type
p1027
Vregistered
p1028
sVreputation
p1029
I66281
sVlink
p1030
Vhttp://stackoverflow.com/users/398968/katrielalex
p1031
sVaccept_rate
p1032
I75
sVdisplay_name
p1033
Vkatrielalex
p1034
ssVis_accepted
p1035
I01
sVlast_edit_date
p1036
I1363757325
sVanswer_id
p1037
I3789057
sa(dp1038
Vbody
p1039
V<p>Roughly, <code>partial</code> does something like this (apart from keyword args support etc):</p>\u000a\u000a<pre><code>def partial(func, *part_args):\u000a    def wrapper(*extra_args):\u000a        args = list(part_args)\u000a        args.extend(extra_args)\u000a        return func(*args)\u000a\u000a    return wrapper\u000a</code></pre>\u000a\u000a<p>So, by calling <code>partial(sum2, 4)</code> you create a new function (a callable, to be precise) that behaves like <code>sum2</code>, but has one positional argument less. That missing argument is always substituted by <code>4</code>, so that <code>partial(sum2, 4)(2) == sum2(4, 2)</code></p>\u000a\u000a<p>As for why it's needed, there's a variety of cases. Just for one, suppose you have to pass a function somewhere where it's expected to have 2 arguments:</p>\u000a\u000a<pre><code>class EventNotifier(object):\u000a    def __init__(self):\u000a        self._listeners = []\u000a\u000a    def add_listener(self, callback):\u000a        ''' callback should accept two positional arguments, event and params '''\u000a        self._listeners.append(callback)\u000a        # ...\u000a\u000a    def notify(self, event, *params):\u000a        for f in self._listeners:\u000a            f(event, params)\u000a</code></pre>\u000a\u000a<p>But a function you already have needs access to some third <code>context</code> object to do its job:</p>\u000a\u000a<pre><code>def log_event(context, event, params):\u000a    context.log_event("Something happened %s, %s", event, params)\u000a</code></pre>\u000a\u000a<p>So, there are several solutions:</p>\u000a\u000a<p>A custom object:</p>\u000a\u000a<pre><code>class Listener(object):\u000a   def __init__(self, context):\u000a       self._context = context\u000a\u000a   def __call__(self, event, params):\u000a       self._context.log_event("Something happened %s, %s", event, params)\u000a\u000a\u000a notifier.add_listener(Listener(context))\u000a</code></pre>\u000a\u000a<p>Lambda:</p>\u000a\u000a<pre><code>log_listener = lambda event, params: log_event(context, event, params)\u000anotifier.add_listener(log_listener)\u000a</code></pre>\u000a\u000a<p>With partials:</p>\u000a\u000a<pre><code>context = get_context()  # whatever\u000anotifier.add_listener(partial(log_event, context))\u000a</code></pre>\u000a\u000a<p>Of those three, <code>partial</code> is the shortest and the fastest.\u000a(For a more complex case you might want a custom object though).</p>\u000a
p1040
sVquestion_id
p1041
I15331726
sVlast_activity_date
p1042
I1362996671
sVcreation_date
p1043
I1362980154
sVscore
p1044
I78
sVowner
p1045
(dp1046
Vuser_id
p1047
I770830
sVprofile_image
p1048
Vhttps://www.gravatar.com/avatar/a3943e02574f64dabaa71603264c9c28?s=128&d=identicon&r=PG
p1049
sVuser_type
p1050
Vregistered
p1051
sVreputation
p1052
I13241
sVlink
p1053
Vhttp://stackoverflow.com/users/770830/bereal
p1054
sVaccept_rate
p1055
I77
sVdisplay_name
p1056
Vbereal
p1057
ssVis_accepted
p1058
I01
sVlast_edit_date
p1059
I1362996671
sVanswer_id
p1060
I15331841
sa(dp1061
Vbody
p1062
V<p>I am assuming you mean using XSD files. Surprisingly there aren't many python XML libraries that support this. lxml does however. Check <a href="http://lxml.de/validation.html" rel="noreferrer">Validation with lxml</a>. The page also lists how to use lxml to validate with other schema types.</p>\u000a
p1063
sVquestion_id
p1064
I299588
sVlast_activity_date
p1065
I1357899527
sVcreation_date
p1066
I1227032213
sVscore
p1067
I44
sVowner
p1068
(dp1069
Vuser_id
p1070
I38662
sVprofile_image
p1071
Vhttps://www.gravatar.com/avatar/62cdb086ed53f39140627efaa6a2d437?s=128&d=identicon&r=PG
p1072
sVuser_type
p1073
Vregistered
p1074
sVreputation
p1075
I782
sVlink
p1076
Vhttp://stackoverflow.com/users/38662/keegan-carruthers-smith
p1077
sVdisplay_name
p1078
VKeegan Carruthers-Smith
p1079
ssVis_accepted
p1080
I01
sVlast_edit_date
p1081
I1357899527
sVanswer_id
p1082
I299635
sa(dp1083
Vbody
p1084
V<p>I have created a Flask boilerplate project called "<a href="https://github.com/imwilsonxu/fbone" rel="noreferrer">Fbone</a>", please feel free to check it out and fork :)</p>\u000a\u000a<p>Fbone (Flask bone) is a Flask (Python microframework) template/bootstrap/boilerplate application.</p>\u000a\u000a<p>Overview</p>\u000a\u000a<ul>\u000a<li>Well designed for big project using blueprint.</li>\u000a<li>Integrate with hottest frontend framework: jQuery / html5boilerplate / bootstrap.</li>\u000a<li>Backed by the famous SQLalchemy.</li>\u000a<li>Implement tricky "remember me" by flask-login.</li>\u000a<li>Handle web forms by flask-wtform.</li>\u000a<li>Unit testing with flask-testing and nose.</li>\u000a<li>Easily deploy via fabric and mod_wsgi (example included).</li>\u000a<li>i18n by flask-babel</li>\u000a</ul>\u000a\u000a<p>btw, I just found this <a href="https://github.com/mitsuhiko/flask/wiki/Large-app-how-to" rel="noreferrer">wiki</a> on building a large project with Flask useful, pls check it!</p>\u000a
p1085
sVquestion_id
p1086
I9395587
sVlast_activity_date
p1087
I1354446805
sVcreation_date
p1088
I1329925540
sVscore
p1089
I76
sVowner
p1090
(dp1091
Vuser_id
p1092
I1217497
sVprofile_image
p1093
Vhttps://www.gravatar.com/avatar/defdc4ae2f9ff22509e7ffa0d9d99c8c?s=128&d=identicon&r=PG
p1094
sVuser_type
p1095
Vregistered
p1096
sVreputation
p1097
I1984
sVlink
p1098
Vhttp://stackoverflow.com/users/1217497/imwilsonxu
p1099
sVdisplay_name
p1100
Vimwilsonxu
p1101
ssVis_accepted
p1102
I01
sVlast_edit_date
p1103
I1354446805
sVanswer_id
p1104
I9398062
sa(dp1105
Vbody
p1106
V<p>Use the <code>format</code> method, especially if you're concerned about Python 3 and the future.  From <a href="http://docs.python.org/release/3.1.5/library/stdtypes.html#old-string-formatting-operations" rel="noreferrer">the documentation</a>:</p>\u000a\u000a<blockquote>\u000a  <p>The formatting operations described here [% substitutions] are obsolete and may go away in future versions of Python. Use the new String Formatting in new code.</p>\u000a</blockquote>\u000a
p1107
sVquestion_id
p1108
I12382719
sVlast_activity_date
p1109
I1347433226
sVcreation_date
p1110
I1347433226
sVscore
p1111
I76
sVowner
p1112
(dp1113
Vuser_id
p1114
I1427416
sVprofile_image
p1115
Vhttps://i.stack.imgur.com/QWHKg.png?s=128&g=1
p1116
sVuser_type
p1117
Vregistered
p1118
sVreputation
p1119
I123766
sVlink
p1120
Vhttp://stackoverflow.com/users/1427416/brenbarn
p1121
sVaccept_rate
p1122
I50
sVdisplay_name
p1123
VBrenBarn
p1124
ssVis_accepted
p1125
I01
sVanswer_id
p1126
I12382738
sa(dp1127
Vbody
p1128
V<p>In principle it shouldn't run out of memory, but there are currently memory problems with <code>read_csv</code> on large files caused by some complex Python internal issues (this is vague but it's been known for a long time: <a href="http://github.com/pydata/pandas/issues/407">http://github.com/pydata/pandas/issues/407</a>). </p>\u000a\u000a<p>At the moment there isn't a perfect solution (here's a tedious one: you could transcribe the file row-by-row into a pre-allocated NumPy array or memory-mapped file--<code>np.mmap</code>), but it's one I'll be working on in the near future. Another solution is to read the file in smaller pieces (use <code>iterator=True, chunksize=1000</code>) then concatenate then with <code>pd.concat</code>. The problem comes in when you pull the entire text file into memory in one big slurp.</p>\u000a
p1129
sVquestion_id
p1130
I11622652
sVlast_activity_date
p1131
I1347158810
sVcreation_date
p1132
I1343092250
sVscore
p1133
I63
sVowner
p1134
(dp1135
Vuser_id
p1136
I776560
sVprofile_image
p1137
Vhttps://www.gravatar.com/avatar/2c08a3eed709a9d1a2654cea45aa466f?s=128&d=identicon&r=PG
p1138
sVuser_type
p1139
Vregistered
p1140
sVreputation
p1141
I37562
sVlink
p1142
Vhttp://stackoverflow.com/users/776560/wes-mckinney
p1143
sVdisplay_name
p1144
VWes McKinney
p1145
ssVis_accepted
p1146
I01
sVlast_edit_date
p1147
I1347158810
sVanswer_id
p1148
I11622769
sa(dp1149
Vbody
p1150
V<p><code>A.x</code> is a <em>class variable</em>.\u000a<code>B</code>'s <code>self.x</code> is an <em>instance variable</em>.</p>\u000a\u000a<p>i.e. <code>A</code>'s <code>x</code> is shared between instances.</p>\u000a\u000a<p>It would be easier to demonstrate the difference with something that can be modified like a list:</p>\u000a\u000a<pre><code>#!/usr/bin/env python\u000a\u000aclass A:\u000a    x = []\u000a\u000a    def add(self):\u000a        self.x.append(1)\u000a\u000a\u000aclass B:\u000a    def __init__(self):\u000a        self.x = []\u000a\u000a    def add(self):\u000a        self.x.append(1)\u000a\u000a\u000ax = A()\u000ay = A()\u000ax.add()\u000ay.add()\u000aprint "A's x:",x.x\u000a\u000ax = B()\u000ay = B()\u000ax.add()\u000ay.add()\u000aprint "B's x:",x.x\u000a</code></pre>\u000a\u000a<p>Output</p>\u000a\u000a<blockquote>\u000a  <p>A's x: [1, 1]<br />\u000a  B's x: [1]</p>\u000a</blockquote>\u000a
p1151
sVquestion_id
p1152
I475871
sVlast_activity_date
p1153
I1341484428
sVcreation_date
p1154
I1232795867
sVscore
p1155
I117
sVowner
p1156
(dp1157
Vuser_id
p1158
I3978
sVprofile_image
p1159
Vhttps://www.gravatar.com/avatar/7d3dac9b66ba5f24a38c09e01830adab?s=128&d=identicon&r=PG
p1160
sVuser_type
p1161
Vregistered
p1162
sVreputation
p1163
I39087
sVlink
p1164
Vhttp://stackoverflow.com/users/3978/douglas-leeder
p1165
sVaccept_rate
p1166
I86
sVdisplay_name
p1167
VDouglas Leeder
p1168
ssVis_accepted
p1169
I01
sVlast_edit_date
p1170
I1341484428
sVanswer_id
p1171
I475873
sa(dp1172
Vbody
p1173
V<p>Another option is <a href="http://mongoengine.org/" rel="noreferrer">MongoEngine</a>. The ORM for MongoEngine is very similar to the ORM used by Django.</p>\u000a\u000a<p>Example (from the tutorial):</p>\u000a\u000a<pre><code>class Post(Document):\u000a    title = StringField(max_length=120, required=True)\u000a    author = ReferenceField(User)\u000a\u000aclass TextPost(Post):\u000a    content = StringField()\u000a\u000aclass ImagePost(Post):\u000a    image_path = StringField()\u000a\u000aclass LinkPost(Post):\u000a    link_url = StringField()\u000a</code></pre>\u000a
p1174
sVquestion_id
p1175
I2781682
sVlast_activity_date
p1176
I1339077848
sVcreation_date
p1177
I1273160409
sVscore
p1178
I58
sVowner
p1179
(dp1180
Vuser_id
p1181
I73282
sVprofile_image
p1182
Vhttps://www.gravatar.com/avatar/8b02f381f470076f97ace4ddf9b3f337?s=128&d=identicon&r=PG
p1183
sVuser_type
p1184
Vregistered
p1185
sVreputation
p1186
I3156
sVlink
p1187
Vhttp://stackoverflow.com/users/73282/david-narayan
p1188
sVdisplay_name
p1189
VDavid Narayan
p1190
ssVis_accepted
p1191
I01
sVlast_edit_date
p1192
I1339077848
sVanswer_id
p1193
I2782385
sa(dp1194
Vbody
p1195
V<p>Look here: <a href="http://jcalderone.livejournal.com/tag/sixty%20seconds" rel="noreferrer">Twisted Web in 60 seconds</a>. That's a group of blog posts describing step by step how to do lots of common stuff with Twisted, all written by Jean-Paul Calderone, the biggest contributor of Twisted. It's really where you should start.</p>\u000a\u000a<p>After that, look at the Twisted <a href="http://twistedmatrix.com/documents/current/core/howto/index.html" rel="noreferrer">core documentation</a> then refer to the <a href="http://twistedmatrix.com/documents/current/api/" rel="noreferrer">API</a> and then into the <a href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-9.0.0/twisted" rel="noreferrer">source code</a>.</p>\u000a\u000a<p>Have fun! </p>\u000a
p1196
sVquestion_id
p1197
I1888139
sVlast_activity_date
p1198
I1336768373
sVcreation_date
p1199
I1260541746
sVscore
p1200
I61
sVowner
p1201
(dp1202
Vuser_id
p1203
I146481
sVprofile_image
p1204
Vhttps://www.gravatar.com/avatar/faffc204d966e588cfa4cd8544c18865?s=128&d=identicon&r=PG
p1205
sVuser_type
p1206
Vregistered
p1207
sVreputation
p1208
I8621
sVlink
p1209
Vhttp://stackoverflow.com/users/146481/etienne
p1210
sVaccept_rate
p1211
I79
sVdisplay_name
p1212
VEtienne
p1213
ssVis_accepted
p1214
I01
sVlast_edit_date
p1215
I1336768373
sVanswer_id
p1216
I1888424
sa(dp1217
Vbody
p1218
V<p>Edit:<br>\u000aIn 2.7 / 3.2 there is <a href="http://docs.python.org/dev/library/csv.html#csv.DictWriter.writeheader" rel="noreferrer">a new <code>writeheader()</code> method</a>. Also, John Machin's answer provides a simpler method of writing the header row.<br>\u000aSimple example of using the <code>writeheader()</code> method now available in 2.7 / 3.2:</p>\u000a\u000a<pre><code>from collections import OrderedDict\u000aordered_fieldnames = OrderedDict([('field1',None),('field2',None)])\u000awith open(outfile,'wb') as fou:\u000a    dw = csv.DictWriter(fou, delimiter='\u005ct', fieldnames=ordered_fieldnames)\u000a    dw.writeheader()\u000a    # continue on to write data\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Instantiating DictWriter requires a fieldnames argument.<br>\u000aFrom <a href="http://docs.python.org/library/csv.html#csv.DictWriter" rel="noreferrer">the documentation</a>:  </p>\u000a\u000a<blockquote>\u000a  <p>The fieldnames parameter identifies\u000a  the order in which values in the\u000a  dictionary passed to the writerow()\u000a  method are written to the csvfile.</p>\u000a</blockquote>\u000a\u000a<p>Put another way:  The Fieldnames argument is required because Python dicts are inherently unordered.<br>\u000aBelow is an example of how you'd write the header and data to a file.<br>\u000aNote: <code>with</code> statement was added in 2.6. If using 2.5: <code>from __future__ import with_statement</code></p>\u000a\u000a<pre><code>with open(infile,'rb') as fin:\u000a    dr = csv.DictReader(fin, delimiter='\u005ct')\u000a\u000a# dr.fieldnames contains values from first row of `f`.\u000awith open(outfile,'wb') as fou:\u000a    dw = csv.DictWriter(fou, delimiter='\u005ct', fieldnames=dr.fieldnames)\u000a    headers = {} \u000a    for n in dw.fieldnames:\u000a        headers[n] = n\u000a    dw.writerow(headers)\u000a    for row in dr:\u000a        dw.writerow(row)\u000a</code></pre>\u000a\u000a<p>As @FM mentions in a comment, you can condense header-writing to a one-liner, e.g.:</p>\u000a\u000a<pre><code>with open(outfile,'wb') as fou:\u000a    dw = csv.DictWriter(fou, delimiter='\u005ct', fieldnames=dr.fieldnames)\u000a    dw.writerow(dict((fn,fn) for fn in dr.fieldnames))\u000a    for row in dr:\u000a        dw.writerow(row)\u000a</code></pre>\u000a
p1219
sVquestion_id
p1220
I2982023
sVlast_activity_date
p1221
I1328646035
sVcreation_date
p1222
I1275772185
sVscore
p1223
I92
sVowner
p1224
(dp1225
Vuser_id
p1226
I42346
sVprofile_image
p1227
Vhttps://i.stack.imgur.com/ZikEw.jpg?s=128&g=1
p1228
sVuser_type
p1229
Vregistered
p1230
sVreputation
p1231
I84007
sVlink
p1232
Vhttp://stackoverflow.com/users/42346/bernie
p1233
sVdisplay_name
p1234
Vbernie
p1235
ssVis_accepted
p1236
I01
sVlast_edit_date
p1237
I1328646035
sVanswer_id
p1238
I2982117
sa(dp1239
Vbody
p1240
V<p>You can assign to <code>sys.modules['B']</code> before importing <code>A</code> to get what you want:</p>\u000a\u000a<p><strong>test.py</strong>:</p>\u000a\u000a<pre><code>import sys\u000asys.modules['B'] = __import__('mock_B')\u000aimport A\u000a\u000aprint(A.B.__name__)\u000a</code></pre>\u000a\u000a<p><strong>A.py</strong>:</p>\u000a\u000a<pre><code>import B\u000a</code></pre>\u000a\u000a<p>Note B.py does not exist, but when running <code>test.py</code> no error is returned and <code>print(A.B.__name__)</code> prints <code>mock_B</code>. You still have to create a <code>mock_B.py</code> where you mock B's actual functions/variables/etc. Or you can just assign a Mock() directly:</p>\u000a\u000a<p><strong>test.py</strong>:</p>\u000a\u000a<pre><code>import sys\u000asys.modules['B'] = Mock()\u000aimport A\u000a</code></pre>\u000a
p1241
sVquestion_id
p1242
I8658043
sVlast_activity_date
p1243
I1325096278
sVcreation_date
p1244
I1325088818
sVscore
p1245
I72
sVowner
p1246
(dp1247
Vuser_id
p1248
I617711
sVprofile_image
p1249
Vhttps://i.stack.imgur.com/fHTfP.jpg?s=128&g=1
p1250
sVuser_type
p1251
Vregistered
p1252
sVreputation
p1253
I9555
sVlink
p1254
Vhttp://stackoverflow.com/users/617711/rob-wouters
p1255
sVdisplay_name
p1256
VRob Wouters
p1257
ssVis_accepted
p1258
I01
sVlast_edit_date
p1259
I1325096278
sVanswer_id
p1260
I8658332
sa(dp1261
Vbody
p1262
V<p>The main advantage of node.js is that <strong>all its libraries are async</strong> so you don't have to worry much about blocking. There are async libraries for mysql, postgres, redis, etc. All is async by default.</p>\u000a\u000a<p>Python have a library for anything - but most of these libraries are not asynchronous. In order to take advantage of tornado (and not to block the process) special libraries for are necessary (e.g. you can't just 'pip install redis' and use it, you'll need something like <a href="https://github.com/evilkost/brukva" rel="noreferrer">brukva</a>), and there are much less tornado libraries than node.js libraries. There is no async mysql tornado driver available at the moment, for example (or at least I'm not aware of it).</p>\u000a\u000a<p>But you can still use many python libraries with tornado (ones that doesn't do i/o), and tornado community is raising and filling the gaps. </p>\u000a\u000a<p>It is easier to write an app using node.js than using tornado in my experience. I personally switched to tornado from node.js because it fits into existing infrastructure of my python project better (integration between django site serving html pages and tornado server providing realtime features was quite painless). </p>\u000a
p1263
sVquestion_id
p1264
I5561701
sVlast_activity_date
p1265
I1322920022
sVcreation_date
p1266
I1302099270
sVscore
p1267
I88
sVowner
p1268
(dp1269
Vuser_id
p1270
I114795
sVprofile_image
p1271
Vhttps://www.gravatar.com/avatar/c75cc8b57acc4841f83c3f5ccea0091f?s=128&d=identicon&r=PG&f=1
p1272
sVuser_type
p1273
Vregistered
p1274
sVreputation
p1275
I11122
sVlink
p1276
Vhttp://stackoverflow.com/users/114795/mikhail-korobov
p1277
sVdisplay_name
p1278
VMikhail Korobov
p1279
ssVis_accepted
p1280
I01
sVlast_edit_date
p1281
I1322920022
sVanswer_id
p1282
I5567796
sa(dp1283
Vbody
p1284
V<p>You have multiple options. Two options are the following.</p>\u000a\u000a<pre><code>numpy.sum(boolarr)\u000anumpy.count_nonzero(boolarr)\u000a</code></pre>\u000a\u000a<p>Here's an example:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import numpy as np\u000a&gt;&gt;&gt; boolarr = np.array([[0, 0, 1], [1, 0, 1], [1, 0, 1]], dtype=np.bool)\u000a&gt;&gt;&gt; boolarr\u000aarray([[False, False,  True],\u000a       [ True, False,  True],\u000a       [ True, False,  True]], dtype=bool)\u000a\u000a&gt;&gt;&gt; np.sum(boolarr)\u000a5\u000a</code></pre>\u000a\u000a<p>Of course, that is a <code>bool</code>-specific answer. More generally, you can use <code>numpy.count_nonzero</code>.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; np.count_nonzero(boolarr)\u000a5\u000a</code></pre>\u000a
p1285
sVquestion_id
p1286
I8364674
sVlast_activity_date
p1287
I1322875763
sVcreation_date
p1288
I1322875334
sVscore
p1289
I114
sVowner
p1290
(dp1291
Vuser_id
p1292
I937870
sVprofile_image
p1293
Vhttps://www.gravatar.com/avatar/2282252d89ba3869c9c1d2ac82ede44c?s=128&d=identicon&r=PG
p1294
sVuser_type
p1295
Vregistered
p1296
sVreputation
p1297
I9981
sVlink
p1298
Vhttp://stackoverflow.com/users/937870/david-alber
p1299
sVdisplay_name
p1300
VDavid Alber
p1301
ssVis_accepted
p1302
I01
sVlast_edit_date
p1303
I1322875763
sVanswer_id
p1304
I8364723
sa(dp1305
Vbody
p1306
V<p>It is used for making hashes.  Look:</p>\u000a\u000a<pre><code>&gt;grep -Inr SECRET_KEY *\u000aconf/global_settings.py:255:SECRET_KEY = ''\u000aconf/project_template/settings.py:61:SECRET_KEY = ''\u000acontrib/auth/tokens.py:54:        hash = sha_constructor(settings.SECRET_KEY + unicode(user.id) +\u000acontrib/comments/forms.py:86:        info = (content_type, object_pk, timestamp, settings.SECRET_KEY)\u000acontrib/formtools/utils.py:15:    order, pickles the result with the SECRET_KEY setting, then takes an md5\u000acontrib/formtools/utils.py:32:    data.append(settings.SECRET_KEY)\u000acontrib/messages/storage/cookie.py:112:        SECRET_KEY, modified to make it unique for the present purpose.\u000acontrib/messages/storage/cookie.py:114:        key = 'django.contrib.messages' + settings.SECRET_KEY\u000acontrib/sessions/backends/base.py:89:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()\u000acontrib/sessions/backends/base.py:95:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:\u000acontrib/sessions/backends/base.py:134:        # Use settings.SECRET_KEY as added salt.\u000acontrib/sessions/backends/base.py:143:                       settings.SECRET_KEY)).hexdigest()\u000acontrib/sessions/models.py:16:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()\u000acontrib/sessions/models.py:59:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:\u000acore/management/commands/startproject.py:32:        # Create a random SECRET_KEY hash, and put it in the main settings.\u000acore/management/commands/startproject.py:37:        settings_contents = re.sub(r"(?&lt;=SECRET_KEY = ')'", secret_key + "'", settings_contents)\u000amiddleware/csrf.py:38:                % (randrange(0, _MAX_CSRF_KEY), settings.SECRET_KEY)).hexdigest()\u000amiddleware/csrf.py:41:    return md5_constructor(settings.SECRET_KEY + session_id).hexdigest()\u000a</code></pre>\u000a
p1307
sVquestion_id
p1308
I7382149
sVlast_activity_date
p1309
I1315786184
sVcreation_date
p1310
I1315786184
sVscore
p1311
I57
sVowner
p1312
(dp1313
Vuser_id
p1314
I141818
sVprofile_image
p1315
Vhttps://www.gravatar.com/avatar/ca564ed5a7a29e6fe4af27acba87deb0?s=128&d=identicon&r=PG
p1316
sVuser_type
p1317
Vregistered
p1318
sVreputation
p1319
I3809
sVlink
p1320
Vhttp://stackoverflow.com/users/141818/roshan-mathews
p1321
sVdisplay_name
p1322
VRoshan Mathews
p1323
ssVis_accepted
p1324
I01
sVanswer_id
p1325
I7382198
sa(dp1326
Vbody
p1327
V<pre><code>next((x for x in test_list if x.value == value), None)\u000a</code></pre>\u000a\u000a<p>This gets the first item from the list that matches the condition, and returns <code>None</code> if no item matches. It's my preferred single-expression form.</p>\u000a\u000a<p>However,</p>\u000a\u000a<pre><code>for x in test_list:\u000a    if x.value == value:\u000a        print "i found it!"\u000a        break\u000a</code></pre>\u000a\u000a<p>The naive loop-break version, is perfectly Pythonic -- it's concise, clear, and efficient. To make it match the behavior of the one-liner:</p>\u000a\u000a<pre><code>for x in test_list:\u000a    if x.value == value:\u000a        print "i found it!"\u000a        break\u000aelse:\u000a    x = None\u000a</code></pre>\u000a\u000a<p>This will assign <code>None</code> to <code>x</code> if you don't <code>break</code> out of the loop.</p>\u000a
p1328
sVquestion_id
p1329
I7125467
sVlast_activity_date
p1330
I1313776872
sVcreation_date
p1331
I1313776872
sVscore
p1332
I160
sVowner
p1333
(dp1334
Vuser_id
p1335
I500584
sVprofile_image
p1336
Vhttps://www.gravatar.com/avatar/02cbc0104ac1794c222b2d3e11d325e4?s=128&d=identicon&r=PG
p1337
sVuser_type
p1338
Vregistered
p1339
sVreputation
p1340
I82963
sVlink
p1341
Vhttp://stackoverflow.com/users/500584/agf
p1342
sVdisplay_name
p1343
Vagf
p1344
ssVis_accepted
p1345
I01
sVanswer_id
p1346
I7125547
sa(dp1347
Vbody
p1348
V<p>Use <a href="http://matplotlib.sourceforge.net/api/figure_api.html#matplotlib.figure.Figure.suptitle" rel="noreferrer">plt.suptitle</a>:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000aimport numpy as np\u000a\u000afig=plt.figure()\u000adata=np.arange(900).reshape((30,30))\u000afor i in range(1,5):\u000a    ax=fig.add_subplot(2,2,i)        \u000a    ax.imshow(data)\u000a\u000aplt.suptitle('Main title')\u000aplt.show()    \u000a</code></pre>\u000a\u000a<p>yields</p>\u000a\u000a<p><img src="https://i.stack.imgur.com/Kq15V.png" alt="enter image description here"></p>\u000a
p1349
sVquestion_id
p1350
I7066121
sVlast_activity_date
p1351
I1313419697
sVcreation_date
p1352
I1313419379
sVscore
p1353
I102
sVowner
p1354
(dp1355
Vuser_id
p1356
I190597
sVprofile_image
p1357
Vhttps://www.gravatar.com/avatar/aabc98d5c6482ca0e1405ec97710f30a?s=128&d=identicon&r=PG&f=1
p1358
sVuser_type
p1359
Vregistered
p1360
sVreputation
p1361
I425294
sVlink
p1362
Vhttp://stackoverflow.com/users/190597/unutbu
p1363
sVaccept_rate
p1364
I88
sVdisplay_name
p1365
Vunutbu
p1366
ssVis_accepted
p1367
I01
sVlast_edit_date
p1368
I1313419697
sVanswer_id
p1369
I7066293
sa(dp1370
Vbody
p1371
V<p>in the CLI you can do this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import django\u000a&gt;&gt;&gt; django\u000a&lt;module 'django' from '/usr/local/lib/python2.6/dist-packages/django/__init__.pyc'&gt;\u000a</code></pre>\u000a
p1372
sVquestion_id
p1373
I7037468
sVlast_activity_date
p1374
I1313137897
sVcreation_date
p1375
I1313137897
sVscore
p1376
I105
sVowner
p1377
(dp1378
Vuser_id
p1379
I358328
sVprofile_image
p1380
Vhttps://www.gravatar.com/avatar/d56c3972b607b39dc840acef5fca07d0?s=128&d=identicon&r=PG
p1381
sVuser_type
p1382
Vregistered
p1383
sVreputation
p1384
I24497
sVlink
p1385
Vhttp://stackoverflow.com/users/358328/uku-loskit
p1386
sVaccept_rate
p1387
I90
sVdisplay_name
p1388
VUku Loskit
p1389
ssVis_accepted
p1390
I01
sVanswer_id
p1391
I7037502
sa(dp1392
Vbody
p1393
V<p>(disclaimer: I am the project leader for web2py)</p>\u000a\u000a<p>Django has been around 5 years longer than web2py therefore it has more users and more applications to show off. Django has what they call "admin" which is not the same as web2py's "admin" but more like web2py's "appadmin". Django's "admin" is better and more customizable than web2py's "appadmin". Django does not have the equivalent of web2py's "admin". (sorry for the name confusion).</p>\u000a\u000a<p>web2py is more compact and has more functionality out of the box (more supported databases, web based IDE, ticketing system, runs on GAE without patches, multiple login methods, role based access control, web based translation interface, support for multiple database connections, distributed transactions, and more).</p>\u000a\u000a<p>For me the most important functionality of web2py is automatic migrations. Django does not provide them out of the box.</p>\u000a\u000a<p>For web2py long term backward compatibility is a primary goal, together with security. Django is comparable to web2py in terms of security (except that web2py had CSRF prevention and default escaping in templates before they did) but Django broke backward compatibility when 1.0 was released. web2py never did since Oct 2007.</p>\u000a\u000a<p>To me the web2py syntax is more natural:</p>\u000a\u000a<pre><code> db(db.tablename.fieldname &lt;= value).select() # web2py\u000a Tablename.objects.filter(fieldname__lt=value) # Django\u000a</code></pre>\u000a\u000a<p>I am not aware of any functionality of web2py that is not present in Django. I have asked that question many times because, if there is, we want to add it to web2py, but I have not yet received a satisfactory answer.</p>\u000a\u000a<p>Of course there are things that we both do but differently. Django follows "explicit is better than implicit". web2py does not and instead follows "everything should have a default behavior". I believe this makes web2py code and configuration more compact.</p>\u000a\u000a<p>Anyway, whatever you choose, they are too good solid web frameworks and the similarities are less than the differences. The Django developers are very smart people.</p>\u000a\u000a<p>The web2py community is very friendly. You should try ask a question on the web2py google group and on the Django group. Just as an experiment.</p>\u000a
p1394
sVquestion_id
p1395
I4352428
sVlast_activity_date
p1396
I1311890367
sVcreation_date
p1397
I1291457566
sVscore
p1398
I91
sVowner
p1399
(dp1400
Vuser_id
p1401
I71589
sVprofile_image
p1402
Vhttps://www.gravatar.com/avatar/fd962cc7a79f1ae2e566363d7d8383cd?s=128&d=identicon&r=PG
p1403
sVuser_type
p1404
Vregistered
p1405
sVreputation
p1406
I4005
sVlink
p1407
Vhttp://stackoverflow.com/users/71589/mdipierro
p1408
sVdisplay_name
p1409
Vmdipierro
p1410
ssVis_accepted
p1411
I01
sVlast_edit_date
p1412
I1311890367
sVanswer_id
p1413
I4353033
sa(dp1414
Vbody
p1415
V<p>It is already a list</p>\u000a\u000a<pre><code>type(my_set)\u000a&gt;&gt;&gt; &lt;type 'list'&gt;\u000a</code></pre>\u000a\u000a<p>Do you want something like </p>\u000a\u000a<pre><code>my_set = set([1,2,3,4])\u000amy_list = list(my_set)\u000aprint my_list\u000a&gt;&gt; [1, 2, 3, 4]\u000a</code></pre>\u000a\u000a<p>EDIT : \u000aOutput of your last comment</p>\u000a\u000a<pre><code>&gt;&gt;&gt; my_list = [1,2,3,4]\u000a&gt;&gt;&gt; my_set = set(my_list)\u000a&gt;&gt;&gt; my_new_list = list(my_set)\u000a&gt;&gt;&gt; print my_new_list\u000a[1, 2, 3, 4]\u000a</code></pre>\u000a\u000a<p>I'm wondering if you did something like this : </p>\u000a\u000a<pre><code>&gt;&gt;&gt; set=set()\u000a&gt;&gt;&gt; set([1,2])\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aTypeError: 'set' object is not callable\u000a</code></pre>\u000a
p1416
sVquestion_id
p1417
I6593979
sVlast_activity_date
p1418
I1309945701
sVcreation_date
p1419
I1309943476
sVscore
p1420
I101
sVowner
p1421
(dp1422
Vuser_id
p1423
I781695
sVprofile_image
p1424
Vhttps://www.gravatar.com/avatar/896410dc2f846d0ee4c405984bed48ca?s=128&d=identicon&r=PG&f=1
p1425
sVuser_type
p1426
Vregistered
p1427
sVreputation
p1428
I7992
sVlink
p1429
Vhttp://stackoverflow.com/users/781695/medorator
p1430
sVaccept_rate
p1431
I85
sVdisplay_name
p1432
VMedorator
p1433
ssVis_accepted
p1434
I01
sVlast_edit_date
p1435
I1309945701
sVanswer_id
p1436
I6594009
sa(dp1437
Vbody
p1438
V<p>You are reading the wrong documentation. You want this: <a href="http://peak.telecommunity.com/DevCenter/setuptools" rel="noreferrer">http://peak.telecommunity.com/DevCenter/setuptools</a></p>\u000a\u000a<ol>\u000a<li><p>Creating setup.py is covered in the distutils documentation in Python's standard library documentation <a href="http://docs.python.org/distutils/setupscript.html" rel="noreferrer">here</a>. The main difference (for python eggs) is you <code>import setup</code> from <code>setuptools</code>, not <code>distutils</code>.</p></li>\u000a<li><p>Yep. That should be right.</p></li>\u000a<li><p>I don't think so. <code>pyc</code> files can be version and platform dependent. You might be able to open the egg (they should just be zip files) and delete <code>.py</code> files leaving <code>.pyc</code> files, but it wouldn't be recommended.</p></li>\u000a<li><p>I'm not sure. That might be \u201cDevelopment Mode\u201d. Or are you looking for some \u201cpy2exe\u201d or \u201cpy2app\u201d mode?</p></li>\u000a</ol>\u000a
p1439
sVquestion_id
p1440
I2026395
sVlast_activity_date
p1441
I1297509964
sVcreation_date
p1442
I1262948082
sVscore
p1443
I65
sVowner
p1444
(dp1445
Vuser_id
p1446
I207028
sVprofile_image
p1447
Vhttps://www.gravatar.com/avatar/94bef01465a5b1125c79ef16e152a246?s=128&d=identicon&r=PG
p1448
sVuser_type
p1449
Vregistered
p1450
sVreputation
p1451
I5172
sVlink
p1452
Vhttp://stackoverflow.com/users/207028/wisty
p1453
sVdisplay_name
p1454
Vwisty
p1455
ssVis_accepted
p1456
I01
sVlast_edit_date
p1457
I1297509964
sVanswer_id
p1458
I2027033
sa(dp1459
Vbody
p1460
V<p>Have a look at the <a href="http://docs.python.org/library/copy.html#copy.deepcopy" rel="noreferrer"><code>copy.deepcopy()</code></a> function.  It should do exactly what you need.  Also have a look at <a href="http://stackoverflow.com/questions/3975376/understanding-dict-copy-shallow-or-deep/3975388#3975388">this answer</a> to a related question for a nice explanation.</p>\u000a
p1461
sVquestion_id
p1462
I4794244
sVlast_activity_date
p1463
I1295963865
sVcreation_date
p1464
I1295963373
sVscore
p1465
I81
sVowner
p1466
(dp1467
Vuser_id
p1468
I279627
sVprofile_image
p1469
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1470
sVuser_type
p1471
Vregistered
p1472
sVreputation
p1473
I252330
sVlink
p1474
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1475
sVaccept_rate
p1476
I78
sVdisplay_name
p1477
VSven Marnach
p1478
ssVis_accepted
p1479
I01
sVlast_edit_date
p1480
I1295963865
sVanswer_id
p1481
I4794254
sa(dp1482
Vbody
p1483
V<p>Your "scary" solution does not appear scary to me.  Calling <code>shuffle()</code> for two sequences of the same length results in the same number of calls to the random number generator, and these are the only "random" elements in the shuffle algorithm.  By resetting the state, you ensure that the calls to the random number generator will give the same results in the second call to <code>shuffle()</code>, so the whole algorithm will generate the same permutation.</p>\u000a\u000a<p>If you don't like this, a different solution would be to store your data in one array instead of two right from the beginning, and create two views into this single array simulating the two arrays you have now.  You can use the single array for shuffling and the views for all other purposes.</p>\u000a\u000a<p>Example: Let's assume the arrays <code>a</code> and <code>b</code> look like this:</p>\u000a\u000a<pre><code>a = numpy.array([[[  0.,   1.,   2.],\u000a                  [  3.,   4.,   5.]],\u000a\u000a                 [[  6.,   7.,   8.],\u000a                  [  9.,  10.,  11.]],\u000a\u000a                 [[ 12.,  13.,  14.],\u000a                  [ 15.,  16.,  17.]]])\u000a\u000ab = numpy.array([[ 0.,  1.],\u000a                 [ 2.,  3.],\u000a                 [ 4.,  5.]])\u000a</code></pre>\u000a\u000a<p>We can now construct a single array containing all the data:</p>\u000a\u000a<pre><code>c = numpy.c_[a.reshape(len(a), -1), b.reshape(len(b), -1)]\u000a# array([[  0.,   1.,   2.,   3.,   4.,   5.,   0.,   1.],\u000a#        [  6.,   7.,   8.,   9.,  10.,  11.,   2.,   3.],\u000a#        [ 12.,  13.,  14.,  15.,  16.,  17.,   4.,   5.]])\u000a</code></pre>\u000a\u000a<p>Now we create views simulating the original <code>a</code> and <code>b</code>:</p>\u000a\u000a<pre><code>a2 = c[:, :a.size//len(a)].reshape(a.shape)\u000ab2 = c[:, a.size//len(a):].reshape(b.shape)\u000a</code></pre>\u000a\u000a<p>The data of <code>a2</code> and <code>b2</code> is shared with <code>c</code>.  To shuffle both arrays simultaneously, use <code>numpy.random.shuffle(c)</code>.</p>\u000a\u000a<p>In production code, you would of course try to avoid creating the original <code>a</code> and <code>b</code> at all and right away create <code>c</code>, <code>a2</code> and <code>b2</code>.</p>\u000a\u000a<p>This solution could be adapted to the case that <code>a</code> and <code>b</code> have different dtypes.</p>\u000a
p1484
sVquestion_id
p1485
I4601373
sVlast_activity_date
p1486
I1294227328
sVcreation_date
p1487
I1294227328
sVscore
p1488
I32
sVowner
p1489
(dp1490
Vuser_id
p1491
I279627
sVprofile_image
p1492
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p1493
sVuser_type
p1494
Vregistered
p1495
sVreputation
p1496
I252330
sVlink
p1497
Vhttp://stackoverflow.com/users/279627/sven-marnach
p1498
sVaccept_rate
p1499
I78
sVdisplay_name
p1500
VSven Marnach
p1501
ssVis_accepted
p1502
I01
sVanswer_id
p1503
I4603609
sa(dp1504
Vbody
p1505
V<p>In most cases, you shouldn't use a regex for that.</p>\u000a\u000a<pre><code>os.path.splitext(filename)[0]\u000a</code></pre>\u000a\u000a<p>This will also handle a filename like <code>.bashrc</code> correctly by keeping the whole name.</p>\u000a
p1506
sVquestion_id
p1507
I4444923
sVlast_activity_date
p1508
I1292365810
sVcreation_date
p1509
I1292365810
sVscore
p1510
I160
sVowner
p1511
(dp1512
Vuser_id
p1513
I9990
sVprofile_image
p1514
Vhttps://www.gravatar.com/avatar/2ef86667e42fe07c2bab670357a57fc5?s=128&d=identicon&r=PG
p1515
sVuser_type
p1516
Vregistered
p1517
sVreputation
p1518
I125205
sVlink
p1519
Vhttp://stackoverflow.com/users/9990/marcelo-cantos
p1520
sVaccept_rate
p1521
I81
sVdisplay_name
p1522
VMarcelo Cantos
p1523
ssVis_accepted
p1524
I01
sVanswer_id
p1525
I4444952
sa(dp1526
Vbody
p1527
V<p>What is <code>X</code>? If it is a 2D-array, how can you then compare its row to a number: <code>i &lt; 3</code>?</p>\u000a\u000a<p>EDIT after OP's comment:</p>\u000a\u000a<pre><code>A = array([[0, 1, 2], [0, 2, 0]])\u000aX = array([[0, 1, 2], [1, 2, 0], [2, 1, 2], [3, 2, 0]])\u000a</code></pre>\u000a\u000a<p>add to <code>A</code> all rows from <code>X</code> where the first element <code>&lt; 3</code>:</p>\u000a\u000a<pre><code>A = vstack((A, X[X[:,0] &lt; 3]))\u000a\u000a# returns: \u000aarray([[0, 1, 2],\u000a       [0, 2, 0],\u000a       [0, 1, 2],\u000a       [1, 2, 0],\u000a       [2, 1, 2]])\u000a</code></pre>\u000a
p1528
sVquestion_id
p1529
I3881453
sVlast_activity_date
p1530
I1286454044
sVcreation_date
p1531
I1286453642
sVscore
p1532
I63
sVowner
p1533
(dp1534
Vuser_id
p1535
I449449
sVprofile_image
p1536
Vhttps://www.gravatar.com/avatar/b52c27e86c87d931e654d6a2d2cdf974?s=128&d=identicon&r=PG
p1537
sVuser_type
p1538
Vregistered
p1539
sVreputation
p1540
I94835
sVlink
p1541
Vhttp://stackoverflow.com/users/449449/eumiro
p1542
sVaccept_rate
p1543
I100
sVdisplay_name
p1544
Veumiro
p1545
ssVis_accepted
p1546
I01
sVlast_edit_date
p1547
I1286454044
sVanswer_id
p1548
I3881487
sa(dp1549
Vbody
p1550
V<p>'pywin32' is its canonical name.</p>\u000a\u000a<p><a href="http://sourceforge.net/projects/pywin32/" rel="noreferrer">http://sourceforge.net/projects/pywin32/</a></p>\u000a
p1551
sVquestion_id
p1552
I3580855
sVlast_activity_date
p1553
I1282875462
sVcreation_date
p1554
I1282875462
sVscore
p1555
I56
sVowner
p1556
(dp1557
Vuser_id
p1558
I65845
sVprofile_image
p1559
Vhttps://www.gravatar.com/avatar/00c81940d10e0fe6c4c3ebfd79be895d?s=128&d=identicon&r=PG
p1560
sVuser_type
p1561
Vregistered
p1562
sVreputation
p1563
I12722
sVlink
p1564
Vhttp://stackoverflow.com/users/65845/dash-tom-bang
p1565
sVaccept_rate
p1566
I100
sVdisplay_name
p1567
Vdash-tom-bang
p1568
ssVis_accepted
p1569
I01
sVanswer_id
p1570
I3580893
sa(dp1571
Vbody
p1572
V<p><code>os.path.isabs</code> returns <code>True</code> if the path is absolute, <code>False</code> if not. <a href="http://docs.python.org/library/os.path.html" rel="noreferrer">The documentation</a> says it works in windows (I can confirm it works in Linux personally).</p>\u000a\u000a<pre><code>os.path.isabs(my_path)\u000a</code></pre>\u000a
p1573
sVquestion_id
p1574
I3320406
sVlast_activity_date
p1575
I1279903677
sVcreation_date
p1576
I1279903677
sVscore
p1577
I103
sVowner
p1578
(dp1579
Vuser_id
p1580
I352268
sVprofile_image
p1581
Vhttps://www.gravatar.com/avatar/93fc5e3d9451b0d3fdb552423ceb52cd?s=128&d=identicon&r=PG
p1582
sVuser_type
p1583
Vregistered
p1584
sVreputation
p1585
I26149
sVlink
p1586
Vhttp://stackoverflow.com/users/352268/donald-miner
p1587
sVaccept_rate
p1588
I94
sVdisplay_name
p1589
VDonald Miner
p1590
ssVis_accepted
p1591
I01
sVanswer_id
p1592
I3320429
sa(dp1593
Vbody
p1594
V<p><code>words = [w.replace('[br]', '&lt;br /&gt;') for w in words]</code></p>\u000a\u000a<p>called <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">List Comprehensions</a></p>\u000a
p1595
sVquestion_id
p1596
I3136689
sVlast_activity_date
p1597
I1277765256
sVcreation_date
p1598
I1277765256
sVscore
p1599
I114
sVowner
p1600
(dp1601
Vuser_id
p1602
I141555
sVprofile_image
p1603
Vhttps://i.stack.imgur.com/g7wWn.jpg?s=128&g=1
p1604
sVuser_type
p1605
Vregistered
p1606
sVreputation
p1607
I61957
sVlink
p1608
Vhttp://stackoverflow.com/users/141555/sberry
p1609
sVaccept_rate
p1610
I91
sVdisplay_name
p1611
Vsberry
p1612
ssVis_accepted
p1613
I01
sVanswer_id
p1614
I3136703
sa(dp1615
Vbody
p1616
V<p>Here are three possibilities:</p>\u000a\u000a<pre><code>foo = """\u000athis is \u000aa multi-line string.\u000a"""\u000a\u000adef f1(foo=foo): return iter(foo.splitlines())\u000a\u000adef f2(foo=foo):\u000a    retval = ''\u000a    for char in foo:\u000a        retval += char if not char == '\u005cn' else ''\u000a        if char == '\u005cn':\u000a            yield retval\u000a            retval = ''\u000a    if retval:\u000a        yield retval\u000a\u000adef f3(foo=foo):\u000a    prevnl = -1\u000a    while True:\u000a      nextnl = foo.find('\u005cn', prevnl + 1)\u000a      if nextnl &lt; 0: break\u000a      yield foo[prevnl + 1:nextnl]\u000a      prevnl = nextnl\u000a\u000aif __name__ == '__main__':\u000a  for f in f1, f2, f3:\u000a    print list(f())\u000a</code></pre>\u000a\u000a<p>Running this as the main script confirms the three functions are equivalent. With <code>timeit</code> (and a <code>* 100</code> for <code>foo</code> to get substantial strings for more precise measurement):</p>\u000a\u000a<pre><code>$ python -mtimeit -s'import asp' 'list(asp.f3())'\u000a1000 loops, best of 3: 370 usec per loop\u000a$ python -mtimeit -s'import asp' 'list(asp.f2())'\u000a1000 loops, best of 3: 1.36 msec per loop\u000a$ python -mtimeit -s'import asp' 'list(asp.f1())'\u000a10000 loops, best of 3: 61.5 usec per loop\u000a</code></pre>\u000a\u000a<p>Note we need the <code>list()</code> call to ensure the iterators are traversed, not just built.</p>\u000a\u000a<p>IOW, the naive implementation is so much faster it isn't even funny: 6 times faster than my attempt with <code>find</code> calls, which in turn is 4 times faster than a lower-level approach.</p>\u000a\u000a<p>Lessons to retain: measurement is always a good thing (but must be accurate); string methods like <code>splitlines</code> are implemented in very fast ways; putting strings together by programming at a very low level (esp. by loops of <code>+=</code> of very small pieces) can be quite slow.</p>\u000a\u000a<p><strong>Edit</strong>: added @Jacob's proposal, slightly modified to give the same results as the others (trailing blanks on a line are kept), i.e.:</p>\u000a\u000a<pre><code>from cStringIO import StringIO\u000a\u000adef f4(foo=foo):\u000a    stri = StringIO(foo)\u000a    while True:\u000a        nl = stri.readline()\u000a        if nl != '':\u000a            yield nl.strip('\u005cn')\u000a        else:\u000a            raise StopIteration\u000a</code></pre>\u000a\u000a<p>Measuring gives:</p>\u000a\u000a<pre><code>$ python -mtimeit -s'import asp' 'list(asp.f4())'\u000a1000 loops, best of 3: 406 usec per loop\u000a</code></pre>\u000a\u000a<p>not quite as good as the <code>.find</code> based approach -- still, worth keeping in mind because it might be less prone to small off-by-one bugs (any loop where you see occurrences of +1 and -1, like my <code>f3</code> above, should automatically trigger off-by-one suspicions -- and so should many loops which lack such tweaks and should have them -- though I believe my code is also right since I was able to check its output with other functions').</p>\u000a\u000a<p>But the split-based approach still rules.</p>\u000a\u000a<p>An aside: possibly better style for <code>f4</code> would be:</p>\u000a\u000a<pre><code>from cStringIO import StringIO\u000a\u000adef f4(foo=foo):\u000a    stri = StringIO(foo)\u000a    while True:\u000a        nl = stri.readline()\u000a        if nl == '': break\u000a        yield nl.strip('\u005cn')\u000a</code></pre>\u000a\u000a<p>at least, it's a bit less verbose.  The need to strip trailing <code>\u005cn</code>s unfortunately prohibits the clearer and faster replacement of the <code>while</code> loop with <code>return iter(stri)</code> (the <code>iter</code> part whereof is redundant in modern versions of Python, I believe since 2.3 or 2.4, but it's also innocuous).  Maybe worth trying, also:</p>\u000a\u000a<pre><code>    return itertools.imap(lambda s: s.strip('\u005cn'), stri)\u000a</code></pre>\u000a\u000a<p>or variations thereof -- but I'm stopping here since it's pretty much a theoretical exercise wrt the <code>strip</code> based, simplest and fastest, one.</p>\u000a
p1617
sVquestion_id
p1618
I3054604
sVlast_activity_date
p1619
I1276703523
sVcreation_date
p1620
I1276702723
sVscore
p1621
I93
sVowner
p1622
(dp1623
Vuser_id
p1624
I95810
sVprofile_image
p1625
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1626
sVuser_type
p1627
Vregistered
p1628
sVreputation
p1629
I516089
sVlink
p1630
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1631
sVaccept_rate
p1632
I80
sVdisplay_name
p1633
VAlex Martelli
p1634
ssVis_accepted
p1635
I01
sVlast_edit_date
p1636
I1276703523
sVanswer_id
p1637
I3054831
sa(dp1638
Vbody
p1639
V<ul>\u000a<li><code>urllib2</code> is found in every Python install everywhere, so is a good base upon which to start.</li>\u000a<li><code>PycURL</code> is useful for people already used to using libcurl, exposes more of the low-level details of HTTP, plus it gains any fixes or improvements applied to libcurl.</li>\u000a<li><code>mechanize</code> is used to persistently drive a connection much like a browser would.</li>\u000a</ul>\u000a\u000a<p>It's not a matter of one being better than the other, it's a matter of choosing the appropriate tool for the job.</p>\u000a
p1640
sVquestion_id
p1641
I2385855
sVlast_activity_date
p1642
I1267784472
sVcreation_date
p1643
I1267784472
sVscore
p1644
I35
sVowner
p1645
(dp1646
Vuser_id
p1647
I20862
sVprofile_image
p1648
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p1649
sVuser_type
p1650
Vregistered
p1651
sVreputation
p1652
I481018
sVlink
p1653
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p1654
sVaccept_rate
p1655
I60
sVdisplay_name
p1656
VIgnacio Vazquez-Abrams
p1657
ssVis_accepted
p1658
I01
sVanswer_id
p1659
I2385955
sa(dp1660
Vbody
p1661
V<p>You should post your example document, because the code works fine:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import BeautifulSoup\u000a&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div id="articlebody"&gt; ... &lt;/div&gt;&lt;/body&gt;&lt;/html')\u000a&gt;&gt;&gt; soup.find("div", {"id": "articlebody"})\u000a&lt;div id="articlebody"&gt; ... &lt;/div&gt;\u000a</code></pre>\u000a\u000a<p>Finding <code>&lt;div&gt;</code>s inside <code>&lt;div&gt;</code>s works as well:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;div id="articlebody"&gt; ... &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html')\u000a&gt;&gt;&gt; soup.find("div", {"id": "articlebody"})\u000a&lt;div id="articlebody"&gt; ... &lt;/div&gt;\u000a</code></pre>\u000a
p1662
sVquestion_id
p1663
I2136267
sVlast_activity_date
p1664
I1264460531
sVcreation_date
p1665
I1264460130
sVscore
p1666
I94
sVowner
p1667
(dp1668
Vuser_id
p1669
I60950
sVprofile_image
p1670
Vhttps://i.stack.imgur.com/LwZVH.jpg?s=128&g=1
p1671
sVuser_type
p1672
Vregistered
p1673
sVreputation
p1674
I29647
sVlink
p1675
Vhttp://stackoverflow.com/users/60950/luk%c3%a1%c5%a1-lalinsk%c3%bd
p1676
sVaccept_rate
p1677
I57
sVdisplay_name
p1678
VLuk&#225;\u0161 Lalinsk&#253;
p1679
ssVis_accepted
p1680
I01
sVlast_edit_date
p1681
I1264460531
sVanswer_id
p1682
I2136323
sa(dp1683
Vbody
p1684
V<p>There are only slight differences in the two.  You can use the <code>dis</code> module to examine this sort of thing for yourself.  </p>\u000a\u000a<p><strong>Edit:</strong> My first version decompiled the generator expression created at module-scope in the interactive prompt.  That's slightly different from the OP's version with it used inside a function.  I've modified this to match the actual case in the question.</p>\u000a\u000a<p>As you can see below, the "yield" generator (first case) has three extra instructions in the setup, but from the first <code>FOR_ITER</code> they differ in only one respect:  the "yield" approach uses a <code>LOAD_FAST</code> in place of a <code>LOAD_DEREF</code> inside the loop.  The <code>LOAD_DEREF</code> is <a href="http://www.opensubscriber.com/message/python-list@python.org/7844960.html" rel="noreferrer">"rather slower"</a> than <code>LOAD_FAST</code>, so it makes the "yield" version slightly faster than the generator expression for large enough values of <code>x</code> (the outer loop) because the value of <code>y</code> is loaded slightly faster on each pass.  For smaller values of <code>x</code> it would be slightly slower because of the extra overhead of the setup code.</p>\u000a\u000a<p>It might also be worth pointing out that the generator expression would usually be used inline in the code, rather than wrapping it with the function like that.  That would remove a bit of the setup overhead and keep the generator expression slightly faster for smaller loop values even if <code>LOAD_FAST</code> gave the "yield" version an advantage otherwise.</p>\u000a\u000a<p>In neither case would the performance difference be enough to justify deciding between one or the other.  Readability counts far more, so use whichever feels most readable for the situation at hand.  </p>\u000a\u000a<pre><code>&gt;&gt;&gt; def Generator(x, y):\u000a...     for i in xrange(x):\u000a...         for j in xrange(y):\u000a...             yield(i, j)\u000a...\u000a&gt;&gt;&gt; dis.dis(Generator)\u000a  2           0 SETUP_LOOP              54 (to 57)\u000a              3 LOAD_GLOBAL              0 (xrange)\u000a              6 LOAD_FAST                0 (x)\u000a              9 CALL_FUNCTION            1\u000a             12 GET_ITER\u000a        &gt;&gt;   13 FOR_ITER                40 (to 56)\u000a             16 STORE_FAST               2 (i)\u000a\u000a  3          19 SETUP_LOOP              31 (to 53)\u000a             22 LOAD_GLOBAL              0 (xrange)\u000a             25 LOAD_FAST                1 (y)\u000a             28 CALL_FUNCTION            1\u000a             31 GET_ITER\u000a        &gt;&gt;   32 FOR_ITER                17 (to 52)\u000a             35 STORE_FAST               3 (j)\u000a\u000a  4          38 LOAD_FAST                2 (i)\u000a             41 LOAD_FAST                3 (j)\u000a             44 BUILD_TUPLE              2\u000a             47 YIELD_VALUE\u000a             48 POP_TOP\u000a             49 JUMP_ABSOLUTE           32\u000a        &gt;&gt;   52 POP_BLOCK\u000a        &gt;&gt;   53 JUMP_ABSOLUTE           13\u000a        &gt;&gt;   56 POP_BLOCK\u000a        &gt;&gt;   57 LOAD_CONST               0 (None)\u000a             60 RETURN_VALUE\u000a&gt;&gt;&gt; def Generator_expr(x, y):\u000a...    return ((i, j) for i in xrange(x) for j in xrange(y))\u000a...\u000a&gt;&gt;&gt; dis.dis(Generator_expr.func_code.co_consts[1])\u000a  2           0 SETUP_LOOP              47 (to 50)\u000a              3 LOAD_FAST                0 (.0)\u000a        &gt;&gt;    6 FOR_ITER                40 (to 49)\u000a              9 STORE_FAST               1 (i)\u000a             12 SETUP_LOOP              31 (to 46)\u000a             15 LOAD_GLOBAL              0 (xrange)\u000a             18 LOAD_DEREF               0 (y)\u000a             21 CALL_FUNCTION            1\u000a             24 GET_ITER\u000a        &gt;&gt;   25 FOR_ITER                17 (to 45)\u000a             28 STORE_FAST               2 (j)\u000a             31 LOAD_FAST                1 (i)\u000a             34 LOAD_FAST                2 (j)\u000a             37 BUILD_TUPLE              2\u000a             40 YIELD_VALUE\u000a             41 POP_TOP\u000a             42 JUMP_ABSOLUTE           25\u000a        &gt;&gt;   45 POP_BLOCK\u000a        &gt;&gt;   46 JUMP_ABSOLUTE            6\u000a        &gt;&gt;   49 POP_BLOCK\u000a        &gt;&gt;   50 LOAD_CONST               0 (None)\u000a             53 RETURN_VALUE\u000a</code></pre>\u000a
p1685
sVquestion_id
p1686
I1995418
sVlast_activity_date
p1687
I1262542930
sVcreation_date
p1688
I1262539032
sVscore
p1689
I64
sVowner
p1690
(dp1691
Vuser_id
p1692
I221537
sVprofile_image
p1693
Vhttps://www.gravatar.com/avatar/64e12c52680644f0557961c931e50f7d?s=128&d=identicon&r=PG
p1694
sVuser_type
p1695
Vregistered
p1696
sVreputation
p1697
I12554
sVlink
p1698
Vhttp://stackoverflow.com/users/221537/peter-hansen
p1699
sVaccept_rate
p1700
I100
sVdisplay_name
p1701
VPeter Hansen
p1702
ssVis_accepted
p1703
I01
sVlast_edit_date
p1704
I1262542930
sVanswer_id
p1705
I1995585
sa(dp1706
Vbody
p1707
V<p><a href="http://pypi.python.org/pypi/Unidecode" rel="noreferrer">Unidecode</a> looks like a complete solution. It converts fancy quotes to ascii quotes, accented latin characters to unaccented and even attempts transliteration to deal with characters that don't have ASCII equivalents. That way your users don't have to see a bunch of ? when you had to pass their text through a legacy 7-bit ascii system.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from unidecode import unidecode\u000a&gt;&gt;&gt; print unidecode(u"\u005cu5317\u005cu4EB0")\u000aBei Jing \u000a</code></pre>\u000a\u000a<p><a href="http://www.tablix.org/~avian/blog/archives/2009/01/unicode_transliteration_in_python/" rel="noreferrer">http://www.tablix.org/~avian/blog/archives/2009/01/unicode_transliteration_in_python/</a></p>\u000a
p1708
sVquestion_id
p1709
I816285
sVlast_activity_date
p1710
I1257779922
sVcreation_date
p1711
I1257777443
sVscore
p1712
I79
sVowner
p1713
(dp1714
Vuser_id
p1715
I36330
sVprofile_image
p1716
Vhttps://www.gravatar.com/avatar/087bc3a6b2fe0dbbf39ca49f40e2bac1?s=128&d=identicon&r=PG
p1717
sVuser_type
p1718
Vregistered
p1719
sVreputation
p1720
I20580
sVlink
p1721
Vhttp://stackoverflow.com/users/36330/joeforker
p1722
sVaccept_rate
p1723
I78
sVdisplay_name
p1724
Vjoeforker
p1725
ssVis_accepted
p1726
I01
sVlast_edit_date
p1727
I1257779922
sVanswer_id
p1728
I1701378
sa(dp1729
Vbody
p1730
V<p>You'll probably want to consider implementing it another way. Are you aware of the weakref module?</p>\u000a\u000a<p>(Edited) The Python <a href="http://docs.python.org/library/weakref.html" rel="noreferrer">weakref module</a> lets you keep references, dictionary references, and proxies to objects without having those references count in the reference counter. They're like symbolic links.</p>\u000a
p1731
sVquestion_id
p1732
I1396668
sVlast_activity_date
p1733
I1257731657
sVcreation_date
p1734
I1252449991
sVscore
p1735
I20
sVowner
p1736
(dp1737
Vuser_id
p1738
I170431
sVprofile_image
p1739
Vhttps://www.gravatar.com/avatar/7feff4d90590f89b861db4135bcc36e3?s=128&d=identicon&r=PG
p1740
sVuser_type
p1741
Vregistered
p1742
sVreputation
p1743
I4566
sVlink
p1744
Vhttp://stackoverflow.com/users/170431/ken-kinder
p1745
sVaccept_rate
p1746
I97
sVdisplay_name
p1747
VKen Kinder
p1748
ssVis_accepted
p1749
I01
sVlast_edit_date
p1750
I1257731657
sVanswer_id
p1751
I1396739
sa(dp1752
Vbody
p1753
V<p>Raising exceptions within <code>__init__()</code> is absolutely fine. There's no other good way to indicate an error condition within a constructor, and there are many hundreds of examples in the standard library where building an object can raise an exception.</p>\u000a\u000a<p>The error class to raise, of course, is up to you. <code>ValueError</code> is best if the constructor was passed an invalid parameter.</p>\u000a
p1754
sVquestion_id
p1755
I1507082
sVlast_activity_date
p1756
I1254441566
sVcreation_date
p1757
I1254441566
sVscore
p1758
I97
sVowner
p1759
(dp1760
Vuser_id
p1761
I3560
sVprofile_image
p1762
Vhttps://www.gravatar.com/avatar/4acd21acc7b1f605466f2f48189a7177?s=128&d=identicon&r=PG
p1763
sVuser_type
p1764
Vregistered
p1765
sVreputation
p1766
I133151
sVlink
p1767
Vhttp://stackoverflow.com/users/3560/john-millikin
p1768
sVaccept_rate
p1769
I83
sVdisplay_name
p1770
VJohn Millikin
p1771
ssVis_accepted
p1772
I01
sVanswer_id
p1773
I1507127
sa(dp1774
Vbody
p1775
V<pre><code>&gt;&gt;&gt; import re\u000a&gt;&gt;&gt; re.sub("[^0-9]", "", "sdkjh987978asd098as0980a98sd")\u000a'987978098098098'\u000a</code></pre>\u000a
p1776
sVquestion_id
p1777
I1249388
sVlast_activity_date
p1778
I1249752321
sVcreation_date
p1779
I1249752321
sVscore
p1780
I133
sVowner
p1781
(dp1782
Vuser_id
p1783
I14343
sVprofile_image
p1784
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p1785
sVuser_type
p1786
Vregistered
p1787
sVreputation
p1788
I193903
sVlink
p1789
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p1790
sVaccept_rate
p1791
I80
sVdisplay_name
p1792
VNed Batchelder
p1793
ssVis_accepted
p1794
I01
sVanswer_id
p1795
I1249424
sa(dp1796
Vbody
p1797
V<p>You are referring to the run-time duck-typing as "overriding" inheritance, however I believe inheritance has its own merits as a design and implementation approach, being an integral part of object oriented design. In my humble opinion, the question of whether you can achieve something otherwise is not very relevant, because actually you could code Python without classes, functions and more, but the question is how well-designed, robust and readable your code will be.</p>\u000a\u000a<p>I can give two examples for where inheritance is the right approach in my opinion, I'm sure there are more. </p>\u000a\u000a<p>First, if you code wisely, your makeSpeak function may want to validate that its input is indeed an Animal, and not only that "it can speak", in which case the most elegant method would be to use inheritance. Again, you can do it in other ways, but that's the beauty of object oriented design with inheritance - your code will "really" check whether the input is an "animal".</p>\u000a\u000a<p>Second, and clearly more straightforward, is Encapsulation - another integral part of object oriented design. This becomes relevant when the ancestor has data members and/or non-abstract methods. Take the following silly example, in which the ancestor has a function (speak_twice) that invokes a then-abstract function:</p>\u000a\u000a<pre><code>class Animal(object):\u000a    def speak(self):\u000a        raise NotImplementedError()\u000a\u000a    def speak_twice(self):\u000a        self.speak()\u000a        self.speak()\u000a\u000aclass Dog(Animal):\u000a    def speak(self):\u000a        print "woff!"\u000a\u000aclass Cat(Animal):\u000a    def speak(self):\u000a        print "meow"\u000a</code></pre>\u000a\u000a<p>Assuming <code>"speak_twice"</code> is an important feature, you don't want to code it in both Dog and Cat, and I'm sure you can extrapolate this example. Sure, you could implement a Python stand-alone function that will accept some duck-typed object, check whether it has a speak function and invoke it twice, but that's both non-elegant and misses point number 1 (validate it's an Animal). Even worse, and to strengthen the Encapsulation example, what if a member function in the descendant class wanted to use <code>"speak_twice"</code>?</p>\u000a\u000a<p>It gets even clearer if the ancestor class has a data member, for example <code>"number_of_legs"</code> that is used by non-abstract methods in the ancestor like <code>"print_number_of_legs"</code>, but is initiated in the descendant class' constructor (e.g. Dog would initialize it with 4 whereas Snake would initialize it with 0). </p>\u000a\u000a<p>Again, I'm sure there are endless more examples, but basically every (large enough) software that is based on solid object oriented design will require inheritance.</p>\u000a
p1798
sVquestion_id
p1799
I1020453
sVlast_activity_date
p1800
I1249397446
sVcreation_date
p1801
I1245454548
sVscore
p1802
I79
sVowner
p1803
(dp1804
Vuser_id
p1805
I103532
sVprofile_image
p1806
Vhttps://www.gravatar.com/avatar/c68b04ee740b7ef9284da1b7c89aa98c?s=128&d=identicon&r=PG
p1807
sVuser_type
p1808
Vregistered
p1809
sVreputation
p1810
I14235
sVlink
p1811
Vhttp://stackoverflow.com/users/103532/roee-adler
p1812
sVaccept_rate
p1813
I91
sVdisplay_name
p1814
VRoee Adler
p1815
ssVis_accepted
p1816
I01
sVlast_edit_date
p1817
I1249397446
sVanswer_id
p1818
I1020482
sa(dp1819
Vbody
p1820
V<p>There's the <code>%</code> sign.  It's not just for the remainder, it is the modulo operation.</p>\u000a
p1821
sVquestion_id
p1822
I991027
sVlast_activity_date
p1823
I1244912363
sVcreation_date
p1824
I1244912363
sVscore
p1825
I108
sVowner
p1826
(dp1827
Vuser_id
p1828
I7536
sVprofile_image
p1829
Vhttps://www.gravatar.com/avatar/69aa4b5b81a1d2120c98ceed09446489?s=128&d=identicon&r=PG
p1830
sVuser_type
p1831
Vregistered
p1832
sVreputation
p1833
I25117
sVlink
p1834
Vhttp://stackoverflow.com/users/7536/eduffy
p1835
sVaccept_rate
p1836
I80
sVdisplay_name
p1837
Veduffy
p1838
ssVis_accepted
p1839
I01
sVanswer_id
p1840
I991034
sa(dp1841
Vbody
p1842
V<p>You can also use the mimetypes module:</p>\u000a\u000a<pre><code>import mimetypes\u000a...\u000amime = mimetypes.guess_type(file)\u000a</code></pre>\u000a\u000a<p>It's fairly easy to compile a list of binary mime types. For example Apache distributes with a mime.types file that you could parse into a set of lists, binary and text and then check to see if the mime is in your text or binary list.</p>\u000a
p1843
sVquestion_id
p1844
I898669
sVlast_activity_date
p1845
I1243009310
sVcreation_date
p1846
I1243009310
sVscore
p1847
I29
sVowner
p1848
(dp1849
Vuser_id
p1850
I13203
sVprofile_image
p1851
Vhttps://www.gravatar.com/avatar/8fe16e83d61a365286ff73b1d207d54a?s=128&d=identicon&r=PG
p1852
sVuser_type
p1853
Vregistered
p1854
sVreputation
p1855
I2305
sVlink
p1856
Vhttp://stackoverflow.com/users/13203/gavin-m-roy
p1857
sVaccept_rate
p1858
I100
sVdisplay_name
p1859
VGavin M. Roy
p1860
ssVis_accepted
p1861
I01
sVanswer_id
p1862
I898723
sa(dp1863
Vbody
p1864
V<p>It varies based on the options that you pass to <code>install</code> and the contents of the <a href="http://docs.python.org/install/index.html#inst-config-files" rel="noreferrer">distutils configuration files</a> on the system/in the package. I don't believe that any files are modified outside of directories specified in these ways.</p>\u000a\u000a<p>Notably, <a href="http://bugs.python.org/issue4673" rel="noreferrer">distutils does not have an uninstall command</a> at this time. </p>\u000a\u000a<p>It's also noteworthy that deleting a package/egg can cause dependency issues -- utilities like <a href="http://peak.telecommunity.com/DevCenter/EasyInstall" rel="noreferrer"><code>easy_install</code></a> attempt to alleviate such problems.</p>\u000a
p1865
sVquestion_id
p1866
I402359
sVlast_activity_date
p1867
I1230706804
sVcreation_date
p1868
I1230706804
sVscore
p1869
I35
sVowner
p1870
(dp1871
Vuser_id
p1872
I3594
sVprofile_image
p1873
Vhttps://www.gravatar.com/avatar/5928057c2aff65b162eb34d5cc3797fa?s=128&d=identicon&r=PG
p1874
sVuser_type
p1875
Vregistered
p1876
sVreputation
p1877
I29354
sVlink
p1878
Vhttp://stackoverflow.com/users/3594/cdleary
p1879
sVaccept_rate
p1880
I95
sVdisplay_name
p1881
Vcdleary
p1882
ssVis_accepted
p1883
I01
sVanswer_id
p1884
I402444
sa(dp1885
Vbody
p1886
V<p>Well, you can make things a little easier by fixing up the syntax:</p>\u000a\u000a<pre><code>def r(a):\u000a  i = a.find('0')\u000a  ~i or exit(a)\u000a  [m in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3)or a[j]for j in range(81)] or r(a[:i]+m+a[i+1:])for m in'%d'%5**18]\u000afrom sys import *\u000ar(argv[1])\u000a</code></pre>\u000a\u000a<p>Cleaning up a little:</p>\u000a\u000a<pre><code>from sys import exit, argv\u000adef r(a):\u000a  i = a.find('0')\u000a  if i == -1:\u000a    exit(a)\u000a  for m in '%d' % 5**18:\u000a    m in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3) or a[j] for j in range(81)] or r(a[:i]+m+a[i+1:])\u000a\u000ar(argv[1])\u000a</code></pre>\u000a\u000a<p>Okay, so this script expects a command-line argument, and calls the function r on it.  If there are no zeros in that string, r exits and prints out its argument.  </p>\u000a\u000a<blockquote>\u000a  <p>(If another type of object is passed,\u000a  None is equivalent to passing zero,\u000a  and any other object is printed to\u000a  sys.stderr  and results in an exit\u000a  code of 1. In particular,\u000a  sys.exit("some error message") is a\u000a  quick way to exit a program when an\u000a  error occurs. See\u000a  <a href="http://www.python.org/doc/2.5.2/lib/module-sys.html" rel="noreferrer">http://www.python.org/doc/2.5.2/lib/module-sys.html</a>)</p>\u000a</blockquote>\u000a\u000a<p>I guess this means that zeros correspond to open spaces, and a puzzle with no zeros is solved.  Then there's that nasty recursive expression.</p>\u000a\u000a<p>The loop is interesting: <code>for m in'%d'%5**18</code></p>\u000a\u000a<p>Why 5**18? It turns out that <code>'%d'%5**18</code> evaluates to <code>'3814697265625'</code>.  This is a string that has each digit 1-9 at least once, so maybe it's trying to place each of them.  In fact, it looks like this is what <code>r(a[:i]+m+a[i+1:])</code> is doing: recursively calling r, with the first blank filled in by a digit from that string.  But this only happens if the earlier expression is false.  Let's look at that:</p>\u000a\u000a<p><code>m in [(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3) or a[j] for j in range(81)]</code></p>\u000a\u000a<p>So the placement is done only if m is not in that monster list.  Each element is either a number (if the first expression is nonzero) or a character (if the first expression is zero).  m is ruled out as a possible substitution if it appears as a character, which can only happen if the first expression is zero.  When is the expression zero?</p>\u000a\u000a<p>It has three parts that are multiplied:</p>\u000a\u000a<ul>\u000a<li><code>(i-j)%9</code> which is zero if i and j are a multiple of 9 apart, i.e. the same column.</li>\u000a<li><code>(i/9^j/9)</code> which is zero if i/9 == j/9, i.e. the same row.</li>\u000a<li><code>(i/27^j/27|i%9/3^j%9/3)</code> which is zero if both of these are zero:</li>\u000a<li><ul>\u000a<li><code>i/27^j^27</code> which is zero if i/27 == j/27, i.e. the same block of three rows</li>\u000a</ul></li>\u000a<li><ul>\u000a<li><code>i%9/3^j%9/3</code> which is zero if i%9/3 == j%9/3, i.e. the same block of three columns</li>\u000a</ul></li>\u000a</ul>\u000a\u000a<p>If any of these three parts is zero, the entire expression is zero.  In other words, if i and j share a row, column, or 3x3 block, then the value of j can't be used as a candidate for the blank at i.  Aha!</p>\u000a\u000a<pre><code>from sys import exit, argv\u000adef r(a):\u000a  i = a.find('0')\u000a  if i == -1:\u000a    exit(a)\u000a  for m in '3814697265625':\u000a    okay = True\u000a    for j in range(81):\u000a      if (i-j)%9 == 0 or (i/9 == j/9) or (i/27 == j/27 and i%9/3 == j%9/3):\u000a        if a[j] == m:\u000a          okay = False\u000a          break\u000a    if okay:\u000a      # At this point, m is not excluded by any row, column, or block, so let's place it and recurse\u000a      r(a[:i]+m+a[i+1:])\u000a\u000ar(argv[1])\u000a</code></pre>\u000a\u000a<p>Note that if none of the placements work out, r will return and back up to the point where something else can be chosen, so it's a basic depth first algorithm.</p>\u000a\u000a<p>Not using any heuristics, it's not particularly efficient.  I took this puzzle from Wikipedia (<a href="http://en.wikipedia.org/wiki/Sudoku" rel="noreferrer">http://en.wikipedia.org/wiki/Sudoku</a>):</p>\u000a\u000a<pre><code>$ time python sudoku.py 530070000600195000098000060800060003400803001700020006060000280000419005000080079\u000a534678912672195348198342567859761423426853791713924856961537284287419635345286179\u000a\u000areal    0m47.881s\u000auser    0m47.223s\u000asys 0m0.137s\u000a</code></pre>\u000a\u000a<p>Addendum: How I would rewrite it as a maintenance programmer (this version has about a 93x speedup :)</p>\u000a\u000a<pre><code>import sys\u000a\u000adef same_row(i,j): return (i/9 == j/9)\u000adef same_col(i,j): return (i-j) % 9 == 0\u000adef same_block(i,j): return (i/27 == j/27 and i%9/3 == j%9/3)\u000a\u000adef r(a):\u000a  i = a.find('0')\u000a  if i == -1:\u000a    sys.exit(a)\u000a\u000a  excluded_numbers = set()\u000a  for j in range(81):\u000a    if same_row(i,j) or same_col(i,j) or same_block(i,j):\u000a      excluded_numbers.add(a[j])\u000a\u000a  for m in '123456789':\u000a    if m not in excluded_numbers:\u000a      # At this point, m is not excluded by any row, column, or block, so let's place it and recurse\u000a      r(a[:i]+m+a[i+1:])\u000a\u000aif __name__ == '__main__':\u000a  if len(sys.argv) == 2 and len(sys.argv[1]) == 81:\u000a    r(sys.argv[1])\u000a  else:\u000a    print 'Usage: python sudoku.py puzzle'\u000a    print '  where puzzle is an 81 character string representing the puzzle read left-to-right, top-to-bottom, and 0 is a blank'\u000a</code></pre>\u000a
p1887
sVquestion_id
p1888
I201461
sVlast_activity_date
p1889
I1224011632
sVcreation_date
p1890
I1224000021
sVscore
p1891
I207
sVowner
p1892
(dp1893
Vuser_id
p1894
I16113
sVprofile_image
p1895
Vhttps://www.gravatar.com/avatar/f78669c597d17996717bbdf3603bd33a?s=128&d=identicon&r=PG
p1896
sVuser_type
p1897
Vregistered
p1898
sVreputation
p1899
I2296
sVlink
p1900
Vhttp://stackoverflow.com/users/16113/bill-barksdale
p1901
sVdisplay_name
p1902
VBill Barksdale
p1903
ssVis_accepted
p1904
I01
sVlast_edit_date
p1905
I1224011632
sVanswer_id
p1906
I201771
sasVquota_max
p1907
I300
sVquota_remaining
p1908
I154
s.