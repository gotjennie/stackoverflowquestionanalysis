(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<pre><code>./manage.py migrate myapp zero\u000a</code></pre>\u000a\u000a<p>See: <a href="https://docs.djangoproject.com/en/1.9/ref/django-admin/#migrate" rel="nofollow noreferrer">https://docs.djangoproject.com/en/1.9/ref/django-admin/#migrate</a></p>\u000a\u000a<p>In Django 1.11: <a href="https://docs.djangoproject.com/en/1.11/ref/django-admin/#migrate" rel="nofollow noreferrer">https://docs.djangoproject.com/en/1.11/ref/django-admin/#migrate</a></p>\u000a
p6
sVquestion_id
p7
I6460598
sVlast_activity_date
p8
I1493206374
sVcreation_date
p9
I1308864252
sVscore
p10
I64
sVowner
p11
(dp12
Vuser_id
p13
I654031
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/9d0a45dd92ecc2cb15cdbc5f80befb15?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I114900
sVlink
p19
Vhttp://stackoverflow.com/users/654031/chris-pratt
p20
sVaccept_rate
p21
I77
sVdisplay_name
p22
VChris Pratt
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1493206374
sVanswer_id
p26
I6460788
sa(dp27
Vbody
p28
V<p><em>Updated for WTForms 2.1</em></p>\u000a\u000a<p>You can now as of WTForms 2.1 (December 2015) set rendering keywords by using the <code>render_kw=</code> parameter to the field constructor.</p>\u000a\u000a<p>So the field would look like:</p>\u000a\u000a<pre><code>abc = StringField('abc', [InputRequired()], render_kw={"placeholder": "test"})\u000a</code></pre>\u000a\u000a<p>Note while this is possible; it does start to bridge the line between code and presentation; so use it wisely!</p>\u000a\u000a<hr>\u000a\u000a<p><em>(Old answer, still true for versions older than WTForms 2.1)</em></p>\u000a\u000a<p><code>placeholder</code> is not supported in the Python constructor in WTforms 2.0.x and below.</p>\u000a\u000a<p>However, you can do this easily in your template:</p>\u000a\u000a<pre><code>{{ form.abc(placeholder="test") }}\u000a</code></pre>\u000a
p29
sVquestion_id
p30
I9749742
sVlast_activity_date
p31
I1491904125
sVcreation_date
p32
I1332233664
sVscore
p33
I60
sVowner
p34
(dp35
Vuser_id
p36
I244393
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/55eb813499c0cf9fd47e95690782bf83?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I9110
sVlink
p42
Vhttp://stackoverflow.com/users/244393/crast
p43
sVdisplay_name
p44
VCrast
p45
ssVis_accepted
p46
I01
sVlast_edit_date
p47
I1491904125
sVanswer_id
p48
I9783777
sa(dp49
Vbody
p50
V<p>Using the usual <a href="http://docs.python.org/library/itertools.html#recipes" rel="nofollow noreferrer">grouper recipe</a>, you could do:</p>\u000a\u000a<p><strong>Python 2:</strong></p>\u000a\u000a<pre><code>d = dict(itertools.izip_longest(*[iter(l)] * 2, fillvalue=""))\u000a</code></pre>\u000a\u000a<p><strong>Python 3:</strong></p>\u000a\u000a<pre><code>d = dict(itertools.zip_longest(*[iter(l)] * 2, fillvalue=""))\u000a</code></pre>\u000a
p51
sVquestion_id
p52
I6900955
sVlast_activity_date
p53
I1486331104
sVcreation_date
p54
I1312213703
sVscore
p55
I31
sVowner
p56
(dp57
Vuser_id
p58
I279627
sVprofile_image
p59
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p60
sVuser_type
p61
Vregistered
p62
sVreputation
p63
I252330
sVlink
p64
Vhttp://stackoverflow.com/users/279627/sven-marnach
p65
sVaccept_rate
p66
I78
sVdisplay_name
p67
VSven Marnach
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1486331104
sVanswer_id
p71
I6900977
sa(dp72
Vbody
p73
V<p>Paste the image into a transparent image with the right size as a background</p>\u000a\u000a<pre><code>from PIL import Image\u000asize = (36, 36)\u000aimage = Image.open(data)\u000aimage.thumbnail(size, Image.ANTIALIAS)\u000abackground = Image.new('RGBA', size, (255, 255, 255, 0))\u000abackground.paste(\u000a    image, (int((size[0] - image.size[0]) / 2), int((size[1] - image.size[1]) / 2))\u000a)\u000abackground.save("output.png")\u000a</code></pre>\u000a\u000a<p>EDIT: fixed syntax error</p>\u000a
p74
sVquestion_id
p75
I1386352
sVlast_activity_date
p76
I1481926087
sVcreation_date
p77
I1252262701
sVscore
p78
I61
sVowner
p79
(dp80
Vuser_id
p81
I97828
sVprofile_image
p82
Vhttps://www.gravatar.com/avatar/ec468ce2d7da3ab5a194716eb1cc5ef5?s=128&d=identicon&r=PG
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I64017
sVlink
p87
Vhttp://stackoverflow.com/users/97828/nadia-alramli
p88
sVdisplay_name
p89
VNadia Alramli
p90
ssVis_accepted
p91
I01
sVlast_edit_date
p92
I1481926087
sVanswer_id
p93
I1386382
sa(dp94
Vbody
p95
V<h3>The <code>range</code> objects are special:</h3>\u000a\u000a<p>Python will compare <strong><a href="https://docs.python.org/3.5/library/stdtypes.html#ranges" rel="nofollow noreferrer"><code>range</code></a></strong> objects as <em><a href="https://docs.python.org/3.5/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow noreferrer">Sequences</a></em>. What that essentially means is that <em>the comparison doesn't evaluate <strong>how</strong> they represent a given sequence but rather <strong>what</strong> they represent.</em></p>\u000a\u000a<p>The fact that the <code>start</code>, <code>stop</code> and <code>step</code> parameters are completely different plays no difference here because <em>they all represent an empty list when expanded</em>:</p>\u000a\u000a<p>For example, the first <code>range</code> object:</p>\u000a\u000a<pre><code>list(range(0))  # []\u000a</code></pre>\u000a\u000a<p>and the second <code>range</code> object:</p>\u000a\u000a<pre><code>list(range(2, 2, 2)) # []\u000a</code></pre>\u000a\u000a<p><em>Both represent an empty list</em> and since two empty lists compare equal (<code>True</code>) so will the <code>range</code> objects that <em>represent</em> them.</p>\u000a\u000a<p>As a result, you can have completely different <em>looking</em> <code>range</code> objects; if they represent the same sequence they will <em>compare</em> equal:</p>\u000a\u000a<pre><code>range(1, 5, 100) == range(1, 30, 100) \u000a</code></pre>\u000a\u000a<p>Both represent a list with a single element <code>[1]</code> so these two will also compare equal.</p>\u000a\u000a<hr>\u000a\u000a<h3>No, <code>range</code> objects are <em>really</em> special:</h3>\u000a\u000a<p>Do note, though, that even though the comparison doesn't evaluate <em>how</em> they represent a sequence the result of comparing <em>can be achieved</em> using <strong>solely</strong> the values of <code>start</code>, <code>step</code> along with the <code>len</code> of the <code>range</code> objects; this has very interesting implications with the speed of comparisons:</p>\u000a\u000a<pre><code>r0 = range(1, 1000000)    \u000ar1 = range(1, 1000000)\u000a\u000al0 = list(r0)    \u000al1 = list(r1)\u000a</code></pre>\u000a\u000a<p>Ranges compares super fast:</p>\u000a\u000a<pre><code>%timeit r0 == r1\u000aThe slowest run took 28.82 times longer than the fastest. This could mean that an intermediate result is being cached \u000a10000000 loops, best of 3: 160 ns per loop\u000a</code></pre>\u000a\u000a<p>on the other hand, the lists..</p>\u000a\u000a<pre><code>%timeit l0 == l1\u000a10 loops, best of 3: 27.8 ms per loop\u000a</code></pre>\u000a\u000a<p>Yeah..</p>\u000a\u000a<hr>\u000a\u000a<p>As <strong><a href="http://stackoverflow.com/users/4374739/superbiasedman">@SuperBiasedMan</a></strong> noted, this only applies to the range objects in Python 3. Python 2 <code>range()</code> is a plain ol' function that returns a list while the <code>2.x</code> <a href="https://hg.python.org/cpython/file/2.7/Objects/rangeobject.c#l185" rel="nofollow noreferrer"><code>xrange</code></a> object doesn't have the comparing capabilies (<em><a href="http://stackoverflow.com/questions/30081275/why-is-1000000000000000-in-range1000000000000001-so-fast-in-python-3?rq=1">and not only these..</a></em>) that <code>range</code> objects have in Python 3.</p>\u000a\u000a<p>Look at <strong><a href="http://stackoverflow.com/a/35014301/4952130">@ajcr's answer</a></strong> for quotes directly from the source code on Python 3 <code>range</code> objects. It's documented in there what the comparison between two different ranges actually entails: Simple quick operations. The <a href="https://github.com/python/cpython/blob/2f37d372927a4c2c843e2813c32354979c682919/Objects/rangeobject.c#L437" rel="nofollow noreferrer"><code>range_equals</code></a> function is utilized in the <em><a href="https://github.com/python/cpython/blob/2f37d372927a4c2c843e2813c32354979c682919/Objects/rangeobject.c#L468" rel="nofollow noreferrer"><code>range_richcompare</code> function</a></em> for <code>EQ</code> and <code>NE</code> cases and assigned to the <em><a href="https://github.com/python/cpython/blob/2f37d372927a4c2c843e2813c32354979c682919/Objects/rangeobject.c#L723" rel="nofollow noreferrer"><code>tp_richcompare</code> slot for <code>PyRange_Type</code> types</a></em>. </p>\u000a\u000a<p>I believe the implementation of <code>range_equals</code> is pretty readable (because it is nice as simple) to add here:</p>\u000a\u000a<pre class="lang-c prettyprint-override"><code>/* r0 and r1 are pointers to rangeobjects */\u000a\u000a/* Check if pointers point to same object, example:    \u000a       &gt;&gt;&gt; r1 = r2 = range(0, 10)\u000a       &gt;&gt;&gt; r1 == r2\u000a   obviously returns True. */\u000aif (r0 == r1)\u000a    return 1;\u000a\u000a/* Compare the length of the ranges, if they are equal \u000a   the checks continue. If they are not, False is returned. */\u000acmp_result = PyObject_RichCompareBool(r0-&gt;length, r1-&gt;length, Py_EQ);\u000a/* Return False or error to the caller\u000a       &gt;&gt;&gt; range(0, 10) == range(0, 10, 2)  \u000a   fails here */\u000aif (cmp_result != 1)\u000a    return cmp_result;\u000a\u000a/* See if the range has a lenght (non-empty). If the length is 0\u000a   then due to to previous check, the length of the other range is \u000a   equal to 0. They are equal. */\u000acmp_result = PyObject_Not(r0-&gt;length);\u000a/* Return True or error to the caller. \u000a       &gt;&gt;&gt; range(0) == range(2, 2, 2)  # True\u000a   (True) gets caught here. Lengths are both zero. */\u000aif (cmp_result != 0)\u000a    return cmp_result;\u000a\u000a/* Compare the start values for the ranges, if they don't match\u000a   then we're not dealing with equal ranges. */\u000acmp_result = PyObject_RichCompareBool(r0-&gt;start, r1-&gt;start, Py_EQ);\u000a/* Return False or error to the caller. \u000a   lens are equal, this checks their starting values\u000a       &gt;&gt;&gt; range(0, 10) == range(10, 20)  # False\u000a   Lengths are equal and non-zero, steps don't match.*/\u000aif (cmp_result != 1)\u000a    return cmp_result;\u000a\u000a/* Check if the length is equal to 1. \u000a   If start is the same and length is 1, they represent the same sequence:\u000a       &gt;&gt;&gt; range(0, 10, 10) == range(0, 20, 20)  # True */\u000aone = PyLong_FromLong(1);\u000aif (!one)\u000a    return -1;\u000acmp_result = PyObject_RichCompareBool(r0-&gt;length, one, Py_EQ);\u000aPy_DECREF(one);\u000a/* Return True or error to the caller. */\u000aif (cmp_result != 0)\u000a    return cmp_result;\u000a\u000a/* Finally, just compare their steps */\u000areturn PyObject_RichCompareBool(r0-&gt;step, r1-&gt;step, Py_EQ);\u000a</code></pre>\u000a\u000a<p>I've also scattered some of my own comments here; look at <em><a href="http://stackoverflow.com/a/35014301/4952130">@ajcr's answer</a></em> for the Python equivalent.</p>\u000a
p96
sVquestion_id
p97
I35004162
sVlast_activity_date
p98
I1480681698
sVcreation_date
p99
I1453763097
sVscore
p100
I64
sVowner
p101
(dp102
Vuser_id
p103
I4952130
sVprofile_image
p104
Vhttps://i.stack.imgur.com/zCq9y.jpg?s=128&g=1
p105
sVuser_type
p106
Vregistered
p107
sVreputation
p108
I43353
sVlink
p109
Vhttp://stackoverflow.com/users/4952130/jim-fasarakis-hilliard
p110
sVaccept_rate
p111
I90
sVdisplay_name
p112
VJim Fasarakis Hilliard
p113
ssVis_accepted
p114
I01
sVlast_edit_date
p115
I1480681698
sVanswer_id
p116
I35004173
sa(dp117
Vbody
p118
V<h2>For Python 2 &amp; 3</h2>\u000a\u000a<p>See: <a href="http://stackoverflow.com/a/23434608/994153">The modern way: use newline=''</a> answer on this very page.</p>\u000a\u000a<h2>For Python 2 only (original answer)</h2>\u000a\u000a<p>Open the file as binary to prevent the translation of end-of-line characters:</p>\u000a\u000a<pre><code>f = open('file.txt', 'wb')\u000a</code></pre>\u000a\u000a<p>Quoting the Python manual:</p>\u000a\u000a<blockquote>\u000a  <p>On Windows, 'b' appended to the mode opens the file in binary mode, so there are also modes like 'rb', 'wb', and 'r+b'. Python on Windows makes a distinction between text and binary files; the end-of-line characters in text files are automatically altered slightly when data is read or written. This behind-the-scenes modification to file data is fine for ASCII text files, but it\u2019ll corrupt binary data like that in JPEG or EXE files. Be very careful to use binary mode when reading and writing such files. On Unix, it doesn\u2019t hurt to append a 'b' to the mode, so you can use it platform-independently for all binary files.</p>\u000a</blockquote>\u000a
p119
sVquestion_id
p120
I2536545
sVlast_activity_date
p121
I1479702046
sVcreation_date
p122
I1269850799
sVscore
p123
I44
sVowner
p124
(dp125
Vuser_id
p126
I156771
sVprofile_image
p127
Vhttps://www.gravatar.com/avatar/2163ccb26148ab885d6d827e7cb270a1?s=128&d=identicon&r=PG
p128
sVuser_type
p129
Vregistered
p130
sVreputation
p131
I31771
sVlink
p132
Vhttp://stackoverflow.com/users/156771/tam%c3%a1s
p133
sVaccept_rate
p134
I100
sVdisplay_name
p135
VTam&#225;s
p136
ssVis_accepted
p137
I01
sVlast_edit_date
p138
I1479702046
sVanswer_id
p139
I2536560
sa(dp140
Vbody
p141
V<p>Try this context manager:</p>\u000a\u000a<pre><code>from cStringIO import StringIO\u000aimport sys\u000a\u000aclass Capturing(list):\u000a    def __enter__(self):\u000a        self._stdout = sys.stdout\u000a        sys.stdout = self._stringio = StringIO()\u000a        return self\u000a    def __exit__(self, *args):\u000a        self.extend(self._stringio.getvalue().splitlines())\u000a        del self._stringio    # free up some memory\u000a        sys.stdout = self._stdout\u000a</code></pre>\u000a\u000a<p>Usage:</p>\u000a\u000a<pre><code>with Capturing() as output:\u000a    do_something(my_object)\u000a</code></pre>\u000a\u000a<p><code>output</code> is now a list containing the lines printed by the function call.</p>\u000a\u000a<p>Advanced usage:</p>\u000a\u000a<p>What may not be obvious is that this can be done more than once and the results concatenated:</p>\u000a\u000a<pre><code>with Capturing() as output:\u000a    print 'hello world'\u000a\u000aprint 'displays on screen'\u000a\u000awith Capturing(output) as output:  # note the constructor argument\u000a    print 'hello world2'\u000a\u000aprint 'done'\u000aprint 'output:', output\u000a</code></pre>\u000a\u000a<p>Output:</p>\u000a\u000a<pre class="lang-none prettyprint-override"><code>displays on screen                     \u000adone                                   \u000aoutput: ['hello world', 'hello world2']\u000a</code></pre>\u000a
p142
sVquestion_id
p143
I16571150
sVlast_activity_date
p144
I1478644466
sVcreation_date
p145
I1368639819
sVscore
p146
I86
sVowner
p147
(dp148
Vuser_id
p149
I416467
sVprofile_image
p150
Vhttps://www.gravatar.com/avatar/32cad7487ccecc3740a62e797fc326dc?s=128&d=identicon&r=PG
p151
sVuser_type
p152
Vregistered
p153
sVreputation
p154
I102771
sVlink
p155
Vhttp://stackoverflow.com/users/416467/kindall
p156
sVaccept_rate
p157
I100
sVdisplay_name
p158
Vkindall
p159
ssVis_accepted
p160
I01
sVlast_edit_date
p161
I1478644466
sVanswer_id
p162
I16571630
sa(dp163
Vbody
p164
V<p>It depends what license you can use.  Some popular libraries are GPL which can cause serious issues if you need to use it for work, especially if you need to keep proprietary extensions.  The LGPL libraries are a little less popular, I think, but you have more flexibility with what you can use them for.  </p>\u000a\u000a<p>I'd once looked at using twisted directly for some simple XMPP scripting but the documentation was literally non-existant.  Like, I opened a published twisted reference manual and it didn't include xmpp or jabbber <em>at all</em>.  Maybe they've fixed that now.</p>\u000a\u000a<p>MIT libraries.</p>\u000a\u000a<ul>\u000a<li><a href="http://wiki.github.com/fritzy/SleekXMPP" rel="noreferrer">sleekxmpp</a> (was: <a href="http://code.google.com/p/sleekxmpp/" rel="noreferrer">sleekxmpp</a>) is pretty popular and is used for\u000aexamples in Peter Saint-Andre's XMPP\u000abook from O'Reilly.  It reportedly works well, and finally got an <a href="http://groups.google.com/group/sleekxmpp-discussion?pli=1" rel="noreferrer">email list</a> in April 2010, and has a chat room at sleek@conference.jabber.org.</li>\u000a</ul>\u000a\u000a<p>GPL libraries.</p>\u000a\u000a<ul>\u000a<li><a href="http://xmpppy.sourceforge.net/" rel="noreferrer">xmpppy</a> was used by gajim from 2005-2014, and began as a forked jabberpy. Also lives at <a href="https://github.com/normanr/xmpppy" rel="noreferrer">xmpppy</a>.</li>\u000a<li><a href="https://python-nbxmpp.gajim.org/" rel="noreferrer">nbxmpp</a> forked xmpppy, and is used by gajim. Has at least some python 3 support. It is actively maintained.</li>\u000a</ul>\u000a\u000a<p>LPGL libraries.</p>\u000a\u000a<ul>\u000a<li><a href="http://pyxmpp.jajcus.net/" rel="noreferrer">pyxmpp</a> is pretty good and uses libxml2 internally for xml parsing.</li>\u000a<li><a href="https://github.com/Jajcus/pyxmpp2" rel="noreferrer">pyxmpp2</a> is the next version of pyxmpp, runs on python 2.7 and 3.2, and removes the libxml2 requirement. Like many, it requires <a href="http://www.dnspython.org/" rel="noreferrer">dnspython</a>.</li>\u000a<li><a href="http://jabberpy.sourceforge.net/" rel="noreferrer">jabberpy</a> is the original and still works for a lot of tasks, but is thoroughly unmaintained.</li>\u000a</ul>\u000a\u000a<p>Other libraries.</p>\u000a\u000a<ul>\u000a<li><a href="http://wokkel.ik.nu/" rel="noreferrer">Wokkel</a>, mentioned in another post.  That's a new one for me, based on twisted.</li>\u000a</ul>\u000a
p165
sVquestion_id
p166
I1901828
sVlast_activity_date
p167
I1474338922
sVcreation_date
p168
I1261165164
sVscore
p169
I65
sVowner
p170
(dp171
Vuser_id
p172
I176298
sVprofile_image
p173
Vhttps://www.gravatar.com/avatar/896e8c4a83c4dfb9c5dfe0a72f8a1e2a?s=128&d=identicon&r=PG
p174
sVuser_type
p175
Vregistered
p176
sVreputation
p177
I988
sVlink
p178
Vhttp://stackoverflow.com/users/176298/a-r-diederich
p179
sVdisplay_name
p180
VA. R. Diederich
p181
ssVis_accepted
p182
I01
sVlast_edit_date
p183
I1474338922
sVanswer_id
p184
I1930276
sa(dp185
Vbody
p186
V<p>You should use <a href="https://docs.python.org/2/library/urlparse.html#urlparse.urljoin">urlparse.urljoin</a> : </p>\u000a\u000a<pre><code>&gt;&gt;&gt; import urlparse\u000a&gt;&gt;&gt; urlparse.urljoin(url1, url2)\u000a'http://127.0.0.1/test1/test4/test6.xml'\u000a</code></pre>\u000a\u000a<p>With Python 3 <a href="https://docs.python.org/2/library/urlparse.html#index-0">urlparse is renamed to urllib.parse</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import urllib.parse\u000a&gt;&gt;&gt; urllib.parse.urljoin(url1, url2)\u000a'http://127.0.0.1/test1/test4/test6.xml'\u000a</code></pre>\u000a
p187
sVquestion_id
p188
I8223939
sVlast_activity_date
p189
I1472655403
sVcreation_date
p190
I1321950934
sVscore
p191
I93
sVowner
p192
(dp193
Vuser_id
p194
I718618
sVprofile_image
p195
Vhttps://www.gravatar.com/avatar/9878e99dc2bbd256050b7dc4ffea820b?s=128&d=identicon&r=PG
p196
sVuser_type
p197
Vregistered
p198
sVreputation
p199
I40180
sVlink
p200
Vhttp://stackoverflow.com/users/718618/c%c3%a9dric-julien
p201
sVdisplay_name
p202
VC&#233;dric Julien
p203
ssVis_accepted
p204
I01
sVlast_edit_date
p205
I1472655403
sVanswer_id
p206
I8223955
sa(dp207
Vbody
p208
V<p>If you're looking for "update if exists else create" use case, please refer to <a href="http://stackoverflow.com/a/26286864/2800876">@Zags excellent answer</a></p>\u000a\u000a<hr>\u000a\u000a<p>Django already has a <code>get_or_create</code>, <a href="https://docs.djangoproject.com/en/1.9/ref/models/querysets/#get-or-create">https://docs.djangoproject.com/en/1.9/ref/models/querysets/#get-or-create</a></p>\u000a\u000a<p>For you it could be :</p>\u000a\u000a<pre><code>id = 'some identifier'\u000aperson, created = Person.objects.get_or_create(identifier=id)\u000a\u000aif created:\u000a   # means you have created a new person\u000aelse:\u000a   # person just refers to the existing one\u000a</code></pre>\u000a
p209
sVquestion_id
p210
I14115318
sVlast_activity_date
p211
I1472224860
sVcreation_date
p212
I1357083967
sVscore
p213
I94
sVowner
p214
(dp215
Vuser_id
p216
I238639
sVprofile_image
p217
Vhttps://www.gravatar.com/avatar/3d4fdae18c7202ed91e2cbaf7600a746?s=128&d=identicon&r=PG
p218
sVuser_type
p219
Vregistered
p220
sVreputation
p221
I33276
sVlink
p222
Vhttp://stackoverflow.com/users/238639/bakkal
p223
sVdisplay_name
p224
Vbakkal
p225
ssVis_accepted
p226
I01
sVlast_edit_date
p227
I1472224860
sVanswer_id
p228
I14115332
sa(dp229
Vbody
p230
V<p>If you look at the line which is causing the error, you'll see this:</p>\u000a\u000a<pre><code>from numpy._distributor_init import NUMPY_MKL  # requires numpy+mkl\u000a</code></pre>\u000a\u000a<p>This line comment states the dependency as <code>numpy+mkl</code> (<code>numpy</code> with <a href="http://www.intel.com/software/products/mkl/"><strong>Intel Math Kernel Library</strong></a>). This means that you've installed the <code>numpy</code> by <code>pip</code>, but the <code>scipy</code> was installed by precompiled archive, which expects <code>numpy+mkl</code>.</p>\u000a\u000a<p>This problem can be easy solved by installation for <code>numpy+mkl</code> from whl file from <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy">here</a>.</p>\u000a
p231
sVquestion_id
p232
I37267399
sVlast_activity_date
p233
I1471878442
sVcreation_date
p234
I1463501007
sVscore
p235
I136
sVowner
p236
(dp237
Vuser_id
p238
I213550
sVprofile_image
p239
Vhttps://i.stack.imgur.com/cyZ5c.jpg?s=128&g=1
p240
sVuser_type
p241
Vregistered
p242
sVreputation
p243
I19138
sVlink
p244
Vhttp://stackoverflow.com/users/213550/vmatm
p245
sVaccept_rate
p246
I100
sVdisplay_name
p247
VVMAtm
p248
ssVis_accepted
p249
I01
sVlast_edit_date
p250
I1471878442
sVanswer_id
p251
I37281256
sa(dp252
Vbody
p253
V<p>This is a known bug that has been fixed (<a href="https://github.com/matplotlib/matplotlib/pull/3414">https://github.com/matplotlib/matplotlib/pull/3414</a>) on master.  </p>\u000a\u000a<p>The bug is in the handling of searching for a <a href="http://www.freetype.org/">freetype</a> installation. If you install the Linux package freetype-dev, you will avoid this bug and be able to compile <code>matplotlib</code>.</p>\u000a\u000a<pre><code>sudo apt-get install libfreetype6-dev\u000a</code></pre>\u000a
p254
sVquestion_id
p255
I25674612
sVlast_activity_date
p256
I1471364080
sVcreation_date
p257
I1409961118
sVscore
p258
I63
sVowner
p259
(dp260
Vuser_id
p261
I380231
sVprofile_image
p262
Vhttps://www.gravatar.com/avatar/8744048060e5931c500d3c9d1ecb997e?s=128&d=identicon&r=PG
p263
sVuser_type
p264
Vregistered
p265
sVreputation
p266
I41379
sVlink
p267
Vhttp://stackoverflow.com/users/380231/tacaswell
p268
sVaccept_rate
p269
I100
sVdisplay_name
p270
Vtacaswell
p271
ssVis_accepted
p272
I01
sVlast_edit_date
p273
I1471364080
sVanswer_id
p274
I25695462
sa(dp275
Vbody
p276
V<p>Yes, there is <a href="https://docs.python.org/2/library/urlparse.html#urlparse.urljoin" rel="noreferrer"><code>urlparse.urljoin</code></a>, or <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urljoin" rel="noreferrer"><code>urllib.parse.urljoin</code></a> for Python 3.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; try: from urlparse import urljoin # Python2\u000a... except ImportError: from urllib.parse import urljoin # Python3\u000a...\u000a&gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html", "anotherpage.html")\u000a'http://www.asite.com/folder/anotherpage.html'\u000a&gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html", "folder2/anotherpage.html")\u000a'http://www.asite.com/folder/folder2/anotherpage.html'\u000a&gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html", "/folder3/anotherpage.html")\u000a'http://www.asite.com/folder3/anotherpage.html'\u000a&gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html", "../finalpage.html")\u000a'http://www.asite.com/finalpage.html'\u000a</code></pre>\u000a\u000a<p>for copy-and-paste:</p>\u000a\u000a<pre><code>try:\u000a    from urlparse import urljoin  # Python2\u000aexcept ImportError:\u000a    from urllib.parse import urljoin  # Python3\u000a</code></pre>\u000a
p277
sVquestion_id
p278
I476511
sVlast_activity_date
p279
I1465146492
sVcreation_date
p280
I1232824819
sVscore
p281
I74
sVowner
p282
(dp283
Vuser_id
p284
I29903
sVprofile_image
p285
Vhttps://www.gravatar.com/avatar/363e08c01d9caf37d45bf6e5a011421b?s=128&d=identicon&r=PG
p286
sVuser_type
p287
Vregistered
p288
sVreputation
p289
I15614
sVlink
p290
Vhttp://stackoverflow.com/users/29903/james-brady
p291
sVaccept_rate
p292
I91
sVdisplay_name
p293
VJames Brady
p294
ssVis_accepted
p295
I01
sVlast_edit_date
p296
I1465146492
sVanswer_id
p297
I476521
sa(dp298
Vbody
p299
V<p>You could try the threading.Timer class: <a href="http://docs.python.org/library/threading.html#timer-objects" rel="noreferrer">http://docs.python.org/library/threading.html#timer-objects</a>.</p>\u000a\u000a<pre><code>import threading\u000a\u000adef f():\u000a    # do something here ...\u000a    # call f() again in 60 seconds\u000a    threading.Timer(60, f).start()\u000a\u000a# start calling f now and every 60 sec thereafter\u000af()\u000a</code></pre>\u000a
p300
sVquestion_id
p301
I2223157
sVlast_activity_date
p302
I1464447923
sVcreation_date
p303
I1265647397
sVscore
p304
I73
sVowner
p305
(dp306
Vuser_id
p307
I164602
sVprofile_image
p308
Vhttps://www.gravatar.com/avatar/120bfc3ff5ce133373ab9f5c0780a6d5?s=128&d=identicon&r=PG
p309
sVuser_type
p310
Vregistered
p311
sVreputation
p312
I11990
sVlink
p313
Vhttp://stackoverflow.com/users/164602/david-underhill
p314
sVaccept_rate
p315
I92
sVdisplay_name
p316
VDavid Underhill
p317
ssVis_accepted
p318
I01
sVlast_edit_date
p319
I1464447923
sVanswer_id
p320
I2223182
sa(dp321
Vbody
p322
V<p>This should do the trick.</p>\u000a\u000a<pre><code>foo = somevalue\u000aprevious = next_ = None\u000al = len(objects)\u000afor index, obj in enumerate(objects):\u000a    if obj == foo:\u000a        if index &gt; 0:\u000a            previous = objects[index - 1]\u000a        if index &lt; (l - 1):\u000a            next_ = objects[index + 1]\u000a</code></pre>\u000a\u000a<p>Here's the docs on the <a href="http://docs.python.org/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a> function.</p>\u000a
p323
sVquestion_id
p324
I1011938
sVlast_activity_date
p325
I1461763924
sVcreation_date
p326
I1245320931
sVscore
p327
I51
sVowner
p328
(dp329
Vuser_id
p330
I4203
sVprofile_image
p331
Vhttps://www.gravatar.com/avatar/646c35309b1b074fba9cf2e6a482ac3b?s=128&d=identicon&r=PG
p332
sVuser_type
p333
Vregistered
p334
sVreputation
p335
I47096
sVlink
p336
Vhttp://stackoverflow.com/users/4203/hank-gay
p337
sVaccept_rate
p338
I90
sVdisplay_name
p339
VHank Gay
p340
ssVis_accepted
p341
I01
sVlast_edit_date
p342
I1461763924
sVanswer_id
p343
I1011962
sa(dp344
Vbody
p345
V<p>For request, I would use <a href="https://docs.djangoproject.com/en/stable/topics/testing/advanced/#the-request-factory">RequestFactory</a> included with Django.</p>\u000a\u000a<pre><code>from django.test.client import RequestFactory\u000arf = RequestFactory()\u000aget_request = rf.get('/hello/')\u000apost_request = rf.post('/submit/', {'foo': 'bar'})\u000a</code></pre>\u000a\u000a<p>for users, I would use django.contrib.auth.models.User as @ozan suggested and maybe with <a href="http://factoryboy.readthedocs.org/en/latest/orms.html?highlight=django">factory boy</a> for speed (with factory boy you can choose to not to save to DB)</p>\u000a
p346
sVquestion_id
p347
I2036202
sVlast_activity_date
p348
I1459262368
sVcreation_date
p349
I1410711842
sVscore
p350
I34
sVowner
p351
(dp352
Vuser_id
p353
I965808
sVprofile_image
p354
Vhttps://www.gravatar.com/avatar/48ab953a9d8a4131fb35af7c815690fa?s=128&d=identicon&r=PG
p355
sVuser_type
p356
Vregistered
p357
sVreputation
p358
I2448
sVlink
p359
Vhttp://stackoverflow.com/users/965808/naoko
p360
sVdisplay_name
p361
Vnaoko
p362
ssVis_accepted
p363
I01
sVlast_edit_date
p364
I1459262368
sVanswer_id
p365
I25835403
sa(dp366
Vbody
p367
V<p>You can use <code>[]</code> to extract values from a <code>QueryDict</code> object like you would any ordinary dictionary.</p>\u000a\u000a<pre><code># HTTP POST variables\u000arequest.POST['section'] # =&gt; [39]\u000arequest.POST['MAINS'] # =&gt; [137]\u000a\u000a# HTTP GET variables\u000arequest.GET['section'] # =&gt; [39]\u000arequest.GET['MAINS'] # =&gt; [137]\u000a\u000a# HTTP POST and HTTP GET variables (Deprecated since Django 1.7)\u000arequest.REQUEST['section'] # =&gt; [39]\u000arequest.REQUEST['MAINS'] # =&gt; [137]\u000a</code></pre>\u000a
p368
sVquestion_id
p369
I4162625
sVlast_activity_date
p370
I1456769960
sVcreation_date
p371
I1289549785
sVscore
p372
I47
sVowner
p373
(dp374
Vuser_id
p375
I206684
sVprofile_image
p376
Vhttps://www.gravatar.com/avatar/9d1d3f5a74dc46505b1e536fbf28bda5?s=128&d=identicon&r=PG
p377
sVuser_type
p378
Vregistered
p379
sVreputation
p380
I6243
sVlink
p381
Vhttp://stackoverflow.com/users/206684/johannes-gorset
p382
sVaccept_rate
p383
I100
sVdisplay_name
p384
VJohannes Gorset
p385
ssVis_accepted
p386
I01
sVlast_edit_date
p387
I1456769960
sVanswer_id
p388
I4162731
sa(dp389
Vbody
p390
V<p>Here's how I would do this:</p>\u000a\u000a<pre><code>class ClassPropertyDescriptor(object):\u000a\u000a    def __init__(self, fget, fset=None):\u000a        self.fget = fget\u000a        self.fset = fset\u000a\u000a    def __get__(self, obj, klass=None):\u000a        if klass is None:\u000a            klass = type(obj)\u000a        return self.fget.__get__(obj, klass)()\u000a\u000a    def __set__(self, obj, value):\u000a        if not self.fset:\u000a            raise AttributeError("can't set attribute")\u000a        type_ = type(obj)\u000a        return self.fset.__get__(obj, type_)(value)\u000a\u000a    def setter(self, func):\u000a        if not isinstance(func, (classmethod, staticmethod)):\u000a            func = classmethod(func)\u000a        self.fset = func\u000a        return self    \u000a\u000adef classproperty(func):\u000a    if not isinstance(func, (classmethod, staticmethod)):\u000a        func = classmethod(func)\u000a\u000a    return ClassPropertyDescriptor(func)\u000a\u000a\u000aclass Bar(object):\u000a\u000a    _bar = 1\u000a\u000a    @classproperty\u000a    def bar(cls):\u000a        return cls._bar\u000a\u000a    @bar.setter\u000a    def bar(cls, value):\u000a        cls._bar = value\u000a\u000a\u000a# test instance instantiation\u000afoo = Bar()\u000aassert foo.bar == 1\u000a\u000abaz = Bar()\u000aassert baz.bar == 1\u000a\u000a# test static variable\u000abaz.bar = 5\u000aassert foo.bar == 5\u000a\u000a# test setting variable on the class\u000aBar.bar = 50\u000aassert baz.bar == 50\u000aassert foo.bar == 50\u000a</code></pre>\u000a\u000a<p>the setter didn't work at the time we call  "Bar.bar", \u000ait because we are calling "<strong>TypeOfBar.bar.__set__</strong>", which is not "<strong>Bar.bar.__set__</strong>", \u000aadd a metaclass define to solve it</p>\u000a\u000a<pre><code>class ClassPropertyMetaClass(type):\u000a    def __setattr__(self, key, value):\u000a        if key in self.__dict__:\u000a        obj = self.__dict__.get(key)\u000a        if obj and type(obj) is ClassPropertyDescriptor:\u000a            return obj.__set__(self, value)\u000a\u000a        return super(ClassPropertyMetaClass, self).__setattr__(key, value)\u000a\u000a# and update class define:\u000a#     class Bar(object):\u000a#        __metaclass__ = ClassPropertyMetaClass\u000a#        _bar = 1\u000a\u000a# and update ClassPropertyDescriptor.__set__\u000a#    def __set__(self, obj, value):\u000a#       if not self.fset:\u000a#           raise AttributeError("can't set attribute")\u000a#       if inspect.isclass(obj):\u000a#           type_ = obj\u000a#           obj = None\u000a#       else:\u000a#           type_ = type(obj)\u000a#       return self.fset.__get__(obj, type_)(value)\u000a</code></pre>\u000a\u000a<p>now will be fine</p>\u000a
p391
sVquestion_id
p392
I5189699
sVlast_activity_date
p393
I1450083427
sVcreation_date
p394
I1299226332
sVscore
p395
I31
sVowner
p396
(dp397
Vuser_id
p398
I133514
sVprofile_image
p399
Vhttps://www.gravatar.com/avatar/7743eab8a5fe5da8c3771f3de2fc8c42?s=128&d=identicon&r=PG
p400
sVuser_type
p401
Vregistered
p402
sVreputation
p403
I10481
sVlink
p404
Vhttp://stackoverflow.com/users/133514/mahmoud-abdelkader
p405
sVaccept_rate
p406
I100
sVdisplay_name
p407
VMahmoud Abdelkader
p408
ssVis_accepted
p409
I01
sVlast_edit_date
p410
I1450083427
sVanswer_id
p411
I5191224
sa(dp412
Vbody
p413
V<h2><em>Prerequisites</em> - 2 important Points</h2>\u000a\u000a<ul>\u000a<li><p><strong>Lists are mutable</strong></p>\u000a\u000a<p>The main part in lists is that lists are mutable. It means that the\u000avalues of lists can be changed. This is one of the reason why you are\u000afacing the trouble. <a href="https://docs.python.org/3/tutorial/introduction.html#lists">Refer the docs for more info</a></p></li>\u000a<li><p><strong>Order of Evaluation</strong></p>\u000a\u000a<p>The other part is that while unpacking a tuple, the evaluation starts\u000afrom left to right. <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order">Refer the docs for more info</a></p></li>\u000a</ul>\u000a\u000a<hr>\u000a\u000a<h2><em>Introduction</em></h2>\u000a\u000a<p>when you do <code>a,b = c,d</code> the values of <code>c</code> and <code>d</code> are first stored. Then starting from the left hand side, the value of <code>a</code> is first changed to <code>c</code> and then the value of <code>b</code> is changed to <code>d</code>. </p>\u000a\u000a<p>The catch here is that if there are any side effects to the location of <code>b</code> while changing the value of <code>a</code>, then <code>d</code> is assigned to the <em>later</em> <code>b</code>, which is the <code>b</code> affected by the side effect of <code>a</code>.</p>\u000a\u000a<hr>\u000a\u000a<h2><em>Use Case</em></h2>\u000a\u000a<p>Now coming to your problem</p>\u000a\u000a<p>In the first case,</p>\u000a\u000a<pre><code>nums = [1, 2, 0]    \u000anums[nums[0]], nums[0] = nums[0], nums[nums[0]]    \u000a</code></pre>\u000a\u000a<p><code>nums[0]</code> is initially <code>1</code> and <code>nums[nums[0]]</code> is <code>2</code> because it evaluates to <code>nums[1]</code>. Hence 1,2 is now stored into memory. </p>\u000a\u000a<p>Now tuple unpacking happens from left hand side, so </p>\u000a\u000a<pre><code>nums[nums[0]] = nums[1] = 1   # NO side Effect. \u000anums[0] = 2\u000a</code></pre>\u000a\u000a<p>hence <code>print nums</code> will print <code>[2, 1, 0]</code></p>\u000a\u000a<p>However in this case  </p>\u000a\u000a<pre><code>nums = [1, 2, 0]   \u000anums[0], nums[nums[0]] = nums[nums[0]], nums[0]    \u000a</code></pre>\u000a\u000a<p><code>nums[nums[0]], nums[0]</code>  puts 2,1 on the stack just like the first case. </p>\u000a\u000a<p>However on the left hand side, that is  <code>nums[0], nums[nums[0]]</code>, the changing of <code>nums[0]</code> has a side effect as it is used as the index in <code>nums[nums[0]]</code>. Thus</p>\u000a\u000a<pre><code>nums[0] = 2\u000anums[nums[0]] = nums[2] = 1  # NOTE THAT nums[0] HAS CHANGED\u000a</code></pre>\u000a\u000a<p><code>nums[1]</code> remains unchanged at value <code>2</code>. hence <code>print nums</code> will print <code>[2, 2, 1]</code></p>\u000a
p414
sVquestion_id
p415
I34171348
sVlast_activity_date
p416
I1449837344
sVcreation_date
p417
I1449639577
sVscore
p418
I44
sVowner
p419
(dp420
Vuser_id
p421
I4099593
sVprofile_image
p422
Vhttps://lh5.googleusercontent.com/-QF_1Rcfvf0A/AAAAAAAAAAI/AAAAAAAAAEM/JnXaYfzMXeM/photo.jpg?sz=128
p423
sVuser_type
p424
Vmoderator
p425
sVreputation
p426
I25299
sVlink
p427
Vhttp://stackoverflow.com/users/4099593/bhargav-rao
p428
sVaccept_rate
p429
I100
sVdisplay_name
p430
VBhargav Rao
p431
ssVis_accepted
p432
I01
sVlast_edit_date
p433
I1449837344
sVanswer_id
p434
I34171485
sa(dp435
Vbody
p436
V<p><a href="http://docs.python.org/library/datetime.html" rel="noreferrer">datetime</a> and the datetime.timedelta classes are your friend.</p>\u000a\u000a<ol>\u000a<li>find today.</li>\u000a<li>use that to find the first day of this month.</li>\u000a<li>use timedelta to backup a single day, to the last day of the previous month.</li>\u000a<li>print the YYYYMM string you're looking for.</li>\u000a</ol>\u000a\u000a<p>Like this:</p>\u000a\u000a<pre><code> &gt;&gt;&gt; import datetime\u000a &gt;&gt;&gt; today = datetime.date.today()\u000a &gt;&gt;&gt; first = today.replace(day=1)\u000a &gt;&gt;&gt; lastMonth = first - datetime.timedelta(days=1)\u000a &gt;&gt;&gt; print lastMonth.strftime("%Y%m")\u000a 201202\u000a &gt;&gt;&gt;\u000a</code></pre>\u000a
p437
sVquestion_id
p438
I9724906
sVlast_activity_date
p439
I1442408430
sVcreation_date
p440
I1331832912
sVscore
p441
I119
sVowner
p442
(dp443
Vuser_id
p444
I203568
sVprofile_image
p445
Vhttps://www.gravatar.com/avatar/914a7c50b970346e442b3e4b0a7e73f8?s=128&d=identicon&r=PG
p446
sVuser_type
p447
Vregistered
p448
sVreputation
p449
I18333
sVlink
p450
Vhttp://stackoverflow.com/users/203568/bgporter
p451
sVdisplay_name
p452
Vbgporter
p453
ssVis_accepted
p454
I01
sVlast_edit_date
p455
I1442408430
sVanswer_id
p456
I9725093
sa(dp457
Vbody
p458
V<p>Run nose with the <code>-s</code> / <code>--nocapture</code> option and you'll be able to see the pdb prompt and interact with the debugger normally.</p>\u000a\u000a<p>If using the commandline that means:-</p>\u000a\u000a<pre><code>python manage.py  test -s [other-opts-and-args]\u000a</code></pre>\u000a
p459
sVquestion_id
p460
I9013728
sVlast_activity_date
p461
I1442309056
sVcreation_date
p462
I1327551233
sVscore
p463
I50
sVowner
p464
(dp465
Vuser_id
p466
I19556
sVprofile_image
p467
Vhttps://www.gravatar.com/avatar/06466d059d58bbaee6320c8f2e733aa5?s=128&d=identicon&r=PG
p468
sVuser_type
p469
Vregistered
p470
sVreputation
p471
I6314
sVlink
p472
Vhttp://stackoverflow.com/users/19556/stderr
p473
sVdisplay_name
p474
Vstderr
p475
ssVis_accepted
p476
I01
sVlast_edit_date
p477
I1442309056
sVanswer_id
p478
I9013867
sa(dp479
Vbody
p480
V<p>You are at a disadvantage.</p>\u000a\u000a<p>Windows Explorer almost certainly uses <a href="http://msdn.microsoft.com/en-us/library/aa364418(VS.85).aspx" rel="noreferrer"><code>FindFirstFile</code></a>/<a href="http://msdn.microsoft.com/en-us/library/aa364428(VS.85).aspx" rel="noreferrer"><code>FindNextFile</code></a> to both traverse the directory structure <em>and</em> collect size information (through <code>lpFindFileData</code>) in one pass, making what is essentially a single system call per file.</p>\u000a\u000a<p>Python is unfortunately not your friend in this case.  Thus,</p>\u000a\u000a<ol>\u000a<li><code>os.walk</code> <strong>first calls <code>os.listdir</code></strong> (which internally calls <code>FindFirstFile</code>/<code>FindNextFile</code>)\u000a\u000a<ul>\u000a<li><strong>any additional system calls made from this point onward can only make you slower</strong> than Windows Explorer</li>\u000a</ul></li>\u000a<li><code>os.walk</code> <strong>then calls <code>isdir</code></strong> for each file returned by <code>os.listdir</code> (which internally calls <a href="http://msdn.microsoft.com/en-us/library/aa364946(VS.85).aspx" rel="noreferrer"><code>GetFileAttributesEx</code></a> -- or, prior to Win2k, a <code>GetFileAttributes</code>+<code>FindFirstFile</code> combo) to redetermine whether to recurse or not</li>\u000a<li><code>os.walk</code> and <code>os.listdir</code> will perform <strong>additional memory allocation</strong>, string and array operations etc. to fill out their return value</li>\u000a<li>you <strong>then call <code>getsize</code></strong> for each file returned by <code>os.walk</code> (which <strong>again</strong> calls <a href="http://msdn.microsoft.com/en-us/library/aa364946(VS.85).aspx" rel="noreferrer"><code>GetFileAttributesEx</code></a>)</li>\u000a</ol>\u000a\u000a<p>That is 3x more system calls per file than Windows Explorer, plus memory allocation and manipulation overhead.</p>\u000a\u000a<p>You can either use Anurag's solution, or try to call <code>FindFirstFile</code>/<code>FindNextFile</code> directly and recursively (which should be comparable to the performance of a <a href="http://www.cygwin.com/" rel="noreferrer"><code>cygwin</code></a> or other <a href="http://gnuwin32.sourceforge.net/" rel="noreferrer">win32 port</a> <code>du -s some_directory</code>.)</p>\u000a\u000a<p>Refer to <a href="http://svn.python.org/projects/python/branches/release26-maint/Lib/os.py" rel="noreferrer"><code>os.py</code></a> for the implementation of <code>os.walk</code>, <a href="http://svn.python.org/projects/python/branches/release26-maint/Modules/posixmodule.c" rel="noreferrer"><code>posixmodule.c</code></a> for the implementation of <code>listdir</code> and <code>win32_stat</code> (invoked by both <code>isdir</code> and <code>getsize</code>.)</p>\u000a\u000a<p>Note that Python's <strong><code>os.walk</code> is suboptimal on all platforms</strong> (Windows and *nices), up to and including Python3.1.  On both Windows and *nices <code>os.walk</code> could achieve traversal in a single pass without calling <code>isdir</code> since both <code>FindFirst</code>/<code>FindNext</code> (Windows) and <code>opendir</code>/<code>readdir</code> (*nix) already return file type via <code>lpFindFileData-&gt;dwFileAttributes</code> (Windows) and <code>dirent::d_type</code> (*nix). </p>\u000a\u000a<p>Perhaps counterintuitively, on most modern configurations (e.g. Win7 and NTFS, and even some SMB implementations) <code>GetFileAttributesEx</code> is <strong>twice</strong> as slow as <code>FindFirstFile</code> of a single file (possibly even slower than iterating over a directory with <code>FindNextFile</code>.)</p>\u000a\u000a<p><strong>Update:</strong> Python 3.5 includes the new <a href="https://www.python.org/dev/peps/pep-0471/" rel="noreferrer">PEP 471</a> <a href="https://docs.python.org/3.5/library/os.html#os.scandir" rel="noreferrer"><code>os.scandir()</code></a> function that solves this problem by returning file attributes along with the filename. This new function is used to speed up the built-in <code>os.walk()</code> (on both Windows and Linux). You can use the <a href="https://pypi.python.org/pypi/scandir" rel="noreferrer">scandir module on PyPI</a> to get this behavior for older Python versions, including 2.x.</p>\u000a
p481
sVquestion_id
p482
I2485719
sVlast_activity_date
p483
I1438360915
sVcreation_date
p484
I1269143242
sVscore
p485
I68
sVowner
p486
(dp487
Vuser_id
p488
I66516
sVprofile_image
p489
Vhttps://www.gravatar.com/avatar/7dca2696010cb52fe09f80667bc3e085?s=128&d=identicon&r=PG
p490
sVuser_type
p491
Vregistered
p492
sVreputation
p493
I49184
sVlink
p494
Vhttp://stackoverflow.com/users/66516/vladr
p495
sVdisplay_name
p496
Vvladr
p497
ssVis_accepted
p498
I01
sVlast_edit_date
p499
I1438360915
sVanswer_id
p500
I2485843
sa(dp501
Vbody
p502
V<p>There is no big difference. </p>\u000a\u000a<blockquote>\u000a  <p>With <code>pip install -e</code> for local projects, the "SomeProject.egg-info" directory is created\u000a  relative to the project path. This is one advantage over just using\u000a  setup.py develop, which creates the "egg-info" directly relative the\u000a  current working directory.\u000a  More: <a href="https://pip.pypa.io/en/latest/reference/pip_install.html#editable-installs" rel="noreferrer">docs</a></p>\u000a</blockquote>\u000a\u000a<p>Also read the setuptools' <a href="https://pythonhosted.org/setuptools/setuptools.html#development-mode" rel="noreferrer">docs</a>.</p>\u000a
p503
sVquestion_id
p504
I30306099
sVlast_activity_date
p505
I1431960664
sVcreation_date
p506
I1431960664
sVscore
p507
I36
sVowner
p508
(dp509
Vuser_id
p510
I4842742
sVprofile_image
p511
Vhttps://i.stack.imgur.com/5ExYH.jpg?s=128&g=1
p512
sVuser_type
p513
Vregistered
p514
sVreputation
p515
I3412
sVlink
p516
Vhttp://stackoverflow.com/users/4842742/sobolevn
p517
sVdisplay_name
p518
Vsobolevn
p519
ssVis_accepted
p520
I01
sVanswer_id
p521
I30306403
sa(dp522
Vbody
p523
V<p>If you want to write the output to a file you can use the <a href="http://docs.python.org/library/subprocess.html#subprocess.Popen" rel="noreferrer">stdout</a>-argument of <code>subprocess.call</code>.</p>\u000a\u000a<p>It takes <code>None</code>, <code>subprocess.PIPE</code>, a file object or a file descriptor. The first is the default, stdout is inherited from the parent (your script). The second allows you to pipe from one command/process to another. The third and fourth are what you want, to have the output written to a file.</p>\u000a\u000a<p>You need to open a file with something like <code>open</code> and pass the object or file descriptor integer to <code>call</code>:</p>\u000a\u000a<pre><code>f = open("blah.txt", "w")\u000asubprocess.call(["/home/myuser/run.sh", "/tmp/ad_xml",  "/tmp/video_xml"], stdout=f)\u000a</code></pre>\u000a\u000a<p>I'm guessing any valid file-like object would work, like a socket (gasp :)), but I've never tried.</p>\u000a\u000a<p>As <a href="http://stackoverflow.com/users/89806/marcog">marcog</a> mentions in the comments you might want to redirect stderr as well, you can redirect this to the same location as stdout with <code>stderr=subprocess.STDOUT</code>. Any of the above mentioned values works as well, you can redirect to different places.</p>\u000a
p524
sVquestion_id
p525
I4856583
sVlast_activity_date
p526
I1431708098
sVcreation_date
p527
I1296511487
sVscore
p528
I72
sVowner
p529
(dp530
Vuser_id
p531
I12183
sVprofile_image
p532
Vhttps://www.gravatar.com/avatar/c7916db3051f9c07fa9b3dd0eefefb18?s=128&d=identicon&r=PG
p533
sVuser_type
p534
Vregistered
p535
sVreputation
p536
I13567
sVlink
p537
Vhttp://stackoverflow.com/users/12183/skurmedel
p538
sVaccept_rate
p539
I85
sVdisplay_name
p540
VSkurmedel
p541
ssVis_accepted
p542
I01
sVlast_edit_date
p543
I1431708098
sVanswer_id
p544
I4856684
sa(dp545
Vbody
p546
V<p>In Python 2.x, <a href="https://docs.python.org/2/library/functions.html#range"><code>range</code></a> returns a list, but in Python 3.x <a href="https://docs.python.org/3/library/functions.html#func-range"><code>range</code></a> returns an immutable sequence, of type <a href="https://docs.python.org/3/library/stdtypes.html#range"><code>range</code></a>.</p>\u000a\u000a<p><strong>Python 2.x:</strong></p>\u000a\u000a<pre><code>&gt;&gt;&gt; type(range(10))\u000a&lt;type 'list'&gt;\u000a&gt;&gt;&gt; type(xrange(10))\u000a&lt;type 'xrange'&gt;\u000a</code></pre>\u000a\u000a<p><strong>Python 3.x:</strong></p>\u000a\u000a<pre><code>&gt;&gt;&gt; type(range(10))\u000a&lt;class 'range'&gt;\u000a</code></pre>\u000a\u000a<p>In Python 2.x, if you want to get an iterable object, like in Python 3.x, you can use <a href="https://docs.python.org/2/library/functions.html#xrange"><code>xrange</code></a> function, which returns an immutable sequence of type <a href="https://docs.python.org/2/library/stdtypes.html#typesseq-xrange"><code>xrange</code></a>.</p>\u000a\u000a<p>Advantage of <code>xrange</code> over <code>range</code> in Python 2.x:</p>\u000a\u000a<blockquote>\u000a  <p>The advantage of <code>xrange()</code> over <code>range()</code> is minimal (since <code>xrange()</code> still has to create the values when asked for them) except when a very large range is used on a memory-starved machine or when all of the range\u2019s elements are never used (such as when the loop is usually terminated with break). </p>\u000a</blockquote>\u000a\u000a<p><strong>Note:</strong></p>\u000a\u000a<blockquote>\u000a  <p>Furthermore, the only apparent way to access the integers created by <code>range()</code> is to iterate through them, </p>\u000a</blockquote>\u000a\u000a<p>Nope. Since <code>range</code> objects in Python 3 are immutable sequences, they support indexing as well. Quoting from the <code>range</code> function documentation,</p>\u000a\u000a<blockquote>\u000a  <p>Ranges implement all of the common sequence operations except concatenation and repetition</p>\u000a  \u000a  <p>...</p>\u000a  \u000a  <p>Range objects implement the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence"><code>collections.abc.Sequence</code></a> ABC, and provide features such as containment tests, <strong>element index lookup</strong>, slicing and support for negative indices.</p>\u000a</blockquote>\u000a\u000a<p>For example,</p>\u000a\u000a<pre><code>&gt;&gt;&gt; range(10, 20)[5]\u000a15\u000a&gt;&gt;&gt; range(10, 20)[2:5]\u000arange(12, 15)\u000a&gt;&gt;&gt; list(range(10, 20)[2:5])\u000a[12, 13, 14]\u000a&gt;&gt;&gt; list(range(10, 20, 2))\u000a[10, 12, 14, 16, 18]\u000a&gt;&gt;&gt; 18 in range(10, 20)\u000aTrue\u000a&gt;&gt;&gt; 100 in range(10, 20)\u000aFalse\u000a</code></pre>\u000a\u000a<p>All these are possible with that immutable <code>range</code> sequence.</p>\u000a\u000a<hr>\u000a\u000a<p>Recently, I faced a problem and I think it would be appropriate to include here. Consider this Python 3.x code</p>\u000a\u000a<pre><code>from itertools import islice\u000anumbers = range(100)\u000aitems = list(islice(numbers, 10))\u000awhile items:\u000a    items = list(islice(numbers, 10))\u000a    print(items)\u000a</code></pre>\u000a\u000a<p>One would expect this code to print every ten numbers as a list, till 99. But, it would run infinitely. Can you reason why?</p>\u000a\u000a<p><strong>Solution</strong></p>\u000a\u000a<blockquote class="spoiler">\u000a  <p> Because the <code>range</code> returns an immutable <em>sequence</em>, not an iterator object. So, whenever <code>islice</code> is done on a <code>range</code> object, it always starts from the beginning. Think of it as a drop-in replacement for an immutable list. Now the question comes, how will you fix it? Its simple, you just have to get an iterator out of it. Simply change<br>\u000a<br>\u000a        <code>numbers = range(100)</code><br>\u000a<br>\u000a to<br>\u000a<br>\u000a        <code>numbers = iter(range(100))</code><br>\u000a<br>\u000a Now, <code>numbers</code> is an iterator object and it remembers how long it has been iterated before. So, when the <code>islice</code> iterates it, it just starts from the place where it previously ended.</p>\u000a</blockquote>\u000a
p547
sVquestion_id
p548
I23221025
sVlast_activity_date
p549
I1425735584
sVcreation_date
p550
I1398173300
sVscore
p551
I97
sVowner
p552
(dp553
Vuser_id
p554
I1903116
sVprofile_image
p555
Vhttps://i.stack.imgur.com/w6Ffg.jpg?s=128&g=1
p556
sVuser_type
p557
Vregistered
p558
sVreputation
p559
I130035
sVlink
p560
Vhttp://stackoverflow.com/users/1903116/thefourtheye
p561
sVaccept_rate
p562
I100
sVdisplay_name
p563
Vthefourtheye
p564
ssVis_accepted
p565
I01
sVlast_edit_date
p566
I1425735584
sVanswer_id
p567
I23221045
sa(dp568
Vbody
p569
V<blockquote>\u000a  <p>I'd still like to know where to set that reference to vsvarsall.bat...</p>\u000a</blockquote>\u000a\u000a<p>Well, as martineau wrote you have to have either Visual Studio 2008 or Visual C++ Express installed. Having said that I understand you would like to know where Python looks for this batch file. You can see this by looking at <a href="http://hg.python.org/cpython/file/8527427914a2/Lib/distutils/msvc9compiler.py#l219" rel="noreferrer"><code>definition</code></a> of <code>find_vcvarsall</code> function in distutils/msvc9compiler.py standard module. Python checks in turn if any of folders saved in the registry under keys</p>\u000a\u000a<ul>\u000a<li><code>HKEY_LOCAL_MACHINE\u005cSoftware\u005cWow6432Node\u005cMicrosoft\u005cVisualStudio\u005c9.0\u005cSetup\u005cVC\u005cProductDir</code></li>\u000a<li><code>HKEY_LOCAL_MACHINE\u005cSoftware\u005cWow6432Node\u005cMicrosoft\u005cVCExpress\u005c9.0\u005cSetup\u005cVC\u005cProductDir</code></li>\u000a</ul>\u000a\u000a<p>(for 64bit Windows) or</p>\u000a\u000a<ul>\u000a<li><code>HKEY_LOCAL_MACHINE\u005cSoftware\u005cMicrosoft\u005cVisualStudio\u005c9.0\u005cSetup\u005cVC\u005cProductDir</code></li>\u000a<li><code>HKEY_LOCAL_MACHINE\u005cSoftware\u005cMicrosoft\u005cVCExpress\u005c9.0\u005cSetup\u005cVC\u005cProductDir</code></li>\u000a</ul>\u000a\u000a<p>(for 32bit Windows) exists and if so it treats such folder as the one containing <code>vcvarsall.bat</code> file. If none of these folders exists Python checks if there's environment variable <code>VS90COMNTOOLS</code>. If this variable exits Python treats folder two levels above value of this variable as the folder containing <code>vcvarsall.bat</code> file.</p>\u000a\u000a<p>See also my <a href="http://stackoverflow.com/a/5122521/95735">other</a> answer which explains why you can't use MSVC++ 2010 to build extensions for Python 2.6</p>\u000a\u000a<p>EDIT:\u000aThe VC++ 2008 files are now packaged in an installer from MS which can be downloaded <a href="http://www.microsoft.com/en-us/download/details.aspx?id=44266" rel="noreferrer">here</a>. Once installed vcvarsall.bat will be in <code>C:\u005cUsers\u005cusername\u005cAppData\u005cLocal\u005cPrograms\u005cCommon\u005cMicrosoft\u005cVisual C++ for Python\u005c9.0</code></p>\u000a
p570
sVquestion_id
p571
I6551724
sVlast_activity_date
p572
I1412661292
sVcreation_date
p573
I1325541272
sVscore
p574
I55
sVowner
p575
(dp576
Vuser_id
p577
I95735
sVprofile_image
p578
Vhttps://www.gravatar.com/avatar/514d88c606d3a571824fb8f0e7f7f3c8?s=128&d=identicon&r=PG
p579
sVuser_type
p580
Vregistered
p581
sVreputation
p582
I23525
sVlink
p583
Vhttp://stackoverflow.com/users/95735/piotr-dobrogost
p584
sVaccept_rate
p585
I74
sVdisplay_name
p586
VPiotr Dobrogost
p587
ssVis_accepted
p588
I01
sVlast_edit_date
p589
I1412661292
sVanswer_id
p590
I8705722
sa(dp591
Vbody
p592
V<p>Current versions of <code>glob.glob()</code> cannot list files in subdirectories recursively (an <a href="http://bugs.python.org/issue13968">update that will be included in python 3.5 when released</a> adds a <code>**</code> option for arbitrary nested directory traversal).</p>\u000a\u000a<p>I'd use <a href="http://docs.python.org/2/library/os.html#os.walk"><code>os.walk()</code></a> combined with <a href="http://docs.python.org/2/library/fnmatch.html#fnmatch.filter"><code>fnmatch.filter()</code></a> instead:</p>\u000a\u000a<pre><code>import os\u000aimport fnmatch\u000a\u000apath = 'C:/Users/sam/Desktop/file1'\u000a\u000aconfigfiles = [os.path.join(dirpath, f)\u000a    for dirpath, dirnames, files in os.walk(path)\u000a    for f in fnmatch.filter(files, '*.txt')]\u000a</code></pre>\u000a\u000a<p>This'll walk your directories recursively and return all absolute pathnames to matching <code>.txt</code> files. In this <em>specific</em> case the <code>fnmatch.filter()</code> may be overkill, you could also use a <code>.endswith()</code> test:</p>\u000a\u000a<pre><code>import os\u000a\u000apath = 'C:/Users/sam/Desktop/file1'\u000a\u000aconfigfiles = [os.path.join(dirpath, f)\u000a    for dirpath, dirnames, files in os.walk(path)\u000a    for f in files if f.endswith('.txt')]\u000a</code></pre>\u000a
p593
sVquestion_id
p594
I14798220
sVlast_activity_date
p595
I1412333643
sVcreation_date
p596
I1360503119
sVscore
p597
I62
sVowner
p598
(dp599
Vuser_id
p600
I100297
sVprofile_image
p601
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p602
sVuser_type
p603
Vmoderator
p604
sVreputation
p605
I554897
sVlink
p606
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p607
sVdisplay_name
p608
VMartijn Pieters
p609
ssVis_accepted
p610
I01
sVlast_edit_date
p611
I1412333643
sVanswer_id
p612
I14798263
sa(dp613
Vbody
p614
V<p>Just found <a href="http://www.davidcramer.net/code/python/443/problems-uploading-packages-with-setuptools-on-os-x.html" rel="noreferrer">this page</a>, which solves the issue:</p>\u000a\u000a<blockquote>\u000a  <p>I also noticed that while it was asking me to save my login information, and I hit Y everytime, it still asked me for the username and password. It turned out that it was saving the information incorrectly as follows:</p>\u000a\u000a<pre><code>[pypi]\u000ausername:dcramer\u000apassword:*******\u000a</code></pre>\u000a  \u000a  <p>Changing it out to this solved the problems:</p>\u000a\u000a<pre><code>[server-login]\u000ausername:dcramer\u000apassword:********\u000a</code></pre>\u000a</blockquote>\u000a\u000a<p>The above content goes into the <a href="https://docs.python.org/3/distutils/packageindex.html#pypirc" rel="noreferrer"><code>.pypirc</code> file</a> in the user's home directory.</p>\u000a\u000a<p>Ugh.. I think this may be a good time to give <a href="http://pypi.python.org/pypi/distribute" rel="noreferrer">distribute</a> a try..</p>\u000a
p615
sVquestion_id
p616
I1569315
sVlast_activity_date
p617
I1407130447
sVcreation_date
p618
I1255558764
sVscore
p619
I61
sVowner
p620
(dp621
Vuser_id
p622
I745
sVprofile_image
p623
Vhttps://www.gravatar.com/avatar/edf857d71f672d8f411ef6b8376316b8?s=128&d=identicon&r=PG
p624
sVuser_type
p625
Vregistered
p626
sVreputation
p627
I100294
sVlink
p628
Vhttp://stackoverflow.com/users/745/dbr
p629
sVaccept_rate
p630
I90
sVdisplay_name
p631
Vdbr
p632
ssVis_accepted
p633
I01
sVlast_edit_date
p634
I1407130447
sVanswer_id
p635
I1569331
sa(dp636
Vbody
p637
V<p>As far as I know, there is no one-step way of doing this in Django ORM.</p>\u000a\u000a<p>But you can split it in two queries:</p>\u000a\u000a<pre><code>bakeries = Bakery.objects.annotate(hottest_cake_baked_at=Max('cake__baked_at')) \u000ahottest_cakes = Cake.objects.filter(baked_at__in=[b.hottest_cake_baked_at for b in bakeries])\u000a</code></pre>\u000a\u000a<p>If id's of cakes are progressing along with bake_at timestamps, you can simplify and disambiguate the above code (in case two cakes arrives at the same time you can get both of them):</p>\u000a\u000a<pre><code>hottest_cake_ids = Bakery.objects.annotate(hottest_cake_id=Max('cake__id')).values_list('hottest_cak\u200c\u200be_id', flat=True)\u000ahottest_cakes = Cake.objects.filter(id__in=hottest_cake_ids)\u000a</code></pre>\u000a\u000a<p>BTW credits for this goes to Daniel Roseman, who once answered similar question of mine:</p>\u000a\u000a<p><a href="http://groups.google.pl/group/django-users/browse_thread/thread/3b3cd4cbad478d34/3e4c87f336696054?hl=pl&amp;q=" rel="noreferrer">http://groups.google.pl/group/django-users/browse_thread/thread/3b3cd4cbad478d34/3e4c87f336696054?hl=pl&amp;q=</a></p>\u000a\u000a<p>If the above method is too slow, then I know also second method - you can write custom SQL producing only those Cakes, that are hottest in relevant Bakeries, define it as database VIEW, and then write unmanaged Django model for it. It's also mentioned in the above django-users thread. Direct link to the original concept is here:</p>\u000a\u000a<p><a href="http://web.archive.org/web/20130203180037/http://wolfram.kriesing.de/blog/index.php/2007/django-nice-and-critical-article#comment-48425" rel="noreferrer">http://web.archive.org/web/20130203180037/http://wolfram.kriesing.de/blog/index.php/2007/django-nice-and-critical-article#comment-48425</a></p>\u000a\u000a<p>Hope this helps.</p>\u000a
p638
sVquestion_id
p639
I2074514
sVlast_activity_date
p640
I1404901943
sVcreation_date
p641
I1263629563
sVscore
p642
I24
sVowner
p643
(dp644
Vuser_id
p645
I176186
sVprofile_image
p646
Vhttps://www.gravatar.com/avatar/a97589645d0606dc4aefc4c40301c429?s=128&d=identicon&r=PG
p647
sVuser_type
p648
Vregistered
p649
sVreputation
p650
I12156
sVlink
p651
Vhttp://stackoverflow.com/users/176186/tomasz-zielinski
p652
sVaccept_rate
p653
I91
sVdisplay_name
p654
VTomasz Zielinski
p655
ssVis_accepted
p656
I01
sVlast_edit_date
p657
I1404901943
sVanswer_id
p658
I2076665
sa(dp659
Vbody
p660
V<p>With the help of larsmans code I came up with this code for the binary case:</p>\u000a\u000a<pre><code>def show_most_informative_features(vectorizer, clf, n=20):\u000a    feature_names = vectorizer.get_feature_names()\u000a    coefs_with_fns = sorted(zip(clf.coef_[0], feature_names))\u000a    top = zip(coefs_with_fns[:n], coefs_with_fns[:-(n + 1):-1])\u000a    for (coef_1, fn_1), (coef_2, fn_2) in top:\u000a        print "\u005ct%.4f\u005ct%-15s\u005ct\u005ct%.4f\u005ct%-15s" % (coef_1, fn_1, coef_2, fn_2)\u000a</code></pre>\u000a
p661
sVquestion_id
p662
I11116697
sVlast_activity_date
p663
I1396248616
sVcreation_date
p664
I1340290549
sVscore
p665
I31
sVowner
p666
(dp667
Vuser_id
p668
I979377
sVprofile_image
p669
Vhttps://www.gravatar.com/avatar/a58f967d748d7e48713fe713c0ecc9ff?s=128&d=identicon&r=PG
p670
sVuser_type
p671
Vregistered
p672
sVreputation
p673
I1554
sVlink
p674
Vhttp://stackoverflow.com/users/979377/tobigue
p675
sVaccept_rate
p676
I83
sVdisplay_name
p677
Vtobigue
p678
ssVis_accepted
p679
I01
sVlast_edit_date
p680
I1396248616
sVanswer_id
p681
I11140887
sa(dp682
Vbody
p683
V<p>Use a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehension</a>:</p>\u000a\u000a<pre><code>res_list = [x[0] for x in rows]\u000a</code></pre>\u000a\u000a<p>Below is a demonstration:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; rows = [(1, 2), (3, 4), (5, 6)]\u000a&gt;&gt;&gt; [x[0] for x in rows]\u000a[1, 3, 5]\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Alternately, you could use unpacking instead of <code>x[0]</code>:</p>\u000a\u000a<pre><code>res_list = [x for x,_ in rows]\u000a</code></pre>\u000a\u000a<p>Below is a demonstration:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; lst = [(1, 2), (3, 4), (5, 6)]\u000a&gt;&gt;&gt; [x for x,_ in lst]\u000a[1, 3, 5]\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a\u000a<p>Both methods practically do the same thing, so you can choose whichever you like.</p>\u000a
p684
sVquestion_id
p685
I22412258
sVlast_activity_date
p686
I1394819427
sVcreation_date
p687
I1394819427
sVscore
p688
I65
sVowner
p689
(dp690
Vuser_id
p691
I2555451
sVprofile_image
p692
Vhttps://i.stack.imgur.com/d8F3H.jpg?s=128&g=1
p693
sVuser_type
p694
Vregistered
p695
sVreputation
p696
I83342
sVlink
p697
Vhttp://stackoverflow.com/users/2555451/icodez
p698
sVaccept_rate
p699
I100
sVdisplay_name
p700
ViCodez
p701
ssVis_accepted
p702
I01
sVanswer_id
p703
I22412308
sa(dp704
Vbody
p705
V<p><code>None, False and True</code> all are available within template tags and filters. <code>None, False</code>, the empty string (<code>'', "", """"""</code>) and empty lists/tuples all evaluate to <code>False</code> when evaluated by <code>if</code>, so you can easily do</p>\u000a\u000a<pre><code>{% if profile.user.first_name == None %}\u000a{% if not profile.user.first_name %}\u000a</code></pre>\u000a\u000a<p>A hint: @fabiocerqueira is right, leave logic to models, limit templates to be the only presentation layer and calculate stuff like that in you model. An example:</p>\u000a\u000a<pre><code># someapp/models.py\u000aclass UserProfile(models.Model):\u000a    user = models.OneToOneField('auth.User')\u000a    # other fields\u000a\u000a    def get_full_name(self):\u000a        if not self.user.first_name:\u000a            return\u000a        return ' '.join([self.user.first_name, self.user.last_name])\u000a\u000a# template\u000a{{ user.get_profile.get_full_name }}\u000a</code></pre>\u000a\u000a<p>Hope this helps :)</p>\u000a
p706
sVquestion_id
p707
I11945321
sVlast_activity_date
p708
I1393365788
sVcreation_date
p709
I1344919252
sVscore
p710
I70
sVowner
p711
(dp712
Vuser_id
p713
I937271
sVprofile_image
p714
Vhttps://www.gravatar.com/avatar/05cb1759e7799b7272464b6bfc06d6d1?s=128&d=identicon&r=PG
p715
sVuser_type
p716
Vregistered
p717
sVreputation
p718
I3041
sVlink
p719
Vhttp://stackoverflow.com/users/937271/gerard
p720
sVaccept_rate
p721
I73
sVdisplay_name
p722
VGerard
p723
ssVis_accepted
p724
I01
sVlast_edit_date
p725
I1393365788
sVanswer_id
p726
I11945876
sa(dp727
Vbody
p728
V<p>Your modification of <code>sys.path</code> assumes the current working directory is always in <code>main/</code>. This is not the case. Instead, just add the parent directory to <code>sys.path</code>:</p>\u000a\u000a<pre><code>import sys\u000aimport os.path\u000a\u000asys.path.append(os.path.join(os.path.dirname(__file__), '..'))\u000aimport gen_py.lib\u000a</code></pre>\u000a\u000a<p>Don't forget to include a file <code>__init__.py</code> in gen_py and lib - otherwise, they won't be recognized as Python modules.</p>\u000a
p729
sVquestion_id
p730
I7587457
sVlast_activity_date
p731
I1391004454
sVcreation_date
p732
I1317233337
sVscore
p733
I52
sVowner
p734
(dp735
Vuser_id
p736
I35070
sVprofile_image
p737
Vhttps://www.gravatar.com/avatar/6f92354195e8874dbee44d5c8714d506?s=128&d=identicon&r=PG
p738
sVuser_type
p739
Vregistered
p740
sVreputation
p741
I151504
sVlink
p742
Vhttp://stackoverflow.com/users/35070/phihag
p743
sVaccept_rate
p744
I77
sVdisplay_name
p745
Vphihag
p746
ssVis_accepted
p747
I01
sVlast_edit_date
p748
I1391004454
sVanswer_id
p749
I7587545
sa(dp750
Vbody
p751
V<p>Official docs: <a href="http://matplotlib.org/faq/usage_faq.html#matplotlib-pylab-and-pyplot-how-are-they-related">http://matplotlib.org/faq/usage_faq.html#matplotlib-pylab-and-pyplot-how-are-they-related</a></p>\u000a\u000a<p>Both of those imports boil down do doing exactly the same thing and will run the exact same code, it is just different ways of importing the modules. </p>\u000a\u000a<p>Also note that <code>matplotlib</code> has two interface layers, a state-machine layer managed by <code>pyplot</code> and the OO interface <code>pyplot</code> is built on top of, see <a href="http://stackoverflow.com/questions/14254379/how-can-i-attach-a-pyplot-function-to-a-figure-instance/14261698#1426169">How can I attach a pyplot function to a figure instance?</a></p>\u000a\u000a<p><code>pylab</code> is a clean way to bulk import a whole slew of helpful functions (the <code>pyplot</code> state machine function, most of <code>numpy</code>) into a single name space.  The main reason this exists (to my understanding) is to work with <code>ipython</code> to make a very nice interactive shell which more-or-less replicates MATLAB (to make the transition easier and because it is good for playing around). See <a href="https://github.com/matplotlib/matplotlib/blob/master/lib/pylab.py"><code>pylab.py</code></a> and <a href="https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/pylab.py"><code>matplotlib/pylab.py</code></a></p>\u000a\u000a<p>At some level, this is <em>purely</em> a matter of taste and depends a bit on what you are doing. </p>\u000a\u000a<p>If you are <em>not</em> embedding in a gui (either using a non-interactive backend for bulk scripts or using one of the provided interactive backends) the typical thing to do is</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000aimport numpy as np\u000a\u000aplt.plot(....)\u000a</code></pre>\u000a\u000a<p>which doesn't pollute the name space. I prefer this so I can keep track of where stuff came from.</p>\u000a\u000a<p>If you use </p>\u000a\u000a<pre><code>ipython --pylab\u000a</code></pre>\u000a\u000a<p>this is equivalent to running</p>\u000a\u000a<pre><code>from pylab import * \u000a</code></pre>\u000a\u000a<p>It is now recommended that for new versions of <code>ipython</code> you use</p>\u000a\u000a<pre><code>ipython --matplotlib\u000a</code></pre>\u000a\u000a<p>which will set up all the proper background details to make the interactive backends to work nicely, but will not bulk import anything.  You will need to explicitly import the modules want.</p>\u000a\u000a<pre><code>import numpy as np\u000aimport matplotlib.pyplot as plt\u000a</code></pre>\u000a\u000a<p>is a good start.</p>\u000a\u000a<p>If you are embedding <code>matplotlib</code> in a gui you don't want to import pyplot as that will start extra gui main loops, and exactly what you should import depends on exactly what you are doing.</p>\u000a
p752
sVquestion_id
p753
I16849483
sVlast_activity_date
p754
I1383521925
sVcreation_date
p755
I1369974792
sVscore
p756
I64
sVowner
p757
(dp758
Vuser_id
p759
I380231
sVprofile_image
p760
Vhttps://www.gravatar.com/avatar/8744048060e5931c500d3c9d1ecb997e?s=128&d=identicon&r=PG
p761
sVuser_type
p762
Vregistered
p763
sVreputation
p764
I41379
sVlink
p765
Vhttp://stackoverflow.com/users/380231/tacaswell
p766
sVaccept_rate
p767
I100
sVdisplay_name
p768
Vtacaswell
p769
ssVis_accepted
p770
I01
sVlast_edit_date
p771
I1383521925
sVanswer_id
p772
I16849816
sa(dp773
Vbody
p774
V<p>Everyone seems to have missed the obvious solution.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import functools\u000a&gt;&gt;&gt; class memoized(object):\u000a    """Decorator that caches a function's return value each time it is called.\u000a    If called later with the same arguments, the cached value is returned, and\u000a    not re-evaluated.\u000a    """\u000a    def __init__(self, func):\u000a        self.func = func\u000a        self.cache = {}\u000a        functools.update_wrapper(self, func)  ## TA-DA! ##\u000a    def __call__(self, *args):\u000a        pass  # Not needed for this demo.\u000a\u000a&gt;&gt;&gt; @memoized\u000adef fibonacci(n):\u000a    """fibonacci docstring"""\u000a    pass  # Not needed for this demo.\u000a\u000a&gt;&gt;&gt; fibonacci\u000a&lt;__main__.memoized object at 0x0156DE30&gt;\u000a&gt;&gt;&gt; fibonacci.__name__\u000a'fibonacci'\u000a&gt;&gt;&gt; fibonacci.__doc__\u000a'fibonacci docstring'\u000a</code></pre>\u000a
p775
sVquestion_id
p776
I6394511
sVlast_activity_date
p777
I1374078975
sVcreation_date
p778
I1374078975
sVscore
p779
I23
sVowner
p780
(dp781
Vuser_id
p782
I603136
sVprofile_image
p783
Vhttps://www.gravatar.com/avatar/bf5873c121eda05be68cacff2664e98b?s=128&d=identicon&r=PG
p784
sVuser_type
p785
Vregistered
p786
sVreputation
p787
I1044
sVlink
p788
Vhttp://stackoverflow.com/users/603136/samwyse
p789
sVaccept_rate
p790
I82
sVdisplay_name
p791
Vsamwyse
p792
ssVis_accepted
p793
I01
sVanswer_id
p794
I17705456
sa(dp795
Vbody
p796
V<pre><code>super(SubClass, self).__init__(...)\u000a</code></pre>\u000a\u000a<p>Consider using *args and **kw if it helps solving your variable nightmare.</p>\u000a
p797
sVquestion_id
p798
I6535832
sVlast_activity_date
p799
I1372256738
sVcreation_date
p800
I1309442124
sVscore
p801
I33
sVowner
p802
(dp803
Vuser_id
p804
I2665694
sVprofile_image
p805
Vhttps://graph.facebook.com/589273188/picture?type=large
p806
sVuser_type
p807
Vregistered
p808
sVreputation
p809
I1
sVlink
p810
Vhttp://stackoverflow.com/users/2665694/andreas-jung
p811
sVaccept_rate
p812
I53
sVdisplay_name
p813
VAndreas Jung
p814
ssVis_accepted
p815
I01
sVlast_edit_date
p816
I1372256738
sVanswer_id
p817
I6535884
sa(dp818
Vbody
p819
V<p>Many.</p>\u000a\u000a<pre><code>$ grep "if __name__ == '__main__':" /usr/lib64/python2.7/* | wc -l\u000a55\u000a</code></pre>\u000a\u000a<p>Not all work as a filter though, so examine the module in question before running.</p>\u000a
p820
sVquestion_id
p821
I14545001
sVlast_activity_date
p822
I1359268412
sVcreation_date
p823
I1359268412
sVscore
p824
I28
sVowner
p825
(dp826
Vuser_id
p827
I20862
sVprofile_image
p828
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p829
sVuser_type
p830
Vregistered
p831
sVreputation
p832
I481018
sVlink
p833
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p834
sVaccept_rate
p835
I60
sVdisplay_name
p836
VIgnacio Vazquez-Abrams
p837
ssVis_accepted
p838
I01
sVanswer_id
p839
I14545056
sa(dp840
Vbody
p841
V<p>When you do <code>len(df['column name'])</code> you are just getting one number, namely the number of rows in the DataFrame (i.e., the length of the column itself).  If you want to apply <code>len</code> to each element in the column, use <code>df['column name'].map(len)</code>.  So try</p>\u000a\u000a<pre><code>df[df['column name'].map(len) &lt; 2]\u000a</code></pre>\u000a
p842
sVquestion_id
p843
I13851535
sVlast_activity_date
p844
I1355362621
sVcreation_date
p845
I1355362621
sVscore
p846
I34
sVowner
p847
(dp848
Vuser_id
p849
I1427416
sVprofile_image
p850
Vhttps://i.stack.imgur.com/QWHKg.png?s=128&g=1
p851
sVuser_type
p852
Vregistered
p853
sVreputation
p854
I123766
sVlink
p855
Vhttp://stackoverflow.com/users/1427416/brenbarn
p856
sVaccept_rate
p857
I50
sVdisplay_name
p858
VBrenBarn
p859
ssVis_accepted
p860
I01
sVanswer_id
p861
I13851602
sa(dp862
Vbody
p863
V<p>Just source the <code>virtualenvwrapper.sh</code> script in your script to import the virtualenvwrapper's functions. You should then be able to use the <code>workon</code> function in your script.</p>\u000a\u000a<p>And maybe better, you could create a shell script (you could name it <code>venv-run.sh</code> for example) to run any Python script into a given virtualenv, and place it in <code>/usr/bin</code>, <code>/usr/local/bin</code>, or any directory which is in your <code>PATH</code>. </p>\u000a\u000a<p>Such a script could look like this:</p>\u000a\u000a<pre><code>#!/bin/sh\u000a# if virtualenvwrapper.sh is in your PATH (i.e. installed with pip)\u000asource `which virtualenvwrapper.sh`\u000a#source /path/to/virtualenvwrapper.sh # if it's not in your PATH\u000aworkon $1\u000apython $2\u000adeactivate\u000a</code></pre>\u000a\u000a<p>And could be used simply like <code>venv-run.sh my_virtualenv /path/to/script.py</code></p>\u000a
p864
sVquestion_id
p865
I7538628
sVlast_activity_date
p866
I1353550806
sVcreation_date
p867
I1316872430
sVscore
p868
I49
sVowner
p869
(dp870
Vuser_id
p871
I293050
sVprofile_image
p872
Vhttps://www.gravatar.com/avatar/e82816a51578772c55dae3470c822ff2?s=128&d=identicon&r=PG
p873
sVuser_type
p874
Vregistered
p875
sVreputation
p876
I9865
sVlink
p877
Vhttp://stackoverflow.com/users/293050/mattoufoutu
p878
sVaccept_rate
p879
I88
sVdisplay_name
p880
VMatToufoutu
p881
ssVis_accepted
p882
I01
sVlast_edit_date
p883
I1353550806
sVanswer_id
p884
I7539449
sa(dp885
Vbody
p886
V<p>You use something like</p>\u000a\u000a<pre><code>from flask import send_file\u000a\u000a@app.route('/get_image')\u000adef get_image():\u000a    if request.args.get('type') == '1':\u000a       filename = 'ok.gif'\u000a    else:\u000a       filename = 'error.gif'\u000a    return send_file(filename, mimetype='image/gif')\u000a</code></pre>\u000a\u000a<p>to send back <code>ok.gif</code> or <code>error.gif</code>, depending on the type query parameter. See the documentation for the <a href="http://flask.pocoo.org/docs/api/#flask.send_file"><code>send_file</code> function</a> and the <a href="http://flask.pocoo.org/docs/api/#incoming-request-data"><code>request</code> object</a> for more information.</p>\u000a
p887
sVquestion_id
p888
I8637153
sVlast_activity_date
p889
I1352458373
sVcreation_date
p890
I1324915007
sVscore
p891
I75
sVowner
p892
(dp893
Vuser_id
p894
I110204
sVprofile_image
p895
Vhttps://www.gravatar.com/avatar/6bf0300fc4a5c9012fd254d3da2a6e69?s=128&d=identicon&r=PG
p896
sVuser_type
p897
Vregistered
p898
sVreputation
p899
I58568
sVlink
p900
Vhttp://stackoverflow.com/users/110204/martin-geisler
p901
sVaccept_rate
p902
I100
sVdisplay_name
p903
VMartin Geisler
p904
ssVis_accepted
p905
I01
sVlast_edit_date
p906
I1352458373
sVanswer_id
p907
I8637217
sa(dp908
Vbody
p909
V<p>You're getting the error because you're taking a <code>self</code> argument in each of those functions. They're static, you don't need it.</p>\u000a\u000a<p>However, the 'pythonic' way of doing this is not to have a class full of static methods, but to just make them free functions in a module.</p>\u000a\u000a<pre><code>#fileutility.py:\u000a\u000adef get_file_size(fullName):\u000a    fileSize = os.path.getsize(fullName)\u000a    return fileSize\u000a\u000a\u000adef get_file_path(fullName):\u000a    filePath = os.path.abspath(fullName)\u000a    return filePath\u000a</code></pre>\u000a\u000a<p>Now, in your other python files (assuming fileutility.py is in the same directory or on the <code>PYTHONPATH</code>)</p>\u000a\u000a<pre><code>import fileutility\u000a\u000afileutility.get_file_size("myfile.txt")\u000afileutility.get_file_path("that.txt")\u000a</code></pre>\u000a\u000a<p>It doesn't mention static methods specifically, but if you're coming from a different language, <a href="http://www.python.org/dev/peps/pep-0008/">PEP 8</a>, the python style guide is a good read and introduction to how python programmers think.</p>\u000a
p910
sVquestion_id
p911
I12735392
sVlast_activity_date
p912
I1349383635
sVcreation_date
p913
I1349382913
sVscore
p914
I76
sVowner
p915
(dp916
Vuser_id
p917
I224286
sVprofile_image
p918
Vhttps://www.gravatar.com/avatar/0f3d72b765bb4aed80f3138ca74606d9?s=128&d=identicon&r=PG
p919
sVuser_type
p920
Vregistered
p921
sVreputation
p922
I8424
sVlink
p923
Vhttp://stackoverflow.com/users/224286/collin
p924
sVaccept_rate
p925
I100
sVdisplay_name
p926
VCollin
p927
ssVis_accepted
p928
I01
sVlast_edit_date
p929
I1349383635
sVanswer_id
p930
I12735474
sa(dp931
Vbody
p932
V<h2>Solution</h2>\u000a\u000a<p>Yes, you can:</p>\u000a\u000a<pre><code>l = L[1::2]\u000a</code></pre>\u000a\u000a<p>And this is all. The result will contain the elements placed on the following positions (<code>0</code>-based, so first element is at position <code>0</code>, second at <code>1</code> etc.):</p>\u000a\u000a<pre><code>1, 3, 5\u000a</code></pre>\u000a\u000a<p>so the result (actual numbers) will be:</p>\u000a\u000a<pre><code>2, 4, 6\u000a</code></pre>\u000a\u000a<h2>Explanation</h2>\u000a\u000a<p>The <code>[1::2]</code> at the end is just a notation for list slicing. Usually it is in the following form:</p>\u000a\u000a<pre><code>some_list[start:stop:step]\u000a</code></pre>\u000a\u000a<p>If we omitted <code>start</code>, the default (<code>0</code>) would be used. So the first element (at position <code>0</code>, because the indexes are <code>0</code>-based) would be selected. In this case the second element will be selected.</p>\u000a\u000a<p>Because the second element is omitted, the default is being used (the end of the list). So the list is being iterated <strong>from the second element to the end</strong>.</p>\u000a\u000a<p>We also provided third argument (<code>step</code>) which is <code>2</code>. Which means that one element will be selected, the next will be skipped, and so on...</p>\u000a\u000a<p>So, to sum up, in this case <code>[1::2]</code> means:</p>\u000a\u000a<ol>\u000a<li>take the second element (which, by the way, is an odd element, if you judge from the index),</li>\u000a<li>skip one element (because we have <code>step=2</code>, so we are skipping one, as a contrary to <code>step=1</code> which is default),</li>\u000a<li>take the next element,</li>\u000a<li>Repeat steps 2.-3. until the end of the list is reached,</li>\u000a</ol>\u000a\u000a<p><strong>EDIT</strong>: @PreetKukreti gave a link for another explanation on Python's list slicing notation. See here: <a href="http://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation">Good Primer for Python Slice Notation</a></p>\u000a\u000a<h2>Extras - replacing counter with <code>enumerate()</code></h2>\u000a\u000a<p>In your code, you explicitly create and increase the counter. In Python this is not necessary, as you can enumerate through some iterable using <a href="http://docs.python.org/library/functions.html#enumerate"><code>enumerate()</code></a>:</p>\u000a\u000a<pre><code>for count, i in enumerate(L):\u000a    if count % 2 == 1:\u000a        l.append(i)\u000a</code></pre>\u000a\u000a<p>The above serves exactly the same purpose as the code you were using:</p>\u000a\u000a<pre><code>count = 0\u000afor i in L:\u000a    if count % 2 == 1:\u000a        l.append(i)\u000a    count += 1\u000a</code></pre>\u000a\u000a<p>More on emulating <code>for</code> loops with counter in Python: <a href="http://stackoverflow.com/q/522563/548696">Accessing the index in Python for loops</a></p>\u000a
p933
sVquestion_id
p934
I12433695
sVlast_activity_date
p935
I1347699409
sVcreation_date
p936
I1347671329
sVscore
p937
I97
sVowner
p938
(dp939
Vuser_id
p940
I548696
sVprofile_image
p941
Vhttps://www.gravatar.com/avatar/c9b170f54e3286eea9aca961f7bfe3ef?s=128&d=identicon&r=PG
p942
sVuser_type
p943
Vregistered
p944
sVreputation
p945
I68236
sVlink
p946
Vhttp://stackoverflow.com/users/548696/tadeck
p947
sVaccept_rate
p948
I90
sVdisplay_name
p949
VTadeck
p950
ssVis_accepted
p951
I01
sVlast_edit_date
p952
I1347699409
sVanswer_id
p953
I12433705
sa(dp954
Vbody
p955
V<p>Passing <code>[]</code> as second argument to <code>dict.fromkeys()</code> gives a rather useless result \u2013 all values in the dictionary will be the <em>same</em> list object.</p>\u000a\u000a<p>In Python 2.7 or above, you can use a dicitonary comprehension instead:</p>\u000a\u000a<pre><code>data = {k: [] for k in range(2)}\u000a</code></pre>\u000a\u000a<p>In earlier versions of Python, you can use</p>\u000a\u000a<pre><code>data = dict((k, []) for k in range(2))\u000a</code></pre>\u000a
p956
sVquestion_id
p957
I11509721
sVlast_activity_date
p958
I1342466945
sVcreation_date
p959
I1342461049
sVscore
p960
I54
sVowner
p961
(dp962
Vuser_id
p963
I279627
sVprofile_image
p964
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p965
sVuser_type
p966
Vregistered
p967
sVreputation
p968
I252330
sVlink
p969
Vhttp://stackoverflow.com/users/279627/sven-marnach
p970
sVaccept_rate
p971
I78
sVdisplay_name
p972
VSven Marnach
p973
ssVis_accepted
p974
I01
sVlast_edit_date
p975
I1342466945
sVanswer_id
p976
I11509759
sa(dp977
Vbody
p978
V<p>Use <a href="http://docs.python.org/library/multiprocessing.html#sharing-state-between-processes">shared variable</a> to communicate. For example like this:</p>\u000a\u000a<pre><code>def worker(procnum, return_dict):\u000a    '''worker function'''\u000a    print str(procnum) + ' represent!'\u000a    return_dict[procnum] = procnum\u000a\u000a\u000aif __name__ == '__main__':\u000a    manager = Manager()\u000a    return_dict = manager.dict()\u000a    jobs = []\u000a    for i in range(5):\u000a        p = multiprocessing.Process(target=worker, args=(i,return_dict))\u000a        jobs.append(p)\u000a        p.start()\u000a\u000a    for proc in jobs:\u000a        proc.join()\u000a    print return_dict.values()\u000a</code></pre>\u000a
p979
sVquestion_id
p980
I10415028
sVlast_activity_date
p981
I1335966908
sVcreation_date
p982
I1335966908
sVscore
p983
I43
sVowner
p984
(dp985
Vuser_id
p986
I60711
sVprofile_image
p987
Vhttps://www.gravatar.com/avatar/0b4fa970be41e2286c39f5b0167e6d9d?s=128&d=identicon&r=PG
p988
sVuser_type
p989
Vregistered
p990
sVreputation
p991
I80752
sVlink
p992
Vhttp://stackoverflow.com/users/60711/vartec
p993
sVaccept_rate
p994
I82
sVdisplay_name
p995
Vvartec
p996
ssVis_accepted
p997
I01
sVanswer_id
p998
I10415215
sa(dp999
Vbody
p1000
V<p>You are using <code>encode("utf-8")</code> incorrectly.  Python byte strings (<code>str</code> type) have an encoding, Unicode does not.  You can convert a Unicode string to a Python byte string using <code>uni.encode(encoding)</code>, and you can convert a byte string to a Unicode string using <code>s.decode(encoding)</code> (or equivalently, <code>unicode(s, encoding)</code>).</p>\u000a\u000a<p>If <code>fullFilePath</code> and <code>path</code> are currently a <code>str</code> type, you should figure out how they are encoded.  For example, if the current encoding is utf-8, you would use:</p>\u000a\u000a<pre><code>path = path.decode('utf-8')\u000afullFilePath = fullFilePath.decode('utf-8')\u000a</code></pre>\u000a\u000a<p>If this doesn't fix it, the actual issue may be that you are not using a Unicode string in your <code>execute()</code> call, try changing it to the following:</p>\u000a\u000a<pre><code>cur.execute(u"update docs set path = :fullFilePath where path = :path", locals())\u000a</code></pre>\u000a
p1001
sVquestion_id
p1002
I10288016
sVlast_activity_date
p1003
I1335283662
sVcreation_date
p1004
I1335215732
sVscore
p1005
I52
sVowner
p1006
(dp1007
Vuser_id
p1008
I505154
sVprofile_image
p1009
Vhttps://www.gravatar.com/avatar/2e8b69989251cfc746626b802f610a2c?s=128&d=identicon&r=PG
p1010
sVuser_type
p1011
Vregistered
p1012
sVreputation
p1013
I114239
sVlink
p1014
Vhttp://stackoverflow.com/users/505154/andrew-clark
p1015
sVaccept_rate
p1016
I100
sVdisplay_name
p1017
VAndrew Clark
p1018
ssVis_accepted
p1019
I01
sVlast_edit_date
p1020
I1335283662
sVanswer_id
p1021
I10288438
sa(dp1022
Vbody
p1023
V<p>Unicode escapes only work in unicode strings, so this</p>\u000a\u000a<pre><code> a="\u005cu2026"\u000a</code></pre>\u000a\u000a<p>is actually a string of 6 characters: '\u005c', 'u', '2', '0', '2', '6'.</p>\u000a\u000a<p>To make unicode out of this, use <code>decode('unicode-escape')</code>:</p>\u000a\u000a<pre><code>a="\u005cu2026"\u000aprint repr(a)\u000aprint repr(a.decode('unicode-escape'))\u000a\u000a## '\u005c\u005cu2026'\u000a## u'\u005cu2026'\u000a</code></pre>\u000a
p1024
sVquestion_id
p1025
I10268518
sVlast_activity_date
p1026
I1335103180
sVcreation_date
p1027
I1335103180
sVscore
p1028
I60
sVowner
p1029
(dp1030
Vuser_id
p1031
I989121
sVprofile_image
p1032
Vhttps://i.stack.imgur.com/1Cvf7.png?s=128&g=1
p1033
sVuser_type
p1034
Vregistered
p1035
sVreputation
p1036
I107744
sVlink
p1037
Vhttp://stackoverflow.com/users/989121/georg
p1038
sVaccept_rate
p1039
I93
sVdisplay_name
p1040
Vgeorg
p1041
ssVis_accepted
p1042
I01
sVanswer_id
p1043
I10268548
sa(dp1044
Vbody
p1045
V<p>Correct. You can't use exec in a function that has a subfunction, unless you specify a context. From the docs:</p>\u000a\u000a<blockquote>\u000a  <p>If exec is used in a function and the\u000a  function contains a nested block with\u000a  free variables, the compiler will\u000a  raise a SyntaxError unless the exec\u000a  explicitly specifies the local\u000a  namespace for the exec.  (In other\u000a  words, "exec obj" would be illegal,\u000a  but  "exec obj in ns" would be legal.)</p>\u000a</blockquote>\u000a\u000a<p>There is good reason for this which I would probably understand if it wasn't Sunday night.\u000aNow, next question: Why are you using exec? It's very rarely needed. You say you have a good reason. I'm feeling sceptical about that. ;) If you have a good reason I'll tell you the workaround. :-P</p>\u000a\u000a<p>Oh well, here it is anyway:</p>\u000a\u000a<pre><code>def test2():\u000a    """Test with a subfunction."""\u000a    exec 'print "hi from test2"' in globals(), locals()\u000a    def subfunction():\u000a        return True\u000a</code></pre>\u000a
p1046
sVquestion_id
p1047
I4484872
sVlast_activity_date
p1048
I1334080233
sVcreation_date
p1049
I1292790674
sVscore
p1050
I55
sVowner
p1051
(dp1052
Vuser_id
p1053
I126214
sVprofile_image
p1054
Vhttps://www.gravatar.com/avatar/9ff70f96fa67c2a3c80ecf0486138bc2?s=128&d=identicon&r=PG
p1055
sVuser_type
p1056
Vregistered
p1057
sVreputation
p1058
I82828
sVlink
p1059
Vhttp://stackoverflow.com/users/126214/lennart-regebro
p1060
sVaccept_rate
p1061
I100
sVdisplay_name
p1062
VLennart Regebro
p1063
ssVis_accepted
p1064
I01
sVlast_edit_date
p1065
I1334080233
sVanswer_id
p1066
I4484946
sa(dp1067
Vbody
p1068
V<p>An easy approach for you:</p>\u000a\u000a<pre><code>number_dec = str(number-int(number))[1:]\u000a</code></pre>\u000a
p1069
sVquestion_id
p1070
I3886402
sVlast_activity_date
p1071
I1330923777
sVcreation_date
p1072
I1330923777
sVscore
p1073
I13
sVowner
p1074
(dp1075
Vuser_id
p1076
I1241703
sVprofile_image
p1077
Vhttps://www.gravatar.com/avatar/c5b6e02982d52abf5f43a41423e53a81?s=128&d=identicon&r=PG
p1078
sVuser_type
p1079
Vregistered
p1080
sVreputation
p1081
I566
sVlink
p1082
Vhttp://stackoverflow.com/users/1241703/lllluuukke
p1083
sVaccept_rate
p1084
I71
sVdisplay_name
p1085
Vlllluuukke
p1086
ssVis_accepted
p1087
I01
sVanswer_id
p1088
I9561870
sa(dp1089
Vbody
p1090
V<p>First <code>a</code> pointed to the string "Dog".  Then you changed the variable <code>a</code> to point at a new string "Dog eats treats".  You didn't actually mutate the string "Dog".  Strings are immutable, variables can point at whatever they want.</p>\u000a
p1091
sVquestion_id
p1092
I9097994
sVlast_activity_date
p1093
I1328108403
sVcreation_date
p1094
I1328108403
sVscore
p1095
I90
sVowner
p1096
(dp1097
Vuser_id
p1098
I1158666
sVprofile_image
p1099
Vhttps://www.gravatar.com/avatar/f3b768ad1a2cea4ba168ae9d7a930662?s=128&d=identicon&r=PG
p1100
sVuser_type
p1101
Vregistered
p1102
sVreputation
p1103
I5386
sVlink
p1104
Vhttp://stackoverflow.com/users/1158666/bort
p1105
sVaccept_rate
p1106
I71
sVdisplay_name
p1107
VBort
p1108
ssVis_accepted
p1109
I01
sVanswer_id
p1110
I9098038
sa(dp1111
Vbody
p1112
V<p>In python a list knows its length, so you can just do <code>len(sys.argv)</code> to get the number of elements in <code>argv</code>.</p>\u000a
p1113
sVquestion_id
p1114
I8201955
sVlast_activity_date
p1115
I1321797294
sVcreation_date
p1116
I1321797294
sVscore
p1117
I79
sVowner
p1118
(dp1119
Vuser_id
p1120
I149392
sVprofile_image
p1121
Vhttps://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG
p1122
sVuser_type
p1123
Vregistered
p1124
sVreputation
p1125
I245551
sVlink
p1126
Vhttp://stackoverflow.com/users/149392/sepp2k
p1127
sVdisplay_name
p1128
Vsepp2k
p1129
ssVis_accepted
p1130
I01
sVanswer_id
p1131
I8201975
sa(dp1132
Vbody
p1133
V<p>You can use the <code>setattr</code> method:</p>\u000a\u000a<pre><code>class Foo:\u000a  def setAllWithKwArgs(self, **kwargs):\u000a    for key, value in kwargs.items():\u000a      setattr(self, key, value)\u000a</code></pre>\u000a\u000a<p>There is an analogous <code>getattr</code> method for retrieving attributes.</p>\u000a
p1134
sVquestion_id
p1135
I8187082
sVlast_activity_date
p1136
I1321640824
sVcreation_date
p1137
I1321640824
sVscore
p1138
I79
sVowner
p1139
(dp1140
Vuser_id
p1141
I147356
sVprofile_image
p1142
Vhttps://www.gravatar.com/avatar/b9506717d24256a090524dd5505d3207?s=128&d=identicon&r=PG
p1143
sVuser_type
p1144
Vregistered
p1145
sVreputation
p1146
I70015
sVlink
p1147
Vhttp://stackoverflow.com/users/147356/larsks
p1148
sVaccept_rate
p1149
I59
sVdisplay_name
p1150
Vlarsks
p1151
ssVis_accepted
p1152
I01
sVanswer_id
p1153
I8187203
sa(dp1154
Vbody
p1155
V<pre><code>print s % tuple(x)\u000a</code></pre>\u000a\u000a<p>instead of </p>\u000a\u000a<pre><code>print s % (x)\u000a</code></pre>\u000a
p1156
sVquestion_id
p1157
I7568627
sVlast_activity_date
p1158
I1317124988
sVcreation_date
p1159
I1317124389
sVscore
p1160
I56
sVowner
p1161
(dp1162
Vuser_id
p1163
I378065
sVprofile_image
p1164
Vhttps://www.gravatar.com/avatar/93e9eb3c453e3fa87a42f51a361840c5?s=128&d=identicon&r=PG
p1165
sVuser_type
p1166
Vregistered
p1167
sVreputation
p1168
I1918
sVlink
p1169
Vhttp://stackoverflow.com/users/378065/infrared
p1170
sVaccept_rate
p1171
I56
sVdisplay_name
p1172
Vinfrared
p1173
ssVis_accepted
p1174
I01
sVlast_edit_date
p1175
I1317124988
sVanswer_id
p1176
I7568645
sa(dp1177
Vbody
p1178
V<p>A md5-hash is just a 128-bit value, so if you want a random one:</p>\u000a\u000a<pre><code>import random\u000a\u000ahash = random.getrandbits(128)\u000a\u000aprint "hash value: %032x" % hash\u000a</code></pre>\u000a\u000a<p>I don't really see the point, though. Maybe you should elaborate why you need this...</p>\u000a
p1179
sVquestion_id
p1180
I976577
sVlast_activity_date
p1181
I1314642575
sVcreation_date
p1182
I1244650152
sVscore
p1183
I79
sVowner
p1184
(dp1185
Vuser_id
p1186
I56338
sVprofile_image
p1187
Vhttps://www.gravatar.com/avatar/92fb4563ddc5ceeaa8b19b60a7a172f4?s=128&d=identicon&r=PG
p1188
sVuser_type
p1189
Vregistered
p1190
sVreputation
p1191
I137369
sVlink
p1192
Vhttp://stackoverflow.com/users/56338/sth
p1193
sVaccept_rate
p1194
I44
sVdisplay_name
p1195
Vsth
p1196
ssVis_accepted
p1197
I01
sVlast_edit_date
p1198
I1314642575
sVanswer_id
p1199
I976607
sa(dp1200
Vbody
p1201
V<p>What OS are you using?  In unix (mac os X included) you can do <code>which python</code> and it will tell you.</p>\u000a
p1202
sVquestion_id
p1203
I6767283
sVlast_activity_date
p1204
I1311189681
sVcreation_date
p1205
I1311189681
sVscore
p1206
I43
sVowner
p1207
(dp1208
Vuser_id
p1209
I247985
sVprofile_image
p1210
Vhttps://www.gravatar.com/avatar/ae7d3f50796c4af208cfc82c7b23d9f7?s=128&d=identicon&r=PG
p1211
sVuser_type
p1212
Vregistered
p1213
sVreputation
p1214
I39874
sVlink
p1215
Vhttp://stackoverflow.com/users/247985/dhg
p1216
sVaccept_rate
p1217
I94
sVdisplay_name
p1218
Vdhg
p1219
ssVis_accepted
p1220
I01
sVanswer_id
p1221
I6767301
sa(dp1222
Vbody
p1223
V<p>those are just <code>Column</code> objects, index=True flag works normally:</p>\u000a\u000a<pre><code>class A(Base):\u000a    __tablename__ = 'table_A'\u000a    id = Column(Integer, primary_key=True)\u000a    a = Column(String(32), index=True)\u000a    b = Column(String(32), index=True)\u000a</code></pre>\u000a\u000a<p>if you'd like a composite index, again <code>Table</code> is present here as usual you just don't have to declare it, everything works the same (make sure you're on recent 0.6 or 0.7 for the declarative A.a wrapper to be interpreted as a <code>Column</code> after the class declaration is complete):</p>\u000a\u000a<pre><code>class A(Base):\u000a    __tablename__ = 'table_A'\u000a    id = Column(Integer, primary_key=True)\u000a    a = Column(String(32))\u000a    b = Column(String(32))\u000a\u000aIndex('my_index', A.a, A.b)\u000a</code></pre>\u000a\u000a<p>In 0.7 the <code>Index</code> can be in the <code>Table</code> arguments too, which with declarative is via <code>__table_args__</code>:</p>\u000a\u000a<pre><code>class A(Base):\u000a    __tablename__ = 'table_A'\u000a    id = Column(Integer, primary_key=True)\u000a    a = Column(String(32))\u000a    b = Column(String(32))\u000a    __table_args__ = (Index('my_index', "a", "b"), )\u000a</code></pre>\u000a
p1224
sVquestion_id
p1225
I6626810
sVlast_activity_date
p1226
I1310140849
sVcreation_date
p1227
I1310140849
sVscore
p1228
I69
sVowner
p1229
(dp1230
Vuser_id
p1231
I34549
sVprofile_image
p1232
Vhttps://www.gravatar.com/avatar/7c63a03cc45f763a06149d6c99cef46c?s=128&d=identicon&r=PG
p1233
sVuser_type
p1234
Vregistered
p1235
sVreputation
p1236
I38836
sVlink
p1237
Vhttp://stackoverflow.com/users/34549/zzzeek
p1238
sVaccept_rate
p1239
I80
sVdisplay_name
p1240
Vzzzeek
p1241
ssVis_accepted
p1242
I01
sVanswer_id
p1243
I6627154
sa(dp1244
Vbody
p1245
V<p>If you want to just make the computer make a beep sound:</p>\u000a\u000a<pre><code>import winsound\u000aFreq = 2500 # Set Frequency To 2500 Hertz\u000aDur = 1000 # Set Duration To 1000 ms == 1 second\u000awinsound.Beep(Freq,Dur)\u000a</code></pre>\u000a\u000a<p>The winsound.Beep can be used wherever you want the Beep to occur.</p>\u000a
p1246
sVquestion_id
p1247
I6537481
sVlast_activity_date
p1248
I1309449193
sVcreation_date
p1249
I1309449193
sVscore
p1250
I68
sVowner
p1251
(dp1252
Vuser_id
p1253
I789826
sVprofile_image
p1254
Vhttps://i.stack.imgur.com/bwOIa.png?s=128&g=1
p1255
sVuser_type
p1256
Vregistered
p1257
sVreputation
p1258
I2457
sVlink
p1259
Vhttp://stackoverflow.com/users/789826/cyanrook
p1260
sVdisplay_name
p1261
VCyanRook
p1262
ssVis_accepted
p1263
I01
sVanswer_id
p1264
I6537563
sa(dp1265
Vbody
p1266
V<pre><code>&gt;&gt;&gt; import inspect\u000a&gt;&gt;&gt; \u000a&gt;&gt;&gt; def foo():\u000a...   return 'foo'\u000a... \u000a&gt;&gt;&gt; def bar():\u000a...   yield 'bar'\u000a... \u000a&gt;&gt;&gt; print inspect.isgeneratorfunction(foo)\u000aFalse\u000a&gt;&gt;&gt; print inspect.isgeneratorfunction(bar)\u000aTrue\u000a</code></pre>\u000a\u000a<ul>\u000a<li>New in Python version 2.6</li>\u000a</ul>\u000a
p1267
sVquestion_id
p1268
I1871685
sVlast_activity_date
p1269
I1308600554
sVcreation_date
p1270
I1308600554
sVscore
p1271
I50
sVowner
p1272
(dp1273
Vuser_id
p1274
I16148
sVprofile_image
p1275
Vhttps://www.gravatar.com/avatar/0a7bb11b0b414ca9b12250fd73150c94?s=128&d=identicon&r=PG
p1276
sVuser_type
p1277
Vregistered
p1278
sVreputation
p1279
I29197
sVlink
p1280
Vhttp://stackoverflow.com/users/16148/corey-goldberg
p1281
sVaccept_rate
p1282
I73
sVdisplay_name
p1283
VCorey Goldberg
p1284
ssVis_accepted
p1285
I01
sVanswer_id
p1286
I6416855
sa(dp1287
Vbody
p1288
V<p>Sure! To set the ticks, just, well... Set the ticks (see <code>matplotlib.pyplot.xticks</code> or <code>ax.set_xticks</code>).  (Also, you don't need to manually set the facecolor of the patches. You can just pass in a keyword argument.)</p>\u000a\u000a<p>For the rest, you'll need to do some slightly more fancy things with the labeling, but matplotlib makes it fairly easy.</p>\u000a\u000a<p>As an example:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000aimport numpy as np\u000afrom matplotlib.ticker import FormatStrFormatter\u000a\u000adata = np.random.randn(82)\u000afig, ax = plt.subplots()\u000acounts, bins, patches = ax.hist(data, facecolor='yellow', edgecolor='gray')\u000a\u000a# Set the ticks to be at the edges of the bins.\u000aax.set_xticks(bins)\u000a# Set the xaxis's tick labels to be formatted with 1 decimal place...\u000aax.xaxis.set_major_formatter(FormatStrFormatter('%0.1f'))\u000a\u000a# Change the colors of bars at the edges...\u000atwentyfifth, seventyfifth = np.percentile(data, [25, 75])\u000afor patch, rightside, leftside in zip(patches, bins[1:], bins[:-1]):\u000a    if rightside &lt; twentyfifth:\u000a        patch.set_facecolor('green')\u000a    elif leftside &gt; seventyfifth:\u000a        patch.set_facecolor('red')\u000a\u000a# Label the raw counts and the percentages below the x-axis...\u000abin_centers = 0.5 * np.diff(bins) + bins[:-1]\u000afor count, x in zip(counts, bin_centers):\u000a    # Label the raw counts\u000a    ax.annotate(str(count), xy=(x, 0), xycoords=('data', 'axes fraction'),\u000a        xytext=(0, -18), textcoords='offset points', va='top', ha='center')\u000a\u000a    # Label the percentages\u000a    percent = '%0.0f%%' % (100 * float(count) / counts.sum())\u000a    ax.annotate(percent, xy=(x, 0), xycoords=('data', 'axes fraction'),\u000a        xytext=(0, -32), textcoords='offset points', va='top', ha='center')\u000a\u000a\u000a# Give ourselves some more room at the bottom of the plot\u000aplt.subplots_adjust(bottom=0.15)\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/PBgf5.png" alt="enter image description here"></p>\u000a
p1289
sVquestion_id
p1290
I6352740
sVlast_activity_date
p1291
I1308112548
sVcreation_date
p1292
I1308112548
sVscore
p1293
I78
sVowner
p1294
(dp1295
Vuser_id
p1296
I325565
sVprofile_image
p1297
Vhttps://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=128&d=identicon&r=PG
p1298
sVuser_type
p1299
Vregistered
p1300
sVreputation
p1301
I136691
sVlink
p1302
Vhttp://stackoverflow.com/users/325565/joe-kington
p1303
sVdisplay_name
p1304
VJoe Kington
p1305
ssVis_accepted
p1306
I01
sVanswer_id
p1307
I6353051
sa(dp1308
Vbody
p1309
V<p>If your list contains all non-negative ints, you should take a look at numpy.bincounts:</p>\u000a\u000a<p><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html">http://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html</a></p>\u000a\u000a<p>and then probably use np.argmax:</p>\u000a\u000a<pre><code>a = np.array([1,2,3,1,2,1,1,1,3,2,2,1])\u000acounts = np.bincount(a)\u000aprint np.argmax(counts)\u000a</code></pre>\u000a\u000a<p>For a more complicated list (that perhaps contains negative numbers or non-integer values), you can use <code>np.histogram</code> in a similar way. Alternatively, if you just want to work in python without using numpy, <code>collections.Counter</code> is a good way of handling this sort of data.</p>\u000a\u000a<pre><code>from collections import Counter\u000aa = [1,2,3,1,2,1,1,1,3,2,2,1]\u000ab = Counter(a)\u000aprint b.most_common(1)\u000a</code></pre>\u000a
p1310
sVquestion_id
p1311
I6252280
sVlast_activity_date
p1312
I1307366184
sVcreation_date
p1313
I1307365279
sVscore
p1314
I83
sVowner
p1315
(dp1316
Vuser_id
p1317
I392949
sVprofile_image
p1318
Vhttps://www.gravatar.com/avatar/ef7a66dcbb260f54c3d06b0490b844bf?s=128&d=identicon&r=PG
p1319
sVuser_type
p1320
Vregistered
p1321
sVreputation
p1322
I28899
sVlink
p1323
Vhttp://stackoverflow.com/users/392949/joshadel
p1324
sVaccept_rate
p1325
I70
sVdisplay_name
p1326
VJoshAdel
p1327
ssVis_accepted
p1328
I01
sVlast_edit_date
p1329
I1307366184
sVanswer_id
p1330
I6252400
sa(dp1331
Vbody
p1332
V<p>Like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; text = 'a,b,c'\u000a&gt;&gt;&gt; text = text.split(',')\u000a&gt;&gt;&gt; text\u000a[ 'a', 'b', 'c' ]\u000a</code></pre>\u000a\u000a<p>Alternatively, you can use <code>eval()</code> if you trust the string to be safe:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; text = 'a,b,c'\u000a&gt;&gt;&gt; text = eval('[' + text + ']')\u000a</code></pre>\u000a
p1333
sVquestion_id
p1334
I5387208
sVlast_activity_date
p1335
I1300771763
sVcreation_date
p1336
I1300771763
sVscore
p1337
I79
sVowner
p1338
(dp1339
Vuser_id
p1340
I21475
sVprofile_image
p1341
Vhttps://www.gravatar.com/avatar/003174af5095d12b7f9a5efc293eb041?s=128&d=identicon&r=PG
p1342
sVuser_type
p1343
Vregistered
p1344
sVreputation
p1345
I54710
sVlink
p1346
Vhttp://stackoverflow.com/users/21475/cameron
p1347
sVaccept_rate
p1348
I98
sVdisplay_name
p1349
VCameron
p1350
ssVis_accepted
p1351
I01
sVanswer_id
p1352
I5387227
sa(dp1353
Vbody
p1354
V<p>If you just want the entire background for both the figure and the axes to be transparent, you can simply specify <code>transparent=True</code> when saving the figure with <code>fig.savefig</code>. </p>\u000a\u000a<p>e.g.:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000afig = plt.figure()\u000aplt.plot(range(10))\u000afig.savefig('temp.png', transparent=True)\u000a</code></pre>\u000a\u000a<p>If you want more fine-grained control, you can simply set the facecolor and/or alpha values for the figure and axes background patch.  (To make a patch completely transparent, we can either set the alpha to 0, or set the facecolor to <code>'none'</code> (as a string, not the object <code>None</code>!))</p>\u000a\u000a<p>e.g.:</p>\u000a\u000a<pre><code>import matplotlib.pyplot as plt\u000a\u000afig = plt.figure()\u000a\u000afig.patch.set_facecolor('blue')\u000afig.patch.set_alpha(0.7)\u000a\u000aax = fig.add_subplot(111)\u000a\u000aax.plot(range(10))\u000a\u000aax.patch.set_facecolor('red')\u000aax.patch.set_alpha(0.5)\u000a\u000a# If we don't specify the edgecolor and facecolor for the figure when\u000a# saving with savefig, it will override the value we set earlier!\u000afig.savefig('temp.png', facecolor=fig.get_facecolor(), edgecolor='none')\u000a\u000aplt.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/GI2px.png" alt="alt text"></p>\u000a
p1355
sVquestion_id
p1356
I4581504
sVlast_activity_date
p1357
I1295211702
sVcreation_date
p1358
I1295211702
sVscore
p1359
I70
sVowner
p1360
(dp1361
Vuser_id
p1362
I325565
sVprofile_image
p1363
Vhttps://www.gravatar.com/avatar/342bd0a61c7081db529c856d3bcd9545?s=128&d=identicon&r=PG
p1364
sVuser_type
p1365
Vregistered
p1366
sVreputation
p1367
I136691
sVlink
p1368
Vhttp://stackoverflow.com/users/325565/joe-kington
p1369
sVdisplay_name
p1370
VJoe Kington
p1371
ssVis_accepted
p1372
I01
sVanswer_id
p1373
I4708018
sa(dp1374
Vbody
p1375
V<p>Personally:</p>\u000a\u000a<pre><code>for _ in range(50):\u000a    print "Some thing"\u000a</code></pre>\u000a\u000a<p>if you don't need <code>i</code>. If you use Python &lt; 3 and you want to repeat the loop a lot of times, use <code>xrange</code> as there is no need to generate the whole list beforehand.</p>\u000a
p1376
sVquestion_id
p1377
I4264634
sVlast_activity_date
p1378
I1290586774
sVcreation_date
p1379
I1290586422
sVscore
p1380
I56
sVowner
p1381
(dp1382
Vuser_id
p1383
I218196
sVprofile_image
p1384
Vhttps://i.stack.imgur.com/4P5DY.jpg?s=128&g=1
p1385
sVuser_type
p1386
Vregistered
p1387
sVreputation
p1388
I434937
sVlink
p1389
Vhttp://stackoverflow.com/users/218196/felix-kling
p1390
sVaccept_rate
p1391
I100
sVdisplay_name
p1392
VFelix Kling
p1393
ssVis_accepted
p1394
I01
sVlast_edit_date
p1395
I1290586774
sVanswer_id
p1396
I4264655
sa(dp1397
Vbody
p1398
V<p>The logging module already has partial support for what you want to do.  Do this:</p>\u000a\u000a<pre><code>log.debug("Some message: a=%s b=%s", a, b)\u000a</code></pre>\u000a\u000a<p>... instead of this:</p>\u000a\u000a<pre><code>log.debug("Some message: a=%s b=%s" % (a, b))\u000a</code></pre>\u000a\u000a<p>The logging module is smart enough to not produce the complete log message unless the message actually gets logged somewhere.</p>\u000a\u000a<p>To apply this feature to your specific request, you could create a lazyjoin class.</p>\u000a\u000a<pre><code>class lazyjoin:\u000a    def __init__(self, s, items):\u000a        self.s = s\u000a        self.items = items\u000a    def __str__(self):\u000a        return self.s.join(self.items)\u000a</code></pre>\u000a\u000a<p>Use it like this (note the use of a generator expression, adding to the laziness):</p>\u000a\u000a<pre><code>logger.info('Stupid log message %s', lazyjoin(' ', (str(i) for i in range(20))))\u000a</code></pre>\u000a\u000a<p>Here is a demo that shows this works.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import logging\u000a&gt;&gt;&gt; logging.basicConfig(level=logging.INFO)\u000a&gt;&gt;&gt; logger = logging.getLogger("log")\u000a&gt;&gt;&gt; class DoNotStr:\u000a...     def __str__(self):\u000a...         raise AssertionError("the code should not have called this")\u000a... \u000a&gt;&gt;&gt; logger.info('Message %s', DoNotStr())\u000aTraceback (most recent call last):\u000a...\u000aAssertionError: the code should not have called this\u000a&gt;&gt;&gt; logger.debug('Message %s', DoNotStr())\u000a&gt;&gt;&gt;\u000a</code></pre>\u000a\u000a<p>In the demo, The logger.info() call hit the assertion error, while logger.debug() did not get that far.</p>\u000a
p1399
sVquestion_id
p1400
I4148790
sVlast_activity_date
p1401
I1289424335
sVcreation_date
p1402
I1289424335
sVscore
p1403
I58
sVowner
p1404
(dp1405
Vuser_id
p1406
I319430
sVprofile_image
p1407
Vhttps://www.gravatar.com/avatar/b786702b8e656d20639b861520a55c7a?s=128&d=identicon&r=PG
p1408
sVuser_type
p1409
Vregistered
p1410
sVreputation
p1411
I1353
sVlink
p1412
Vhttp://stackoverflow.com/users/319430/shane-hathaway
p1413
sVdisplay_name
p1414
VShane Hathaway
p1415
ssVis_accepted
p1416
I01
sVanswer_id
p1417
I4149231
sa(dp1418
Vbody
p1419
V<p>You're trying to use a JSON parser to parse something that isn't JSON.  Your best bet is to get the creator of the feeds to fix them.</p>\u000a\u000a<p>I understand that isn't always possible.  You might be able to fix the data using regexes, depending on how broken it is:</p>\u000a\u000a<pre><code>j = re.sub(r"{\u005cs*(\u005cw)", r'{"\u005c1', j)\u000aj = re.sub(r",\u005cs*(\u005cw)", r',"\u005c1', j)\u000aj = re.sub(r"(\u005cw):", r'\u005c1":', j)\u000a</code></pre>\u000a
p1420
sVquestion_id
p1421
I4033633
sVlast_activity_date
p1422
I1288186004
sVcreation_date
p1423
I1288186004
sVscore
p1424
I31
sVowner
p1425
(dp1426
Vuser_id
p1427
I14343
sVprofile_image
p1428
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p1429
sVuser_type
p1430
Vregistered
p1431
sVreputation
p1432
I193903
sVlink
p1433
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p1434
sVaccept_rate
p1435
I80
sVdisplay_name
p1436
VNed Batchelder
p1437
ssVis_accepted
p1438
I01
sVanswer_id
p1439
I4033740
sa(dp1440
Vbody
p1441
V<p>Most likely its syntactic sugar. Like the <code>Wend</code> of Visual Basic.</p>\u000a
p1442
sVquestion_id
p1443
I3742580
sVlast_activity_date
p1444
I1284829241
sVcreation_date
p1445
I1284829241
sVscore
p1446
I2
sVowner
p1447
(dp1448
Vuser_id
p1449
I23528
sVprofile_image
p1450
Vhttps://www.gravatar.com/avatar/1595024881f1df4af9e2280926fb6272?s=128&d=identicon&r=PG
p1451
sVuser_type
p1452
Vregistered
p1453
sVreputation
p1454
I128586
sVlink
p1455
Vhttp://stackoverflow.com/users/23528/daniel-a-white
p1456
sVaccept_rate
p1457
I71
sVdisplay_name
p1458
VDaniel A. White
p1459
ssVis_accepted
p1460
I01
sVanswer_id
p1461
I3742598
sa(dp1462
Vbody
p1463
V<p>Firstly, your URL definition does not accept any parameters at all. If you want parameters to be passed from the URL into the view, you need to define them in the urlconf.</p>\u000a\u000a<p>Secondly, it's not at all clear what you are expecting to happen to the cleaned_data dictionary. Don't forget you can't redirect to a POST - this is a limitation of HTTP, not Django - so your cleaned_data either needs to be a URL parameter (horrible) or, slightly better, a series of GET parameters - so the URL would be in the form:</p>\u000a\u000a<pre><code>/link/mybackend/?field1=value1&amp;field2=value2&amp;field3=value3\u000a</code></pre>\u000a\u000a<p>and so on. In this case, field1, field2 and field3 are <em>not</em> included in the URLconf definition - they are available in the view via <code>request.GET</code>.</p>\u000a\u000a<p>So your urlconf would be:</p>\u000a\u000a<pre><code>url(r'^link/(?P&lt;backend&gt;\u005cw+?)/$', my_function)\u000a</code></pre>\u000a\u000a<p>and the view would look like:</p>\u000a\u000a<pre><code>def my_function(request, backend):\u000a   data = request.GET\u000a</code></pre>\u000a\u000a<p>and the reverse would be (after importing <code>urllib</code>):</p>\u000a\u000a<pre><code>return "%s?%s" % (redirect('my_function', args=(backend,)),\u000a                  urllib.urlencode(form.cleaned_data))\u000a</code></pre>\u000a\u000a<p><strong>Edited after comment</strong></p>\u000a\u000a<p>The whole point of using redirect and reverse, as you have been doing, is that you go to the URL - it returns an Http code that causes the browser to redirect to the new URL, and call that.</p>\u000a\u000a<p>If you simply want to call the view from within your code, just do it directly - no need to use reverse at all.</p>\u000a\u000a<p>That said, if all you want to do is store the data, then just put it in the session:</p>\u000a\u000a<pre><code>request.session['temp_data'] = form.cleaned_data\u000a</code></pre>\u000a
p1464
sVquestion_id
p1465
I3209906
sVlast_activity_date
p1466
I1278686548
sVcreation_date
p1467
I1278663170
sVscore
p1468
I47
sVowner
p1469
(dp1470
Vuser_id
p1471
I104349
sVprofile_image
p1472
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p1473
sVuser_type
p1474
Vregistered
p1475
sVreputation
p1476
I356767
sVlink
p1477
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p1478
sVaccept_rate
p1479
I86
sVdisplay_name
p1480
VDaniel Roseman
p1481
ssVis_accepted
p1482
I01
sVlast_edit_date
p1483
I1278686548
sVanswer_id
p1484
I3210919
sa(dp1485
Vbody
p1486
V<p>I still like what I wrote up <a href="http://macdevcenter.com/pub/a/python/excerpt/pythonckbk_chap1/index1.html?page=2" rel="noreferrer">here</a> (a Cookbook recipe with many other authors) -- it shows how a Sieve of Eratosthenes has no intrinsic limits, and the comments and discussion, I believe, make it quite clear.  This was recently discussed on Stack Overflow (search for the authors' names, I guess) and somebody proposed a substantially faster (but IMHO less clear) version;-).</p>\u000a
p1487
sVquestion_id
p1488
I2211990
sVlast_activity_date
p1489
I1265431302
sVcreation_date
p1490
I1265431302
sVscore
p1491
I22
sVowner
p1492
(dp1493
Vuser_id
p1494
I95810
sVprofile_image
p1495
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1496
sVuser_type
p1497
Vregistered
p1498
sVreputation
p1499
I516089
sVlink
p1500
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1501
sVaccept_rate
p1502
I80
sVdisplay_name
p1503
VAlex Martelli
p1504
ssVis_accepted
p1505
I01
sVanswer_id
p1506
I2212090
sa(dp1507
Vbody
p1508
V<p>You just need to configure the Django settings before you do any calls, including importing your models. Something like this:</p>\u000a\u000a<pre><code>from django.conf import settings\u000asettings.configure(\u000a    DATABASE_ENGINE = 'postgresql_psycopg2',\u000a    DATABASE_NAME = 'db_name',\u000a    DATABASE_USER = 'db_user',\u000a    DATABASE_PASSWORD = 'db_pass',\u000a    DATABASE_HOST = 'localhost',\u000a    DATABASE_PORT = '5432',\u000a    TIME_ZONE = 'America/New_York',\u000a)\u000a</code></pre>\u000a\u000a<p>Again, be sure to run that code before running, e.g.:</p>\u000a\u000a<pre><code>from your_app.models import *\u000a</code></pre>\u000a\u000a<p>Then just use the DB API as usual.</p>\u000a
p1509
sVquestion_id
p1510
I2180415
sVlast_activity_date
p1511
I1265062094
sVcreation_date
p1512
I1265062094
sVscore
p1513
I45
sVowner
p1514
(dp1515
Vuser_id
p1516
I90308
sVprofile_image
p1517
Vhttps://www.gravatar.com/avatar/7b7aefbc459629eb4c864b825894c9c4?s=128&d=identicon&r=PG
p1518
sVuser_type
p1519
Vregistered
p1520
sVreputation
p1521
I38667
sVlink
p1522
Vhttp://stackoverflow.com/users/90308/foglebird
p1523
sVaccept_rate
p1524
I93
sVdisplay_name
p1525
VFogleBird
p1526
ssVis_accepted
p1527
I01
sVanswer_id
p1528
I2180431
sa(dp1529
Vbody
p1530
V<p>You can treat the error as a response.</p>\u000a\u000a<p><a href="http://www.voidspace.org.uk/python/articles/urllib2.shtml#httperror" rel="noreferrer">http://www.voidspace.org.uk/python/articles/urllib2.shtml#httperror</a></p>\u000a\u000a<blockquote>\u000a  <p>When an error is raised the server\u000a  responds by returning an HTTP error\u000a  code and an error page. You can use\u000a  the HTTPError instance as a response\u000a  on the page returned. This means that\u000a  as well as the code attribute, it also\u000a  has read, geturl, and info, methods.</p>\u000a</blockquote>\u000a
p1531
sVquestion_id
p1532
I1663790
sVlast_activity_date
p1533
I1257197200
sVcreation_date
p1534
I1257197200
sVscore
p1535
I40
sVowner
p1536
(dp1537
Vuser_id
p1538
I147
sVprofile_image
p1539
Vhttps://www.gravatar.com/avatar/254ca3f1a5c9a73c20cbac880b8985a7?s=128&d=identicon&r=PG
p1540
sVuser_type
p1541
Vregistered
p1542
sVreputation
p1543
I11333
sVlink
p1544
Vhttp://stackoverflow.com/users/147/gareth-simpson
p1545
sVaccept_rate
p1546
I83
sVdisplay_name
p1547
VGareth Simpson
p1548
ssVis_accepted
p1549
I01
sVanswer_id
p1550
I1663809
sa(dp1551
Vbody
p1552
V<p>A <a href="http://docs.python.org/3.1/library/itertools.html#recipes" rel="noreferrer">Python recipe</a> (In Python 2.6, use <code>itertools.izip_longest</code>):</p>\u000a\u000a<pre><code>def grouper(n, iterable, fillvalue=None):\u000a    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"\u000a    args = [iter(iterable)] * n\u000a    return itertools.zip_longest(*args, fillvalue=fillvalue)\u000a</code></pre>\u000a\u000a<p>Example usage:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; list(grouper(3, range(9)))\u000a[(0, 1, 2), (3, 4, 5), (6, 7, 8)]\u000a&gt;&gt;&gt; list(grouper(3, range(10)))\u000a[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, None, None)]\u000a</code></pre>\u000a\u000a<p>If you want the last group to be shorter than the others instead of padded with <code>fillvalue</code>, then you could e.g. change the code like this:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; def mygrouper(n, iterable):\u000a...     args = [iter(iterable)] * n\u000a...     return ([e for e in t if e != None] for t in itertools.zip_longest(*args))\u000a... \u000a&gt;&gt;&gt; list(mygrouper(3, range(9)))\u000a[[0, 1, 2], [3, 4, 5], [6, 7, 8]]\u000a&gt;&gt;&gt; list(mygrouper(3, range(10)))\u000a[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\u000a</code></pre>\u000a
p1553
sVquestion_id
p1554
I1624883
sVlast_activity_date
p1555
I1256566931
sVcreation_date
p1556
I1256566131
sVscore
p1557
I35
sVowner
p1558
(dp1559
Vuser_id
p1560
I74939
sVprofile_image
p1561
Vhttps://www.gravatar.com/avatar/05cc371af855f1b67886051cff4af8d4?s=128&d=identicon&r=PG
p1562
sVuser_type
p1563
Vregistered
p1564
sVreputation
p1565
I39795
sVlink
p1566
Vhttp://stackoverflow.com/users/74939/stephan202
p1567
sVdisplay_name
p1568
VStephan202
p1569
ssVis_accepted
p1570
I01
sVlast_edit_date
p1571
I1256566931
sVanswer_id
p1572
I1625013
sa(dp1573
Vbody
p1574
V<p>The recommendations for customizing are at the very end of the <a href="http://docs.python.org/library/copy.html" rel="noreferrer">docs page</a>:</p>\u000a\u000a<blockquote>\u000a  <p>Classes can use the same interfaces to\u000a  control copying that they use to\u000a  control pickling. See the description\u000a  of module pickle for information on\u000a  these methods. The copy module does\u000a  not use the copy_reg registration\u000a  module.</p>\u000a  \u000a  <p>In order for a class to define its own\u000a  copy implementation, it can define\u000a  special methods <code>__copy__()</code> and\u000a  <code>__deepcopy__()</code>. The former is called to implement the shallow copy\u000a  operation; no additional arguments are\u000a  passed. The latter is called to\u000a  implement the deep copy operation; it\u000a  is passed one argument, the memo\u000a  dictionary. If the <code>__deepcopy__()</code>\u000a  implementation needs to make a deep\u000a  copy of a component, it should call\u000a  the <code>deepcopy()</code> function with the\u000a  component as first argument and the\u000a  memo dictionary as second argument.</p>\u000a</blockquote>\u000a\u000a<p>Since you appear not to care about pickling customization, defining <code>__copy__</code> and <code>__deepcopy__</code> definitely seems like the right way to go for you.</p>\u000a\u000a<p>Specifically, <code>__copy__</code> (the shallow copy) is pretty easy in your case...:</p>\u000a\u000a<pre><code>def __copy__(self):\u000a  newone = type(self)()\u000a  newone.__dict__.update(self.__dict__)\u000a  return newone\u000a</code></pre>\u000a\u000a<p><code>__deepcopy__</code> would be similar (accepting a <code>memo</code> arg too) but before the return it would have to call <code>self.foo = deepcopy(self.foo, memo)</code> for any attribute <code>self.foo</code> that needs deep copying (essentially attributes that are containers -- lists, dicts, non-primitive objects which hold other stuff through their <code>__dict__</code>s).</p>\u000a
p1575
sVquestion_id
p1576
I1500718
sVlast_activity_date
p1577
I1254349325
sVcreation_date
p1578
I1254347938
sVscore
p1579
I37
sVowner
p1580
(dp1581
Vuser_id
p1582
I95810
sVprofile_image
p1583
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1584
sVuser_type
p1585
Vregistered
p1586
sVreputation
p1587
I516089
sVlink
p1588
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1589
sVaccept_rate
p1590
I80
sVdisplay_name
p1591
VAlex Martelli
p1592
ssVis_accepted
p1593
I01
sVlast_edit_date
p1594
I1254349325
sVanswer_id
p1595
I1500887
sa(dp1596
Vbody
p1597
V<p>Consider using <code>urllib2</code> if it possible in your case.  It is more advanced and easy to use than <code>urllib</code>.</p>\u000a\u000a<p>You can detect any HTTP errors easily:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import urllib2\u000a&gt;&gt;&gt; resp = urllib2.urlopen("http://google.com/abc.jpg")\u000aTraceback (most recent call last):\u000a&lt;&lt;MANY LINES SKIPPED&gt;&gt;\u000aurllib2.HTTPError: HTTP Error 404: Not Found\u000a</code></pre>\u000a\u000a<p><code>resp</code> is actually <code>HTTPResponse</code> object that you can do a lot of useful things with:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; resp = urllib2.urlopen("http://google.com/")\u000a&gt;&gt;&gt; resp.code\u000a200\u000a&gt;&gt;&gt; resp.headers["content-type"]\u000a'text/html; charset=windows-1251'\u000a&gt;&gt;&gt; resp.read()\u000a"&lt;&lt;ACTUAL HTML&gt;&gt;"\u000a</code></pre>\u000a
p1598
sVquestion_id
p1599
I987876
sVlast_activity_date
p1600
I1244832364
sVcreation_date
p1601
I1244832364
sVscore
p1602
I21
sVowner
p1603
(dp1604
Vuser_id
p1605
I64045
sVprofile_image
p1606
Vhttps://i.stack.imgur.com/24aBr.jpg?s=128&g=1
p1607
sVuser_type
p1608
Vregistered
p1609
sVreputation
p1610
I4980
sVlink
p1611
Vhttp://stackoverflow.com/users/64045/alexander-lebedev
p1612
sVdisplay_name
p1613
VAlexander Lebedev
p1614
ssVis_accepted
p1615
I01
sVanswer_id
p1616
I988339
sa(dp1617
Vbody
p1618
V<p>Just create a string out of it.</p>\u000a\u000a<pre><code>myinteger = 212345\u000anumber_string = str(myinteger)\u000a</code></pre>\u000a\u000a<p>That's enough. Now you can iterate over it:</p>\u000a\u000a<pre><code>for ch in number_string:\u000a    print ch # will print each digit in order\u000a</code></pre>\u000a\u000a<p>Or you can slice it:</p>\u000a\u000a<pre><code>print number_string[:2] # first two digits\u000aprint number_string[-3:] # last three digits\u000aprint number_string[3] # forth digit\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p>Or better, don't convert the user's input to an integer (the user types a string)</p>\u000a\u000a<pre><code>isbn = raw_input()\u000afor pos, ch in enumerate(reversed(isbn)):\u000a    print "%d * %d is %d" % pos + 2, int(ch), int(ch) * (pos + 2)\u000a</code></pre>\u000a\u000a<p>For more information read a <a href="http://docs.python.org/tut" rel="noreferrer">tutorial</a>.</p>\u000a
p1619
sVquestion_id
p1620
I974952
sVlast_activity_date
p1621
I1244634277
sVcreation_date
p1622
I1244632267
sVscore
p1623
I70
sVowner
p1624
(dp1625
Vuser_id
p1626
I17160
sVprofile_image
p1627
Vhttps://www.gravatar.com/avatar/81cb50f5fe868629a680c16a56781f01?s=128&d=identicon&r=PG
p1628
sVuser_type
p1629
Vregistered
p1630
sVreputation
p1631
I118064
sVlink
p1632
Vhttp://stackoverflow.com/users/17160/nosklo
p1633
sVaccept_rate
p1634
I78
sVdisplay_name
p1635
Vnosklo
p1636
ssVis_accepted
p1637
I01
sVlast_edit_date
p1638
I1244634277
sVanswer_id
p1639
I974956
sa(dp1640
Vbody
p1641
V<p><a href="http://docs.python.org/library/collections.html#defaultdict-objects" rel="noreferrer">defaultdict</a> to the rescue!</p>\u000a\u000a<pre><code>from collections import defaultdict\u000a\u000awords = "apple banana apple strawberry banana lemon"\u000a\u000ad = defaultdict(int)\u000afor word in words.split():\u000a    d[word] += 1\u000a</code></pre>\u000a\u000a<p>This runs in O(n).</p>\u000a
p1642
sVquestion_id
p1643
I893417
sVlast_activity_date
p1644
I1242918659
sVcreation_date
p1645
I1242918659
sVscore
p1646
I78
sVowner
p1647
(dp1648
Vuser_id
p1649
I43089
sVprofile_image
p1650
Vhttps://www.gravatar.com/avatar/cbdcba7870660c048cf9d6db74a3ef29?s=128&d=identicon&r=PG
p1651
sVuser_type
p1652
Vregistered
p1653
sVreputation
p1654
I124007
sVlink
p1655
Vhttp://stackoverflow.com/users/43089/triptych
p1656
sVaccept_rate
p1657
I57
sVdisplay_name
p1658
VTriptych
p1659
ssVis_accepted
p1660
I01
sVanswer_id
p1661
I893459
sa(dp1662
Vbody
p1663
V<p>A lot of times the first couple chars will be a magic number for various file formats.  You could check for this in addition to your exception checking above. </p>\u000a
p1664
sVquestion_id
p1665
I889333
sVlast_activity_date
p1666
I1242842306
sVcreation_date
p1667
I1242842306
sVscore
p1668
I8
sVowner
p1669
(dp1670
Vuser_id
p1671
I3153
sVprofile_image
p1672
Vhttps://www.gravatar.com/avatar/47d8644c0ad8d89635fca422dd6d3ab5?s=128&d=identicon&r=PG
p1673
sVuser_type
p1674
Vregistered
p1675
sVreputation
p1676
I213096
sVlink
p1677
Vhttp://stackoverflow.com/users/3153/brian-r-bondy
p1678
sVaccept_rate
p1679
I99
sVdisplay_name
p1680
VBrian R. Bondy
p1681
ssVis_accepted
p1682
I01
sVanswer_id
p1683
I889349
sa(dp1684
Vbody
p1685
V<pre><code>import shutil\u000ashutil.rmtree("dir-you-want-to-remove")\u000a</code></pre>\u000a
p1686
sVquestion_id
p1687
I814167
sVlast_activity_date
p1688
I1241240315
sVcreation_date
p1689
I1241240074
sVscore
p1690
I53
sVowner
p1691
(dp1692
Vuser_id
p1693
I83898
sVprofile_image
p1694
Vhttps://www.gravatar.com/avatar/629dd98e26181db40376b65617fe5e4c?s=128&d=identicon&r=PG
p1695
sVuser_type
p1696
Vregistered
p1697
sVreputation
p1698
I6422
sVlink
p1699
Vhttp://stackoverflow.com/users/83898/josh-gibson
p1700
sVaccept_rate
p1701
I63
sVdisplay_name
p1702
VJosh Gibson
p1703
ssVis_accepted
p1704
I01
sVlast_edit_date
p1705
I1241240315
sVanswer_id
p1706
I814170
sa(dp1707
Vbody
p1708
V<p><a href="http://docs.djangoproject.com/en/dev/ref/request-response/#querydict-objects" rel="noreferrer">Check out the QueryDict documentation</a>, particularly the usage of <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict.getlist" rel="noreferrer"><code>QueryDict.getlist(key)</code></a>.</p>\u000a\u000a<p>Since request.POST and request.GET in the view are instances of QueryDict, you could do this:</p>\u000a\u000a<pre><code>&lt;form action='/my/path/' method='POST'&gt;\u000a&lt;input type='text' name='hi' value='heya1'&gt;\u000a&lt;input type='text' name='hi' value='heya2'&gt;\u000a&lt;input type='submit' value='Go'&gt;\u000a&lt;/form&gt;\u000a</code></pre>\u000a\u000a<p>Then something like this:</p>\u000a\u000a<pre><code>def mypath(request):\u000a    if request.method == 'POST':\u000a        greetings = request.POST.getlist('hi') # will be ['heya1','heya2']\u000a</code></pre>\u000a
p1709
sVquestion_id
p1710
I801354
sVlast_activity_date
p1711
I1241006920
sVcreation_date
p1712
I1241006616
sVscore
p1713
I59
sVowner
p1714
(dp1715
Vuser_id
p1716
I16417
sVprofile_image
p1717
Vhttps://www.gravatar.com/avatar/80ae8ec34e9e3e66c5be50733afaa44e?s=128&d=identicon&r=PG
p1718
sVuser_type
p1719
Vregistered
p1720
sVreputation
p1721
I313646
sVlink
p1722
Vhttp://stackoverflow.com/users/16417/paolo-bergantino
p1723
sVaccept_rate
p1724
I93
sVdisplay_name
p1725
VPaolo Bergantino
p1726
ssVis_accepted
p1727
I01
sVlast_edit_date
p1728
I1241006920
sVanswer_id
p1729
I802053
sa(dp1730
Vbody
p1731
V<p>You can use </p>\u000a\u000a<pre><code>os.write(tup[0], "foo\u005cn")\u000a</code></pre>\u000a\u000a<p>to write to the handle.</p>\u000a\u000a<p>If you want to open the handle for writing you need to add the <strong>"w"</strong> mode</p>\u000a\u000a<pre><code>f = os.fdopen(tup[0], "w")\u000af.write("foo")\u000a</code></pre>\u000a
p1732
sVquestion_id
p1733
I168559
sVlast_activity_date
p1734
I1223064413
sVcreation_date
p1735
I1223063237
sVscore
p1736
I46
sVowner
p1737
(dp1738
Vuser_id
p1739
I720
sVprofile_image
p1740
Vhttps://www.gravatar.com/avatar/3c57f2a468f2fc945f1e5c47d1afee66?s=128&d=identicon&r=PG
p1741
sVuser_type
p1742
Vregistered
p1743
sVreputation
p1744
I25613
sVlink
p1745
Vhttp://stackoverflow.com/users/720/peter-hoffmann
p1746
sVaccept_rate
p1747
I69
sVdisplay_name
p1748
VPeter Hoffmann
p1749
ssVis_accepted
p1750
I01
sVlast_edit_date
p1751
I1223064413
sVanswer_id
p1752
I168584
sa(dp1753
Vbody
p1754
V<p>The solution is as follows.</p>\u000a\u000a<p>Use Python module <a href="http://docs.python.org/lib/module-zipfile.html" rel="noreferrer">zipfile</a> to create zip archive, but as the file specify <a href="http://docs.python.org/lib/module-StringIO.html" rel="noreferrer">StringIO</a> object (ZipFile constructor requires file-like object). Add files you want to compress. Then in your Django application return the content of StringIO object in <code>HttpResponse</code> with mimetype set to <code>application/x-zip-compressed</code> (or at least <code>application/octet-stream</code>). If you want, you can set <code>content-disposition</code> header, but this should not be really required.</p>\u000a\u000a<p>But beware, creating zip archives on each request is bad idea and this may kill your server (not counting timeouts if the archives are large). Performance-wise approach is to cache generated output somewhere in filesystem and regenerate it only if source files have changed. Even better idea is to prepare archives in advance (eg. by cron job) and have your web server serving them as usual statics.</p>\u000a
p1755
sVquestion_id
p1756
I67454
sVlast_activity_date
p1757
I1221638009
sVcreation_date
p1758
I1221571856
sVscore
p1759
I38
sVowner
p1760
(dp1761
Vuser_id
p1762
I12138
sVprofile_image
p1763
Vhttps://www.gravatar.com/avatar/86482989331f6a3a226d1991c20fce9a?s=128&d=identicon&r=PG
p1764
sVuser_type
p1765
Vregistered
p1766
sVreputation
p1767
I10712
sVlink
p1768
Vhttp://stackoverflow.com/users/12138/zgoda
p1769
sVaccept_rate
p1770
I86
sVdisplay_name
p1771
Vzgoda
p1772
ssVis_accepted
p1773
I01
sVlast_edit_date
p1774
I1221638009
sVanswer_id
p1775
I72180
sa(dp1776
Vbody
p1777
V<p>We run <a href="http://buildbot.net/trac" rel="noreferrer">Buildbot - Trac</a> at work, I haven't used it too much since my code base isn't part of the release cycle yet. But we run the tests on different environments (OSX/Linux/Win) and it sends emails --and it's written in python.</p>\u000a
p1778
sVquestion_id
p1779
I535
sVlast_activity_date
p1780
I1217704000
sVcreation_date
p1781
I1217704000
sVscore
p1782
I21
sVowner
p1783
(dp1784
Vuser_id
p1785
I157
sVprofile_image
p1786
Vhttps://www.gravatar.com/avatar/5c4d195536d28df970410dace14870c1?s=128&d=identicon&r=PG
p1787
sVuser_type
p1788
Vregistered
p1789
sVreputation
p1790
I33586
sVlink
p1791
Vhttp://stackoverflow.com/users/157/nlucaroni
p1792
sVaccept_rate
p1793
I95
sVdisplay_name
p1794
Vnlucaroni
p1795
ssVis_accepted
p1796
I01
sVanswer_id
p1797
I541
sasVquota_max
p1798
I300
sVquota_remaining
p1799
I135
s.