(dp0
Vhas_more
p1
I00
sVitems
p2
(lp3
(dp4
Vbody
p5
V<p>Using <code>vmin</code> and <code>vmax</code> forces the range for the colors.  Here's an example:</p>\u000a\u000a<p><a href="https://i.stack.imgur.com/orLmA.png" rel="noreferrer"><img src="https://i.stack.imgur.com/orLmA.png" alt="enter image description here"></a></p>\u000a\u000a<pre><code>import matplotlib as m\u000aimport matplotlib.pyplot as plt\u000aimport numpy as np\u000a\u000acdict = {\u000a  'red'  :  ( (0.0, 0.25, .25), (0.02, .59, .59), (1., 1., 1.)),\u000a  'green':  ( (0.0, 0.0, 0.0), (0.02, .45, .45), (1., .97, .97)),\u000a  'blue' :  ( (0.0, 1.0, 1.0), (0.02, .75, .75), (1., 0.45, 0.45))\u000a}\u000a\u000acm = m.colors.LinearSegmentedColormap('my_colormap', cdict, 1024)\u000a\u000ax = np.arange(0, 10, .1)\u000ay = np.arange(0, 10, .1)\u000aX, Y = np.meshgrid(x,y)\u000a\u000adata = 2*( np.sin(X) + np.sin(3*Y) )\u000a\u000adef do_plot(n, f, title):\u000a    #plt.clf()\u000a    plt.subplot(1, 3, n)\u000a    plt.pcolor(X, Y, f(data), cmap=cm, vmin=-4, vmax=4)\u000a    plt.title(title)\u000a    plt.colorbar()\u000a\u000aplt.figure()\u000ado_plot(1, lambda x:x, "all")\u000ado_plot(2, lambda x:np.clip(x, -4, 0), "&lt;0")\u000ado_plot(3, lambda x:np.clip(x, 0, 4), "&gt;0")\u000aplt.show()\u000a</code></pre>\u000a
p6
sVquestion_id
p7
I3373256
sVlast_activity_date
p8
I1490257259
sVcreation_date
p9
I1280548895
sVscore
p10
I94
sVowner
p11
(dp12
Vuser_id
p13
I102302
sVprofile_image
p14
Vhttps://www.gravatar.com/avatar/edd9c8a33bbb45d398ad8777e619c7a3?s=128&d=identicon&r=PG
p15
sVuser_type
p16
Vregistered
p17
sVreputation
p18
I36165
sVlink
p19
Vhttp://stackoverflow.com/users/102302/tom10
p20
sVaccept_rate
p21
I80
sVdisplay_name
p22
Vtom10
p23
ssVis_accepted
p24
I01
sVlast_edit_date
p25
I1490257259
sVanswer_id
p26
I3376734
sa(dp27
Vbody
p28
V<p>There is an <code>ipdb</code> project which embeds iPython into the standard pdb, so you can just do:</p>\u000a\u000a<pre><code>import ipdb; ipdb.set_trace()\u000a</code></pre>\u000a\u000a<p>It's installable via the usual <code>pip install ipdb</code>.</p>\u000a\u000a<p><code>ipdb</code> is pretty short, so instead of easy_installing you can also create a file <code>ipdb.py</code> somewhere on your Python path and paste the following into the file:</p>\u000a\u000a<pre><code>import sys\u000afrom IPython.Debugger import Pdb\u000afrom IPython.Shell import IPShell\u000afrom IPython import ipapi\u000a\u000ashell = IPShell(argv=[''])\u000a\u000adef set_trace():\u000a    ip = ipapi.get()\u000a    def_colors = ip.options.colors\u000a    Pdb(def_colors).set_trace(sys._getframe().f_back)\u000a</code></pre>\u000a
p29
sVquestion_id
p30
I1126930
sVlast_activity_date
p31
I1489019441
sVcreation_date
p32
I1247595533
sVscore
p33
I96
sVowner
p34
(dp35
Vuser_id
p36
I104349
sVprofile_image
p37
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p38
sVuser_type
p39
Vregistered
p40
sVreputation
p41
I356767
sVlink
p42
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p43
sVaccept_rate
p44
I86
sVdisplay_name
p45
VDaniel Roseman
p46
ssVis_accepted
p47
I01
sVlast_edit_date
p48
I1489019441
sVanswer_id
p49
I1127087
sa(dp50
Vbody
p51
V<p>This is an old post, but I thought I should provide an illustrated answer anyway.</p>\u000a\u000a<p>Use JavaScript's object notation. Like so:</p>\u000a\u000a<pre><code>states_dictionary={ \u000a     "CT":["alex","harry"], \u000a     "AK":["liza","alex"], \u000a     "TX":["fred", "harry"]\u000a};\u000a</code></pre>\u000a\u000a<p>And to access the values:</p>\u000a\u000a<pre class="lang-js prettyprint-override"><code>states_dictionary.AK[0] //which is liza\u000a</code></pre>\u000a\u000a<p>or you can use JavaScript literal object notation, whereby the keys not require to be in quotes:</p>\u000a\u000a<pre><code>states_dictionary={ \u000a     CT:["alex","harry"], \u000a     AK:["liza","alex"], \u000a     TX:["fred", "harry"]\u000a};\u000a</code></pre>\u000a
p52
sVquestion_id
p53
I3559070
sVlast_activity_date
p54
I1487171275
sVcreation_date
p55
I1343971166
sVscore
p56
I90
sVowner
p57
(dp58
Vuser_id
p59
I1209272
sVprofile_image
p60
Vhttps://www.gravatar.com/avatar/97e49723c518649025bd10ea6bf113b5?s=128&d=identicon&r=PG
p61
sVuser_type
p62
Vregistered
p63
sVreputation
p64
I1354
sVlink
p65
Vhttp://stackoverflow.com/users/1209272/chief
p66
sVdisplay_name
p67
VChief
p68
ssVis_accepted
p69
I01
sVlast_edit_date
p70
I1487171275
sVanswer_id
p71
I11789703
sa(dp72
Vbody
p73
V<p>If you have a <code>Tensor</code> t, calling <a href="https://www.tensorflow.org/api_docs/python/framework/core_graph_data_structures#Tensor.eval" rel="noreferrer"><code>t.eval()</code></a> is equivalent to calling <code>tf.get_default_session().run(t)</code>.</p>\u000a\u000a<p>You can make a session the default as follows:</p>\u000a\u000a<pre><code>t = tf.constant(42.0)\u000asess = tf.Session()\u000awith sess.as_default():   # or `with sess:` to close on exit\u000a    assert sess is tf.get_default_session()\u000a    assert t.eval() == sess.run(t)\u000a</code></pre>\u000a\u000a<p>The most important difference is that you can use <code>sess.run()</code> to fetch the values of many tensors in the same step:</p>\u000a\u000a<pre><code>t = tf.constant(42.0)\u000au = tf.constant(37.0)\u000atu = tf.mul(t, u)\u000aut = tf.mul(u, t)\u000awith sess.as_default():\u000a   tu.eval()  # runs one step\u000a   ut.eval()  # runs one step\u000a   sess.run([tu, ut])  # evaluates both tensors in a single step\u000a</code></pre>\u000a\u000a<p>Note that each call to <code>eval</code> and <code>run</code> will execute the whole graph from scratch. To cache the result of a computation, assign it to a <a href="https://www.tensorflow.org/how_tos/variables/" rel="noreferrer"><code>tf.Variable</code></a>.</p>\u000a
p74
sVquestion_id
p75
I33610685
sVlast_activity_date
p76
I1485782695
sVcreation_date
p77
I1447077945
sVscore
p78
I92
sVowner
p79
(dp80
Vuser_id
p81
I3574081
sVprofile_image
p82
Vhttps://i.stack.imgur.com/LIW6C.jpg?s=128&g=1
p83
sVuser_type
p84
Vregistered
p85
sVreputation
p86
I50768
sVlink
p87
Vhttp://stackoverflow.com/users/3574081/mrry
p88
sVdisplay_name
p89
Vmrry
p90
ssVis_accepted
p91
I01
sVlast_edit_date
p92
I1485782695
sVanswer_id
p93
I33610914
sa(dp94
Vbody
p95
V<p>One way would be:</p>\u000a\u000a<pre><code>import random\u000ad = {'VENEZUELA':'CARACAS', 'CANADA':'OTTAWA'}\u000arandom.choice(d.keys())\u000a</code></pre>\u000a\u000a<p><strong>EDIT</strong>:  The question was changed a couple years after the original post, and now asks for a pair, rather than a single item.  The final line should now be:</p>\u000a\u000a<pre><code>country, capital = random.choice(list(d.items()))\u000a</code></pre>\u000a
p96
sVquestion_id
p97
I4859292
sVlast_activity_date
p98
I1484139246
sVcreation_date
p99
I1296538850
sVscore
p100
I121
sVowner
p101
(dp102
Vuser_id
p103
I429982
sVprofile_image
p104
Vhttps://www.gravatar.com/avatar/2626843a1f8617b05b650b92b01ca63d?s=128&d=identicon&r=PG
p105
sVuser_type
p106
Vregistered
p107
sVreputation
p108
I18410
sVlink
p109
Vhttp://stackoverflow.com/users/429982/gerrat
p110
sVaccept_rate
p111
I87
sVdisplay_name
p112
VGerrat
p113
ssVis_accepted
p114
I01
sVlast_edit_date
p115
I1484139246
sVanswer_id
p116
I4859322
sa(dp117
Vbody
p118
V<p>As tom suggested in the comment above, deleting the files: </p>\u000a\u000a<pre><code>fontList.cache\u000afontList.py3k.cache \u000atex.cache \u000a</code></pre>\u000a\u000a<p>solve the problem. \u000aIn my case the files were under:</p>\u000a\u000a<pre><code>`~/.matplotlib`\u000a</code></pre>\u000a\u000a<p>EDITED</p>\u000a\u000a<p>A couple of days ago the message appeared again, I deleted the files in the locations mention above without any success. I found that as suggested <a href="http://stackoverflow.com/questions/35734074/problems-with-matplotlib-is-building-the-font-cache-using-fc-list-this-may-tak">here</a> by <a href="http://stackoverflow.com/users/5695374/tshilidzi-mudau">T Mudau</a> there's an extra location with text cache files is: <code>~/.cache/fontconfig</code></p>\u000a
p119
sVquestion_id
p120
I34771191
sVlast_activity_date
p121
I1482850158
sVcreation_date
p122
I1453746806
sVscore
p123
I91
sVowner
p124
(dp125
Vuser_id
p126
I1241590
sVprofile_image
p127
Vhttps://www.gravatar.com/avatar/d9a2efc773001703b35dfe5fbb0fa9ab?s=128&d=identicon&r=PG
p128
sVuser_type
p129
Vregistered
p130
sVreputation
p131
I1036
sVlink
p132
Vhttp://stackoverflow.com/users/1241590/hugo
p133
sVdisplay_name
p134
VHugo
p135
ssVis_accepted
p136
I01
sVlast_edit_date
p137
I1482850158
sVanswer_id
p138
I34999763
sa(dp139
Vbody
p140
V<p>Using <a href="http://docs.python-requests.org/en/latest/" rel="noreferrer">requests</a>:</p>\u000a\u000a<pre><code>import requests\u000aurl = 'http://ES_search_demo.com/document/record/_search?pretty=true'\u000adata = '{\u000a  "query": {\u000a    "bool": {\u000a      "must": [\u000a        {\u000a          "text": {\u000a            "record.document": "SOME_JOURNAL"\u000a          }\u000a        },\u000a        {\u000a          "text": {\u000a            "record.articleTitle": "farmers"\u000a          }\u000a        }\u000a      ],\u000a      "must_not": [],\u000a      "should": []\u000a    }\u000a  },\u000a  "from": 0,\u000a  "size": 50,\u000a  "sort": [],\u000a  "facets": {}\u000a}'\u000aresponse = requests.post(url, data=data)\u000a</code></pre>\u000a\u000a<p>Depending on what kind of response your API returns, you will then probably want to look at <code>response.text</code> or <code>response.json()</code> (or possibly inspect <code>response.status_code</code> first). See the quickstart docs <a href="http://docs.python-requests.org/en/latest/user/quickstart/" rel="noreferrer">here</a>, especially <a href="http://docs.python-requests.org/en/latest/user/quickstart/#more-complicated-post-requests" rel="noreferrer">this section</a>.</p>\u000a
p141
sVquestion_id
p142
I17301938
sVlast_activity_date
p143
I1481831039
sVcreation_date
p144
I1372190136
sVscore
p145
I116
sVowner
p146
(dp147
Vuser_id
p148
I1615086
sVprofile_image
p149
Vhttps://i.stack.imgur.com/iE1IM.jpg?s=128&g=1
p150
sVuser_type
p151
Vregistered
p152
sVreputation
p153
I5364
sVlink
p154
Vhttp://stackoverflow.com/users/1615086/andersschuller
p155
sVdisplay_name
p156
Vandersschuller
p157
ssVis_accepted
p158
I01
sVlast_edit_date
p159
I1481831039
sVanswer_id
p160
I17306347
sa(dp161
Vbody
p162
V<p>No, this is not possible.</p>\u000a\u000a<p>In most cases such a long name would be undesirable from the standpoint of readability and usability of the function, though your use case for test names seems pretty reasonable.</p>\u000a\u000a<p>The <a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow noreferrer">lexical rules of Python</a> do not allow a single token (in this case an identifier) to be split across multiple lines. The logical line continuation character (<code>\u005c</code> at the end of a line) can join multiple physical lines into a single logical line, but cannot join a single <em>token</em> across multiple lines.</p>\u000a
p163
sVquestion_id
p164
I40955302
sVlast_activity_date
p165
I1480957606
sVcreation_date
p166
I1480826030
sVscore
p167
I66
sVowner
p168
(dp169
Vuser_id
p170
I20789
sVprofile_image
p171
Vhttps://www.gravatar.com/avatar/a913ff1821be75c981d066f685816ed9?s=128&d=identicon&r=PG
p172
sVuser_type
p173
Vregistered
p174
sVreputation
p175
I36282
sVlink
p176
Vhttp://stackoverflow.com/users/20789/dan-lenski
p177
sVaccept_rate
p178
I71
sVdisplay_name
p179
VDan Lenski
p180
ssVis_accepted
p181
I01
sVlast_edit_date
p182
I1480957606
sVanswer_id
p183
I40955425
sa(dp184
Vbody
p185
V<p>This works fine:</p>\u000a\u000a<pre><code>os.path.join(dir_name, base_filename + "." + filename_suffix)\u000a</code></pre>\u000a\u000a<p>Keep in mind that <code>os.path.join()</code> exists to smooth over the different path separator characters used by different operating systems, so your code doesn't have to special-case each one.  File name "extensions" only have significant meaning on one major operating system (they're simply part of the file name on non-Windows systems), and their separator is always a dot.  There's no need for a function to join them, but if using one makes you feel better, you can do this:</p>\u000a\u000a<pre><code>os.path.join(dir_name, '.'.join((base_filename, filename_suffix)))\u000a</code></pre>\u000a\u000a<p>Or, if you want to keep your code really clean, simply include the dot in the suffix:</p>\u000a\u000a<pre><code>suffix = '.pdf'\u000aos.path.join(dir_name, base_filename + suffix)\u000a</code></pre>\u000a
p186
sVquestion_id
p187
I7132861
sVlast_activity_date
p188
I1478799694
sVcreation_date
p189
I1313858981
sVscore
p190
I101
sVowner
p191
(dp192
Vuser_id
p193
I205212
sVprofile_image
p194
Vhttps://i.stack.imgur.com/NTcqB.png?s=128&g=1
p195
sVuser_type
p196
Vregistered
p197
sVreputation
p198
I12707
sVlink
p199
Vhttp://stackoverflow.com/users/205212/%ca%87s%d3%99%c9%b9o%c9%88
p200
sVaccept_rate
p201
I40
sVdisplay_name
p202
V\u0287s\u04d9\u0279o\u0248
p203
ssVis_accepted
p204
I01
sVlast_edit_date
p205
I1478799694
sVanswer_id
p206
I7133204
sa(dp207
Vbody
p208
V<p>Use <a href="http://werkzeug.pocoo.org/docs/0.11/wrappers/#werkzeug.wrappers.BaseRequest.get_data" rel="noreferrer"><code>request.get_data()</code></a> to get the raw data, regardless of content type. The data is cached and you can subsequently access <code>request.data</code>, <code>request.json</code>, <code>request.form</code> at will.</p>\u000a\u000a<p>If you access <code>request.data</code> first, it will call <code>get_data</code> with an argument to parse form data first. If the request has a form content type (<code>multipart/form-data</code>, <code>application/x-www-form-urlencoded</code>, or <code>application/x-url-encoded</code>) then the raw data will be consumed. <code>request.data</code> and <code>request.json</code> will appear empty in this case.</p>\u000a
p209
sVquestion_id
p210
I10999990
sVlast_activity_date
p211
I1478191089
sVcreation_date
p212
I1401224817
sVscore
p213
I104
sVowner
p214
(dp215
Vuser_id
p216
I15677
sVprofile_image
p217
Vhttps://www.gravatar.com/avatar/6d694c8bf7fbebd7a67ddc74a5018133?s=128&d=identicon&r=PG
p218
sVuser_type
p219
Vregistered
p220
sVreputation
p221
I7582
sVlink
p222
Vhttp://stackoverflow.com/users/15677/miracle2k
p223
sVaccept_rate
p224
I57
sVdisplay_name
p225
Vmiracle2k
p226
ssVis_accepted
p227
I01
sVlast_edit_date
p228
I1478191089
sVanswer_id
p229
I23898949
sa(dp230
Vbody
p231
V<p>Take a look at Beaker:</p>\u000a\u000a<ul>\u000a<li><a href="http://beaker.groovie.org/" rel="nofollow noreferrer">Home Page</a></li>\u000a<li><a href="http://beaker.groovie.org/caching.html#about" rel="nofollow noreferrer">Caching Documentation</a></li>\u000a<li><a href="http://www.groovie.org/blog/advanced-caching-with-django-and-beaker" rel="nofollow noreferrer">Good quick-start article about using Beaker with Django (but useful in any other apps too)</a></li>\u000a</ul>\u000a
p232
sVquestion_id
p233
I1427255
sVlast_activity_date
p234
I1478003648
sVcreation_date
p235
I1253022720
sVscore
p236
I40
sVowner
p237
(dp238
Vuser_id
p239
I7625
sVprofile_image
p240
Vhttps://www.gravatar.com/avatar/f17131c7feaf9a92fe35323f6ec48429?s=128&d=identicon&r=PG
p241
sVuser_type
p242
Vregistered
p243
sVreputation
p244
I22081
sVlink
p245
Vhttp://stackoverflow.com/users/7625/corbin-march
p246
sVaccept_rate
p247
I80
sVdisplay_name
p248
VCorbin March
p249
ssVis_accepted
p250
I01
sVlast_edit_date
p251
I1478003648
sVanswer_id
p252
I1427303
sa(dp253
Vbody
p254
V<p>You could use additional parenthesis:</p>\u000a\u000a<pre><code>subkeyword = (\u000a        Session.query(Subkeyword.subkeyword_id, Subkeyword.subkeyword_word)\u000a        .filter_by(subkeyword_company_id=self.e_company_id)\u000a        .filter_by(subkeyword_word=subkeyword_word)\u000a        .filter_by(subkeyword_active=True)\u000a        .one()\u000a    )\u000a</code></pre>\u000a
p255
sVquestion_id
p256
I4768941
sVlast_activity_date
p257
I1477079882
sVcreation_date
p258
I1295713194
sVscore
p259
I142
sVowner
p260
(dp261
Vuser_id
p262
I56338
sVprofile_image
p263
Vhttps://www.gravatar.com/avatar/92fb4563ddc5ceeaa8b19b60a7a172f4?s=128&d=identicon&r=PG
p264
sVuser_type
p265
Vregistered
p266
sVreputation
p267
I137369
sVlink
p268
Vhttp://stackoverflow.com/users/56338/sth
p269
sVaccept_rate
p270
I44
sVdisplay_name
p271
Vsth
p272
ssVis_accepted
p273
I01
sVlast_edit_date
p274
I1477079882
sVanswer_id
p275
I4768979
sa(dp276
Vbody
p277
V<p>Django is Python, so introspection is your friend.</p>\u000a\u000a<p>In the shell, import <code>urls</code>. By looping through <code>urls.urlpatterns</code>, and drilling down through as many layers of included url configurations as possible, you can build the complete url configuration. </p>\u000a\u000a<pre><code>import urls\u000aurls.urlpatterns\u000a</code></pre>\u000a\u000a<p>The list <code>urls.urlpatterns</code> contains <code>RegexURLPattern</code> and <code>RegexURLResolver</code> objects.</p>\u000a\u000a<p>For a <code>RegexURLPattern</code> object <code>p</code> you can display the regular expression with</p>\u000a\u000a<pre><code>p.regex.pattern\u000a</code></pre>\u000a\u000a<p>For a <code>RegexURLResolver</code> object <code>q</code>, which represents an included url configuration, you can display the first part of the regular expression with</p>\u000a\u000a<pre><code>q.regex.pattern\u000a</code></pre>\u000a\u000a<p>Then use</p>\u000a\u000a<pre><code>q.url_patterns\u000a</code></pre>\u000a\u000a<p>which will return a further list of <code>RegexURLResolver</code> and <code>RegexURLPattern</code> objects.</p>\u000a
p278
sVquestion_id
p279
I1828187
sVlast_activity_date
p280
I1476281416
sVcreation_date
p281
I1259708541
sVscore
p282
I44
sVowner
p283
(dp284
Vuser_id
p285
I113962
sVprofile_image
p286
Vhttps://www.gravatar.com/avatar/b80ae1d65878cf68a4b1a00848467527?s=128&d=identicon&r=PG
p287
sVuser_type
p288
Vregistered
p289
sVreputation
p290
I112517
sVlink
p291
Vhttp://stackoverflow.com/users/113962/alasdair
p292
sVaccept_rate
p293
I87
sVdisplay_name
p294
VAlasdair
p295
ssVis_accepted
p296
I01
sVlast_edit_date
p297
I1476281416
sVanswer_id
p298
I1829565
sa(dp299
Vbody
p300
V<pre class="lang-py prettyprint-override"><code>def factors(n):    \u000a    return set(reduce(list.__add__, \u000a                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\u000a</code></pre>\u000a\u000a<p>This will return all of the factors, very quickly, of a number <code>n</code>.</p>\u000a\u000a<p>Why square root as the upper limit?</p>\u000a\u000a<p><code>sqrt(x) * sqrt(x) = x</code>. So if the two factors are the same, they're both the square root. If you make one factor bigger, you have to make the other factor smaller. This means that one of the two will always be less than or equal to <code>sqrt(x)</code>, so you only have to search up to that point to find one of the two matching factors. You can then use <code>x / fac1</code> to get <code>fac2</code>.</p>\u000a\u000a<p>The <code>reduce(list.__add__, ...)</code> is taking the little lists of <code>[fac1, fac2]</code> and joining them together in one long list.</p>\u000a\u000a<p>The <code>[i, n/i] for i in range(1, int(sqrt(n)) + 1) if n % i == 0</code> returns a pair of factors if the remainder when you divide <code>n</code> by the smaller one is zero (it doesn't need to check the larger one too; it just gets that by dividing <code>n</code> by the smaller one.)</p>\u000a\u000a<p>The <code>set(...)</code> on the outside is getting rid of duplicates. I think this only happens for perfect squares. For <code>n = 4</code>, this will return <code>2</code> twice, so <code>set</code> gets rid of one of them.</p>\u000a\u000a<p><code>sqrt</code> is actually faster than <code>**0.5</code>, but I'll leave it out as it's nice as a self-contained snippet.</p>\u000a
p301
sVquestion_id
p302
I6800193
sVlast_activity_date
p303
I1475268806
sVcreation_date
p304
I1311422672
sVscore
p305
I154
sVowner
p306
(dp307
Vuser_id
p308
I500584
sVprofile_image
p309
Vhttps://www.gravatar.com/avatar/02cbc0104ac1794c222b2d3e11d325e4?s=128&d=identicon&r=PG
p310
sVuser_type
p311
Vregistered
p312
sVreputation
p313
I82963
sVlink
p314
Vhttp://stackoverflow.com/users/500584/agf
p315
sVdisplay_name
p316
Vagf
p317
ssVis_accepted
p318
I01
sVlast_edit_date
p319
I1475268806
sVanswer_id
p320
I6800214
sa(dp321
Vbody
p322
V<p>To check if a float value is a whole number, use the <a href="http://docs.python.org/2/library/stdtypes.html#float.is_integer"><code>float.is_integer()</code> method</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; (1.0).is_integer()\u000aTrue\u000a&gt;&gt;&gt; (1.555).is_integer()\u000aFalse\u000a</code></pre>\u000a\u000a<p>The method was added to the <code>float</code> type in Python 2.6.</p>\u000a\u000a<p>Take into account that in Python 2, <code>1/3</code> is <code>0</code> (floor division for integer operands!), and that floating point arithmetic can be imprecise (a <code>float</code> is an approximation using binary fractions, <em>not</em> a precise real number). But adjusting your loop a little this gives:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; for n in range(12000, -1, -1):\u000a...     if (n ** (1.0/3)).is_integer():\u000a...         print n\u000a... \u000a27\u000a8\u000a1\u000a0\u000a</code></pre>\u000a\u000a<p>which means that anything over 3 cubed, (including 10648) was missed out due to the aforementioned imprecision:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; (4**3) ** (1.0/3)\u000a3.9999999999999996\u000a&gt;&gt;&gt; 10648 ** (1.0/3)\u000a21.999999999999996\u000a</code></pre>\u000a\u000a<p>You'd have to check for numbers <strong>close</strong> to the whole number instead, or not use <code>float()</code> to find your number. Like rounding down the cube root of <code>12000</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; int(12000 ** (1.0/3))\u000a22\u000a&gt;&gt;&gt; 22 ** 3\u000a10648\u000a</code></pre>\u000a\u000a<p>If you are using Python 3.5 or newer, you can use the <a href="https://docs.python.org/3/library/math.html#math.isclose"><code>math.isclose()</code> function</a> to see if a floating point value is within a configurable margin:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from math import isclose\u000a&gt;&gt;&gt; isclose((4**3) ** (1.0/3), 4)\u000aTrue\u000a&gt;&gt;&gt; isclose(10648 ** (1.0/3), 22)\u000aTrue\u000a</code></pre>\u000a\u000a<p>For older versions, the naive implementation of that function (skipping error checking and ignoring infinity and NaN) <a href="https://www.python.org/dev/peps/pep-0485/#proposed-implementation">as mentioned in PEP485</a>:</p>\u000a\u000a<pre><code>def isclose(a, b, rel_tol=1e-9, abs_tol=0.0):\u000a    return abs(a - b) &lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)\u000a</code></pre>\u000a
p323
sVquestion_id
p324
I21583758
sVlast_activity_date
p325
I1465586106
sVcreation_date
p326
I1391620163
sVscore
p327
I134
sVowner
p328
(dp329
Vuser_id
p330
I100297
sVprofile_image
p331
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p332
sVuser_type
p333
Vmoderator
p334
sVreputation
p335
I554897
sVlink
p336
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p337
sVdisplay_name
p338
VMartijn Pieters
p339
ssVis_accepted
p340
I01
sVlast_edit_date
p341
I1465586106
sVanswer_id
p342
I21583817
sa(dp343
Vbody
p344
V<p>This would be a great feature, but AFAIK it isn't implemented in Matplotlib and likely would be difficult to implement yourself due to the way figures are stored.</p>\u000a\u000a<p>I'd suggest either (a) separate processing the data from generating the figure (which saves data with a unique name) and write a figure generating script (loading a specified file of the saved data) and editing as you see fit or (b) save as PDF/<a href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics" rel="nofollow">SVG</a>/<a href="http://en.wikipedia.org/wiki/PostScript" rel="nofollow">PostScript</a> format and edit in some fancy figure editor like <a href="https://en.wikipedia.org/wiki/Adobe_Illustrator" rel="nofollow">Adobe Illustrator</a> (or <a href="http://en.wikipedia.org/wiki/Inkscape" rel="nofollow">Inkscape</a>).</p>\u000a
p345
sVquestion_id
p346
I4348733
sVlast_activity_date
p347
I1465113387
sVcreation_date
p348
I1291403005
sVscore
p349
I18
sVowner
p350
(dp351
Vuser_id
p352
I457571
sVprofile_image
p353
Vhttps://www.gravatar.com/avatar/2318229ef6310b03ab828bff43d2ad66?s=128&d=identicon&r=PG
p354
sVuser_type
p355
Vregistered
p356
sVreputation
p357
I10404
sVlink
p358
Vhttp://stackoverflow.com/users/457571/dr-jimbob
p359
sVaccept_rate
p360
I100
sVdisplay_name
p361
Vdr jimbob
p362
ssVis_accepted
p363
I01
sVlast_edit_date
p364
I1465113387
sVanswer_id
p365
I4348932
sa(dp366
Vbody
p367
V<p>There are many options, for example:</p>\u000a\u000a<pre><code>import operator\u000aindex, value = max(enumerate(my_list), key=operator.itemgetter(1))\u000a</code></pre>\u000a
p368
sVquestion_id
p369
I6193498
sVlast_activity_date
p370
I1461059809
sVcreation_date
p371
I1306875780
sVscore
p372
I92
sVowner
p373
(dp374
Vuser_id
p375
I279627
sVprofile_image
p376
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p377
sVuser_type
p378
Vregistered
p379
sVreputation
p380
I252330
sVlink
p381
Vhttp://stackoverflow.com/users/279627/sven-marnach
p382
sVaccept_rate
p383
I78
sVdisplay_name
p384
VSven Marnach
p385
ssVis_accepted
p386
I01
sVlast_edit_date
p387
I1461059809
sVanswer_id
p388
I6193521
sa(dp389
Vbody
p390
V<p>Use the <a href="http://docs.python.org/2/library/functions.html#format"><code>format()</code> function</a>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; format(14, '#010b')\u000a'0b00001110'\u000a</code></pre>\u000a\u000a<p>The <code>format()</code> function simply formats the input following the <a href="http://docs.python.org/2/library/string.html#format-specification-mini-language">Format Specification mini language</a>. The <code>#</code> makes the format include the <code>0b</code> prefix, and the <code>010</code> size formats the output to fit in 10 characters width, with <code>0</code> padding; 2 characters for the <code>0b</code> prefix, the other 8 for the binary digits.</p>\u000a\u000a<p>This is the most compact and direct option.</p>\u000a\u000a<p>If you are putting the result in a larger string, use <a href="https://docs.python.org/2/library/stdtypes.html#str.format"><code>str.format()</code></a> and put the second argument for the <code>format()</code> function after the colon of the placeholder <code>{:..}</code>:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; 'The produced output, in binary, is: {:#010b}'.format(14)\u000a'The produced output, in binary, is: 0b00001110'\u000a</code></pre>\u000a\u000a<p>If you did not want the <code>0b</code> prefix, simply drop the <code>#</code> and adjust the length of the field:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; format(14, '08b')\u000a'00001110'\u000a</code></pre>\u000a
p391
sVquestion_id
p392
I16926130
sVlast_activity_date
p393
I1449846250
sVcreation_date
p394
I1370375678
sVscore
p395
I75
sVowner
p396
(dp397
Vuser_id
p398
I100297
sVprofile_image
p399
Vhttps://www.gravatar.com/avatar/24780fb6df85a943c7aea0402c843737?s=128&d=identicon&r=PG
p400
sVuser_type
p401
Vmoderator
p402
sVreputation
p403
I554897
sVlink
p404
Vhttp://stackoverflow.com/users/100297/martijn-pieters
p405
sVdisplay_name
p406
VMartijn Pieters
p407
ssVis_accepted
p408
I01
sVlast_edit_date
p409
I1449846250
sVanswer_id
p410
I16926357
sa(dp411
Vbody
p412
V<p>Don't fear the Exception!  Having your program just log and continue is as easy as:</p>\u000a\u000a<pre><code>try:\u000a    result = simulate(open("myfile"))\u000aexcept SimulationException as sim_exc:\u000a    print "error parsing stream", sim_exc\u000aelse:\u000a    if result:\u000a        print "result pass"\u000a    else:\u000a        print "result fail"\u000a\u000a# execution continues from here, regardless of exception or not\u000a</code></pre>\u000a\u000a<p>And now you can have a much richer type of notification from the simulate method as to what exactly went wrong, in case you find error/no-error not to be informative enough.</p>\u000a
p413
sVquestion_id
p414
I2020598
sVlast_activity_date
p415
I1444853635
sVcreation_date
p416
I1262872011
sVscore
p417
I76
sVowner
p418
(dp419
Vuser_id
p420
I165216
sVprofile_image
p421
Vhttps://www.gravatar.com/avatar/7da5683418b0e1436cc13f43374773a5?s=128&d=identicon&r=PG
p422
sVuser_type
p423
Vregistered
p424
sVreputation
p425
I38476
sVlink
p426
Vhttp://stackoverflow.com/users/165216/paul-mcguire
p427
sVaccept_rate
p428
I100
sVdisplay_name
p429
VPaul McGuire
p430
ssVis_accepted
p431
I01
sVlast_edit_date
p432
I1444853635
sVanswer_id
p433
I2020704
sa(dp434
Vbody
p435
V<p>This is a great module that someone created. I've used it several times. \u000a<a href="http://code.activestate.com/recipes/410469-xml-as-dictionary/" rel="noreferrer">http://code.activestate.com/recipes/410469-xml-as-dictionary/</a></p>\u000a\u000a<p>Here is the code from the website just in case the link goes bad. </p>\u000a\u000a<pre><code>import cElementTree as ElementTree\u000a\u000aclass XmlListConfig(list):\u000a    def __init__(self, aList):\u000a        for element in aList:\u000a            if element:\u000a                # treat like dict\u000a                if len(element) == 1 or element[0].tag != element[1].tag:\u000a                    self.append(XmlDictConfig(element))\u000a                # treat like list\u000a                elif element[0].tag == element[1].tag:\u000a                    self.append(XmlListConfig(element))\u000a            elif element.text:\u000a                text = element.text.strip()\u000a                if text:\u000a                    self.append(text)\u000a\u000a\u000aclass XmlDictConfig(dict):\u000a    '''\u000a    Example usage:\u000a\u000a    &gt;&gt;&gt; tree = ElementTree.parse('your_file.xml')\u000a    &gt;&gt;&gt; root = tree.getroot()\u000a    &gt;&gt;&gt; xmldict = XmlDictConfig(root)\u000a\u000a    Or, if you want to use an XML string:\u000a\u000a    &gt;&gt;&gt; root = ElementTree.XML(xml_string)\u000a    &gt;&gt;&gt; xmldict = XmlDictConfig(root)\u000a\u000a    And then use xmldict for what it is... a dict.\u000a    '''\u000a    def __init__(self, parent_element):\u000a        if parent_element.items():\u000a            self.update(dict(parent_element.items()))\u000a        for element in parent_element:\u000a            if element:\u000a                # treat like dict - we assume that if the first two tags\u000a                # in a series are different, then they are all different.\u000a                if len(element) == 1 or element[0].tag != element[1].tag:\u000a                    aDict = XmlDictConfig(element)\u000a                # treat like list - we assume that if the first two tags\u000a                # in a series are the same, then the rest are the same.\u000a                else:\u000a                    # here, we put the list in dictionary; the key is the\u000a                    # tag name the list elements all share in common, and\u000a                    # the value is the list itself \u000a                    aDict = {element[0].tag: XmlListConfig(element)}\u000a                # if the tag has attributes, add those to the dict\u000a                if element.items():\u000a                    aDict.update(dict(element.items()))\u000a                self.update({element.tag: aDict})\u000a            # this assumes that if you've got an attribute in a tag,\u000a            # you won't be having any text. This may or may not be a \u000a            # good idea -- time will tell. It works for the way we are\u000a            # currently doing XML configuration files...\u000a            elif element.items():\u000a                self.update({element.tag: dict(element.items())})\u000a            # finally, if there are no child tags and no attributes, extract\u000a            # the text\u000a            else:\u000a                self.update({element.tag: element.text})\u000a</code></pre>\u000a\u000a<p>Example usage:</p>\u000a\u000a<pre><code>tree = ElementTree.parse('your_file.xml')\u000aroot = tree.getroot()\u000axmldict = XmlDictConfig(root)\u000a</code></pre>\u000a\u000a<p>//Or, if you want to use an XML string:</p>\u000a\u000a<pre><code>root = ElementTree.XML(xml_string)\u000axmldict = XmlDictConfig(root)\u000a</code></pre>\u000a
p436
sVquestion_id
p437
I2148119
sVlast_activity_date
p438
I1443538667
sVcreation_date
p439
I1303919899
sVscore
p440
I31
sVowner
p441
(dp442
Vuser_id
p443
I700276
sVprofile_image
p444
Vhttps://www.gravatar.com/avatar/573d79ffa22d84e3b3616d6e88d25119?s=128&d=identicon&r=PG
p445
sVuser_type
p446
Vregistered
p447
sVreputation
p448
I2319
sVlink
p449
Vhttp://stackoverflow.com/users/700276/james
p450
sVaccept_rate
p451
I76
sVdisplay_name
p452
VJames
p453
ssVis_accepted
p454
I01
sVlast_edit_date
p455
I1443538667
sVanswer_id
p456
I5807028
sa(dp457
Vbody
p458
V<p>The reason why you always got <code>True</code> has already been given, so I'll just offer another suggestion:</p>\u000a\u000a<p>If your file is not too large, you can read it into a string, and just use that (easier and often faster than reading and checking line per line):</p>\u000a\u000a<pre><code>if 'blabla' in open('example.txt').read():\u000a    print "true"\u000a</code></pre>\u000a\u000a<p>Another trick: you can alleviate the possible memory problems by using <a href="http://docs.python.org/library/mmap.html" rel="noreferrer"><code>mmap.mmap()</code></a> to create a "string-like" object that uses the underlying file (instead of reading the whole file in memory):</p>\u000a\u000a<pre><code>import mmap\u000af = open('example.txt')\u000as = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\u000aif s.find('blabla') != -1:\u000a    print 'true'\u000a</code></pre>\u000a\u000a<p>NOTE: in python 3, mmaps behave like <code>bytearray</code> objects rather than strings, so the subsequence you look for with <code>find()</code> has to be a <code>bytes</code> object rather than a string as well, eg. <code>s.find(b'blabla')</code>:</p>\u000a\u000a<pre><code>#!/usr/bin/env python3\u000aimport mmap\u000a\u000awith open('example.txt', 'rb', 0) as file, \u005c\u000a     mmap.mmap(file.fileno(), 0, access=mmap.ACCESS_READ) as s:\u000a    if s.find(b'blabla') != -1:\u000a        print('true')\u000a</code></pre>\u000a\u000a<p>You could also use regular expressions on <code>mmap</code> e.g., case-insensitive search: <code>if re.search(br'(?i)blabla', s):</code></p>\u000a
p459
sVquestion_id
p460
I4940032
sVlast_activity_date
p461
I1443047546
sVcreation_date
p462
I1297255169
sVscore
p463
I178
sVowner
p464
(dp465
Vuser_id
p466
I601581
sVprofile_image
p467
Vhttps://www.gravatar.com/avatar/87945c64969674b52fd9412edde91885?s=128&d=identicon&r=PG
p468
sVuser_type
p469
Vregistered
p470
sVreputation
p471
I16465
sVlink
p472
Vhttp://stackoverflow.com/users/601581/steven
p473
sVdisplay_name
p474
VSteven
p475
ssVis_accepted
p476
I01
sVlast_edit_date
p477
I1443047546
sVanswer_id
p478
I4944929
sa(dp479
Vbody
p480
V<p><a href="https://docs.python.org/2/library/math.html#math.fabs" rel="noreferrer"><code>math.fabs()</code></a> converts its argument to float if it can (if it can't, it throws an exception). It then takes the absolute value, and returns the result as a float.</p>\u000a\u000a<p>In addition to floats, <a href="https://docs.python.org/2/library/functions.html#abs" rel="noreferrer"><code>abs()</code></a> also works with integers and complex numbers. Its return type depends on the type of its argument.</p>\u000a\u000a<pre><code>In [7]: type(abs(-2))\u000aOut[7]: int\u000a\u000aIn [8]: type(abs(-2.0))\u000aOut[8]: float\u000a\u000aIn [9]: type(abs(3+4j))\u000aOut[9]: float\u000a\u000aIn [10]: type(math.fabs(-2))\u000aOut[10]: float\u000a\u000aIn [11]: type(math.fabs(-2.0))\u000aOut[11]: float\u000a\u000aIn [12]: type(math.fabs(3+4j))\u000a---------------------------------------------------------------------------\u000aTypeError                                 Traceback (most recent call last)\u000a/home/alexei/&lt;ipython-input-12-8368761369da&gt; in &lt;module&gt;()\u000a----&gt; 1 type(math.fabs(3+4j))\u000a\u000aTypeError: can't convert complex to float\u000a</code></pre>\u000a
p481
sVquestion_id
p482
I10772302
sVlast_activity_date
p483
I1442684846
sVcreation_date
p484
I1338103260
sVscore
p485
I83
sVowner
p486
(dp487
Vuser_id
p488
I367273
sVprofile_image
p489
Vhttps://www.gravatar.com/avatar/f1ed2b0c87f602ef30229f5c4b04eff6?s=128&d=identicon&r=PG
p490
sVuser_type
p491
Vregistered
p492
sVreputation
p493
I279603
sVlink
p494
Vhttp://stackoverflow.com/users/367273/npe
p495
sVaccept_rate
p496
I96
sVdisplay_name
p497
VNPE
p498
ssVis_accepted
p499
I01
sVlast_edit_date
p500
I1442684846
sVanswer_id
p501
I10772325
sa(dp502
Vbody
p503
V<p>The <code>--download-cache</code> option should do what you want:</p>\u000a\u000a<pre><code>pip install --download-cache="/pth/to/downloaded/files" package\u000a</code></pre>\u000a\u000a<p>However, when I tested this, the main package downloaded, saved and installed ok, but the the dependencies were saved with their full url path as the name - a bit annoying, but all the <code>tar.gz</code> files were there.</p>\u000a\u000a<p>The <code>--download</code> option downloads the main package and it's dependencies and does not install any of them. (<strong>Note</strong> that <em>prior to version 1.1</em> the <code>--download</code> option did <em>not</em> download dependencies.)</p>\u000a\u000a<pre><code>pip install package --download="/pth/to/downloaded/files"\u000a</code></pre>\u000a\u000a<p>The <code>pip</code> documentation outlines using <code>--download</code> for <a href="http://www.pip-installer.org/en/latest/cookbook.html#fast-local-installs" rel="noreferrer">fast &amp; local installs</a>.</p>\u000a
p504
sVquestion_id
p505
I7300321
sVlast_activity_date
p506
I1440587233
sVcreation_date
p507
I1315154226
sVscore
p508
I89
sVowner
p509
(dp510
Vuser_id
p511
I396125
sVprofile_image
p512
Vhttps://www.gravatar.com/avatar/f681980268d39302825723f9bacdc9b5?s=128&d=identicon&r=PG
p513
sVuser_type
p514
Vregistered
p515
sVreputation
p516
I4499
sVlink
p517
Vhttp://stackoverflow.com/users/396125/mark-gemmill
p518
sVdisplay_name
p519
VMark Gemmill
p520
ssVis_accepted
p521
I01
sVlast_edit_date
p522
I1440587233
sVanswer_id
p523
I7300619
sa(dp524
Vbody
p525
V<p>You can roughly think of <code>any</code> and <code>all</code> as series of logical <code>or</code> and <code>and</code> operators, respectively.</p>\u000a\u000a<p><strong>any</strong></p>\u000a\u000a<p><code>any</code> will return <code>True</code> when <strong>atleast one of the elements</strong> is Truthy. Read about <a href="http://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="noreferrer">Truth Value Testing.</a></p>\u000a\u000a<p><strong>all</strong></p>\u000a\u000a<p><code>all</code> will return <code>True</code> only when <strong>all the elements</strong> are Truthy.</p>\u000a\u000a<p><strong>Truth table</strong> </p>\u000a\u000a<pre class="lang-none prettyprint-override"><code>+-----------------------------------------+---------+---------+\u000a|                                         |   any   |   all   |\u000a+-----------------------------------------+---------+---------+\u000a| All Truthy values                       |  True   |  True   |\u000a+-----------------------------------------+---------+---------+\u000a| All Falsy values                        |  False  |  False  |\u000a+-----------------------------------------+---------+---------+\u000a| One Truthy value (all others are Falsy) |  True   |  False  |\u000a+-----------------------------------------+---------+---------+\u000a| One Falsy value (all others are Truthy) |  True   |  False  |\u000a+-----------------------------------------+---------+---------+\u000a| Empty Iterable                          |  False  |  True   |\u000a+-----------------------------------------+---------+---------+\u000a</code></pre>\u000a\u000a<p><strong>Note 1:</strong> The empty iterable case is explained in the official documentation, like this</p>\u000a\u000a<p><a href="https://docs.python.org/2/library/functions.html#any" rel="noreferrer"><strong><code>any</code></strong></a></p>\u000a\u000a<blockquote>\u000a  <p>Return <code>True</code> if any element of the iterable is true. <strong>If the iterable is empty, return <code>False</code></strong></p>\u000a</blockquote>\u000a\u000a<p>Since none of the elements is true, it returns <code>False</code> in this case. </p>\u000a\u000a<p><a href="https://docs.python.org/2/library/functions.html#all" rel="noreferrer"><strong><code>all</code></strong></a></p>\u000a\u000a<blockquote>\u000a  <p>Return <code>True</code> if all elements of the iterable are true (<strong>or if the iterable is empty</strong>).</p>\u000a</blockquote>\u000a\u000a<p>Since none of the elements is false, it returns <code>True</code> in this case. </p>\u000a\u000a<hr>\u000a\u000a<p><strong>Note 2:</strong></p>\u000a\u000a<p>Another important thing to know about <code>any</code> and <code>all</code> is, it will short-circuit the execution, the moment they know the result. The advantage is, entire iterable need not be consumed. For example,</p>\u000a\u000a<pre><code>&gt;&gt;&gt; multiples_of_6 = (not (i % 6) for i in range(1, 10))\u000a&gt;&gt;&gt; any(multiples_of_6)\u000aTrue\u000a&gt;&gt;&gt; list(multiples_of_6)\u000a[False, False, False]\u000a</code></pre>\u000a\u000a<p>Here, <code>(not (i % 6) for i in range(1, 10))</code> is a generator expression which returns <code>True</code> if the current number within 1 and 9 is a multiple of 6. <code>any</code> iterates the <code>multiples_of_6</code> and when it meets <code>6</code>, it finds a Truthy value, so it immediately returns <code>True</code>, and rest of the <code>multiples_of_6</code> is not iterated. That is what we see when we print <code>list(multiples_of_6)</code>, the result of <code>7</code>, <code>8</code> and <code>9</code>.</p>\u000a\u000a<p>This excellent thing is used very cleverly in <a href="http://stackoverflow.com/a/16801605/1903116">this answer</a>.</p>\u000a\u000a<hr>\u000a\u000a<p>With this basic understanding, if we look at your code, you do </p>\u000a\u000a<pre><code>any(x) and not all(x)\u000a</code></pre>\u000a\u000a<p>which makes sure that, atleast one of the values is Truthy but not all of them. That is why it is returning <code>[False, False, False]</code>. If you really wanted to check if both the numbers are not the same,</p>\u000a\u000a<pre><code>print [x[0] != x[1] for x in zip(*d['Drd2'])]\u000a</code></pre>\u000a
p526
sVquestion_id
p527
I19389490
sVlast_activity_date
p528
I1439474169
sVcreation_date
p529
I1381867229
sVscore
p530
I136
sVowner
p531
(dp532
Vuser_id
p533
I1903116
sVprofile_image
p534
Vhttps://i.stack.imgur.com/w6Ffg.jpg?s=128&g=1
p535
sVuser_type
p536
Vregistered
p537
sVreputation
p538
I130035
sVlink
p539
Vhttp://stackoverflow.com/users/1903116/thefourtheye
p540
sVaccept_rate
p541
I100
sVdisplay_name
p542
Vthefourtheye
p543
ssVis_accepted
p544
I01
sVlast_edit_date
p545
I1439474169
sVanswer_id
p546
I19389957
sa(dp547
Vbody
p548
V<p>You can use the <a href="https://docs.djangoproject.com/en/1.7/ref/templates/builtins/#add" rel="noreferrer"><code>add</code></a> filter:</p>\u000a\u000a<pre><code>{{ object.article.rating_score|add:"-100" }}\u000a</code></pre>\u000a
p549
sVquestion_id
p550
I6285327
sVlast_activity_date
p551
I1433842529
sVcreation_date
p552
I1307567983
sVscore
p553
I105
sVowner
p554
(dp555
Vuser_id
p556
I104349
sVprofile_image
p557
Vhttps://www.gravatar.com/avatar/0f4cefeedec5163556751d61625eedd0?s=128&d=identicon&r=PG
p558
sVuser_type
p559
Vregistered
p560
sVreputation
p561
I356767
sVlink
p562
Vhttp://stackoverflow.com/users/104349/daniel-roseman
p563
sVaccept_rate
p564
I86
sVdisplay_name
p565
VDaniel Roseman
p566
ssVis_accepted
p567
I01
sVlast_edit_date
p568
I1433842529
sVanswer_id
p569
I6285428
sa(dp570
Vbody
p571
V<p>Ref: <a href="http://docs.python.org/howto/unicode" rel="noreferrer">http://docs.python.org/howto/unicode</a></p>\u000a\u000a<p><em>Reading Unicode from a file is therefore simple:</em></p>\u000a\u000a<pre><code>import codecs\u000af = codecs.open('unicode.rst', encoding='utf-8')\u000afor line in f:\u000a    print repr(line)\u000a</code></pre>\u000a\u000a<p><em>It's also possible to open files in update mode, allowing both reading and writing:</em></p>\u000a\u000a<pre><code>f = codecs.open('test', encoding='utf-8', mode='w+')\u000af.write(u'\u005cu4500 blah blah blah\u005cn')\u000af.seek(0)\u000aprint repr(f.readline()[:1])\u000af.close()\u000a</code></pre>\u000a\u000a<p><strong>EDIT</strong>: I'm assuming that your intended goal is just to be able to read the file properly into a string in Python. If you're trying to convert to an ASCII string from Unicode, then there's really no direct way to do so, since the Unicode characters won't necessarily exist in ASCII.</p>\u000a\u000a<p>If you're trying to convert to an ASCII string, try one of the following: </p>\u000a\u000a<ol>\u000a<li><p>Replace the specific unicode chars with ASCII equivalents, if you are only looking to handle a few special cases such as this particular example</p></li>\u000a<li><p>Use the <code>unicodedata</code> module's <code>normalize()</code> and the <code>string.encode()</code> method to convert as best you can to the next closest ASCII equivalent (Ref <a href="https://web.archive.org/web/20090228203858/http://techxplorer.com/2006/07/18/converting-unicode-to-ascii-using-python" rel="noreferrer">https://web.archive.org/web/20090228203858/http://techxplorer.com/2006/07/18/converting-unicode-to-ascii-using-python</a>): </p>\u000a\u000a<pre><code>&gt;&gt;&gt; teststr\u000au'I don\u005cxe2\u005cx80\u005cx98t like this'\u000a&gt;&gt;&gt; unicodedata.normalize('NFKD', teststr).encode('ascii', 'ignore')\u000a'I donat like this'\u000a</code></pre></li>\u000a</ol>\u000a
p572
sVquestion_id
p573
I147741
sVlast_activity_date
p574
I1433467102
sVcreation_date
p575
I1222671323
sVscore
p576
I101
sVowner
p577
(dp578
Vuser_id
p579
I20840
sVprofile_image
p580
Vhttps://www.gravatar.com/avatar/9266c30ba6c2e2aa4f9ab2dfffded965?s=128&d=identicon&r=PG
p581
sVuser_type
p582
Vregistered
p583
sVreputation
p584
I30236
sVlink
p585
Vhttp://stackoverflow.com/users/20840/jay
p586
sVaccept_rate
p587
I100
sVdisplay_name
p588
VJay
p589
ssVis_accepted
p590
I01
sVlast_edit_date
p591
I1433467102
sVanswer_id
p592
I147756
sa(dp593
Vbody
p594
V<p>open a terminal and run this command  <code>xhost +</code>. This commands needs to be run every time you restart your machine. If everything works fine may be you can add this to startup commands</p>\u000a\u000a<p>Also make sure in your /etc/environment file there is a line </p>\u000a\u000a<pre><code>export DISPLAY=:0.0 \u000a</code></pre>\u000a\u000a<p>And then, run your tests to see if your issue is resolved.</p>\u000a\u000a<p>All please note the comment from sardathrion below before using this.</p>\u000a
p595
sVquestion_id
p596
I6183276
sVlast_activity_date
p597
I1431921281
sVcreation_date
p598
I1306819421
sVscore
p599
I27
sVowner
p600
(dp601
Vuser_id
p602
I728556
sVprofile_image
p603
Vhttps://www.gravatar.com/avatar/7c6b09879c8494b28a0778459e375bfc?s=128&d=identicon&r=PG&f=1
p604
sVuser_type
p605
Vregistered
p606
sVreputation
p607
I4289
sVlink
p608
Vhttp://stackoverflow.com/users/728556/a-j
p609
sVaccept_rate
p610
I60
sVdisplay_name
p611
VA.J
p612
ssVis_accepted
p613
I01
sVlast_edit_date
p614
I1431921281
sVanswer_id
p615
I6183321
sa(dp616
Vbody
p617
V<p>If your dictionary is not nested, you could make a frozenset with the dict's items and use <a href="https://docs.python.org/2/library/functions.html#hash" rel="noreferrer"><code>hash()</code></a>:</p>\u000a\u000a<pre><code>hash(frozenset(my_dict.items()))\u000a</code></pre>\u000a\u000a<p>This is much less computationally intensive than generating the JSON string or representation of the dictionary.</p>\u000a
p618
sVquestion_id
p619
I5884066
sVlast_activity_date
p620
I1428493168
sVcreation_date
p621
I1304515473
sVscore
p622
I55
sVowner
p623
(dp624
Vuser_id
p625
I1897
sVprofile_image
p626
Vhttps://www.gravatar.com/avatar/09d9b10ad83581c21328d44e48c77b9d?s=128&d=identicon&r=PG
p627
sVuser_type
p628
Vregistered
p629
sVreputation
p630
I34866
sVlink
p631
Vhttp://stackoverflow.com/users/1897/imran
p632
sVaccept_rate
p633
I97
sVdisplay_name
p634
VImran
p635
ssVis_accepted
p636
I01
sVlast_edit_date
p637
I1428493168
sVanswer_id
p638
I5884123
sa(dp639
Vbody
p640
V<p>You can either Drop the columns you do not need OR Select the ones you need</p>\u000a\u000a<pre><code>    ##Using DataFrame.drop\u000a    df.drop(df.columns[[1, 2]], axis=1, inplace=True)\u000a\u000a    # drop by Name\u000a    df1 = df1.drop(['B', 'C'], axis=1)\u000a\u000a\u000a    ## Select the ones you want\u000a    df1 = df[['a','d']]\u000a</code></pre>\u000a
p641
sVquestion_id
p642
I14940743
sVlast_activity_date
p643
I1427558090
sVcreation_date
p644
I1427558090
sVscore
p645
I91
sVowner
p646
(dp647
Vuser_id
p648
I3923448
sVprofile_image
p649
Vhttps://i.stack.imgur.com/VdpDw.jpg?s=128&g=1
p650
sVuser_type
p651
Vregistered
p652
sVreputation
p653
I2079
sVlink
p654
Vhttp://stackoverflow.com/users/3923448/amrita-sawant
p655
sVaccept_rate
p656
I80
sVdisplay_name
p657
VAmrita Sawant
p658
ssVis_accepted
p659
I01
sVanswer_id
p660
I29319200
sa(dp661
Vbody
p662
V<p>As a guess, Python strings are reference counted immutable strings, so that no strings are copied around in the Python code, while C++ <code>std::string</code> is a mutable value type, and is copied at the smallest opportunity.</p>\u000a\u000a<p>If the goal is fast splitting, then one would use constant time substring operations, which means only <em>referring</em> to parts of the original string, as in Python (and Java, and C#&hellip;).</p>\u000a\u000a<p>The C++ <code>std::string</code> class has one redeeming feature, though: it is <em>standard</em>, so that it can be used to pass strings safely and portably around where efficiency is not a main consideration. But enough chat. Code -- and on my machine this is of course faster than Python, since Python's string handling is implemented in C which is a subset of C++ (he he):</p>\u000a\u000a<pre><code>#include &lt;iostream&gt;                                                              \u000a#include &lt;string&gt;\u000a#include &lt;sstream&gt;\u000a#include &lt;time.h&gt;\u000a#include &lt;vector&gt;\u000a\u000ausing namespace std;\u000a\u000aclass StringRef\u000a{\u000aprivate:\u000a    char const*     begin_;\u000a    int             size_;\u000a\u000apublic:\u000a    int size() const { return size_; }\u000a    char const* begin() const { return begin_; }\u000a    char const* end() const { return begin_ + size_; }\u000a\u000a    StringRef( char const* const begin, int const size )\u000a        : begin_( begin )\u000a        , size_( size )\u000a    {}\u000a};\u000a\u000avector&lt;StringRef&gt; split3( string const&amp; str, char delimiter = ' ' )\u000a{\u000a    vector&lt;StringRef&gt;   result;\u000a\u000a    enum State { inSpace, inToken };\u000a\u000a    State state = inSpace;\u000a    char const*     pTokenBegin = 0;    // Init to satisfy compiler.\u000a    for( auto it = str.begin(); it != str.end(); ++it )\u000a    {\u000a        State const newState = (*it == delimiter? inSpace : inToken);\u000a        if( newState != state )\u000a        {\u000a            switch( newState )\u000a            {\u000a            case inSpace:\u000a                result.push_back( StringRef( pTokenBegin, &amp;*it - pTokenBegin ) );\u000a                break;\u000a            case inToken:\u000a                pTokenBegin = &amp;*it;\u000a            }\u000a        }\u000a        state = newState;\u000a    }\u000a    if( state == inToken )\u000a    {\u000a        result.push_back( StringRef( pTokenBegin, &amp;*str.end() - pTokenBegin ) );\u000a    }\u000a    return result;\u000a}\u000a\u000aint main() {\u000a    string input_line;\u000a    vector&lt;string&gt; spline;\u000a    long count = 0;\u000a    int sec, lps;\u000a    time_t start = time(NULL);\u000a\u000a    cin.sync_with_stdio(false); //disable synchronous IO\u000a\u000a    while(cin) {\u000a        getline(cin, input_line);\u000a        //spline.clear(); //empty the vector for the next line to parse\u000a\u000a        //I'm trying one of the two implementations, per compilation, obviously:\u000a//        split1(spline, input_line);  \u000a        //split2(spline, input_line);\u000a\u000a        vector&lt;StringRef&gt; const v = split3( input_line );\u000a        count++;\u000a    };\u000a\u000a    count--; //subtract for final over-read\u000a    sec = (int) time(NULL) - start;\u000a    cerr &lt;&lt; "C++   : Saw " &lt;&lt; count &lt;&lt; " lines in " &lt;&lt; sec &lt;&lt; " seconds." ;\u000a    if (sec &gt; 0) {\u000a        lps = count / sec;\u000a        cerr &lt;&lt; "  Crunch speed: " &lt;&lt; lps &lt;&lt; endl;\u000a    } else\u000a        cerr &lt;&lt; endl;\u000a    return 0;\u000a}\u000a\u000a//compiled with: g++ -Wall -O3 -o split1 split_1.cpp -std=c++0x\u000a</code></pre>\u000a\u000a<p>Disclaimer: I hope there aren't any bugs. I haven't tested the functionality, but only checked the speed. But I think, even if there is a bug or two, correcting that won't significantly affect the speed.</p>\u000a
p663
sVquestion_id
p664
I9378500
sVlast_activity_date
p665
I1423718642
sVcreation_date
p666
I1329834277
sVscore
p667
I45
sVowner
p668
(dp669
Vuser_id
p670
I464581
sVprofile_image
p671
Vhttps://i.stack.imgur.com/v2PxU.jpg?s=128&g=1
p672
sVuser_type
p673
Vregistered
p674
sVreputation
p675
I111134
sVlink
p676
Vhttp://stackoverflow.com/users/464581/cheers-and-hth-alf
p677
sVaccept_rate
p678
I63
sVdisplay_name
p679
VCheers and hth. - Alf
p680
ssVis_accepted
p681
I01
sVlast_edit_date
p682
I1423718642
sVanswer_id
p683
I9379203
sa(dp684
Vbody
p685
V<p>Actually, it's quite easy: instead of the number of bins you can give a list with the bin boundaries. They can be unequally distributed, too:</p>\u000a\u000a<pre><code>plt.hist(data, bins=[0, 10, 20, 30, 40, 50, 100])\u000a</code></pre>\u000a\u000a<p>If you just want them equally distributed, you can simply use range:</p>\u000a\u000a<pre><code>plt.hist(data, bins=range(min(data), max(data) + binwidth, binwidth))\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<p><strong>Added to original answer</strong></p>\u000a\u000a<p>The above line works for <code>data</code> filled with integers only. As <a href="http://stackoverflow.com/users/1480997/macrocosme">macrocosme</a> points out, for floats you can use:</p>\u000a\u000a<pre><code>import numpy as np\u000aplt.hist(data, bins=np.arange(min(data), max(data) + binwidth, binwidth))\u000a</code></pre>\u000a
p686
sVquestion_id
p687
I6986986
sVlast_activity_date
p688
I1412349342
sVcreation_date
p689
I1346237720
sVscore
p690
I126
sVowner
p691
(dp692
Vuser_id
p693
I1413513
sVprofile_image
p694
Vhttps://www.gravatar.com/avatar/efa59f9ff1fc1a9b39f71308520dea51?s=128&d=identicon&r=PG
p695
sVuser_type
p696
Vregistered
p697
sVreputation
p698
I1780
sVlink
p699
Vhttp://stackoverflow.com/users/1413513/lastalda
p700
sVaccept_rate
p701
I87
sVdisplay_name
p702
VLastalda
p703
ssVis_accepted
p704
I01
sVlast_edit_date
p705
I1412349342
sVanswer_id
p706
I12176344
sa(dp707
Vbody
p708
V<pre><code>driver.find_element_by_id('foo').clear()\u000a</code></pre>\u000a
p709
sVquestion_id
p710
I7732125
sVlast_activity_date
p711
I1412004262
sVcreation_date
p712
I1318952314
sVscore
p713
I101
sVowner
p714
(dp715
Vuser_id
p716
I629116
sVprofile_image
p717
Vhttps://www.gravatar.com/avatar/c95f3924fe76d31c79ec303dc18c9dc5?s=128&d=identicon&r=PG
p718
sVuser_type
p719
Vregistered
p720
sVreputation
p721
I3228
sVlink
p722
Vhttp://stackoverflow.com/users/629116/isaac
p723
sVaccept_rate
p724
I88
sVdisplay_name
p725
VIsaac
p726
ssVis_accepted
p727
I01
sVlast_edit_date
p728
I1412004262
sVanswer_id
p729
I7809907
sa(dp730
Vbody
p731
V<p>Perhaps take a look at <a href="http://sympy.org/en/index.html" rel="noreferrer">SymPy</a>.</p>\u000a
p732
sVquestion_id
p733
I1076778
sVlast_activity_date
p734
I1406479377
sVcreation_date
p735
I1246584676
sVscore
p736
I25
sVowner
p737
(dp738
Vuser_id
p739
I95852
sVprofile_image
p740
Vhttps://www.gravatar.com/avatar/e215c7362074d0346612a10d3a89be9e?s=128&d=identicon&r=PG
p741
sVuser_type
p742
Vregistered
p743
sVreputation
p744
I8530
sVlink
p745
Vhttp://stackoverflow.com/users/95852/john-y
p746
sVdisplay_name
p747
VJohn Y
p748
ssVis_accepted
p749
I01
sVlast_edit_date
p750
I1406479377
sVanswer_id
p751
I1077458
sa(dp752
Vbody
p753
V<p>You can use slice notation with steps:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = "abcdefghijklm"\u000a&gt;&gt;&gt; x[0::2] #0. 2. 4...\u000a'acegikm'\u000a&gt;&gt;&gt; x[1::2] #1. 3. 5 ..\u000a'bdfhjl'\u000a&gt;&gt;&gt; [i+j for i,j in zip(x[::2], x[1::2])] # zip makes (0,1),(2,3) ...\u000a['ab', 'cd', 'ef', 'gh', 'ij', 'kl']\u000a</code></pre>\u000a\u000a<p>Same logic applies for lists too. String lenght doesn't matter, because you're simply adding two strings together.</p>\u000a
p754
sVquestion_id
p755
I5850986
sVlast_activity_date
p756
I1403989365
sVcreation_date
p757
I1304280547
sVscore
p758
I65
sVowner
p759
(dp760
Vuser_id
p761
I472416
sVprofile_image
p762
Vhttps://www.gravatar.com/avatar/aa78d79fb4238d200e26fb87e3de947b?s=128&d=identicon&r=PG
p763
sVuser_type
p764
Vregistered
p765
sVreputation
p766
I15271
sVlink
p767
Vhttp://stackoverflow.com/users/472416/utdemir
p768
sVaccept_rate
p769
I79
sVdisplay_name
p770
Vutdemir
p771
ssVis_accepted
p772
I01
sVlast_edit_date
p773
I1403989365
sVanswer_id
p774
I5851033
sa(dp775
Vbody
p776
V<p>np.average takes an optional weight parameter.  If it is not supplied they are equivalent.  Take a look at the source code.</p>\u000a\u000a<p>np.mean:</p>\u000a\u000a<pre><code>try:\u000a    mean = a.mean\u000aexcept AttributeError:\u000a    return _wrapit(a, 'mean', axis, dtype, out)\u000areturn mean(axis, dtype, out)\u000a</code></pre>\u000a\u000a<p>np.average:</p>\u000a\u000a<pre><code>...\u000aif weights is None :\u000a    avg = a.mean(axis)\u000a    scl = avg.dtype.type(a.size/avg.size)\u000aelse:\u000a    #code that does weighted mean here\u000a\u000aif returned: #returned is another optional argument\u000a    scl = np.multiply(avg, 0) + scl\u000a    return avg, scl\u000aelse:\u000a    return avg\u000a...\u000a</code></pre>\u000a
p777
sVquestion_id
p778
I20054243
sVlast_activity_date
p779
I1397050912
sVcreation_date
p780
I1384797107
sVscore
p781
I77
sVowner
p782
(dp783
Vuser_id
p784
I852487
sVprofile_image
p785
Vhttps://www.gravatar.com/avatar/1d20fd0dbd10f083eca49560d240b98e?s=128&d=identicon&r=PG
p786
sVuser_type
p787
Vregistered
p788
sVreputation
p789
I6357
sVlink
p790
Vhttp://stackoverflow.com/users/852487/hammer
p791
sVaccept_rate
p792
I79
sVdisplay_name
p793
VHammer
p794
ssVis_accepted
p795
I01
sVlast_edit_date
p796
I1397050912
sVanswer_id
p797
I20054396
sa(dp798
Vbody
p799
V<p>It specifies the axis <strong>along which</strong> the means are computed. By default <code>axis=0</code>. This is consistent with the <code>numpy.mean</code> usage when <code>axis</code> is specified <em>explicitly</em> (in <code>numpy.mean</code>, axis==None by default, which computes the mean value over the flattened array) , in which <code>axis=0</code> along the <em>rows</em> (namely, <em>index</em> in pandas), and <code>axis=1</code> along the <em>columns</em>.</p>\u000a\u000a<pre><code>+------------+---------+--------+\u000a|            |  A      |  B     |\u000a+------------+---------+---------\u000a|      0     | 0.626386| 1.52325|----axis=1-----&gt;\u000a+------------+---------+--------+\u000a                |         |\u000a                | axis=0  |\u000a                \u2193         \u2193\u000a</code></pre>\u000a
p800
sVquestion_id
p801
I22149584
sVlast_activity_date
p802
I1393861416
sVcreation_date
p803
I1393858535
sVscore
p804
I106
sVowner
p805
(dp806
Vuser_id
p807
I1150712
sVprofile_image
p808
Vhttps://i.stack.imgur.com/qkWxm.png?s=128&g=1
p809
sVuser_type
p810
Vregistered
p811
sVreputation
p812
I11497
sVlink
p813
Vhttp://stackoverflow.com/users/1150712/zhangxaochen
p814
sVaccept_rate
p815
I72
sVdisplay_name
p816
Vzhangxaochen
p817
ssVis_accepted
p818
I01
sVlast_edit_date
p819
I1393861416
sVanswer_id
p820
I22149930
sa(dp821
Vbody
p822
V<p>You've got a stray byte floating around.  You can find it by running</p>\u000a\u000a<pre><code>with open("x.py") as fp:\u000a    for i, line in enumerate(fp):\u000a        if "\u005cxe2" in line:\u000a            print i, repr(line)\u000a</code></pre>\u000a\u000a<p>where you should replace <code>"x.py"</code> by the name of your program.  You'll see the line number and the offending line(s).  For example, after inserting that byte arbitrarily, I got:</p>\u000a\u000a<pre><code>4 "\u005cxe2        lb = conn.create_load_balancer('my_lb', ['us-east-1a', 'us-east-1b'],[(80, 8080, 'http'), (443, 8443, 'tcp')])\u005cn"\u000a</code></pre>\u000a
p823
sVquestion_id
p824
I21639275
sVlast_activity_date
p825
I1391814672
sVcreation_date
p826
I1391814672
sVscore
p827
I66
sVowner
p828
(dp829
Vuser_id
p830
I487339
sVprofile_image
p831
Vhttps://i.stack.imgur.com/wbe4o.png?s=128&g=1
p832
sVuser_type
p833
Vregistered
p834
sVreputation
p835
I147176
sVlink
p836
Vhttp://stackoverflow.com/users/487339/dsm
p837
sVdisplay_name
p838
VDSM
p839
ssVis_accepted
p840
I01
sVanswer_id
p841
I21639459
sa(dp842
Vbody
p843
V<pre><code>output = os.popen('cat /tmp/baz').read()\u000a</code></pre>\u000a
p844
sVquestion_id
p845
I1410976
sVlast_activity_date
p846
I1379944222
sVcreation_date
p847
I1252677228
sVscore
p848
I71
sVowner
p849
(dp850
Vuser_id
p851
I68587
sVprofile_image
p852
Vhttps://www.gravatar.com/avatar/7d9fd158e03cbde94f7e0b33b78222af?s=128&d=identicon&r=PG
p853
sVuser_type
p854
Vregistered
p855
sVreputation
p856
I191821
sVlink
p857
Vhttp://stackoverflow.com/users/68587/john-kugelman
p858
sVaccept_rate
p859
I95
sVdisplay_name
p860
VJohn Kugelman
p861
ssVis_accepted
p862
I01
sVlast_edit_date
p863
I1379944222
sVanswer_id
p864
I1411004
sa(dp865
Vbody
p866
V<p>The performant function Python provides for this is <a href="http://docs.python.org/2/library/stdtypes.html#set.issubset" rel="noreferrer">set.issubset</a>. It does have a few restrictions that make it unclear if it's the answer to your question, however.</p>\u000a\u000a<p>A list may contain items multiple times and has a specific order. A set does not. To achieve high performance sets work on <a href="http://docs.python.org/2/glossary.html#term-hashable" rel="noreferrer">hashable</a> objects only. </p>\u000a\u000a<p>Are you asking about subset or subsequence (which means you'll want a string search algorithm)? Will either of the lists be the same for many tests? What are the datatypes contained in the list? And for that matter, does it need to be a list? </p>\u000a\u000a<p>Your other post <a href="http://stackoverflow.com/questions/16577499/python-intersect-a-dict-and-list">intersect a dict and list</a> made the types clearer and did get a recommendation to use dictionary key views for their set-like funcitonality. In that case it was known to work because dictionary keys behave like a set (so much so that before we had sets in Python we used dictionaries). One wonders how the issue got less specific in three hours. </p>\u000a
p867
sVquestion_id
p868
I16579085
sVlast_activity_date
p869
I1368682418
sVcreation_date
p870
I1368680350
sVscore
p871
I52
sVowner
p872
(dp873
Vuser_id
p874
I379311
sVprofile_image
p875
Vhttps://www.gravatar.com/avatar/c993f4f111e6ff3211ccda1b98828253?s=128&d=identicon&r=PG
p876
sVuser_type
p877
Vregistered
p878
sVreputation
p879
I7274
sVlink
p880
Vhttp://stackoverflow.com/users/379311/yann-vernier
p881
sVdisplay_name
p882
VYann Vernier
p883
ssVis_accepted
p884
I01
sVlast_edit_date
p885
I1368682418
sVanswer_id
p886
I16579295
sa(dp887
Vbody
p888
V<p>You can use a trailing comma to avoid a newline being printed:</p>\u000a\u000a<pre><code>print "this should be",\u000aprint "on the same line"\u000a</code></pre>\u000a\u000a<p>You don't need this to simply print a variable, though:</p>\u000a\u000a<pre><code>print "Nope, that is not a two. That is a", x\u000a</code></pre>\u000a\u000a<p><strong>Note:</strong> From Python 3.x and above</p>\u000a\u000a<pre><code>print("Nope, that is not a two. That is a", x)\u000a</code></pre>\u000a
p889
sVquestion_id
p890
I11266068
sVlast_activity_date
p891
I1367843008
sVcreation_date
p892
I1340989844
sVscore
p893
I102
sVowner
p894
(dp895
Vuser_id
p896
I279627
sVprofile_image
p897
Vhttps://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG
p898
sVuser_type
p899
Vregistered
p900
sVreputation
p901
I252330
sVlink
p902
Vhttp://stackoverflow.com/users/279627/sven-marnach
p903
sVaccept_rate
p904
I78
sVdisplay_name
p905
VSven Marnach
p906
ssVis_accepted
p907
I01
sVlast_edit_date
p908
I1367843008
sVanswer_id
p909
I11266091
sa(dp910
Vbody
p911
V<p>Use current_url element. Example:</p>\u000a\u000a<pre><code>print browser.current_url\u000a</code></pre>\u000a
p912
sVquestion_id
p913
I15985339
sVlast_activity_date
p914
I1365843219
sVcreation_date
p915
I1365843219
sVscore
p916
I109
sVowner
p917
(dp918
Vuser_id
p919
I1162676
sVprofile_image
p920
Vhttps://www.gravatar.com/avatar/6fb072659b1edef054a780d43294848c?s=128&d=identicon&r=PG
p921
sVuser_type
p922
Vregistered
p923
sVreputation
p924
I3474
sVlink
p925
Vhttp://stackoverflow.com/users/1162676/ton1c
p926
sVaccept_rate
p927
I92
sVdisplay_name
p928
Vton1c
p929
ssVis_accepted
p930
I01
sVanswer_id
p931
I15986028
sa(dp932
Vbody
p933
V<pre><code>lines = open(filename).read().splitlines()\u000a</code></pre>\u000a
p934
sVquestion_id
p935
I544921
sVlast_activity_date
p936
I1358294624
sVcreation_date
p937
I1234506950
sVscore
p938
I173
sVowner
p939
(dp940
Vuser_id
p941
I533
sVprofile_image
p942
Vhttps://www.gravatar.com/avatar/5846b21b9faa73202b136066dae45646?s=128&d=identicon&r=PG
p943
sVuser_type
p944
Vregistered
p945
sVreputation
p946
I16353
sVlink
p947
Vhttp://stackoverflow.com/users/533/curt-hagenlocher
p948
sVaccept_rate
p949
I75
sVdisplay_name
p950
VCurt Hagenlocher
p951
ssVis_accepted
p952
I01
sVlast_edit_date
p953
I1358294624
sVanswer_id
p954
I544932
sa(dp955
Vbody
p956
V<p>Instead of <code>bar</code> use <code>self.bar</code> or <code>Foo.bar</code>. Assigning to <code>Foo.bar</code> will create a static variable, and assigning to <code>self.bar</code> will create an instance variable.</p>\u000a
p957
sVquestion_id
p958
I707380
sVlast_activity_date
p959
I1354433691
sVcreation_date
p960
I1238621128
sVscore
p961
I77
sVowner
p962
(dp963
Vuser_id
p964
I44484
sVprofile_image
p965
Vhttps://www.gravatar.com/avatar/b89f8c0b0ab5868e54b7459276a2973b?s=128&d=identicon&r=PG
p966
sVuser_type
p967
Vregistered
p968
sVreputation
p969
I5309
sVlink
p970
Vhttp://stackoverflow.com/users/44484/chris-cameron
p971
sVaccept_rate
p972
I50
sVdisplay_name
p973
VChris Cameron
p974
ssVis_accepted
p975
I01
sVlast_edit_date
p976
I1354433691
sVanswer_id
p977
I707389
sa(dp978
Vbody
p979
V<p>Check if the <strong>cross product</strong> of (b-a) and (c-a) is 0, as tells Darius Bacon, tells you if the points a, b and c are aligned.</p>\u000a\u000a<p>But, as you want to know if c is between a and b, you also have to check that the <strong>dot product</strong> of (b-a) and (c-a) is <em>positive</em> and is <em>less</em> than the square of the distance between a and b.</p>\u000a\u000a<p>In non-optimized pseudocode:</p>\u000a\u000a<pre><code>def isBetween(a, b, c):\u000a    crossproduct = (c.y - a.y) * (b.x - a.x) - (c.x - a.x) * (b.y - a.y)\u000a    if abs(crossproduct) &gt; epsilon : return False   # (or != 0 if using integers)\u000a\u000a    dotproduct = (c.x - a.x) * (b.x - a.x) + (c.y - a.y)*(b.y - a.y)\u000a    if dotproduct &lt; 0 : return False\u000a\u000a    squaredlengthba = (b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y)\u000a    if dotproduct &gt; squaredlengthba: return False\u000a\u000a    return True\u000a</code></pre>\u000a
p980
sVquestion_id
p981
I328107
sVlast_activity_date
p982
I1353555427
sVcreation_date
p983
I1227998805
sVscore
p984
I87
sVowner
p985
(dp986
Vuser_id
p987
I39622
sVprofile_image
p988
Vhttps://i.stack.imgur.com/PmSK3.jpg?s=128&g=1
p989
sVuser_type
p990
Vregistered
p991
sVreputation
p992
I11460
sVlink
p993
Vhttp://stackoverflow.com/users/39622/cyrille-ka
p994
sVaccept_rate
p995
I78
sVdisplay_name
p996
VCyrille Ka
p997
ssVis_accepted
p998
I01
sVlast_edit_date
p999
I1353555427
sVanswer_id
p1000
I328122
sa(dp1001
Vbody
p1002
V<p>The problem is that they're all the same exact list in memory. When you use the <code>[x]*n</code> syntax, what you get is a list of <code>n</code> many <code>x</code> objects, but they're all references to the same object. They're not distinct instances, rather, just <code>n</code> references to the same instance.</p>\u000a\u000a<p>To make a list of 3 different lists, do this:</p>\u000a\u000a<pre><code>x = [[] for i in range(3)]\u000a</code></pre>\u000a\u000a<p>This gives you 3 separate instances of <code>[]</code>, which is what you want</p>\u000a\u000a<p><code>[[]]*n</code> is similar to</p>\u000a\u000a<pre><code>l = []\u000ax = []\u000afor i in range(n):\u000a    x.append(l)\u000a</code></pre>\u000a\u000a<p>While <code>[[] for i in range(3)]</code> is similar to:</p>\u000a\u000a<pre><code>x = []\u000afor i in range(n):\u000a    x.append([])   # appending a new list!\u000a</code></pre>\u000a\u000a<hr>\u000a\u000a<pre><code>In [20]: x = [[]] * 4\u000a\u000aIn [21]: [id(i) for i in x]\u000aOut[21]: [164363948, 164363948, 164363948, 164363948] # same id()'s for each list,i.e same object\u000a\u000a\u000aIn [22]: x=[[] for i in range(4)]\u000a\u000aIn [23]: [id(i) for i in x]\u000aOut[23]: [164382060, 164364140, 164363628, 164381292] #different id(), i.e unique objects this time\u000a</code></pre>\u000a
p1003
sVquestion_id
p1004
I12791501
sVlast_activity_date
p1005
I1350684299
sVcreation_date
p1006
I1349744592
sVscore
p1007
I124
sVowner
p1008
(dp1009
Vuser_id
p1010
I198633
sVprofile_image
p1011
Vhttps://www.gravatar.com/avatar/5b9c04999233026354268c2ee4237e04?s=128&d=identicon&r=PG
p1012
sVuser_type
p1013
Vregistered
p1014
sVreputation
p1015
I49873
sVlink
p1016
Vhttp://stackoverflow.com/users/198633/inspectorg4dget
p1017
sVaccept_rate
p1018
I89
sVdisplay_name
p1019
VinspectorG4dget
p1020
ssVis_accepted
p1021
I01
sVlast_edit_date
p1022
I1350684299
sVanswer_id
p1023
I12791510
sa(dp1024
Vbody
p1025
V<p>This should work for your case;</p>\u000a\u000a<pre><code>assert not my_var.called, 'method should not have been called'\u000a</code></pre>\u000a\u000a<p>Sample;</p>\u000a\u000a<pre><code>&gt;&gt;&gt; mock=Mock()\u000a&gt;&gt;&gt; mock.a()\u000a&lt;Mock name='mock.a()' id='4349129872'&gt;\u000a&gt;&gt;&gt; assert not mock.b.called, 'b was called and should not have been'\u000a&gt;&gt;&gt; assert not mock.a.called, 'a was called and should not have been'\u000aTraceback (most recent call last):\u000a  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\u000aAssertionError: a was called and should not have been\u000a</code></pre>\u000a
p1026
sVquestion_id
p1027
I12187122
sVlast_activity_date
p1028
I1346279284
sVcreation_date
p1029
I1346278350
sVscore
p1030
I90
sVowner
p1031
(dp1032
Vuser_id
p1033
I477878
sVprofile_image
p1034
Vhttps://i.stack.imgur.com/qounX.jpg?s=128&g=1
p1035
sVuser_type
p1036
Vregistered
p1037
sVreputation
p1038
I123498
sVlink
p1039
Vhttp://stackoverflow.com/users/477878/joachim-isaksson
p1040
sVdisplay_name
p1041
VJoachim Isaksson
p1042
ssVis_accepted
p1043
I01
sVlast_edit_date
p1044
I1346279284
sVanswer_id
p1045
I12187244
sa(dp1046
Vbody
p1047
V<p>Try setting:</p>\u000a\u000a<pre><code>BROKER_BACKEND = 'memory'\u000a</code></pre>\u000a\u000a<p>(Thanks to <a href="http://stackoverflow.com/users/5577/asksol">asksol</a>'s comment.)</p>\u000a
p1048
sVquestion_id
p1049
I4055860
sVlast_activity_date
p1050
I1345057344
sVcreation_date
p1051
I1304378393
sVscore
p1052
I39
sVowner
p1053
(dp1054
Vuser_id
p1055
I102704
sVprofile_image
p1056
Vhttps://www.gravatar.com/avatar/f5d4e58ba97f712ca99b4a1dc570345b?s=128&d=identicon&r=PG
p1057
sVuser_type
p1058
Vregistered
p1059
sVreputation
p1060
I16568
sVlink
p1061
Vhttp://stackoverflow.com/users/102704/a-paid-nerd
p1062
sVaccept_rate
p1063
I88
sVdisplay_name
p1064
Va paid nerd
p1065
ssVis_accepted
p1066
I01
sVlast_edit_date
p1067
I1345057344
sVanswer_id
p1068
I5863526
sa(dp1069
Vbody
p1070
V<p><code>string.join</code> connects elements inside list of strings, not ints. </p>\u000a\u000a<p>Use this generator expression instead :</p>\u000a\u000a<pre><code>values = ','.join(str(v) for v in value_list)\u000a</code></pre>\u000a
p1071
sVquestion_id
p1072
I10880813
sVlast_activity_date
p1073
I1338811203
sVcreation_date
p1074
I1338810872
sVscore
p1075
I149
sVowner
p1076
(dp1077
Vuser_id
p1078
I923813
sVprofile_image
p1079
Vhttps://www.gravatar.com/avatar/d48c8ddc4920b56c01def8d39b442e06?s=128&d=identicon&r=PG
p1080
sVuser_type
p1081
Vregistered
p1082
sVreputation
p1083
I2333
sVlink
p1084
Vhttp://stackoverflow.com/users/923813/cval
p1085
sVdisplay_name
p1086
Vcval
p1087
ssVis_accepted
p1088
I01
sVlast_edit_date
p1089
I1338811203
sVanswer_id
p1090
I10880820
sa(dp1091
Vbody
p1092
V<pre><code>from flask import request\u000arequest.headers.get('User-Agent')\u000a</code></pre>\u000a\u000a<p>You can also use the <a href="http://werkzeug.pocoo.org/docs/utils/#module-werkzeug.useragents"><code>request.user_agent</code></a> object which contains the following attributes which are created based on the useragent string:</p>\u000a\u000a<ul>\u000a<li>platform (windows, linux, macos, etc.)</li>\u000a<li>browser (chrome, firefox, msie, etc.)</li>\u000a<li>version</li>\u000a<li>language</li>\u000a<li>string (<code>== request.headers.get('User-Agent')</code>)</li>\u000a</ul>\u000a
p1093
sVquestion_id
p1094
I9878020
sVlast_activity_date
p1095
I1332789948
sVcreation_date
p1096
I1332789948
sVscore
p1097
I115
sVowner
p1098
(dp1099
Vuser_id
p1100
I298479
sVprofile_image
p1101
Vhttps://www.gravatar.com/avatar/bc66db28aa7c3fa8e4ce4238b696dee9?s=128&d=identicon&r=PG
p1102
sVuser_type
p1103
Vmoderator
p1104
sVreputation
p1105
I202168
sVlink
p1106
Vhttp://stackoverflow.com/users/298479/thiefmaster
p1107
sVaccept_rate
p1108
I86
sVdisplay_name
p1109
VThiefMaster
p1110
ssVis_accepted
p1111
I01
sVanswer_id
p1112
I9878404
sa(dp1113
Vbody
p1114
V<p>If you want to use the <code>print</code> function in Python 2, you have to import from <code>__future__</code>:</p>\u000a\u000a<pre><code>from __future__ import print_function\u000a</code></pre>\u000a\u000a<p>But you can have the same effect without using the function, too:</p>\u000a\u000a<pre><code>print &gt;&gt;f1, 'This is a test'\u000a</code></pre>\u000a
p1115
sVquestion_id
p1116
I9316023
sVlast_activity_date
p1117
I1329413804
sVcreation_date
p1118
I1329413804
sVscore
p1119
I110
sVowner
p1120
(dp1121
Vuser_id
p1122
I1136463
sVprofile_image
p1123
Vhttps://www.gravatar.com/avatar/12f607176333efc8af0f83477c0bf335?s=128&d=identicon&r=PG
p1124
sVuser_type
p1125
Vregistered
p1126
sVreputation
p1127
I2701
sVlink
p1128
Vhttp://stackoverflow.com/users/1136463/gandaro
p1129
sVdisplay_name
p1130
VGandaro
p1131
ssVis_accepted
p1132
I01
sVanswer_id
p1133
I9316160
sa(dp1134
Vbody
p1135
V<p>A bin is range that represents the width of a single bar of the histogram along the X-axis. You could also call this the interval. (Wikipedia defines them more formally as "disjoint categories".)</p>\u000a\u000a<p>The Numpy <code>histogram</code> function doesn't draw the histogram, but it computes the occurrences of input data that fall within each bin, which in turns determines the area (not necessarily the height if the bins aren't of equal width) of each bar.</p>\u000a\u000a<p>In this example:</p>\u000a\u000a<pre><code> np.histogram([1, 2, 1], bins=[0, 1, 2, 3])\u000a</code></pre>\u000a\u000a<p>There are 3 bins, for values ranging from 0 to 1 (excl 1.), 1 to 2 (excl. 2) and 2 to 3 (incl. 3), respectively. The way Numpy defines these bins if by giving a list of delimiters (<code>[0, 1, 2, 3]</code>) in this example, although it also returns the bins in the results, since it can choose them automatically from the input, if none are specified. If <code>bins=5</code>, for example, it will use 5 bins of equal width spread between the minimum input value and the maximum input value.</p>\u000a\u000a<p>The input values are 1, 2 and 1. Therefore, bin "1 to 2" contains two occurrences (the two <code>1</code> values), and bin "2 to 3" contains one occurrence (the <code>2</code>). These results are in the first item in the returned tuple: <code>array([0, 2, 1])</code>.</p>\u000a\u000a<p>Since the bins here are of equal width, you can use the number of occurrences for the height of each bar. When drawn, you would have:</p>\u000a\u000a<ul>\u000a<li>a bar of height 0 for range/bin [0,1] on the X-axis,</li>\u000a<li>a bar of height 2 for range/bin [1,2],</li>\u000a<li>a bar of height 1 for range/bin [2,3].</li>\u000a</ul>\u000a\u000a<hr>\u000a\u000a<p>You can plot this directly with Matplotlib (its <code>hist</code> function also returns the bins and the values):</p>\u000a\u000a<pre><code>&gt;&gt;&gt; import matplotlib.pyplot as plt\u000a&gt;&gt;&gt; plt.hist([1, 2, 1], bins=[0, 1, 2, 3])\u000a(array([0, 2, 1]), array([0, 1, 2, 3]), &lt;a list of 3 Patch objects&gt;)\u000a&gt;&gt;&gt; plt.show()\u000a</code></pre>\u000a\u000a<p><img src="https://i.stack.imgur.com/AhBUY.png" alt="enter image description here"></p>\u000a
p1136
sVquestion_id
p1137
I9141732
sVlast_activity_date
p1138
I1328369470
sVcreation_date
p1139
I1328368178
sVscore
p1140
I96
sVowner
p1141
(dp1142
Vuser_id
p1143
I372643
sVprofile_image
p1144
Vhttps://www.gravatar.com/avatar/63edcce213b4c96b8b4a660e1df2da08?s=128&d=identicon&r=PG
p1145
sVuser_type
p1146
Vregistered
p1147
sVreputation
p1148
I79314
sVlink
p1149
Vhttp://stackoverflow.com/users/372643/bruno
p1150
sVaccept_rate
p1151
I88
sVdisplay_name
p1152
VBruno
p1153
ssVis_accepted
p1154
I01
sVlast_edit_date
p1155
I1328369470
sVanswer_id
p1156
I9141822
sa(dp1157
Vbody
p1158
V<p>By default, the classes in the <code>csv</code> module use Windows-style line terminators (<code>\u005cr\u005cn</code>) rather than Unix-style (<code>\u005cn</code>). Could this be what\u2019s causing the apparent double line breaks?</p>\u000a\u000a<p>If so, you can override it in the <code>DictWriter</code> constructor:</p>\u000a\u000a<pre><code>output = csv.DictWriter(open('file3.csv','w'), delimiter=',', lineterminator='\u005cn', fieldnames=headers)\u000a</code></pre>\u000a
p1159
sVquestion_id
p1160
I8746908
sVlast_activity_date
p1161
I1325785461
sVcreation_date
p1162
I1325785461
sVscore
p1163
I82
sVowner
p1164
(dp1165
Vuser_id
p1166
I209772
sVprofile_image
p1167
Vhttps://www.gravatar.com/avatar/9e286e03c4b751ce85bd0e5ff2a8a7db?s=128&d=identicon&r=PG
p1168
sVuser_type
p1169
Vregistered
p1170
sVreputation
p1171
I1883
sVlink
p1172
Vhttp://stackoverflow.com/users/209772/fatbusinessman
p1173
sVdisplay_name
p1174
VFatBusinessman
p1175
ssVis_accepted
p1176
I01
sVanswer_id
p1177
I8747107
sa(dp1178
Vbody
p1179
V<p><a href="http://paver.github.com/paver/" rel="noreferrer">Paver</a> has a similar set of goals, though I don't really know how it compares.</p>\u000a
p1180
sVquestion_id
p1181
I1407837
sVlast_activity_date
p1182
I1324367239
sVcreation_date
p1183
I1252618346
sVscore
p1184
I25
sVowner
p1185
(dp1186
Vuser_id
p1187
I14343
sVprofile_image
p1188
Vhttps://www.gravatar.com/avatar/75e9a11371cbe1566607180863efdf4c?s=128&d=identicon&r=PG
p1189
sVuser_type
p1190
Vregistered
p1191
sVreputation
p1192
I193903
sVlink
p1193
Vhttp://stackoverflow.com/users/14343/ned-batchelder
p1194
sVaccept_rate
p1195
I80
sVdisplay_name
p1196
VNed Batchelder
p1197
ssVis_accepted
p1198
I01
sVlast_edit_date
p1199
I1324367239
sVanswer_id
p1200
I1407850
sa(dp1201
Vbody
p1202
V<p>Your installed PIL was compiled without libfreetype.</p>\u000a\u000a<p>You can get precompiled installer of PIL (compiled with libfreetype) here (and many other precompiled Python C Modules):</p>\u000a\u000a<p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noreferrer">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>\u000a
p1203
sVquestion_id
p1204
I4011705
sVlast_activity_date
p1205
I1320758310
sVcreation_date
p1206
I1287977072
sVscore
p1207
I52
sVowner
p1208
(dp1209
Vuser_id
p1210
I1897
sVprofile_image
p1211
Vhttps://www.gravatar.com/avatar/09d9b10ad83581c21328d44e48c77b9d?s=128&d=identicon&r=PG
p1212
sVuser_type
p1213
Vregistered
p1214
sVreputation
p1215
I34866
sVlink
p1216
Vhttp://stackoverflow.com/users/1897/imran
p1217
sVaccept_rate
p1218
I97
sVdisplay_name
p1219
VImran
p1220
ssVis_accepted
p1221
I01
sVlast_edit_date
p1222
I1320758310
sVanswer_id
p1223
I4011715
sa(dp1224
Vbody
p1225
V<p>The statement</p>\u000a\u000a<pre><code>if A:\u000a</code></pre>\u000a\u000a<p>will call <code>A.__nonzero__()</code> (see <a href="http://docs.python.org/reference/datamodel.html#object.__nonzero__" rel="noreferrer">Special method names</a> documentation) and use the return value of that function. Here's the summary:</p>\u000a\u000a<blockquote>\u000a  <h3><code>object.__nonzero__(self)</code></h3>\u000a  \u000a  <p>Called to implement truth value testing and the built-in operation <code>bool()</code>; should return <code>False</code> or <code>True</code>, or their integer equivalents <code>0</code> or <code>1</code>. When this method is not defined, <code>__len__()</code> is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither <code>__len__()</code> nor <code>__nonzero__()</code>, all its instances are considered true.</p>\u000a</blockquote>\u000a\u000a<p>On the other hand,</p>\u000a\u000a<pre><code>if A is not None:\u000a</code></pre>\u000a\u000a<p>compares <em>only</em> the reference <code>A</code> with <code>None</code> to see whether it is the same or not.</p>\u000a
p1226
sVquestion_id
p1227
I7816363
sVlast_activity_date
p1228
I1318997381
sVcreation_date
p1229
I1318997381
sVscore
p1230
I83
sVowner
p1231
(dp1232
Vuser_id
p1233
I893
sVprofile_image
p1234
Vhttps://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG
p1235
sVuser_type
p1236
Vregistered
p1237
sVreputation
p1238
I552714
sVlink
p1239
Vhttp://stackoverflow.com/users/893/greg-hewgill
p1240
sVaccept_rate
p1241
I85
sVdisplay_name
p1242
VGreg Hewgill
p1243
ssVis_accepted
p1244
I01
sVanswer_id
p1245
I7816439
sa(dp1246
Vbody
p1247
V<pre><code>&gt;&gt;&gt; source_list = ('1','a'),('2','b'),('3','c'),('4','d')\u000a&gt;&gt;&gt; list1, list2 = zip(*source_list)\u000a&gt;&gt;&gt; list1\u000a('1', '2', '3', '4')\u000a&gt;&gt;&gt; list2\u000a('a', 'b', 'c', 'd')\u000a</code></pre>\u000a\u000a<p><strong>Edit:</strong> Note that <code>zip(*iterable)</code> is its own inverse:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; list(source_list) == zip(*zip(*source_list))\u000aTrue\u000a</code></pre>\u000a\u000a<p>When unpacking into two lists, this becomes:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; list1, list2 = zip(*source_list)\u000a&gt;&gt;&gt; list(source_list) == zip(list1, list2)\u000aTrue\u000a</code></pre>\u000a\u000a<p>Addition suggested by rocksportrocker.</p>\u000a
p1248
sVquestion_id
p1249
I7558908
sVlast_activity_date
p1250
I1317105555
sVcreation_date
p1251
I1317058813
sVscore
p1252
I140
sVowner
p1253
(dp1254
Vuser_id
p1255
I500584
sVprofile_image
p1256
Vhttps://www.gravatar.com/avatar/02cbc0104ac1794c222b2d3e11d325e4?s=128&d=identicon&r=PG
p1257
sVuser_type
p1258
Vregistered
p1259
sVreputation
p1260
I82963
sVlink
p1261
Vhttp://stackoverflow.com/users/500584/agf
p1262
sVdisplay_name
p1263
Vagf
p1264
ssVis_accepted
p1265
I01
sVlast_edit_date
p1266
I1317105555
sVanswer_id
p1267
I7558990
sa(dp1268
Vbody
p1269
V<p>Thanks to gpilotino for giving me the push into the right direction for implementing this.</p>\u000a\u000a<p>I noticed the question's code is using a datetime to figure out when its live . So I used the DateFieldFilterSpec and subclassed it.</p>\u000a\u000a<pre><code>from django.db import models\u000afrom django.contrib.admin.filterspecs import FilterSpec, ChoicesFilterSpec,DateFieldFilterSpec\u000afrom django.utils.encoding import smart_unicode\u000afrom django.utils.translation import ugettext as _\u000afrom datetime import datetime\u000a\u000aclass IsLiveFilterSpec(DateFieldFilterSpec):\u000a    """\u000a    Adds filtering by future and previous values in the admin\u000a    filter sidebar. Set the is_live_filter filter in the model field attribute\u000a    'is_live_filter'.    my_model_field.is_live_filter = True\u000a    """\u000a\u000a    def __init__(self, f, request, params, model, model_admin):\u000a        super(IsLiveFilterSpec, self).__init__(f, request, params, model,\u000a                                               model_admin)\u000a        today = datetime.now()\u000a        self.links = (\u000a            (_('Any'), {}),\u000a            (_('Yes'), {'%s__lte' % self.field.name: str(today),\u000a                       }),\u000a            (_('No'), {'%s__gte' % self.field.name: str(today),\u000a                    }),\u000a\u000a        )\u000a\u000a\u000a    def title(self):\u000a        return "Is Live"\u000a\u000a# registering the filter\u000aFilterSpec.filter_specs.insert(0, (lambda f: getattr(f, 'is_live_filter', False),\u000a                               IsLiveFilterSpec))\u000a</code></pre>\u000a\u000a<p>To use you can put the above code into a filters.py, and import it in the model you want to add the filter to </p>\u000a
p1270
sVquestion_id
p1271
I991926
sVlast_activity_date
p1272
I1315365144
sVcreation_date
p1273
I1250612375
sVscore
p1274
I56
sVowner
p1275
(dp1276
Vuser_id
p1277
I66319
sVprofile_image
p1278
Vhttps://www.gravatar.com/avatar/ce846063c3ac09052da21d3b798012a5?s=128&d=identicon&r=PG
p1279
sVuser_type
p1280
Vregistered
p1281
sVreputation
p1282
I1338
sVlink
p1283
Vhttp://stackoverflow.com/users/66319/mark-ellul
p1284
sVaccept_rate
p1285
I75
sVdisplay_name
p1286
VMark Ellul
p1287
ssVis_accepted
p1288
I01
sVlast_edit_date
p1289
I1315365144
sVanswer_id
p1290
I1294952
sa(dp1291
Vbody
p1292
V<p>Use a generator together with <code>any</code>, which short-circuits on the first True:</p>\u000a\u000a<pre><code>if any(ext in url_string for ext in extensionsToCheck):\u000a    print(url_string)\u000a</code></pre>\u000a\u000a<p><strong>EDIT:</strong> I see this answer has been accepted by OP. Though my solution may be "good enough" solution to his particular problem, and is a good general way to check if any strings in a list are found in another string, keep in mind that this is all that this solution does. It does not care <em>where</em> the string is found. If this is important, as is often the case with urls, you should look to the answer of @Wladimir Palant, or you risk getting false positives.</p>\u000a
p1293
sVquestion_id
p1294
I6531482
sVlast_activity_date
p1295
I1309435710
sVcreation_date
p1296
I1309420847
sVscore
p1297
I141
sVowner
p1298
(dp1299
Vuser_id
p1300
I566644
sVprofile_image
p1301
Vhttps://www.gravatar.com/avatar/6722f2fff4ed219599052f1848f6b738?s=128&d=identicon&r=PG
p1302
sVuser_type
p1303
Vregistered
p1304
sVreputation
p1305
I21128
sVlink
p1306
Vhttp://stackoverflow.com/users/566644/lauritz-v-thaulow
p1307
sVaccept_rate
p1308
I79
sVdisplay_name
p1309
VLauritz V. Thaulow
p1310
ssVis_accepted
p1311
I01
sVlast_edit_date
p1312
I1309435710
sVanswer_id
p1313
I6531704
sa(dp1314
Vbody
p1315
V<p>To return a value, simply use the <code>return</code> JavaScript keyword in the string passed to the <code>execute_script()</code> method, e.g.</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from selenium import webdriver\u000a&gt;&gt;&gt; wd = webdriver.Firefox()\u000a&gt;&gt;&gt; wd.get("http://localhost/foo/bar")\u000a&gt;&gt;&gt; wd.execute_script("return 5")\u000a5\u000a&gt;&gt;&gt; wd.execute_script("return true")\u000aTrue\u000a&gt;&gt;&gt; wd.execute_script("return {foo: 'bar'}")\u000a{u'foo': u'bar'}\u000a&gt;&gt;&gt; wd.execute_script("return foobar()")\u000au'eli'\u000a</code></pre>\u000a
p1316
sVquestion_id
p1317
I5585343
sVlast_activity_date
p1318
I1302198520
sVcreation_date
p1319
I1302198520
sVscore
p1320
I109
sVowner
p1321
(dp1322
Vuser_id
p1323
I1694
sVprofile_image
p1324
Vhttps://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=128&d=identicon&r=PG
p1325
sVuser_type
p1326
Vregistered
p1327
sVreputation
p1328
I93134
sVlink
p1329
Vhttp://stackoverflow.com/users/1694/eli-courtwright
p1330
sVaccept_rate
p1331
I94
sVdisplay_name
p1332
VEli Courtwright
p1333
ssVis_accepted
p1334
I01
sVanswer_id
p1335
I5585345
sa(dp1336
Vbody
p1337
V<p>First and foremost, I highly suggest using a <a href="http://docs.python.org/library/profile.html" rel="noreferrer">profiler</a> or atleast use <a href="http://docs.python.org/library/timeit.html" rel="noreferrer">timeit</a>.</p>\u000a\u000a<p>However if you wanted to write your own timing method strictly to learn, here is somewhere to get started using a decorator. </p>\u000a\u000a<pre><code>def timing(f):\u000a    def wrap(*args):\u000a        time1 = time.time()\u000a        ret = f(*args)\u000a        time2 = time.time()\u000a        print '%s function took %0.3f ms' % (f.func_name, (time2-time1)*1000.0)\u000a        return ret\u000a    return wrap\u000a</code></pre>\u000a\u000a<p>And the usage is very simple, just use the @timing decorator:</p>\u000a\u000a<pre><code>@timing\u000adef do_work():\u000a  #code\u000a</code></pre>\u000a\u000a<p>Note I'm calling <code>f.func_name</code> to get the function name as a string(in Python 2), or <code>f.__name__</code>  in Python 3.</p>\u000a
p1338
sVquestion_id
p1339
I5478351
sVlast_activity_date
p1340
I1301430080
sVcreation_date
p1341
I1301430080
sVscore
p1342
I149
sVowner
p1343
(dp1344
Vuser_id
p1345
I656769
sVprofile_image
p1346
Vhttps://www.gravatar.com/avatar/29e8624c3cb1594d3960b39bdd10f918?s=128&d=identicon&r=PG
p1347
sVuser_type
p1348
Vregistered
p1349
sVreputation
p1350
I45459
sVlink
p1351
Vhttp://stackoverflow.com/users/656769/mike-lewis
p1352
sVdisplay_name
p1353
VMike Lewis
p1354
ssVis_accepted
p1355
I01
sVanswer_id
p1356
I5478448
sa(dp1357
Vbody
p1358
V<p>Simply try converting it to an int and then bailing out if it doesn't work.</p>\u000a\u000a<pre><code>try:\u000a   val = int(userInput)\u000aexcept ValueError:\u000a   print("That's not an int!")\u000a</code></pre>\u000a
p1359
sVquestion_id
p1360
I5424716
sVlast_activity_date
p1361
I1300996427
sVcreation_date
p1362
I1300996427
sVscore
p1363
I162
sVowner
p1364
(dp1365
Vuser_id
p1366
I9453
sVprofile_image
p1367
Vhttps://www.gravatar.com/avatar/5548ce8747dd83e1ff1159dcf2d07ff0?s=128&d=identicon&r=PG
p1368
sVuser_type
p1369
Vregistered
p1370
sVreputation
p1371
I36195
sVlink
p1372
Vhttp://stackoverflow.com/users/9453/daniel-dipaolo
p1373
sVdisplay_name
p1374
VDaniel DiPaolo
p1375
ssVis_accepted
p1376
I01
sVanswer_id
p1377
I5424739
sa(dp1378
Vbody
p1379
V<p>I doubt very much that this is the best way to do it, but this is the way I came up with, and it does work. Also available <a href="https://gist.github.com/844388">as a gist</a>.</p>\u000a\u000a<pre><code>import yaml\u000aimport yaml.constructor\u000a\u000atry:\u000a    # included in standard lib from Python 2.7\u000a    from collections import OrderedDict\u000aexcept ImportError:\u000a    # try importing the backported drop-in replacement\u000a    # it's available on PyPI\u000a    from ordereddict import OrderedDict\u000a\u000aclass OrderedDictYAMLLoader(yaml.Loader):\u000a    """\u000a    A YAML loader that loads mappings into ordered dictionaries.\u000a    """\u000a\u000a    def __init__(self, *args, **kwargs):\u000a        yaml.Loader.__init__(self, *args, **kwargs)\u000a\u000a        self.add_constructor(u'tag:yaml.org,2002:map', type(self).construct_yaml_map)\u000a        self.add_constructor(u'tag:yaml.org,2002:omap', type(self).construct_yaml_map)\u000a\u000a    def construct_yaml_map(self, node):\u000a        data = OrderedDict()\u000a        yield data\u000a        value = self.construct_mapping(node)\u000a        data.update(value)\u000a\u000a    def construct_mapping(self, node, deep=False):\u000a        if isinstance(node, yaml.MappingNode):\u000a            self.flatten_mapping(node)\u000a        else:\u000a            raise yaml.constructor.ConstructorError(None, None,\u000a                'expected a mapping node, but found %s' % node.id, node.start_mark)\u000a\u000a        mapping = OrderedDict()\u000a        for key_node, value_node in node.value:\u000a            key = self.construct_object(key_node, deep=deep)\u000a            try:\u000a                hash(key)\u000a            except TypeError, exc:\u000a                raise yaml.constructor.ConstructorError('while constructing a mapping',\u000a                    node.start_mark, 'found unacceptable key (%s)' % exc, key_node.start_mark)\u000a            value = self.construct_object(value_node, deep=deep)\u000a            mapping[key] = value\u000a        return mapping\u000a</code></pre>\u000a
p1380
sVquestion_id
p1381
I5121931
sVlast_activity_date
p1382
I1298663712
sVcreation_date
p1383
I1298663712
sVscore
p1384
I12
sVowner
p1385
(dp1386
Vuser_id
p1387
I34443
sVprofile_image
p1388
Vhttps://www.gravatar.com/avatar/003c48b257949e2e7a8093af15d4e61c?s=128&d=identicon&r=PG
p1389
sVuser_type
p1390
Vregistered
p1391
sVreputation
p1392
I715
sVlink
p1393
Vhttp://stackoverflow.com/users/34443/eric-naeseth
p1394
sVaccept_rate
p1395
I100
sVdisplay_name
p1396
VEric Naeseth
p1397
ssVis_accepted
p1398
I01
sVanswer_id
p1399
I5121963
sa(dp1400
Vbody
p1401
V<pre><code>print type(someObject).__name__\u000a</code></pre>\u000a\u000a<p>If that doesn't suit you, use this:</p>\u000a\u000a<pre><code>print some_instance.__class__.__name__\u000a</code></pre>\u000a\u000a<p>Example:</p>\u000a\u000a<pre><code>class A:\u000a    pass\u000aprint type(A())\u000a# prints &lt;type 'instance'&gt;\u000aprint A().__class__.__name__\u000a# prints A\u000a</code></pre>\u000a\u000a<p>Also, it seems there are differences with <code>type()</code> when using new-style classes vs old-style (that is, inheritance from <code>object</code>). For a new-style class, <code>type(someObject).__name__</code> returns the name, and for old-style classes it returns <code>instance</code>.</p>\u000a
p1402
sVquestion_id
p1403
I5008828
sVlast_activity_date
p1404
I1297800556
sVcreation_date
p1405
I1297800071
sVscore
p1406
I107
sVowner
p1407
(dp1408
Vuser_id
p1409
I376873
sVprofile_image
p1410
Vhttps://www.gravatar.com/avatar/d2e4852dbd977d1b1f702d3ba2dbc0cb?s=128&d=identicon&r=PG
p1411
sVuser_type
p1412
Vregistered
p1413
sVreputation
p1414
I21060
sVlink
p1415
Vhttp://stackoverflow.com/users/376873/gabi-purcaru
p1416
sVaccept_rate
p1417
I78
sVdisplay_name
p1418
VGabi Purcaru
p1419
ssVis_accepted
p1420
I01
sVlast_edit_date
p1421
I1297800556
sVanswer_id
p1422
I5008854
sa(dp1423
Vbody
p1424
V<p>This seems to work really well (taken from another thread)</p>\u000a\u000a<pre><code>import urllib2, base64\u000a\u000arequest = urllib2.Request("http://api.foursquare.com/v1/user")\u000abase64string = base64.encodestring('%s:%s' % (username, password)).replace('\u005cn', '')\u000arequest.add_header("Authorization", "Basic %s" % base64string)   \u000aresult = urllib2.urlopen(request)\u000a</code></pre>\u000a
p1425
sVquestion_id
p1426
I635113
sVlast_activity_date
p1427
I1289854374
sVcreation_date
p1428
I1289854374
sVscore
p1429
I219
sVowner
p1430
(dp1431
Vuser_id
p1432
I352452
sVprofile_image
p1433
Vhttps://www.gravatar.com/avatar/61aa2d7d0c6e10e58026c4375023c38c?s=128&d=identicon&r=PG
p1434
sVuser_type
p1435
Vregistered
p1436
sVreputation
p1437
I3927
sVlink
p1438
Vhttp://stackoverflow.com/users/352452/flowpoke
p1439
sVaccept_rate
p1440
I70
sVdisplay_name
p1441
VFlowpoke
p1442
ssVis_accepted
p1443
I01
sVanswer_id
p1444
I4188709
sa(dp1445
Vbody
p1446
V<p>Actually we are not giving the answer anijhaw is looking for. Here is the one liner:</p>\u000a\u000a<pre><code>all(l[i] &lt;= l[i+1] for i in xrange(len(l)-1))\u000a</code></pre>\u000a
p1447
sVquestion_id
p1448
I3755136
sVlast_activity_date
p1449
I1285015728
sVcreation_date
p1450
I1285014783
sVscore
p1451
I107
sVowner
p1452
(dp1453
Vuser_id
p1454
I229075
sVprofile_image
p1455
Vhttps://www.gravatar.com/avatar/d6369e8a8a3a00e79bba94ce88d22503?s=128&d=identicon&r=PG
p1456
sVuser_type
p1457
Vregistered
p1458
sVreputation
p1459
I9255
sVlink
p1460
Vhttp://stackoverflow.com/users/229075/wai-yip-tung
p1461
sVaccept_rate
p1462
I71
sVdisplay_name
p1463
VWai Yip Tung
p1464
ssVis_accepted
p1465
I01
sVlast_edit_date
p1466
I1285015728
sVanswer_id
p1467
I3755251
sa(dp1468
Vbody
p1469
V<p><code>string.split('$$TEXT$$')</code> ?</p>\u000a\u000a<pre><code>&gt;&gt;&gt; a="1.MATCHES$$TEXT$$STRING"\u000a&gt;&gt;&gt; a.split("$$TEXT$$")\u000a['1.MATCHES', 'STRING']\u000a\u000a&gt;&gt;&gt; a="2.MATCHES $$TEXT$$ STRING"\u000a&gt;&gt;&gt; a.split("$$TEXT$$")\u000a['2.MATCHES ', ' STRING']\u000a</code></pre>\u000a\u000a<p>and:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; [x.strip() for x in "2.MATCHES $$TEXT$$ STRING".split("$$TEXT$$")]\u000a['2.MATCHES', 'STRING']\u000a</code></pre>\u000a
p1470
sVquestion_id
p1471
I3475251
sVlast_activity_date
p1472
I1281689335
sVcreation_date
p1473
I1281689335
sVscore
p1474
I115
sVowner
p1475
(dp1476
Vuser_id
p1477
I293929
sVprofile_image
p1478
Vhttps://www.gravatar.com/avatar/cd511289b5773fff5e7efe328846eef3?s=128&d=identicon&r=PG
p1479
sVuser_type
p1480
Vregistered
p1481
sVreputation
p1482
I20549
sVlink
p1483
Vhttp://stackoverflow.com/users/293929/adamk
p1484
sVaccept_rate
p1485
I100
sVdisplay_name
p1486
Vadamk
p1487
ssVis_accepted
p1488
I01
sVanswer_id
p1489
I3475270
sa(dp1490
Vbody
p1491
V<p>Use <code>Number</code> from the <code>numbers</code> module to test <code>isinstance(n, Number)</code> (available since 2.6).</p>\u000a\u000a<pre><code>&gt;&gt;&gt; from numbers import Number\u000a... from decimal import Decimal\u000a... from fractions import Fraction\u000a... for n in [2, 2.0, Decimal('2.0'), complex(2,0), Fraction(2,1), '2']:\u000a...     print '%15s %s' % (n.__repr__(), isinstance(n, Number))\u000a              2 True\u000a            2.0 True\u000a Decimal('2.0') True\u000a         (2+0j) True\u000a Fraction(2, 1) True\u000a            '2' False\u000a</code></pre>\u000a\u000a<p>This is, of course, contrary to duck typing.  If you are more concerned about how an object <em>acts</em> rather than what it <em>is</em>, perform your operations as if you have a number and use exceptions to tell you otherwise.</p>\u000a
p1492
sVquestion_id
p1493
I3441358
sVlast_activity_date
p1494
I1281383803
sVcreation_date
p1495
I1281367872
sVscore
p1496
I84
sVowner
p1497
(dp1498
Vuser_id
p1499
I1322401
sVprofile_image
p1500
Vhttps://www.gravatar.com/avatar/142cc2ccd5606eaac6ede2f48c4c60e9?s=128&d=identicon&r=PG
p1501
sVuser_type
p1502
Vregistered
p1503
sVreputation
p1504
I27426
sVlink
p1505
Vhttp://stackoverflow.com/users/1322401/steven-rumbalski
p1506
sVaccept_rate
p1507
I100
sVdisplay_name
p1508
VSteven Rumbalski
p1509
ssVis_accepted
p1510
I01
sVlast_edit_date
p1511
I1281383803
sVanswer_id
p1512
I3441601
sa(dp1513
Vbody
p1514
V<p>If I can rephrase your question, what you want is a dictionary with the years as keys and an array for each year containing a list of values associated with that year, right? Here's how I'd do it:</p>\u000a\u000a<pre><code>years_dict = dict()\u000a\u000afor line in list:\u000a    if line[0] in years_dict:\u000a        # append the new number to the existing array at this slot\u000a        years_dict[line[0]].append(line[1])\u000a    else:\u000a        # create a new array in this slot\u000a        years_dict[line[0]] = [line[1]]\u000a</code></pre>\u000a\u000a<p>What you should end up with in years_dict is a dictionary that looks like the following:</p>\u000a\u000a<pre><code>{\u000a    "2010": [2],\u000a    "2009": [4,7],\u000a    "1989": [8]\u000a}\u000a</code></pre>\u000a\u000a<p>In general, it's poor programming practice to create "parallel arrays", where items are implicitly associated with each other by having the same index rather than being proper children of a container that encompasses them both.</p>\u000a
p1515
sVquestion_id
p1516
I3199171
sVlast_activity_date
p1517
I1278540052
sVcreation_date
p1518
I1278540052
sVscore
p1519
I92
sVowner
p1520
(dp1521
Vuser_id
p1522
I346905
sVprofile_image
p1523
Vhttps://www.gravatar.com/avatar/23b7a3d185512152a19708cf9f4e2dc0?s=128&d=identicon&r=PG
p1524
sVuser_type
p1525
Vregistered
p1526
sVreputation
p1527
I2795
sVlink
p1528
Vhttp://stackoverflow.com/users/346905/faisal
p1529
sVdisplay_name
p1530
VFaisal
p1531
ssVis_accepted
p1532
I01
sVanswer_id
p1533
I3199256
sa(dp1534
Vbody
p1535
V<p>You don't set <code>PYTHONPATH</code>, you add entries to <a href="http://docs.python.org/library/sys.html" rel="noreferrer"><code>sys.path</code></a>. It's a list of directories that should be searched for Python packages, so you can just append your directories to that list.</p>\u000a\u000a<pre><code>sys.path.append('/path/to/whatever')\u000a</code></pre>\u000a\u000a<p>In fact, <code>sys.path</code> is initialized by splitting the value of <code>PYTHONPATH</code> on the path separator character (<code>:</code> on Linux-like systems, <code>;</code> on Windows).</p>\u000a\u000a<p>You can also add directories using <a href="http://docs.python.org/library/site.html" rel="noreferrer"><code>site.addsitedir</code></a>, and that method will also take into account <code>.pth</code> files existing within the directories you pass. (That would not be the case with directories you specify in <code>PYTHONPATH</code>.)</p>\u000a
p1536
sVquestion_id
p1537
I3108285
sVlast_activity_date
p1538
I1277368122
sVcreation_date
p1539
I1277368122
sVscore
p1540
I110
sVowner
p1541
(dp1542
Vuser_id
p1543
I56541
sVprofile_image
p1544
Vhttps://i.stack.imgur.com/C6rHm.png?s=128&g=1
p1545
sVuser_type
p1546
Vregistered
p1547
sVreputation
p1548
I76997
sVlink
p1549
Vhttp://stackoverflow.com/users/56541/david-z
p1550
sVaccept_rate
p1551
I81
sVdisplay_name
p1552
VDavid Z
p1553
ssVis_accepted
p1554
I01
sVanswer_id
p1555
I3108301
sa(dp1556
Vbody
p1557
V<pre><code>[i for i, v in enumerate(L) if v[0] == 53]\u000a</code></pre>\u000a
p1558
sVquestion_id
p1559
I2917372
sVlast_activity_date
p1560
I1274914053
sVcreation_date
p1561
I1274914053
sVscore
p1562
I67
sVowner
p1563
(dp1564
Vuser_id
p1565
I20862
sVprofile_image
p1566
Vhttps://www.gravatar.com/avatar/2343ae368d3241278581ce6c87f62a25?s=128&d=identicon&r=PG
p1567
sVuser_type
p1568
Vregistered
p1569
sVreputation
p1570
I481018
sVlink
p1571
Vhttp://stackoverflow.com/users/20862/ignacio-vazquez-abrams
p1572
sVaccept_rate
p1573
I60
sVdisplay_name
p1574
VIgnacio Vazquez-Abrams
p1575
ssVis_accepted
p1576
I01
sVanswer_id
p1577
I2917388
sa(dp1578
Vbody
p1579
V<p>You don't need to use a subclass of <code>Thread</code> to make this work - take a look at the simple example I'm posting below to see how:</p>\u000a\u000a<pre><code>from threading import Thread\u000afrom time import sleep\u000a\u000adef threaded_function(arg):\u000a    for i in range(arg):\u000a        print "running"\u000a        sleep(1)\u000a\u000a\u000aif __name__ == "__main__":\u000a    thread = Thread(target = threaded_function, args = (10, ))\u000a    thread.start()\u000a    thread.join()\u000a    print "thread finished...exiting"\u000a</code></pre>\u000a\u000a<p>Here I show how to use the threading module to create a thread which invokes a normal function as its target.  You can see how I can pass whatever arguments I need to it in the thread constructor.</p>\u000a
p1580
sVquestion_id
p1581
I2905965
sVlast_activity_date
p1582
I1274801528
sVcreation_date
p1583
I1274800856
sVscore
p1584
I134
sVowner
p1585
(dp1586
Vuser_id
p1587
I912
sVprofile_image
p1588
Vhttps://www.gravatar.com/avatar/62c795f7890d6c5b889b665f457320ee?s=128&d=identicon&r=PG
p1589
sVuser_type
p1590
Vregistered
p1591
sVreputation
p1592
I36301
sVlink
p1593
Vhttp://stackoverflow.com/users/912/jkp
p1594
sVaccept_rate
p1595
I75
sVdisplay_name
p1596
Vjkp
p1597
ssVis_accepted
p1598
I01
sVlast_edit_date
p1599
I1274801528
sVanswer_id
p1600
I2906014
sa(dp1601
Vbody
p1602
V<p>If you are using Python 2.6 or later you could use a class decorator, perhaps something like this (warning: untested code).</p>\u000a\u000a<pre><code>def class_decorator(cls):\u000a   for name, method in cls.__dict__.iteritems():\u000a        if hasattr(method, "use_class"):\u000a            # do something with the method and class\u000a            print name, cls\u000a   return cls\u000a\u000adef method_decorator(view):\u000a    # mark the method as something that requires view's class\u000a    view.use_class = True\u000a    return view\u000a\u000a@class_decorator\u000aclass ModelA(object):\u000a    @method_decorator\u000a    def a_method(self):\u000a        # do some stuff\u000a        pass\u000a</code></pre>\u000a\u000a<p>The method decorator marks the method as one that is of interest by adding a "use_class" attribute - functions and methods are also objects, so you can attach additional metadata to them.</p>\u000a\u000a<p>After the class has been created the class decorator then goes through all the methods and does whatever is needed on the methods that have been marked.</p>\u000a\u000a<p>If you want all the methods to be affected then you could leave out the method decorator and just use the class decorator.</p>\u000a
p1603
sVquestion_id
p1604
I2366713
sVlast_activity_date
p1605
I1267571456
sVcreation_date
p1606
I1267571456
sVscore
p1607
I46
sVowner
p1608
(dp1609
Vuser_id
p1610
I206417
sVprofile_image
p1611
Vhttps://www.gravatar.com/avatar/448da181fc6df1794b855848b84f0be9?s=128&d=identicon&r=PG
p1612
sVuser_type
p1613
Vregistered
p1614
sVreputation
p1615
I16282
sVlink
p1616
Vhttp://stackoverflow.com/users/206417/dave-kirby
p1617
sVaccept_rate
p1618
I71
sVdisplay_name
p1619
VDave Kirby
p1620
ssVis_accepted
p1621
I01
sVanswer_id
p1622
I2367605
sa(dp1623
Vbody
p1624
V<p>The <code>HTTPError</code> <a href="http://docs.python.org/library/urllib2.html#urllib2.HTTPError" rel="noreferrer">is a file-like object</a>.  You can catch it and then <code>read</code> its contents.</p>\u000a\u000a<pre><code>try:\u000a    resp = urllib2.urlopen(url)\u000a    contents = resp.read()\u000aexcept urllib2.HTTPError, error:\u000a    contents = error.read()\u000a</code></pre>\u000a
p1625
sVquestion_id
p1626
I2233687
sVlast_activity_date
p1627
I1265764733
sVcreation_date
p1628
I1265764733
sVscore
p1629
I134
sVowner
p1630
(dp1631
Vuser_id
p1632
I48837
sVprofile_image
p1633
Vhttps://www.gravatar.com/avatar/794b7aec23a44e6982349be0b14bebd0?s=128&d=identicon&r=PG
p1634
sVuser_type
p1635
Vregistered
p1636
sVreputation
p1637
I16610
sVlink
p1638
Vhttp://stackoverflow.com/users/48837/joe-holloway
p1639
sVaccept_rate
p1640
I94
sVdisplay_name
p1641
VJoe Holloway
p1642
ssVis_accepted
p1643
I01
sVanswer_id
p1644
I2233778
sa(dp1645
Vbody
p1646
V<p>With the following program</p>\u000a\u000a<pre><code>#! /usr/bin/env python\u000a\u000aimport foo\u000a\u000adef fullname(o):\u000a  return o.__module__ + "." + o.__class__.__name__\u000a\u000abar = foo.Bar()\u000aprint fullname(bar)\u000a</code></pre>\u000a\u000a<p>and <code>Bar</code> defined as</p>\u000a\u000a<pre><code>class Bar(object):\u000a  def __init__(self, v=42):\u000a    self.val = v\u000a</code></pre>\u000a\u000a<p>the output is</p>\u000a\u000a<pre><code>$ ./prog.py\u000afoo.Bar\u000a</code></pre>\u000a
p1647
sVquestion_id
p1648
I2020014
sVlast_activity_date
p1649
I1262865782
sVcreation_date
p1650
I1262865782
sVscore
p1651
I69
sVowner
p1652
(dp1653
Vuser_id
p1654
I123109
sVprofile_image
p1655
Vhttps://www.gravatar.com/avatar/157c96de3d125abc1c363ff25c20dfaf?s=128&d=identicon&r=PG
p1656
sVuser_type
p1657
Vregistered
p1658
sVreputation
p1659
I82265
sVlink
p1660
Vhttp://stackoverflow.com/users/123109/greg-bacon
p1661
sVaccept_rate
p1662
I59
sVdisplay_name
p1663
VGreg Bacon
p1664
ssVis_accepted
p1665
I01
sVanswer_id
p1666
I2020083
sa(dp1667
Vbody
p1668
V<p><strong>Python requires specifying self.</strong>  The result is there's never any confusion over what's a member and what's not, even without the full class definition visible.  This leads to useful properties, such as: you can't add members which accidentally shadow non-members and thereby break code.</p>\u000a\u000a<p>One extreme example: you can write a class without any knowledge of what base classes it might have, and always know whether you are accessing a member or not:</p>\u000a\u000a<pre><code>class A(some_function()):\u000a  def f(self):\u000a    self.member = 42\u000a    self.method()\u000a</code></pre>\u000a\u000a<p>That's the <em>complete</em> code!  (some_function returns the type used as a base.)</p>\u000a\u000a<p>Another, where the methods of a class are dynamically composed:</p>\u000a\u000a<pre><code>class B(object):\u000a  pass\u000a\u000aprint B()\u000a# &lt;__main__.B object at 0xb7e4082c&gt;\u000a\u000adef B_init(self):\u000a  self.answer = 42\u000adef B_str(self):\u000a  return "&lt;The answer is %s.&gt;" % self.answer\u000a# notice these functions require no knowledge of the actual class\u000a# how hard are they to read and realize that "members" are used?\u000a\u000aB.__init__ = B_init\u000aB.__str__ = B_str\u000a\u000aprint B()\u000a# &lt;The answer is 42.&gt;\u000a</code></pre>\u000a\u000a<p>Remember, both of these examples are extreme and you won't see them every day, nor am I suggesting you should often write code like this, but they do clearly show aspects of self being explicitly required.</p>\u000a
p1669
sVquestion_id
p1670
I1984104
sVlast_activity_date
p1671
I1262240845
sVcreation_date
p1672
I1262239049
sVscore
p1673
I68
sVowner
p1674
(dp1675
Vdisplay_name
p1676
VRoger Pate
p1677
sVuser_type
p1678
Vdoes_not_exist
p1679
ssVis_accepted
p1680
I01
sVlast_edit_date
p1681
I1262240845
sVanswer_id
p1682
I1984121
sa(dp1683
Vbody
p1684
V<p>No, there is no such method. The end of iteration is indicated by an exception. See the <a href="http://docs.python.org/library/stdtypes.html#iterator-types" rel="noreferrer">documentation</a>.</p>\u000a
p1685
sVquestion_id
p1686
I1966591
sVlast_activity_date
p1687
I1261937332
sVcreation_date
p1688
I1261937332
sVscore
p1689
I50
sVowner
p1690
(dp1691
Vuser_id
p1692
I89847
sVprofile_image
p1693
Vhttps://www.gravatar.com/avatar/7cd132a33dda5d9ee000f59082018763?s=128&d=identicon&r=PG
p1694
sVuser_type
p1695
Vregistered
p1696
sVreputation
p1697
I24302
sVlink
p1698
Vhttp://stackoverflow.com/users/89847/avakar
p1699
sVaccept_rate
p1700
I62
sVdisplay_name
p1701
Vavakar
p1702
ssVis_accepted
p1703
I01
sVanswer_id
p1704
I1966609
sa(dp1705
Vbody
p1706
V<p><code>virtualenv</code> provides a python interpreter instance, not an application instance.  You wouldn't normally create your application files within the directories containing a system's default python, likewise there's no requirement to locate your application within a virtualenv directory.  For example, you might have a project where you have multiple applications using the same virtualenv.  Or, you may be testing an application with a virtualenv that will later be deployed with a system python.  Or, you may be packaging up a standalone app where it might make sense to have the virtualenv directory located somewhere within the app directory itself.  So, in general, I don't think there is one right answer to the question.  And, a good thing about <code>virtualenv</code> is that it supports many different use cases: there doesn't need to be one right way.</p>\u000a
p1707
sVquestion_id
p1708
I1783146
sVlast_activity_date
p1709
I1259001856
sVcreation_date
p1710
I1259001856
sVscore
p1711
I59
sVowner
p1712
(dp1713
Vuser_id
p1714
I145403
sVprofile_image
p1715
Vhttps://www.gravatar.com/avatar/137b739a75a31399e6d07140302c8efc?s=128&d=identicon&r=PG
p1716
sVuser_type
p1717
Vregistered
p1718
sVreputation
p1719
I57104
sVlink
p1720
Vhttp://stackoverflow.com/users/145403/ned-deily
p1721
sVdisplay_name
p1722
VNed Deily
p1723
ssVis_accepted
p1724
I01
sVanswer_id
p1725
I1785127
sa(dp1726
Vbody
p1727
V<pre><code>a = '123' if b else '456'\u000a</code></pre>\u000a
p1728
sVquestion_id
p1729
I1686390
sVlast_activity_date
p1730
I1257498973
sVcreation_date
p1731
I1257498973
sVscore
p1732
I142
sVowner
p1733
(dp1734
Vuser_id
p1735
I12855
sVprofile_image
p1736
Vhttps://www.gravatar.com/avatar/e6488132d206883770017ba97d0f521f?s=128&d=identicon&r=PG
p1737
sVuser_type
p1738
Vregistered
p1739
sVreputation
p1740
I142797
sVlink
p1741
Vhttp://stackoverflow.com/users/12855/silentghost
p1742
sVaccept_rate
p1743
I86
sVdisplay_name
p1744
VSilentGhost
p1745
ssVis_accepted
p1746
I01
sVanswer_id
p1747
I1686400
sa(dp1748
Vbody
p1749
V<p>Here's an elegant, Pythonic way to do it:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; array([[1,2,3],]*3)\u000aarray([[1, 2, 3],\u000a       [1, 2, 3],\u000a       [1, 2, 3]])\u000a\u000a&gt;&gt;&gt; array([[1,2,3],]*3).transpose()\u000aarray([[1, 1, 1],\u000a       [2, 2, 2],\u000a       [3, 3, 3]])\u000a</code></pre>\u000a\u000a<p>the problem with <code>[16]</code> seems to be that the transpose has no effect for an array. you're probably wanting a matrix instead:</p>\u000a\u000a<pre><code>&gt;&gt;&gt; x = array([1,2,3])\u000a&gt;&gt;&gt; x\u000aarray([1, 2, 3])\u000a&gt;&gt;&gt; x.transpose()\u000aarray([1, 2, 3])\u000a&gt;&gt;&gt; matrix([1,2,3])\u000amatrix([[1, 2, 3]])\u000a&gt;&gt;&gt; matrix([1,2,3]).transpose()\u000amatrix([[1],\u000a        [2],\u000a        [3]])\u000a</code></pre>\u000a
p1750
sVquestion_id
p1751
I1550130
sVlast_activity_date
p1752
I1255247963
sVcreation_date
p1753
I1255247963
sVscore
p1754
I33
sVowner
p1755
(dp1756
Vuser_id
p1757
I157237
sVprofile_image
p1758
Vhttps://www.gravatar.com/avatar/7c6b50948624b1ccfba1872bc82ecaed?s=128&d=identicon&r=PG
p1759
sVuser_type
p1760
Vregistered
p1761
sVreputation
p1762
I65911
sVlink
p1763
Vhttp://stackoverflow.com/users/157237/peter
p1764
sVaccept_rate
p1765
I97
sVdisplay_name
p1766
VPeter
p1767
ssVis_accepted
p1768
I01
sVanswer_id
p1769
I1550137
sa(dp1770
Vbody
p1771
V<p>Python's mostly implementing a pragmatically tinged flavor of <a href="http://en.wikipedia.org/wiki/Command-query_separation" rel="noreferrer">command-query separation</a>: mutators return <code>None</code> (with pragmatically induced exceptions such as <code>pop</code>;-) so they can't possibly be confused with accessors (and in the same vein, assignment is not an expression, the statement-expression separation is there, and so forth).</p>\u000a\u000a<p>That doesn't mean there aren't a lot of ways to merge things up when you really want, e.g., <code>dict(a, **award_dict)</code> makes a new dict much like the one you appear to wish <code>.update</code> returned -- so why not use THAT if you really feel it's important?</p>\u000a\u000a<p><strong>Edit</strong>: btw, no need, in your specific case, to create <code>a</code> along the way, either:</p>\u000a\u000a<pre><code>dict(name=name, description=desc % count, points=points, parent_award=parent,\u000a     **award_dict)\u000a</code></pre>\u000a\u000a<p>creates a single dict with exactly the same semantics as your <code>a.update(award_dict)</code> (including, in case of conflicts, the fact that entries in <code>award_dict</code> override those you're giving explicitly; to get the other semantics, i.e., to have explicit entries "winning" such conflicts, pass <code>award_dict</code> as the sole <em>positional</em> arg, <em>before</em> the keyword ones, and bereft of the <code>**</code> form -- <code>dict(award_dict, name=name</code> etc etc).</p>\u000a
p1772
sVquestion_id
p1773
I1452995
sVlast_activity_date
p1774
I1253542895
sVcreation_date
p1775
I1253511088
sVscore
p1776
I128
sVowner
p1777
(dp1778
Vuser_id
p1779
I95810
sVprofile_image
p1780
Vhttps://www.gravatar.com/avatar/e8d5fe90f1fe2148bf130cccd4dc311c?s=128&d=identicon&r=PG
p1781
sVuser_type
p1782
Vregistered
p1783
sVreputation
p1784
I516089
sVlink
p1785
Vhttp://stackoverflow.com/users/95810/alex-martelli
p1786
sVaccept_rate
p1787
I80
sVdisplay_name
p1788
VAlex Martelli
p1789
ssVis_accepted
p1790
I01
sVlast_edit_date
p1791
I1253542895
sVanswer_id
p1792
I1453013
sa(dp1793
Vbody
p1794
V<p>To simply repeat the same letter 10 times:</p>\u000a\u000a<pre><code>string_val = "x" * 10  # gives you "xxxxxxxxxx"\u000a</code></pre>\u000a\u000a<p>And if you want something more complex, like <code>n</code> random lowercase letters, it's still only one line of code (not counting the import statements and defining <code>n</code>):</p>\u000a\u000a<pre><code>from random import choice\u000afrom string import lowercase\u000an = 10\u000a\u000astring_val = "".join(choice(lowercase) for i in range(n))\u000a</code></pre>\u000a
p1795
sVquestion_id
p1796
I1424005
sVlast_activity_date
p1797
I1252964029
sVcreation_date
p1798
I1252963720
sVscore
p1799
I155
sVowner
p1800
(dp1801
Vuser_id
p1802
I1694
sVprofile_image
p1803
Vhttps://www.gravatar.com/avatar/bd42b746d79be5dd325a8e94bc00ac58?s=128&d=identicon&r=PG
p1804
sVuser_type
p1805
Vregistered
p1806
sVreputation
p1807
I93134
sVlink
p1808
Vhttp://stackoverflow.com/users/1694/eli-courtwright
p1809
sVaccept_rate
p1810
I94
sVdisplay_name
p1811
VEli Courtwright
p1812
ssVis_accepted
p1813
I01
sVlast_edit_date
p1814
I1252964029
sVanswer_id
p1815
I1424016
sa(dp1816
Vbody
p1817
V<pre><code>A = [1,2,3,4,5,6]\u000aB = A[:len(A)/2]\u000aC = A[len(A)/2:]\u000a</code></pre>\u000a\u000a<p>If you want a function:</p>\u000a\u000a<pre><code>def split_list(a_list):\u000a    half = len(a_list)/2\u000a    return a_list[:half], a_list[half:]\u000a\u000aA = [1,2,3,4,5,6]\u000aB, C = split_list(A)\u000a</code></pre>\u000a
p1818
sVquestion_id
p1819
I752308
sVlast_activity_date
p1820
I1239810907
sVcreation_date
p1821
I1239810582
sVscore
p1822
I102
sVowner
p1823
(dp1824
Vuser_id
p1825
I59753
sVprofile_image
p1826
Vhttps://i.stack.imgur.com/dO2Ik.png?s=128&g=1
p1827
sVuser_type
p1828
Vregistered
p1829
sVreputation
p1830
I8433
sVlink
p1831
Vhttp://stackoverflow.com/users/59753/jason-coon
p1832
sVaccept_rate
p1833
I100
sVdisplay_name
p1834
VJason Coon
p1835
ssVis_accepted
p1836
I01
sVlast_edit_date
p1837
I1239810907
sVanswer_id
p1838
I752330
sa(dp1839
Vbody
p1840
V<p>The simple answer to your question: no, there is no simple way.  There are a whole lot of work-arounds.</p>\u000a\u000a<p>There really shouldn't be a simple way, because of what generators are: a way to output a sequence of values <em>without holding the sequence in memory</em>.  So there's no backward traversal.</p>\u000a\u000a<p>You could write a has_next function or maybe even slap it on to a generator as a method with a fancy decorator if you wanted to.</p>\u000a
p1841
sVquestion_id
p1842
I661603
sVlast_activity_date
p1843
I1237479912
sVcreation_date
p1844
I1237479912
sVscore
p1845
I30
sVowner
p1846
(dp1847
Vuser_id
p1848
I50272
sVprofile_image
p1849
Vhttps://www.gravatar.com/avatar/9f3cf6b22b9851d130b98ae791d27f8e?s=128&d=identicon&r=PG
p1850
sVuser_type
p1851
Vregistered
p1852
sVreputation
p1853
I6876
sVlink
p1854
Vhttp://stackoverflow.com/users/50272/david-berger
p1855
sVaccept_rate
p1856
I90
sVdisplay_name
p1857
VDavid Berger
p1858
ssVis_accepted
p1859
I01
sVanswer_id
p1860
I662925
sa(dp1861
Vbody
p1862
V<p><a href="http://docs.python.org/library/subprocess.html" rel="noreferrer">subprocess.Popen</a> does exactly what you want.</p>\u000a\u000a<pre><code>from subprocess import Popen\u000ap = Popen(['watch', 'ls']) # something long running\u000a# ... do other stuff while subprocess is running\u000ap.terminate()\u000a</code></pre>\u000a\u000a<p>(Edit to complete the answer from comments)</p>\u000a\u000a<p>The Popen instance can do various other things like you can <a href="http://docs.python.org/library/subprocess.html#subprocess.Popen.poll" rel="noreferrer"><code>poll()</code></a> it to see if it is still running, and you can <a href="http://docs.python.org/library/subprocess.html#subprocess.Popen.communicate" rel="noreferrer"><code>communicate()</code></a> with it to send it data on stdin, and wait for it to terminate.</p>\u000a
p1863
sVquestion_id
p1864
I636561
sVlast_activity_date
p1865
I1236809763
sVcreation_date
p1866
I1236809132
sVscore
p1867
I79
sVowner
p1868
(dp1869
Vuser_id
p1870
I28380
sVprofile_image
p1871
Vhttps://www.gravatar.com/avatar/e1f7597153b6acca55f0b522481e137d?s=128&d=identicon&r=PG
p1872
sVuser_type
p1873
Vregistered
p1874
sVreputation
p1875
I29484
sVlink
p1876
Vhttp://stackoverflow.com/users/28380/ali-afshar
p1877
sVaccept_rate
p1878
I92
sVdisplay_name
p1879
VAli Afshar
p1880
ssVis_accepted
p1881
I01
sVlast_edit_date
p1882
I1236809763
sVanswer_id
p1883
I636570
sa(dp1884
Vbody
p1885
V<p>All imports in <code>__init__.py</code> are made available when you import the package (directory) that contains it.</p>\u000a\u000a<p>Example:</p>\u000a\u000a<p><code>./dir/__init__.py</code>:</p>\u000a\u000a<pre><code>import something\u000a</code></pre>\u000a\u000a<p><code>./test.py</code>:</p>\u000a\u000a<pre><code>import dir\u000a# can now use dir.something\u000a</code></pre>\u000a\u000a<p>EDIT: forgot to mention, the code in <code>__init__.py</code> runs the first time you import any module from that directory. So it's normally a good place to put any package-level initialisation code.</p>\u000a\u000a<p>EDIT2: dgrant pointed out to a possible confusion in my example. In <code>__init__.py</code> <code>import something</code> can import any module, not necessary from the package. For example, we can replace it with <code>import datetime</code>, then in our top level <code>test.py</code> both of these snippets will work:</p>\u000a\u000a<pre><code>import dir\u000aprint dir.datetime.datetime.now()\u000a</code></pre>\u000a\u000a<p>and</p>\u000a\u000a<pre><code>import dir.some_module_in_dir\u000aprint dir.datetime.datetime.now()\u000a</code></pre>\u000a\u000a<p>The bottom line is: all names assigned in <code>__init__.py</code>, be it imported modules, functions or classes, are automatically available in the package namespace whenever you import the package or a module in the package.</p>\u000a
p1886
sVquestion_id
p1887
I119167
sVlast_activity_date
p1888
I1222153538
sVcreation_date
p1889
I1222145271
sVscore
p1890
I64
sVowner
p1891
(dp1892
Vuser_id
p1893
I712
sVprofile_image
p1894
Vhttps://www.gravatar.com/avatar/bd319cfb666b090230d12d3d3284d018?s=128&d=identicon&r=PG
p1895
sVuser_type
p1896
Vregistered
p1897
sVreputation
p1898
I13016
sVlink
p1899
Vhttp://stackoverflow.com/users/712/alexander-kojevnikov
p1900
sVdisplay_name
p1901
VAlexander Kojevnikov
p1902
ssVis_accepted
p1903
I01
sVlast_edit_date
p1904
I1222153538
sVanswer_id
p1905
I119178
sasVquota_max
p1906
I300
sVquota_remaining
p1907
I154
s.